
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013720  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  080138b0  080138b0  000148b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ed4  08013ed4  000151d8  2**0
                  CONTENTS
  4 .ARM          00000008  08013ed4  08013ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013edc  08013edc  000151d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013edc  08013edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ee0  08013ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08013ee4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ce4  200001d8  080140bc  000151d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003ebc  080140bc  00015ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f868  00000000  00000000  00015208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006aba  00000000  00000000  00054a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003a48  00000000  00000000  0005b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002cd4  00000000  00000000  0005ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000324fa  00000000  00000000  00061c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003687e  00000000  00000000  00094146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129617  00000000  00000000  000ca9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f3fdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000111ac  00000000  00000000  001f4020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  002051cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013898 	.word	0x08013898

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08013898 	.word	0x08013898

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Tasks_Init>:
int rx_index = 0;

uint8_t buffer_ros[6] = {0,0,0,0,0,0};

void Tasks_Init(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b096      	sub	sp, #88	@ 0x58
 8001008:	af00      	add	r7, sp, #0
	osThreadDef(UART, StartUart, osPriorityNormal, 0, 128);
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <Tasks_Init+0x7c>)
 800100c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UARTHandle = osThreadCreate(osThread(UART), NULL);
 800101e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f00c fc5a 	bl	800d8de <osThreadCreate>
 800102a:	4603      	mov	r3, r0
 800102c:	4a15      	ldr	r2, [pc, #84]	@ (8001084 <Tasks_Init+0x80>)
 800102e:	6013      	str	r3, [r2, #0]

	osThreadDef(IMU, StartIMU, osPriorityHigh, 0, 128);
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <Tasks_Init+0x84>)
 8001032:	f107 0420 	add.w	r4, r7, #32
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMUHandle = osThreadCreate(osThread(IMU), NULL);
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00c fc47 	bl	800d8de <osThreadCreate>
 8001050:	4603      	mov	r3, r0
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <Tasks_Init+0x88>)
 8001054:	6013      	str	r3, [r2, #0]

	osThreadDef(GPS, StartGPS, osPriorityAboveNormal, 0, 128);
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <Tasks_Init+0x8c>)
 8001058:	1d3c      	adds	r4, r7, #4
 800105a:	461d      	mov	r5, r3
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00c fc36 	bl	800d8de <osThreadCreate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <Tasks_Init+0x90>)
 8001076:	6013      	str	r3, [r2, #0]
	osThreadDef(I2C, StartI2C, osPriorityBelowNormal, 0, 64);
	I2CHandle = osThreadCreate(osThread(I2C), NULL);

	osThreadDef(SPI, StartSPI, osPriorityBelowNormal, 0, 64);
	SPIHandle = osThreadCreate(osThread(SPI), NULL);*/
}
 8001078:	bf00      	nop
 800107a:	3758      	adds	r7, #88	@ 0x58
 800107c:	46bd      	mov	sp, r7
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	080138b8 	.word	0x080138b8
 8001084:	200001fc 	.word	0x200001fc
 8001088:	080138d8 	.word	0x080138d8
 800108c:	200001f4 	.word	0x200001f4
 8001090:	080138f8 	.word	0x080138f8
 8001094:	200001f8 	.word	0x200001f8

08001098 <Process_pwm_frame>:

void Process_pwm_frame(uint8_t * frame)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b09a      	sub	sp, #104	@ 0x68
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t pwm_num = frame [0];
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	uint8_t channel_num = frame [1];
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	uint32_t pwm_value = (uint32_t)frame[5]<<24 |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3305      	adds	r3, #5
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	061a      	lsls	r2, r3, #24
						 (uint32_t)frame[4]<<16 |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3304      	adds	r3, #4
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	041b      	lsls	r3, r3, #16
	uint32_t pwm_value = (uint32_t)frame[5]<<24 |
 80010c0:	431a      	orrs	r2, r3
						 (uint32_t)frame[3]<<8 |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3303      	adds	r3, #3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	021b      	lsls	r3, r3, #8
						 (uint32_t)frame[4]<<16 |
 80010ca:	4313      	orrs	r3, r2
						 (uint32_t)frame[2] ; //passage de little endian a big endian
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	3202      	adds	r2, #2
 80010d0:	7812      	ldrb	r2, [r2, #0]
						 (uint32_t)frame[3]<<8 |
 80010d2:	4313      	orrs	r3, r2
	uint32_t pwm_value = (uint32_t)frame[5]<<24 |
 80010d4:	657b      	str	r3, [r7, #84]	@ 0x54

	TIM_HandleTypeDef htim;
	uint32_t channel;

	switch(pwm_num){
 80010d6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d002      	beq.n	80010e4 <Process_pwm_frame+0x4c>
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d009      	beq.n	80010f6 <Process_pwm_frame+0x5e>
			break;
		case 8 :
			htim = htim8;
			break;
		default:
			return;
 80010e2:	e089      	b.n	80011f8 <Process_pwm_frame+0x160>
			htim = htim3;
 80010e4:	4a46      	ldr	r2, [pc, #280]	@ (8001200 <Process_pwm_frame+0x168>)
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4611      	mov	r1, r2
 80010ec:	224c      	movs	r2, #76	@ 0x4c
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00f fa25 	bl	801053e <memcpy>
			break;
 80010f4:	e008      	b.n	8001108 <Process_pwm_frame+0x70>
			htim = htim8;
 80010f6:	4a43      	ldr	r2, [pc, #268]	@ (8001204 <Process_pwm_frame+0x16c>)
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4611      	mov	r1, r2
 80010fe:	224c      	movs	r2, #76	@ 0x4c
 8001100:	4618      	mov	r0, r3
 8001102:	f00f fa1c 	bl	801053e <memcpy>
			break;
 8001106:	bf00      	nop
	}

	switch(channel_num){
 8001108:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800110c:	3b01      	subs	r3, #1
 800110e:	2b03      	cmp	r3, #3
 8001110:	d871      	bhi.n	80011f6 <Process_pwm_frame+0x15e>
 8001112:	a201      	add	r2, pc, #4	@ (adr r2, 8001118 <Process_pwm_frame+0x80>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001129 	.word	0x08001129
 800111c:	0800112f 	.word	0x0800112f
 8001120:	08001135 	.word	0x08001135
 8001124:	0800113b 	.word	0x0800113b
		case 1:
			channel = TIM_CHANNEL_1;
 8001128:	2300      	movs	r3, #0
 800112a:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 800112c:	e008      	b.n	8001140 <Process_pwm_frame+0xa8>
		case 2:
			channel = TIM_CHANNEL_2;
 800112e:	2304      	movs	r3, #4
 8001130:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 8001132:	e005      	b.n	8001140 <Process_pwm_frame+0xa8>
		case 3:
			channel = TIM_CHANNEL_3;
 8001134:	2308      	movs	r3, #8
 8001136:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 8001138:	e002      	b.n	8001140 <Process_pwm_frame+0xa8>
		case 4:
			channel = TIM_CHANNEL_4;
 800113a:	230c      	movs	r3, #12
 800113c:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 800113e:	bf00      	nop
		default:
			return;
	}

	if ((pwm_value >= 0x3f800000)&& (pwm_value < 0x3fc00000))
 8001140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001142:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8001146:	d307      	bcc.n	8001158 <Process_pwm_frame+0xc0>
 8001148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800114a:	f1b3 5f7f 	cmp.w	r3, #1069547520	@ 0x3fc00000
 800114e:	d203      	bcs.n	8001158 <Process_pwm_frame+0xc0>
	{
	 	printf("reculer");
 8001150:	482d      	ldr	r0, [pc, #180]	@ (8001208 <Process_pwm_frame+0x170>)
 8001152:	f00e ffc3 	bl	80100dc <iprintf>
 8001156:	e00a      	b.n	800116e <Process_pwm_frame+0xd6>
	}
	else if ((pwm_value >0x3fc00000)&& (pwm_value <=0x40000000))
 8001158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800115a:	f1b3 5f7f 	cmp.w	r3, #1069547520	@ 0x3fc00000
 800115e:	d906      	bls.n	800116e <Process_pwm_frame+0xd6>
 8001160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001166:	d802      	bhi.n	800116e <Process_pwm_frame+0xd6>
	{
	    printf("avancer");
 8001168:	4828      	ldr	r0, [pc, #160]	@ (800120c <Process_pwm_frame+0x174>)
 800116a:	f00e ffb7 	bl	80100dc <iprintf>
	}

	float pwm_value2 = *((float*)&pwm_value); //passer la valeur de uint32_t à float
 800116e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint32_t ccr_value = (uint32_t)((pwm_value2/20.0)*2000); //ARR = 1999
 8001176:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001178:	f7ff f9f6 	bl	8000568 <__aeabi_f2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <Process_pwm_frame+0x178>)
 8001182:	f7ff fb73 	bl	800086c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <Process_pwm_frame+0x17c>)
 8001194:	f7ff fa40 	bl	8000618 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fd12 	bl	8000bc8 <__aeabi_d2uiz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	65bb      	str	r3, [r7, #88]	@ 0x58

	__HAL_TIM_SET_COMPARE(&htim,channel, ccr_value); //écrit directement dans le registre du timer pour changer la valeur PWM
 80011a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d103      	bne.n	80011b6 <Process_pwm_frame+0x11e>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b4:	e020      	b.n	80011f8 <Process_pwm_frame+0x160>
 80011b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d103      	bne.n	80011c4 <Process_pwm_frame+0x12c>
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80011c2:	e019      	b.n	80011f8 <Process_pwm_frame+0x160>
 80011c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d103      	bne.n	80011d2 <Process_pwm_frame+0x13a>
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011d0:	e012      	b.n	80011f8 <Process_pwm_frame+0x160>
 80011d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	d103      	bne.n	80011e0 <Process_pwm_frame+0x148>
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	e00b      	b.n	80011f8 <Process_pwm_frame+0x160>
 80011e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d103      	bne.n	80011ee <Process_pwm_frame+0x156>
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ec:	e004      	b.n	80011f8 <Process_pwm_frame+0x160>
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80011f4:	e000      	b.n	80011f8 <Process_pwm_frame+0x160>
			return;
 80011f6:	bf00      	nop

}
 80011f8:	3768      	adds	r7, #104	@ 0x68
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000ee4 	.word	0x20000ee4
 8001204:	20000fc8 	.word	0x20000fc8
 8001208:	08013914 	.word	0x08013914
 800120c:	0801391c 	.word	0x0801391c
 8001210:	40340000 	.word	0x40340000
 8001214:	409f4000 	.word	0x409f4000

08001218 <IMU_Receive_Transmit_Data>:

void IMU_Receive_Transmit_Data()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	IMU_GetData();
 800121c:	f000 fa48 	bl	80016b0 <IMU_GetData>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <GetData_GPS>:

void GetData_GPS(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
 8001228:	2201      	movs	r2, #1
 800122a:	4903      	ldr	r1, [pc, #12]	@ (8001238 <GetData_GPS+0x14>)
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <GetData_GPS+0x18>)
 800122e:	f00a ffef 	bl	800c210 <HAL_UART_Receive_IT>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200012ac 	.word	0x200012ac
 800123c:	200011a0 	.word	0x200011a0

08001240 <HAL_UART_TxCpltCallback>:
		 }
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART3)
    {

    }

    if(huart -> Instance == UART4)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <HAL_UART_RxCpltCallback+0x2c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d107      	bne.n	8001276 <HAL_UART_RxCpltCallback+0x22>
    	/*uint32_t test = (uint32_t)buffer_ros[5]<<24 |
    					(uint32_t)buffer_ros[4]<<16 |
						(uint32_t)buffer_ros[3]<<8 |
						(uint32_t)buffer_ros[2] ;*/

    	Process_pwm_frame(buffer_ros);
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <HAL_UART_RxCpltCallback+0x30>)
 8001268:	f7ff ff16 	bl	8001098 <Process_pwm_frame>

    	HAL_UART_Receive_IT(&huart4, buffer_ros, 6);
 800126c:	2206      	movs	r2, #6
 800126e:	4905      	ldr	r1, [pc, #20]	@ (8001284 <HAL_UART_RxCpltCallback+0x30>)
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_UART_RxCpltCallback+0x34>)
 8001272:	f00a ffcd 	bl	800c210 <HAL_UART_Receive_IT>
    }
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40004c00 	.word	0x40004c00
 8001284:	20000200 	.word	0x20000200
 8001288:	20001014 	.word	0x20001014

0800128c <Transmit_data_to_usb>:



void Transmit_data_to_usb(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
	MESSAGE_Typedef message_appli;
	message_appli = MESSAGE_ReadMailboxNoDelay(Appli_Mailbox);
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <Transmit_data_to_usb+0x50>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fb3c 	bl	8001918 <MESSAGE_ReadMailboxNoDelay>
	//message_appli = MESSAGE_ReadMailbox(Appli_Mailbox);
	switch(message_appli.id){
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	2b40      	cmp	r3, #64	@ 0x40
 80012a4:	d00f      	beq.n	80012c6 <Transmit_data_to_usb+0x3a>
 80012a6:	2b40      	cmp	r3, #64	@ 0x40
 80012a8:	dc12      	bgt.n	80012d0 <Transmit_data_to_usb+0x44>
 80012aa:	2b20      	cmp	r3, #32
 80012ac:	d006      	beq.n	80012bc <Transmit_data_to_usb+0x30>
 80012ae:	2b30      	cmp	r3, #48	@ 0x30
 80012b0:	d10e      	bne.n	80012d0 <Transmit_data_to_usb+0x44>

	case MSG_ID_GPS :
		TransmitGPSFrame(message_appli.data);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 ff1d 	bl	80020f4 <TransmitGPSFrame>
		//HAL_UART_Transmit_IT(&huart4, message_appli.data, sizeof(message_appli.data));
		break;
 80012ba:	e00a      	b.n	80012d2 <Transmit_data_to_usb+0x46>
	case MSG_ID_IMU :
		TransmitIMUFrame(message_appli.data);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fa64 	bl	800178c <TransmitIMUFrame>
		break;
 80012c4:	e005      	b.n	80012d2 <Transmit_data_to_usb+0x46>
	case MSG_ID_LIDAR :
		TransmitLiDARFrame(message_appli.data);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fadd 	bl	8001888 <TransmitLiDARFrame>
		//HAL_UART_Transmit_IT(&huart4, (uint8_t*)message_appli.data,30);
		break;
 80012ce:	e000      	b.n	80012d2 <Transmit_data_to_usb+0x46>
	default :
		break;
 80012d0:	bf00      	nop
	}
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000414 	.word	0x20000414

080012e0 <Receive_data_from_usb>:

void Receive_data_from_usb(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, buffer_ros, 6);
 80012e4:	2206      	movs	r2, #6
 80012e6:	4903      	ldr	r1, [pc, #12]	@ (80012f4 <Receive_data_from_usb+0x14>)
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <Receive_data_from_usb+0x18>)
 80012ea:	f00a ff91 	bl	800c210 <HAL_UART_Receive_IT>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000200 	.word	0x20000200
 80012f8:	20001014 	.word	0x20001014

080012fc <StartUart>:

void StartUart(void const * argument)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001308:	f00d fb3c 	bl	800e984 <xTaskGetTickCount>
 800130c:	4603      	mov	r3, r0
 800130e:	60bb      	str	r3, [r7, #8]
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {

	  Transmit_data_to_usb();
 8001310:	f7ff ffbc 	bl	800128c <Transmit_data_to_usb>
	  Receive_data_from_usb();
 8001314:	f7ff ffe4 	bl	80012e0 <Receive_data_from_usb>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	4618      	mov	r0, r3
 8001320:	f00d f96c 	bl	800e5fc <vTaskDelayUntil>
	  Transmit_data_to_usb();
 8001324:	bf00      	nop
 8001326:	e7f3      	b.n	8001310 <StartUart+0x14>

08001328 <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(500);
 8001330:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001334:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001336:	f00d fb25 	bl	800e984 <xTaskGetTickCount>
 800133a:	4603      	mov	r3, r0
 800133c:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	IMU_Receive_Transmit_Data();
 800133e:	f7ff ff6b 	bl	8001218 <IMU_Receive_Transmit_Data>
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	f00d f957 	bl	800e5fc <vTaskDelayUntil>
	IMU_Receive_Transmit_Data();
 800134e:	bf00      	nop
 8001350:	e7f5      	b.n	800133e <StartIMU+0x16>

08001352 <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 800135a:	2364      	movs	r3, #100	@ 0x64
 800135c:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800135e:	f00d fb11 	bl	800e984 <xTaskGetTickCount>
 8001362:	4603      	mov	r3, r0
 8001364:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  GetData_GPS();
 8001366:	f7ff ff5d 	bl	8001224 <GetData_GPS>
	  task_update_gps();
 800136a:	f000 fb1b 	bl	80019a4 <task_update_gps>
	  task_send_values_GPS();
 800136e:	f000 fb37 	bl	80019e0 <task_send_values_GPS>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	4618      	mov	r0, r3
 800137a:	f00d f93f 	bl	800e5fc <vTaskDelayUntil>
	  GetData_GPS();
 800137e:	bf00      	nop
 8001380:	e7f1      	b.n	8001366 <StartGPS+0x14>
	...

08001384 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <GLOBVAR_Init+0x88>)
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <GLOBVAR_Init+0x8c>)
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <GLOBVAR_Init+0x90>)
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <GLOBVAR_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <GLOBVAR_Init+0x94>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <GLOBVAR_Init+0x94>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <GLOBVAR_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <GLOBVAR_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <GLOBVAR_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 80013c4:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <GLOBVAR_Init+0x9c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <GLOBVAR_Init+0x9c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 80013d0:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <GLOBVAR_Init+0x9c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 80013d6:	4913      	ldr	r1, [pc, #76]	@ (8001424 <GLOBVAR_Init+0xa0>)
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 80013e4:	490f      	ldr	r1, [pc, #60]	@ (8001424 <GLOBVAR_Init+0xa0>)
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 80013f2:	490c      	ldr	r1, [pc, #48]	@ (8001424 <GLOBVAR_Init+0xa0>)
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9c1 2302 	strd	r2, r3, [r1, #8]


}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000022c 	.word	0x2000022c
 8001410:	20000230 	.word	0x20000230
 8001414:	20000234 	.word	0x20000234
 8001418:	20000208 	.word	0x20000208
 800141c:	20000214 	.word	0x20000214
 8001420:	20000220 	.word	0x20000220
 8001424:	20000240 	.word	0x20000240

08001428 <CalculateCRC>:
 0x78, 0xd6, 0x9b, 0x4c, 0x01, 0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17,
 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8
};

uint8_t CalculateCRC(uint8_t package[], uint8_t len)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	81bb      	strh	r3, [r7, #12]
 800143c:	e009      	b.n	8001452 <CalculateCRC+0x2a>
	{
		crc += package[i];
 800143e:	89bb      	ldrh	r3, [r7, #12]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4413      	add	r3, r2
 800144a:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++)
 800144c:	89bb      	ldrh	r3, [r7, #12]
 800144e:	3301      	adds	r3, #1
 8001450:	81bb      	strh	r3, [r7, #12]
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	b29b      	uxth	r3, r3
 8001456:	89ba      	ldrh	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3f0      	bcc.n	800143e <CalculateCRC+0x16>
	}
	return 0xFF - crc;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	43db      	mvns	r3, r3
 8001460:	b2db      	uxtb	r3, r3
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <IMU_init>:

void IMU_init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 8001474:	4b5c      	ldr	r3, [pc, #368]	@ (80015e8 <IMU_init+0x178>)
 8001476:	22bf      	movs	r2, #191	@ 0xbf
 8001478:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 800147a:	4b5b      	ldr	r3, [pc, #364]	@ (80015e8 <IMU_init+0x178>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001480:	4b59      	ldr	r3, [pc, #356]	@ (80015e8 <IMU_init+0x178>)
 8001482:	4a5a      	ldr	r2, [pc, #360]	@ (80015ec <IMU_init+0x17c>)
 8001484:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001486:	4b58      	ldr	r3, [pc, #352]	@ (80015e8 <IMU_init+0x178>)
 8001488:	4a59      	ldr	r2, [pc, #356]	@ (80015f0 <IMU_init+0x180>)
 800148a:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800148c:	4b56      	ldr	r3, [pc, #344]	@ (80015e8 <IMU_init+0x178>)
 800148e:	4a59      	ldr	r2, [pc, #356]	@ (80015f4 <IMU_init+0x184>)
 8001490:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001492:	4b55      	ldr	r3, [pc, #340]	@ (80015e8 <IMU_init+0x178>)
 8001494:	4a58      	ldr	r2, [pc, #352]	@ (80015f8 <IMU_init+0x188>)
 8001496:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <IMU_init+0x178>)
 800149a:	4a58      	ldr	r2, [pc, #352]	@ (80015fc <IMU_init+0x18c>)
 800149c:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 800149e:	4b52      	ldr	r3, [pc, #328]	@ (80015e8 <IMU_init+0x178>)
 80014a0:	4a57      	ldr	r2, [pc, #348]	@ (8001600 <IMU_init+0x190>)
 80014a2:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 80014a4:	4950      	ldr	r1, [pc, #320]	@ (80015e8 <IMU_init+0x178>)
 80014a6:	4857      	ldr	r0, [pc, #348]	@ (8001604 <IMU_init+0x194>)
 80014a8:	f003 f90e 	bl	80046c8 <HTS221_RegisterBusIO>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <IMU_init+0x46>
		while(1);
 80014b2:	bf00      	nop
 80014b4:	e7fd      	b.n	80014b2 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 80014b6:	4853      	ldr	r0, [pc, #332]	@ (8001604 <IMU_init+0x194>)
 80014b8:	f003 f950 	bl	800475c <HTS221_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <IMU_init+0x56>
		while (1);
 80014c2:	bf00      	nop
 80014c4:	e7fd      	b.n	80014c2 <IMU_init+0x52>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 80014c6:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <IMU_init+0x198>)
 80014c8:	2233      	movs	r2, #51	@ 0x33
 80014ca:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 80014cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <IMU_init+0x198>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80014d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <IMU_init+0x198>)
 80014d4:	4a45      	ldr	r2, [pc, #276]	@ (80015ec <IMU_init+0x17c>)
 80014d6:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80014d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001608 <IMU_init+0x198>)
 80014da:	4a45      	ldr	r2, [pc, #276]	@ (80015f0 <IMU_init+0x180>)
 80014dc:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80014de:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <IMU_init+0x198>)
 80014e0:	4a44      	ldr	r2, [pc, #272]	@ (80015f4 <IMU_init+0x184>)
 80014e2:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80014e4:	4b48      	ldr	r3, [pc, #288]	@ (8001608 <IMU_init+0x198>)
 80014e6:	4a44      	ldr	r2, [pc, #272]	@ (80015f8 <IMU_init+0x188>)
 80014e8:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <IMU_init+0x198>)
 80014ec:	4a43      	ldr	r2, [pc, #268]	@ (80015fc <IMU_init+0x18c>)
 80014ee:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 80014f0:	4b45      	ldr	r3, [pc, #276]	@ (8001608 <IMU_init+0x198>)
 80014f2:	4a43      	ldr	r2, [pc, #268]	@ (8001600 <IMU_init+0x190>)
 80014f4:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 80014f6:	4944      	ldr	r1, [pc, #272]	@ (8001608 <IMU_init+0x198>)
 80014f8:	4844      	ldr	r0, [pc, #272]	@ (800160c <IMU_init+0x19c>)
 80014fa:	f004 f885 	bl	8005608 <LSM303AGR_ACC_RegisterBusIO>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <IMU_init+0x98>
		while(1);
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <IMU_init+0x94>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 8001508:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <IMU_init+0x198>)
 800150a:	223d      	movs	r2, #61	@ 0x3d
 800150c:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 800150e:	493e      	ldr	r1, [pc, #248]	@ (8001608 <IMU_init+0x198>)
 8001510:	483f      	ldr	r0, [pc, #252]	@ (8001610 <IMU_init+0x1a0>)
 8001512:	f004 fa69 	bl	80059e8 <LSM303AGR_MAG_RegisterBusIO>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <IMU_init+0xb0>
		while(1);
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <IMU_init+0xac>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 8001520:	483a      	ldr	r0, [pc, #232]	@ (800160c <IMU_init+0x19c>)
 8001522:	f004 f8db 	bl	80056dc <LSM303AGR_ACC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <IMU_init+0xc0>
		while (1);
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <IMU_init+0xbc>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 8001530:	4837      	ldr	r0, [pc, #220]	@ (8001610 <IMU_init+0x1a0>)
 8001532:	f004 fabd 	bl	8005ab0 <LSM303AGR_MAG_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <IMU_init+0xd0>
		while (1);
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <IMU_init+0xcc>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <IMU_init+0x1a4>)
 8001542:	22d7      	movs	r2, #215	@ 0xd7
 8001544:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <IMU_init+0x1a4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 800154c:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <IMU_init+0x1a4>)
 800154e:	4a27      	ldr	r2, [pc, #156]	@ (80015ec <IMU_init+0x17c>)
 8001550:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001552:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <IMU_init+0x1a4>)
 8001554:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <IMU_init+0x180>)
 8001556:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001558:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <IMU_init+0x1a4>)
 800155a:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <IMU_init+0x184>)
 800155c:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 800155e:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <IMU_init+0x1a4>)
 8001560:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <IMU_init+0x188>)
 8001562:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 8001564:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <IMU_init+0x1a4>)
 8001566:	4a25      	ldr	r2, [pc, #148]	@ (80015fc <IMU_init+0x18c>)
 8001568:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 800156a:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <IMU_init+0x1a4>)
 800156c:	4a24      	ldr	r2, [pc, #144]	@ (8001600 <IMU_init+0x190>)
 800156e:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 8001570:	4928      	ldr	r1, [pc, #160]	@ (8001614 <IMU_init+0x1a4>)
 8001572:	4829      	ldr	r0, [pc, #164]	@ (8001618 <IMU_init+0x1a8>)
 8001574:	f004 ff70 	bl	8006458 <LSM6DSL_RegisterBusIO>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <IMU_init+0x112>
		while(1);
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <IMU_init+0x10e>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 8001582:	4825      	ldr	r0, [pc, #148]	@ (8001618 <IMU_init+0x1a8>)
 8001584:	f004 ffd2 	bl	800652c <LSM6DSL_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <IMU_init+0x122>
		while (1);
 800158e:	bf00      	nop
 8001590:	e7fd      	b.n	800158e <IMU_init+0x11e>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <IMU_init+0x1ac>)
 8001594:	22bb      	movs	r2, #187	@ 0xbb
 8001596:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <IMU_init+0x1ac>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <IMU_init+0x1ac>)
 80015a0:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <IMU_init+0x17c>)
 80015a2:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <IMU_init+0x1ac>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <IMU_init+0x180>)
 80015a8:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <IMU_init+0x1ac>)
 80015ac:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <IMU_init+0x184>)
 80015ae:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <IMU_init+0x1ac>)
 80015b2:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <IMU_init+0x188>)
 80015b4:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <IMU_init+0x1ac>)
 80015b8:	4a10      	ldr	r2, [pc, #64]	@ (80015fc <IMU_init+0x18c>)
 80015ba:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <IMU_init+0x1ac>)
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <IMU_init+0x190>)
 80015c0:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 80015c2:	4916      	ldr	r1, [pc, #88]	@ (800161c <IMU_init+0x1ac>)
 80015c4:	4816      	ldr	r0, [pc, #88]	@ (8001620 <IMU_init+0x1b0>)
 80015c6:	f003 fd23 	bl	8005010 <LPS22HB_RegisterBusIO>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <IMU_init+0x164>
		while(1);
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <IMU_init+0x160>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 80015d4:	4812      	ldr	r0, [pc, #72]	@ (8001620 <IMU_init+0x1b0>)
 80015d6:	f003 fd85 	bl	80050e4 <LPS22HB_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <IMU_init+0x174>
		while (1);
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <IMU_init+0x170>
	}



}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000025c 	.word	0x2000025c
 80015ec:	08004199 	.word	0x08004199
 80015f0:	08004215 	.word	0x08004215
 80015f4:	080042c9 	.word	0x080042c9
 80015f8:	08004265 	.word	0x08004265
 80015fc:	08006ce9 	.word	0x08006ce9
 8001600:	08006d01 	.word	0x08006d01
 8001604:	2000027c 	.word	0x2000027c
 8001608:	200002b0 	.word	0x200002b0
 800160c:	200002d0 	.word	0x200002d0
 8001610:	20000304 	.word	0x20000304
 8001614:	20000338 	.word	0x20000338
 8001618:	20000358 	.word	0x20000358
 800161c:	20000390 	.word	0x20000390
 8001620:	200003b0 	.word	0x200003b0

08001624 <IMU_enable>:

void IMU_enable(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 8001628:	481c      	ldr	r0, [pc, #112]	@ (800169c <IMU_enable+0x78>)
 800162a:	f003 f8b2 	bl	8004792 <HTS221_HUM_Enable>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <IMU_enable+0x14>
		while (1);
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 8001638:	4818      	ldr	r0, [pc, #96]	@ (800169c <IMU_enable+0x78>)
 800163a:	f003 f957 	bl	80048ec <HTS221_TEMP_Enable>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <IMU_enable+0x24>
		while (1);
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <IMU_enable+0x20>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 8001648:	4815      	ldr	r0, [pc, #84]	@ (80016a0 <IMU_enable+0x7c>)
 800164a:	f004 f888 	bl	800575e <LSM303AGR_ACC_Enable>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <IMU_enable+0x34>
		while (1);
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <IMU_enable+0x30>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 8001658:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <IMU_enable+0x80>)
 800165a:	f004 fa66 	bl	8005b2a <LSM303AGR_MAG_Enable>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <IMU_enable+0x44>
		while (1);
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <IMU_enable+0x40>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 8001668:	480f      	ldr	r0, [pc, #60]	@ (80016a8 <IMU_enable+0x84>)
 800166a:	f004 ffc8 	bl	80065fe <LSM6DSL_ACC_Enable>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <IMU_enable+0x54>
		while (1);
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <IMU_enable+0x50>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 8001678:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <IMU_enable+0x84>)
 800167a:	f004 ffe4 	bl	8006646 <LSM6DSL_GYRO_Enable>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <IMU_enable+0x64>
		while (1);
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <IMU_enable+0x60>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 8001688:	4808      	ldr	r0, [pc, #32]	@ (80016ac <IMU_enable+0x88>)
 800168a:	f003 fd46 	bl	800511a <LPS22HB_PRESS_Enable>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <IMU_enable+0x74>
		while (1);
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <IMU_enable+0x70>
	}
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000027c 	.word	0x2000027c
 80016a0:	200002d0 	.word	0x200002d0
 80016a4:	20000304 	.word	0x20000304
 80016a8:	20000358 	.word	0x20000358
 80016ac:	200003b0 	.word	0x200003b0

080016b0 <IMU_GetData>:

void IMU_GetData(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	 //IMUFrameTypeDef imu_frame;

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 80016b4:	4928      	ldr	r1, [pc, #160]	@ (8001758 <IMU_GetData+0xa8>)
 80016b6:	4829      	ldr	r0, [pc, #164]	@ (800175c <IMU_GetData+0xac>)
 80016b8:	f003 f890 	bl	80047dc <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 80016bc:	4928      	ldr	r1, [pc, #160]	@ (8001760 <IMU_GetData+0xb0>)
 80016be:	4827      	ldr	r0, [pc, #156]	@ (800175c <IMU_GetData+0xac>)
 80016c0:	f003 f939 	bl	8004936 <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 80016c4:	4927      	ldr	r1, [pc, #156]	@ (8001764 <IMU_GetData+0xb4>)
 80016c6:	4828      	ldr	r0, [pc, #160]	@ (8001768 <IMU_GetData+0xb8>)
 80016c8:	f004 f91e 	bl	8005908 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 80016cc:	4927      	ldr	r1, [pc, #156]	@ (800176c <IMU_GetData+0xbc>)
 80016ce:	4828      	ldr	r0, [pc, #160]	@ (8001770 <IMU_GetData+0xc0>)
 80016d0:	f004 fa5b 	bl	8005b8a <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 80016d4:	4927      	ldr	r1, [pc, #156]	@ (8001774 <IMU_GetData+0xc4>)
 80016d6:	4828      	ldr	r0, [pc, #160]	@ (8001778 <IMU_GetData+0xc8>)
 80016d8:	f003 fd43 	bl	8005162 <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 80016dc:	4927      	ldr	r1, [pc, #156]	@ (800177c <IMU_GetData+0xcc>)
 80016de:	4828      	ldr	r0, [pc, #160]	@ (8001780 <IMU_GetData+0xd0>)
 80016e0:	f005 f828 	bl	8006734 <LSM6DSL_GYRO_GetAxes>

	 imu_frame.humidity = current_humidity_perc;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <IMU_GetData+0xa8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <IMU_GetData+0xd4>)
 80016ea:	6053      	str	r3, [r2, #4]
	 imu_frame.temperature = current_temperature_degC;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <IMU_GetData+0xb0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <IMU_GetData+0xd4>)
 80016f2:	6013      	str	r3, [r2, #0]
	 imu_frame.pressure = current_pressure_hPa;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <IMU_GetData+0xc4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <IMU_GetData+0xd4>)
 80016fa:	6093      	str	r3, [r2, #8]
	 imu_frame.magnetic_x = current_magnetic_mG.x;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <IMU_GetData+0xbc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <IMU_GetData+0xd4>)
 8001702:	60d3      	str	r3, [r2, #12]
	 imu_frame.magnetic_y = current_magnetic_mG.y;
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <IMU_GetData+0xbc>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a1e      	ldr	r2, [pc, #120]	@ (8001784 <IMU_GetData+0xd4>)
 800170a:	6113      	str	r3, [r2, #16]
	 imu_frame.magnetic_z = current_magnetic_mG.z;
 800170c:	4b17      	ldr	r3, [pc, #92]	@ (800176c <IMU_GetData+0xbc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <IMU_GetData+0xd4>)
 8001712:	6153      	str	r3, [r2, #20]
	 imu_frame.acceleration_x = current_acceleration_mg.x;
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <IMU_GetData+0xb4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1a      	ldr	r2, [pc, #104]	@ (8001784 <IMU_GetData+0xd4>)
 800171a:	6193      	str	r3, [r2, #24]
	 imu_frame.acceleration_y = current_acceleration_mg.y;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <IMU_GetData+0xb4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a18      	ldr	r2, [pc, #96]	@ (8001784 <IMU_GetData+0xd4>)
 8001722:	61d3      	str	r3, [r2, #28]
	 imu_frame.acceleration_z = current_acceleration_mg.z;
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <IMU_GetData+0xb4>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a16      	ldr	r2, [pc, #88]	@ (8001784 <IMU_GetData+0xd4>)
 800172a:	6213      	str	r3, [r2, #32]
	 imu_frame.gyro_x = current_angular_rate_mdps.x;
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <IMU_GetData+0xcc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <IMU_GetData+0xd4>)
 8001732:	6253      	str	r3, [r2, #36]	@ 0x24
	 imu_frame.gyro_y = current_angular_rate_mdps.y;
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <IMU_GetData+0xcc>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <IMU_GetData+0xd4>)
 800173a:	6293      	str	r3, [r2, #40]	@ 0x28
	 imu_frame.gyro_z = current_angular_rate_mdps.z;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <IMU_GetData+0xcc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a10      	ldr	r2, [pc, #64]	@ (8001784 <IMU_GetData+0xd4>)
 8001742:	62d3      	str	r3, [r2, #44]	@ 0x2c

	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU, NULL,&imu_frame);
 8001744:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <IMU_GetData+0xd8>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <IMU_GetData+0xd4>)
 800174a:	2200      	movs	r2, #0
 800174c:	2120      	movs	r1, #32
 800174e:	f000 f907 	bl	8001960 <MESSAGE_SendMailbox>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_GYR, NULL,message_gyro);
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_MAG, NULL,message_mag);*/

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000234 	.word	0x20000234
 800175c:	2000027c 	.word	0x2000027c
 8001760:	20000230 	.word	0x20000230
 8001764:	20000208 	.word	0x20000208
 8001768:	200002d0 	.word	0x200002d0
 800176c:	20000220 	.word	0x20000220
 8001770:	20000304 	.word	0x20000304
 8001774:	2000022c 	.word	0x2000022c
 8001778:	200003b0 	.word	0x200003b0
 800177c:	20000214 	.word	0x20000214
 8001780:	20000358 	.word	0x20000358
 8001784:	200003e4 	.word	0x200003e4
 8001788:	20000414 	.word	0x20000414

0800178c <TransmitIMUFrame>:

void TransmitIMUFrame(IMUFrameTypeDef *frame) {
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b093      	sub	sp, #76	@ 0x4c
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    // Convertir la structure en un tableau de bytes
	uint8_t *buffer = (uint8_t *)malloc(sizeof(API_FrameTypeDef_IMU));
 8001794:	2036      	movs	r0, #54	@ 0x36
 8001796:	f00e f90d 	bl	800f9b4 <malloc>
 800179a:	4603      	mov	r3, r0
 800179c:	647b      	str	r3, [r7, #68]	@ 0x44
    //uint8_t buffer[sizeof(API_FrameTypeDef_IMU)];
	if (buffer == NULL) {
 800179e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d041      	beq.n	8001828 <TransmitIMUFrame+0x9c>
		// Gerer l'erreur d'allocation de mémoire
		return;
	}
    API_FrameTypeDef_IMU api_frame = {
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2236      	movs	r2, #54	@ 0x36
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00e fe29 	bl	8010404 <memset>
 80017b2:	237e      	movs	r3, #126	@ 0x7e
 80017b4:	733b      	strb	r3, [r7, #12]
 80017b6:	2330      	movs	r3, #48	@ 0x30
 80017b8:	81fb      	strh	r3, [r7, #14]
 80017ba:	2320      	movs	r3, #32
 80017bc:	743b      	strb	r3, [r7, #16]
    .length = sizeof(IMUFrameTypeDef),
    .frame_type = MSG_ID_IMU,
	.data={0},
	.crc = 0};

    memcpy(&(api_frame.data), frame, sizeof(IMUFrameTypeDef));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f107 0011 	add.w	r0, r7, #17
 80017c4:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80017c8:	4602      	mov	r2, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	f8d1 c000 	ldr.w	ip, [r1]
 80017d0:	684e      	ldr	r6, [r1, #4]
 80017d2:	688d      	ldr	r5, [r1, #8]
 80017d4:	68c9      	ldr	r1, [r1, #12]
 80017d6:	f8c2 c000 	str.w	ip, [r2]
 80017da:	6056      	str	r6, [r2, #4]
 80017dc:	6095      	str	r5, [r2, #8]
 80017de:	60d1      	str	r1, [r2, #12]
 80017e0:	3310      	adds	r3, #16
 80017e2:	3010      	adds	r0, #16
 80017e4:	42a3      	cmp	r3, r4
 80017e6:	d1ef      	bne.n	80017c8 <TransmitIMUFrame+0x3c>
    api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(IMUFrameTypeDef));
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	3305      	adds	r3, #5
 80017ee:	2130      	movs	r1, #48	@ 0x30
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe19 	bl	8001428 <CalculateCRC>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
    memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_IMU));
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2236      	movs	r2, #54	@ 0x36
 8001802:	4619      	mov	r1, r3
 8001804:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001806:	f00e fe9a 	bl	801053e <memcpy>

    adresse_buffer = buffer;
 800180a:	4a09      	ldr	r2, [pc, #36]	@ (8001830 <TransmitIMUFrame+0xa4>)
 800180c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800180e:	6013      	str	r3, [r2, #0]
    // Transmettre le tableau de bytes via UART
    if(HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_IMU))!=HAL_OK){
 8001810:	2236      	movs	r2, #54	@ 0x36
 8001812:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001814:	4807      	ldr	r0, [pc, #28]	@ (8001834 <TransmitIMUFrame+0xa8>)
 8001816:	f00a fc8d 	bl	800c134 <HAL_UART_Transmit_IT>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <TransmitIMUFrame+0x9e>
    	free(buffer);
 8001820:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001822:	f00e f8cf 	bl	800f9c4 <free>
 8001826:	e000      	b.n	800182a <TransmitIMUFrame+0x9e>
		return;
 8001828:	bf00      	nop

    }
}
 800182a:	374c      	adds	r7, #76	@ 0x4c
 800182c:	46bd      	mov	sp, r7
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001830:	20000238 	.word	0x20000238
 8001834:	20001014 	.word	0x20001014

08001838 <CalCRC8>:
#include "stm32l4xx_hal.h"

extern UART_HandleTypeDef huart4;

uint8_t CalCRC8(uint8_t package[], uint8_t len)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	for (i = 0; i < len; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	81bb      	strh	r3, [r7, #12]
 800184c:	e00d      	b.n	800186a <CalCRC8+0x32>
	{
		crc = CrcTable[(crc ^ package[i]) & 0xff];
 800184e:	89bb      	ldrh	r3, [r7, #12]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	4053      	eors	r3, r2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <CalCRC8+0x4c>)
 8001860:	5c9b      	ldrb	r3, [r3, r2]
 8001862:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len; i++)
 8001864:	89bb      	ldrh	r3, [r7, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	81bb      	strh	r3, [r7, #12]
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	b29b      	uxth	r3, r3
 800186e:	89ba      	ldrh	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d3ec      	bcc.n	800184e <CalCRC8+0x16>
	}
	return crc;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	080139b0 	.word	0x080139b0

08001888 <TransmitLiDARFrame>:
		}
	}
	return lf;
}

void TransmitLiDARFrame(LiDARFrameTypeDef *frame) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b0be      	sub	sp, #248	@ 0xf8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_LIDAR)];
	API_FrameTypeDef_LIDAR api_frame;
	api_frame.header = API_HEADER;
 8001890:	237e      	movs	r3, #126	@ 0x7e
 8001892:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(LiDARFrameTypeDef);
 8001894:	2371      	movs	r3, #113	@ 0x71
 8001896:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_LIDAR;
 8001898:	2340      	movs	r3, #64	@ 0x40
 800189a:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(LiDARFrameTypeDef));
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	f107 030d 	add.w	r3, r7, #13
 80018a2:	4611      	mov	r1, r2
 80018a4:	2271      	movs	r2, #113	@ 0x71
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00e fe49 	bl	801053e <memcpy>
	api_frame.crc = CalCRC8((uint8_t*)&(api_frame.data), sizeof(LiDARFrameTypeDef));
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	3305      	adds	r3, #5
 80018b2:	2171      	movs	r1, #113	@ 0x71
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ffbf 	bl	8001838 <CalCRC8>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_LIDAR));
 80018c0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80018c4:	f107 0108 	add.w	r1, r7, #8
 80018c8:	2278      	movs	r2, #120	@ 0x78
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00e fe37 	bl	801053e <memcpy>

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_LIDAR));
 80018d0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80018d4:	2278      	movs	r2, #120	@ 0x78
 80018d6:	4619      	mov	r1, r3
 80018d8:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <TransmitLiDARFrame+0x60>)
 80018da:	f00a fc2b 	bl	800c134 <HAL_UART_Transmit_IT>

}
 80018de:	bf00      	nop
 80018e0:	37f8      	adds	r7, #248	@ 0xf8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20001014 	.word	0x20001014

080018ec <MESSAGE_Init>:

//QueueHandle_t IMU_Mailbox;
//QueueHandle_t GPS_Mailbox;
QueueHandle_t Appli_Mailbox;

void  MESSAGE_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	//IMU_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	//GPS_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	Appli_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
 80018f0:	2200      	movs	r2, #0
 80018f2:	210c      	movs	r1, #12
 80018f4:	2020      	movs	r0, #32
 80018f6:	f00c f971 	bl	800dbdc <xQueueGenericCreate>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <MESSAGE_Init+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]

	/* Add queues to registry in order to view them in stm32cube ide */
	//vQueueAddToRegistry(IMU_Mailbox,"IMU Mailbox");
	//vQueueAddToRegistry(GPS_Mailbox,"GPS Mailbox");
	vQueueAddToRegistry(Appli_Mailbox,"Appli Mailbox");
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <MESSAGE_Init+0x24>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4903      	ldr	r1, [pc, #12]	@ (8001914 <MESSAGE_Init+0x28>)
 8001906:	4618      	mov	r0, r3
 8001908:	f00c fcb6 	bl	800e278 <vQueueAddToRegistry>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000414 	.word	0x20000414
 8001914:	08013924 	.word	0x08013924

08001918 <MESSAGE_ReadMailboxNoDelay>:
 *
 * @remark This function is non blocking.
 * If mailbox is empty when calling the function, a message structure is still returned with \ref MSG_ID_NO_MESSAGE
 * in message id field
 */
MESSAGE_Typedef MESSAGE_ReadMailboxNoDelay(QueueHandle_t mbx) {
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	MESSAGE_Typedef msg= {0};
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]

	if (!xQueueReceive(mbx, &msg, 0))  // Pas de message dans la mailbox
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	6838      	ldr	r0, [r7, #0]
 8001938:	f00c faac 	bl	800de94 <xQueueReceive>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <MESSAGE_ReadMailboxNoDelay+0x2e>
		msg.id=MSG_ID_NO_MESSAGE;
 8001942:	2300      	movs	r3, #0
 8001944:	81bb      	strh	r3, [r7, #12]

	return msg;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	461c      	mov	r4, r3
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}
	...

08001960 <MESSAGE_SendMailbox>:
 * @return None
 *
 * @remark This function is non blocking.
 * If mailbox is full when calling the function, error will be ignored silently
 */
void MESSAGE_SendMailbox(QueueHandle_t mbx_dest, uint16_t id, QueueHandle_t mbx_sender, void *data){
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	460b      	mov	r3, r1
 800196e:	817b      	strh	r3, [r7, #10]
	MESSAGE_Typedef msg;

	msg.id=id;
 8001970:	897b      	ldrh	r3, [r7, #10]
 8001972:	82bb      	strh	r3, [r7, #20]
	msg.sender = &mbx_sender;
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	61bb      	str	r3, [r7, #24]
	msg.data=data;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	61fb      	str	r3, [r7, #28]

	if (!xQueueSend(mbx_dest, &msg, 0)) { // envoi sans attendre
 800197c:	f107 0114 	add.w	r1, r7, #20
 8001980:	2300      	movs	r3, #0
 8001982:	2200      	movs	r2, #0
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f00c f983 	bl	800dc90 <xQueueGenericSend>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <MESSAGE_SendMailbox+0x36>
		printf("Failed to send data, Queue full.\r\n");
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <MESSAGE_SendMailbox+0x40>)
 8001992:	f00e fc0b 	bl	80101ac <puts>
	}
}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	08013934 	.word	0x08013934

080019a4 <task_update_gps>:
	}
}



void task_update_gps(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	if (nmeaFrameValid){
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <task_update_gps+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <task_update_gps+0x22>
		ProcessNMEALine(nmeaFrame,&gpsCoords, &gpsQuality);
 80019b0:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <task_update_gps+0x2c>)
 80019b2:	4908      	ldr	r1, [pc, #32]	@ (80019d4 <task_update_gps+0x30>)
 80019b4:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <task_update_gps+0x34>)
 80019b6:	f000 fbd7 	bl	8002168 <ProcessNMEALine>
		gpsSend = 1;
 80019ba:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <task_update_gps+0x38>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
		nmeaFrameValid = 0;
 80019c0:	4b02      	ldr	r3, [pc, #8]	@ (80019cc <task_update_gps+0x28>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
	}

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20001378 	.word	0x20001378
 80019d0:	20000258 	.word	0x20000258
 80019d4:	20000240 	.word	0x20000240
 80019d8:	200012b0 	.word	0x200012b0
 80019dc:	20000418 	.word	0x20000418

080019e0 <task_send_values_GPS>:

void task_send_values_GPS (void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09a      	sub	sp, #104	@ 0x68
 80019e4:	af00      	add	r7, sp, #0

	if (gpsSend){
 80019e6:	4bc8      	ldr	r3, [pc, #800]	@ (8001d08 <task_send_values_GPS+0x328>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8378 	beq.w	80020e0 <task_send_values_GPS+0x700>
		//Latitude
		double computing = gpsCoords.lat;
 80019f0:	4bc6      	ldr	r3, [pc, #792]	@ (8001d0c <task_send_values_GPS+0x32c>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat7 = floor(computing);
 80019fa:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80019fe:	f011 fecf 	bl	80137a0 <floor>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8b5 	bl	8000b78 <__aeabi_d2iz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
		computing = 100.0*(computing-(double)Lat7);
 8001a12:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001a14:	f7fe fd96 	bl	8000544 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001a20:	f7fe fc42 	bl	80002a8 <__aeabi_dsub>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4bb7      	ldr	r3, [pc, #732]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001a32:	f7fe fdf1 	bl	8000618 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat6 = floor(computing);
 8001a3e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001a42:	f011 fead 	bl	80137a0 <floor>
 8001a46:	ec53 2b10 	vmov	r2, r3, d0
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f893 	bl	8000b78 <__aeabi_d2iz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	65bb      	str	r3, [r7, #88]	@ 0x58
		computing = 100.0*(computing-(double)Lat6);
 8001a56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001a58:	f7fe fd74 	bl	8000544 <__aeabi_i2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001a64:	f7fe fc20 	bl	80002a8 <__aeabi_dsub>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4ba6      	ldr	r3, [pc, #664]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001a76:	f7fe fdcf 	bl	8000618 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat5 = floor(computing);
 8001a82:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001a86:	f011 fe8b 	bl	80137a0 <floor>
 8001a8a:	ec53 2b10 	vmov	r2, r3, d0
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f871 	bl	8000b78 <__aeabi_d2iz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	657b      	str	r3, [r7, #84]	@ 0x54
		computing = 100.0*(computing-(double)Lat5);
 8001a9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001a9c:	f7fe fd52 	bl	8000544 <__aeabi_i2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001aa8:	f7fe fbfe 	bl	80002a8 <__aeabi_dsub>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b95      	ldr	r3, [pc, #596]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001aba:	f7fe fdad 	bl	8000618 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat4 = floor(computing);
 8001ac6:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001aca:	f011 fe69 	bl	80137a0 <floor>
 8001ace:	ec53 2b10 	vmov	r2, r3, d0
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f84f 	bl	8000b78 <__aeabi_d2iz>
 8001ada:	4603      	mov	r3, r0
 8001adc:	653b      	str	r3, [r7, #80]	@ 0x50
		computing = 100.0*(computing-(double)Lat4);
 8001ade:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001ae0:	f7fe fd30 	bl	8000544 <__aeabi_i2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001aec:	f7fe fbdc 	bl	80002a8 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b84      	ldr	r3, [pc, #528]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001afe:	f7fe fd8b 	bl	8000618 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat3 = floor(computing);
 8001b0a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001b0e:	f011 fe47 	bl	80137a0 <floor>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f82d 	bl	8000b78 <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
		computing = 100.0*(computing-(double)Lat3);
 8001b22:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001b24:	f7fe fd0e 	bl	8000544 <__aeabi_i2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001b30:	f7fe fbba 	bl	80002a8 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4b73      	ldr	r3, [pc, #460]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001b42:	f7fe fd69 	bl	8000618 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat2 = floor(computing);
 8001b4e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001b52:	f011 fe25 	bl	80137a0 <floor>
 8001b56:	ec53 2b10 	vmov	r2, r3, d0
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff f80b 	bl	8000b78 <__aeabi_d2iz>
 8001b62:	4603      	mov	r3, r0
 8001b64:	64bb      	str	r3, [r7, #72]	@ 0x48
		computing = 100.0*(computing-(double)Lat2);
 8001b66:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001b68:	f7fe fcec 	bl	8000544 <__aeabi_i2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001b74:	f7fe fb98 	bl	80002a8 <__aeabi_dsub>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b62      	ldr	r3, [pc, #392]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001b86:	f7fe fd47 	bl	8000618 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat1 = floor(computing);
 8001b92:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001b96:	f011 fe03 	bl	80137a0 <floor>
 8001b9a:	ec53 2b10 	vmov	r2, r3, d0
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe ffe9 	bl	8000b78 <__aeabi_d2iz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
		computing = 100.0*(computing-(double)Lat1);
 8001baa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bac:	f7fe fcca 	bl	8000544 <__aeabi_i2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001bb8:	f7fe fb76 	bl	80002a8 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001bca:	f7fe fd25 	bl	8000618 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat0 = floor(computing);
 8001bd6:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001bda:	f011 fde1 	bl	80137a0 <floor>
 8001bde:	ec53 2b10 	vmov	r2, r3, d0
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffc7 	bl	8000b78 <__aeabi_d2iz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	643b      	str	r3, [r7, #64]	@ 0x40

		gps_data1.gps_data_lat[0] = Lat7;
 8001bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001bf4:	701a      	strb	r2, [r3, #0]
		gps_data1.gps_data_lat[1] = Lat6;
 8001bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b46      	ldr	r3, [pc, #280]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001bfc:	705a      	strb	r2, [r3, #1]
		gps_data1.gps_data_lat[2] = Lat5;
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b44      	ldr	r3, [pc, #272]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001c04:	709a      	strb	r2, [r3, #2]
		gps_data1.gps_data_lat[3] = Lat4;
 8001c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b42      	ldr	r3, [pc, #264]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001c0c:	70da      	strb	r2, [r3, #3]
		gps_data1.gps_data_lat[4] = Lat3;
 8001c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001c14:	711a      	strb	r2, [r3, #4]
		gps_data1.gps_data_lat[5] = Lat2;
 8001c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001c1c:	715a      	strb	r2, [r3, #5]
		gps_data1.gps_data_lat[6] = Lat1;
 8001c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001c24:	719a      	strb	r2, [r3, #6]
		gps_data1.gps_data_lat[7] = Lat0;
 8001c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <task_send_values_GPS+0x334>)
 8001c2c:	71da      	strb	r2, [r3, #7]
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Longitude
		computing = gpsCoords.lon;
 8001c2e:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <task_send_values_GPS+0x32c>)
 8001c30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c34:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon7 = floor(computing);
 8001c38:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001c3c:	f011 fdb0 	bl	80137a0 <floor>
 8001c40:	ec53 2b10 	vmov	r2, r3, d0
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ff96 	bl	8000b78 <__aeabi_d2iz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		computing = 100.0*(computing-(double)Lon7);
 8001c50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c52:	f7fe fc77 	bl	8000544 <__aeabi_i2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001c5e:	f7fe fb23 	bl	80002a8 <__aeabi_dsub>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001c70:	f7fe fcd2 	bl	8000618 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon6 = floor(computing);
 8001c7c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001c80:	f011 fd8e 	bl	80137a0 <floor>
 8001c84:	ec53 2b10 	vmov	r2, r3, d0
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe ff74 	bl	8000b78 <__aeabi_d2iz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	63bb      	str	r3, [r7, #56]	@ 0x38
		computing = 100.0*(computing-(double)Lon6);
 8001c94:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c96:	f7fe fc55 	bl	8000544 <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ca2:	f7fe fb01 	bl	80002a8 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001cb4:	f7fe fcb0 	bl	8000618 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon5 = floor(computing);
 8001cc0:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001cc4:	f011 fd6c 	bl	80137a0 <floor>
 8001cc8:	ec53 2b10 	vmov	r2, r3, d0
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff52 	bl	8000b78 <__aeabi_d2iz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	637b      	str	r3, [r7, #52]	@ 0x34
		computing = 100.0*(computing-(double)Lon5);
 8001cd8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001cda:	f7fe fc33 	bl	8000544 <__aeabi_i2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ce6:	f7fe fadf 	bl	80002a8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <task_send_values_GPS+0x330>)
 8001cf8:	f7fe fc8e 	bl	8000618 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001d04:	e008      	b.n	8001d18 <task_send_values_GPS+0x338>
 8001d06:	bf00      	nop
 8001d08:	20000418 	.word	0x20000418
 8001d0c:	20000240 	.word	0x20000240
 8001d10:	40590000 	.word	0x40590000
 8001d14:	2000041c 	.word	0x2000041c
		int Lon4 = floor(computing);
 8001d18:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001d1c:	f011 fd40 	bl	80137a0 <floor>
 8001d20:	ec53 2b10 	vmov	r2, r3, d0
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff26 	bl	8000b78 <__aeabi_d2iz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	633b      	str	r3, [r7, #48]	@ 0x30
		computing = 100.0*(computing-(double)Lon4);
 8001d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d32:	f7fe fc07 	bl	8000544 <__aeabi_i2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001d3e:	f7fe fab3 	bl	80002a8 <__aeabi_dsub>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4bca      	ldr	r3, [pc, #808]	@ (8002078 <task_send_values_GPS+0x698>)
 8001d50:	f7fe fc62 	bl	8000618 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon3 = floor(computing);
 8001d5c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001d60:	f011 fd1e 	bl	80137a0 <floor>
 8001d64:	ec53 2b10 	vmov	r2, r3, d0
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff04 	bl	8000b78 <__aeabi_d2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
		computing = 100.0*(computing-(double)Lon3);
 8001d74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d76:	f7fe fbe5 	bl	8000544 <__aeabi_i2d>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001d82:	f7fe fa91 	bl	80002a8 <__aeabi_dsub>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	4bb9      	ldr	r3, [pc, #740]	@ (8002078 <task_send_values_GPS+0x698>)
 8001d94:	f7fe fc40 	bl	8000618 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon2 = floor(computing);
 8001da0:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001da4:	f011 fcfc 	bl	80137a0 <floor>
 8001da8:	ec53 2b10 	vmov	r2, r3, d0
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fee2 	bl	8000b78 <__aeabi_d2iz>
 8001db4:	4603      	mov	r3, r0
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
		computing = 100.0*(computing-(double)Lon2);
 8001db8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001dba:	f7fe fbc3 	bl	8000544 <__aeabi_i2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001dc6:	f7fe fa6f 	bl	80002a8 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4ba8      	ldr	r3, [pc, #672]	@ (8002078 <task_send_values_GPS+0x698>)
 8001dd8:	f7fe fc1e 	bl	8000618 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon1 = floor(computing);
 8001de4:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001de8:	f011 fcda 	bl	80137a0 <floor>
 8001dec:	ec53 2b10 	vmov	r2, r3, d0
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fec0 	bl	8000b78 <__aeabi_d2iz>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
		computing = 100.0*(computing-(double)Lon1);
 8001dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001dfe:	f7fe fba1 	bl	8000544 <__aeabi_i2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001e0a:	f7fe fa4d 	bl	80002a8 <__aeabi_dsub>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b97      	ldr	r3, [pc, #604]	@ (8002078 <task_send_values_GPS+0x698>)
 8001e1c:	f7fe fbfc 	bl	8000618 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon0 = floor(computing);
 8001e28:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001e2c:	f011 fcb8 	bl	80137a0 <floor>
 8001e30:	ec53 2b10 	vmov	r2, r3, d0
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fe9e 	bl	8000b78 <__aeabi_d2iz>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	623b      	str	r3, [r7, #32]

		gps_data1.gps_data_long[0] = Lon7;
 8001e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b8d      	ldr	r3, [pc, #564]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e46:	721a      	strb	r2, [r3, #8]
		gps_data1.gps_data_long[1] = Lon6;
 8001e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b8b      	ldr	r3, [pc, #556]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e4e:	725a      	strb	r2, [r3, #9]
		gps_data1.gps_data_long[2] = Lon5;
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b89      	ldr	r3, [pc, #548]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e56:	729a      	strb	r2, [r3, #10]
		gps_data1.gps_data_long[3] = Lon4;
 8001e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b87      	ldr	r3, [pc, #540]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e5e:	72da      	strb	r2, [r3, #11]
		gps_data1.gps_data_long[4] = Lon3;
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b85      	ldr	r3, [pc, #532]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e66:	731a      	strb	r2, [r3, #12]
		gps_data1.gps_data_long[5] = Lon2;
 8001e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b83      	ldr	r3, [pc, #524]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e6e:	735a      	strb	r2, [r3, #13]
		gps_data1.gps_data_long[6] = Lon1;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b81      	ldr	r3, [pc, #516]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e76:	739a      	strb	r2, [r3, #14]
		gps_data1.gps_data_long[7] = Lon0;
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b7f      	ldr	r3, [pc, #508]	@ (800207c <task_send_values_GPS+0x69c>)
 8001e7e:	73da      	strb	r2, [r3, #15]

		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Altitude
		computing = gpsCoords.alt;
 8001e80:	4b7f      	ldr	r3, [pc, #508]	@ (8002080 <task_send_values_GPS+0x6a0>)
 8001e82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e86:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt7 = floor(computing);
 8001e8a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001e8e:	f011 fc87 	bl	80137a0 <floor>
 8001e92:	ec53 2b10 	vmov	r2, r3, d0
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe6d 	bl	8000b78 <__aeabi_d2iz>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	61fb      	str	r3, [r7, #28]
		computing = 100.0*(computing-(double)Alt7);
 8001ea2:	69f8      	ldr	r0, [r7, #28]
 8001ea4:	f7fe fb4e 	bl	8000544 <__aeabi_i2d>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001eb0:	f7fe f9fa 	bl	80002a8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	@ (8002078 <task_send_values_GPS+0x698>)
 8001ec2:	f7fe fba9 	bl	8000618 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt6 = floor(computing);
 8001ece:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001ed2:	f011 fc65 	bl	80137a0 <floor>
 8001ed6:	ec53 2b10 	vmov	r2, r3, d0
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fe4b 	bl	8000b78 <__aeabi_d2iz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	61bb      	str	r3, [r7, #24]
		computing = 100.0*(computing-(double)Alt6);
 8001ee6:	69b8      	ldr	r0, [r7, #24]
 8001ee8:	f7fe fb2c 	bl	8000544 <__aeabi_i2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ef4:	f7fe f9d8 	bl	80002a8 <__aeabi_dsub>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <task_send_values_GPS+0x698>)
 8001f06:	f7fe fb87 	bl	8000618 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt5 = floor(computing);
 8001f12:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f16:	f011 fc43 	bl	80137a0 <floor>
 8001f1a:	ec53 2b10 	vmov	r2, r3, d0
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe29 	bl	8000b78 <__aeabi_d2iz>
 8001f26:	4603      	mov	r3, r0
 8001f28:	617b      	str	r3, [r7, #20]
		computing = 100.0*(computing-(double)Alt5);
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7fe fb0a 	bl	8000544 <__aeabi_i2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001f38:	f7fe f9b6 	bl	80002a8 <__aeabi_dsub>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <task_send_values_GPS+0x698>)
 8001f4a:	f7fe fb65 	bl	8000618 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt4 = floor(computing);
 8001f56:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f5a:	f011 fc21 	bl	80137a0 <floor>
 8001f5e:	ec53 2b10 	vmov	r2, r3, d0
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fe07 	bl	8000b78 <__aeabi_d2iz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	613b      	str	r3, [r7, #16]
		computing = 100.0*(computing-(double)Alt4);
 8001f6e:	6938      	ldr	r0, [r7, #16]
 8001f70:	f7fe fae8 	bl	8000544 <__aeabi_i2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001f7c:	f7fe f994 	bl	80002a8 <__aeabi_dsub>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002078 <task_send_values_GPS+0x698>)
 8001f8e:	f7fe fb43 	bl	8000618 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt3 = floor(computing);
 8001f9a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f9e:	f011 fbff 	bl	80137a0 <floor>
 8001fa2:	ec53 2b10 	vmov	r2, r3, d0
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fde5 	bl	8000b78 <__aeabi_d2iz>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60fb      	str	r3, [r7, #12]
		computing = 100.0*(computing-(double)Alt3);
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7fe fac6 	bl	8000544 <__aeabi_i2d>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001fc0:	f7fe f972 	bl	80002a8 <__aeabi_dsub>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <task_send_values_GPS+0x698>)
 8001fd2:	f7fe fb21 	bl	8000618 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt2 = floor(computing);
 8001fde:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001fe2:	f011 fbdd 	bl	80137a0 <floor>
 8001fe6:	ec53 2b10 	vmov	r2, r3, d0
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fdc3 	bl	8000b78 <__aeabi_d2iz>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	60bb      	str	r3, [r7, #8]
		computing = 100.0*(computing-(double)Alt2);
 8001ff6:	68b8      	ldr	r0, [r7, #8]
 8001ff8:	f7fe faa4 	bl	8000544 <__aeabi_i2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002004:	f7fe f950 	bl	80002a8 <__aeabi_dsub>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <task_send_values_GPS+0x698>)
 8002016:	f7fe faff 	bl	8000618 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt1 = floor(computing);
 8002022:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002026:	f011 fbbb 	bl	80137a0 <floor>
 800202a:	ec53 2b10 	vmov	r2, r3, d0
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fda1 	bl	8000b78 <__aeabi_d2iz>
 8002036:	4603      	mov	r3, r0
 8002038:	607b      	str	r3, [r7, #4]
		computing = 100.0*(computing-(double)Alt1);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fa82 	bl	8000544 <__aeabi_i2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002048:	f7fe f92e 	bl	80002a8 <__aeabi_dsub>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <task_send_values_GPS+0x698>)
 800205a:	f7fe fadd 	bl	8000618 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt0 = floor(computing);
 8002066:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800206a:	f011 fb99 	bl	80137a0 <floor>
 800206e:	ec53 2b10 	vmov	r2, r3, d0
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	e005      	b.n	8002084 <task_send_values_GPS+0x6a4>
 8002078:	40590000 	.word	0x40590000
 800207c:	2000041c 	.word	0x2000041c
 8002080:	20000240 	.word	0x20000240
 8002084:	f7fe fd78 	bl	8000b78 <__aeabi_d2iz>
 8002088:	4603      	mov	r3, r0
 800208a:	603b      	str	r3, [r7, #0]

		gps_data1.gps_data_alt[0] = Alt7;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <task_send_values_GPS+0x708>)
 8002092:	741a      	strb	r2, [r3, #16]
		gps_data1.gps_data_alt[1] = Alt6;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <task_send_values_GPS+0x708>)
 800209a:	745a      	strb	r2, [r3, #17]
		gps_data1.gps_data_alt[2] = Alt5;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <task_send_values_GPS+0x708>)
 80020a2:	749a      	strb	r2, [r3, #18]
		gps_data1.gps_data_alt[3] = Alt4;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <task_send_values_GPS+0x708>)
 80020aa:	74da      	strb	r2, [r3, #19]
		gps_data1.gps_data_alt[4] = Alt3;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <task_send_values_GPS+0x708>)
 80020b2:	751a      	strb	r2, [r3, #20]
		gps_data1.gps_data_alt[5] = Alt2;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <task_send_values_GPS+0x708>)
 80020ba:	755a      	strb	r2, [r3, #21]
		gps_data1.gps_data_alt[6] = Alt1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <task_send_values_GPS+0x708>)
 80020c2:	759a      	strb	r2, [r3, #22]
		gps_data1.gps_data_alt[7] = Alt0;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <task_send_values_GPS+0x708>)
 80020ca:	75da      	strb	r2, [r3, #23]

		MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_GPS, NULL,&gps_data1);
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <task_send_values_GPS+0x70c>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <task_send_values_GPS+0x708>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	2130      	movs	r1, #48	@ 0x30
 80020d6:	f7ff fc43 	bl	8001960 <MESSAGE_SendMailbox>
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		gpsSend = 0;
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <task_send_values_GPS+0x710>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
	}


}
 80020e0:	bf00      	nop
 80020e2:	3768      	adds	r7, #104	@ 0x68
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000041c 	.word	0x2000041c
 80020ec:	20000414 	.word	0x20000414
 80020f0:	20000418 	.word	0x20000418

080020f4 <TransmitGPSFrame>:

void TransmitGPSFrame(GPSFrameTypeDef *frame) {
 80020f4:	b5b0      	push	{r4, r5, r7, lr}
 80020f6:	b092      	sub	sp, #72	@ 0x48
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_GPS)];
	API_FrameTypeDef_GPS api_frame;
	api_frame.header = API_HEADER;
 80020fc:	237e      	movs	r3, #126	@ 0x7e
 80020fe:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(GPSFrameTypeDef);
 8002100:	2318      	movs	r3, #24
 8002102:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_GPS;
 8002104:	2330      	movs	r3, #48	@ 0x30
 8002106:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(GPSFrameTypeDef));
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	f107 030d 	add.w	r3, r7, #13
 800210e:	6810      	ldr	r0, [r2, #0]
 8002110:	6851      	ldr	r1, [r2, #4]
 8002112:	6895      	ldr	r5, [r2, #8]
 8002114:	68d4      	ldr	r4, [r2, #12]
 8002116:	6018      	str	r0, [r3, #0]
 8002118:	6059      	str	r1, [r3, #4]
 800211a:	609d      	str	r5, [r3, #8]
 800211c:	60dc      	str	r4, [r3, #12]
 800211e:	6910      	ldr	r0, [r2, #16]
 8002120:	6951      	ldr	r1, [r2, #20]
 8002122:	6118      	str	r0, [r3, #16]
 8002124:	6159      	str	r1, [r3, #20]
	api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(GPSFrameTypeDef));
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	3305      	adds	r3, #5
 800212c:	2118      	movs	r1, #24
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f97a 	bl	8001428 <CalculateCRC>
 8002134:	4603      	mov	r3, r0
 8002136:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_GPS));
 800213a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800213e:	f107 0508 	add.w	r5, r7, #8
 8002142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002146:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800214a:	c407      	stmia	r4!, {r0, r1, r2}
 800214c:	8023      	strh	r3, [r4, #0]

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_GPS));
 800214e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002152:	221e      	movs	r2, #30
 8002154:	4619      	mov	r1, r3
 8002156:	4803      	ldr	r0, [pc, #12]	@ (8002164 <TransmitGPSFrame+0x70>)
 8002158:	f009 ffec 	bl	800c134 <HAL_UART_Transmit_IT>

}
 800215c:	bf00      	nop
 800215e:	3748      	adds	r7, #72	@ 0x48
 8002160:	46bd      	mov	sp, r7
 8002162:	bdb0      	pop	{r4, r5, r7, pc}
 8002164:	20001014 	.word	0x20001014

08002168 <ProcessNMEALine>:
#include <trames_nmea.h>

//Interprets gps frames to retrieve useful data (latitude, longitude, altitude ...)
void ProcessNMEALine(char *s, GPS_Coords_t * coords, int * quality)
{
 8002168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800216c:	b0d6      	sub	sp, #344	@ 0x158
 800216e:	af00      	add	r7, sp, #0
 8002170:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002174:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002178:	6018      	str	r0, [r3, #0]
 800217a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800217e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002182:	6019      	str	r1, [r3, #0]
 8002184:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002188:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800218c:	601a      	str	r2, [r3, #0]
  int x;


  // Check the line synchronization

  if (s[0] != '$')
 800218e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002192:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b24      	cmp	r3, #36	@ 0x24
 800219c:	f040 83f5 	bne.w	800298a <ProcessNMEALine+0x822>
    return;

  // Verify the line checksum integrity

  c = 0; // checksum
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f

  i = 1; // Xor bytes between $ and *, but not including those bytes
 80021a6:	2301      	movs	r3, #1
 80021a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

  while((s[i] != 0) && (s[i] != '*'))
 80021ac:	e011      	b.n	80021d2 <ProcessNMEALine+0x6a>
    c ^= s[i++];
 80021ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 80021b8:	461a      	mov	r2, r3
 80021ba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80021be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80021cc:	4053      	eors	r3, r2
 80021ce:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
  while((s[i] != 0) && (s[i] != '*'))
 80021d2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80021d6:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80021da:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <ProcessNMEALine+0x96>
 80021e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80021ec:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80021f0:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80021fc:	d1d7      	bne.n	80021ae <ProcessNMEALine+0x46>

  if (s[i] == 0)
 80021fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002202:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002206:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 83bc 	beq.w	800298e <ProcessNMEALine+0x826>
    return;

  sscanf(&s[i + 1],"%x",&x); // Checksum byte - Note sscanf needs this to be an int, rather than a single byte
 8002216:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800221a:	3301      	adds	r3, #1
 800221c:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002220:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	4413      	add	r3, r2
 8002228:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800222c:	4952      	ldr	r1, [pc, #328]	@ (8002378 <ProcessNMEALine+0x210>)
 800222e:	4618      	mov	r0, r3
 8002230:	f00d ffe4 	bl	80101fc <siscanf>

  if (c != (char)(x & 0xFF)) // Leave if checksum fails
 8002234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f897 214f 	ldrb.w	r2, [r7, #335]	@ 0x14f
 800223e:	429a      	cmp	r2, r3
 8002240:	f040 83a7 	bne.w	8002992 <ProcessNMEALine+0x82a>
    return;

  // Parse out fields on , and *

  f = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  while(1)
  {
    field[f++] = s;
 800224a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800225a:	f107 0208 	add.w	r2, r7, #8
 800225e:	4413      	add	r3, r2
 8002260:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002264:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	f843 2ccc 	str.w	r2, [r3, #-204]

    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 800226e:	e00a      	b.n	8002286 <ProcessNMEALine+0x11e>
      s++;
 8002270:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002274:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002278:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800227c:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	3201      	adds	r2, #1
 8002284:	601a      	str	r2, [r3, #0]
    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 8002286:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800228a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01f      	beq.n	80022d6 <ProcessNMEALine+0x16e>
 8002296:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800229a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b2c      	cmp	r3, #44	@ 0x2c
 80022a4:	d017      	beq.n	80022d6 <ProcessNMEALine+0x16e>
 80022a6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80022aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80022b4:	d00f      	beq.n	80022d6 <ProcessNMEALine+0x16e>
 80022b6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80022ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b0d      	cmp	r3, #13
 80022c4:	d007      	beq.n	80022d6 <ProcessNMEALine+0x16e>
 80022c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80022ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b0a      	cmp	r3, #10
 80022d4:	d1cc      	bne.n	8002270 <ProcessNMEALine+0x108>

    if ((*s == 0) || (*s == '*') || (*s == 0x0D) || (*s == 0x0A) || (f == (FIELD_MAX - 1)))
 80022d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80022da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01b      	beq.n	800231e <ProcessNMEALine+0x1b6>
 80022e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80022ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80022f4:	d013      	beq.n	800231e <ProcessNMEALine+0x1b6>
 80022f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80022fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b0d      	cmp	r3, #13
 8002304:	d00b      	beq.n	800231e <ProcessNMEALine+0x1b6>
 8002306:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800230a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b0a      	cmp	r3, #10
 8002314:	d003      	beq.n	800231e <ProcessNMEALine+0x1b6>
 8002316:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800231a:	2b13      	cmp	r3, #19
 800231c:	d11e      	bne.n	800235c <ProcessNMEALine+0x1f4>
    {
      *s = 0;
 800231e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002322:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
      field[f] = NULL;
 800232c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002336:	f107 0208 	add.w	r2, r7, #8
 800233a:	4413      	add	r3, r2
 800233c:	2200      	movs	r2, #0
 800233e:	f843 2ccc 	str.w	r2, [r3, #-204]
      break;
 8002342:	bf00      	nop
  }


  // Process a couple of NMEA sentences for illustration

  if (strncmp(field[0],"$G",2) == 0) // Allow for different Talker ID's ie $GP, $GN, $GL, etc
 8002344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002348:	2202      	movs	r2, #2
 800234a:	490c      	ldr	r1, [pc, #48]	@ (800237c <ProcessNMEALine+0x214>)
 800234c:	4618      	mov	r0, r3
 800234e:	f00e f861 	bl	8010414 <strncmp>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 831e 	bne.w	8002996 <ProcessNMEALine+0x82e>
 800235a:	e011      	b.n	8002380 <ProcessNMEALine+0x218>
    *s++ = 0;
 800235c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002360:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800236a:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800236e:	1c59      	adds	r1, r3, #1
 8002370:	6011      	str	r1, [r2, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    field[f++] = s;
 8002376:	e768      	b.n	800224a <ProcessNMEALine+0xe2>
 8002378:	08013958 	.word	0x08013958
 800237c:	0801395c 	.word	0x0801395c
  {
    if ((strcmp(&field[0][3],"GLL") == 0) && (f > 6)) // Geographic Position, Latitude, Longitude and Time
 8002380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002384:	3303      	adds	r3, #3
 8002386:	49bd      	ldr	r1, [pc, #756]	@ (800267c <ProcessNMEALine+0x514>)
 8002388:	4618      	mov	r0, r3
 800238a:	f7fd ff21 	bl	80001d0 <strcmp>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 8116 	bne.w	80025c2 <ProcessNMEALine+0x45a>
 8002396:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800239a:	2b06      	cmp	r3, #6
 800239c:	f340 8111 	ble.w	80025c2 <ProcessNMEALine+0x45a>
      // Field 4 Lon Hemi E/W
      // Field 5 UTC Time HHMMSS.SSS
      // Field 6 Fix A=Valid, V=Not Valid
      // Field 7 Mode A=Autonomous, D=Differential, E=Estimated, N=Not Valid [Optional] - Simulator Does not report this

      sscanf(field[1],"%lf",&lat);
 80023a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023a4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80023a8:	49b5      	ldr	r1, [pc, #724]	@ (8002680 <ProcessNMEALine+0x518>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f00d ff26 	bl	80101fc <siscanf>

      lat_hemi = field[2][0];
 80023b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143

      sscanf(field[3],"%lf",&lon);
 80023ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023be:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80023c2:	49af      	ldr	r1, [pc, #700]	@ (8002680 <ProcessNMEALine+0x518>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f00d ff19 	bl	80101fc <siscanf>

      lon_hemi = field[4][0];
 80023ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142

      sscanf(field[5],"%lf",&fix_time);
 80023d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023d8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80023dc:	49a8      	ldr	r1, [pc, #672]	@ (8002680 <ProcessNMEALine+0x518>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f00d ff0c 	bl	80101fc <siscanf>

      valid = field[6][0];
 80023e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141

      if (valid == 'A')
 80023ee:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80023f2:	2b41      	cmp	r3, #65	@ 0x41
 80023f4:	f040 82c7 	bne.w	8002986 <ProcessNMEALine+0x81e>
      {
        // Extract Time-of-Fix

        fix_minute = (int)fix_time / 100;
 80023f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f7fe fbba 	bl	8000b78 <__aeabi_d2iz>
 8002404:	4603      	mov	r3, r0
 8002406:	4a9f      	ldr	r2, [pc, #636]	@ (8002684 <ProcessNMEALine+0x51c>)
 8002408:	fb82 1203 	smull	r1, r2, r2, r3
 800240c:	1152      	asrs	r2, r2, #5
 800240e:	17db      	asrs	r3, r3, #31
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

        fix_second = fix_time - (fix_minute * 100);
 8002416:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800241a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800241e:	2264      	movs	r2, #100	@ 0x64
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f88d 	bl	8000544 <__aeabi_i2d>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fd ff39 	bl	80002a8 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

        fix_hour = fix_minute / 100;
 800243e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002442:	4a90      	ldr	r2, [pc, #576]	@ (8002684 <ProcessNMEALine+0x51c>)
 8002444:	fb82 1203 	smull	r1, r2, r2, r3
 8002448:	1152      	asrs	r2, r2, #5
 800244a:	17db      	asrs	r3, r3, #31
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

        fix_minute = fix_minute % 100;
 8002452:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002456:	4a8b      	ldr	r2, [pc, #556]	@ (8002684 <ProcessNMEALine+0x51c>)
 8002458:	fb82 1203 	smull	r1, r2, r2, r3
 800245c:	1151      	asrs	r1, r2, #5
 800245e:	17da      	asrs	r2, r3, #31
 8002460:	1a8a      	subs	r2, r1, r2
 8002462:	2164      	movs	r1, #100	@ 0x64
 8002464:	fb01 f202 	mul.w	r2, r1, r2
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

        // Process Latitude DDMM.mmmmm

        lat_deg = (int)lat / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 800246e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb7f 	bl	8000b78 <__aeabi_d2iz>
 800247a:	4603      	mov	r3, r0
 800247c:	4a81      	ldr	r2, [pc, #516]	@ (8002684 <ProcessNMEALine+0x51c>)
 800247e:	fb82 1203 	smull	r1, r2, r2, r3
 8002482:	1152      	asrs	r2, r2, #5
 8002484:	17db      	asrs	r3, r3, #31
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

        lat_min = lat - (lat_deg * 100);
 800248c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002490:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002494:	2264      	movs	r2, #100	@ 0x64
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f852 	bl	8000544 <__aeabi_i2d>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4620      	mov	r0, r4
 80024a6:	4629      	mov	r1, r5
 80024a8:	f7fd fefe 	bl	80002a8 <__aeabi_dsub>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

        lat = (double)lat_deg + (lat_min / 60.0); // Computed Latitude in DECIMAL DEGREES
 80024b4:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80024b8:	f7fe f844 	bl	8000544 <__aeabi_i2d>
 80024bc:	4604      	mov	r4, r0
 80024be:	460d      	mov	r5, r1
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	4b70      	ldr	r3, [pc, #448]	@ (8002688 <ProcessNMEALine+0x520>)
 80024c6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80024ca:	f7fe f9cf 	bl	800086c <__aeabi_ddiv>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4620      	mov	r0, r4
 80024d4:	4629      	mov	r1, r5
 80024d6:	f7fd fee9 	bl	80002ac <__adddf3>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

        if (lat_hemi == 'S')
 80024e2:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 80024e6:	2b53      	cmp	r3, #83	@ 0x53
 80024e8:	d10e      	bne.n	8002508 <ProcessNMEALine+0x3a0>
        {
          lat_deg = -lat_deg;
 80024ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80024ee:	425b      	negs	r3, r3
 80024f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
          lat = -lat;
 80024f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80024f8:	603a      	str	r2, [r7, #0]
 80024fa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	ed97 7b00 	vldr	d7, [r7]
 8002504:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
        }

        // Process Longitude DDDMM.mmmmm

        lon_deg = (int)lon / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 8002508:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f7fe fb32 	bl	8000b78 <__aeabi_d2iz>
 8002514:	4603      	mov	r3, r0
 8002516:	4a5b      	ldr	r2, [pc, #364]	@ (8002684 <ProcessNMEALine+0x51c>)
 8002518:	fb82 1203 	smull	r1, r2, r2, r3
 800251c:	1152      	asrs	r2, r2, #5
 800251e:	17db      	asrs	r3, r3, #31
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

        lon_min = lon - (lon_deg * 100);
 8002526:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800252a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800252e:	2264      	movs	r2, #100	@ 0x64
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f805 	bl	8000544 <__aeabi_i2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4620      	mov	r0, r4
 8002540:	4629      	mov	r1, r5
 8002542:	f7fd feb1 	bl	80002a8 <__aeabi_dsub>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

        lon = (double)lon_deg + (lon_min / 60.0); // Computed Longitude in DECIMAL DEGREES
 800254e:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002552:	f7fd fff7 	bl	8000544 <__aeabi_i2d>
 8002556:	4604      	mov	r4, r0
 8002558:	460d      	mov	r5, r1
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <ProcessNMEALine+0x520>)
 8002560:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8002564:	f7fe f982 	bl	800086c <__aeabi_ddiv>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fd fe9c 	bl	80002ac <__adddf3>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

        if (lon_hemi == 'W')
 800257c:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 8002580:	2b57      	cmp	r3, #87	@ 0x57
 8002582:	d10b      	bne.n	800259c <ProcessNMEALine+0x434>
        {
          lon_deg = -lon_deg;
 8002584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002588:	425b      	negs	r3, r3
 800258a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
          lon = -lon;
 800258e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002592:	4692      	mov	sl, r2
 8002594:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8002598:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
        }


        coords->lat=lat;
 800259c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80025a0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80025a4:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80025a8:	6809      	ldr	r1, [r1, #0]
 80025aa:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 80025ae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80025b2:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80025b6:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80025ba:	6809      	ldr	r1, [r1, #0]
 80025bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
 80025c0:	e1e1      	b.n	8002986 <ProcessNMEALine+0x81e>
      }

    }
    else if ((strcmp(&field[0][3],"GSA") == 0) && (f > 17)) // GPS DOP and Active Satellites
 80025c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c6:	3303      	adds	r3, #3
 80025c8:	4930      	ldr	r1, [pc, #192]	@ (800268c <ProcessNMEALine+0x524>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd fe00 	bl	80001d0 <strcmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d15e      	bne.n	8002694 <ProcessNMEALine+0x52c>
 80025d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80025da:	2b11      	cmp	r3, #17
 80025dc:	dd5a      	ble.n	8002694 <ProcessNMEALine+0x52c>
      // Field 14 SV List#12
      // Field 15 PDOP
      // Field 16 HDOP
      // Field 17 VDOP

      mode = field[1][0];
 80025de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      fix = field[2][0];
 80025e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

      sscanf(field[15],"%lf",&pdop); // Position Dilution of precision (PDOP)
 80025f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f6:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80025fa:	4921      	ldr	r1, [pc, #132]	@ (8002680 <ProcessNMEALine+0x518>)
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00d fdfd 	bl	80101fc <siscanf>
      sscanf(field[16],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 8002602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002606:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800260a:	491d      	ldr	r1, [pc, #116]	@ (8002680 <ProcessNMEALine+0x518>)
 800260c:	4618      	mov	r0, r3
 800260e:	f00d fdf5 	bl	80101fc <siscanf>
      sscanf(field[17],"%lf",&vdop); // Vertical Dilution of precision (VDOP)
 8002612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002616:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800261a:	4919      	ldr	r1, [pc, #100]	@ (8002680 <ProcessNMEALine+0x518>)
 800261c:	4618      	mov	r0, r3
 800261e:	f00d fded 	bl	80101fc <siscanf>


      for(i=0; i<12; i++)
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002628:	e023      	b.n	8002672 <ProcessNMEALine+0x50a>
      {
        if (field[3+i][0])
 800262a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800262e:	3303      	adds	r3, #3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002636:	f107 0208 	add.w	r2, r7, #8
 800263a:	4413      	add	r3, r2
 800263c:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <ProcessNMEALine+0x500>
        {
          sscanf(field[3+i],"%d",&sv);
 8002646:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800264a:	3303      	adds	r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002652:	f107 0208 	add.w	r2, r7, #8
 8002656:	4413      	add	r3, r2
 8002658:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 800265c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002660:	490b      	ldr	r1, [pc, #44]	@ (8002690 <ProcessNMEALine+0x528>)
 8002662:	4618      	mov	r0, r3
 8002664:	f00d fdca 	bl	80101fc <siscanf>
      for(i=0; i<12; i++)
 8002668:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800266c:	3301      	adds	r3, #1
 800266e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002672:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8002676:	2b0b      	cmp	r3, #11
 8002678:	ddd7      	ble.n	800262a <ProcessNMEALine+0x4c2>
    {
 800267a:	e185      	b.n	8002988 <ProcessNMEALine+0x820>
 800267c:	08013960 	.word	0x08013960
 8002680:	08013964 	.word	0x08013964
 8002684:	51eb851f 	.word	0x51eb851f
 8002688:	404e0000 	.word	0x404e0000
 800268c:	08013968 	.word	0x08013968
 8002690:	0801396c 	.word	0x0801396c
        }
      }


    }
    else  if ((strcmp(&field[0][3],"GGA") == 0) && (f > 14))
 8002694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002698:	3303      	adds	r3, #3
 800269a:	49c2      	ldr	r1, [pc, #776]	@ (80029a4 <ProcessNMEALine+0x83c>)
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd fd97 	bl	80001d0 <strcmp>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 8176 	bne.w	8002996 <ProcessNMEALine+0x82e>
 80026aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80026ae:	2b0e      	cmp	r3, #14
 80026b0:	f340 8171 	ble.w	8002996 <ProcessNMEALine+0x82e>
      double lat_min, lon_min;
      double fix_time;
      int fix_hour, fix_minute;
      double fix_second;
      char lat_hemi, lon_hemi;
      int valid = 1;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
      // Field 11 Geoid Separation
      // Field 12 Units M
      // Field 13 Age of Differential (NULL when not used)
      // Field 14 Differential Reference Station ID

      sscanf(field[2],"%lf",&lat);
 80026ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026be:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80026c2:	49b9      	ldr	r1, [pc, #740]	@ (80029a8 <ProcessNMEALine+0x840>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00d fd99 	bl	80101fc <siscanf>

      lat_hemi = field[3][0];
 80026ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d

      sscanf(field[4],"%lf",&lon);
 80026d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026d8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80026dc:	49b2      	ldr	r1, [pc, #712]	@ (80029a8 <ProcessNMEALine+0x840>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f00d fd8c 	bl	80101fc <siscanf>

      lon_hemi = field[5][0];
 80026e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c

      sscanf(field[9],"%lf",&msl);
 80026ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80026f6:	49ac      	ldr	r1, [pc, #688]	@ (80029a8 <ProcessNMEALine+0x840>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00d fd7f 	bl	80101fc <siscanf>

      sscanf(field[11],"%lf",&alt);
 80026fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002702:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002706:	49a8      	ldr	r1, [pc, #672]	@ (80029a8 <ProcessNMEALine+0x840>)
 8002708:	4618      	mov	r0, r3
 800270a:	f00d fd77 	bl	80101fc <siscanf>

      sscanf(field[1],"%lf",&fix_time);
 800270e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002712:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002716:	49a4      	ldr	r1, [pc, #656]	@ (80029a8 <ProcessNMEALine+0x840>)
 8002718:	4618      	mov	r0, r3
 800271a:	f00d fd6f 	bl	80101fc <siscanf>

      if (sscanf(field[6],"%d",quality) == 0)// 0=Fix Not available, 1=GPS SPS, 2=GPS SPS DIFF
 800271e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002722:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002726:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	499f      	ldr	r1, [pc, #636]	@ (80029ac <ProcessNMEALine+0x844>)
 800272e:	f00d fd65 	bl	80101fc <siscanf>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <ProcessNMEALine+0x5d6>
        valid = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

      sscanf(field[7],"%d",&sv);    // Satellites used (or in view, depends on receiver)
 800273e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002742:	f107 021c 	add.w	r2, r7, #28
 8002746:	4999      	ldr	r1, [pc, #612]	@ (80029ac <ProcessNMEALine+0x844>)
 8002748:	4618      	mov	r0, r3
 800274a:	f00d fd57 	bl	80101fc <siscanf>

      sscanf(field[8],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 800274e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002752:	f107 0220 	add.w	r2, r7, #32
 8002756:	4994      	ldr	r1, [pc, #592]	@ (80029a8 <ProcessNMEALine+0x840>)
 8002758:	4618      	mov	r0, r3
 800275a:	f00d fd4f 	bl	80101fc <siscanf>

      if (valid != 0)
 800275e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8117 	beq.w	8002996 <ProcessNMEALine+0x82e>
      {
        lat_deg = (int)lat / 100;
 8002768:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe fa00 	bl	8000b78 <__aeabi_d2iz>
 8002778:	4603      	mov	r3, r0
 800277a:	4a8d      	ldr	r2, [pc, #564]	@ (80029b0 <ProcessNMEALine+0x848>)
 800277c:	fb82 1203 	smull	r1, r2, r2, r3
 8002780:	1152      	asrs	r2, r2, #5
 8002782:	17db      	asrs	r3, r3, #31
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

        lat_min = lat - (lat_deg * 100);
 800278a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800278e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002792:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002796:	2264      	movs	r2, #100	@ 0x64
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fed1 	bl	8000544 <__aeabi_i2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4650      	mov	r0, sl
 80027a8:	4659      	mov	r1, fp
 80027aa:	f7fd fd7d 	bl	80002a8 <__aeabi_dsub>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100

        lat = (double)lat_deg + (lat_min / 60.0);
 80027b6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80027ba:	f7fd fec3 	bl	8000544 <__aeabi_i2d>
 80027be:	4682      	mov	sl, r0
 80027c0:	468b      	mov	fp, r1
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b7b      	ldr	r3, [pc, #492]	@ (80029b4 <ProcessNMEALine+0x84c>)
 80027c8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80027cc:	f7fe f84e 	bl	800086c <__aeabi_ddiv>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4650      	mov	r0, sl
 80027d6:	4659      	mov	r1, fp
 80027d8:	f7fd fd68 	bl	80002ac <__adddf3>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80027e4:	e9c1 2300 	strd	r2, r3, [r1]

        if (lat_hemi == 'S')
 80027e8:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80027ec:	2b53      	cmp	r3, #83	@ 0x53
 80027ee:	d10a      	bne.n	8002806 <ProcessNMEALine+0x69e>
          lat = -lat;
 80027f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	4690      	mov	r8, r2
 80027fa:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80027fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002802:	e9c3 8900 	strd	r8, r9, [r3]


        lon_deg = (int)lon / 100;
 8002806:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800280a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f7fe f9b1 	bl	8000b78 <__aeabi_d2iz>
 8002816:	4603      	mov	r3, r0
 8002818:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <ProcessNMEALine+0x848>)
 800281a:	fb82 1203 	smull	r1, r2, r2, r3
 800281e:	1152      	asrs	r2, r2, #5
 8002820:	17db      	asrs	r3, r3, #31
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

        lon_min = lon - (lon_deg * 100);
 8002828:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800282c:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8002830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002834:	2264      	movs	r2, #100	@ 0x64
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fe82 	bl	8000544 <__aeabi_i2d>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4640      	mov	r0, r8
 8002846:	4649      	mov	r1, r9
 8002848:	f7fd fd2e 	bl	80002a8 <__aeabi_dsub>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

        lon = (double)lon_deg + (lon_min / 60.0);
 8002854:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002858:	f7fd fe74 	bl	8000544 <__aeabi_i2d>
 800285c:	4680      	mov	r8, r0
 800285e:	4689      	mov	r9, r1
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b53      	ldr	r3, [pc, #332]	@ (80029b4 <ProcessNMEALine+0x84c>)
 8002866:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800286a:	f7fd ffff 	bl	800086c <__aeabi_ddiv>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4640      	mov	r0, r8
 8002874:	4649      	mov	r1, r9
 8002876:	f7fd fd19 	bl	80002ac <__adddf3>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002882:	e941 2302 	strd	r2, r3, [r1, #-8]

        if (lon_hemi == 'W')
 8002886:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800288a:	2b57      	cmp	r3, #87	@ 0x57
 800288c:	d10a      	bne.n	80028a4 <ProcessNMEALine+0x73c>
          lon = -lon;
 800288e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002896:	4614      	mov	r4, r2
 8002898:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800289c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028a0:	e943 4502 	strd	r4, r5, [r3, #-8]

        alt += msl; // Convert to height above datum
 80028a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80028b4:	f7fd fcfa 	bl	80002ac <__adddf3>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80028c0:	e9c1 2300 	strd	r2, r3, [r1]

        fix_minute = (int)fix_time / 100;
 80028c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fe f952 	bl	8000b78 <__aeabi_d2iz>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4a36      	ldr	r2, [pc, #216]	@ (80029b0 <ProcessNMEALine+0x848>)
 80028d8:	fb82 1203 	smull	r1, r2, r2, r3
 80028dc:	1152      	asrs	r2, r2, #5
 80028de:	17db      	asrs	r3, r3, #31
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

        fix_second = fix_time - (fix_minute * 100);
 80028e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80028ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80028f2:	2264      	movs	r2, #100	@ 0x64
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe23 	bl	8000544 <__aeabi_i2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4620      	mov	r0, r4
 8002904:	4629      	mov	r1, r5
 8002906:	f7fd fccf 	bl	80002a8 <__aeabi_dsub>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0

        fix_hour = fix_minute / 100;
 8002912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002916:	4a26      	ldr	r2, [pc, #152]	@ (80029b0 <ProcessNMEALine+0x848>)
 8002918:	fb82 1203 	smull	r1, r2, r2, r3
 800291c:	1152      	asrs	r2, r2, #5
 800291e:	17db      	asrs	r3, r3, #31
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

        fix_minute = fix_minute % 100;
 8002926:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800292a:	4a21      	ldr	r2, [pc, #132]	@ (80029b0 <ProcessNMEALine+0x848>)
 800292c:	fb82 1203 	smull	r1, r2, r2, r3
 8002930:	1151      	asrs	r1, r2, #5
 8002932:	17da      	asrs	r2, r3, #31
 8002934:	1a8a      	subs	r2, r1, r2
 8002936:	2164      	movs	r1, #100	@ 0x64
 8002938:	fb01 f202 	mul.w	r2, r1, r2
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

        coords->lat=lat;
 8002942:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800294e:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 8002958:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800295c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002960:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8002964:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 8002968:	6809      	ldr	r1, [r1, #0]
 800296a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        coords->alt=alt;
 800296e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800297a:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800297e:	6809      	ldr	r1, [r1, #0]
 8002980:	e9c1 2304 	strd	r2, r3, [r1, #16]
      }
    }
  }
  return;
 8002984:	e007      	b.n	8002996 <ProcessNMEALine+0x82e>
    {
 8002986:	bf00      	nop
  return;
 8002988:	e005      	b.n	8002996 <ProcessNMEALine+0x82e>
    return;
 800298a:	bf00      	nop
 800298c:	e004      	b.n	8002998 <ProcessNMEALine+0x830>
    return;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <ProcessNMEALine+0x830>
    return;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <ProcessNMEALine+0x830>
  return;
 8002996:	bf00      	nop
}
 8002998:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 800299c:	46bd      	mov	sp, r7
 800299e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a2:	bf00      	nop
 80029a4:	08013970 	.word	0x08013970
 80029a8:	08013964 	.word	0x08013964
 80029ac:	0801396c 	.word	0x0801396c
 80029b0:	51eb851f 	.word	0x51eb851f
 80029b4:	404e0000 	.word	0x404e0000

080029b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a07      	ldr	r2, [pc, #28]	@ (80029e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80029c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4a06      	ldr	r2, [pc, #24]	@ (80029e8 <vApplicationGetIdleTaskMemory+0x30>)
 80029ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	20000434 	.word	0x20000434
 80029e8:	20000488 	.word	0x20000488

080029ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80029f2:	f004 f909 	bl	8006c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029f6:	f000 f86b 	bl	8002ad0 <SystemClock_Config>

  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029fa:	f000 fd7b 	bl	80034f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029fe:	f000 fd19 	bl	8003434 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8002a02:	f000 f8b7 	bl	8002b74 <MX_ADC3_Init>
  MX_CAN1_Init();
 8002a06:	f000 f919 	bl	8002c3c <MX_CAN1_Init>
  MX_TIM1_Init();
 8002a0a:	f000 fa51 	bl	8002eb0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002a0e:	f000 faa9 	bl	8002f64 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002a12:	f000 fbad 	bl	8003170 <MX_TIM8_Init>
  MX_UART4_Init();
 8002a16:	f000 fc7d 	bl	8003314 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002a1a:	f000 fd3b 	bl	8003494 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8002a1e:	f000 f96f 	bl	8002d00 <MX_I2C2_Init>
  MX_UART5_Init();
 8002a22:	f000 fca7 	bl	8003374 <MX_UART5_Init>
  MX_COMP2_Init();
 8002a26:	f000 f93f 	bl	8002ca8 <MX_COMP2_Init>
  MX_SPI2_Init();
 8002a2a:	f000 f9a9 	bl	8002d80 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002a2e:	f000 f9e5 	bl	8002dfc <MX_SPI3_Init>
  MX_SWPMI1_Init();
 8002a32:	f000 fa1d 	bl	8002e70 <MX_SWPMI1_Init>
  MX_TIM6_Init();
 8002a36:	f000 fb2f 	bl	8003098 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002a3a:	f000 fb63 	bl	8003104 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002a3e:	f000 fcc9 	bl	80033d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 8002a42:	f7fe fc9f 	bl	8001384 <GLOBVAR_Init>

  MESSAGE_Init();
 8002a46:	f7fe ff51 	bl	80018ec <MESSAGE_Init>

  IMU_init();
 8002a4a:	f7fe fd11 	bl	8001470 <IMU_init>
  IMU_enable();
 8002a4e:	f7fe fde9 	bl	8001624 <IMU_enable>

  //Démarrage PWM différents channel du timer 3 et 8
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a52:	2100      	movs	r1, #0
 8002a54:	481a      	ldr	r0, [pc, #104]	@ (8002ac0 <main+0xd4>)
 8002a56:	f008 fa5f 	bl	800af18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4819      	ldr	r0, [pc, #100]	@ (8002ac4 <main+0xd8>)
 8002a5e:	f008 fa5b 	bl	800af18 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a62:	2104      	movs	r1, #4
 8002a64:	4816      	ldr	r0, [pc, #88]	@ (8002ac0 <main+0xd4>)
 8002a66:	f008 fa57 	bl	800af18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	4815      	ldr	r0, [pc, #84]	@ (8002ac4 <main+0xd8>)
 8002a6e:	f008 fa53 	bl	800af18 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002a72:	2108      	movs	r1, #8
 8002a74:	4812      	ldr	r0, [pc, #72]	@ (8002ac0 <main+0xd4>)
 8002a76:	f008 fa4f 	bl	800af18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <main+0xd8>)
 8002a7e:	f008 fa4b 	bl	800af18 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002a82:	210c      	movs	r1, #12
 8002a84:	480e      	ldr	r0, [pc, #56]	@ (8002ac0 <main+0xd4>)
 8002a86:	f008 fa47 	bl	800af18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002a8a:	210c      	movs	r1, #12
 8002a8c:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <main+0xd8>)
 8002a8e:	f008 fa43 	bl	800af18 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <main+0xdc>)
 8002a94:	1d3c      	adds	r4, r7, #4
 8002a96:	461d      	mov	r5, r3
 8002a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00a ff18 	bl	800d8de <osThreadCreate>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a06      	ldr	r2, [pc, #24]	@ (8002acc <main+0xe0>)
 8002ab2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Tasks_Init();
 8002ab4:	f7fe faa6 	bl	8001004 <Tasks_Init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002ab8:	f00a ff0a 	bl	800d8d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <main+0xd0>
 8002ac0:	20000ee4 	.word	0x20000ee4
 8002ac4:	20000fc8 	.word	0x20000fc8
 8002ac8:	08013980 	.word	0x08013980
 8002acc:	200012a8 	.word	0x200012a8

08002ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b096      	sub	sp, #88	@ 0x58
 8002ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	2244      	movs	r2, #68	@ 0x44
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00d fc90 	bl	8010404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002af2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002af6:	f006 fd27 	bl	8009548 <HAL_PWREx_ControlVoltageScaling>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002b00:	f000 fd73 	bl	80035ea <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b04:	2302      	movs	r3, #2
 8002b06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b0e:	2310      	movs	r3, #16
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b12:	2302      	movs	r3, #2
 8002b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b16:	2302      	movs	r3, #2
 8002b18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b1e:	230a      	movs	r3, #10
 8002b20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b22:	2307      	movs	r3, #7
 8002b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b26:	2302      	movs	r3, #2
 8002b28:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4618      	mov	r0, r3
 8002b34:	f006 fd5e 	bl	80095f4 <HAL_RCC_OscConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002b3e:	f000 fd54 	bl	80035ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b42:	230f      	movs	r3, #15
 8002b44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b46:	2303      	movs	r3, #3
 8002b48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b56:	463b      	mov	r3, r7
 8002b58:	2104      	movs	r1, #4
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f007 f926 	bl	8009dac <HAL_RCC_ClockConfig>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b66:	f000 fd40 	bl	80035ea <Error_Handler>
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3758      	adds	r7, #88	@ 0x58
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002b8a:	4b29      	ldr	r3, [pc, #164]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002b8c:	4a29      	ldr	r2, [pc, #164]	@ (8002c34 <MX_ADC3_Init+0xc0>)
 8002b8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b90:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002b96:	4b26      	ldr	r3, [pc, #152]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ba2:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002baa:	2204      	movs	r2, #4
 8002bac:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002bae:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bce:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002be2:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002bea:	4811      	ldr	r0, [pc, #68]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002bec:	f004 fa38 	bl	8007060 <HAL_ADC_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002bf6:	f000 fcf8 	bl	80035ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <MX_ADC3_Init+0xc4>)
 8002bfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bfe:	2306      	movs	r3, #6
 8002c00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c06:	237f      	movs	r3, #127	@ 0x7f
 8002c08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c12:	463b      	mov	r3, r7
 8002c14:	4619      	mov	r1, r3
 8002c16:	4806      	ldr	r0, [pc, #24]	@ (8002c30 <MX_ADC3_Init+0xbc>)
 8002c18:	f004 fb78 	bl	800730c <HAL_ADC_ConfigChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8002c22:	f000 fce2 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000c88 	.word	0x20000c88
 8002c34:	50040200 	.word	0x50040200
 8002c38:	04300002 	.word	0x04300002

08002c3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002c40:	4b17      	ldr	r3, [pc, #92]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c42:	4a18      	ldr	r2, [pc, #96]	@ (8002ca4 <MX_CAN1_Init+0x68>)
 8002c44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002c46:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c48:	2210      	movs	r2, #16
 8002c4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002c4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002c52:	4b13      	ldr	r3, [pc, #76]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c5a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_CAN1_Init+0x64>)
 8002c8c:	f004 ff2e 	bl	8007aec <HAL_CAN_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002c96:	f000 fca8 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000cec 	.word	0x20000cec
 8002ca4:	40006400 	.word	0x40006400

08002ca8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002cac:	4b12      	ldr	r3, [pc, #72]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cae:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <MX_COMP2_Init+0x54>)
 8002cb0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cb4:	2270      	movs	r2, #112	@ 0x70
 8002cb6:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002cd6:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002ce2:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <MX_COMP2_Init+0x50>)
 8002ce4:	f005 f8a6 	bl	8007e34 <HAL_COMP_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002cee:	f000 fc7c 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000d14 	.word	0x20000d14
 8002cfc:	40010204 	.word	0x40010204

08002d00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d06:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <MX_I2C2_Init+0x78>)
 8002d08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d7c <MX_I2C2_Init+0x7c>)
 8002d0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002d10:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d16:	4b17      	ldr	r3, [pc, #92]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002d22:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d28:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d3a:	480e      	ldr	r0, [pc, #56]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d3c:	f005 fdb2 	bl	80088a4 <HAL_I2C_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002d46:	f000 fc50 	bl	80035ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4809      	ldr	r0, [pc, #36]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d4e:	f006 fb55 	bl	80093fc <HAL_I2CEx_ConfigAnalogFilter>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002d58:	f000 fc47 	bl	80035ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4805      	ldr	r0, [pc, #20]	@ (8002d74 <MX_I2C2_Init+0x74>)
 8002d60:	f006 fb97 	bl	8009492 <HAL_I2CEx_ConfigDigitalFilter>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002d6a:	f000 fc3e 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000d40 	.word	0x20000d40
 8002d78:	40005800 	.word	0x40005800
 8002d7c:	10909cec 	.word	0x10909cec

08002d80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002d86:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <MX_SPI2_Init+0x78>)
 8002d88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002d8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d98:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002d9a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002d9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da0:	4b14      	ldr	r3, [pc, #80]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002da6:	4b13      	ldr	r3, [pc, #76]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dac:	4b11      	ldr	r3, [pc, #68]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002dce:	2207      	movs	r2, #7
 8002dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002dda:	2208      	movs	r2, #8
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002dde:	4805      	ldr	r0, [pc, #20]	@ (8002df4 <MX_SPI2_Init+0x74>)
 8002de0:	f007 fec4 	bl	800ab6c <HAL_SPI_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002dea:	f000 fbfe 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000d94 	.word	0x20000d94
 8002df8:	40003800 	.word	0x40003800

08002dfc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e02:	4a1a      	ldr	r2, [pc, #104]	@ (8002e6c <MX_SPI3_Init+0x70>)
 8002e04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002e06:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e0c:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e14:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e2c:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e42:	2207      	movs	r2, #7
 8002e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e52:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <MX_SPI3_Init+0x6c>)
 8002e54:	f007 fe8a 	bl	800ab6c <HAL_SPI_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8002e5e:	f000 fbc4 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000df8 	.word	0x20000df8
 8002e6c:	40003c00 	.word	0x40003c00

08002e70 <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <MX_SWPMI1_Init+0x38>)
 8002e76:	4a0d      	ldr	r2, [pc, #52]	@ (8002eac <MX_SWPMI1_Init+0x3c>)
 8002e78:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <MX_SWPMI1_Init+0x38>)
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <MX_SWPMI1_Init+0x38>)
 8002e82:	2213      	movs	r2, #19
 8002e84:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <MX_SWPMI1_Init+0x38>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <MX_SWPMI1_Init+0x38>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 8002e92:	4805      	ldr	r0, [pc, #20]	@ (8002ea8 <MX_SWPMI1_Init+0x38>)
 8002e94:	f007 ff0e 	bl	800acb4 <HAL_SWPMI_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 8002e9e:	f000 fba4 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000e5c 	.word	0x20000e5c
 8002eac:	40008800 	.word	0x40008800

08002eb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	@ 0x30
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	2224      	movs	r2, #36	@ 0x24
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f00d faa0 	bl	8010404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ece:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002ed0:	4a23      	ldr	r2, [pc, #140]	@ (8002f60 <MX_TIM1_Init+0xb0>)
 8002ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ed4:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eda:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eee:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f1e:	f107 030c 	add.w	r3, r7, #12
 8002f22:	4619      	mov	r1, r3
 8002f24:	480d      	ldr	r0, [pc, #52]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002f26:	f008 f8fd 	bl	800b124 <HAL_TIM_Encoder_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002f30:	f000 fb5b 	bl	80035ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f40:	463b      	mov	r3, r7
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	@ (8002f5c <MX_TIM1_Init+0xac>)
 8002f46:	f008 ffa1 	bl	800be8c <HAL_TIMEx_MasterConfigSynchronization>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002f50:	f000 fb4b 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	3730      	adds	r7, #48	@ 0x30
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000e98 	.word	0x20000e98
 8002f60:	40012c00 	.word	0x40012c00

08002f64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	@ 0x38
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f84:	463b      	mov	r3, r7
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	611a      	str	r2, [r3, #16]
 8002f92:	615a      	str	r2, [r3, #20]
 8002f94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f96:	4b3e      	ldr	r3, [pc, #248]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002f98:	4a3e      	ldr	r2, [pc, #248]	@ (8003094 <MX_TIM3_Init+0x130>)
 8002f9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002f9e:	f240 321f 	movw	r2, #799	@ 0x31f
 8002fa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8002faa:	4b39      	ldr	r3, [pc, #228]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002fac:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002fb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb2:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb8:	4b35      	ldr	r3, [pc, #212]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fbe:	4834      	ldr	r0, [pc, #208]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002fc0:	f007 fef2 	bl	800ada8 <HAL_TIM_Base_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002fca:	f000 fb0e 	bl	80035ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fd8:	4619      	mov	r1, r3
 8002fda:	482d      	ldr	r0, [pc, #180]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002fdc:	f008 fa5c 	bl	800b498 <HAL_TIM_ConfigClockSource>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002fe6:	f000 fb00 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fea:	4829      	ldr	r0, [pc, #164]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8002fec:	f007 ff33 	bl	800ae56 <HAL_TIM_PWM_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002ff6:	f000 faf8 	bl	80035ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003002:	f107 031c 	add.w	r3, r7, #28
 8003006:	4619      	mov	r1, r3
 8003008:	4821      	ldr	r0, [pc, #132]	@ (8003090 <MX_TIM3_Init+0x12c>)
 800300a:	f008 ff3f 	bl	800be8c <HAL_TIMEx_MasterConfigSynchronization>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003014:	f000 fae9 	bl	80035ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003018:	2360      	movs	r3, #96	@ 0x60
 800301a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 150;
 800301c:	2396      	movs	r3, #150	@ 0x96
 800301e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003028:	463b      	mov	r3, r7
 800302a:	2200      	movs	r2, #0
 800302c:	4619      	mov	r1, r3
 800302e:	4818      	ldr	r0, [pc, #96]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8003030:	f008 f91e 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800303a:	f000 fad6 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800303e:	463b      	mov	r3, r7
 8003040:	2204      	movs	r2, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4812      	ldr	r0, [pc, #72]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8003046:	f008 f913 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003050:	f000 facb 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003054:	463b      	mov	r3, r7
 8003056:	2208      	movs	r2, #8
 8003058:	4619      	mov	r1, r3
 800305a:	480d      	ldr	r0, [pc, #52]	@ (8003090 <MX_TIM3_Init+0x12c>)
 800305c:	f008 f908 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8003066:	f000 fac0 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800306a:	463b      	mov	r3, r7
 800306c:	220c      	movs	r2, #12
 800306e:	4619      	mov	r1, r3
 8003070:	4807      	ldr	r0, [pc, #28]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8003072:	f008 f8fd 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 800307c:	f000 fab5 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003080:	4803      	ldr	r0, [pc, #12]	@ (8003090 <MX_TIM3_Init+0x12c>)
 8003082:	f000 fdf5 	bl	8003c70 <HAL_TIM_MspPostInit>

}
 8003086:	bf00      	nop
 8003088:	3738      	adds	r7, #56	@ 0x38
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000ee4 	.word	0x20000ee4
 8003094:	40000400 	.word	0x40000400

08003098 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030a8:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <MX_TIM6_Init+0x64>)
 80030aa:	4a15      	ldr	r2, [pc, #84]	@ (8003100 <MX_TIM6_Init+0x68>)
 80030ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80030ae:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <MX_TIM6_Init+0x64>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <MX_TIM6_Init+0x64>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <MX_TIM6_Init+0x64>)
 80030bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <MX_TIM6_Init+0x64>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030c8:	480c      	ldr	r0, [pc, #48]	@ (80030fc <MX_TIM6_Init+0x64>)
 80030ca:	f007 fe6d 	bl	800ada8 <HAL_TIM_Base_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80030d4:	f000 fa89 	bl	80035ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	4619      	mov	r1, r3
 80030e4:	4805      	ldr	r0, [pc, #20]	@ (80030fc <MX_TIM6_Init+0x64>)
 80030e6:	f008 fed1 	bl	800be8c <HAL_TIMEx_MasterConfigSynchronization>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80030f0:	f000 fa7b 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000f30 	.word	0x20000f30
 8003100:	40001000 	.word	0x40001000

08003104 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003114:	4b14      	ldr	r3, [pc, #80]	@ (8003168 <MX_TIM7_Init+0x64>)
 8003116:	4a15      	ldr	r2, [pc, #84]	@ (800316c <MX_TIM7_Init+0x68>)
 8003118:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800311a:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <MX_TIM7_Init+0x64>)
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <MX_TIM7_Init+0x64>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <MX_TIM7_Init+0x64>)
 8003128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800312c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312e:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <MX_TIM7_Init+0x64>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003134:	480c      	ldr	r0, [pc, #48]	@ (8003168 <MX_TIM7_Init+0x64>)
 8003136:	f007 fe37 	bl	800ada8 <HAL_TIM_Base_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003140:	f000 fa53 	bl	80035ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4805      	ldr	r0, [pc, #20]	@ (8003168 <MX_TIM7_Init+0x64>)
 8003152:	f008 fe9b 	bl	800be8c <HAL_TIMEx_MasterConfigSynchronization>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800315c:	f000 fa45 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000f7c 	.word	0x20000f7c
 800316c:	40001400 	.word	0x40001400

08003170 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b09a      	sub	sp, #104	@ 0x68
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003176:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003184:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003190:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
 80031a0:	615a      	str	r2, [r3, #20]
 80031a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	222c      	movs	r2, #44	@ 0x2c
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f00d f92a 	bl	8010404 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031b0:	4b56      	ldr	r3, [pc, #344]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031b2:	4a57      	ldr	r2, [pc, #348]	@ (8003310 <MX_TIM8_Init+0x1a0>)
 80031b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 799;
 80031b6:	4b55      	ldr	r3, [pc, #340]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031b8:	f240 321f 	movw	r2, #799	@ 0x31f
 80031bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	4b53      	ldr	r3, [pc, #332]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 80031c4:	4b51      	ldr	r3, [pc, #324]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031c6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80031ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031cc:	4b4f      	ldr	r3, [pc, #316]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031d2:	4b4e      	ldr	r3, [pc, #312]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d8:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80031de:	484b      	ldr	r0, [pc, #300]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031e0:	f007 fde2 	bl	800ada8 <HAL_TIM_Base_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80031ea:	f000 f9fe 	bl	80035ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80031f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80031f8:	4619      	mov	r1, r3
 80031fa:	4844      	ldr	r0, [pc, #272]	@ (800330c <MX_TIM8_Init+0x19c>)
 80031fc:	f008 f94c 	bl	800b498 <HAL_TIM_ConfigClockSource>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8003206:	f000 f9f0 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800320a:	4840      	ldr	r0, [pc, #256]	@ (800330c <MX_TIM8_Init+0x19c>)
 800320c:	f007 fe23 	bl	800ae56 <HAL_TIM_PWM_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8003216:	f000 f9e8 	bl	80035ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800321e:	2300      	movs	r3, #0
 8003220:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003226:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800322a:	4619      	mov	r1, r3
 800322c:	4837      	ldr	r0, [pc, #220]	@ (800330c <MX_TIM8_Init+0x19c>)
 800322e:	f008 fe2d 	bl	800be8c <HAL_TIMEx_MasterConfigSynchronization>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8003238:	f000 f9d7 	bl	80035ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800323c:	2360      	movs	r3, #96	@ 0x60
 800323e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 150;
 8003240:	2396      	movs	r3, #150	@ 0x96
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003244:	2300      	movs	r3, #0
 8003246:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003258:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800325c:	2200      	movs	r2, #0
 800325e:	4619      	mov	r1, r3
 8003260:	482a      	ldr	r0, [pc, #168]	@ (800330c <MX_TIM8_Init+0x19c>)
 8003262:	f008 f805 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800326c:	f000 f9bd 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003270:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003274:	2204      	movs	r2, #4
 8003276:	4619      	mov	r1, r3
 8003278:	4824      	ldr	r0, [pc, #144]	@ (800330c <MX_TIM8_Init+0x19c>)
 800327a:	f007 fff9 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8003284:	f000 f9b1 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003288:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800328c:	2208      	movs	r2, #8
 800328e:	4619      	mov	r1, r3
 8003290:	481e      	ldr	r0, [pc, #120]	@ (800330c <MX_TIM8_Init+0x19c>)
 8003292:	f007 ffed 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800329c:	f000 f9a5 	bl	80035ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80032a4:	220c      	movs	r2, #12
 80032a6:	4619      	mov	r1, r3
 80032a8:	4818      	ldr	r0, [pc, #96]	@ (800330c <MX_TIM8_Init+0x19c>)
 80032aa:	f007 ffe1 	bl	800b270 <HAL_TIM_PWM_ConfigChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80032b4:	f000 f999 	bl	80035ea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	4807      	ldr	r0, [pc, #28]	@ (800330c <MX_TIM8_Init+0x19c>)
 80032ee:	f008 fe55 	bl	800bf9c <HAL_TIMEx_ConfigBreakDeadTime>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 80032f8:	f000 f977 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80032fc:	4803      	ldr	r0, [pc, #12]	@ (800330c <MX_TIM8_Init+0x19c>)
 80032fe:	f000 fcb7 	bl	8003c70 <HAL_TIM_MspPostInit>

}
 8003302:	bf00      	nop
 8003304:	3768      	adds	r7, #104	@ 0x68
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000fc8 	.word	0x20000fc8
 8003310:	40013400 	.word	0x40013400

08003314 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003318:	4b14      	ldr	r3, [pc, #80]	@ (800336c <MX_UART4_Init+0x58>)
 800331a:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <MX_UART4_Init+0x5c>)
 800331c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800331e:	4b13      	ldr	r3, [pc, #76]	@ (800336c <MX_UART4_Init+0x58>)
 8003320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003324:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003326:	4b11      	ldr	r3, [pc, #68]	@ (800336c <MX_UART4_Init+0x58>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <MX_UART4_Init+0x58>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <MX_UART4_Init+0x58>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <MX_UART4_Init+0x58>)
 800333a:	220c      	movs	r2, #12
 800333c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333e:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <MX_UART4_Init+0x58>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003344:	4b09      	ldr	r3, [pc, #36]	@ (800336c <MX_UART4_Init+0x58>)
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800334a:	4b08      	ldr	r3, [pc, #32]	@ (800336c <MX_UART4_Init+0x58>)
 800334c:	2200      	movs	r2, #0
 800334e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003350:	4b06      	ldr	r3, [pc, #24]	@ (800336c <MX_UART4_Init+0x58>)
 8003352:	2200      	movs	r2, #0
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003356:	4805      	ldr	r0, [pc, #20]	@ (800336c <MX_UART4_Init+0x58>)
 8003358:	f008 fe9e 	bl	800c098 <HAL_UART_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003362:	f000 f942 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20001014 	.word	0x20001014
 8003370:	40004c00 	.word	0x40004c00

08003374 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <MX_UART5_Init+0x58>)
 800337a:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <MX_UART5_Init+0x5c>)
 800337c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800337e:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <MX_UART5_Init+0x58>)
 8003380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003384:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003386:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <MX_UART5_Init+0x58>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <MX_UART5_Init+0x58>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <MX_UART5_Init+0x58>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <MX_UART5_Init+0x58>)
 800339a:	220c      	movs	r2, #12
 800339c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <MX_UART5_Init+0x58>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <MX_UART5_Init+0x58>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <MX_UART5_Init+0x58>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <MX_UART5_Init+0x58>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	@ (80033cc <MX_UART5_Init+0x58>)
 80033b8:	f008 fe6e 	bl	800c098 <HAL_UART_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80033c2:	f000 f912 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20001098 	.word	0x20001098
 80033d0:	40005000 	.word	0x40005000

080033d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033d8:	4b14      	ldr	r3, [pc, #80]	@ (800342c <MX_USART1_UART_Init+0x58>)
 80033da:	4a15      	ldr	r2, [pc, #84]	@ (8003430 <MX_USART1_UART_Init+0x5c>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033de:	4b13      	ldr	r3, [pc, #76]	@ (800342c <MX_USART1_UART_Init+0x58>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <MX_USART1_UART_Init+0x58>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <MX_USART1_UART_Init+0x58>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <MX_USART1_UART_Init+0x58>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <MX_USART1_UART_Init+0x58>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <MX_USART1_UART_Init+0x58>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b09      	ldr	r3, [pc, #36]	@ (800342c <MX_USART1_UART_Init+0x58>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <MX_USART1_UART_Init+0x58>)
 800340c:	2200      	movs	r2, #0
 800340e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <MX_USART1_UART_Init+0x58>)
 8003412:	2200      	movs	r2, #0
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003416:	4805      	ldr	r0, [pc, #20]	@ (800342c <MX_USART1_UART_Init+0x58>)
 8003418:	f008 fe3e 	bl	800c098 <HAL_UART_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003422:	f000 f8e2 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000111c 	.word	0x2000111c
 8003430:	40013800 	.word	0x40013800

08003434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003438:	4b14      	ldr	r3, [pc, #80]	@ (800348c <MX_USART2_UART_Init+0x58>)
 800343a:	4a15      	ldr	r2, [pc, #84]	@ (8003490 <MX_USART2_UART_Init+0x5c>)
 800343c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800343e:	4b13      	ldr	r3, [pc, #76]	@ (800348c <MX_USART2_UART_Init+0x58>)
 8003440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <MX_USART2_UART_Init+0x58>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <MX_USART2_UART_Init+0x58>)
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003452:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <MX_USART2_UART_Init+0x58>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <MX_USART2_UART_Init+0x58>)
 800345a:	220c      	movs	r2, #12
 800345c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800345e:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <MX_USART2_UART_Init+0x58>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <MX_USART2_UART_Init+0x58>)
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800346a:	4b08      	ldr	r3, [pc, #32]	@ (800348c <MX_USART2_UART_Init+0x58>)
 800346c:	2200      	movs	r2, #0
 800346e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <MX_USART2_UART_Init+0x58>)
 8003472:	2200      	movs	r2, #0
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003476:	4805      	ldr	r0, [pc, #20]	@ (800348c <MX_USART2_UART_Init+0x58>)
 8003478:	f008 fe0e 	bl	800c098 <HAL_UART_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003482:	f000 f8b2 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200011a0 	.word	0x200011a0
 8003490:	40004400 	.word	0x40004400

08003494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003498:	4b14      	ldr	r3, [pc, #80]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 800349a:	4a15      	ldr	r2, [pc, #84]	@ (80034f0 <MX_USART3_UART_Init+0x5c>)
 800349c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800349e:	4b13      	ldr	r3, [pc, #76]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034a0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80034a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034a6:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034ac:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034ba:	220c      	movs	r2, #12
 80034bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ca:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034d6:	4805      	ldr	r0, [pc, #20]	@ (80034ec <MX_USART3_UART_Init+0x58>)
 80034d8:	f008 fdde 	bl	800c098 <HAL_UART_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80034e2:	f000 f882 	bl	80035ea <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20001224 	.word	0x20001224
 80034f0:	40004800 	.word	0x40004800

080034f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	4a30      	ldr	r2, [pc, #192]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003516:	4b2e      	ldr	r3, [pc, #184]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003522:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003526:	4a2a      	ldr	r2, [pc, #168]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800352c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800352e:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800353a:	4b25      	ldr	r3, [pc, #148]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	4a24      	ldr	r2, [pc, #144]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003546:	4b22      	ldr	r3, [pc, #136]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003552:	4b1f      	ldr	r3, [pc, #124]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	4a1e      	ldr	r2, [pc, #120]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355e:	4b1c      	ldr	r3, [pc, #112]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800356a:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	4a18      	ldr	r2, [pc, #96]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003576:	4b16      	ldr	r3, [pc, #88]	@ (80035d0 <MX_GPIO_Init+0xdc>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003582:	2200      	movs	r2, #0
 8003584:	2120      	movs	r1, #32
 8003586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800358a:	f005 f973 	bl	8008874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800358e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003594:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4619      	mov	r1, r3
 80035a4:	480b      	ldr	r0, [pc, #44]	@ (80035d4 <MX_GPIO_Init+0xe0>)
 80035a6:	f004 fec7 	bl	8008338 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80035aa:	2320      	movs	r3, #32
 80035ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4619      	mov	r1, r3
 80035c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035c4:	f004 feb8 	bl	8008338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035c8:	bf00      	nop
 80035ca:	3728      	adds	r7, #40	@ 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	48000800 	.word	0x48000800

080035d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 80035e0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80035e4:	f00a f9c7 	bl	800d976 <osDelay>
 80035e8:	e7fa      	b.n	80035e0 <StartDefaultTask+0x8>

080035ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035ee:	b672      	cpsid	i
}
 80035f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035f2:	bf00      	nop
 80035f4:	e7fd      	b.n	80035f2 <Error_Handler+0x8>
	...

080035f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <HAL_MspInit+0x4c>)
 8003600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003602:	4a10      	ldr	r2, [pc, #64]	@ (8003644 <HAL_MspInit+0x4c>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6613      	str	r3, [r2, #96]	@ 0x60
 800360a:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <HAL_MspInit+0x4c>)
 800360c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003616:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <HAL_MspInit+0x4c>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a0a      	ldr	r2, [pc, #40]	@ (8003644 <HAL_MspInit+0x4c>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
 8003622:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <HAL_MspInit+0x4c>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	210f      	movs	r1, #15
 8003632:	f06f 0001 	mvn.w	r0, #1
 8003636:	f004 fdca 	bl	80081ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0ac      	sub	sp, #176	@ 0xb0
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	2288      	movs	r2, #136	@ 0x88
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f00c fecb 	bl	8010404 <memset>
  if(hadc->Instance==ADC3)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a27      	ldr	r2, [pc, #156]	@ (8003710 <HAL_ADC_MspInit+0xc8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d146      	bne.n	8003706 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003678:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800367c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800367e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003686:	2302      	movs	r3, #2
 8003688:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800368e:	2308      	movs	r3, #8
 8003690:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003692:	2307      	movs	r3, #7
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003696:	2302      	movs	r3, #2
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800369a:	2302      	movs	r3, #2
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800369e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036a2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4618      	mov	r0, r3
 80036aa:	f006 fda3 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80036b4:	f7ff ff99 	bl	80035ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80036b8:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <HAL_ADC_MspInit+0xcc>)
 80036ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036bc:	4a15      	ldr	r2, [pc, #84]	@ (8003714 <HAL_ADC_MspInit+0xcc>)
 80036be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c4:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <HAL_ADC_MspInit+0xcc>)
 80036c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d0:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <HAL_ADC_MspInit+0xcc>)
 80036d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003714 <HAL_ADC_MspInit+0xcc>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <HAL_ADC_MspInit+0xcc>)
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80036e8:	2307      	movs	r3, #7
 80036ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80036ee:	230b      	movs	r3, #11
 80036f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036fe:	4619      	mov	r1, r3
 8003700:	4805      	ldr	r0, [pc, #20]	@ (8003718 <HAL_ADC_MspInit+0xd0>)
 8003702:	f004 fe19 	bl	8008338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003706:	bf00      	nop
 8003708:	37b0      	adds	r7, #176	@ 0xb0
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	50040200 	.word	0x50040200
 8003714:	40021000 	.word	0x40021000
 8003718:	48000800 	.word	0x48000800

0800371c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	@ 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_CAN_MspInit+0x80>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d129      	bne.n	8003792 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <HAL_CAN_MspInit+0x84>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_CAN_MspInit+0x84>)
 8003744:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003748:	6593      	str	r3, [r2, #88]	@ 0x58
 800374a:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <HAL_CAN_MspInit+0x84>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003756:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <HAL_CAN_MspInit+0x84>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	4a11      	ldr	r2, [pc, #68]	@ (80037a0 <HAL_CAN_MspInit+0x84>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003762:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <HAL_CAN_MspInit+0x84>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800376e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377c:	2303      	movs	r3, #3
 800377e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003780:	2309      	movs	r3, #9
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4619      	mov	r1, r3
 800378a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800378e:	f004 fdd3 	bl	8008338 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003792:	bf00      	nop
 8003794:	3728      	adds	r7, #40	@ 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40006400 	.word	0x40006400
 80037a0:	40021000 	.word	0x40021000

080037a4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003800 <HAL_COMP_MspInit+0x5c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d117      	bne.n	80037f6 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003804 <HAL_COMP_MspInit+0x60>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003804 <HAL_COMP_MspInit+0x60>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <HAL_COMP_MspInit+0x60>)
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80037de:	2390      	movs	r3, #144	@ 0x90
 80037e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037e2:	2303      	movs	r3, #3
 80037e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ea:	f107 030c 	add.w	r3, r7, #12
 80037ee:	4619      	mov	r1, r3
 80037f0:	4805      	ldr	r0, [pc, #20]	@ (8003808 <HAL_COMP_MspInit+0x64>)
 80037f2:	f004 fda1 	bl	8008338 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80037f6:	bf00      	nop
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40010204 	.word	0x40010204
 8003804:	40021000 	.word	0x40021000
 8003808:	48000400 	.word	0x48000400

0800380c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0ac      	sub	sp, #176	@ 0xb0
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	2288      	movs	r2, #136	@ 0x88
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f00c fde9 	bl	8010404 <memset>
  if(hi2c->Instance==I2C2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a21      	ldr	r2, [pc, #132]	@ (80038bc <HAL_I2C_MspInit+0xb0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d13b      	bne.n	80038b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003840:	2300      	movs	r3, #0
 8003842:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	4618      	mov	r0, r3
 800384a:	f006 fcd3 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003854:	f7ff fec9 	bl	80035ea <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <HAL_I2C_MspInit+0xb4>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385c:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_I2C_MspInit+0xb4>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003864:	4b16      	ldr	r3, [pc, #88]	@ (80038c0 <HAL_I2C_MspInit+0xb4>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003870:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003878:	2312      	movs	r3, #18
 800387a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003884:	2303      	movs	r3, #3
 8003886:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800388a:	2304      	movs	r3, #4
 800388c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003894:	4619      	mov	r1, r3
 8003896:	480b      	ldr	r0, [pc, #44]	@ (80038c4 <HAL_I2C_MspInit+0xb8>)
 8003898:	f004 fd4e 	bl	8008338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HAL_I2C_MspInit+0xb4>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <HAL_I2C_MspInit+0xb4>)
 80038a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_I2C_MspInit+0xb4>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80038b4:	bf00      	nop
 80038b6:	37b0      	adds	r7, #176	@ 0xb0
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40005800 	.word	0x40005800
 80038c0:	40021000 	.word	0x40021000
 80038c4:	48000400 	.word	0x48000400

080038c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <HAL_I2C_MspDeInit+0x3c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10f      	bne.n	80038fa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_I2C_MspDeInit+0x40>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <HAL_I2C_MspDeInit+0x40>)
 80038e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80038e4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80038e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038ea:	4808      	ldr	r0, [pc, #32]	@ (800390c <HAL_I2C_MspDeInit+0x44>)
 80038ec:	f004 fece 	bl	800868c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80038f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038f4:	4805      	ldr	r0, [pc, #20]	@ (800390c <HAL_I2C_MspDeInit+0x44>)
 80038f6:	f004 fec9 	bl	800868c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40005800 	.word	0x40005800
 8003908:	40021000 	.word	0x40021000
 800390c:	48000400 	.word	0x48000400

08003910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	@ 0x38
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a5c <HAL_SPI_MspInit+0x14c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d145      	bne.n	80039be <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003932:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003936:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
 800393e:	4b48      	ldr	r3, [pc, #288]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003946:	623b      	str	r3, [r7, #32]
 8003948:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394a:	4b45      	ldr	r3, [pc, #276]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394e:	4a44      	ldr	r2, [pc, #272]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003956:	4b42      	ldr	r3, [pc, #264]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	4b3f      	ldr	r3, [pc, #252]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	4a3e      	ldr	r2, [pc, #248]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003968:	f043 0302 	orr.w	r3, r3, #2
 800396c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800396e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800397a:	2308      	movs	r3, #8
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003986:	2303      	movs	r3, #3
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800398a:	2305      	movs	r3, #5
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003992:	4619      	mov	r1, r3
 8003994:	4833      	ldr	r0, [pc, #204]	@ (8003a64 <HAL_SPI_MspInit+0x154>)
 8003996:	f004 fccf 	bl	8008338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800399a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039ac:	2305      	movs	r3, #5
 80039ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039b4:	4619      	mov	r1, r3
 80039b6:	482c      	ldr	r0, [pc, #176]	@ (8003a68 <HAL_SPI_MspInit+0x158>)
 80039b8:	f004 fcbe 	bl	8008338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80039bc:	e049      	b.n	8003a52 <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a6c <HAL_SPI_MspInit+0x15c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d144      	bne.n	8003a52 <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80039c8:	4b25      	ldr	r3, [pc, #148]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	4a24      	ldr	r2, [pc, #144]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d4:	4b22      	ldr	r3, [pc, #136]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f8:	4b19      	ldr	r3, [pc, #100]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fc:	4a18      	ldr	r2, [pc, #96]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 80039fe:	f043 0302 	orr.w	r3, r3, #2
 8003a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a04:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <HAL_SPI_MspInit+0x150>)
 8003a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a10:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2302      	movs	r3, #2
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a22:	2306      	movs	r3, #6
 8003a24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	480d      	ldr	r0, [pc, #52]	@ (8003a64 <HAL_SPI_MspInit+0x154>)
 8003a2e:	f004 fc83 	bl	8008338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a32:	2320      	movs	r3, #32
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a42:	2306      	movs	r3, #6
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4806      	ldr	r0, [pc, #24]	@ (8003a68 <HAL_SPI_MspInit+0x158>)
 8003a4e:	f004 fc73 	bl	8008338 <HAL_GPIO_Init>
}
 8003a52:	bf00      	nop
 8003a54:	3738      	adds	r7, #56	@ 0x38
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40003800 	.word	0x40003800
 8003a60:	40021000 	.word	0x40021000
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000400 	.word	0x48000400
 8003a6c:	40003c00 	.word	0x40003c00

08003a70 <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b0ac      	sub	sp, #176	@ 0xb0
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	2288      	movs	r2, #136	@ 0x88
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f00c fcb7 	bl	8010404 <memset>
  if(hswpmi->Instance==SWPMI1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a22      	ldr	r2, [pc, #136]	@ (8003b24 <HAL_SWPMI_MspInit+0xb4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d13d      	bne.n	8003b1c <HAL_SWPMI_MspInit+0xac>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 8003aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aa4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f006 fb9f 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 8003abc:	f7ff fd95 	bl	80035ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 8003ac0:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_SWPMI_MspInit+0xb8>)
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac4:	4a18      	ldr	r2, [pc, #96]	@ (8003b28 <HAL_SWPMI_MspInit+0xb8>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003acc:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <HAL_SWPMI_MspInit+0xb8>)
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <HAL_SWPMI_MspInit+0xb8>)
 8003ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003adc:	4a12      	ldr	r2, [pc, #72]	@ (8003b28 <HAL_SWPMI_MspInit+0xb8>)
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae4:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <HAL_SWPMI_MspInit+0xb8>)
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
    /**SWPMI1 GPIO Configuration
    PB12     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b04:	2303      	movs	r3, #3
 8003b06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 8003b0a:	230c      	movs	r3, #12
 8003b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b14:	4619      	mov	r1, r3
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <HAL_SWPMI_MspInit+0xbc>)
 8003b18:	f004 fc0e 	bl	8008338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 8003b1c:	bf00      	nop
 8003b1e:	37b0      	adds	r7, #176	@ 0xb0
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40008800 	.word	0x40008800
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	48000400 	.word	0x48000400

08003b30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	@ 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d129      	bne.n	8003ba6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b52:	4b18      	ldr	r3, [pc, #96]	@ (8003bb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	4a17      	ldr	r2, [pc, #92]	@ (8003bb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003b58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b5e:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	4a11      	ldr	r2, [pc, #68]	@ (8003bb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b76:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b94:	2301      	movs	r3, #1
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ba2:	f004 fbc9 	bl	8008338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	@ 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a25      	ldr	r2, [pc, #148]	@ (8003c5c <HAL_TIM_Base_MspInit+0xa4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bca:	4b25      	ldr	r3, [pc, #148]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	4a24      	ldr	r2, [pc, #144]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd6:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003be2:	e034      	b.n	8003c4e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c64 <HAL_TIM_Base_MspInit+0xac>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10c      	bne.n	8003c08 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bee:	4b1c      	ldr	r3, [pc, #112]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003bf4:	f043 0310 	orr.w	r3, r3, #16
 8003bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfa:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]
}
 8003c06:	e022      	b.n	8003c4e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	@ (8003c68 <HAL_TIM_Base_MspInit+0xb0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c12:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	4a12      	ldr	r2, [pc, #72]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
}
 8003c2a:	e010      	b.n	8003c4e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0e      	ldr	r2, [pc, #56]	@ (8003c6c <HAL_TIM_Base_MspInit+0xb4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10b      	bne.n	8003c4e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c36:	4b0a      	ldr	r3, [pc, #40]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3a:	4a09      	ldr	r2, [pc, #36]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003c3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c42:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <HAL_TIM_Base_MspInit+0xa8>)
 8003c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40001000 	.word	0x40001000
 8003c68:	40001400 	.word	0x40001400
 8003c6c:	40013400 	.word	0x40013400

08003c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	@ 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <HAL_TIM_MspPostInit+0xe4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d139      	bne.n	8003d06 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c92:	4b31      	ldr	r3, [pc, #196]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	4a30      	ldr	r2, [pc, #192]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003caa:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	4a2a      	ldr	r2, [pc, #168]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cb6:	4b28      	ldr	r3, [pc, #160]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cc2:	23c0      	movs	r3, #192	@ 0xc0
 8003cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd6:	f107 0314 	add.w	r3, r7, #20
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ce0:	f004 fb2a 	bl	8008338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4817      	ldr	r0, [pc, #92]	@ (8003d5c <HAL_TIM_MspPostInit+0xec>)
 8003d00:	f004 fb1a 	bl	8008338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d04:	e021      	b.n	8003d4a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <HAL_TIM_MspPostInit+0xf0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d11c      	bne.n	8003d4a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d10:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d14:	4a10      	ldr	r2, [pc, #64]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <HAL_TIM_MspPostInit+0xe8>)
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d28:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	4619      	mov	r1, r3
 8003d44:	4807      	ldr	r0, [pc, #28]	@ (8003d64 <HAL_TIM_MspPostInit+0xf4>)
 8003d46:	f004 faf7 	bl	8008338 <HAL_GPIO_Init>
}
 8003d4a:	bf00      	nop
 8003d4c:	3728      	adds	r7, #40	@ 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	48000400 	.word	0x48000400
 8003d60:	40013400 	.word	0x40013400
 8003d64:	48000800 	.word	0x48000800

08003d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b0b6      	sub	sp, #216	@ 0xd8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d70:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d84:	2288      	movs	r2, #136	@ 0x88
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f00c fb3b 	bl	8010404 <memset>
  if(huart->Instance==UART4)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4aad      	ldr	r2, [pc, #692]	@ (8004048 <HAL_UART_MspInit+0x2e0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d145      	bne.n	8003e24 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003d98:	2308      	movs	r3, #8
 8003d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003da2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003da6:	4618      	mov	r0, r3
 8003da8:	f006 fa24 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003db2:	f7ff fc1a 	bl	80035ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003db6:	4ba5      	ldr	r3, [pc, #660]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	4aa4      	ldr	r2, [pc, #656]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003dbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc2:	4ba2      	ldr	r3, [pc, #648]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	4b9f      	ldr	r3, [pc, #636]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd2:	4a9e      	ldr	r2, [pc, #632]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dda:	4b9c      	ldr	r3, [pc, #624]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003de6:	2303      	movs	r3, #3
 8003de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003dfe:	2308      	movs	r3, #8
 8003e00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e04:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e0e:	f004 fa93 	bl	8008338 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003e12:	2200      	movs	r2, #0
 8003e14:	2105      	movs	r1, #5
 8003e16:	2034      	movs	r0, #52	@ 0x34
 8003e18:	f004 f9d9 	bl	80081ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003e1c:	2034      	movs	r0, #52	@ 0x34
 8003e1e:	f004 f9f2 	bl	8008206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e22:	e169      	b.n	80040f8 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a89      	ldr	r2, [pc, #548]	@ (8004050 <HAL_UART_MspInit+0x2e8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d15e      	bne.n	8003eec <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003e2e:	2310      	movs	r3, #16
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f006 f9d9 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003e48:	f7ff fbcf 	bl	80035ea <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003e4c:	4b7f      	ldr	r3, [pc, #508]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	4a7e      	ldr	r2, [pc, #504]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e58:	4b7c      	ldr	r3, [pc, #496]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e64:	4b79      	ldr	r3, [pc, #484]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e68:	4a78      	ldr	r2, [pc, #480]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e70:	4b76      	ldr	r3, [pc, #472]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7c:	4b73      	ldr	r3, [pc, #460]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e80:	4a72      	ldr	r2, [pc, #456]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e82:	f043 0308 	orr.w	r3, r3, #8
 8003e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e88:	4b70      	ldr	r3, [pc, #448]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003eae:	2308      	movs	r3, #8
 8003eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4866      	ldr	r0, [pc, #408]	@ (8004054 <HAL_UART_MspInit+0x2ec>)
 8003ebc:	f004 fa3c 	bl	8008338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ed8:	2308      	movs	r3, #8
 8003eda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ede:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	485c      	ldr	r0, [pc, #368]	@ (8004058 <HAL_UART_MspInit+0x2f0>)
 8003ee6:	f004 fa27 	bl	8008338 <HAL_GPIO_Init>
}
 8003eea:	e105      	b.n	80040f8 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800405c <HAL_UART_MspInit+0x2f4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d15e      	bne.n	8003fb4 <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003efa:	2300      	movs	r3, #0
 8003efc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003efe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f02:	4618      	mov	r0, r3
 8003f04:	f006 f976 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003f0e:	f7ff fb6c 	bl	80035ea <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f12:	4b4e      	ldr	r3, [pc, #312]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f16:	4a4d      	ldr	r2, [pc, #308]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	4b48      	ldr	r3, [pc, #288]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	4a47      	ldr	r2, [pc, #284]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f36:	4b45      	ldr	r3, [pc, #276]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	4b42      	ldr	r3, [pc, #264]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f46:	4a41      	ldr	r2, [pc, #260]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	2302      	movs	r3, #2
 8003f64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f74:	2307      	movs	r3, #7
 8003f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f84:	f004 f9d8 	bl	8008338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f88:	2340      	movs	r3, #64	@ 0x40
 8003f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003faa:	4619      	mov	r1, r3
 8003fac:	482c      	ldr	r0, [pc, #176]	@ (8004060 <HAL_UART_MspInit+0x2f8>)
 8003fae:	f004 f9c3 	bl	8008338 <HAL_GPIO_Init>
}
 8003fb2:	e0a1      	b.n	80040f8 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8004064 <HAL_UART_MspInit+0x2fc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d154      	bne.n	8004068 <HAL_UART_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f006 f912 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_UART_MspInit+0x272>
      Error_Handler();
 8003fd6:	f7ff fb08 	bl	80035ea <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fda:	4b1c      	ldr	r3, [pc, #112]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe6:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff2:	4b16      	ldr	r3, [pc, #88]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff6:	4a15      	ldr	r2, [pc, #84]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ffe:	4b13      	ldr	r3, [pc, #76]	@ (800404c <HAL_UART_MspInit+0x2e4>)
 8004000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800400a:	230c      	movs	r3, #12
 800400c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004010:	2302      	movs	r3, #2
 8004012:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401c:	2303      	movs	r3, #3
 800401e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004022:	2307      	movs	r3, #7
 8004024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004028:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800402c:	4619      	mov	r1, r3
 800402e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004032:	f004 f981 	bl	8008338 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004036:	2200      	movs	r2, #0
 8004038:	2105      	movs	r1, #5
 800403a:	2026      	movs	r0, #38	@ 0x26
 800403c:	f004 f8c7 	bl	80081ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004040:	2026      	movs	r0, #38	@ 0x26
 8004042:	f004 f8e0 	bl	8008206 <HAL_NVIC_EnableIRQ>
}
 8004046:	e057      	b.n	80040f8 <HAL_UART_MspInit+0x390>
 8004048:	40004c00 	.word	0x40004c00
 800404c:	40021000 	.word	0x40021000
 8004050:	40005000 	.word	0x40005000
 8004054:	48000800 	.word	0x48000800
 8004058:	48000c00 	.word	0x48000c00
 800405c:	40013800 	.word	0x40013800
 8004060:	48000400 	.word	0x48000400
 8004064:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <HAL_UART_MspInit+0x398>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d142      	bne.n	80040f8 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004072:	2304      	movs	r3, #4
 8004074:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004076:	2300      	movs	r3, #0
 8004078:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800407a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800407e:	4618      	mov	r0, r3
 8004080:	f006 f8b8 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_UART_MspInit+0x326>
      Error_Handler();
 800408a:	f7ff faae 	bl	80035ea <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800408e:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_UART_MspInit+0x39c>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	4a1c      	ldr	r2, [pc, #112]	@ (8004104 <HAL_UART_MspInit+0x39c>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004098:	6593      	str	r3, [r2, #88]	@ 0x58
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <HAL_UART_MspInit+0x39c>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a6:	4b17      	ldr	r3, [pc, #92]	@ (8004104 <HAL_UART_MspInit+0x39c>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	4a16      	ldr	r2, [pc, #88]	@ (8004104 <HAL_UART_MspInit+0x39c>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b2:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <HAL_UART_MspInit+0x39c>)
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80040be:	2330      	movs	r3, #48	@ 0x30
 80040c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	2302      	movs	r3, #2
 80040c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040d6:	2307      	movs	r3, #7
 80040d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040dc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4809      	ldr	r0, [pc, #36]	@ (8004108 <HAL_UART_MspInit+0x3a0>)
 80040e4:	f004 f928 	bl	8008338 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80040e8:	2200      	movs	r2, #0
 80040ea:	2105      	movs	r1, #5
 80040ec:	2027      	movs	r0, #39	@ 0x27
 80040ee:	f004 f86e 	bl	80081ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040f2:	2027      	movs	r0, #39	@ 0x27
 80040f4:	f004 f887 	bl	8008206 <HAL_NVIC_EnableIRQ>
}
 80040f8:	bf00      	nop
 80040fa:	37d8      	adds	r7, #216	@ 0xd8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40004800 	.word	0x40004800
 8004104:	40021000 	.word	0x40021000
 8004108:	48000800 	.word	0x48000800

0800410c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <NMI_Handler+0x4>

08004114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <HardFault_Handler+0x4>

0800411c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <MemManage_Handler+0x4>

08004124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <BusFault_Handler+0x4>

0800412c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004130:	bf00      	nop
 8004132:	e7fd      	b.n	8004130 <UsageFault_Handler+0x4>

08004134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004146:	f002 fdbb 	bl	8006cc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800414a:	f00a ff27 	bl	800ef9c <xTaskGetSchedulerState>
 800414e:	4603      	mov	r3, r0
 8004150:	2b01      	cmp	r3, #1
 8004152:	d001      	beq.n	8004158 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004154:	f00b f9f0 	bl	800f538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}

0800415c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004160:	4802      	ldr	r0, [pc, #8]	@ (800416c <USART2_IRQHandler+0x10>)
 8004162:	f008 f8ab 	bl	800c2bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200011a0 	.word	0x200011a0

08004170 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004174:	4802      	ldr	r0, [pc, #8]	@ (8004180 <USART3_IRQHandler+0x10>)
 8004176:	f008 f8a1 	bl	800c2bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001224 	.word	0x20001224

08004184 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004188:	4802      	ldr	r0, [pc, #8]	@ (8004194 <UART4_IRQHandler+0x10>)
 800418a:	f008 f897 	bl	800c2bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20001014 	.word	0x20001014

08004198 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80041a2:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <BSP_I2C1_Init+0x70>)
 80041a4:	4a19      	ldr	r2, [pc, #100]	@ (800420c <BSP_I2C1_Init+0x74>)
 80041a6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <BSP_I2C1_Init+0x78>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	4918      	ldr	r1, [pc, #96]	@ (8004210 <BSP_I2C1_Init+0x78>)
 80041b0:	600a      	str	r2, [r1, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d122      	bne.n	80041fc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80041b6:	4814      	ldr	r0, [pc, #80]	@ (8004208 <BSP_I2C1_Init+0x70>)
 80041b8:	f004 fe60 	bl	8008e7c <HAL_I2C_GetState>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11c      	bne.n	80041fc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80041c2:	4811      	ldr	r0, [pc, #68]	@ (8004208 <BSP_I2C1_Init+0x70>)
 80041c4:	f000 f8f6 	bl	80043b4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d116      	bne.n	80041fc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80041ce:	480e      	ldr	r0, [pc, #56]	@ (8004208 <BSP_I2C1_Init+0x70>)
 80041d0:	f000 f8ac 	bl	800432c <MX_I2C1_Init>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80041da:	f06f 0307 	mvn.w	r3, #7
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	e00c      	b.n	80041fc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041e2:	2100      	movs	r1, #0
 80041e4:	4808      	ldr	r0, [pc, #32]	@ (8004208 <BSP_I2C1_Init+0x70>)
 80041e6:	f005 f909 	bl	80093fc <HAL_I2CEx_ConfigAnalogFilter>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80041f0:	f06f 0307 	mvn.w	r3, #7
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	e001      	b.n	80041fc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80041fc:	687b      	ldr	r3, [r7, #4]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	2000137c 	.word	0x2000137c
 800420c:	40005400 	.word	0x40005400
 8004210:	200013d0 	.word	0x200013d0

08004214 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800421e:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <BSP_I2C1_DeInit+0x48>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d014      	beq.n	8004250 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <BSP_I2C1_DeInit+0x48>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3b01      	subs	r3, #1
 800422c:	4a0b      	ldr	r2, [pc, #44]	@ (800425c <BSP_I2C1_DeInit+0x48>)
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <BSP_I2C1_DeInit+0x48>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8004238:	4809      	ldr	r0, [pc, #36]	@ (8004260 <BSP_I2C1_DeInit+0x4c>)
 800423a:	f000 f91b 	bl	8004474 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800423e:	4808      	ldr	r0, [pc, #32]	@ (8004260 <BSP_I2C1_DeInit+0x4c>)
 8004240:	f004 fbbf 	bl	80089c2 <HAL_I2C_DeInit>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800424a:	f06f 0307 	mvn.w	r3, #7
 800424e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004250:	687b      	ldr	r3, [r7, #4]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200013d0 	.word	0x200013d0
 8004260:	2000137c 	.word	0x2000137c

08004264 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	@ 0x28
 8004268:	af04      	add	r7, sp, #16
 800426a:	60ba      	str	r2, [r7, #8]
 800426c:	461a      	mov	r2, r3
 800426e:	4603      	mov	r3, r0
 8004270:	81fb      	strh	r3, [r7, #14]
 8004272:	460b      	mov	r3, r1
 8004274:	81bb      	strh	r3, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800427e:	89ba      	ldrh	r2, [r7, #12]
 8004280:	89f9      	ldrh	r1, [r7, #14]
 8004282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2301      	movs	r3, #1
 8004292:	480c      	ldr	r0, [pc, #48]	@ (80042c4 <BSP_I2C1_WriteReg+0x60>)
 8004294:	f004 fbc4 	bl	8008a20 <HAL_I2C_Mem_Write>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800429e:	4809      	ldr	r0, [pc, #36]	@ (80042c4 <BSP_I2C1_WriteReg+0x60>)
 80042a0:	f004 fdfa 	bl	8008e98 <HAL_I2C_GetError>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d103      	bne.n	80042b2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80042aa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e002      	b.n	80042b8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80042b2:	f06f 0303 	mvn.w	r3, #3
 80042b6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80042b8:	697b      	ldr	r3, [r7, #20]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	2000137c 	.word	0x2000137c

080042c8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	@ 0x28
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	60ba      	str	r2, [r7, #8]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	81fb      	strh	r3, [r7, #14]
 80042d6:	460b      	mov	r3, r1
 80042d8:	81bb      	strh	r3, [r7, #12]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80042e2:	89ba      	ldrh	r2, [r7, #12]
 80042e4:	89f9      	ldrh	r1, [r7, #14]
 80042e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042ea:	9302      	str	r3, [sp, #8]
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2301      	movs	r3, #1
 80042f6:	480c      	ldr	r0, [pc, #48]	@ (8004328 <BSP_I2C1_ReadReg+0x60>)
 80042f8:	f004 fca6 	bl	8008c48 <HAL_I2C_Mem_Read>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004302:	4809      	ldr	r0, [pc, #36]	@ (8004328 <BSP_I2C1_ReadReg+0x60>)
 8004304:	f004 fdc8 	bl	8008e98 <HAL_I2C_GetError>
 8004308:	4603      	mov	r3, r0
 800430a:	2b04      	cmp	r3, #4
 800430c:	d103      	bne.n	8004316 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800430e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e002      	b.n	800431c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004316:	f06f 0303 	mvn.w	r3, #3
 800431a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800431c:	697b      	ldr	r3, [r7, #20]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000137c 	.word	0x2000137c

0800432c <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a1c      	ldr	r2, [pc, #112]	@ (80043ac <MX_I2C1_Init+0x80>)
 800433c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1b      	ldr	r2, [pc, #108]	@ (80043b0 <MX_I2C1_Init+0x84>)
 8004342:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f004 fa98 	bl	80088a4 <HAL_I2C_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f005 f83b 	bl	80093fc <HAL_I2CEx_ConfigAnalogFilter>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8004390:	2100      	movs	r1, #0
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f005 f87d 	bl	8009492 <HAL_I2CEx_ConfigDigitalFilter>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40005400 	.word	0x40005400
 80043b0:	10909cec 	.word	0x10909cec

080043b4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b0ac      	sub	sp, #176	@ 0xb0
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	2288      	movs	r2, #136	@ 0x88
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f00c f81d 	bl	8010404 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80043ca:	2340      	movs	r3, #64	@ 0x40
 80043cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80043ce:	2300      	movs	r3, #0
 80043d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80043d2:	f107 0314 	add.w	r3, r7, #20
 80043d6:	4618      	mov	r0, r3
 80043d8:	f005 ff0c 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043dc:	4b23      	ldr	r3, [pc, #140]	@ (800446c <I2C1_MspInit+0xb8>)
 80043de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e0:	4a22      	ldr	r2, [pc, #136]	@ (800446c <I2C1_MspInit+0xb8>)
 80043e2:	f043 0302 	orr.w	r3, r3, #2
 80043e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043e8:	4b20      	ldr	r3, [pc, #128]	@ (800446c <I2C1_MspInit+0xb8>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80043f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043fc:	2312      	movs	r3, #18
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004408:	2303      	movs	r3, #3
 800440a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800440e:	2304      	movs	r3, #4
 8004410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004414:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004418:	4619      	mov	r1, r3
 800441a:	4815      	ldr	r0, [pc, #84]	@ (8004470 <I2C1_MspInit+0xbc>)
 800441c:	f003 ff8c 	bl	8008338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004428:	2312      	movs	r3, #18
 800442a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004434:	2303      	movs	r3, #3
 8004436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800443a:	2304      	movs	r3, #4
 800443c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004440:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004444:	4619      	mov	r1, r3
 8004446:	480a      	ldr	r0, [pc, #40]	@ (8004470 <I2C1_MspInit+0xbc>)
 8004448:	f003 ff76 	bl	8008338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <I2C1_MspInit+0xb8>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004450:	4a06      	ldr	r2, [pc, #24]	@ (800446c <I2C1_MspInit+0xb8>)
 8004452:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004456:	6593      	str	r3, [r2, #88]	@ 0x58
 8004458:	4b04      	ldr	r3, [pc, #16]	@ (800446c <I2C1_MspInit+0xb8>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004464:	bf00      	nop
 8004466:	37b0      	adds	r7, #176	@ 0xb0
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	48000400 	.word	0x48000400

08004474 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800447c:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <I2C1_MspDeInit+0x30>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	4a08      	ldr	r2, [pc, #32]	@ (80044a4 <I2C1_MspDeInit+0x30>)
 8004482:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004486:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8004488:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800448c:	4806      	ldr	r0, [pc, #24]	@ (80044a8 <I2C1_MspDeInit+0x34>)
 800448e:	f004 f8fd 	bl	800868c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8004492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004496:	4804      	ldr	r0, [pc, #16]	@ (80044a8 <I2C1_MspDeInit+0x34>)
 8004498:	f004 f8f8 	bl	800868c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	48000400 	.word	0x48000400

080044ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return 1;
 80044b0:	2301      	movs	r3, #1
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_kill>:

int _kill(int pid, int sig)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044c6:	f00c f80d 	bl	80104e4 <__errno>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2216      	movs	r2, #22
 80044ce:	601a      	str	r2, [r3, #0]
  return -1;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <_exit>:

void _exit (int status)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ffe7 	bl	80044bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <_exit+0x12>

080044f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e00a      	b.n	800451a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004504:	f3af 8000 	nop.w
 8004508:	4601      	mov	r1, r0
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	60ba      	str	r2, [r7, #8]
 8004510:	b2ca      	uxtb	r2, r1
 8004512:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3301      	adds	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	dbf0      	blt.n	8004504 <_read+0x12>
  }

  return len;
 8004522:	687b      	ldr	r3, [r7, #4]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e009      	b.n	8004552 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	60ba      	str	r2, [r7, #8]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	dbf1      	blt.n	800453e <_write+0x12>
  }
  return len;
 800455a:	687b      	ldr	r3, [r7, #4]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_close>:

int _close(int file)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800456c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800458c:	605a      	str	r2, [r3, #4]
  return 0;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_isatty>:

int _isatty(int file)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045a4:	2301      	movs	r3, #1
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045d4:	4a14      	ldr	r2, [pc, #80]	@ (8004628 <_sbrk+0x5c>)
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <_sbrk+0x60>)
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045e0:	4b13      	ldr	r3, [pc, #76]	@ (8004630 <_sbrk+0x64>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <_sbrk+0x64>)
 80045ea:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <_sbrk+0x68>)
 80045ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045ee:	4b10      	ldr	r3, [pc, #64]	@ (8004630 <_sbrk+0x64>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d207      	bcs.n	800460c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045fc:	f00b ff72 	bl	80104e4 <__errno>
 8004600:	4603      	mov	r3, r0
 8004602:	220c      	movs	r2, #12
 8004604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800460a:	e009      	b.n	8004620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800460c:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <_sbrk+0x64>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004612:	4b07      	ldr	r3, [pc, #28]	@ (8004630 <_sbrk+0x64>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	4a05      	ldr	r2, [pc, #20]	@ (8004630 <_sbrk+0x64>)
 800461c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20018000 	.word	0x20018000
 800462c:	00000400 	.word	0x00000400
 8004630:	200013d4 	.word	0x200013d4
 8004634:	20003ec0 	.word	0x20003ec0

08004638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800463c:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <SystemInit+0x20>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004642:	4a05      	ldr	r2, [pc, #20]	@ (8004658 <SystemInit+0x20>)
 8004644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800465c:	f8df d048 	ldr.w	sp, [pc, #72]	@ 80046a8 <LoopForever+0x4>
 /* Enable Fault handlers */
 /*************************/
        .set     SHCSR, 0xE000ED24
        .set     FAULT_MASK, (0x1<<18) + (0x1<<17) + (0x1<<16)

        ldr      r0, =SHCSR
 8004660:	4812      	ldr	r0, [pc, #72]	@ (80046ac <LoopForever+0x8>)
        ldr      r1, [r0]
 8004662:	6801      	ldr	r1, [r0, #0]
        orr      r1, r1,#FAULT_MASK
 8004664:	f441 21e0 	orr.w	r1, r1, #458752	@ 0x70000
        str      r1, [r0]
 8004668:	6001      	str	r1, [r0, #0]

        dsb
 800466a:	f3bf 8f4f 	dsb	sy
        isb
 800466e:	f3bf 8f6f 	isb	sy

/* Call the clock system initialization function.*/
	    bl  SystemInit
 8004672:	f7ff ffe1 	bl	8004638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004676:	480e      	ldr	r0, [pc, #56]	@ (80046b0 <LoopForever+0xc>)
  ldr r1, =_edata
 8004678:	490e      	ldr	r1, [pc, #56]	@ (80046b4 <LoopForever+0x10>)
  ldr r2, =_sidata
 800467a:	4a0f      	ldr	r2, [pc, #60]	@ (80046b8 <LoopForever+0x14>)
  movs r3, #0
 800467c:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800467e:	e002      	b.n	8004686 <LoopCopyDataInit>

08004680 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004680:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004682:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004684:	3304      	adds	r3, #4

08004686 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004686:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004688:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800468a:	d3f9      	bcc.n	8004680 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800468c:	4a0b      	ldr	r2, [pc, #44]	@ (80046bc <LoopForever+0x18>)
  ldr r4, =_ebss
 800468e:	4c0c      	ldr	r4, [pc, #48]	@ (80046c0 <LoopForever+0x1c>)
  movs r3, #0
 8004690:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004692:	e001      	b.n	8004698 <LoopFillZerobss>

08004694 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004694:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004696:	3204      	adds	r2, #4

08004698 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004698:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800469a:	d3fb      	bcc.n	8004694 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800469c:	f00b ff28 	bl	80104f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046a0:	f7fe f9a4 	bl	80029ec <main>

080046a4 <LoopForever>:

LoopForever:
    b LoopForever
 80046a4:	e7fe      	b.n	80046a4 <LoopForever>
 80046a6:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Set stack pointer */
 80046a8:	20018000 	.word	0x20018000
        ldr      r0, =SHCSR
 80046ac:	e000ed24 	.word	0xe000ed24
  ldr r0, =_sdata
 80046b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046b4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80046b8:	08013ee4 	.word	0x08013ee4
  ldr r2, =_sbss
 80046bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80046c0:	20003ebc 	.word	0x20003ebc

080046c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046c4:	e7fe      	b.n	80046c4 <ADC1_2_IRQHandler>
	...

080046c8 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80046d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e034      	b.n	800474a <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	7b1a      	ldrb	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0e      	ldr	r2, [pc, #56]	@ (8004754 <HTS221_RegisterBusIO+0x8c>)
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <HTS221_RegisterBusIO+0x90>)
 8004722:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4798      	blx	r3
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	e002      	b.n	800474a <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004748:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08004b35 	.word	0x08004b35
 8004758:	08004b97 	.word	0x08004b97

0800475c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d108      	bne.n	8004780 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f97b 	bl	8004a6a <HTS221_Initialize>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800477e:	e004      	b.n	800478a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e015      	b.n	80047d4 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3320      	adds	r3, #32
 80047b6:	2101      	movs	r1, #1
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fadd 	bl	8004d78 <hts221_power_on_set>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047c8:	e004      	b.n	80047d4 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3320      	adds	r3, #32
 80047ea:	f107 020c 	add.w	r2, r7, #12
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fb85 	bl	8004f00 <hts221_hum_adc_point_0_get>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004800:	e06b      	b.n	80048da <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f103 0220 	add.w	r2, r3, #32
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f000 fad7 	bl	8004dc4 <hts221_hum_rh_point_0_get>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 800481c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004820:	e05b      	b.n	80048da <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f103 0220 	add.w	r2, r3, #32
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	3308      	adds	r3, #8
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f000 fb87 	bl	8004f44 <hts221_hum_adc_point_1_get>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 800483c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004840:	e04b      	b.n	80048da <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 0220 	add.w	r2, r3, #32
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	330c      	adds	r3, #12
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 fad5 	bl	8004e00 <hts221_hum_rh_point_1_get>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004860:	e03b      	b.n	80048da <HTS221_HUM_GetHumidity+0xfe>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8004862:	2300      	movs	r3, #0
 8004864:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3320      	adds	r3, #32
 800486a:	f107 021c 	add.w	r2, r7, #28
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fa3d 	bl	8004cf0 <hts221_humidity_raw_get>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004880:	e02b      	b.n	80048da <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004882:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800488e:	f107 030c 	add.w	r3, r7, #12
 8004892:	eeb0 0a67 	vmov.f32	s0, s15
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f913 	bl	8004ac2 <Linear_Interpolation>
 800489c:	eef0 7a40 	vmov.f32	s15, s0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b4:	d503      	bpl.n	80048be <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	edd3 7a00 	vldr	s15, [r3]
 80048c4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80048e4 <HTS221_HUM_GetHumidity+0x108>
 80048c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d0:	dd02      	ble.n	80048d8 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	4a04      	ldr	r2, [pc, #16]	@ (80048e8 <HTS221_HUM_GetHumidity+0x10c>)
 80048d6:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	42c80000 	.word	0x42c80000
 80048e8:	42c80000 	.word	0x42c80000

080048ec <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e015      	b.n	800492e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3320      	adds	r3, #32
 8004910:	2101      	movs	r1, #1
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fa30 	bl	8004d78 <hts221_power_on_set>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004922:	e004      	b.n	800492e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b088      	sub	sp, #32
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3320      	adds	r3, #32
 8004944:	f107 020c 	add.w	r2, r7, #12
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb1c 	bl	8004f88 <hts221_temp_adc_point_0_get>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800495a:	e052      	b.n	8004a02 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f103 0220 	add.w	r2, r3, #32
 8004962:	f107 030c 	add.w	r3, r7, #12
 8004966:	3304      	adds	r3, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f000 fa66 	bl	8004e3c <hts221_temp_deg_point_0_get>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800497a:	e042      	b.n	8004a02 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f103 0220 	add.w	r2, r3, #32
 8004982:	f107 030c 	add.w	r3, r7, #12
 8004986:	3308      	adds	r3, #8
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 fb1e 	bl	8004fcc <hts221_temp_adc_point_1_get>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800499a:	e032      	b.n	8004a02 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f103 0220 	add.w	r2, r3, #32
 80049a2:	f107 030c 	add.w	r3, r7, #12
 80049a6:	330c      	adds	r3, #12
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fa77 	bl	8004e9e <hts221_temp_deg_point_1_get>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049ba:	e022      	b.n	8004a02 <HTS221_TEMP_GetTemperature+0xcc>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 80049bc:	2300      	movs	r3, #0
 80049be:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3320      	adds	r3, #32
 80049c4:	f107 021c 	add.w	r2, r7, #28
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f9b2 	bl	8004d34 <hts221_temperature_raw_get>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049da:	e012      	b.n	8004a02 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80049dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e8:	f107 030c 	add.w	r3, r7, #12
 80049ec:	eeb0 0a67 	vmov.f32	s0, s15
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f866 	bl	8004ac2 <Linear_Interpolation>
 80049f6:	eef0 7a40 	vmov.f32	s15, s0
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8004a16:	edd7 7a00 	vldr	s15, [r7]
 8004a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	d801      	bhi.n	8004a2c <HTS221_SetOutputDataRate+0x22>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e00b      	b.n	8004a44 <HTS221_SetOutputDataRate+0x3a>
 8004a2c:	edd7 7a00 	vldr	s15, [r7]
 8004a30:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8004a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3c:	d801      	bhi.n	8004a42 <HTS221_SetOutputDataRate+0x38>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e000      	b.n	8004a44 <HTS221_SetOutputDataRate+0x3a>
 8004a42:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8004a44:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3320      	adds	r3, #32
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f902 	bl	8004c58 <hts221_data_rate_set>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a5e:	e000      	b.n	8004a62 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3320      	adds	r3, #32
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f97d 	bl	8004d78 <hts221_power_on_set>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a88:	e017      	b.n	8004aba <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3320      	adds	r3, #32
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 f907 	bl	8004ca4 <hts221_block_data_update_set>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8004a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004aa0:	e00b      	b.n	8004aba <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8004aa2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ffaf 	bl	8004a0a <HTS221_SetOutputDataRate>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ab6:	e000      	b.n	8004aba <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ada:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ade:	edd7 7a00 	vldr	s15, [r7]
 8004ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	edd3 6a02 	vldr	s13, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	edd3 7a01 	vldr	s15, [r3, #4]
 8004af2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	ed93 6a00 	vldr	s12, [r3]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b02:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004b06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	edd3 7a00 	vldr	s15, [r3]
 8004b1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004b1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b22:	eef0 7a66 	vmov.f32	s15, s13
}
 8004b26:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	72fb      	strb	r3, [r7, #11]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10e      	bne.n	8004b72 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	695c      	ldr	r4, [r3, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	7b1b      	ldrb	r3, [r3, #12]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	7afb      	ldrb	r3, [r7, #11]
 8004b60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	4619      	mov	r1, r3
 8004b68:	893b      	ldrh	r3, [r7, #8]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	47a0      	blx	r4
 8004b6e:	4603      	mov	r3, r0
 8004b70:	e00d      	b.n	8004b8e <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	695c      	ldr	r4, [r3, #20]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	7b1b      	ldrb	r3, [r3, #12]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	7afb      	ldrb	r3, [r7, #11]
 8004b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	893b      	ldrh	r3, [r7, #8]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	47a0      	blx	r4
 8004b8c:	4603      	mov	r3, r0
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}

08004b96 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b96:	b590      	push	{r4, r7, lr}
 8004b98:	b087      	sub	sp, #28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	72fb      	strb	r3, [r7, #11]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10e      	bne.n	8004bd4 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	691c      	ldr	r4, [r3, #16]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	7b1b      	ldrb	r3, [r3, #12]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
 8004bc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	4619      	mov	r1, r3
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	47a0      	blx	r4
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	e00d      	b.n	8004bf0 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	691c      	ldr	r4, [r3, #16]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	7b1b      	ldrb	r3, [r3, #12]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	893b      	ldrh	r3, [r7, #8]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	47a0      	blx	r4
 8004bee:	4603      	mov	r3, r0
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd90      	pop	{r4, r7, pc}

08004bf8 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	607a      	str	r2, [r7, #4]
 8004c02:	461a      	mov	r2, r3
 8004c04:	460b      	mov	r3, r1
 8004c06:	72fb      	strb	r3, [r7, #11]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685c      	ldr	r4, [r3, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68d8      	ldr	r0, [r3, #12]
 8004c14:	893b      	ldrh	r3, [r7, #8]
 8004c16:	7af9      	ldrb	r1, [r7, #11]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	47a0      	blx	r4
 8004c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8004c1e:	697b      	ldr	r3, [r7, #20]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}

08004c28 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	461a      	mov	r2, r3
 8004c34:	460b      	mov	r3, r1
 8004c36:	72fb      	strb	r3, [r7, #11]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681c      	ldr	r4, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68d8      	ldr	r0, [r3, #12]
 8004c44:	893b      	ldrh	r3, [r7, #8]
 8004c46:	7af9      	ldrb	r1, [r7, #11]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	47a0      	blx	r4
 8004c4c:	6178      	str	r0, [r7, #20]

  return ret;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd90      	pop	{r4, r7, pc}

08004c58 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c64:	f107 0208 	add.w	r2, r7, #8
 8004c68:	2301      	movs	r3, #1
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ffc3 	bl	8004bf8 <hts221_read_reg>
 8004c72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	7a3b      	ldrb	r3, [r7, #8]
 8004c84:	f362 0301 	bfi	r3, r2, #0, #2
 8004c88:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	2301      	movs	r3, #1
 8004c90:	2120      	movs	r1, #32
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ffc8 	bl	8004c28 <hts221_write_reg>
 8004c98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004cb0:	f107 0208 	add.w	r2, r7, #8
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2120      	movs	r1, #32
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff9d 	bl	8004bf8 <hts221_read_reg>
 8004cbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	7a3b      	ldrb	r3, [r7, #8]
 8004cd0:	f362 0382 	bfi	r3, r2, #2, #1
 8004cd4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004cd6:	f107 0208 	add.w	r2, r7, #8
 8004cda:	2301      	movs	r3, #1
 8004cdc:	2120      	movs	r1, #32
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ffa2 	bl	8004c28 <hts221_write_reg>
 8004ce4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8004cfa:	f107 0208 	add.w	r2, r7, #8
 8004cfe:	2302      	movs	r3, #2
 8004d00:	2128      	movs	r1, #40	@ 0x28
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff78 	bl	8004bf8 <hts221_read_reg>
 8004d08:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004d0a:	7a7b      	ldrb	r3, [r7, #9]
 8004d0c:	b21a      	sxth	r2, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	7a3a      	ldrb	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	b21a      	sxth	r2, r3
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	801a      	strh	r2, [r3, #0]

  return ret;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004d3e:	f107 0208 	add.w	r2, r7, #8
 8004d42:	2302      	movs	r3, #2
 8004d44:	212a      	movs	r1, #42	@ 0x2a
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff56 	bl	8004bf8 <hts221_read_reg>
 8004d4c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004d4e:	7a7b      	ldrb	r3, [r7, #9]
 8004d50:	b21a      	sxth	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	7a3a      	ldrb	r2, [r7, #8]
 8004d64:	4413      	add	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	b21a      	sxth	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004d84:	f107 0208 	add.w	r2, r7, #8
 8004d88:	2301      	movs	r3, #1
 8004d8a:	2120      	movs	r1, #32
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff33 	bl	8004bf8 <hts221_read_reg>
 8004d92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10f      	bne.n	8004dba <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	7a3b      	ldrb	r3, [r7, #8]
 8004da4:	f362 13c7 	bfi	r3, r2, #7, #1
 8004da8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004daa:	f107 0208 	add.w	r2, r7, #8
 8004dae:	2301      	movs	r3, #1
 8004db0:	2120      	movs	r1, #32
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff38 	bl	8004c28 <hts221_write_reg>
 8004db8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004dba:	68fb      	ldr	r3, [r7, #12]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8004dce:	f107 020b 	add.w	r2, r7, #11
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	2130      	movs	r1, #48	@ 0x30
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff0e 	bl	8004bf8 <hts221_read_reg>
 8004ddc:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004de8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004df6:	68fb      	ldr	r3, [r7, #12]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8004e0a:	f107 020b 	add.w	r2, r7, #11
 8004e0e:	2301      	movs	r3, #1
 8004e10:	2131      	movs	r1, #49	@ 0x31
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fef0 	bl	8004bf8 <hts221_read_reg>
 8004e18:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004e1a:	7afb      	ldrb	r3, [r7, #11]
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e24:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8004e46:	f107 020f 	add.w	r2, r7, #15
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	2132      	movs	r1, #50	@ 0x32
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fed2 	bl	8004bf8 <hts221_read_reg>
 8004e54:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d11b      	bne.n	8004e94 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004e5c:	f107 0210 	add.w	r2, r7, #16
 8004e60:	2301      	movs	r3, #1
 8004e62:	2135      	movs	r1, #53	@ 0x35
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fec7 	bl	8004bf8 <hts221_read_reg>
 8004e6a:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004e6c:	7c3b      	ldrb	r3, [r7, #16]
 8004e6e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	7bfa      	ldrb	r2, [r7, #15]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e86:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004e94:	697b      	ldr	r3, [r7, #20]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b086      	sub	sp, #24
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004ea8:	f107 020f 	add.w	r2, r7, #15
 8004eac:	2301      	movs	r3, #1
 8004eae:	2133      	movs	r1, #51	@ 0x33
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fea1 	bl	8004bf8 <hts221_read_reg>
 8004eb6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d11b      	bne.n	8004ef6 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004ebe:	f107 0210 	add.w	r2, r7, #16
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	2135      	movs	r1, #53	@ 0x35
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fe96 	bl	8004bf8 <hts221_read_reg>
 8004ecc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8004ece:	7c3b      	ldrb	r3, [r7, #16]
 8004ed0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	4413      	add	r3, r2
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ee8:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004ef6:	697b      	ldr	r3, [r7, #20]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8004f0a:	f107 0208 	add.w	r2, r7, #8
 8004f0e:	2302      	movs	r3, #2
 8004f10:	2136      	movs	r1, #54	@ 0x36
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe70 	bl	8004bf8 <hts221_read_reg>
 8004f18:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004f1a:	7a7b      	ldrb	r3, [r7, #9]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	7a3a      	ldrb	r2, [r7, #8]
 8004f22:	4413      	add	r3, r2
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004f28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004f4e:	f107 0208 	add.w	r2, r7, #8
 8004f52:	2302      	movs	r3, #2
 8004f54:	213a      	movs	r1, #58	@ 0x3a
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fe4e 	bl	8004bf8 <hts221_read_reg>
 8004f5c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004f5e:	7a7b      	ldrb	r3, [r7, #9]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	7a3a      	ldrb	r2, [r7, #8]
 8004f66:	4413      	add	r3, r2
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004f6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8004f92:	f107 0208 	add.w	r2, r7, #8
 8004f96:	2302      	movs	r3, #2
 8004f98:	213c      	movs	r1, #60	@ 0x3c
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fe2c 	bl	8004bf8 <hts221_read_reg>
 8004fa0:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004fa2:	7a7b      	ldrb	r3, [r7, #9]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	7a3a      	ldrb	r2, [r7, #8]
 8004faa:	4413      	add	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004fb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8004fd6:	f107 0208 	add.w	r2, r7, #8
 8004fda:	2302      	movs	r3, #2
 8004fdc:	213e      	movs	r1, #62	@ 0x3e
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fe0a 	bl	8004bf8 <hts221_read_reg>
 8004fe4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004fe6:	7a7b      	ldrb	r3, [r7, #9]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	7a3a      	ldrb	r2, [r7, #8]
 8004fee:	4413      	add	r3, r2
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004ff4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8005006:	68fb      	ldr	r3, [r7, #12]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d103      	bne.n	800502c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8005024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e051      	b.n	80050d0 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	7b1a      	ldrb	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	699a      	ldr	r2, [r3, #24]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1d      	ldr	r2, [pc, #116]	@ (80050dc <LPS22HB_RegisterBusIO+0xcc>)
 8005068:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <LPS22HB_RegisterBusIO+0xd0>)
 800506e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e020      	b.n	80050d0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4798      	blx	r3
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e016      	b.n	80050d0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d112      	bne.n	80050d0 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10d      	bne.n	80050d0 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80050b4:	2301      	movs	r3, #1
 80050b6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	461a      	mov	r2, r3
 80050bc:	2110      	movs	r1, #16
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f877 	bl	80051b2 <LPS22HB_Write_Reg>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 80050ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ce:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80050d0:	68fb      	ldr	r3, [r7, #12]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	0800529b 	.word	0x0800529b
 80050e0:	08005321 	.word	0x08005321

080050e4 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d108      	bne.n	8005108 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f876 	bl	80051e8 <LPS22HB_Initialize>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005106:	e004      	b.n	8005112 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HB_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e014      	b.n	800515a <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 0220 	add.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 f9c6 	bl	80054d0 <lps22hb_data_rate_set>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800514e:	e004      	b.n	800515a <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HB_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	2204      	movs	r2, #4
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f00b f945 	bl	8010404 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3320      	adds	r3, #32
 800517e:	f107 020c 	add.w	r2, r7, #12
 8005182:	4611      	mov	r1, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f9c9 	bl	800551c <lps22hb_pressure_raw_get>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8005190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005194:	e009      	b.n	80051aa <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f935 	bl	8005408 <lps22hb_from_lsb_to_hpa>
 800519e:	eef0 7a40 	vmov.f32	s15, s0
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
 80051be:	4613      	mov	r3, r2
 80051c0:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 0020 	add.w	r0, r3, #32
 80051c8:	1cba      	adds	r2, r7, #2
 80051ca:	78f9      	ldrb	r1, [r7, #3]
 80051cc:	2301      	movs	r3, #1
 80051ce:	f000 f902 	bl	80053d6 <lps22hb_write_reg>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051dc:	e000      	b.n	80051e0 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3320      	adds	r3, #32
 80051f4:	2101      	movs	r1, #1
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f9b9 	bl	800556e <lps22hb_low_power_set>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005206:	e044      	b.n	8005292 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3320      	adds	r3, #32
 800520c:	2100      	movs	r1, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f95e 	bl	80054d0 <lps22hb_data_rate_set>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800521e:	e038      	b.n	8005292 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3320      	adds	r3, #32
 8005224:	2102      	movs	r1, #2
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f92c 	bl	8005484 <lps22hb_low_pass_filter_mode_set>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8005232:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005236:	e02c      	b.n	8005292 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3320      	adds	r3, #32
 800523c:	2101      	movs	r1, #1
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f8fa 	bl	8005438 <lps22hb_block_data_update_set>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 800524a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800524e:	e020      	b.n	8005292 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3320      	adds	r3, #32
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f9ab 	bl	80055ba <lps22hb_auto_add_inc_set>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00e      	beq.n	8005288 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800526a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800526e:	e010      	b.n	8005292 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3320      	adds	r3, #32
 8005274:	2101      	movs	r1, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f99f 	bl	80055ba <lps22hb_auto_add_inc_set>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005286:	e004      	b.n	8005292 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2203      	movs	r2, #3
 800528c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HB_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800529a:	b590      	push	{r4, r7, lr}
 800529c:	b089      	sub	sp, #36	@ 0x24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	461a      	mov	r2, r3
 80052a6:	460b      	mov	r3, r1
 80052a8:	72fb      	strb	r3, [r7, #11]
 80052aa:	4613      	mov	r3, r2
 80052ac:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d121      	bne.n	8005302 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80052be:	2300      	movs	r3, #0
 80052c0:	83fb      	strh	r3, [r7, #30]
 80052c2:	e018      	b.n	80052f6 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	695c      	ldr	r4, [r3, #20]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	7b1b      	ldrb	r3, [r3, #12]
 80052cc:	4618      	mov	r0, r3
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	8bfb      	ldrh	r3, [r7, #30]
 80052d4:	4413      	add	r3, r2
 80052d6:	b299      	uxth	r1, r3
 80052d8:	8bfb      	ldrh	r3, [r7, #30]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	441a      	add	r2, r3
 80052de:	2301      	movs	r3, #1
 80052e0:	47a0      	blx	r4
 80052e2:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ee:	e013      	b.n	8005318 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80052f0:	8bfb      	ldrh	r3, [r7, #30]
 80052f2:	3301      	adds	r3, #1
 80052f4:	83fb      	strh	r3, [r7, #30]
 80052f6:	8bfa      	ldrh	r2, [r7, #30]
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d3e2      	bcc.n	80052c4 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	e00a      	b.n	8005318 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	695c      	ldr	r4, [r3, #20]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	7b1b      	ldrb	r3, [r3, #12]
 800530a:	4618      	mov	r0, r3
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	b299      	uxth	r1, r3
 8005310:	893b      	ldrh	r3, [r7, #8]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	47a0      	blx	r4
 8005316:	4603      	mov	r3, r0
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	3724      	adds	r7, #36	@ 0x24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd90      	pop	{r4, r7, pc}

08005320 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b089      	sub	sp, #36	@ 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	461a      	mov	r2, r3
 800532c:	460b      	mov	r3, r1
 800532e:	72fb      	strb	r3, [r7, #11]
 8005330:	4613      	mov	r3, r2
 8005332:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d121      	bne.n	8005388 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8005344:	2300      	movs	r3, #0
 8005346:	83fb      	strh	r3, [r7, #30]
 8005348:	e018      	b.n	800537c <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	691c      	ldr	r4, [r3, #16]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	7b1b      	ldrb	r3, [r3, #12]
 8005352:	4618      	mov	r0, r3
 8005354:	7afb      	ldrb	r3, [r7, #11]
 8005356:	b29a      	uxth	r2, r3
 8005358:	8bfb      	ldrh	r3, [r7, #30]
 800535a:	4413      	add	r3, r2
 800535c:	b299      	uxth	r1, r3
 800535e:	8bfb      	ldrh	r3, [r7, #30]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	441a      	add	r2, r3
 8005364:	2301      	movs	r3, #1
 8005366:	47a0      	blx	r4
 8005368:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8005370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005374:	e013      	b.n	800539e <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8005376:	8bfb      	ldrh	r3, [r7, #30]
 8005378:	3301      	adds	r3, #1
 800537a:	83fb      	strh	r3, [r7, #30]
 800537c:	8bfa      	ldrh	r2, [r7, #30]
 800537e:	893b      	ldrh	r3, [r7, #8]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3e2      	bcc.n	800534a <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	e00a      	b.n	800539e <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	691c      	ldr	r4, [r3, #16]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	7b1b      	ldrb	r3, [r3, #12]
 8005390:	4618      	mov	r0, r3
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	b299      	uxth	r1, r3
 8005396:	893b      	ldrh	r3, [r7, #8]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	47a0      	blx	r4
 800539c:	4603      	mov	r3, r0
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3724      	adds	r7, #36	@ 0x24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd90      	pop	{r4, r7, pc}

080053a6 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80053a6:	b590      	push	{r4, r7, lr}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	461a      	mov	r2, r3
 80053b2:	460b      	mov	r3, r1
 80053b4:	72fb      	strb	r3, [r7, #11]
 80053b6:	4613      	mov	r3, r2
 80053b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685c      	ldr	r4, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	68d8      	ldr	r0, [r3, #12]
 80053c2:	893b      	ldrh	r3, [r7, #8]
 80053c4:	7af9      	ldrb	r1, [r7, #11]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	47a0      	blx	r4
 80053ca:	6178      	str	r0, [r7, #20]

  return ret;
 80053cc:	697b      	ldr	r3, [r7, #20]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd90      	pop	{r4, r7, pc}

080053d6 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80053d6:	b590      	push	{r4, r7, lr}
 80053d8:	b087      	sub	sp, #28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	461a      	mov	r2, r3
 80053e2:	460b      	mov	r3, r1
 80053e4:	72fb      	strb	r3, [r7, #11]
 80053e6:	4613      	mov	r3, r2
 80053e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681c      	ldr	r4, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68d8      	ldr	r0, [r3, #12]
 80053f2:	893b      	ldrh	r3, [r7, #8]
 80053f4:	7af9      	ldrb	r1, [r7, #11]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	47a0      	blx	r4
 80053fa:	6178      	str	r0, [r7, #20]

  return ret;
 80053fc:	697b      	ldr	r3, [r7, #20]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd90      	pop	{r4, r7, pc}
	...

08005408 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800541a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005434 <lps22hb_from_lsb_to_hpa+0x2c>
 800541e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005422:	eef0 7a66 	vmov.f32	s15, s13
}
 8005426:	eeb0 0a67 	vmov.f32	s0, s15
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	49800000 	.word	0x49800000

08005438 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005444:	f107 0208 	add.w	r2, r7, #8
 8005448:	2301      	movs	r3, #1
 800544a:	2110      	movs	r1, #16
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ffaa 	bl	80053a6 <lps22hb_read_reg>
 8005452:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	b2da      	uxtb	r2, r3
 8005462:	7a3b      	ldrb	r3, [r7, #8]
 8005464:	f362 0341 	bfi	r3, r2, #1, #1
 8005468:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800546a:	f107 0208 	add.w	r2, r7, #8
 800546e:	2301      	movs	r3, #1
 8005470:	2110      	movs	r1, #16
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff ffaf 	bl	80053d6 <lps22hb_write_reg>
 8005478:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005490:	f107 0208 	add.w	r2, r7, #8
 8005494:	2301      	movs	r3, #1
 8005496:	2110      	movs	r1, #16
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ff84 	bl	80053a6 <lps22hb_read_reg>
 800549e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	7a3b      	ldrb	r3, [r7, #8]
 80054b0:	f362 0383 	bfi	r3, r2, #2, #2
 80054b4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80054b6:	f107 0208 	add.w	r2, r7, #8
 80054ba:	2301      	movs	r3, #1
 80054bc:	2110      	movs	r1, #16
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ff89 	bl	80053d6 <lps22hb_write_reg>
 80054c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80054dc:	f107 0208 	add.w	r2, r7, #8
 80054e0:	2301      	movs	r3, #1
 80054e2:	2110      	movs	r1, #16
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ff5e 	bl	80053a6 <lps22hb_read_reg>
 80054ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10f      	bne.n	8005512 <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	7a3b      	ldrb	r3, [r7, #8]
 80054fc:	f362 1306 	bfi	r3, r2, #4, #3
 8005500:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005502:	f107 0208 	add.w	r2, r7, #8
 8005506:	2301      	movs	r3, #1
 8005508:	2110      	movs	r1, #16
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff ff63 	bl	80053d6 <lps22hb_write_reg>
 8005510:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005512:	68fb      	ldr	r3, [r7, #12]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8005526:	f107 0208 	add.w	r2, r7, #8
 800552a:	2303      	movs	r3, #3
 800552c:	2128      	movs	r1, #40	@ 0x28
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff ff39 	bl	80053a6 <lps22hb_read_reg>
 8005534:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005536:	7abb      	ldrb	r3, [r7, #10]
 8005538:	461a      	mov	r2, r3
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	7a7a      	ldrb	r2, [r7, #9]
 8005546:	441a      	add	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	7a3a      	ldrb	r2, [r7, #8]
 8005554:	441a      	add	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	021a      	lsls	r2, r3, #8
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	601a      	str	r2, [r3, #0]

  return ret;
 8005564:	68fb      	ldr	r3, [r7, #12]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 800557a:	f107 0208 	add.w	r2, r7, #8
 800557e:	2301      	movs	r3, #1
 8005580:	211a      	movs	r1, #26
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff ff0f 	bl	80053a6 <lps22hb_read_reg>
 8005588:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10f      	bne.n	80055b0 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	7a3b      	ldrb	r3, [r7, #8]
 800559a:	f362 0300 	bfi	r3, r2, #0, #1
 800559e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80055a0:	f107 0208 	add.w	r2, r7, #8
 80055a4:	2301      	movs	r3, #1
 80055a6:	211a      	movs	r1, #26
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff14 	bl	80053d6 <lps22hb_write_reg>
 80055ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80055c6:	f107 0208 	add.w	r2, r7, #8
 80055ca:	2301      	movs	r3, #1
 80055cc:	2111      	movs	r1, #17
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fee9 	bl	80053a6 <lps22hb_read_reg>
 80055d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10f      	bne.n	80055fc <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	7a3b      	ldrb	r3, [r7, #8]
 80055e6:	f362 1304 	bfi	r3, r2, #4, #1
 80055ea:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80055ec:	f107 0208 	add.w	r2, r7, #8
 80055f0:	2301      	movs	r3, #1
 80055f2:	2111      	movs	r1, #17
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff feee 	bl	80053d6 <lps22hb_write_reg>
 80055fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055fc:	68fb      	ldr	r3, [r7, #12]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d103      	bne.n	8005624 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800561c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e051      	b.n	80056c8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	7b1a      	ldrb	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1d      	ldr	r2, [pc, #116]	@ (80056d4 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8005660:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1c      	ldr	r2, [pc, #112]	@ (80056d8 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8005666:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e020      	b.n	80056c8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4798      	blx	r3
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8005692:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e016      	b.n	80056c8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d112      	bne.n	80056c8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80056ac:	2301      	movs	r3, #1
 80056ae:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	461a      	mov	r2, r3
 80056b4:	2123      	movs	r1, #35	@ 0x23
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f97b 	bl	80059b2 <LSM303AGR_ACC_Write_Reg>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056c6:	e000      	b.n	80056ca <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 80056c8:	68fb      	ldr	r3, [r7, #12]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	08005dcd 	.word	0x08005dcd
 80056d8:	08005e2f 	.word	0x08005e2f

080056dc <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3320      	adds	r3, #32
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fd1a 	bl	8006124 <lsm303agr_xl_block_data_update_set>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056fa:	e02c      	b.n	8005756 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3320      	adds	r3, #32
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fe5c 	bl	80063c0 <lsm303agr_xl_fifo_mode_set>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800570e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005712:	e020      	b.n	8005756 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2205      	movs	r2, #5
 8005718:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3320      	adds	r3, #32
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fc7a 	bl	800601c <lsm303agr_xl_data_rate_set>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800572e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005732:	e010      	b.n	8005756 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3320      	adds	r3, #32
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fc94 	bl	8006068 <lsm303agr_xl_full_scale_set>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800574a:	e004      	b.n	8005756 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM303AGR_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e014      	b.n	800579e <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f103 0220 	add.w	r2, r3, #32
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005780:	4619      	mov	r1, r3
 8005782:	4610      	mov	r0, r2
 8005784:	f000 fc4a 	bl	800601c <lsm303agr_xl_data_rate_set>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 800578e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005792:	e004      	b.n	800579e <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM303AGR_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3320      	adds	r3, #32
 80057b8:	f107 020b 	add.w	r2, r7, #11
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fbf8 	bl	8005fb4 <lsm303agr_xl_operating_mode_get>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057ce:	e031      	b.n	8005834 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80057d0:	7afb      	ldrb	r3, [r7, #11]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d01a      	beq.n	800580c <LSM303AGR_ACC_GetSensitivity+0x66>
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	dc22      	bgt.n	8005820 <LSM303AGR_ACC_GetSensitivity+0x7a>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d00a      	beq.n	80057f8 <LSM303AGR_ACC_GetSensitivity+0x52>
 80057e2:	e01d      	b.n	8005820 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fa1e 	bl	8005c28 <LSM303AGR_ACC_GetSensitivityHR>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01a      	beq.n	8005828 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057f6:	e01d      	b.n	8005834 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa5a 	bl	8005cb4 <LSM303AGR_ACC_GetSensitivityNM>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d012      	beq.n	800582c <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800580a:	e013      	b.n	8005834 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa96 	bl	8005d40 <LSM303AGR_ACC_GetSensitivityLP>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800581a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800581e:	e009      	b.n	8005834 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8005820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005824:	60fb      	str	r3, [r7, #12]
      break;
 8005826:	e004      	b.n	8005832 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005828:	bf00      	nop
 800582a:	e002      	b.n	8005832 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800582c:	bf00      	nop
 800582e:	e000      	b.n	8005832 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005830:	bf00      	nop
  }

  return ret;
 8005832:	68fb      	ldr	r3, [r7, #12]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3320      	adds	r3, #32
 8005852:	f107 020f 	add.w	r2, r7, #15
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fbab 	bl	8005fb4 <lsm303agr_xl_operating_mode_get>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8005864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005868:	e04a      	b.n	8005900 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d00c      	beq.n	800588a <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8005870:	2b02      	cmp	r3, #2
 8005872:	dc0e      	bgt.n	8005892 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8005878:	2b01      	cmp	r3, #1
 800587a:	d003      	beq.n	8005884 <LSM303AGR_ACC_GetAxesRaw+0x48>
 800587c:	e009      	b.n	8005892 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800587e:	2310      	movs	r3, #16
 8005880:	83fb      	strh	r3, [r7, #30]
      break;
 8005882:	e00a      	b.n	800589a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8005884:	2340      	movs	r3, #64	@ 0x40
 8005886:	83fb      	strh	r3, [r7, #30]
      break;
 8005888:	e007      	b.n	800589a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800588a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800588e:	83fb      	strh	r3, [r7, #30]
      break;
 8005890:	e003      	b.n	800589a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005896:	61bb      	str	r3, [r7, #24]
      break;
 8005898:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058a0:	d101      	bne.n	80058a6 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	e02c      	b.n	8005900 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3320      	adds	r3, #32
 80058aa:	f107 0210 	add.w	r2, r7, #16
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fc5d 	bl	8006170 <lsm303agr_acceleration_raw_get>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80058bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058c0:	e01e      	b.n	8005900 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80058c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80058cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80058d0:	b21a      	sxth	r2, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80058d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058da:	461a      	mov	r2, r3
 80058dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80058e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80058e4:	b21a      	sxth	r2, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80058ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80058f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80058f8:	b21a      	sxth	r2, r3
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	809a      	strh	r2, [r3, #4]

  return ret;
 80058fe:	69bb      	ldr	r3, [r7, #24]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8005918:	f107 0310 	add.w	r3, r7, #16
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff ff8c 	bl	800583c <LSM303AGR_ACC_GetAxesRaw>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800592e:	e03c      	b.n	80059aa <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8005930:	f107 030c 	add.w	r3, r7, #12
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff ff35 	bl	80057a6 <LSM303AGR_ACC_GetSensitivity>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005946:	e030      	b.n	80059aa <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005948:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005954:	edd7 7a03 	vldr	s15, [r7, #12]
 8005958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005960:	ee17 2a90 	vmov	r2, s15
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005968:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005974:	edd7 7a03 	vldr	s15, [r7, #12]
 8005978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005980:	ee17 2a90 	vmov	r2, s15
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005988:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005994:	edd7 7a03 	vldr	s15, [r7, #12]
 8005998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059a0:	ee17 2a90 	vmov	r2, s15
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
 80059be:	4613      	mov	r3, r2
 80059c0:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f103 0020 	add.w	r0, r3, #32
 80059c8:	1cba      	adds	r2, r7, #2
 80059ca:	78f9      	ldrb	r1, [r7, #3]
 80059cc:	2301      	movs	r3, #1
 80059ce:	f000 fad9 	bl	8005f84 <lsm303agr_write_reg>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80059d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059dc:	e000      	b.n	80059e0 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d103      	bne.n	8005a04 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80059fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	e04b      	b.n	8005a9c <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	7b1a      	ldrb	r2, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa8 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a19      	ldr	r2, [pc, #100]	@ (8005aac <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8005a46:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e01e      	b.n	8005a9c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4798      	blx	r3
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e014      	b.n	8005a9c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d010      	beq.n	8005a9c <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3320      	adds	r3, #32
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fcbe 	bl	800640c <lsm303agr_mag_i2c_interface_set>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8005a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a9a:	e000      	b.n	8005a9e <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08005e91 	.word	0x08005e91
 8005aac:	08005ef3 	.word	0x08005ef3

08005ab0 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3320      	adds	r3, #32
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fbea 	bl	8006298 <lsm303agr_mag_block_data_update_set>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ace:	e028      	b.n	8005b22 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3320      	adds	r3, #32
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fb92 	bl	8006200 <lsm303agr_mag_operating_mode_set>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ae6:	e01c      	b.n	8005b22 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3320      	adds	r3, #32
 8005aec:	2103      	movs	r1, #3
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fbac 	bl	800624c <lsm303agr_mag_data_rate_set>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005afe:	e010      	b.n	8005b22 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3320      	adds	r3, #32
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fc34 	bl	8006374 <lsm303agr_mag_self_test_set>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b16:	e004      	b.n	8005b22 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM303AGR_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e010      	b.n	8005b62 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3320      	adds	r3, #32
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fb5a 	bl	8006200 <lsm303agr_mag_operating_mode_set>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b56:	e004      	b.n	8005b62 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM303AGR_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005b7a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3320      	adds	r3, #32
 8005b98:	f107 0210 	add.w	r2, r7, #16
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fba0 	bl	80062e4 <lsm303agr_magnetic_raw_get>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bae:	e036      	b.n	8005c1e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005bb0:	f107 030c 	add.w	r3, r7, #12
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff ffd7 	bl	8005b6a <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005bbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bd4:	ee17 2a90 	vmov	r2, s15
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bf4:	ee17 2a90 	vmov	r2, s15
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005bfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c14:	ee17 2a90 	vmov	r2, s15
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3320      	adds	r3, #32
 8005c3a:	f107 020b 	add.w	r2, r7, #11
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fa37 	bl	80060b4 <lsm303agr_xl_full_scale_get>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c50:	e023      	b.n	8005c9a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d81b      	bhi.n	8005c90 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005c58:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c79 	.word	0x08005c79
 8005c68:	08005c81 	.word	0x08005c81
 8005c6c:	08005c89 	.word	0x08005c89
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca4 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005c74:	601a      	str	r2, [r3, #0]
      break;
 8005c76:	e00f      	b.n	8005c98 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005ca8 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005c7c:	601a      	str	r2, [r3, #0]
      break;
 8005c7e:	e00b      	b.n	8005c98 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	4a0a      	ldr	r2, [pc, #40]	@ (8005cac <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005c84:	601a      	str	r2, [r3, #0]
      break;
 8005c86:	e007      	b.n	8005c98 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4a09      	ldr	r2, [pc, #36]	@ (8005cb0 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005c8c:	601a      	str	r2, [r3, #0]
      break;
 8005c8e:	e003      	b.n	8005c98 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c94:	60fb      	str	r3, [r7, #12]
      break;
 8005c96:	bf00      	nop
  }

  return ret;
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	3f7ae148 	.word	0x3f7ae148
 8005ca8:	3ff9999a 	.word	0x3ff9999a
 8005cac:	4079999a 	.word	0x4079999a
 8005cb0:	413b851f 	.word	0x413b851f

08005cb4 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3320      	adds	r3, #32
 8005cc6:	f107 020b 	add.w	r2, r7, #11
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f9f1 	bl	80060b4 <lsm303agr_xl_full_scale_get>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cdc:	e023      	b.n	8005d26 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d81b      	bhi.n	8005d1c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cec <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005d05 	.word	0x08005d05
 8005cf4:	08005d0d 	.word	0x08005d0d
 8005cf8:	08005d15 	.word	0x08005d15
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005d30 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005d00:	601a      	str	r2, [r3, #0]
      break;
 8005d02:	e00f      	b.n	8005d24 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	4a0b      	ldr	r2, [pc, #44]	@ (8005d34 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005d08:	601a      	str	r2, [r3, #0]
      break;
 8005d0a:	e00b      	b.n	8005d24 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d38 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005d10:	601a      	str	r2, [r3, #0]
      break;
 8005d12:	e007      	b.n	8005d24 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	4a09      	ldr	r2, [pc, #36]	@ (8005d3c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005d18:	601a      	str	r2, [r3, #0]
      break;
 8005d1a:	e003      	b.n	8005d24 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d20:	60fb      	str	r3, [r7, #12]
      break;
 8005d22:	bf00      	nop
  }

  return ret;
 8005d24:	68fb      	ldr	r3, [r7, #12]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	4079999a 	.word	0x4079999a
 8005d34:	40fa3d71 	.word	0x40fa3d71
 8005d38:	417a147b 	.word	0x417a147b
 8005d3c:	423b999a 	.word	0x423b999a

08005d40 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3320      	adds	r3, #32
 8005d52:	f107 020b 	add.w	r2, r7, #11
 8005d56:	4611      	mov	r1, r2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f9ab 	bl	80060b4 <lsm303agr_xl_full_scale_get>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d68:	e023      	b.n	8005db2 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d81b      	bhi.n	8005da8 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005d70:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d91 	.word	0x08005d91
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005dbc <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005d8c:	601a      	str	r2, [r3, #0]
      break;
 8005d8e:	e00f      	b.n	8005db0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc0 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005d94:	601a      	str	r2, [r3, #0]
      break;
 8005d96:	e00b      	b.n	8005db0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc4 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005d9c:	601a      	str	r2, [r3, #0]
      break;
 8005d9e:	e007      	b.n	8005db0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4a09      	ldr	r2, [pc, #36]	@ (8005dc8 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005da4:	601a      	str	r2, [r3, #0]
      break;
 8005da6:	e003      	b.n	8005db0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dac:	60fb      	str	r3, [r7, #12]
      break;
 8005dae:	bf00      	nop
  }

  return ret;
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	417a147b 	.word	0x417a147b
 8005dc0:	41fa147b 	.word	0x41fa147b
 8005dc4:	427a147b 	.word	0x427a147b
 8005dc8:	433b947b 	.word	0x433b947b

08005dcc <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005dcc:	b590      	push	{r4, r7, lr}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	460b      	mov	r3, r1
 8005dda:	72fb      	strb	r3, [r7, #11]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10e      	bne.n	8005e0a <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	695c      	ldr	r4, [r3, #20]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	7b1b      	ldrb	r3, [r3, #12]
 8005df4:	4618      	mov	r0, r3
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	893b      	ldrh	r3, [r7, #8]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	47a0      	blx	r4
 8005e06:	4603      	mov	r3, r0
 8005e08:	e00d      	b.n	8005e26 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	695c      	ldr	r4, [r3, #20]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	7b1b      	ldrb	r3, [r3, #12]
 8005e12:	4618      	mov	r0, r3
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	893b      	ldrh	r3, [r7, #8]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	47a0      	blx	r4
 8005e24:	4603      	mov	r3, r0
  }
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd90      	pop	{r4, r7, pc}

08005e2e <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e2e:	b590      	push	{r4, r7, lr}
 8005e30:	b087      	sub	sp, #28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	72fb      	strb	r3, [r7, #11]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10e      	bne.n	8005e6c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	691c      	ldr	r4, [r3, #16]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	7b1b      	ldrb	r3, [r3, #12]
 8005e56:	4618      	mov	r0, r3
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	4619      	mov	r1, r3
 8005e62:	893b      	ldrh	r3, [r7, #8]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	47a0      	blx	r4
 8005e68:	4603      	mov	r3, r0
 8005e6a:	e00d      	b.n	8005e88 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	691c      	ldr	r4, [r3, #16]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	7b1b      	ldrb	r3, [r3, #12]
 8005e74:	4618      	mov	r0, r3
 8005e76:	7afb      	ldrb	r3, [r7, #11]
 8005e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4619      	mov	r1, r3
 8005e80:	893b      	ldrh	r3, [r7, #8]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	47a0      	blx	r4
 8005e86:	4603      	mov	r3, r0
  }
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd90      	pop	{r4, r7, pc}

08005e90 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	72fb      	strb	r3, [r7, #11]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	695c      	ldr	r4, [r3, #20]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	7b1b      	ldrb	r3, [r3, #12]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	893b      	ldrh	r3, [r7, #8]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	47a0      	blx	r4
 8005eca:	4603      	mov	r3, r0
 8005ecc:	e00d      	b.n	8005eea <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	695c      	ldr	r4, [r3, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	7b1b      	ldrb	r3, [r3, #12]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	893b      	ldrh	r3, [r7, #8]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	47a0      	blx	r4
 8005ee8:	4603      	mov	r3, r0
  }
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd90      	pop	{r4, r7, pc}

08005ef2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ef2:	b590      	push	{r4, r7, lr}
 8005ef4:	b087      	sub	sp, #28
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	461a      	mov	r2, r3
 8005efe:	460b      	mov	r3, r1
 8005f00:	72fb      	strb	r3, [r7, #11]
 8005f02:	4613      	mov	r3, r2
 8005f04:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10e      	bne.n	8005f30 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	691c      	ldr	r4, [r3, #16]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	7b1b      	ldrb	r3, [r3, #12]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	4619      	mov	r1, r3
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	47a0      	blx	r4
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	e00d      	b.n	8005f4c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	691c      	ldr	r4, [r3, #16]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	7b1b      	ldrb	r3, [r3, #12]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	7afb      	ldrb	r3, [r7, #11]
 8005f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	4619      	mov	r1, r3
 8005f44:	893b      	ldrh	r3, [r7, #8]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	47a0      	blx	r4
 8005f4a:	4603      	mov	r3, r0
  }
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}

08005f54 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	460b      	mov	r3, r1
 8005f62:	72fb      	strb	r3, [r7, #11]
 8005f64:	4613      	mov	r3, r2
 8005f66:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685c      	ldr	r4, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68d8      	ldr	r0, [r3, #12]
 8005f70:	893b      	ldrh	r3, [r7, #8]
 8005f72:	7af9      	ldrb	r1, [r7, #11]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	47a0      	blx	r4
 8005f78:	6178      	str	r0, [r7, #20]

  return ret;
 8005f7a:	697b      	ldr	r3, [r7, #20]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}

08005f84 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	72fb      	strb	r3, [r7, #11]
 8005f94:	4613      	mov	r3, r2
 8005f96:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681c      	ldr	r4, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68d8      	ldr	r0, [r3, #12]
 8005fa0:	893b      	ldrh	r3, [r7, #8]
 8005fa2:	7af9      	ldrb	r1, [r7, #11]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	47a0      	blx	r4
 8005fa8:	6178      	str	r0, [r7, #20]

  return ret;
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd90      	pop	{r4, r7, pc}

08005fb4 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005fbe:	f107 020c 	add.w	r2, r7, #12
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	2120      	movs	r1, #32
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ffc4 	bl	8005f54 <lsm303agr_read_reg>
 8005fcc:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d107      	bne.n	8005fe4 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005fd4:	f107 0210 	add.w	r2, r7, #16
 8005fd8:	2301      	movs	r3, #1
 8005fda:	2123      	movs	r1, #35	@ 0x23
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ffb9 	bl	8005f54 <lsm303agr_read_reg>
 8005fe2:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8005fe4:	7b3b      	ldrb	r3, [r7, #12]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e00c      	b.n	8006012 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8005ff8:	7c3b      	ldrb	r3, [r7, #16]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e002      	b.n	8006012 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006012:	697b      	ldr	r3, [r7, #20]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006028:	f107 0208 	add.w	r2, r7, #8
 800602c:	2301      	movs	r3, #1
 800602e:	2120      	movs	r1, #32
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff ff8f 	bl	8005f54 <lsm303agr_read_reg>
 8006036:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10f      	bne.n	800605e <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	b2da      	uxtb	r2, r3
 8006046:	7a3b      	ldrb	r3, [r7, #8]
 8006048:	f362 1307 	bfi	r3, r2, #4, #4
 800604c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800604e:	f107 0208 	add.w	r2, r7, #8
 8006052:	2301      	movs	r3, #1
 8006054:	2120      	movs	r1, #32
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff94 	bl	8005f84 <lsm303agr_write_reg>
 800605c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800605e:	68fb      	ldr	r3, [r7, #12]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006074:	f107 0208 	add.w	r2, r7, #8
 8006078:	2301      	movs	r3, #1
 800607a:	2123      	movs	r1, #35	@ 0x23
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff69 	bl	8005f54 <lsm303agr_read_reg>
 8006082:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10f      	bne.n	80060aa <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	b2da      	uxtb	r2, r3
 8006092:	7a3b      	ldrb	r3, [r7, #8]
 8006094:	f362 1305 	bfi	r3, r2, #4, #2
 8006098:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800609a:	f107 0208 	add.w	r2, r7, #8
 800609e:	2301      	movs	r3, #1
 80060a0:	2123      	movs	r1, #35	@ 0x23
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ff6e 	bl	8005f84 <lsm303agr_write_reg>
 80060a8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80060be:	f107 0208 	add.w	r2, r7, #8
 80060c2:	2301      	movs	r3, #1
 80060c4:	2123      	movs	r1, #35	@ 0x23
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff ff44 	bl	8005f54 <lsm303agr_read_reg>
 80060cc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 80060ce:	7a3b      	ldrb	r3, [r7, #8]
 80060d0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d81a      	bhi.n	8006110 <lsm303agr_xl_full_scale_get+0x5c>
 80060da:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <lsm303agr_xl_full_scale_get+0x2c>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060f9 	.word	0x080060f9
 80060e8:	08006101 	.word	0x08006101
 80060ec:	08006109 	.word	0x08006109
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
      break;
 80060f6:	e00f      	b.n	8006118 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
      break;
 80060fe:	e00b      	b.n	8006118 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2202      	movs	r2, #2
 8006104:	701a      	strb	r2, [r3, #0]
      break;
 8006106:	e007      	b.n	8006118 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2203      	movs	r2, #3
 800610c:	701a      	strb	r2, [r3, #0]
      break;
 800610e:	e003      	b.n	8006118 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
      break;
 8006116:	bf00      	nop
  }

  return ret;
 8006118:	68fb      	ldr	r3, [r7, #12]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop

08006124 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006130:	f107 0208 	add.w	r2, r7, #8
 8006134:	2301      	movs	r3, #1
 8006136:	2123      	movs	r1, #35	@ 0x23
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff0b 	bl	8005f54 <lsm303agr_read_reg>
 800613e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10f      	bne.n	8006166 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	b2da      	uxtb	r2, r3
 800614e:	7a3b      	ldrb	r3, [r7, #8]
 8006150:	f362 13c7 	bfi	r3, r2, #7, #1
 8006154:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006156:	f107 0208 	add.w	r2, r7, #8
 800615a:	2301      	movs	r3, #1
 800615c:	2123      	movs	r1, #35	@ 0x23
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff ff10 	bl	8005f84 <lsm303agr_write_reg>
 8006164:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800617a:	f107 020c 	add.w	r2, r7, #12
 800617e:	2306      	movs	r3, #6
 8006180:	2128      	movs	r1, #40	@ 0x28
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fee6 	bl	8005f54 <lsm303agr_read_reg>
 8006188:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	b21a      	sxth	r2, r3
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006198:	b29b      	uxth	r3, r3
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	b29b      	uxth	r3, r3
 800619e:	7b3a      	ldrb	r2, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	b21a      	sxth	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	3302      	adds	r3, #2
 80061b0:	b212      	sxth	r2, r2
 80061b2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	3302      	adds	r3, #2
 80061b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	7bba      	ldrb	r2, [r7, #14]
 80061c4:	4413      	add	r3, r2
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	3302      	adds	r3, #2
 80061cc:	b212      	sxth	r2, r2
 80061ce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80061d0:	7c7a      	ldrb	r2, [r7, #17]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	3304      	adds	r3, #4
 80061d6:	b212      	sxth	r2, r2
 80061d8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	3304      	adds	r3, #4
 80061de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	7c3a      	ldrb	r2, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	b212      	sxth	r2, r2
 80061f4:	801a      	strh	r2, [r3, #0]

  return ret;
 80061f6:	697b      	ldr	r3, [r7, #20]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800620c:	f107 0208 	add.w	r2, r7, #8
 8006210:	2301      	movs	r3, #1
 8006212:	2160      	movs	r1, #96	@ 0x60
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fe9d 	bl	8005f54 <lsm303agr_read_reg>
 800621a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10f      	bne.n	8006242 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	b2da      	uxtb	r2, r3
 800622a:	7a3b      	ldrb	r3, [r7, #8]
 800622c:	f362 0301 	bfi	r3, r2, #0, #2
 8006230:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006232:	f107 0208 	add.w	r2, r7, #8
 8006236:	2301      	movs	r3, #1
 8006238:	2160      	movs	r1, #96	@ 0x60
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff fea2 	bl	8005f84 <lsm303agr_write_reg>
 8006240:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8006242:	68fb      	ldr	r3, [r7, #12]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006258:	f107 0208 	add.w	r2, r7, #8
 800625c:	2301      	movs	r3, #1
 800625e:	2160      	movs	r1, #96	@ 0x60
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff fe77 	bl	8005f54 <lsm303agr_read_reg>
 8006266:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	b2da      	uxtb	r2, r3
 8006276:	7a3b      	ldrb	r3, [r7, #8]
 8006278:	f362 0383 	bfi	r3, r2, #2, #2
 800627c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800627e:	f107 0208 	add.w	r2, r7, #8
 8006282:	2301      	movs	r3, #1
 8006284:	2160      	movs	r1, #96	@ 0x60
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fe7c 	bl	8005f84 <lsm303agr_write_reg>
 800628c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800628e:	68fb      	ldr	r3, [r7, #12]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80062a4:	f107 0208 	add.w	r2, r7, #8
 80062a8:	2301      	movs	r3, #1
 80062aa:	2162      	movs	r1, #98	@ 0x62
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fe51 	bl	8005f54 <lsm303agr_read_reg>
 80062b2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10f      	bne.n	80062da <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	7a3b      	ldrb	r3, [r7, #8]
 80062c4:	f362 1304 	bfi	r3, r2, #4, #1
 80062c8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80062ca:	f107 0208 	add.w	r2, r7, #8
 80062ce:	2301      	movs	r3, #1
 80062d0:	2162      	movs	r1, #98	@ 0x62
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fe56 	bl	8005f84 <lsm303agr_write_reg>
 80062d8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80062da:	68fb      	ldr	r3, [r7, #12]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80062ee:	f107 020c 	add.w	r2, r7, #12
 80062f2:	2306      	movs	r3, #6
 80062f4:	2168      	movs	r1, #104	@ 0x68
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fe2c 	bl	8005f54 <lsm303agr_read_reg>
 80062fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80062fe:	7b7b      	ldrb	r3, [r7, #13]
 8006300:	b21a      	sxth	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800630c:	b29b      	uxth	r3, r3
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	b29b      	uxth	r3, r3
 8006312:	7b3a      	ldrb	r2, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	b29b      	uxth	r3, r3
 8006318:	b21a      	sxth	r2, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800631e:	7bfa      	ldrb	r2, [r7, #15]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	3302      	adds	r3, #2
 8006324:	b212      	sxth	r2, r2
 8006326:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	3302      	adds	r3, #2
 800632c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006330:	b29b      	uxth	r3, r3
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	b29b      	uxth	r3, r3
 8006336:	7bba      	ldrb	r2, [r7, #14]
 8006338:	4413      	add	r3, r2
 800633a:	b29a      	uxth	r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	3302      	adds	r3, #2
 8006340:	b212      	sxth	r2, r2
 8006342:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006344:	7c7a      	ldrb	r2, [r7, #17]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	3304      	adds	r3, #4
 800634a:	b212      	sxth	r2, r2
 800634c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	3304      	adds	r3, #4
 8006352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006356:	b29b      	uxth	r3, r3
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	b29b      	uxth	r3, r3
 800635c:	7c3a      	ldrb	r2, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	b29a      	uxth	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	3304      	adds	r3, #4
 8006366:	b212      	sxth	r2, r2
 8006368:	801a      	strh	r2, [r3, #0]

  return ret;
 800636a:	697b      	ldr	r3, [r7, #20]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006380:	f107 0208 	add.w	r2, r7, #8
 8006384:	2301      	movs	r3, #1
 8006386:	2162      	movs	r1, #98	@ 0x62
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff fde3 	bl	8005f54 <lsm303agr_read_reg>
 800638e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10f      	bne.n	80063b6 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	b2da      	uxtb	r2, r3
 800639e:	7a3b      	ldrb	r3, [r7, #8]
 80063a0:	f362 0341 	bfi	r3, r2, #1, #1
 80063a4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80063a6:	f107 0208 	add.w	r2, r7, #8
 80063aa:	2301      	movs	r3, #1
 80063ac:	2162      	movs	r1, #98	@ 0x62
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fde8 	bl	8005f84 <lsm303agr_write_reg>
 80063b4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80063b6:	68fb      	ldr	r3, [r7, #12]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80063cc:	f107 0208 	add.w	r2, r7, #8
 80063d0:	2301      	movs	r3, #1
 80063d2:	212e      	movs	r1, #46	@ 0x2e
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fdbd 	bl	8005f54 <lsm303agr_read_reg>
 80063da:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10f      	bne.n	8006402 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	7a3b      	ldrb	r3, [r7, #8]
 80063ec:	f362 1387 	bfi	r3, r2, #6, #2
 80063f0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80063f2:	f107 0208 	add.w	r2, r7, #8
 80063f6:	2301      	movs	r3, #1
 80063f8:	212e      	movs	r1, #46	@ 0x2e
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff fdc2 	bl	8005f84 <lsm303agr_write_reg>
 8006400:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8006402:	68fb      	ldr	r3, [r7, #12]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006418:	f107 0208 	add.w	r2, r7, #8
 800641c:	2301      	movs	r3, #1
 800641e:	2162      	movs	r1, #98	@ 0x62
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fd97 	bl	8005f54 <lsm303agr_read_reg>
 8006426:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	7a3b      	ldrb	r3, [r7, #8]
 8006438:	f362 1345 	bfi	r3, r2, #5, #1
 800643c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800643e:	f107 0208 	add.w	r2, r7, #8
 8006442:	2301      	movs	r3, #1
 8006444:	2162      	movs	r1, #98	@ 0x62
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fd9c 	bl	8005f84 <lsm303agr_write_reg>
 800644c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800644e:	68fb      	ldr	r3, [r7, #12]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800646c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e051      	b.n	8006518 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	7b1a      	ldrb	r2, [r3, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695a      	ldr	r2, [r3, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <LSM6DSL_RegisterBusIO+0xcc>)
 80064b0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006528 <LSM6DSL_RegisterBusIO+0xd0>)
 80064b6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e020      	b.n	8006518 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4798      	blx	r3
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e016      	b.n	8006518 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d112      	bne.n	8006518 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10d      	bne.n	8006518 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80064fc:	230c      	movs	r3, #12
 80064fe:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8006500:	7afb      	ldrb	r3, [r7, #11]
 8006502:	461a      	mov	r2, r3
 8006504:	2112      	movs	r1, #18
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f968 	bl	80067dc <LSM6DSL_Write_Reg>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006516:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006518:	68fb      	ldr	r3, [r7, #12]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	08006813 	.word	0x08006813
 8006528:	08006849 	.word	0x08006849

0800652c <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3320      	adds	r3, #32
 8006538:	2101      	movs	r1, #1
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fb18 	bl	8006b70 <lsm6dsl_auto_increment_set>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8006546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800654a:	e054      	b.n	80065f6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3320      	adds	r3, #32
 8006550:	2101      	movs	r1, #1
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fa9e 	bl	8006a94 <lsm6dsl_block_data_update_set>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800655e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006562:	e048      	b.n	80065f6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3320      	adds	r3, #32
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fb26 	bl	8006bbc <lsm6dsl_fifo_mode_set>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800657a:	e03c      	b.n	80065f6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2204      	movs	r2, #4
 8006580:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3320      	adds	r3, #32
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f9cd 	bl	800692a <lsm6dsl_xl_data_rate_set>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8006596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800659a:	e02c      	b.n	80065f6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3320      	adds	r3, #32
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f99b 	bl	80068de <lsm6dsl_xl_full_scale_set>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065b2:	e020      	b.n	80065f6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2204      	movs	r2, #4
 80065b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3320      	adds	r3, #32
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fa40 	bl	8006a48 <lsm6dsl_gy_data_rate_set>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065d2:	e010      	b.n	80065f6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3320      	adds	r3, #32
 80065d8:	2106      	movs	r1, #6
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f9cb 	bl	8006976 <lsm6dsl_gy_full_scale_set>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065ea:	e004      	b.n	80065f6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e014      	b.n	800663e <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f103 0220 	add.w	r2, r3, #32
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f000 f981 	bl	800692a <lsm6dsl_xl_data_rate_set>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006632:	e004      	b.n	800663e <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e014      	b.n	8006686 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f103 0220 	add.w	r2, r3, #32
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f000 f9ec 	bl	8006a48 <lsm6dsl_gy_data_rate_set>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800667a:	e004      	b.n	8006686 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3320      	adds	r3, #32
 80066a2:	f107 020b 	add.w	r2, r7, #11
 80066a6:	4611      	mov	r1, r2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 f98b 	bl	80069c4 <lsm6dsl_gy_full_scale_get>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066b8:	e02d      	b.n	8006716 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	2b06      	cmp	r3, #6
 80066be:	d825      	bhi.n	800670c <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80066c0:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066e5 	.word	0x080066e5
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	0800670d 	.word	0x0800670d
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	0800670d 	.word	0x0800670d
 80066e0:	08006705 	.word	0x08006705
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006720 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80066e8:	601a      	str	r2, [r3, #0]
      break;
 80066ea:	e013      	b.n	8006714 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006724 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80066f0:	601a      	str	r2, [r3, #0]
      break;
 80066f2:	e00f      	b.n	8006714 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006728 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80066f8:	601a      	str	r2, [r3, #0]
      break;
 80066fa:	e00b      	b.n	8006714 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	4a0b      	ldr	r2, [pc, #44]	@ (800672c <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8006700:	601a      	str	r2, [r3, #0]
      break;
 8006702:	e007      	b.n	8006714 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4a0a      	ldr	r2, [pc, #40]	@ (8006730 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8006708:	601a      	str	r2, [r3, #0]
      break;
 800670a:	e003      	b.n	8006714 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 800670c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006710:	60fb      	str	r3, [r7, #12]
      break;
 8006712:	bf00      	nop
  }

  return ret;
 8006714:	68fb      	ldr	r3, [r7, #12]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	408c0000 	.word	0x408c0000
 8006724:	410c0000 	.word	0x410c0000
 8006728:	418c0000 	.word	0x418c0000
 800672c:	420c0000 	.word	0x420c0000
 8006730:	428c0000 	.word	0x428c0000

08006734 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3320      	adds	r3, #32
 8006742:	f107 0210 	add.w	r2, r7, #16
 8006746:	4611      	mov	r1, r2
 8006748:	4618      	mov	r0, r3
 800674a:	f000 f9c9 	bl	8006ae0 <lsm6dsl_angular_rate_raw_get>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8006754:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006758:	e03c      	b.n	80067d4 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff95 	bl	8006690 <LSM6DSL_GYRO_GetSensitivity>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800676c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006770:	e030      	b.n	80067d4 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006772:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800677e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800678a:	ee17 2a90 	vmov	r2, s15
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006792:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800679e:	edd7 7a03 	vldr	s15, [r7, #12]
 80067a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067aa:	ee17 2a90 	vmov	r2, s15
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80067b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067be:	edd7 7a03 	vldr	s15, [r7, #12]
 80067c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067ca:	ee17 2a90 	vmov	r2, s15
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
 80067e8:	4613      	mov	r3, r2
 80067ea:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f103 0020 	add.w	r0, r3, #32
 80067f2:	1cba      	adds	r2, r7, #2
 80067f4:	78f9      	ldrb	r1, [r7, #3]
 80067f6:	2301      	movs	r3, #1
 80067f8:	f000 f859 	bl	80068ae <lsm6dsl_write_reg>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8006802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006806:	e000      	b.n	800680a <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006812:	b590      	push	{r4, r7, lr}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	461a      	mov	r2, r3
 800681e:	460b      	mov	r3, r1
 8006820:	72fb      	strb	r3, [r7, #11]
 8006822:	4613      	mov	r3, r2
 8006824:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	695c      	ldr	r4, [r3, #20]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	7b1b      	ldrb	r3, [r3, #12]
 8006832:	4618      	mov	r0, r3
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	b299      	uxth	r1, r3
 8006838:	893b      	ldrh	r3, [r7, #8]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	47a0      	blx	r4
 800683e:	4603      	mov	r3, r0
}
 8006840:	4618      	mov	r0, r3
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd90      	pop	{r4, r7, pc}

08006848 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	461a      	mov	r2, r3
 8006854:	460b      	mov	r3, r1
 8006856:	72fb      	strb	r3, [r7, #11]
 8006858:	4613      	mov	r3, r2
 800685a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	691c      	ldr	r4, [r3, #16]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	7b1b      	ldrb	r3, [r3, #12]
 8006868:	4618      	mov	r0, r3
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	b299      	uxth	r1, r3
 800686e:	893b      	ldrh	r3, [r7, #8]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	47a0      	blx	r4
 8006874:	4603      	mov	r3, r0
}
 8006876:	4618      	mov	r0, r3
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}

0800687e <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800687e:	b590      	push	{r4, r7, lr}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	461a      	mov	r2, r3
 800688a:	460b      	mov	r3, r1
 800688c:	72fb      	strb	r3, [r7, #11]
 800688e:	4613      	mov	r3, r2
 8006890:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685c      	ldr	r4, [r3, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	68d8      	ldr	r0, [r3, #12]
 800689a:	893b      	ldrh	r3, [r7, #8]
 800689c:	7af9      	ldrb	r1, [r7, #11]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	47a0      	blx	r4
 80068a2:	6178      	str	r0, [r7, #20]

  return ret;
 80068a4:	697b      	ldr	r3, [r7, #20]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd90      	pop	{r4, r7, pc}

080068ae <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80068ae:	b590      	push	{r4, r7, lr}
 80068b0:	b087      	sub	sp, #28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	461a      	mov	r2, r3
 80068ba:	460b      	mov	r3, r1
 80068bc:	72fb      	strb	r3, [r7, #11]
 80068be:	4613      	mov	r3, r2
 80068c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681c      	ldr	r4, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68d8      	ldr	r0, [r3, #12]
 80068ca:	893b      	ldrh	r3, [r7, #8]
 80068cc:	7af9      	ldrb	r1, [r7, #11]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	47a0      	blx	r4
 80068d2:	6178      	str	r0, [r7, #20]

  return ret;
 80068d4:	697b      	ldr	r3, [r7, #20]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd90      	pop	{r4, r7, pc}

080068de <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80068ea:	f107 0208 	add.w	r2, r7, #8
 80068ee:	2301      	movs	r3, #1
 80068f0:	2110      	movs	r1, #16
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff ffc3 	bl	800687e <lsm6dsl_read_reg>
 80068f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10f      	bne.n	8006920 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	b2da      	uxtb	r2, r3
 8006908:	7a3b      	ldrb	r3, [r7, #8]
 800690a:	f362 0383 	bfi	r3, r2, #2, #2
 800690e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006910:	f107 0208 	add.w	r2, r7, #8
 8006914:	2301      	movs	r3, #1
 8006916:	2110      	movs	r1, #16
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ffc8 	bl	80068ae <lsm6dsl_write_reg>
 800691e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006936:	f107 0208 	add.w	r2, r7, #8
 800693a:	2301      	movs	r3, #1
 800693c:	2110      	movs	r1, #16
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ff9d 	bl	800687e <lsm6dsl_read_reg>
 8006944:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10f      	bne.n	800696c <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	b2da      	uxtb	r2, r3
 8006954:	7a3b      	ldrb	r3, [r7, #8]
 8006956:	f362 1307 	bfi	r3, r2, #4, #4
 800695a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800695c:	f107 0208 	add.w	r2, r7, #8
 8006960:	2301      	movs	r3, #1
 8006962:	2110      	movs	r1, #16
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff ffa2 	bl	80068ae <lsm6dsl_write_reg>
 800696a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006982:	f107 0208 	add.w	r2, r7, #8
 8006986:	2301      	movs	r3, #1
 8006988:	2111      	movs	r1, #17
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff ff77 	bl	800687e <lsm6dsl_read_reg>
 8006990:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10f      	bne.n	80069b8 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	7a3b      	ldrb	r3, [r7, #8]
 80069a2:	f362 0343 	bfi	r3, r2, #1, #3
 80069a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80069a8:	f107 0208 	add.w	r2, r7, #8
 80069ac:	2301      	movs	r3, #1
 80069ae:	2111      	movs	r1, #17
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ff7c 	bl	80068ae <lsm6dsl_write_reg>
 80069b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80069ce:	f107 0208 	add.w	r2, r7, #8
 80069d2:	2301      	movs	r3, #1
 80069d4:	2111      	movs	r1, #17
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff ff51 	bl	800687e <lsm6dsl_read_reg>
 80069dc:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 80069de:	7a3b      	ldrb	r3, [r7, #8]
 80069e0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b06      	cmp	r3, #6
 80069e8:	d824      	bhi.n	8006a34 <lsm6dsl_gy_full_scale_get+0x70>
 80069ea:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <lsm6dsl_gy_full_scale_get+0x2c>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a0d 	.word	0x08006a0d
 80069f4:	08006a15 	.word	0x08006a15
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a35 	.word	0x08006a35
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006a2d 	.word	0x08006a2d
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
      break;
 8006a12:	e013      	b.n	8006a3c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2201      	movs	r2, #1
 8006a18:	701a      	strb	r2, [r3, #0]
      break;
 8006a1a:	e00f      	b.n	8006a3c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	701a      	strb	r2, [r3, #0]
      break;
 8006a22:	e00b      	b.n	8006a3c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2204      	movs	r2, #4
 8006a28:	701a      	strb	r2, [r3, #0]
      break;
 8006a2a:	e007      	b.n	8006a3c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2206      	movs	r2, #6
 8006a30:	701a      	strb	r2, [r3, #0]
      break;
 8006a32:	e003      	b.n	8006a3c <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2207      	movs	r2, #7
 8006a38:	701a      	strb	r2, [r3, #0]
      break;
 8006a3a:	bf00      	nop
  }

  return ret;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop

08006a48 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006a54:	f107 0208 	add.w	r2, r7, #8
 8006a58:	2301      	movs	r3, #1
 8006a5a:	2111      	movs	r1, #17
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ff0e 	bl	800687e <lsm6dsl_read_reg>
 8006a62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10f      	bne.n	8006a8a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	7a3b      	ldrb	r3, [r7, #8]
 8006a74:	f362 1307 	bfi	r3, r2, #4, #4
 8006a78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006a7a:	f107 0208 	add.w	r2, r7, #8
 8006a7e:	2301      	movs	r3, #1
 8006a80:	2111      	movs	r1, #17
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff ff13 	bl	80068ae <lsm6dsl_write_reg>
 8006a88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006aa0:	f107 0208 	add.w	r2, r7, #8
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	2112      	movs	r1, #18
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fee8 	bl	800687e <lsm6dsl_read_reg>
 8006aae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	7a3b      	ldrb	r3, [r7, #8]
 8006ac0:	f362 1386 	bfi	r3, r2, #6, #1
 8006ac4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006ac6:	f107 0208 	add.w	r2, r7, #8
 8006aca:	2301      	movs	r3, #1
 8006acc:	2112      	movs	r1, #18
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff feed 	bl	80068ae <lsm6dsl_write_reg>
 8006ad4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8006aea:	f107 020c 	add.w	r2, r7, #12
 8006aee:	2306      	movs	r3, #6
 8006af0:	2122      	movs	r1, #34	@ 0x22
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fec3 	bl	800687e <lsm6dsl_read_reg>
 8006af8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006afa:	7b7b      	ldrb	r3, [r7, #13]
 8006afc:	b21a      	sxth	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	7b3a      	ldrb	r2, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b21a      	sxth	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006b1a:	7bfa      	ldrb	r2, [r7, #15]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	3302      	adds	r3, #2
 8006b20:	b212      	sxth	r2, r2
 8006b22:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	3302      	adds	r3, #2
 8006b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	7bba      	ldrb	r2, [r7, #14]
 8006b34:	4413      	add	r3, r2
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	3302      	adds	r3, #2
 8006b3c:	b212      	sxth	r2, r2
 8006b3e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006b40:	7c7a      	ldrb	r2, [r7, #17]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	3304      	adds	r3, #4
 8006b46:	b212      	sxth	r2, r2
 8006b48:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	7c3a      	ldrb	r2, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	3304      	adds	r3, #4
 8006b62:	b212      	sxth	r2, r2
 8006b64:	801a      	strh	r2, [r3, #0]

  return ret;
 8006b66:	697b      	ldr	r3, [r7, #20]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006b7c:	f107 0208 	add.w	r2, r7, #8
 8006b80:	2301      	movs	r3, #1
 8006b82:	2112      	movs	r1, #18
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fe7a 	bl	800687e <lsm6dsl_read_reg>
 8006b8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10f      	bne.n	8006bb2 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	7a3b      	ldrb	r3, [r7, #8]
 8006b9c:	f362 0382 	bfi	r3, r2, #2, #1
 8006ba0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006ba2:	f107 0208 	add.w	r2, r7, #8
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	2112      	movs	r1, #18
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff fe7f 	bl	80068ae <lsm6dsl_write_reg>
 8006bb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006bc8:	f107 0208 	add.w	r2, r7, #8
 8006bcc:	2301      	movs	r3, #1
 8006bce:	210a      	movs	r1, #10
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fe54 	bl	800687e <lsm6dsl_read_reg>
 8006bd6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10f      	bne.n	8006bfe <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	7a3b      	ldrb	r3, [r7, #8]
 8006be8:	f362 0302 	bfi	r3, r2, #0, #3
 8006bec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006bee:	f107 0208 	add.w	r2, r7, #8
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	210a      	movs	r1, #10
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fe59 	bl	80068ae <lsm6dsl_write_reg>
 8006bfc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c12:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <HAL_Init+0x3c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a0b      	ldr	r2, [pc, #44]	@ (8006c44 <HAL_Init+0x3c>)
 8006c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c1e:	2003      	movs	r0, #3
 8006c20:	f001 faca 	bl	80081b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c24:	200f      	movs	r0, #15
 8006c26:	f000 f80f 	bl	8006c48 <HAL_InitTick>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	71fb      	strb	r3, [r7, #7]
 8006c34:	e001      	b.n	8006c3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006c36:	f7fc fcdf 	bl	80035f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40022000 	.word	0x40022000

08006c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006c54:	4b17      	ldr	r3, [pc, #92]	@ (8006cb4 <HAL_InitTick+0x6c>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d023      	beq.n	8006ca4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006c5c:	4b16      	ldr	r3, [pc, #88]	@ (8006cb8 <HAL_InitTick+0x70>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <HAL_InitTick+0x6c>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 fad5 	bl	8008222 <HAL_SYSTICK_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10f      	bne.n	8006c9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b0f      	cmp	r3, #15
 8006c82:	d809      	bhi.n	8006c98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c84:	2200      	movs	r2, #0
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c8c:	f001 fa9f 	bl	80081ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c90:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <HAL_InitTick+0x74>)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	e007      	b.n	8006ca8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	e004      	b.n	8006ca8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	73fb      	strb	r3, [r7, #15]
 8006ca2:	e001      	b.n	8006ca8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000008 	.word	0x20000008
 8006cb8:	20000000 	.word	0x20000000
 8006cbc:	20000004 	.word	0x20000004

08006cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006cc4:	4b06      	ldr	r3, [pc, #24]	@ (8006ce0 <HAL_IncTick+0x20>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <HAL_IncTick+0x24>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4413      	add	r3, r2
 8006cd0:	4a04      	ldr	r2, [pc, #16]	@ (8006ce4 <HAL_IncTick+0x24>)
 8006cd2:	6013      	str	r3, [r2, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000008 	.word	0x20000008
 8006ce4:	200013d8 	.word	0x200013d8

08006ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  return uwTick;
 8006cec:	4b03      	ldr	r3, [pc, #12]	@ (8006cfc <HAL_GetTick+0x14>)
 8006cee:	681b      	ldr	r3, [r3, #0]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	200013d8 	.word	0x200013d8

08006d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d08:	f7ff ffee 	bl	8006ce8 <HAL_GetTick>
 8006d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d18:	d005      	beq.n	8006d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d44 <HAL_Delay+0x44>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d26:	bf00      	nop
 8006d28:	f7ff ffde 	bl	8006ce8 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d8f7      	bhi.n	8006d28 <HAL_Delay+0x28>
  {
  }
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000008 	.word	0x20000008

08006d48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	609a      	str	r2, [r3, #8]
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	609a      	str	r2, [r3, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3360      	adds	r3, #96	@ 0x60
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b08      	ldr	r3, [pc, #32]	@ (8006df4 <LL_ADC_SetOffset+0x44>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	03fff000 	.word	0x03fff000

08006df8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3360      	adds	r3, #96	@ 0x60
 8006e06:	461a      	mov	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3360      	adds	r3, #96	@ 0x60
 8006e34:	461a      	mov	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b087      	sub	sp, #28
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3330      	adds	r3, #48	@ 0x30
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	f003 030c 	and.w	r3, r3, #12
 8006e76:	4413      	add	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	211f      	movs	r1, #31
 8006e86:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	401a      	ands	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0e9b      	lsrs	r3, r3, #26
 8006e92:	f003 011f 	and.w	r1, r3, #31
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b087      	sub	sp, #28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	0e5b      	lsrs	r3, r3, #25
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	4413      	add	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	0d1b      	lsrs	r3, r3, #20
 8006eda:	f003 031f 	and.w	r3, r3, #31
 8006ede:	2107      	movs	r1, #7
 8006ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	0d1b      	lsrs	r3, r3, #20
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006efc:	bf00      	nop
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f20:	43db      	mvns	r3, r3
 8006f22:	401a      	ands	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f003 0318 	and.w	r3, r3, #24
 8006f2a:	4908      	ldr	r1, [pc, #32]	@ (8006f4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8006f2c:	40d9      	lsrs	r1, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	400b      	ands	r3, r1
 8006f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f36:	431a      	orrs	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	0007ffff 	.word	0x0007ffff

08006f50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6093      	str	r3, [r2, #8]
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f88:	d101      	bne.n	8006f8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006fac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006fb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fd8:	d101      	bne.n	8006fde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <LL_ADC_IsEnabled+0x18>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <LL_ADC_IsEnabled+0x1a>
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b04      	cmp	r3, #4
 8007024:	d101      	bne.n	800702a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b08      	cmp	r3, #8
 800704a:	d101      	bne.n	8007050 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b089      	sub	sp, #36	@ 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800706c:	2300      	movs	r3, #0
 800706e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e136      	b.n	80072e8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fc fadd 	bl	8003648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff ff67 	bl	8006f74 <LL_ADC_IsDeepPowerDownEnabled>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff ff4d 	bl	8006f50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff ff82 	bl	8006fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d115      	bne.n	80070f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff ff66 	bl	8006f9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070d0:	4b87      	ldr	r3, [pc, #540]	@ (80072f0 <HAL_ADC_Init+0x290>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	099b      	lsrs	r3, r3, #6
 80070d6:	4a87      	ldr	r2, [pc, #540]	@ (80072f4 <HAL_ADC_Init+0x294>)
 80070d8:	fba2 2303 	umull	r2, r3, r2, r3
 80070dc:	099b      	lsrs	r3, r3, #6
 80070de:	3301      	adds	r3, #1
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80070e4:	e002      	b.n	80070ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1f9      	bne.n	80070e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff ff64 	bl	8006fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007106:	f043 0210 	orr.w	r2, r3, #16
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007112:	f043 0201 	orr.w	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff ff75 	bl	8007012 <LL_ADC_REG_IsConversionOngoing>
 8007128:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	f040 80cf 	bne.w	80072d6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 80cb 	bne.w	80072d6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007144:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007148:	f043 0202 	orr.w	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff ff49 	bl	8006fec <LL_ADC_IsEnabled>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d115      	bne.n	800718c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007160:	4865      	ldr	r0, [pc, #404]	@ (80072f8 <HAL_ADC_Init+0x298>)
 8007162:	f7ff ff43 	bl	8006fec <LL_ADC_IsEnabled>
 8007166:	4604      	mov	r4, r0
 8007168:	4864      	ldr	r0, [pc, #400]	@ (80072fc <HAL_ADC_Init+0x29c>)
 800716a:	f7ff ff3f 	bl	8006fec <LL_ADC_IsEnabled>
 800716e:	4603      	mov	r3, r0
 8007170:	431c      	orrs	r4, r3
 8007172:	4863      	ldr	r0, [pc, #396]	@ (8007300 <HAL_ADC_Init+0x2a0>)
 8007174:	f7ff ff3a 	bl	8006fec <LL_ADC_IsEnabled>
 8007178:	4603      	mov	r3, r0
 800717a:	4323      	orrs	r3, r4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d105      	bne.n	800718c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4619      	mov	r1, r3
 8007186:	485f      	ldr	r0, [pc, #380]	@ (8007304 <HAL_ADC_Init+0x2a4>)
 8007188:	f7ff fdde 	bl	8006d48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7e5b      	ldrb	r3, [r3, #25]
 8007190:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007196:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800719c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80071a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80071ac:	4313      	orrs	r3, r2
 80071ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d106      	bne.n	80071c8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071be:	3b01      	subs	r3, #1
 80071c0:	045b      	lsls	r3, r3, #17
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	4b47      	ldr	r3, [pc, #284]	@ (8007308 <HAL_ADC_Init+0x2a8>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	69b9      	ldr	r1, [r7, #24]
 80071f4:	430b      	orrs	r3, r1
 80071f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff08 	bl	8007012 <LL_ADC_REG_IsConversionOngoing>
 8007202:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff ff15 	bl	8007038 <LL_ADC_INJ_IsConversionOngoing>
 800720e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d13d      	bne.n	8007292 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d13a      	bne.n	8007292 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007220:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007228:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800722a:	4313      	orrs	r3, r2
 800722c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007238:	f023 0302 	bic.w	r3, r3, #2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	69b9      	ldr	r1, [r7, #24]
 8007242:	430b      	orrs	r3, r1
 8007244:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800724c:	2b01      	cmp	r3, #1
 800724e:	d118      	bne.n	8007282 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800725a:	f023 0304 	bic.w	r3, r3, #4
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007266:	4311      	orrs	r1, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800726c:	4311      	orrs	r1, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007272:	430a      	orrs	r2, r1
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	611a      	str	r2, [r3, #16]
 8007280:	e007      	b.n	8007292 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10c      	bne.n	80072b4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a0:	f023 010f 	bic.w	r1, r3, #15
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80072b2:	e007      	b.n	80072c4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 020f 	bic.w	r2, r2, #15
 80072c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c8:	f023 0303 	bic.w	r3, r3, #3
 80072cc:	f043 0201 	orr.w	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80072d4:	e007      	b.n	80072e6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072da:	f043 0210 	orr.w	r2, r3, #16
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80072e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3724      	adds	r7, #36	@ 0x24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd90      	pop	{r4, r7, pc}
 80072f0:	20000000 	.word	0x20000000
 80072f4:	053e2d63 	.word	0x053e2d63
 80072f8:	50040000 	.word	0x50040000
 80072fc:	50040100 	.word	0x50040100
 8007300:	50040200 	.word	0x50040200
 8007304:	50040300 	.word	0x50040300
 8007308:	fff0c007 	.word	0xfff0c007

0800730c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b0b6      	sub	sp, #216	@ 0xd8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_ADC_ConfigChannel+0x22>
 800732a:	2302      	movs	r3, #2
 800732c:	e3c7      	b.n	8007abe <HAL_ADC_ConfigChannel+0x7b2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fe69 	bl	8007012 <LL_ADC_REG_IsConversionOngoing>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	f040 83a8 	bne.w	8007a98 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b05      	cmp	r3, #5
 800734e:	d824      	bhi.n	800739a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	3b02      	subs	r3, #2
 8007356:	2b03      	cmp	r3, #3
 8007358:	d81b      	bhi.n	8007392 <HAL_ADC_ConfigChannel+0x86>
 800735a:	a201      	add	r2, pc, #4	@ (adr r2, 8007360 <HAL_ADC_ConfigChannel+0x54>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007371 	.word	0x08007371
 8007364:	08007379 	.word	0x08007379
 8007368:	08007381 	.word	0x08007381
 800736c:	08007389 	.word	0x08007389
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	220c      	movs	r2, #12
 8007374:	605a      	str	r2, [r3, #4]
          break;
 8007376:	e010      	b.n	800739a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2212      	movs	r2, #18
 800737c:	605a      	str	r2, [r3, #4]
          break;
 800737e:	e00c      	b.n	800739a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2218      	movs	r2, #24
 8007384:	605a      	str	r2, [r3, #4]
          break;
 8007386:	e008      	b.n	800739a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800738e:	605a      	str	r2, [r3, #4]
          break;
 8007390:	e003      	b.n	800739a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2206      	movs	r2, #6
 8007396:	605a      	str	r2, [r3, #4]
          break;
 8007398:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f7ff fd57 	bl	8006e5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fe2e 	bl	8007012 <LL_ADC_REG_IsConversionOngoing>
 80073b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fe3a 	bl	8007038 <LL_ADC_INJ_IsConversionOngoing>
 80073c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80073c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 81a6 	bne.w	800771e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80073d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 81a1 	bne.w	800771e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	461a      	mov	r2, r3
 80073ea:	f7ff fd62 	bl	8006eb2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	08db      	lsrs	r3, r3, #3
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b04      	cmp	r3, #4
 800740e:	d00a      	beq.n	8007426 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	6919      	ldr	r1, [r3, #16]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007420:	f7ff fcc6 	bl	8006db0 <LL_ADC_SetOffset>
 8007424:	e17b      	b.n	800771e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fce3 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 8007432:	4603      	mov	r3, r0
 8007434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <HAL_ADC_ConfigChannel+0x146>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff fcd8 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 8007448:	4603      	mov	r3, r0
 800744a:	0e9b      	lsrs	r3, r3, #26
 800744c:	f003 021f 	and.w	r2, r3, #31
 8007450:	e01e      	b.n	8007490 <HAL_ADC_ConfigChannel+0x184>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff fccd 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 800745e:	4603      	mov	r3, r0
 8007460:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007464:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007468:	fa93 f3a3 	rbit	r3, r3
 800746c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8007480:	2320      	movs	r3, #32
 8007482:	e004      	b.n	800748e <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8007484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007488:	fab3 f383 	clz	r3, r3
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007498:	2b00      	cmp	r3, #0
 800749a:	d105      	bne.n	80074a8 <HAL_ADC_ConfigChannel+0x19c>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	0e9b      	lsrs	r3, r3, #26
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	e018      	b.n	80074da <HAL_ADC_ConfigChannel+0x1ce>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80074b4:	fa93 f3a3 	rbit	r3, r3
 80074b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80074bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80074c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80074cc:	2320      	movs	r3, #32
 80074ce:	e004      	b.n	80074da <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80074d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074d4:	fab3 f383 	clz	r3, r3
 80074d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80074da:	429a      	cmp	r2, r3
 80074dc:	d106      	bne.n	80074ec <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fc9c 	bl	8006e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2101      	movs	r1, #1
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fc80 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <HAL_ADC_ConfigChannel+0x20c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2101      	movs	r1, #1
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fc75 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 800750e:	4603      	mov	r3, r0
 8007510:	0e9b      	lsrs	r3, r3, #26
 8007512:	f003 021f 	and.w	r2, r3, #31
 8007516:	e01e      	b.n	8007556 <HAL_ADC_ConfigChannel+0x24a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2101      	movs	r1, #1
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff fc6a 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 8007524:	4603      	mov	r3, r0
 8007526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800752a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800752e:	fa93 f3a3 	rbit	r3, r3
 8007532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800753a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800753e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8007546:	2320      	movs	r3, #32
 8007548:	e004      	b.n	8007554 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800754a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800754e:	fab3 f383 	clz	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <HAL_ADC_ConfigChannel+0x262>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	0e9b      	lsrs	r3, r3, #26
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	e018      	b.n	80075a0 <HAL_ADC_ConfigChannel+0x294>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007576:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800757a:	fa93 f3a3 	rbit	r3, r3
 800757e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007582:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800758a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8007592:	2320      	movs	r3, #32
 8007594:	e004      	b.n	80075a0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8007596:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800759a:	fab3 f383 	clz	r3, r3
 800759e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d106      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2200      	movs	r2, #0
 80075aa:	2101      	movs	r1, #1
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fc39 	bl	8006e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2102      	movs	r1, #2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fc1d 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 80075be:	4603      	mov	r3, r0
 80075c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <HAL_ADC_ConfigChannel+0x2d2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2102      	movs	r1, #2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff fc12 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 80075d4:	4603      	mov	r3, r0
 80075d6:	0e9b      	lsrs	r3, r3, #26
 80075d8:	f003 021f 	and.w	r2, r3, #31
 80075dc:	e01e      	b.n	800761c <HAL_ADC_ConfigChannel+0x310>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2102      	movs	r1, #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fc07 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075f4:	fa93 f3a3 	rbit	r3, r3
 80075f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80075fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007600:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800760c:	2320      	movs	r3, #32
 800760e:	e004      	b.n	800761a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8007610:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007614:	fab3 f383 	clz	r3, r3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <HAL_ADC_ConfigChannel+0x328>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	0e9b      	lsrs	r3, r3, #26
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	e016      	b.n	8007662 <HAL_ADC_ConfigChannel+0x356>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800763c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007640:	fa93 f3a3 	rbit	r3, r3
 8007644:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800764c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8007654:	2320      	movs	r3, #32
 8007656:	e004      	b.n	8007662 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8007658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800765c:	fab3 f383 	clz	r3, r3
 8007660:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007662:	429a      	cmp	r2, r3
 8007664:	d106      	bne.n	8007674 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	2102      	movs	r1, #2
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff fbd8 	bl	8006e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2103      	movs	r1, #3
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fbbc 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 8007680:	4603      	mov	r3, r0
 8007682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <HAL_ADC_ConfigChannel+0x394>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2103      	movs	r1, #3
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fbb1 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 8007696:	4603      	mov	r3, r0
 8007698:	0e9b      	lsrs	r3, r3, #26
 800769a:	f003 021f 	and.w	r2, r3, #31
 800769e:	e017      	b.n	80076d0 <HAL_ADC_ConfigChannel+0x3c4>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2103      	movs	r1, #3
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fba6 	bl	8006df8 <LL_ADC_GetOffsetChannel>
 80076ac:	4603      	mov	r3, r0
 80076ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076b2:	fa93 f3a3 	rbit	r3, r3
 80076b6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80076b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80076bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80076c2:	2320      	movs	r3, #32
 80076c4:	e003      	b.n	80076ce <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80076c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076c8:	fab3 f383 	clz	r3, r3
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <HAL_ADC_ConfigChannel+0x3dc>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	0e9b      	lsrs	r3, r3, #26
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	e011      	b.n	800770c <HAL_ADC_ConfigChannel+0x400>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80076f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80076fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8007700:	2320      	movs	r3, #32
 8007702:	e003      	b.n	800770c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8007704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007706:	fab3 f383 	clz	r3, r3
 800770a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800770c:	429a      	cmp	r2, r3
 800770e:	d106      	bne.n	800771e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2200      	movs	r2, #0
 8007716:	2103      	movs	r1, #3
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fb83 	bl	8006e24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fc62 	bl	8006fec <LL_ADC_IsEnabled>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 8140 	bne.w	80079b0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	6819      	ldr	r1, [r3, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	461a      	mov	r2, r3
 800773e:	f7ff fbe3 	bl	8006f08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	4a8f      	ldr	r2, [pc, #572]	@ (8007984 <HAL_ADC_ConfigChannel+0x678>)
 8007748:	4293      	cmp	r3, r2
 800774a:	f040 8131 	bne.w	80079b0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <HAL_ADC_ConfigChannel+0x46a>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	0e9b      	lsrs	r3, r3, #26
 8007764:	3301      	adds	r3, #1
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	2b09      	cmp	r3, #9
 800776c:	bf94      	ite	ls
 800776e:	2301      	movls	r3, #1
 8007770:	2300      	movhi	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	e019      	b.n	80077aa <HAL_ADC_ConfigChannel+0x49e>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800777c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800777e:	fa93 f3a3 	rbit	r3, r3
 8007782:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007786:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 800778e:	2320      	movs	r3, #32
 8007790:	e003      	b.n	800779a <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8007792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007794:	fab3 f383 	clz	r3, r3
 8007798:	b2db      	uxtb	r3, r3
 800779a:	3301      	adds	r3, #1
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	2b09      	cmp	r3, #9
 80077a2:	bf94      	ite	ls
 80077a4:	2301      	movls	r3, #1
 80077a6:	2300      	movhi	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d079      	beq.n	80078a2 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <HAL_ADC_ConfigChannel+0x4be>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	0e9b      	lsrs	r3, r3, #26
 80077c0:	3301      	adds	r3, #1
 80077c2:	069b      	lsls	r3, r3, #26
 80077c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80077c8:	e015      	b.n	80077f6 <HAL_ADC_ConfigChannel+0x4ea>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d2:	fa93 f3a3 	rbit	r3, r3
 80077d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80077d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80077dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80077e2:	2320      	movs	r3, #32
 80077e4:	e003      	b.n	80077ee <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80077e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e8:	fab3 f383 	clz	r3, r3
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	3301      	adds	r3, #1
 80077f0:	069b      	lsls	r3, r3, #26
 80077f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d109      	bne.n	8007816 <HAL_ADC_ConfigChannel+0x50a>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	0e9b      	lsrs	r3, r3, #26
 8007808:	3301      	adds	r3, #1
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2101      	movs	r1, #1
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	e017      	b.n	8007846 <HAL_ADC_ConfigChannel+0x53a>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800781e:	fa93 f3a3 	rbit	r3, r3
 8007822:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007826:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 800782e:	2320      	movs	r3, #32
 8007830:	e003      	b.n	800783a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8007832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007834:	fab3 f383 	clz	r3, r3
 8007838:	b2db      	uxtb	r3, r3
 800783a:	3301      	adds	r3, #1
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2101      	movs	r1, #1
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	ea42 0103 	orr.w	r1, r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <HAL_ADC_ConfigChannel+0x560>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	0e9b      	lsrs	r3, r3, #26
 800785c:	3301      	adds	r3, #1
 800785e:	f003 021f 	and.w	r2, r3, #31
 8007862:	4613      	mov	r3, r2
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	4413      	add	r3, r2
 8007868:	051b      	lsls	r3, r3, #20
 800786a:	e018      	b.n	800789e <HAL_ADC_ConfigChannel+0x592>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	fa93 f3a3 	rbit	r3, r3
 8007878:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800787a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800787e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007884:	2320      	movs	r3, #32
 8007886:	e003      	b.n	8007890 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8007888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800788a:	fab3 f383 	clz	r3, r3
 800788e:	b2db      	uxtb	r3, r3
 8007890:	3301      	adds	r3, #1
 8007892:	f003 021f 	and.w	r2, r3, #31
 8007896:	4613      	mov	r3, r2
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	4413      	add	r3, r2
 800789c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800789e:	430b      	orrs	r3, r1
 80078a0:	e081      	b.n	80079a6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d107      	bne.n	80078be <HAL_ADC_ConfigChannel+0x5b2>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	0e9b      	lsrs	r3, r3, #26
 80078b4:	3301      	adds	r3, #1
 80078b6:	069b      	lsls	r3, r3, #26
 80078b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80078bc:	e015      	b.n	80078ea <HAL_ADC_ConfigChannel+0x5de>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	fa93 f3a3 	rbit	r3, r3
 80078ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 80078d6:	2320      	movs	r3, #32
 80078d8:	e003      	b.n	80078e2 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	fab3 f383 	clz	r3, r3
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	3301      	adds	r3, #1
 80078e4:	069b      	lsls	r3, r3, #26
 80078e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <HAL_ADC_ConfigChannel+0x5fe>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	0e9b      	lsrs	r3, r3, #26
 80078fc:	3301      	adds	r3, #1
 80078fe:	f003 031f 	and.w	r3, r3, #31
 8007902:	2101      	movs	r1, #1
 8007904:	fa01 f303 	lsl.w	r3, r1, r3
 8007908:	e017      	b.n	800793a <HAL_ADC_ConfigChannel+0x62e>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	fa93 f3a3 	rbit	r3, r3
 8007916:	61fb      	str	r3, [r7, #28]
  return result;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8007922:	2320      	movs	r3, #32
 8007924:	e003      	b.n	800792e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	fab3 f383 	clz	r3, r3
 800792c:	b2db      	uxtb	r3, r3
 800792e:	3301      	adds	r3, #1
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2101      	movs	r1, #1
 8007936:	fa01 f303 	lsl.w	r3, r1, r3
 800793a:	ea42 0103 	orr.w	r1, r2, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10d      	bne.n	8007966 <HAL_ADC_ConfigChannel+0x65a>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	0e9b      	lsrs	r3, r3, #26
 8007950:	3301      	adds	r3, #1
 8007952:	f003 021f 	and.w	r2, r3, #31
 8007956:	4613      	mov	r3, r2
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	4413      	add	r3, r2
 800795c:	3b1e      	subs	r3, #30
 800795e:	051b      	lsls	r3, r3, #20
 8007960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007964:	e01e      	b.n	80079a4 <HAL_ADC_ConfigChannel+0x698>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fa93 f3a3 	rbit	r3, r3
 8007972:	613b      	str	r3, [r7, #16]
  return result;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800797e:	2320      	movs	r3, #32
 8007980:	e006      	b.n	8007990 <HAL_ADC_ConfigChannel+0x684>
 8007982:	bf00      	nop
 8007984:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	fab3 f383 	clz	r3, r3
 800798e:	b2db      	uxtb	r3, r3
 8007990:	3301      	adds	r3, #1
 8007992:	f003 021f 	and.w	r2, r3, #31
 8007996:	4613      	mov	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	4413      	add	r3, r2
 800799c:	3b1e      	subs	r3, #30
 800799e:	051b      	lsls	r3, r3, #20
 80079a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079a4:	430b      	orrs	r3, r1
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	6892      	ldr	r2, [r2, #8]
 80079aa:	4619      	mov	r1, r3
 80079ac:	f7ff fa81 	bl	8006eb2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b44      	ldr	r3, [pc, #272]	@ (8007ac8 <HAL_ADC_ConfigChannel+0x7bc>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d07a      	beq.n	8007ab2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079bc:	4843      	ldr	r0, [pc, #268]	@ (8007acc <HAL_ADC_ConfigChannel+0x7c0>)
 80079be:	f7ff f9e9 	bl	8006d94 <LL_ADC_GetCommonPathInternalCh>
 80079c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a41      	ldr	r2, [pc, #260]	@ (8007ad0 <HAL_ADC_ConfigChannel+0x7c4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d12c      	bne.n	8007a2a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80079d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d126      	bne.n	8007a2a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ad4 <HAL_ADC_ConfigChannel+0x7c8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d004      	beq.n	80079f0 <HAL_ADC_ConfigChannel+0x6e4>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a3b      	ldr	r2, [pc, #236]	@ (8007ad8 <HAL_ADC_ConfigChannel+0x7cc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d15d      	bne.n	8007aac <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80079f8:	4619      	mov	r1, r3
 80079fa:	4834      	ldr	r0, [pc, #208]	@ (8007acc <HAL_ADC_ConfigChannel+0x7c0>)
 80079fc:	f7ff f9b7 	bl	8006d6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a00:	4b36      	ldr	r3, [pc, #216]	@ (8007adc <HAL_ADC_ConfigChannel+0x7d0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	099b      	lsrs	r3, r3, #6
 8007a06:	4a36      	ldr	r2, [pc, #216]	@ (8007ae0 <HAL_ADC_ConfigChannel+0x7d4>)
 8007a08:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0c:	099b      	lsrs	r3, r3, #6
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	4613      	mov	r3, r2
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007a1a:	e002      	b.n	8007a22 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1f9      	bne.n	8007a1c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a28:	e040      	b.n	8007aac <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8007ae4 <HAL_ADC_ConfigChannel+0x7d8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d118      	bne.n	8007a66 <HAL_ADC_ConfigChannel+0x75a>
 8007a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d112      	bne.n	8007a66 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a23      	ldr	r2, [pc, #140]	@ (8007ad4 <HAL_ADC_ConfigChannel+0x7c8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_ADC_ConfigChannel+0x748>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <HAL_ADC_ConfigChannel+0x7cc>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d12d      	bne.n	8007ab0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	481b      	ldr	r0, [pc, #108]	@ (8007acc <HAL_ADC_ConfigChannel+0x7c0>)
 8007a60:	f7ff f985 	bl	8006d6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a64:	e024      	b.n	8007ab0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae8 <HAL_ADC_ConfigChannel+0x7dc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d120      	bne.n	8007ab2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11a      	bne.n	8007ab2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a14      	ldr	r2, [pc, #80]	@ (8007ad4 <HAL_ADC_ConfigChannel+0x7c8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d115      	bne.n	8007ab2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a8e:	4619      	mov	r1, r3
 8007a90:	480e      	ldr	r0, [pc, #56]	@ (8007acc <HAL_ADC_ConfigChannel+0x7c0>)
 8007a92:	f7ff f96c 	bl	8006d6e <LL_ADC_SetCommonPathInternalCh>
 8007a96:	e00c      	b.n	8007ab2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9c:	f043 0220 	orr.w	r2, r3, #32
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007aaa:	e002      	b.n	8007ab2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007ab0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007aba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	37d8      	adds	r7, #216	@ 0xd8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	80080000 	.word	0x80080000
 8007acc:	50040300 	.word	0x50040300
 8007ad0:	c7520000 	.word	0xc7520000
 8007ad4:	50040000 	.word	0x50040000
 8007ad8:	50040200 	.word	0x50040200
 8007adc:	20000000 	.word	0x20000000
 8007ae0:	053e2d63 	.word	0x053e2d63
 8007ae4:	cb840000 	.word	0xcb840000
 8007ae8:	80000001 	.word	0x80000001

08007aec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e0ed      	b.n	8007cda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fb fe06 	bl	800371c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b20:	f7ff f8e2 	bl	8006ce8 <HAL_GetTick>
 8007b24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b26:	e012      	b.n	8007b4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b28:	f7ff f8de 	bl	8006ce8 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b0a      	cmp	r3, #10
 8007b34:	d90b      	bls.n	8007b4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2205      	movs	r2, #5
 8007b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e0c5      	b.n	8007cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0e5      	beq.n	8007b28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0202 	bic.w	r2, r2, #2
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b6c:	f7ff f8bc 	bl	8006ce8 <HAL_GetTick>
 8007b70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b72:	e012      	b.n	8007b9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b74:	f7ff f8b8 	bl	8006ce8 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b0a      	cmp	r3, #10
 8007b80:	d90b      	bls.n	8007b9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2205      	movs	r2, #5
 8007b92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e09f      	b.n	8007cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e5      	bne.n	8007b74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7e1b      	ldrb	r3, [r3, #24]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d108      	bne.n	8007bc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e007      	b.n	8007bd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7e5b      	ldrb	r3, [r3, #25]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d108      	bne.n	8007bec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e007      	b.n	8007bfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7e9b      	ldrb	r3, [r3, #26]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d108      	bne.n	8007c16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0220 	orr.w	r2, r2, #32
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e007      	b.n	8007c26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0220 	bic.w	r2, r2, #32
 8007c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7edb      	ldrb	r3, [r3, #27]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d108      	bne.n	8007c40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0210 	bic.w	r2, r2, #16
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e007      	b.n	8007c50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0210 	orr.w	r2, r2, #16
 8007c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7f1b      	ldrb	r3, [r3, #28]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d108      	bne.n	8007c6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0208 	orr.w	r2, r2, #8
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e007      	b.n	8007c7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0208 	bic.w	r2, r2, #8
 8007c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7f5b      	ldrb	r3, [r3, #29]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d108      	bne.n	8007c94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0204 	orr.w	r2, r2, #4
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e007      	b.n	8007ca4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0204 	bic.w	r2, r2, #4
 8007ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	ea42 0103 	orr.w	r1, r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	1e5a      	subs	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007cec:	4b05      	ldr	r3, [pc, #20]	@ (8007d04 <LL_EXTI_EnableIT_0_31+0x20>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	4904      	ldr	r1, [pc, #16]	@ (8007d04 <LL_EXTI_EnableIT_0_31+0x20>)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	600b      	str	r3, [r1, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	40010400 	.word	0x40010400

08007d08 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007d10:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <LL_EXTI_DisableIT_0_31+0x24>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	43db      	mvns	r3, r3
 8007d18:	4904      	ldr	r1, [pc, #16]	@ (8007d2c <LL_EXTI_DisableIT_0_31+0x24>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	600b      	str	r3, [r1, #0]
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40010400 	.word	0x40010400

08007d30 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007d38:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4904      	ldr	r1, [pc, #16]	@ (8007d50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	604b      	str	r3, [r1, #4]

}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	40010400 	.word	0x40010400

08007d54 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007d5c:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	43db      	mvns	r3, r3
 8007d64:	4904      	ldr	r1, [pc, #16]	@ (8007d78 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	604b      	str	r3, [r1, #4]
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40010400 	.word	0x40010400

08007d7c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007d84:	4b05      	ldr	r3, [pc, #20]	@ (8007d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	4904      	ldr	r1, [pc, #16]	@ (8007d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	608b      	str	r3, [r1, #8]

}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	40010400 	.word	0x40010400

08007da0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007da8:	4b06      	ldr	r3, [pc, #24]	@ (8007dc4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	43db      	mvns	r3, r3
 8007db0:	4904      	ldr	r1, [pc, #16]	@ (8007dc4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007db2:	4013      	ands	r3, r2
 8007db4:	608b      	str	r3, [r1, #8]

}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40010400 	.word	0x40010400

08007dc8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007dd0:	4b05      	ldr	r3, [pc, #20]	@ (8007de8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	4904      	ldr	r1, [pc, #16]	@ (8007de8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60cb      	str	r3, [r1, #12]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	40010400 	.word	0x40010400

08007dec <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007df4:	4b06      	ldr	r3, [pc, #24]	@ (8007e10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007df6:	68da      	ldr	r2, [r3, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	4904      	ldr	r1, [pc, #16]	@ (8007e10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	60cb      	str	r3, [r1, #12]
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010400 	.word	0x40010400

08007e14 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007e1c:	4a04      	ldr	r2, [pc, #16]	@ (8007e30 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6153      	str	r3, [r2, #20]
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010400 	.word	0x40010400

08007e34 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e0d1      	b.n	8007ff4 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e5e:	d102      	bne.n	8007e66 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e0c6      	b.n	8007ff4 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d115      	bne.n	8007e9e <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e80:	4b5f      	ldr	r3, [pc, #380]	@ (8008000 <HAL_COMP_Init+0x1cc>)
 8007e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e84:	4a5e      	ldr	r2, [pc, #376]	@ (8008000 <HAL_COMP_Init+0x1cc>)
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8008000 <HAL_COMP_Init+0x1cc>)
 8007e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7fb fc83 	bl	80037a4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ea8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8008004 <HAL_COMP_Init+0x1d0>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6812      	ldr	r2, [r2, #0]
 8007edc:	6979      	ldr	r1, [r7, #20]
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eea:	d106      	bne.n	8007efa <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007eec:	4b46      	ldr	r3, [pc, #280]	@ (8008008 <HAL_COMP_Init+0x1d4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a45      	ldr	r2, [pc, #276]	@ (8008008 <HAL_COMP_Init+0x1d4>)
 8007ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	e005      	b.n	8007f06 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007efa:	4b43      	ldr	r3, [pc, #268]	@ (8008008 <HAL_COMP_Init+0x1d4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a42      	ldr	r2, [pc, #264]	@ (8008008 <HAL_COMP_Init+0x1d4>)
 8007f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f04:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d016      	beq.n	8007f42 <HAL_COMP_Init+0x10e>
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d113      	bne.n	8007f42 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800800c <HAL_COMP_Init+0x1d8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	099b      	lsrs	r3, r3, #6
 8007f20:	4a3b      	ldr	r2, [pc, #236]	@ (8008010 <HAL_COMP_Init+0x1dc>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007f34:	e002      	b.n	8007f3c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f9      	bne.n	8007f36 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a33      	ldr	r2, [pc, #204]	@ (8008014 <HAL_COMP_Init+0x1e0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d102      	bne.n	8007f52 <HAL_COMP_Init+0x11e>
 8007f4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007f50:	e001      	b.n	8007f56 <HAL_COMP_Init+0x122>
 8007f52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007f56:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f003 0303 	and.w	r3, r3, #3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d037      	beq.n	8007fd4 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	f003 0310 	and.w	r3, r3, #16
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007f70:	6938      	ldr	r0, [r7, #16]
 8007f72:	f7ff ff03 	bl	8007d7c <LL_EXTI_EnableRisingTrig_0_31>
 8007f76:	e002      	b.n	8007f7e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007f78:	6938      	ldr	r0, [r7, #16]
 8007f7a:	f7ff ff11 	bl	8007da0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007f8a:	6938      	ldr	r0, [r7, #16]
 8007f8c:	f7ff ff1c 	bl	8007dc8 <LL_EXTI_EnableFallingTrig_0_31>
 8007f90:	e002      	b.n	8007f98 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007f92:	6938      	ldr	r0, [r7, #16]
 8007f94:	f7ff ff2a 	bl	8007dec <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007f98:	6938      	ldr	r0, [r7, #16]
 8007f9a:	f7ff ff3b 	bl	8007e14 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007faa:	6938      	ldr	r0, [r7, #16]
 8007fac:	f7ff fec0 	bl	8007d30 <LL_EXTI_EnableEvent_0_31>
 8007fb0:	e002      	b.n	8007fb8 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007fb2:	6938      	ldr	r0, [r7, #16]
 8007fb4:	f7ff fece 	bl	8007d54 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007fc4:	6938      	ldr	r0, [r7, #16]
 8007fc6:	f7ff fe8d 	bl	8007ce4 <LL_EXTI_EnableIT_0_31>
 8007fca:	e009      	b.n	8007fe0 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007fcc:	6938      	ldr	r0, [r7, #16]
 8007fce:	f7ff fe9b 	bl	8007d08 <LL_EXTI_DisableIT_0_31>
 8007fd2:	e005      	b.n	8007fe0 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007fd4:	6938      	ldr	r0, [r7, #16]
 8007fd6:	f7ff febd 	bl	8007d54 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f7ff fe94 	bl	8007d08 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3720      	adds	r7, #32
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	40021000 	.word	0x40021000
 8008004:	ff207d03 	.word	0xff207d03
 8008008:	40010204 	.word	0x40010204
 800800c:	20000000 	.word	0x20000000
 8008010:	053e2d63 	.word	0x053e2d63
 8008014:	40010200 	.word	0x40010200

08008018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008028:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <__NVIC_SetPriorityGrouping+0x44>)
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008034:	4013      	ands	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800804a:	4a04      	ldr	r2, [pc, #16]	@ (800805c <__NVIC_SetPriorityGrouping+0x44>)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	60d3      	str	r3, [r2, #12]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	e000ed00 	.word	0xe000ed00

08008060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008064:	4b04      	ldr	r3, [pc, #16]	@ (8008078 <__NVIC_GetPriorityGrouping+0x18>)
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	f003 0307 	and.w	r3, r3, #7
}
 800806e:	4618      	mov	r0, r3
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	e000ed00 	.word	0xe000ed00

0800807c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800808a:	2b00      	cmp	r3, #0
 800808c:	db0b      	blt.n	80080a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	f003 021f 	and.w	r2, r3, #31
 8008094:	4907      	ldr	r1, [pc, #28]	@ (80080b4 <__NVIC_EnableIRQ+0x38>)
 8008096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	2001      	movs	r0, #1
 800809e:	fa00 f202 	lsl.w	r2, r0, r2
 80080a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	e000e100 	.word	0xe000e100

080080b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	db0a      	blt.n	80080e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	490c      	ldr	r1, [pc, #48]	@ (8008104 <__NVIC_SetPriority+0x4c>)
 80080d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d6:	0112      	lsls	r2, r2, #4
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	440b      	add	r3, r1
 80080dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80080e0:	e00a      	b.n	80080f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	4908      	ldr	r1, [pc, #32]	@ (8008108 <__NVIC_SetPriority+0x50>)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	3b04      	subs	r3, #4
 80080f0:	0112      	lsls	r2, r2, #4
 80080f2:	b2d2      	uxtb	r2, r2
 80080f4:	440b      	add	r3, r1
 80080f6:	761a      	strb	r2, [r3, #24]
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	e000e100 	.word	0xe000e100
 8008108:	e000ed00 	.word	0xe000ed00

0800810c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800810c:	b480      	push	{r7}
 800810e:	b089      	sub	sp, #36	@ 0x24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f1c3 0307 	rsb	r3, r3, #7
 8008126:	2b04      	cmp	r3, #4
 8008128:	bf28      	it	cs
 800812a:	2304      	movcs	r3, #4
 800812c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	3304      	adds	r3, #4
 8008132:	2b06      	cmp	r3, #6
 8008134:	d902      	bls.n	800813c <NVIC_EncodePriority+0x30>
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	3b03      	subs	r3, #3
 800813a:	e000      	b.n	800813e <NVIC_EncodePriority+0x32>
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008140:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43da      	mvns	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	401a      	ands	r2, r3
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008154:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	fa01 f303 	lsl.w	r3, r1, r3
 800815e:	43d9      	mvns	r1, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008164:	4313      	orrs	r3, r2
         );
}
 8008166:	4618      	mov	r0, r3
 8008168:	3724      	adds	r7, #36	@ 0x24
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3b01      	subs	r3, #1
 8008180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008184:	d301      	bcc.n	800818a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008186:	2301      	movs	r3, #1
 8008188:	e00f      	b.n	80081aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800818a:	4a0a      	ldr	r2, [pc, #40]	@ (80081b4 <SysTick_Config+0x40>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3b01      	subs	r3, #1
 8008190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008192:	210f      	movs	r1, #15
 8008194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008198:	f7ff ff8e 	bl	80080b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800819c:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <SysTick_Config+0x40>)
 800819e:	2200      	movs	r2, #0
 80081a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081a2:	4b04      	ldr	r3, [pc, #16]	@ (80081b4 <SysTick_Config+0x40>)
 80081a4:	2207      	movs	r2, #7
 80081a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	e000e010 	.word	0xe000e010

080081b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff ff29 	bl	8008018 <__NVIC_SetPriorityGrouping>
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	4603      	mov	r3, r0
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80081e0:	f7ff ff3e 	bl	8008060 <__NVIC_GetPriorityGrouping>
 80081e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	6978      	ldr	r0, [r7, #20]
 80081ec:	f7ff ff8e 	bl	800810c <NVIC_EncodePriority>
 80081f0:	4602      	mov	r2, r0
 80081f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff ff5d 	bl	80080b8 <__NVIC_SetPriority>
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	4603      	mov	r3, r0
 800820e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff ff31 	bl	800807c <__NVIC_EnableIRQ>
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff ffa2 	bl	8008174 <SysTick_Config>
 8008230:	4603      	mov	r3, r0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d008      	beq.n	8008264 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2204      	movs	r2, #4
 8008256:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e022      	b.n	80082aa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 020e 	bic.w	r2, r2, #14
 8008272:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0201 	bic.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008288:	f003 021c 	and.w	r2, r3, #28
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008290:	2101      	movs	r1, #1
 8008292:	fa01 f202 	lsl.w	r2, r1, r2
 8008296:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d005      	beq.n	80082da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2204      	movs	r2, #4
 80082d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
 80082d8:	e029      	b.n	800832e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 020e 	bic.w	r2, r2, #14
 80082e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0201 	bic.w	r2, r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fe:	f003 021c 	and.w	r2, r3, #28
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008306:	2101      	movs	r1, #1
 8008308:	fa01 f202 	lsl.w	r2, r1, r2
 800830c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
    }
  }
  return status;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008346:	e17f      	b.n	8008648 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	2101      	movs	r1, #1
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	fa01 f303 	lsl.w	r3, r1, r3
 8008354:	4013      	ands	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 8171 	beq.w	8008642 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	2b01      	cmp	r3, #1
 800836a:	d005      	beq.n	8008378 <HAL_GPIO_Init+0x40>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d130      	bne.n	80083da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	2203      	movs	r2, #3
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	43db      	mvns	r3, r3
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4013      	ands	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4313      	orrs	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80083ae:	2201      	movs	r2, #1
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	fa02 f303 	lsl.w	r3, r2, r3
 80083b6:	43db      	mvns	r3, r3
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4013      	ands	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	091b      	lsrs	r3, r3, #4
 80083c4:	f003 0201 	and.w	r2, r3, #1
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	fa02 f303 	lsl.w	r3, r2, r3
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d118      	bne.n	8008418 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80083ec:	2201      	movs	r2, #1
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	fa02 f303 	lsl.w	r3, r2, r3
 80083f4:	43db      	mvns	r3, r3
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4013      	ands	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	08db      	lsrs	r3, r3, #3
 8008402:	f003 0201 	and.w	r2, r3, #1
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	2b03      	cmp	r3, #3
 8008422:	d017      	beq.n	8008454 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	2203      	movs	r2, #3
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	43db      	mvns	r3, r3
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4013      	ands	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	fa02 f303 	lsl.w	r3, r2, r3
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d123      	bne.n	80084a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	08da      	lsrs	r2, r3, #3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3208      	adds	r2, #8
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	220f      	movs	r2, #15
 8008478:	fa02 f303 	lsl.w	r3, r2, r3
 800847c:	43db      	mvns	r3, r3
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	4013      	ands	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4313      	orrs	r3, r2
 8008498:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	08da      	lsrs	r2, r3, #3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3208      	adds	r2, #8
 80084a2:	6939      	ldr	r1, [r7, #16]
 80084a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	2203      	movs	r2, #3
 80084b4:	fa02 f303 	lsl.w	r3, r2, r3
 80084b8:	43db      	mvns	r3, r3
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4013      	ands	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f003 0203 	and.w	r2, r3, #3
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	fa02 f303 	lsl.w	r3, r2, r3
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80ac 	beq.w	8008642 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008668 <HAL_GPIO_Init+0x330>)
 80084ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084ee:	4a5e      	ldr	r2, [pc, #376]	@ (8008668 <HAL_GPIO_Init+0x330>)
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80084f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008668 <HAL_GPIO_Init+0x330>)
 80084f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008502:	4a5a      	ldr	r2, [pc, #360]	@ (800866c <HAL_GPIO_Init+0x334>)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	089b      	lsrs	r3, r3, #2
 8008508:	3302      	adds	r3, #2
 800850a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800850e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	220f      	movs	r2, #15
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	43db      	mvns	r3, r3
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4013      	ands	r3, r2
 8008524:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800852c:	d025      	beq.n	800857a <HAL_GPIO_Init+0x242>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a4f      	ldr	r2, [pc, #316]	@ (8008670 <HAL_GPIO_Init+0x338>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d01f      	beq.n	8008576 <HAL_GPIO_Init+0x23e>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a4e      	ldr	r2, [pc, #312]	@ (8008674 <HAL_GPIO_Init+0x33c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d019      	beq.n	8008572 <HAL_GPIO_Init+0x23a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a4d      	ldr	r2, [pc, #308]	@ (8008678 <HAL_GPIO_Init+0x340>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d013      	beq.n	800856e <HAL_GPIO_Init+0x236>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a4c      	ldr	r2, [pc, #304]	@ (800867c <HAL_GPIO_Init+0x344>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00d      	beq.n	800856a <HAL_GPIO_Init+0x232>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a4b      	ldr	r2, [pc, #300]	@ (8008680 <HAL_GPIO_Init+0x348>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d007      	beq.n	8008566 <HAL_GPIO_Init+0x22e>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a4a      	ldr	r2, [pc, #296]	@ (8008684 <HAL_GPIO_Init+0x34c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d101      	bne.n	8008562 <HAL_GPIO_Init+0x22a>
 800855e:	2306      	movs	r3, #6
 8008560:	e00c      	b.n	800857c <HAL_GPIO_Init+0x244>
 8008562:	2307      	movs	r3, #7
 8008564:	e00a      	b.n	800857c <HAL_GPIO_Init+0x244>
 8008566:	2305      	movs	r3, #5
 8008568:	e008      	b.n	800857c <HAL_GPIO_Init+0x244>
 800856a:	2304      	movs	r3, #4
 800856c:	e006      	b.n	800857c <HAL_GPIO_Init+0x244>
 800856e:	2303      	movs	r3, #3
 8008570:	e004      	b.n	800857c <HAL_GPIO_Init+0x244>
 8008572:	2302      	movs	r3, #2
 8008574:	e002      	b.n	800857c <HAL_GPIO_Init+0x244>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <HAL_GPIO_Init+0x244>
 800857a:	2300      	movs	r3, #0
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	f002 0203 	and.w	r2, r2, #3
 8008582:	0092      	lsls	r2, r2, #2
 8008584:	4093      	lsls	r3, r2
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	4313      	orrs	r3, r2
 800858a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800858c:	4937      	ldr	r1, [pc, #220]	@ (800866c <HAL_GPIO_Init+0x334>)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	089b      	lsrs	r3, r3, #2
 8008592:	3302      	adds	r3, #2
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800859a:	4b3b      	ldr	r3, [pc, #236]	@ (8008688 <HAL_GPIO_Init+0x350>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	43db      	mvns	r3, r3
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4013      	ands	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80085be:	4a32      	ldr	r2, [pc, #200]	@ (8008688 <HAL_GPIO_Init+0x350>)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80085c4:	4b30      	ldr	r3, [pc, #192]	@ (8008688 <HAL_GPIO_Init+0x350>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	43db      	mvns	r3, r3
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4013      	ands	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80085e8:	4a27      	ldr	r2, [pc, #156]	@ (8008688 <HAL_GPIO_Init+0x350>)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80085ee:	4b26      	ldr	r3, [pc, #152]	@ (8008688 <HAL_GPIO_Init+0x350>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	43db      	mvns	r3, r3
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4013      	ands	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008612:	4a1d      	ldr	r2, [pc, #116]	@ (8008688 <HAL_GPIO_Init+0x350>)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008618:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <HAL_GPIO_Init+0x350>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	43db      	mvns	r3, r3
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4013      	ands	r3, r2
 8008626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800863c:	4a12      	ldr	r2, [pc, #72]	@ (8008688 <HAL_GPIO_Init+0x350>)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	3301      	adds	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	fa22 f303 	lsr.w	r3, r2, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f ae78 	bne.w	8008348 <HAL_GPIO_Init+0x10>
  }
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	40021000 	.word	0x40021000
 800866c:	40010000 	.word	0x40010000
 8008670:	48000400 	.word	0x48000400
 8008674:	48000800 	.word	0x48000800
 8008678:	48000c00 	.word	0x48000c00
 800867c:	48001000 	.word	0x48001000
 8008680:	48001400 	.word	0x48001400
 8008684:	48001800 	.word	0x48001800
 8008688:	40010400 	.word	0x40010400

0800868c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008696:	2300      	movs	r3, #0
 8008698:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800869a:	e0cd      	b.n	8008838 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800869c:	2201      	movs	r2, #1
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	4013      	ands	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80c0 	beq.w	8008832 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80086b2:	4a68      	ldr	r2, [pc, #416]	@ (8008854 <HAL_GPIO_DeInit+0x1c8>)
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	089b      	lsrs	r3, r3, #2
 80086b8:	3302      	adds	r3, #2
 80086ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	220f      	movs	r2, #15
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4013      	ands	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80086da:	d025      	beq.n	8008728 <HAL_GPIO_DeInit+0x9c>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a5e      	ldr	r2, [pc, #376]	@ (8008858 <HAL_GPIO_DeInit+0x1cc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d01f      	beq.n	8008724 <HAL_GPIO_DeInit+0x98>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a5d      	ldr	r2, [pc, #372]	@ (800885c <HAL_GPIO_DeInit+0x1d0>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d019      	beq.n	8008720 <HAL_GPIO_DeInit+0x94>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a5c      	ldr	r2, [pc, #368]	@ (8008860 <HAL_GPIO_DeInit+0x1d4>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d013      	beq.n	800871c <HAL_GPIO_DeInit+0x90>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a5b      	ldr	r2, [pc, #364]	@ (8008864 <HAL_GPIO_DeInit+0x1d8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00d      	beq.n	8008718 <HAL_GPIO_DeInit+0x8c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a5a      	ldr	r2, [pc, #360]	@ (8008868 <HAL_GPIO_DeInit+0x1dc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <HAL_GPIO_DeInit+0x88>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a59      	ldr	r2, [pc, #356]	@ (800886c <HAL_GPIO_DeInit+0x1e0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d101      	bne.n	8008710 <HAL_GPIO_DeInit+0x84>
 800870c:	2306      	movs	r3, #6
 800870e:	e00c      	b.n	800872a <HAL_GPIO_DeInit+0x9e>
 8008710:	2307      	movs	r3, #7
 8008712:	e00a      	b.n	800872a <HAL_GPIO_DeInit+0x9e>
 8008714:	2305      	movs	r3, #5
 8008716:	e008      	b.n	800872a <HAL_GPIO_DeInit+0x9e>
 8008718:	2304      	movs	r3, #4
 800871a:	e006      	b.n	800872a <HAL_GPIO_DeInit+0x9e>
 800871c:	2303      	movs	r3, #3
 800871e:	e004      	b.n	800872a <HAL_GPIO_DeInit+0x9e>
 8008720:	2302      	movs	r3, #2
 8008722:	e002      	b.n	800872a <HAL_GPIO_DeInit+0x9e>
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <HAL_GPIO_DeInit+0x9e>
 8008728:	2300      	movs	r3, #0
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	f002 0203 	and.w	r2, r2, #3
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	4093      	lsls	r3, r2
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	429a      	cmp	r2, r3
 8008738:	d132      	bne.n	80087a0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800873a:	4b4d      	ldr	r3, [pc, #308]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	43db      	mvns	r3, r3
 8008742:	494b      	ldr	r1, [pc, #300]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 8008744:	4013      	ands	r3, r2
 8008746:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008748:	4b49      	ldr	r3, [pc, #292]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	43db      	mvns	r3, r3
 8008750:	4947      	ldr	r1, [pc, #284]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 8008752:	4013      	ands	r3, r2
 8008754:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008756:	4b46      	ldr	r3, [pc, #280]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	43db      	mvns	r3, r3
 800875e:	4944      	ldr	r1, [pc, #272]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 8008760:	4013      	ands	r3, r2
 8008762:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008764:	4b42      	ldr	r3, [pc, #264]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	43db      	mvns	r3, r3
 800876c:	4940      	ldr	r1, [pc, #256]	@ (8008870 <HAL_GPIO_DeInit+0x1e4>)
 800876e:	4013      	ands	r3, r2
 8008770:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	220f      	movs	r2, #15
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008782:	4a34      	ldr	r2, [pc, #208]	@ (8008854 <HAL_GPIO_DeInit+0x1c8>)
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	3302      	adds	r3, #2
 800878a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	43da      	mvns	r2, r3
 8008792:	4830      	ldr	r0, [pc, #192]	@ (8008854 <HAL_GPIO_DeInit+0x1c8>)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	089b      	lsrs	r3, r3, #2
 8008798:	400a      	ands	r2, r1
 800879a:	3302      	adds	r3, #2
 800879c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	2103      	movs	r1, #3
 80087aa:	fa01 f303 	lsl.w	r3, r1, r3
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	08da      	lsrs	r2, r3, #3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3208      	adds	r2, #8
 80087bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	220f      	movs	r2, #15
 80087ca:	fa02 f303 	lsl.w	r3, r2, r3
 80087ce:	43db      	mvns	r3, r3
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	08d2      	lsrs	r2, r2, #3
 80087d4:	4019      	ands	r1, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3208      	adds	r2, #8
 80087da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	2103      	movs	r1, #3
 80087e8:	fa01 f303 	lsl.w	r3, r1, r3
 80087ec:	43db      	mvns	r3, r3
 80087ee:	401a      	ands	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	2101      	movs	r1, #1
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008800:	43db      	mvns	r3, r3
 8008802:	401a      	ands	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	2103      	movs	r1, #3
 8008812:	fa01 f303 	lsl.w	r3, r1, r3
 8008816:	43db      	mvns	r3, r3
 8008818:	401a      	ands	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008822:	2101      	movs	r1, #1
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	fa01 f303 	lsl.w	r3, r1, r3
 800882a:	43db      	mvns	r3, r3
 800882c:	401a      	ands	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	3301      	adds	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	fa22 f303 	lsr.w	r3, r2, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	f47f af2b 	bne.w	800869c <HAL_GPIO_DeInit+0x10>
  }
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	40010000 	.word	0x40010000
 8008858:	48000400 	.word	0x48000400
 800885c:	48000800 	.word	0x48000800
 8008860:	48000c00 	.word	0x48000c00
 8008864:	48001000 	.word	0x48001000
 8008868:	48001400 	.word	0x48001400
 800886c:	48001800 	.word	0x48001800
 8008870:	40010400 	.word	0x40010400

08008874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	807b      	strh	r3, [r7, #2]
 8008880:	4613      	mov	r3, r2
 8008882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008884:	787b      	ldrb	r3, [r7, #1]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800888a:	887a      	ldrh	r2, [r7, #2]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008890:	e002      	b.n	8008898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008892:	887a      	ldrh	r2, [r7, #2]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e081      	b.n	80089ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fa ff9e 	bl	800380c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	@ 0x24
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80088f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008904:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d107      	bne.n	800891e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800891a:	609a      	str	r2, [r3, #8]
 800891c:	e006      	b.n	800892c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800892a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d104      	bne.n	800893e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800893c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6812      	ldr	r2, [r2, #0]
 8008948:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800894c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008950:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008960:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	69d9      	ldr	r1, [r3, #28]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1a      	ldr	r2, [r3, #32]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e021      	b.n	8008a18 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2224      	movs	r2, #36	@ 0x24
 80089d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0201 	bic.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fa ff6b 	bl	80038c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af02      	add	r7, sp, #8
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4603      	mov	r3, r0
 8008a30:	817b      	strh	r3, [r7, #10]
 8008a32:	460b      	mov	r3, r1
 8008a34:	813b      	strh	r3, [r7, #8]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	f040 80f9 	bne.w	8008c3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_I2C_Mem_Write+0x34>
 8008a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e0ed      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_I2C_Mem_Write+0x4e>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e0e6      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a76:	f7fe f937 	bl	8006ce8 <HAL_GetTick>
 8008a7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	2319      	movs	r3, #25
 8008a82:	2201      	movs	r2, #1
 8008a84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fadd 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e0d1      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2221      	movs	r2, #33	@ 0x21
 8008a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2240      	movs	r2, #64	@ 0x40
 8008aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6a3a      	ldr	r2, [r7, #32]
 8008ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ac0:	88f8      	ldrh	r0, [r7, #6]
 8008ac2:	893a      	ldrh	r2, [r7, #8]
 8008ac4:	8979      	ldrh	r1, [r7, #10]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4603      	mov	r3, r0
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f9ed 	bl	8008eb0 <I2C_RequestMemoryWrite>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0a9      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2bff      	cmp	r3, #255	@ 0xff
 8008af0:	d90e      	bls.n	8008b10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	22ff      	movs	r2, #255	@ 0xff
 8008af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	8979      	ldrh	r1, [r7, #10]
 8008b00:	2300      	movs	r3, #0
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fc45 	bl	8009398 <I2C_TransferConfig>
 8008b0e:	e00f      	b.n	8008b30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	8979      	ldrh	r1, [r7, #10]
 8008b22:	2300      	movs	r3, #0
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fc34 	bl	8009398 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fac7 	bl	80090c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e07b      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d034      	beq.n	8008be8 <HAL_I2C_Mem_Write+0x1c8>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d130      	bne.n	8008be8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2180      	movs	r1, #128	@ 0x80
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 fa59 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e04d      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2bff      	cmp	r3, #255	@ 0xff
 8008ba8:	d90e      	bls.n	8008bc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	22ff      	movs	r2, #255	@ 0xff
 8008bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	8979      	ldrh	r1, [r7, #10]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 fbe9 	bl	8009398 <I2C_TransferConfig>
 8008bc6:	e00f      	b.n	8008be8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	8979      	ldrh	r1, [r7, #10]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fbd8 	bl	8009398 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d19e      	bne.n	8008b30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 faa6 	bl	8009148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e01a      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6859      	ldr	r1, [r3, #4]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	4b0a      	ldr	r3, [pc, #40]	@ (8008c44 <HAL_I2C_Mem_Write+0x224>)
 8008c1a:	400b      	ands	r3, r1
 8008c1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	e000      	b.n	8008c3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008c3a:	2302      	movs	r3, #2
  }
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	fe00e800 	.word	0xfe00e800

08008c48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	4603      	mov	r3, r0
 8008c58:	817b      	strh	r3, [r7, #10]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	813b      	strh	r3, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	f040 80fd 	bne.w	8008e6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <HAL_I2C_Mem_Read+0x34>
 8008c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d105      	bne.n	8008c88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e0f1      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_I2C_Mem_Read+0x4e>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e0ea      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c9e:	f7fe f823 	bl	8006ce8 <HAL_GetTick>
 8008ca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2319      	movs	r3, #25
 8008caa:	2201      	movs	r2, #1
 8008cac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 f9c9 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0d5      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2222      	movs	r2, #34	@ 0x22
 8008cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2240      	movs	r2, #64	@ 0x40
 8008ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a3a      	ldr	r2, [r7, #32]
 8008cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ce8:	88f8      	ldrh	r0, [r7, #6]
 8008cea:	893a      	ldrh	r2, [r7, #8]
 8008cec:	8979      	ldrh	r1, [r7, #10]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f92d 	bl	8008f58 <I2C_RequestMemoryRead>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d005      	beq.n	8008d10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e0ad      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2bff      	cmp	r3, #255	@ 0xff
 8008d18:	d90e      	bls.n	8008d38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	22ff      	movs	r2, #255	@ 0xff
 8008d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	8979      	ldrh	r1, [r7, #10]
 8008d28:	4b52      	ldr	r3, [pc, #328]	@ (8008e74 <HAL_I2C_Mem_Read+0x22c>)
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 fb31 	bl	8009398 <I2C_TransferConfig>
 8008d36:	e00f      	b.n	8008d58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	8979      	ldrh	r1, [r7, #10]
 8008d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8008e74 <HAL_I2C_Mem_Read+0x22c>)
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fb20 	bl	8009398 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2104      	movs	r1, #4
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 f970 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e07c      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7c:	b2d2      	uxtb	r2, r2
 8008d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d034      	beq.n	8008e18 <HAL_I2C_Mem_Read+0x1d0>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d130      	bne.n	8008e18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2180      	movs	r1, #128	@ 0x80
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f941 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e04d      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2bff      	cmp	r3, #255	@ 0xff
 8008dd8:	d90e      	bls.n	8008df8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	22ff      	movs	r2, #255	@ 0xff
 8008dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	8979      	ldrh	r1, [r7, #10]
 8008de8:	2300      	movs	r3, #0
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fad1 	bl	8009398 <I2C_TransferConfig>
 8008df6:	e00f      	b.n	8008e18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	8979      	ldrh	r1, [r7, #10]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fac0 	bl	8009398 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d19a      	bne.n	8008d58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f98e 	bl	8009148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e01a      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6859      	ldr	r1, [r3, #4]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	4b0b      	ldr	r3, [pc, #44]	@ (8008e78 <HAL_I2C_Mem_Read+0x230>)
 8008e4a:	400b      	ands	r3, r1
 8008e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e000      	b.n	8008e6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008e6a:	2302      	movs	r3, #2
  }
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	80002400 	.word	0x80002400
 8008e78:	fe00e800 	.word	0xfe00e800

08008e7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e8a:	b2db      	uxtb	r3, r3
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	4608      	mov	r0, r1
 8008eba:	4611      	mov	r1, r2
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	817b      	strh	r3, [r7, #10]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	813b      	strh	r3, [r7, #8]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	8979      	ldrh	r1, [r7, #10]
 8008ed0:	4b20      	ldr	r3, [pc, #128]	@ (8008f54 <I2C_RequestMemoryWrite+0xa4>)
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fa5d 	bl	8009398 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	69b9      	ldr	r1, [r7, #24]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 f8f0 	bl	80090c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e02c      	b.n	8008f4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d105      	bne.n	8008f04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ef8:	893b      	ldrh	r3, [r7, #8]
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f02:	e015      	b.n	8008f30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008f04:	893b      	ldrh	r3, [r7, #8]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	69b9      	ldr	r1, [r7, #24]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f8d6 	bl	80090c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e012      	b.n	8008f4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f26:	893b      	ldrh	r3, [r7, #8]
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	2200      	movs	r2, #0
 8008f38:	2180      	movs	r1, #128	@ 0x80
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 f884 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	80002000 	.word	0x80002000

08008f58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	4608      	mov	r0, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	461a      	mov	r2, r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	817b      	strh	r3, [r7, #10]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	813b      	strh	r3, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	8979      	ldrh	r1, [r7, #10]
 8008f78:	4b20      	ldr	r3, [pc, #128]	@ (8008ffc <I2C_RequestMemoryRead+0xa4>)
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 fa0a 	bl	8009398 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	69b9      	ldr	r1, [r7, #24]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f89d 	bl	80090c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e02c      	b.n	8008ff2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d105      	bne.n	8008faa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f9e:	893b      	ldrh	r3, [r7, #8]
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fa8:	e015      	b.n	8008fd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008faa:	893b      	ldrh	r3, [r7, #8]
 8008fac:	0a1b      	lsrs	r3, r3, #8
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	69b9      	ldr	r1, [r7, #24]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f883 	bl	80090c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e012      	b.n	8008ff2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fcc:	893b      	ldrh	r3, [r7, #8]
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2140      	movs	r1, #64	@ 0x40
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f831 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e000      	b.n	8008ff2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	80002000 	.word	0x80002000

08009000 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b02      	cmp	r3, #2
 8009014:	d103      	bne.n	800901e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2200      	movs	r2, #0
 800901c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b01      	cmp	r3, #1
 800902a:	d007      	beq.n	800903c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	619a      	str	r2, [r3, #24]
  }
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009058:	e022      	b.n	80090a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009060:	d01e      	beq.n	80090a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009062:	f7fd fe41 	bl	8006ce8 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d113      	bne.n	80090a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2220      	movs	r2, #32
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e00f      	b.n	80090c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4013      	ands	r3, r2
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	bf0c      	ite	eq
 80090b0:	2301      	moveq	r3, #1
 80090b2:	2300      	movne	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	461a      	mov	r2, r3
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d0cd      	beq.n	800905a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090d4:	e02c      	b.n	8009130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 f870 	bl	80091c0 <I2C_IsErrorOccurred>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e02a      	b.n	8009140 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090f0:	d01e      	beq.n	8009130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f2:	f7fd fdf9 	bl	8006ce8 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d302      	bcc.n	8009108 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d113      	bne.n	8009130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910c:	f043 0220 	orr.w	r2, r3, #32
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e007      	b.n	8009140 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b02      	cmp	r3, #2
 800913c:	d1cb      	bne.n	80090d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009154:	e028      	b.n	80091a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 f830 	bl	80091c0 <I2C_IsErrorOccurred>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e026      	b.n	80091b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800916a:	f7fd fdbd 	bl	8006ce8 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	d302      	bcc.n	8009180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d113      	bne.n	80091a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009184:	f043 0220 	orr.w	r2, r3, #32
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2220      	movs	r2, #32
 8009190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e007      	b.n	80091b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d1cf      	bne.n	8009156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	@ 0x28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d075      	beq.n	80092d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2210      	movs	r2, #16
 80091f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80091f4:	e056      	b.n	80092a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091fc:	d052      	beq.n	80092a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80091fe:	f7fd fd73 	bl	8006ce8 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	429a      	cmp	r2, r3
 800920c:	d302      	bcc.n	8009214 <I2C_IsErrorOccurred+0x54>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d147      	bne.n	80092a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800921e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009226:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009236:	d12e      	bne.n	8009296 <I2C_IsErrorOccurred+0xd6>
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800923e:	d02a      	beq.n	8009296 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009240:	7cfb      	ldrb	r3, [r7, #19]
 8009242:	2b20      	cmp	r3, #32
 8009244:	d027      	beq.n	8009296 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009254:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009256:	f7fd fd47 	bl	8006ce8 <HAL_GetTick>
 800925a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800925c:	e01b      	b.n	8009296 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800925e:	f7fd fd43 	bl	8006ce8 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b19      	cmp	r3, #25
 800926a:	d914      	bls.n	8009296 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009270:	f043 0220 	orr.w	r2, r3, #32
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d1dc      	bne.n	800925e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d003      	beq.n	80092ba <I2C_IsErrorOccurred+0xfa>
 80092b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d09d      	beq.n	80091f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80092ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2220      	movs	r2, #32
 80092c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	f043 0304 	orr.w	r3, r3, #4
 80092d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00b      	beq.n	8009302 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	f043 0301 	orr.w	r3, r3, #1
 80092f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	f043 0308 	orr.w	r3, r3, #8
 8009312:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800931c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	f043 0302 	orr.w	r3, r3, #2
 8009334:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800933e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01c      	beq.n	8009388 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fe56 	bl	8009000 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6859      	ldr	r1, [r3, #4]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4b0d      	ldr	r3, [pc, #52]	@ (8009394 <I2C_IsErrorOccurred+0x1d4>)
 8009360:	400b      	ands	r3, r1
 8009362:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	431a      	orrs	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800938c:	4618      	mov	r0, r3
 800938e:	3728      	adds	r7, #40	@ 0x28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	fe00e800 	.word	0xfe00e800

08009398 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	817b      	strh	r3, [r7, #10]
 80093a6:	4613      	mov	r3, r2
 80093a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093aa:	897b      	ldrh	r3, [r7, #10]
 80093ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093b0:	7a7b      	ldrb	r3, [r7, #9]
 80093b2:	041b      	lsls	r3, r3, #16
 80093b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	0d5b      	lsrs	r3, r3, #21
 80093d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80093d6:	4b08      	ldr	r3, [pc, #32]	@ (80093f8 <I2C_TransferConfig+0x60>)
 80093d8:	430b      	orrs	r3, r1
 80093da:	43db      	mvns	r3, r3
 80093dc:	ea02 0103 	and.w	r1, r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	03ff63ff 	.word	0x03ff63ff

080093fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b20      	cmp	r3, #32
 8009410:	d138      	bne.n	8009484 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800941c:	2302      	movs	r3, #2
 800941e:	e032      	b.n	8009486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2224      	movs	r2, #36	@ 0x24
 800942c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0201 	bic.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800944e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6819      	ldr	r1, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2220      	movs	r2, #32
 8009474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	e000      	b.n	8009486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009484:	2302      	movs	r3, #2
  }
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d139      	bne.n	800951c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e033      	b.n	800951e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2224      	movs	r2, #36	@ 0x24
 80094c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0201 	bic.w	r2, r2, #1
 80094d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80094e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	e000      	b.n	800951e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800951c:	2302      	movs	r3, #2
  }
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
	...

0800952c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009530:	4b04      	ldr	r3, [pc, #16]	@ (8009544 <HAL_PWREx_GetVoltageRange+0x18>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8009538:	4618      	mov	r0, r3
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	40007000 	.word	0x40007000

08009548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009556:	d130      	bne.n	80095ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009558:	4b23      	ldr	r3, [pc, #140]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009564:	d038      	beq.n	80095d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009566:	4b20      	ldr	r3, [pc, #128]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800956e:	4a1e      	ldr	r2, [pc, #120]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009570:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009574:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009576:	4b1d      	ldr	r3, [pc, #116]	@ (80095ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2232      	movs	r2, #50	@ 0x32
 800957c:	fb02 f303 	mul.w	r3, r2, r3
 8009580:	4a1b      	ldr	r2, [pc, #108]	@ (80095f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	0c9b      	lsrs	r3, r3, #18
 8009588:	3301      	adds	r3, #1
 800958a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800958c:	e002      	b.n	8009594 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3b01      	subs	r3, #1
 8009592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009594:	4b14      	ldr	r3, [pc, #80]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800959c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a0:	d102      	bne.n	80095a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1f2      	bne.n	800958e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095a8:	4b0f      	ldr	r3, [pc, #60]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095b4:	d110      	bne.n	80095d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e00f      	b.n	80095da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80095ba:	4b0b      	ldr	r3, [pc, #44]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80095c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c6:	d007      	beq.n	80095d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80095d0:	4a05      	ldr	r2, [pc, #20]	@ (80095e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80095d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40007000 	.word	0x40007000
 80095ec:	20000000 	.word	0x20000000
 80095f0:	431bde83 	.word	0x431bde83

080095f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e3ca      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009606:	4b97      	ldr	r3, [pc, #604]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 030c 	and.w	r3, r3, #12
 800960e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009610:	4b94      	ldr	r3, [pc, #592]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	f003 0303 	and.w	r3, r3, #3
 8009618:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0310 	and.w	r3, r3, #16
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 80e4 	beq.w	80097f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d007      	beq.n	800963e <HAL_RCC_OscConfig+0x4a>
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	2b0c      	cmp	r3, #12
 8009632:	f040 808b 	bne.w	800974c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b01      	cmp	r3, #1
 800963a:	f040 8087 	bne.w	800974c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800963e:	4b89      	ldr	r3, [pc, #548]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d005      	beq.n	8009656 <HAL_RCC_OscConfig+0x62>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e3a2      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1a      	ldr	r2, [r3, #32]
 800965a:	4b82      	ldr	r3, [pc, #520]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0308 	and.w	r3, r3, #8
 8009662:	2b00      	cmp	r3, #0
 8009664:	d004      	beq.n	8009670 <HAL_RCC_OscConfig+0x7c>
 8009666:	4b7f      	ldr	r3, [pc, #508]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800966e:	e005      	b.n	800967c <HAL_RCC_OscConfig+0x88>
 8009670:	4b7c      	ldr	r3, [pc, #496]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009676:	091b      	lsrs	r3, r3, #4
 8009678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800967c:	4293      	cmp	r3, r2
 800967e:	d223      	bcs.n	80096c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fd55 	bl	800a134 <RCC_SetFlashLatencyFromMSIRange>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e383      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009694:	4b73      	ldr	r3, [pc, #460]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a72      	ldr	r2, [pc, #456]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800969a:	f043 0308 	orr.w	r3, r3, #8
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	4b70      	ldr	r3, [pc, #448]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	496d      	ldr	r1, [pc, #436]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096b2:	4b6c      	ldr	r3, [pc, #432]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	021b      	lsls	r3, r3, #8
 80096c0:	4968      	ldr	r1, [pc, #416]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	604b      	str	r3, [r1, #4]
 80096c6:	e025      	b.n	8009714 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096c8:	4b66      	ldr	r3, [pc, #408]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a65      	ldr	r2, [pc, #404]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096ce:	f043 0308 	orr.w	r3, r3, #8
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	4b63      	ldr	r3, [pc, #396]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	4960      	ldr	r1, [pc, #384]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096e6:	4b5f      	ldr	r3, [pc, #380]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	495b      	ldr	r1, [pc, #364]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fd15 	bl	800a134 <RCC_SetFlashLatencyFromMSIRange>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e343      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009714:	f000 fc4a 	bl	8009fac <HAL_RCC_GetSysClockFreq>
 8009718:	4602      	mov	r2, r0
 800971a:	4b52      	ldr	r3, [pc, #328]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	091b      	lsrs	r3, r3, #4
 8009720:	f003 030f 	and.w	r3, r3, #15
 8009724:	4950      	ldr	r1, [pc, #320]	@ (8009868 <HAL_RCC_OscConfig+0x274>)
 8009726:	5ccb      	ldrb	r3, [r1, r3]
 8009728:	f003 031f 	and.w	r3, r3, #31
 800972c:	fa22 f303 	lsr.w	r3, r2, r3
 8009730:	4a4e      	ldr	r2, [pc, #312]	@ (800986c <HAL_RCC_OscConfig+0x278>)
 8009732:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009734:	4b4e      	ldr	r3, [pc, #312]	@ (8009870 <HAL_RCC_OscConfig+0x27c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7fd fa85 	bl	8006c48 <HAL_InitTick>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d052      	beq.n	80097ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	e327      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d032      	beq.n	80097ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009754:	4b43      	ldr	r3, [pc, #268]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a42      	ldr	r2, [pc, #264]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009760:	f7fd fac2 	bl	8006ce8 <HAL_GetTick>
 8009764:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009766:	e008      	b.n	800977a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009768:	f7fd fabe 	bl	8006ce8 <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	2b02      	cmp	r3, #2
 8009774:	d901      	bls.n	800977a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e310      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800977a:	4b3a      	ldr	r3, [pc, #232]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0302 	and.w	r3, r3, #2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0f0      	beq.n	8009768 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009786:	4b37      	ldr	r3, [pc, #220]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a36      	ldr	r2, [pc, #216]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800978c:	f043 0308 	orr.w	r3, r3, #8
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	4b34      	ldr	r3, [pc, #208]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	4931      	ldr	r1, [pc, #196]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097a4:	4b2f      	ldr	r3, [pc, #188]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	492c      	ldr	r1, [pc, #176]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	604b      	str	r3, [r1, #4]
 80097b8:	e01a      	b.n	80097f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80097ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a29      	ldr	r2, [pc, #164]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80097c0:	f023 0301 	bic.w	r3, r3, #1
 80097c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80097c6:	f7fd fa8f 	bl	8006ce8 <HAL_GetTick>
 80097ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80097cc:	e008      	b.n	80097e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097ce:	f7fd fa8b 	bl	8006ce8 <HAL_GetTick>
 80097d2:	4602      	mov	r2, r0
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d901      	bls.n	80097e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e2dd      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80097e0:	4b20      	ldr	r3, [pc, #128]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f0      	bne.n	80097ce <HAL_RCC_OscConfig+0x1da>
 80097ec:	e000      	b.n	80097f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80097ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d074      	beq.n	80098e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d005      	beq.n	800980e <HAL_RCC_OscConfig+0x21a>
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b0c      	cmp	r3, #12
 8009806:	d10e      	bne.n	8009826 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2b03      	cmp	r3, #3
 800980c:	d10b      	bne.n	8009826 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800980e:	4b15      	ldr	r3, [pc, #84]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d064      	beq.n	80098e4 <HAL_RCC_OscConfig+0x2f0>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d160      	bne.n	80098e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e2ba      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800982e:	d106      	bne.n	800983e <HAL_RCC_OscConfig+0x24a>
 8009830:	4b0c      	ldr	r3, [pc, #48]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a0b      	ldr	r2, [pc, #44]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	e026      	b.n	800988c <HAL_RCC_OscConfig+0x298>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009846:	d115      	bne.n	8009874 <HAL_RCC_OscConfig+0x280>
 8009848:	4b06      	ldr	r3, [pc, #24]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a05      	ldr	r2, [pc, #20]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800984e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	4b03      	ldr	r3, [pc, #12]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a02      	ldr	r2, [pc, #8]	@ (8009864 <HAL_RCC_OscConfig+0x270>)
 800985a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	e014      	b.n	800988c <HAL_RCC_OscConfig+0x298>
 8009862:	bf00      	nop
 8009864:	40021000 	.word	0x40021000
 8009868:	08013ab0 	.word	0x08013ab0
 800986c:	20000000 	.word	0x20000000
 8009870:	20000004 	.word	0x20000004
 8009874:	4ba0      	ldr	r3, [pc, #640]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a9f      	ldr	r2, [pc, #636]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 800987a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	4b9d      	ldr	r3, [pc, #628]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a9c      	ldr	r2, [pc, #624]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800988a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d013      	beq.n	80098bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009894:	f7fd fa28 	bl	8006ce8 <HAL_GetTick>
 8009898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800989c:	f7fd fa24 	bl	8006ce8 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b64      	cmp	r3, #100	@ 0x64
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e276      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098ae:	4b92      	ldr	r3, [pc, #584]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0f0      	beq.n	800989c <HAL_RCC_OscConfig+0x2a8>
 80098ba:	e014      	b.n	80098e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098bc:	f7fd fa14 	bl	8006ce8 <HAL_GetTick>
 80098c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098c2:	e008      	b.n	80098d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098c4:	f7fd fa10 	bl	8006ce8 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b64      	cmp	r3, #100	@ 0x64
 80098d0:	d901      	bls.n	80098d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e262      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098d6:	4b88      	ldr	r3, [pc, #544]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f0      	bne.n	80098c4 <HAL_RCC_OscConfig+0x2d0>
 80098e2:	e000      	b.n	80098e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d060      	beq.n	80099b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b04      	cmp	r3, #4
 80098f6:	d005      	beq.n	8009904 <HAL_RCC_OscConfig+0x310>
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	2b0c      	cmp	r3, #12
 80098fc:	d119      	bne.n	8009932 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b02      	cmp	r3, #2
 8009902:	d116      	bne.n	8009932 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009904:	4b7c      	ldr	r3, [pc, #496]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_RCC_OscConfig+0x328>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e23f      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800991c:	4b76      	ldr	r3, [pc, #472]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	061b      	lsls	r3, r3, #24
 800992a:	4973      	ldr	r1, [pc, #460]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 800992c:	4313      	orrs	r3, r2
 800992e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009930:	e040      	b.n	80099b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d023      	beq.n	8009982 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800993a:	4b6f      	ldr	r3, [pc, #444]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a6e      	ldr	r2, [pc, #440]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009946:	f7fd f9cf 	bl	8006ce8 <HAL_GetTick>
 800994a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800994c:	e008      	b.n	8009960 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800994e:	f7fd f9cb 	bl	8006ce8 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e21d      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009960:	4b65      	ldr	r3, [pc, #404]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009968:	2b00      	cmp	r3, #0
 800996a:	d0f0      	beq.n	800994e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800996c:	4b62      	ldr	r3, [pc, #392]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	061b      	lsls	r3, r3, #24
 800997a:	495f      	ldr	r1, [pc, #380]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 800997c:	4313      	orrs	r3, r2
 800997e:	604b      	str	r3, [r1, #4]
 8009980:	e018      	b.n	80099b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009982:	4b5d      	ldr	r3, [pc, #372]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a5c      	ldr	r2, [pc, #368]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800998c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998e:	f7fd f9ab 	bl	8006ce8 <HAL_GetTick>
 8009992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009994:	e008      	b.n	80099a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009996:	f7fd f9a7 	bl	8006ce8 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e1f9      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099a8:	4b53      	ldr	r3, [pc, #332]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f0      	bne.n	8009996 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d03c      	beq.n	8009a3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01c      	beq.n	8009a02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099c8:	4b4b      	ldr	r3, [pc, #300]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 80099ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099ce:	4a4a      	ldr	r2, [pc, #296]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 80099d0:	f043 0301 	orr.w	r3, r3, #1
 80099d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099d8:	f7fd f986 	bl	8006ce8 <HAL_GetTick>
 80099dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80099de:	e008      	b.n	80099f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099e0:	f7fd f982 	bl	8006ce8 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d901      	bls.n	80099f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e1d4      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80099f2:	4b41      	ldr	r3, [pc, #260]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 80099f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d0ef      	beq.n	80099e0 <HAL_RCC_OscConfig+0x3ec>
 8009a00:	e01b      	b.n	8009a3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a02:	4b3d      	ldr	r3, [pc, #244]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a08:	4a3b      	ldr	r2, [pc, #236]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009a0a:	f023 0301 	bic.w	r3, r3, #1
 8009a0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a12:	f7fd f969 	bl	8006ce8 <HAL_GetTick>
 8009a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a18:	e008      	b.n	8009a2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a1a:	f7fd f965 	bl	8006ce8 <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d901      	bls.n	8009a2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e1b7      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a2c:	4b32      	ldr	r3, [pc, #200]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1ef      	bne.n	8009a1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80a6 	beq.w	8009b94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10d      	bne.n	8009a74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a58:	4b27      	ldr	r3, [pc, #156]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5c:	4a26      	ldr	r2, [pc, #152]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a64:	4b24      	ldr	r3, [pc, #144]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a6c:	60bb      	str	r3, [r7, #8]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a70:	2301      	movs	r3, #1
 8009a72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a74:	4b21      	ldr	r3, [pc, #132]	@ (8009afc <HAL_RCC_OscConfig+0x508>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d118      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a80:	4b1e      	ldr	r3, [pc, #120]	@ (8009afc <HAL_RCC_OscConfig+0x508>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a1d      	ldr	r2, [pc, #116]	@ (8009afc <HAL_RCC_OscConfig+0x508>)
 8009a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a8c:	f7fd f92c 	bl	8006ce8 <HAL_GetTick>
 8009a90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a94:	f7fd f928 	bl	8006ce8 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e17a      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aa6:	4b15      	ldr	r3, [pc, #84]	@ (8009afc <HAL_RCC_OscConfig+0x508>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0f0      	beq.n	8009a94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d108      	bne.n	8009acc <HAL_RCC_OscConfig+0x4d8>
 8009aba:	4b0f      	ldr	r3, [pc, #60]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009aca:	e029      	b.n	8009b20 <HAL_RCC_OscConfig+0x52c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	2b05      	cmp	r3, #5
 8009ad2:	d115      	bne.n	8009b00 <HAL_RCC_OscConfig+0x50c>
 8009ad4:	4b08      	ldr	r3, [pc, #32]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ada:	4a07      	ldr	r2, [pc, #28]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009adc:	f043 0304 	orr.w	r3, r3, #4
 8009ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009ae4:	4b04      	ldr	r3, [pc, #16]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aea:	4a03      	ldr	r2, [pc, #12]	@ (8009af8 <HAL_RCC_OscConfig+0x504>)
 8009aec:	f043 0301 	orr.w	r3, r3, #1
 8009af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009af4:	e014      	b.n	8009b20 <HAL_RCC_OscConfig+0x52c>
 8009af6:	bf00      	nop
 8009af8:	40021000 	.word	0x40021000
 8009afc:	40007000 	.word	0x40007000
 8009b00:	4b9c      	ldr	r3, [pc, #624]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b06:	4a9b      	ldr	r2, [pc, #620]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b08:	f023 0301 	bic.w	r3, r3, #1
 8009b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009b10:	4b98      	ldr	r3, [pc, #608]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b16:	4a97      	ldr	r2, [pc, #604]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b18:	f023 0304 	bic.w	r3, r3, #4
 8009b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d016      	beq.n	8009b56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b28:	f7fd f8de 	bl	8006ce8 <HAL_GetTick>
 8009b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b2e:	e00a      	b.n	8009b46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b30:	f7fd f8da 	bl	8006ce8 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d901      	bls.n	8009b46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e12a      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b46:	4b8b      	ldr	r3, [pc, #556]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0ed      	beq.n	8009b30 <HAL_RCC_OscConfig+0x53c>
 8009b54:	e015      	b.n	8009b82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b56:	f7fd f8c7 	bl	8006ce8 <HAL_GetTick>
 8009b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b5c:	e00a      	b.n	8009b74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b5e:	f7fd f8c3 	bl	8006ce8 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d901      	bls.n	8009b74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e113      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b74:	4b7f      	ldr	r3, [pc, #508]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1ed      	bne.n	8009b5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b82:	7ffb      	ldrb	r3, [r7, #31]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d105      	bne.n	8009b94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b88:	4b7a      	ldr	r3, [pc, #488]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b8c:	4a79      	ldr	r2, [pc, #484]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80fe 	beq.w	8009d9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	f040 80d0 	bne.w	8009d48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009ba8:	4b72      	ldr	r3, [pc, #456]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f003 0203 	and.w	r2, r3, #3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d130      	bne.n	8009c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d127      	bne.n	8009c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d11f      	bne.n	8009c1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009be8:	2a07      	cmp	r2, #7
 8009bea:	bf14      	ite	ne
 8009bec:	2201      	movne	r2, #1
 8009bee:	2200      	moveq	r2, #0
 8009bf0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d113      	bne.n	8009c1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c00:	085b      	lsrs	r3, r3, #1
 8009c02:	3b01      	subs	r3, #1
 8009c04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d109      	bne.n	8009c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c14:	085b      	lsrs	r3, r3, #1
 8009c16:	3b01      	subs	r3, #1
 8009c18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d06e      	beq.n	8009cfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	2b0c      	cmp	r3, #12
 8009c22:	d069      	beq.n	8009cf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009c24:	4b53      	ldr	r3, [pc, #332]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d105      	bne.n	8009c3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009c30:	4b50      	ldr	r3, [pc, #320]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e0ad      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009c40:	4b4c      	ldr	r3, [pc, #304]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a4b      	ldr	r2, [pc, #300]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009c4c:	f7fd f84c 	bl	8006ce8 <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c54:	f7fd f848 	bl	8006ce8 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e09a      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c66:	4b43      	ldr	r3, [pc, #268]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f0      	bne.n	8009c54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c72:	4b40      	ldr	r3, [pc, #256]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	4b40      	ldr	r3, [pc, #256]	@ (8009d78 <HAL_RCC_OscConfig+0x784>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009c82:	3a01      	subs	r2, #1
 8009c84:	0112      	lsls	r2, r2, #4
 8009c86:	4311      	orrs	r1, r2
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009c8c:	0212      	lsls	r2, r2, #8
 8009c8e:	4311      	orrs	r1, r2
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009c94:	0852      	lsrs	r2, r2, #1
 8009c96:	3a01      	subs	r2, #1
 8009c98:	0552      	lsls	r2, r2, #21
 8009c9a:	4311      	orrs	r1, r2
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009ca0:	0852      	lsrs	r2, r2, #1
 8009ca2:	3a01      	subs	r2, #1
 8009ca4:	0652      	lsls	r2, r2, #25
 8009ca6:	4311      	orrs	r1, r2
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009cac:	0912      	lsrs	r2, r2, #4
 8009cae:	0452      	lsls	r2, r2, #17
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	4930      	ldr	r1, [pc, #192]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009cd0:	f7fd f80a 	bl	8006ce8 <HAL_GetTick>
 8009cd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cd6:	e008      	b.n	8009cea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cd8:	f7fd f806 	bl	8006ce8 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e058      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cea:	4b22      	ldr	r3, [pc, #136]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009cf6:	e050      	b.n	8009d9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e04f      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d148      	bne.n	8009d9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009d08:	4b1a      	ldr	r3, [pc, #104]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a19      	ldr	r2, [pc, #100]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d14:	4b17      	ldr	r3, [pc, #92]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	4a16      	ldr	r2, [pc, #88]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d20:	f7fc ffe2 	bl	8006ce8 <HAL_GetTick>
 8009d24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d26:	e008      	b.n	8009d3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d28:	f7fc ffde 	bl	8006ce8 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d901      	bls.n	8009d3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e030      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0f0      	beq.n	8009d28 <HAL_RCC_OscConfig+0x734>
 8009d46:	e028      	b.n	8009d9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	2b0c      	cmp	r3, #12
 8009d4c:	d023      	beq.n	8009d96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d4e:	4b09      	ldr	r3, [pc, #36]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a08      	ldr	r2, [pc, #32]	@ (8009d74 <HAL_RCC_OscConfig+0x780>)
 8009d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d5a:	f7fc ffc5 	bl	8006ce8 <HAL_GetTick>
 8009d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d60:	e00c      	b.n	8009d7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d62:	f7fc ffc1 	bl	8006ce8 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d905      	bls.n	8009d7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e013      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
 8009d74:	40021000 	.word	0x40021000
 8009d78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d7c:	4b09      	ldr	r3, [pc, #36]	@ (8009da4 <HAL_RCC_OscConfig+0x7b0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1ec      	bne.n	8009d62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009d88:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <HAL_RCC_OscConfig+0x7b0>)
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	4905      	ldr	r1, [pc, #20]	@ (8009da4 <HAL_RCC_OscConfig+0x7b0>)
 8009d8e:	4b06      	ldr	r3, [pc, #24]	@ (8009da8 <HAL_RCC_OscConfig+0x7b4>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	60cb      	str	r3, [r1, #12]
 8009d94:	e001      	b.n	8009d9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3720      	adds	r7, #32
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	40021000 	.word	0x40021000
 8009da8:	feeefffc 	.word	0xfeeefffc

08009dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e0e7      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009dc0:	4b75      	ldr	r3, [pc, #468]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0307 	and.w	r3, r3, #7
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d910      	bls.n	8009df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dce:	4b72      	ldr	r3, [pc, #456]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f023 0207 	bic.w	r2, r3, #7
 8009dd6:	4970      	ldr	r1, [pc, #448]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dde:	4b6e      	ldr	r3, [pc, #440]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d001      	beq.n	8009df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e0cf      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d010      	beq.n	8009e1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	4b66      	ldr	r3, [pc, #408]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d908      	bls.n	8009e1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e0c:	4b63      	ldr	r3, [pc, #396]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	4960      	ldr	r1, [pc, #384]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d04c      	beq.n	8009ec4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d107      	bne.n	8009e42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e32:	4b5a      	ldr	r3, [pc, #360]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d121      	bne.n	8009e82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e0a6      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d107      	bne.n	8009e5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e4a:	4b54      	ldr	r3, [pc, #336]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d115      	bne.n	8009e82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e09a      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d107      	bne.n	8009e72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e62:	4b4e      	ldr	r3, [pc, #312]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d109      	bne.n	8009e82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e08e      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e72:	4b4a      	ldr	r3, [pc, #296]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e086      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009e82:	4b46      	ldr	r3, [pc, #280]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f023 0203 	bic.w	r2, r3, #3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	4943      	ldr	r1, [pc, #268]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e94:	f7fc ff28 	bl	8006ce8 <HAL_GetTick>
 8009e98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e9a:	e00a      	b.n	8009eb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e9c:	f7fc ff24 	bl	8006ce8 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e06e      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f003 020c 	and.w	r2, r3, #12
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d1eb      	bne.n	8009e9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d010      	beq.n	8009ef2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	4b31      	ldr	r3, [pc, #196]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d208      	bcs.n	8009ef2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	492b      	ldr	r1, [pc, #172]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ef2:	4b29      	ldr	r3, [pc, #164]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d210      	bcs.n	8009f22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f00:	4b25      	ldr	r3, [pc, #148]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f023 0207 	bic.w	r2, r3, #7
 8009f08:	4923      	ldr	r1, [pc, #140]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f10:	4b21      	ldr	r3, [pc, #132]	@ (8009f98 <HAL_RCC_ClockConfig+0x1ec>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d001      	beq.n	8009f22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e036      	b.n	8009f90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0304 	and.w	r3, r3, #4
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d008      	beq.n	8009f40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	4918      	ldr	r1, [pc, #96]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d009      	beq.n	8009f60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f4c:	4b13      	ldr	r3, [pc, #76]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	4910      	ldr	r1, [pc, #64]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009f60:	f000 f824 	bl	8009fac <HAL_RCC_GetSysClockFreq>
 8009f64:	4602      	mov	r2, r0
 8009f66:	4b0d      	ldr	r3, [pc, #52]	@ (8009f9c <HAL_RCC_ClockConfig+0x1f0>)
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	091b      	lsrs	r3, r3, #4
 8009f6c:	f003 030f 	and.w	r3, r3, #15
 8009f70:	490b      	ldr	r1, [pc, #44]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8009f72:	5ccb      	ldrb	r3, [r1, r3]
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7c:	4a09      	ldr	r2, [pc, #36]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8009f7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009f80:	4b09      	ldr	r3, [pc, #36]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1fc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fc fe5f 	bl	8006c48 <HAL_InitTick>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	40022000 	.word	0x40022000
 8009f9c:	40021000 	.word	0x40021000
 8009fa0:	08013ab0 	.word	0x08013ab0
 8009fa4:	20000000 	.word	0x20000000
 8009fa8:	20000004 	.word	0x20000004

08009fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b089      	sub	sp, #36	@ 0x24
 8009fb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	61fb      	str	r3, [r7, #28]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fba:	4b3e      	ldr	r3, [pc, #248]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f003 030c 	and.w	r3, r3, #12
 8009fc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fc4:	4b3b      	ldr	r3, [pc, #236]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f003 0303 	and.w	r3, r3, #3
 8009fcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d005      	beq.n	8009fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2b0c      	cmp	r3, #12
 8009fd8:	d121      	bne.n	800a01e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d11e      	bne.n	800a01e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009fe0:	4b34      	ldr	r3, [pc, #208]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d107      	bne.n	8009ffc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009fec:	4b31      	ldr	r3, [pc, #196]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ff2:	0a1b      	lsrs	r3, r3, #8
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	61fb      	str	r3, [r7, #28]
 8009ffa:	e005      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009ffc:	4b2d      	ldr	r3, [pc, #180]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	091b      	lsrs	r3, r3, #4
 800a002:	f003 030f 	and.w	r3, r3, #15
 800a006:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a008:	4a2b      	ldr	r2, [pc, #172]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a010:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10d      	bne.n	800a034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a01c:	e00a      	b.n	800a034 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	2b04      	cmp	r3, #4
 800a022:	d102      	bne.n	800a02a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a024:	4b25      	ldr	r3, [pc, #148]	@ (800a0bc <HAL_RCC_GetSysClockFreq+0x110>)
 800a026:	61bb      	str	r3, [r7, #24]
 800a028:	e004      	b.n	800a034 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d101      	bne.n	800a034 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a030:	4b23      	ldr	r3, [pc, #140]	@ (800a0c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800a032:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2b0c      	cmp	r3, #12
 800a038:	d134      	bne.n	800a0a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a03a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d003      	beq.n	800a052 <HAL_RCC_GetSysClockFreq+0xa6>
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d003      	beq.n	800a058 <HAL_RCC_GetSysClockFreq+0xac>
 800a050:	e005      	b.n	800a05e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a052:	4b1a      	ldr	r3, [pc, #104]	@ (800a0bc <HAL_RCC_GetSysClockFreq+0x110>)
 800a054:	617b      	str	r3, [r7, #20]
      break;
 800a056:	e005      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a058:	4b19      	ldr	r3, [pc, #100]	@ (800a0c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800a05a:	617b      	str	r3, [r7, #20]
      break;
 800a05c:	e002      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	617b      	str	r3, [r7, #20]
      break;
 800a062:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a064:	4b13      	ldr	r3, [pc, #76]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	091b      	lsrs	r3, r3, #4
 800a06a:	f003 0307 	and.w	r3, r3, #7
 800a06e:	3301      	adds	r3, #1
 800a070:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a072:	4b10      	ldr	r3, [pc, #64]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	0a1b      	lsrs	r3, r3, #8
 800a078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	fb03 f202 	mul.w	r2, r3, r2
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	fbb2 f3f3 	udiv	r3, r2, r3
 800a088:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a08a:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	0e5b      	lsrs	r3, r3, #25
 800a090:	f003 0303 	and.w	r3, r3, #3
 800a094:	3301      	adds	r3, #1
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a0a4:	69bb      	ldr	r3, [r7, #24]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3724      	adds	r7, #36	@ 0x24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	40021000 	.word	0x40021000
 800a0b8:	08013ac8 	.word	0x08013ac8
 800a0bc:	00f42400 	.word	0x00f42400
 800a0c0:	007a1200 	.word	0x007a1200

0800a0c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0c8:	4b03      	ldr	r3, [pc, #12]	@ (800a0d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	20000000 	.word	0x20000000

0800a0dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a0e0:	f7ff fff0 	bl	800a0c4 <HAL_RCC_GetHCLKFreq>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	0a1b      	lsrs	r3, r3, #8
 800a0ec:	f003 0307 	and.w	r3, r3, #7
 800a0f0:	4904      	ldr	r1, [pc, #16]	@ (800a104 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a0f2:	5ccb      	ldrb	r3, [r1, r3]
 800a0f4:	f003 031f 	and.w	r3, r3, #31
 800a0f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	40021000 	.word	0x40021000
 800a104:	08013ac0 	.word	0x08013ac0

0800a108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a10c:	f7ff ffda 	bl	800a0c4 <HAL_RCC_GetHCLKFreq>
 800a110:	4602      	mov	r2, r0
 800a112:	4b06      	ldr	r3, [pc, #24]	@ (800a12c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	0adb      	lsrs	r3, r3, #11
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	4904      	ldr	r1, [pc, #16]	@ (800a130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a11e:	5ccb      	ldrb	r3, [r1, r3]
 800a120:	f003 031f 	and.w	r3, r3, #31
 800a124:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a128:	4618      	mov	r0, r3
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	40021000 	.word	0x40021000
 800a130:	08013ac0 	.word	0x08013ac0

0800a134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a13c:	2300      	movs	r3, #0
 800a13e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a140:	4b2a      	ldr	r3, [pc, #168]	@ (800a1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a14c:	f7ff f9ee 	bl	800952c <HAL_PWREx_GetVoltageRange>
 800a150:	6178      	str	r0, [r7, #20]
 800a152:	e014      	b.n	800a17e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a154:	4b25      	ldr	r3, [pc, #148]	@ (800a1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a158:	4a24      	ldr	r2, [pc, #144]	@ (800a1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a15a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a15e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a160:	4b22      	ldr	r3, [pc, #136]	@ (800a1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a168:	60fb      	str	r3, [r7, #12]
 800a16a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a16c:	f7ff f9de 	bl	800952c <HAL_PWREx_GetVoltageRange>
 800a170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a172:	4b1e      	ldr	r3, [pc, #120]	@ (800a1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a176:	4a1d      	ldr	r2, [pc, #116]	@ (800a1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a17c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a184:	d10b      	bne.n	800a19e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b80      	cmp	r3, #128	@ 0x80
 800a18a:	d919      	bls.n	800a1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2ba0      	cmp	r3, #160	@ 0xa0
 800a190:	d902      	bls.n	800a198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a192:	2302      	movs	r3, #2
 800a194:	613b      	str	r3, [r7, #16]
 800a196:	e013      	b.n	800a1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a198:	2301      	movs	r3, #1
 800a19a:	613b      	str	r3, [r7, #16]
 800a19c:	e010      	b.n	800a1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b80      	cmp	r3, #128	@ 0x80
 800a1a2:	d902      	bls.n	800a1aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	e00a      	b.n	800a1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b80      	cmp	r3, #128	@ 0x80
 800a1ae:	d102      	bne.n	800a1b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	e004      	b.n	800a1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b70      	cmp	r3, #112	@ 0x70
 800a1ba:	d101      	bne.n	800a1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a1bc:	2301      	movs	r3, #1
 800a1be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f023 0207 	bic.w	r2, r3, #7
 800a1c8:	4909      	ldr	r1, [pc, #36]	@ (800a1f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a1d0:	4b07      	ldr	r3, [pc, #28]	@ (800a1f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d001      	beq.n	800a1e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	40022000 	.word	0x40022000

0800a1f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a200:	2300      	movs	r3, #0
 800a202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d041      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a214:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a218:	d02a      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a21a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a21e:	d824      	bhi.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a220:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a224:	d008      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a226:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a22a:	d81e      	bhi.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00a      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a234:	d010      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a236:	e018      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a238:	4b86      	ldr	r3, [pc, #536]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	4a85      	ldr	r2, [pc, #532]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a23e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a242:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a244:	e015      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3304      	adds	r3, #4
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fabb 	bl	800a7c8 <RCCEx_PLLSAI1_Config>
 800a252:	4603      	mov	r3, r0
 800a254:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a256:	e00c      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3320      	adds	r3, #32
 800a25c:	2100      	movs	r1, #0
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fba6 	bl	800a9b0 <RCCEx_PLLSAI2_Config>
 800a264:	4603      	mov	r3, r0
 800a266:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a268:	e003      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	74fb      	strb	r3, [r7, #19]
      break;
 800a26e:	e000      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a270:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a272:	7cfb      	ldrb	r3, [r7, #19]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10b      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a278:	4b76      	ldr	r3, [pc, #472]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a27e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a286:	4973      	ldr	r1, [pc, #460]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a28e:	e001      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a290:	7cfb      	ldrb	r3, [r7, #19]
 800a292:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d041      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2a8:	d02a      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a2aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2ae:	d824      	bhi.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a2b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2b4:	d008      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a2b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2ba:	d81e      	bhi.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00a      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a2c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2c4:	d010      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a2c6:	e018      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a2c8:	4b62      	ldr	r3, [pc, #392]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	4a61      	ldr	r2, [pc, #388]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a2d4:	e015      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fa73 	bl	800a7c8 <RCCEx_PLLSAI1_Config>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a2e6:	e00c      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3320      	adds	r3, #32
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 fb5e 	bl	800a9b0 <RCCEx_PLLSAI2_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a2f8:	e003      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	74fb      	strb	r3, [r7, #19]
      break;
 800a2fe:	e000      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a300:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a302:	7cfb      	ldrb	r3, [r7, #19]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10b      	bne.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a308:	4b52      	ldr	r3, [pc, #328]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a30e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a316:	494f      	ldr	r1, [pc, #316]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a31e:	e001      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a320:	7cfb      	ldrb	r3, [r7, #19]
 800a322:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 80a0 	beq.w	800a472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a332:	2300      	movs	r3, #0
 800a334:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a336:	4b47      	ldr	r3, [pc, #284]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a33a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a342:	2301      	movs	r3, #1
 800a344:	e000      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a346:	2300      	movs	r3, #0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a34c:	4b41      	ldr	r3, [pc, #260]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a34e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a350:	4a40      	ldr	r2, [pc, #256]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a356:	6593      	str	r3, [r2, #88]	@ 0x58
 800a358:	4b3e      	ldr	r3, [pc, #248]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a35a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a35c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a360:	60bb      	str	r3, [r7, #8]
 800a362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a364:	2301      	movs	r3, #1
 800a366:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a368:	4b3b      	ldr	r3, [pc, #236]	@ (800a458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a3a      	ldr	r2, [pc, #232]	@ (800a458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a36e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a374:	f7fc fcb8 	bl	8006ce8 <HAL_GetTick>
 800a378:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a37a:	e009      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a37c:	f7fc fcb4 	bl	8006ce8 <HAL_GetTick>
 800a380:	4602      	mov	r2, r0
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	2b02      	cmp	r3, #2
 800a388:	d902      	bls.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	74fb      	strb	r3, [r7, #19]
        break;
 800a38e:	e005      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a390:	4b31      	ldr	r3, [pc, #196]	@ (800a458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d0ef      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a39c:	7cfb      	ldrb	r3, [r7, #19]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d15c      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a3a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d01f      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d019      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a3c0:	4b24      	ldr	r3, [pc, #144]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3cc:	4b21      	ldr	r3, [pc, #132]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d2:	4a20      	ldr	r2, [pc, #128]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a3ec:	4a19      	ldr	r2, [pc, #100]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d016      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3fe:	f7fc fc73 	bl	8006ce8 <HAL_GetTick>
 800a402:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a404:	e00b      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a406:	f7fc fc6f 	bl	8006ce8 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a414:	4293      	cmp	r3, r2
 800a416:	d902      	bls.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	74fb      	strb	r3, [r7, #19]
            break;
 800a41c:	e006      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a41e:	4b0d      	ldr	r3, [pc, #52]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0ec      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a42c:	7cfb      	ldrb	r3, [r7, #19]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10c      	bne.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a432:	4b08      	ldr	r3, [pc, #32]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a438:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a442:	4904      	ldr	r1, [pc, #16]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a444:	4313      	orrs	r3, r2
 800a446:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a44a:	e009      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a44c:	7cfb      	ldrb	r3, [r7, #19]
 800a44e:	74bb      	strb	r3, [r7, #18]
 800a450:	e006      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a452:	bf00      	nop
 800a454:	40021000 	.word	0x40021000
 800a458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45c:	7cfb      	ldrb	r3, [r7, #19]
 800a45e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a460:	7c7b      	ldrb	r3, [r7, #17]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d105      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a466:	4b9e      	ldr	r3, [pc, #632]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a46a:	4a9d      	ldr	r2, [pc, #628]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a46c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a470:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00a      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a47e:	4b98      	ldr	r3, [pc, #608]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a484:	f023 0203 	bic.w	r2, r3, #3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48c:	4994      	ldr	r1, [pc, #592]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a4a0:	4b8f      	ldr	r3, [pc, #572]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a6:	f023 020c 	bic.w	r2, r3, #12
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4ae:	498c      	ldr	r1, [pc, #560]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a4c2:	4b87      	ldr	r3, [pc, #540]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d0:	4983      	ldr	r1, [pc, #524]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0308 	and.w	r3, r3, #8
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00a      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a4e4:	4b7e      	ldr	r3, [pc, #504]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4f2:	497b      	ldr	r1, [pc, #492]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a506:	4b76      	ldr	r3, [pc, #472]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a50c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a514:	4972      	ldr	r1, [pc, #456]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a516:	4313      	orrs	r3, r2
 800a518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0320 	and.w	r3, r3, #32
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00a      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a528:	4b6d      	ldr	r3, [pc, #436]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a52e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a536:	496a      	ldr	r1, [pc, #424]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a54a:	4b65      	ldr	r3, [pc, #404]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a550:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a558:	4961      	ldr	r1, [pc, #388]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a56c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a572:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a57a:	4959      	ldr	r1, [pc, #356]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a58e:	4b54      	ldr	r3, [pc, #336]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a594:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a59c:	4950      	ldr	r1, [pc, #320]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a5b0:	4b4b      	ldr	r3, [pc, #300]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5be:	4948      	ldr	r1, [pc, #288]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a5d2:	4b43      	ldr	r3, [pc, #268]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e0:	493f      	ldr	r1, [pc, #252]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d028      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a5f4:	4b3a      	ldr	r3, [pc, #232]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a602:	4937      	ldr	r1, [pc, #220]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a604:	4313      	orrs	r3, r2
 800a606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a60e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a612:	d106      	bne.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a614:	4b32      	ldr	r3, [pc, #200]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	4a31      	ldr	r2, [pc, #196]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a61a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a61e:	60d3      	str	r3, [r2, #12]
 800a620:	e011      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a626:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a62a:	d10c      	bne.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	2101      	movs	r1, #1
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f8c8 	bl	800a7c8 <RCCEx_PLLSAI1_Config>
 800a638:	4603      	mov	r3, r0
 800a63a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a63c:	7cfb      	ldrb	r3, [r7, #19]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a642:	7cfb      	ldrb	r3, [r7, #19]
 800a644:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d028      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a652:	4b23      	ldr	r3, [pc, #140]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a658:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a660:	491f      	ldr	r1, [pc, #124]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a662:	4313      	orrs	r3, r2
 800a664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a670:	d106      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a672:	4b1b      	ldr	r3, [pc, #108]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	4a1a      	ldr	r2, [pc, #104]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a67c:	60d3      	str	r3, [r2, #12]
 800a67e:	e011      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a684:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a688:	d10c      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3304      	adds	r3, #4
 800a68e:	2101      	movs	r1, #1
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f899 	bl	800a7c8 <RCCEx_PLLSAI1_Config>
 800a696:	4603      	mov	r3, r0
 800a698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a69a:	7cfb      	ldrb	r3, [r7, #19]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a6a0:	7cfb      	ldrb	r3, [r7, #19]
 800a6a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d02b      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6be:	4908      	ldr	r1, [pc, #32]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6ce:	d109      	bne.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6d0:	4b03      	ldr	r3, [pc, #12]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	4a02      	ldr	r2, [pc, #8]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6da:	60d3      	str	r3, [r2, #12]
 800a6dc:	e014      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a6de:	bf00      	nop
 800a6e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6ec:	d10c      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f867 	bl	800a7c8 <RCCEx_PLLSAI1_Config>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a6fe:	7cfb      	ldrb	r3, [r7, #19]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a704:	7cfb      	ldrb	r3, [r7, #19]
 800a706:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d02f      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a714:	4b2b      	ldr	r3, [pc, #172]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a71a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a722:	4928      	ldr	r1, [pc, #160]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a724:	4313      	orrs	r3, r2
 800a726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a72e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a732:	d10d      	bne.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3304      	adds	r3, #4
 800a738:	2102      	movs	r1, #2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f844 	bl	800a7c8 <RCCEx_PLLSAI1_Config>
 800a740:	4603      	mov	r3, r0
 800a742:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a744:	7cfb      	ldrb	r3, [r7, #19]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d014      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a74a:	7cfb      	ldrb	r3, [r7, #19]
 800a74c:	74bb      	strb	r3, [r7, #18]
 800a74e:	e011      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a758:	d10c      	bne.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3320      	adds	r3, #32
 800a75e:	2102      	movs	r1, #2
 800a760:	4618      	mov	r0, r3
 800a762:	f000 f925 	bl	800a9b0 <RCCEx_PLLSAI2_Config>
 800a766:	4603      	mov	r3, r0
 800a768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a76a:	7cfb      	ldrb	r3, [r7, #19]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a770:	7cfb      	ldrb	r3, [r7, #19]
 800a772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a780:	4b10      	ldr	r3, [pc, #64]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a786:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a78e:	490d      	ldr	r1, [pc, #52]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a790:	4313      	orrs	r3, r2
 800a792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00b      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7a2:	4b08      	ldr	r3, [pc, #32]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7b2:	4904      	ldr	r1, [pc, #16]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a7ba:	7cbb      	ldrb	r3, [r7, #18]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	40021000 	.word	0x40021000

0800a7c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a7d6:	4b75      	ldr	r3, [pc, #468]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d018      	beq.n	800a814 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a7e2:	4b72      	ldr	r3, [pc, #456]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	f003 0203 	and.w	r2, r3, #3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d10d      	bne.n	800a80e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
       ||
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d009      	beq.n	800a80e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a7fa:	4b6c      	ldr	r3, [pc, #432]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	091b      	lsrs	r3, r3, #4
 800a800:	f003 0307 	and.w	r3, r3, #7
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
       ||
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d047      	beq.n	800a89e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	73fb      	strb	r3, [r7, #15]
 800a812:	e044      	b.n	800a89e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d018      	beq.n	800a84e <RCCEx_PLLSAI1_Config+0x86>
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d825      	bhi.n	800a86c <RCCEx_PLLSAI1_Config+0xa4>
 800a820:	2b01      	cmp	r3, #1
 800a822:	d002      	beq.n	800a82a <RCCEx_PLLSAI1_Config+0x62>
 800a824:	2b02      	cmp	r3, #2
 800a826:	d009      	beq.n	800a83c <RCCEx_PLLSAI1_Config+0x74>
 800a828:	e020      	b.n	800a86c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a82a:	4b60      	ldr	r3, [pc, #384]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d11d      	bne.n	800a872 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a83a:	e01a      	b.n	800a872 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a83c:	4b5b      	ldr	r3, [pc, #364]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a844:	2b00      	cmp	r3, #0
 800a846:	d116      	bne.n	800a876 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a84c:	e013      	b.n	800a876 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a84e:	4b57      	ldr	r3, [pc, #348]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10f      	bne.n	800a87a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a85a:	4b54      	ldr	r3, [pc, #336]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a86a:	e006      	b.n	800a87a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
      break;
 800a870:	e004      	b.n	800a87c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a872:	bf00      	nop
 800a874:	e002      	b.n	800a87c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a876:	bf00      	nop
 800a878:	e000      	b.n	800a87c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a87a:	bf00      	nop
    }

    if(status == HAL_OK)
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10d      	bne.n	800a89e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a882:	4b4a      	ldr	r3, [pc, #296]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6819      	ldr	r1, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	3b01      	subs	r3, #1
 800a894:	011b      	lsls	r3, r3, #4
 800a896:	430b      	orrs	r3, r1
 800a898:	4944      	ldr	r1, [pc, #272]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d17d      	bne.n	800a9a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a8a4:	4b41      	ldr	r3, [pc, #260]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a40      	ldr	r2, [pc, #256]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8b0:	f7fc fa1a 	bl	8006ce8 <HAL_GetTick>
 800a8b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a8b6:	e009      	b.n	800a8cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a8b8:	f7fc fa16 	bl	8006ce8 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d902      	bls.n	800a8cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	73fb      	strb	r3, [r7, #15]
        break;
 800a8ca:	e005      	b.n	800a8d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a8cc:	4b37      	ldr	r3, [pc, #220]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1ef      	bne.n	800a8b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d160      	bne.n	800a9a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d111      	bne.n	800a908 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a8e4:	4b31      	ldr	r3, [pc, #196]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a8ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	6892      	ldr	r2, [r2, #8]
 800a8f4:	0211      	lsls	r1, r2, #8
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	68d2      	ldr	r2, [r2, #12]
 800a8fa:	0912      	lsrs	r2, r2, #4
 800a8fc:	0452      	lsls	r2, r2, #17
 800a8fe:	430a      	orrs	r2, r1
 800a900:	492a      	ldr	r1, [pc, #168]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a902:	4313      	orrs	r3, r2
 800a904:	610b      	str	r3, [r1, #16]
 800a906:	e027      	b.n	800a958 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d112      	bne.n	800a934 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a90e:	4b27      	ldr	r3, [pc, #156]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800a916:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6892      	ldr	r2, [r2, #8]
 800a91e:	0211      	lsls	r1, r2, #8
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6912      	ldr	r2, [r2, #16]
 800a924:	0852      	lsrs	r2, r2, #1
 800a926:	3a01      	subs	r2, #1
 800a928:	0552      	lsls	r2, r2, #21
 800a92a:	430a      	orrs	r2, r1
 800a92c:	491f      	ldr	r1, [pc, #124]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a92e:	4313      	orrs	r3, r2
 800a930:	610b      	str	r3, [r1, #16]
 800a932:	e011      	b.n	800a958 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a934:	4b1d      	ldr	r3, [pc, #116]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a93c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6892      	ldr	r2, [r2, #8]
 800a944:	0211      	lsls	r1, r2, #8
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	6952      	ldr	r2, [r2, #20]
 800a94a:	0852      	lsrs	r2, r2, #1
 800a94c:	3a01      	subs	r2, #1
 800a94e:	0652      	lsls	r2, r2, #25
 800a950:	430a      	orrs	r2, r1
 800a952:	4916      	ldr	r1, [pc, #88]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a954:	4313      	orrs	r3, r2
 800a956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a958:	4b14      	ldr	r3, [pc, #80]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a13      	ldr	r2, [pc, #76]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a95e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a964:	f7fc f9c0 	bl	8006ce8 <HAL_GetTick>
 800a968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a96a:	e009      	b.n	800a980 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a96c:	f7fc f9bc 	bl	8006ce8 <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d902      	bls.n	800a980 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	73fb      	strb	r3, [r7, #15]
          break;
 800a97e:	e005      	b.n	800a98c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a980:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0ef      	beq.n	800a96c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d106      	bne.n	800a9a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a992:	4b06      	ldr	r3, [pc, #24]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a994:	691a      	ldr	r2, [r3, #16]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	4904      	ldr	r1, [pc, #16]	@ (800a9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	40021000 	.word	0x40021000

0800a9b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a9be:	4b6a      	ldr	r3, [pc, #424]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	f003 0303 	and.w	r3, r3, #3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d018      	beq.n	800a9fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a9ca:	4b67      	ldr	r3, [pc, #412]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	f003 0203 	and.w	r2, r3, #3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d10d      	bne.n	800a9f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
       ||
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d009      	beq.n	800a9f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a9e2:	4b61      	ldr	r3, [pc, #388]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	091b      	lsrs	r3, r3, #4
 800a9e8:	f003 0307 	and.w	r3, r3, #7
 800a9ec:	1c5a      	adds	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
       ||
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d047      	beq.n	800aa86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	73fb      	strb	r3, [r7, #15]
 800a9fa:	e044      	b.n	800aa86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d018      	beq.n	800aa36 <RCCEx_PLLSAI2_Config+0x86>
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d825      	bhi.n	800aa54 <RCCEx_PLLSAI2_Config+0xa4>
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d002      	beq.n	800aa12 <RCCEx_PLLSAI2_Config+0x62>
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d009      	beq.n	800aa24 <RCCEx_PLLSAI2_Config+0x74>
 800aa10:	e020      	b.n	800aa54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aa12:	4b55      	ldr	r3, [pc, #340]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d11d      	bne.n	800aa5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa22:	e01a      	b.n	800aa5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aa24:	4b50      	ldr	r3, [pc, #320]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d116      	bne.n	800aa5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa34:	e013      	b.n	800aa5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800aa36:	4b4c      	ldr	r3, [pc, #304]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10f      	bne.n	800aa62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800aa42:	4b49      	ldr	r3, [pc, #292]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d109      	bne.n	800aa62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa52:	e006      	b.n	800aa62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	73fb      	strb	r3, [r7, #15]
      break;
 800aa58:	e004      	b.n	800aa64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aa5a:	bf00      	nop
 800aa5c:	e002      	b.n	800aa64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aa5e:	bf00      	nop
 800aa60:	e000      	b.n	800aa64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aa62:	bf00      	nop
    }

    if(status == HAL_OK)
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10d      	bne.n	800aa86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aa6a:	4b3f      	ldr	r3, [pc, #252]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6819      	ldr	r1, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	430b      	orrs	r3, r1
 800aa80:	4939      	ldr	r1, [pc, #228]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa82:	4313      	orrs	r3, r2
 800aa84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d167      	bne.n	800ab5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800aa8c:	4b36      	ldr	r3, [pc, #216]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a35      	ldr	r2, [pc, #212]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa98:	f7fc f926 	bl	8006ce8 <HAL_GetTick>
 800aa9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aa9e:	e009      	b.n	800aab4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800aaa0:	f7fc f922 	bl	8006ce8 <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d902      	bls.n	800aab4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	73fb      	strb	r3, [r7, #15]
        break;
 800aab2:	e005      	b.n	800aac0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aab4:	4b2c      	ldr	r3, [pc, #176]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1ef      	bne.n	800aaa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d14a      	bne.n	800ab5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d111      	bne.n	800aaf0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800aacc:	4b26      	ldr	r3, [pc, #152]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800aad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6892      	ldr	r2, [r2, #8]
 800aadc:	0211      	lsls	r1, r2, #8
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	68d2      	ldr	r2, [r2, #12]
 800aae2:	0912      	lsrs	r2, r2, #4
 800aae4:	0452      	lsls	r2, r2, #17
 800aae6:	430a      	orrs	r2, r1
 800aae8:	491f      	ldr	r1, [pc, #124]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	614b      	str	r3, [r1, #20]
 800aaee:	e011      	b.n	800ab14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800aaf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800aaf8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6892      	ldr	r2, [r2, #8]
 800ab00:	0211      	lsls	r1, r2, #8
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6912      	ldr	r2, [r2, #16]
 800ab06:	0852      	lsrs	r2, r2, #1
 800ab08:	3a01      	subs	r2, #1
 800ab0a:	0652      	lsls	r2, r2, #25
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	4916      	ldr	r1, [pc, #88]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ab14:	4b14      	ldr	r3, [pc, #80]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a13      	ldr	r2, [pc, #76]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab20:	f7fc f8e2 	bl	8006ce8 <HAL_GetTick>
 800ab24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ab26:	e009      	b.n	800ab3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ab28:	f7fc f8de 	bl	8006ce8 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d902      	bls.n	800ab3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	73fb      	strb	r3, [r7, #15]
          break;
 800ab3a:	e005      	b.n	800ab48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0ef      	beq.n	800ab28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ab4e:	4b06      	ldr	r3, [pc, #24]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab50:	695a      	ldr	r2, [r3, #20]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	4904      	ldr	r1, [pc, #16]	@ (800ab68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	40021000 	.word	0x40021000

0800ab6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e095      	b.n	800acaa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d108      	bne.n	800ab98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab8e:	d009      	beq.n	800aba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	61da      	str	r2, [r3, #28]
 800ab96:	e005      	b.n	800aba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d106      	bne.n	800abc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f8 fea6 	bl	8003910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800abe4:	d902      	bls.n	800abec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e002      	b.n	800abf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800abec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800abfa:	d007      	beq.n	800ac0c <HAL_SPI_Init+0xa0>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac04:	d002      	beq.n	800ac0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	431a      	orrs	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	431a      	orrs	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac44:	431a      	orrs	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac4e:	ea42 0103 	orr.w	r1, r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	0c1b      	lsrs	r3, r3, #16
 800ac68:	f003 0204 	and.w	r2, r3, #4
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac70:	f003 0310 	and.w	r3, r3, #16
 800ac74:	431a      	orrs	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7a:	f003 0308 	and.w	r3, r3, #8
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ac88:	ea42 0103 	orr.w	r1, r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
	...

0800acb4 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d102      	bne.n	800acd0 <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	73fb      	strb	r3, [r7, #15]
 800acce:	e061      	b.n	800ad94 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d106      	bne.n	800acea <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7f8 fec3 	bl	8003a70 <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2202      	movs	r2, #2
 800acee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f022 0220 	bic.w	r2, r2, #32
 800ad00:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f240 129f 	movw	r2, #415	@ 0x19f
 800ad0a:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	f023 0102 	bic.w	r1, r3, #2
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d112      	bne.n	800ad50 <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 800ad2a:	4b1d      	ldr	r3, [pc, #116]	@ (800ada0 <HAL_SWPMI_Init+0xec>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a1d      	ldr	r2, [pc, #116]	@ (800ada4 <HAL_SWPMI_Init+0xf0>)
 800ad30:	fba2 2303 	umull	r2, r3, r2, r3
 800ad34:	0d1b      	lsrs	r3, r3, #20
 800ad36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
 800ad3e:	3396      	adds	r3, #150	@ 0x96
 800ad40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ad42:	e002      	b.n	800ad4a <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1f9      	bne.n	800ad44 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	6892      	ldr	r2, [r2, #8]
 800ad58:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f023 010f 	bic.w	r1, r3, #15
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68da      	ldr	r2, [r3, #12]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0220 	orr.w	r2, r2, #32
 800ad92:	601a      	str	r2, [r3, #0]
  }

  return status;
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000000 	.word	0x20000000
 800ada4:	431bde83 	.word	0x431bde83

0800ada8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e049      	b.n	800ae4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d106      	bne.n	800add4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7f8 fef2 	bl	8003bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2202      	movs	r2, #2
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	3304      	adds	r3, #4
 800ade4:	4619      	mov	r1, r3
 800ade6:	4610      	mov	r0, r2
 800ade8:	f000 fc20 	bl	800b62c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	e049      	b.n	800aefc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f841 	bl	800af04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2202      	movs	r2, #2
 800ae86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4619      	mov	r1, r3
 800ae94:	4610      	mov	r0, r2
 800ae96:	f000 fbc9 	bl	800b62c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <HAL_TIM_PWM_Start+0x24>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b01      	cmp	r3, #1
 800af32:	bf14      	ite	ne
 800af34:	2301      	movne	r3, #1
 800af36:	2300      	moveq	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	e03c      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d109      	bne.n	800af56 <HAL_TIM_PWM_Start+0x3e>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	bf14      	ite	ne
 800af4e:	2301      	movne	r3, #1
 800af50:	2300      	moveq	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	e02f      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d109      	bne.n	800af70 <HAL_TIM_PWM_Start+0x58>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	bf14      	ite	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	2300      	moveq	r3, #0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	e022      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2b0c      	cmp	r3, #12
 800af74:	d109      	bne.n	800af8a <HAL_TIM_PWM_Start+0x72>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b01      	cmp	r3, #1
 800af80:	bf14      	ite	ne
 800af82:	2301      	movne	r3, #1
 800af84:	2300      	moveq	r3, #0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	e015      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b10      	cmp	r3, #16
 800af8e:	d109      	bne.n	800afa4 <HAL_TIM_PWM_Start+0x8c>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b01      	cmp	r3, #1
 800af9a:	bf14      	ite	ne
 800af9c:	2301      	movne	r3, #1
 800af9e:	2300      	moveq	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	e008      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b01      	cmp	r3, #1
 800afae:	bf14      	ite	ne
 800afb0:	2301      	movne	r3, #1
 800afb2:	2300      	moveq	r3, #0
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e09c      	b.n	800b0f8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d104      	bne.n	800afce <HAL_TIM_PWM_Start+0xb6>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afcc:	e023      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b04      	cmp	r3, #4
 800afd2:	d104      	bne.n	800afde <HAL_TIM_PWM_Start+0xc6>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afdc:	e01b      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b08      	cmp	r3, #8
 800afe2:	d104      	bne.n	800afee <HAL_TIM_PWM_Start+0xd6>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afec:	e013      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b0c      	cmp	r3, #12
 800aff2:	d104      	bne.n	800affe <HAL_TIM_PWM_Start+0xe6>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800affc:	e00b      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b10      	cmp	r3, #16
 800b002:	d104      	bne.n	800b00e <HAL_TIM_PWM_Start+0xf6>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b00c:	e003      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2202      	movs	r2, #2
 800b012:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2201      	movs	r2, #1
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 ff0e 	bl	800be40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a35      	ldr	r2, [pc, #212]	@ (800b100 <HAL_TIM_PWM_Start+0x1e8>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d013      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a34      	ldr	r2, [pc, #208]	@ (800b104 <HAL_TIM_PWM_Start+0x1ec>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00e      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a32      	ldr	r2, [pc, #200]	@ (800b108 <HAL_TIM_PWM_Start+0x1f0>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d009      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a31      	ldr	r2, [pc, #196]	@ (800b10c <HAL_TIM_PWM_Start+0x1f4>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d004      	beq.n	800b056 <HAL_TIM_PWM_Start+0x13e>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a2f      	ldr	r2, [pc, #188]	@ (800b110 <HAL_TIM_PWM_Start+0x1f8>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d101      	bne.n	800b05a <HAL_TIM_PWM_Start+0x142>
 800b056:	2301      	movs	r3, #1
 800b058:	e000      	b.n	800b05c <HAL_TIM_PWM_Start+0x144>
 800b05a:	2300      	movs	r3, #0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b06e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a22      	ldr	r2, [pc, #136]	@ (800b100 <HAL_TIM_PWM_Start+0x1e8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d01d      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x19e>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b082:	d018      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x19e>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a22      	ldr	r2, [pc, #136]	@ (800b114 <HAL_TIM_PWM_Start+0x1fc>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d013      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x19e>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a21      	ldr	r2, [pc, #132]	@ (800b118 <HAL_TIM_PWM_Start+0x200>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d00e      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x19e>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a1f      	ldr	r2, [pc, #124]	@ (800b11c <HAL_TIM_PWM_Start+0x204>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d009      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x19e>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a17      	ldr	r2, [pc, #92]	@ (800b104 <HAL_TIM_PWM_Start+0x1ec>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d004      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x19e>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a15      	ldr	r2, [pc, #84]	@ (800b108 <HAL_TIM_PWM_Start+0x1f0>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d115      	bne.n	800b0e2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	689a      	ldr	r2, [r3, #8]
 800b0bc:	4b18      	ldr	r3, [pc, #96]	@ (800b120 <HAL_TIM_PWM_Start+0x208>)
 800b0be:	4013      	ands	r3, r2
 800b0c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b06      	cmp	r3, #6
 800b0c6:	d015      	beq.n	800b0f4 <HAL_TIM_PWM_Start+0x1dc>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0ce:	d011      	beq.n	800b0f4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f042 0201 	orr.w	r2, r2, #1
 800b0de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e0:	e008      	b.n	800b0f4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f042 0201 	orr.w	r2, r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	e000      	b.n	800b0f6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	40012c00 	.word	0x40012c00
 800b104:	40013400 	.word	0x40013400
 800b108:	40014000 	.word	0x40014000
 800b10c:	40014400 	.word	0x40014400
 800b110:	40014800 	.word	0x40014800
 800b114:	40000400 	.word	0x40000400
 800b118:	40000800 	.word	0x40000800
 800b11c:	40000c00 	.word	0x40000c00
 800b120:	00010007 	.word	0x00010007

0800b124 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e097      	b.n	800b268 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7f8 fcef 	bl	8003b30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2202      	movs	r2, #2
 800b156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6812      	ldr	r2, [r2, #0]
 800b164:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800b168:	f023 0307 	bic.w	r3, r3, #7
 800b16c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3304      	adds	r3, #4
 800b176:	4619      	mov	r1, r3
 800b178:	4610      	mov	r0, r2
 800b17a:	f000 fa57 	bl	800b62c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b1c4:	f023 030c 	bic.w	r3, r3, #12
 800b1c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b1d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b1d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	021b      	lsls	r3, r3, #8
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	011a      	lsls	r2, r3, #4
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	031b      	lsls	r3, r3, #12
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b202:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b20a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	011b      	lsls	r3, r3, #4
 800b216:	4313      	orrs	r3, r2
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b286:	2b01      	cmp	r3, #1
 800b288:	d101      	bne.n	800b28e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b28a:	2302      	movs	r3, #2
 800b28c:	e0ff      	b.n	800b48e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b14      	cmp	r3, #20
 800b29a:	f200 80f0 	bhi.w	800b47e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b29e:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a4:	0800b2f9 	.word	0x0800b2f9
 800b2a8:	0800b47f 	.word	0x0800b47f
 800b2ac:	0800b47f 	.word	0x0800b47f
 800b2b0:	0800b47f 	.word	0x0800b47f
 800b2b4:	0800b339 	.word	0x0800b339
 800b2b8:	0800b47f 	.word	0x0800b47f
 800b2bc:	0800b47f 	.word	0x0800b47f
 800b2c0:	0800b47f 	.word	0x0800b47f
 800b2c4:	0800b37b 	.word	0x0800b37b
 800b2c8:	0800b47f 	.word	0x0800b47f
 800b2cc:	0800b47f 	.word	0x0800b47f
 800b2d0:	0800b47f 	.word	0x0800b47f
 800b2d4:	0800b3bb 	.word	0x0800b3bb
 800b2d8:	0800b47f 	.word	0x0800b47f
 800b2dc:	0800b47f 	.word	0x0800b47f
 800b2e0:	0800b47f 	.word	0x0800b47f
 800b2e4:	0800b3fd 	.word	0x0800b3fd
 800b2e8:	0800b47f 	.word	0x0800b47f
 800b2ec:	0800b47f 	.word	0x0800b47f
 800b2f0:	0800b47f 	.word	0x0800b47f
 800b2f4:	0800b43d 	.word	0x0800b43d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 fa2e 	bl	800b760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	699a      	ldr	r2, [r3, #24]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0208 	orr.w	r2, r2, #8
 800b312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	699a      	ldr	r2, [r3, #24]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f022 0204 	bic.w	r2, r2, #4
 800b322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6999      	ldr	r1, [r3, #24]
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	691a      	ldr	r2, [r3, #16]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	430a      	orrs	r2, r1
 800b334:	619a      	str	r2, [r3, #24]
      break;
 800b336:	e0a5      	b.n	800b484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68b9      	ldr	r1, [r7, #8]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fa9e 	bl	800b880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	699a      	ldr	r2, [r3, #24]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699a      	ldr	r2, [r3, #24]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6999      	ldr	r1, [r3, #24]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	021a      	lsls	r2, r3, #8
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	430a      	orrs	r2, r1
 800b376:	619a      	str	r2, [r3, #24]
      break;
 800b378:	e084      	b.n	800b484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fb07 	bl	800b994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	69da      	ldr	r2, [r3, #28]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f042 0208 	orr.w	r2, r2, #8
 800b394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	69da      	ldr	r2, [r3, #28]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f022 0204 	bic.w	r2, r2, #4
 800b3a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	69d9      	ldr	r1, [r3, #28]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	691a      	ldr	r2, [r3, #16]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	61da      	str	r2, [r3, #28]
      break;
 800b3b8:	e064      	b.n	800b484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68b9      	ldr	r1, [r7, #8]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fb6f 	bl	800baa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	69da      	ldr	r2, [r3, #28]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b3d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	69da      	ldr	r2, [r3, #28]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	69d9      	ldr	r1, [r3, #28]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	021a      	lsls	r2, r3, #8
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	61da      	str	r2, [r3, #28]
      break;
 800b3fa:	e043      	b.n	800b484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68b9      	ldr	r1, [r7, #8]
 800b402:	4618      	mov	r0, r3
 800b404:	f000 fbb8 	bl	800bb78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f042 0208 	orr.w	r2, r2, #8
 800b416:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f022 0204 	bic.w	r2, r2, #4
 800b426:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	691a      	ldr	r2, [r3, #16]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b43a:	e023      	b.n	800b484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68b9      	ldr	r1, [r7, #8]
 800b442:	4618      	mov	r0, r3
 800b444:	f000 fbfc 	bl	800bc40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b456:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b466:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	021a      	lsls	r2, r3, #8
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b47c:	e002      	b.n	800b484 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	75fb      	strb	r3, [r7, #23]
      break;
 800b482:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop

0800b498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d101      	bne.n	800b4b4 <HAL_TIM_ConfigClockSource+0x1c>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e0b6      	b.n	800b622 <HAL_TIM_ConfigClockSource+0x18a>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b4d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b4de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4f0:	d03e      	beq.n	800b570 <HAL_TIM_ConfigClockSource+0xd8>
 800b4f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4f6:	f200 8087 	bhi.w	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b4fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4fe:	f000 8086 	beq.w	800b60e <HAL_TIM_ConfigClockSource+0x176>
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b506:	d87f      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b508:	2b70      	cmp	r3, #112	@ 0x70
 800b50a:	d01a      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0xaa>
 800b50c:	2b70      	cmp	r3, #112	@ 0x70
 800b50e:	d87b      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b510:	2b60      	cmp	r3, #96	@ 0x60
 800b512:	d050      	beq.n	800b5b6 <HAL_TIM_ConfigClockSource+0x11e>
 800b514:	2b60      	cmp	r3, #96	@ 0x60
 800b516:	d877      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b518:	2b50      	cmp	r3, #80	@ 0x50
 800b51a:	d03c      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0xfe>
 800b51c:	2b50      	cmp	r3, #80	@ 0x50
 800b51e:	d873      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b520:	2b40      	cmp	r3, #64	@ 0x40
 800b522:	d058      	beq.n	800b5d6 <HAL_TIM_ConfigClockSource+0x13e>
 800b524:	2b40      	cmp	r3, #64	@ 0x40
 800b526:	d86f      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b528:	2b30      	cmp	r3, #48	@ 0x30
 800b52a:	d064      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x15e>
 800b52c:	2b30      	cmp	r3, #48	@ 0x30
 800b52e:	d86b      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b530:	2b20      	cmp	r3, #32
 800b532:	d060      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x15e>
 800b534:	2b20      	cmp	r3, #32
 800b536:	d867      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d05c      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x15e>
 800b53c:	2b10      	cmp	r3, #16
 800b53e:	d05a      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x15e>
 800b540:	e062      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b552:	f000 fc55 	bl	800be00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	609a      	str	r2, [r3, #8]
      break;
 800b56e:	e04f      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b580:	f000 fc3e 	bl	800be00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b592:	609a      	str	r2, [r3, #8]
      break;
 800b594:	e03c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f000 fbb2 	bl	800bd0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2150      	movs	r1, #80	@ 0x50
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fc0b 	bl	800bdca <TIM_ITRx_SetConfig>
      break;
 800b5b4:	e02c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f000 fbd1 	bl	800bd6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2160      	movs	r1, #96	@ 0x60
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fbfb 	bl	800bdca <TIM_ITRx_SetConfig>
      break;
 800b5d4:	e01c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f000 fb92 	bl	800bd0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2140      	movs	r1, #64	@ 0x40
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fbeb 	bl	800bdca <TIM_ITRx_SetConfig>
      break;
 800b5f4:	e00c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f000 fbe2 	bl	800bdca <TIM_ITRx_SetConfig>
      break;
 800b606:	e003      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b608:	2301      	movs	r3, #1
 800b60a:	73fb      	strb	r3, [r7, #15]
      break;
 800b60c:	e000      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b60e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b620:	7bfb      	ldrb	r3, [r7, #15]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a40      	ldr	r2, [pc, #256]	@ (800b740 <TIM_Base_SetConfig+0x114>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d013      	beq.n	800b66c <TIM_Base_SetConfig+0x40>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b64a:	d00f      	beq.n	800b66c <TIM_Base_SetConfig+0x40>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a3d      	ldr	r2, [pc, #244]	@ (800b744 <TIM_Base_SetConfig+0x118>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d00b      	beq.n	800b66c <TIM_Base_SetConfig+0x40>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a3c      	ldr	r2, [pc, #240]	@ (800b748 <TIM_Base_SetConfig+0x11c>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d007      	beq.n	800b66c <TIM_Base_SetConfig+0x40>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a3b      	ldr	r2, [pc, #236]	@ (800b74c <TIM_Base_SetConfig+0x120>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d003      	beq.n	800b66c <TIM_Base_SetConfig+0x40>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a3a      	ldr	r2, [pc, #232]	@ (800b750 <TIM_Base_SetConfig+0x124>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d108      	bne.n	800b67e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a2f      	ldr	r2, [pc, #188]	@ (800b740 <TIM_Base_SetConfig+0x114>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d01f      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b68c:	d01b      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a2c      	ldr	r2, [pc, #176]	@ (800b744 <TIM_Base_SetConfig+0x118>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d017      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a2b      	ldr	r2, [pc, #172]	@ (800b748 <TIM_Base_SetConfig+0x11c>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d013      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a2a      	ldr	r2, [pc, #168]	@ (800b74c <TIM_Base_SetConfig+0x120>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00f      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a29      	ldr	r2, [pc, #164]	@ (800b750 <TIM_Base_SetConfig+0x124>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d00b      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a28      	ldr	r2, [pc, #160]	@ (800b754 <TIM_Base_SetConfig+0x128>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d007      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a27      	ldr	r2, [pc, #156]	@ (800b758 <TIM_Base_SetConfig+0x12c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d003      	beq.n	800b6c6 <TIM_Base_SetConfig+0x9a>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a26      	ldr	r2, [pc, #152]	@ (800b75c <TIM_Base_SetConfig+0x130>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d108      	bne.n	800b6d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a10      	ldr	r2, [pc, #64]	@ (800b740 <TIM_Base_SetConfig+0x114>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d00f      	beq.n	800b724 <TIM_Base_SetConfig+0xf8>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a12      	ldr	r2, [pc, #72]	@ (800b750 <TIM_Base_SetConfig+0x124>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d00b      	beq.n	800b724 <TIM_Base_SetConfig+0xf8>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a11      	ldr	r2, [pc, #68]	@ (800b754 <TIM_Base_SetConfig+0x128>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d007      	beq.n	800b724 <TIM_Base_SetConfig+0xf8>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a10      	ldr	r2, [pc, #64]	@ (800b758 <TIM_Base_SetConfig+0x12c>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d003      	beq.n	800b724 <TIM_Base_SetConfig+0xf8>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a0f      	ldr	r2, [pc, #60]	@ (800b75c <TIM_Base_SetConfig+0x130>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d103      	bne.n	800b72c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	691a      	ldr	r2, [r3, #16]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	615a      	str	r2, [r3, #20]
}
 800b732:	bf00      	nop
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	40012c00 	.word	0x40012c00
 800b744:	40000400 	.word	0x40000400
 800b748:	40000800 	.word	0x40000800
 800b74c:	40000c00 	.word	0x40000c00
 800b750:	40013400 	.word	0x40013400
 800b754:	40014000 	.word	0x40014000
 800b758:	40014400 	.word	0x40014400
 800b75c:	40014800 	.word	0x40014800

0800b760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	f023 0201 	bic.w	r2, r3, #1
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	699b      	ldr	r3, [r3, #24]
 800b786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b78e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f023 0303 	bic.w	r3, r3, #3
 800b79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f023 0302 	bic.w	r3, r3, #2
 800b7ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a2c      	ldr	r2, [pc, #176]	@ (800b86c <TIM_OC1_SetConfig+0x10c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d00f      	beq.n	800b7e0 <TIM_OC1_SetConfig+0x80>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a2b      	ldr	r2, [pc, #172]	@ (800b870 <TIM_OC1_SetConfig+0x110>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d00b      	beq.n	800b7e0 <TIM_OC1_SetConfig+0x80>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b874 <TIM_OC1_SetConfig+0x114>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d007      	beq.n	800b7e0 <TIM_OC1_SetConfig+0x80>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a29      	ldr	r2, [pc, #164]	@ (800b878 <TIM_OC1_SetConfig+0x118>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d003      	beq.n	800b7e0 <TIM_OC1_SetConfig+0x80>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a28      	ldr	r2, [pc, #160]	@ (800b87c <TIM_OC1_SetConfig+0x11c>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d10c      	bne.n	800b7fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	f023 0308 	bic.w	r3, r3, #8
 800b7e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f023 0304 	bic.w	r3, r3, #4
 800b7f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b86c <TIM_OC1_SetConfig+0x10c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d00f      	beq.n	800b822 <TIM_OC1_SetConfig+0xc2>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a1a      	ldr	r2, [pc, #104]	@ (800b870 <TIM_OC1_SetConfig+0x110>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d00b      	beq.n	800b822 <TIM_OC1_SetConfig+0xc2>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a19      	ldr	r2, [pc, #100]	@ (800b874 <TIM_OC1_SetConfig+0x114>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d007      	beq.n	800b822 <TIM_OC1_SetConfig+0xc2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a18      	ldr	r2, [pc, #96]	@ (800b878 <TIM_OC1_SetConfig+0x118>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d003      	beq.n	800b822 <TIM_OC1_SetConfig+0xc2>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a17      	ldr	r2, [pc, #92]	@ (800b87c <TIM_OC1_SetConfig+0x11c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d111      	bne.n	800b846 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	4313      	orrs	r3, r2
 800b83a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4313      	orrs	r3, r2
 800b844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	621a      	str	r2, [r3, #32]
}
 800b860:	bf00      	nop
 800b862:	371c      	adds	r7, #28
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	40012c00 	.word	0x40012c00
 800b870:	40013400 	.word	0x40013400
 800b874:	40014000 	.word	0x40014000
 800b878:	40014400 	.word	0x40014400
 800b87c:	40014800 	.word	0x40014800

0800b880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b880:	b480      	push	{r7}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	f023 0210 	bic.w	r2, r3, #16
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	021b      	lsls	r3, r3, #8
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f023 0320 	bic.w	r3, r3, #32
 800b8ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	011b      	lsls	r3, r3, #4
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a28      	ldr	r2, [pc, #160]	@ (800b980 <TIM_OC2_SetConfig+0x100>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC2_SetConfig+0x6c>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a27      	ldr	r2, [pc, #156]	@ (800b984 <TIM_OC2_SetConfig+0x104>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d10d      	bne.n	800b908 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	011b      	lsls	r3, r3, #4
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a1d      	ldr	r2, [pc, #116]	@ (800b980 <TIM_OC2_SetConfig+0x100>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d00f      	beq.n	800b930 <TIM_OC2_SetConfig+0xb0>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a1c      	ldr	r2, [pc, #112]	@ (800b984 <TIM_OC2_SetConfig+0x104>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d00b      	beq.n	800b930 <TIM_OC2_SetConfig+0xb0>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a1b      	ldr	r2, [pc, #108]	@ (800b988 <TIM_OC2_SetConfig+0x108>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d007      	beq.n	800b930 <TIM_OC2_SetConfig+0xb0>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a1a      	ldr	r2, [pc, #104]	@ (800b98c <TIM_OC2_SetConfig+0x10c>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d003      	beq.n	800b930 <TIM_OC2_SetConfig+0xb0>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a19      	ldr	r2, [pc, #100]	@ (800b990 <TIM_OC2_SetConfig+0x110>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d113      	bne.n	800b958 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b93e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	4313      	orrs	r3, r2
 800b956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	621a      	str	r2, [r3, #32]
}
 800b972:	bf00      	nop
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	40012c00 	.word	0x40012c00
 800b984:	40013400 	.word	0x40013400
 800b988:	40014000 	.word	0x40014000
 800b98c:	40014400 	.word	0x40014400
 800b990:	40014800 	.word	0x40014800

0800b994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f023 0303 	bic.w	r3, r3, #3
 800b9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b9e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a27      	ldr	r2, [pc, #156]	@ (800ba90 <TIM_OC3_SetConfig+0xfc>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d003      	beq.n	800b9fe <TIM_OC3_SetConfig+0x6a>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a26      	ldr	r2, [pc, #152]	@ (800ba94 <TIM_OC3_SetConfig+0x100>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d10d      	bne.n	800ba1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	021b      	lsls	r3, r3, #8
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a1c      	ldr	r2, [pc, #112]	@ (800ba90 <TIM_OC3_SetConfig+0xfc>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00f      	beq.n	800ba42 <TIM_OC3_SetConfig+0xae>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a1b      	ldr	r2, [pc, #108]	@ (800ba94 <TIM_OC3_SetConfig+0x100>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00b      	beq.n	800ba42 <TIM_OC3_SetConfig+0xae>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a1a      	ldr	r2, [pc, #104]	@ (800ba98 <TIM_OC3_SetConfig+0x104>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d007      	beq.n	800ba42 <TIM_OC3_SetConfig+0xae>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a19      	ldr	r2, [pc, #100]	@ (800ba9c <TIM_OC3_SetConfig+0x108>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d003      	beq.n	800ba42 <TIM_OC3_SetConfig+0xae>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a18      	ldr	r2, [pc, #96]	@ (800baa0 <TIM_OC3_SetConfig+0x10c>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d113      	bne.n	800ba6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	011b      	lsls	r3, r3, #4
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	621a      	str	r2, [r3, #32]
}
 800ba84:	bf00      	nop
 800ba86:	371c      	adds	r7, #28
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr
 800ba90:	40012c00 	.word	0x40012c00
 800ba94:	40013400 	.word	0x40013400
 800ba98:	40014000 	.word	0x40014000
 800ba9c:	40014400 	.word	0x40014400
 800baa0:	40014800 	.word	0x40014800

0800baa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	4313      	orrs	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800baf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	031b      	lsls	r3, r3, #12
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a18      	ldr	r2, [pc, #96]	@ (800bb64 <TIM_OC4_SetConfig+0xc0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00f      	beq.n	800bb28 <TIM_OC4_SetConfig+0x84>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a17      	ldr	r2, [pc, #92]	@ (800bb68 <TIM_OC4_SetConfig+0xc4>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d00b      	beq.n	800bb28 <TIM_OC4_SetConfig+0x84>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a16      	ldr	r2, [pc, #88]	@ (800bb6c <TIM_OC4_SetConfig+0xc8>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d007      	beq.n	800bb28 <TIM_OC4_SetConfig+0x84>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a15      	ldr	r2, [pc, #84]	@ (800bb70 <TIM_OC4_SetConfig+0xcc>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d003      	beq.n	800bb28 <TIM_OC4_SetConfig+0x84>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a14      	ldr	r2, [pc, #80]	@ (800bb74 <TIM_OC4_SetConfig+0xd0>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d109      	bne.n	800bb3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	019b      	lsls	r3, r3, #6
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	621a      	str	r2, [r3, #32]
}
 800bb56:	bf00      	nop
 800bb58:	371c      	adds	r7, #28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	40012c00 	.word	0x40012c00
 800bb68:	40013400 	.word	0x40013400
 800bb6c:	40014000 	.word	0x40014000
 800bb70:	40014400 	.word	0x40014400
 800bb74:	40014800 	.word	0x40014800

0800bb78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bbbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	041b      	lsls	r3, r3, #16
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a17      	ldr	r2, [pc, #92]	@ (800bc2c <TIM_OC5_SetConfig+0xb4>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d00f      	beq.n	800bbf2 <TIM_OC5_SetConfig+0x7a>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a16      	ldr	r2, [pc, #88]	@ (800bc30 <TIM_OC5_SetConfig+0xb8>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d00b      	beq.n	800bbf2 <TIM_OC5_SetConfig+0x7a>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a15      	ldr	r2, [pc, #84]	@ (800bc34 <TIM_OC5_SetConfig+0xbc>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d007      	beq.n	800bbf2 <TIM_OC5_SetConfig+0x7a>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a14      	ldr	r2, [pc, #80]	@ (800bc38 <TIM_OC5_SetConfig+0xc0>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d003      	beq.n	800bbf2 <TIM_OC5_SetConfig+0x7a>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a13      	ldr	r2, [pc, #76]	@ (800bc3c <TIM_OC5_SetConfig+0xc4>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d109      	bne.n	800bc06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	021b      	lsls	r3, r3, #8
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	621a      	str	r2, [r3, #32]
}
 800bc20:	bf00      	nop
 800bc22:	371c      	adds	r7, #28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	40012c00 	.word	0x40012c00
 800bc30:	40013400 	.word	0x40013400
 800bc34:	40014000 	.word	0x40014000
 800bc38:	40014400 	.word	0x40014400
 800bc3c:	40014800 	.word	0x40014800

0800bc40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	021b      	lsls	r3, r3, #8
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	051b      	lsls	r3, r3, #20
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a18      	ldr	r2, [pc, #96]	@ (800bcf8 <TIM_OC6_SetConfig+0xb8>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d00f      	beq.n	800bcbc <TIM_OC6_SetConfig+0x7c>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a17      	ldr	r2, [pc, #92]	@ (800bcfc <TIM_OC6_SetConfig+0xbc>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d00b      	beq.n	800bcbc <TIM_OC6_SetConfig+0x7c>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a16      	ldr	r2, [pc, #88]	@ (800bd00 <TIM_OC6_SetConfig+0xc0>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d007      	beq.n	800bcbc <TIM_OC6_SetConfig+0x7c>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a15      	ldr	r2, [pc, #84]	@ (800bd04 <TIM_OC6_SetConfig+0xc4>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d003      	beq.n	800bcbc <TIM_OC6_SetConfig+0x7c>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a14      	ldr	r2, [pc, #80]	@ (800bd08 <TIM_OC6_SetConfig+0xc8>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d109      	bne.n	800bcd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	029b      	lsls	r3, r3, #10
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	621a      	str	r2, [r3, #32]
}
 800bcea:	bf00      	nop
 800bcec:	371c      	adds	r7, #28
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	40012c00 	.word	0x40012c00
 800bcfc:	40013400 	.word	0x40013400
 800bd00:	40014000 	.word	0x40014000
 800bd04:	40014400 	.word	0x40014400
 800bd08:	40014800 	.word	0x40014800

0800bd0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a1b      	ldr	r3, [r3, #32]
 800bd1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	f023 0201 	bic.w	r2, r3, #1
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	011b      	lsls	r3, r3, #4
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f023 030a 	bic.w	r3, r3, #10
 800bd48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	621a      	str	r2, [r3, #32]
}
 800bd5e:	bf00      	nop
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b087      	sub	sp, #28
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	f023 0210 	bic.w	r2, r3, #16
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6a1b      	ldr	r3, [r3, #32]
 800bd8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bd94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	031b      	lsls	r3, r3, #12
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bda6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	011b      	lsls	r3, r3, #4
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	621a      	str	r2, [r3, #32]
}
 800bdbe:	bf00      	nop
 800bdc0:	371c      	adds	r7, #28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b085      	sub	sp, #20
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bde0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	f043 0307 	orr.w	r3, r3, #7
 800bdec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	609a      	str	r2, [r3, #8]
}
 800bdf4:	bf00      	nop
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	021a      	lsls	r2, r3, #8
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	431a      	orrs	r2, r3
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	4313      	orrs	r3, r2
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	697a      	ldr	r2, [r7, #20]
 800be32:	609a      	str	r2, [r3, #8]
}
 800be34:	bf00      	nop
 800be36:	371c      	adds	r7, #28
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be40:	b480      	push	{r7}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f003 031f 	and.w	r3, r3, #31
 800be52:	2201      	movs	r2, #1
 800be54:	fa02 f303 	lsl.w	r3, r2, r3
 800be58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6a1a      	ldr	r2, [r3, #32]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	43db      	mvns	r3, r3
 800be62:	401a      	ands	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6a1a      	ldr	r2, [r3, #32]
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f003 031f 	and.w	r3, r3, #31
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	fa01 f303 	lsl.w	r3, r1, r3
 800be78:	431a      	orrs	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	621a      	str	r2, [r3, #32]
}
 800be7e:	bf00      	nop
 800be80:	371c      	adds	r7, #28
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
	...

0800be8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d101      	bne.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bea0:	2302      	movs	r3, #2
 800bea2:	e068      	b.n	800bf76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a2e      	ldr	r2, [pc, #184]	@ (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d004      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a2d      	ldr	r2, [pc, #180]	@ (800bf88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d108      	bne.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a1e      	ldr	r2, [pc, #120]	@ (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d01d      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf16:	d018      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a1b      	ldr	r2, [pc, #108]	@ (800bf8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d013      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a1a      	ldr	r2, [pc, #104]	@ (800bf90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d00e      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a18      	ldr	r2, [pc, #96]	@ (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d009      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a13      	ldr	r2, [pc, #76]	@ (800bf88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d004      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a14      	ldr	r2, [pc, #80]	@ (800bf98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d10c      	bne.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3714      	adds	r7, #20
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	40012c00 	.word	0x40012c00
 800bf88:	40013400 	.word	0x40013400
 800bf8c:	40000400 	.word	0x40000400
 800bf90:	40000800 	.word	0x40000800
 800bf94:	40000c00 	.word	0x40000c00
 800bf98:	40014000 	.word	0x40014000

0800bf9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d101      	bne.n	800bfb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e065      	b.n	800c084 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	4313      	orrs	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c01e:	4313      	orrs	r3, r2
 800c020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	041b      	lsls	r3, r3, #16
 800c02e:	4313      	orrs	r3, r2
 800c030:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a16      	ldr	r2, [pc, #88]	@ (800c090 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d004      	beq.n	800c046 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a14      	ldr	r2, [pc, #80]	@ (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d115      	bne.n	800c072 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c050:	051b      	lsls	r3, r3, #20
 800c052:	4313      	orrs	r3, r2
 800c054:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	69db      	ldr	r3, [r3, #28]
 800c060:	4313      	orrs	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	40012c00 	.word	0x40012c00
 800c094:	40013400 	.word	0x40013400

0800c098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e040      	b.n	800c12c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7f7 fe54 	bl	8003d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2224      	movs	r2, #36	@ 0x24
 800c0c4:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0201 	bic.w	r2, r2, #1
 800c0d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fbe8 	bl	800c8ac <UART_SetConfig>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d101      	bne.n	800c0e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e022      	b.n	800c12c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d002      	beq.n	800c0f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 fe94 	bl	800ce1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	685a      	ldr	r2, [r3, #4]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689a      	ldr	r2, [r3, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f042 0201 	orr.w	r2, r2, #1
 800c122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 ff1b 	bl	800cf60 <UART_CheckIdleState>
 800c12a:	4603      	mov	r3, r0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c134:	b480      	push	{r7}
 800c136:	b08b      	sub	sp, #44	@ 0x2c
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	4613      	mov	r3, r2
 800c140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c146:	2b20      	cmp	r3, #32
 800c148:	d156      	bne.n	800c1f8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <HAL_UART_Transmit_IT+0x22>
 800c150:	88fb      	ldrh	r3, [r7, #6]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e04f      	b.n	800c1fa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800c160:	2b01      	cmp	r3, #1
 800c162:	d101      	bne.n	800c168 <HAL_UART_Transmit_IT+0x34>
 800c164:	2302      	movs	r3, #2
 800c166:	e048      	b.n	800c1fa <HAL_UART_Transmit_IT+0xc6>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->pTxBuffPtr  = pData;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	88fa      	ldrh	r2, [r7, #6]
 800c17a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	88fa      	ldrh	r2, [r7, #6]
 800c182:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	669a      	str	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2221      	movs	r2, #33	@ 0x21
 800c198:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1a2:	d107      	bne.n	800c1b4 <HAL_UART_Transmit_IT+0x80>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d103      	bne.n	800c1b4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4a16      	ldr	r2, [pc, #88]	@ (800c208 <HAL_UART_Transmit_IT+0xd4>)
 800c1b0:	669a      	str	r2, [r3, #104]	@ 0x68
 800c1b2:	e002      	b.n	800c1ba <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	4a15      	ldr	r2, [pc, #84]	@ (800c20c <HAL_UART_Transmit_IT+0xd8>)
 800c1b8:	669a      	str	r2, [r3, #104]	@ 0x68
    }

    __HAL_UNLOCK(huart);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	e853 3f00 	ldrex	r3, [r3]
 800c1ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e0:	623b      	str	r3, [r7, #32]
 800c1e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e4:	69f9      	ldr	r1, [r7, #28]
 800c1e6:	6a3a      	ldr	r2, [r7, #32]
 800c1e8:	e841 2300 	strex	r3, r2, [r1]
 800c1ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1e6      	bne.n	800c1c2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	e000      	b.n	800c1fa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800c1f8:	2302      	movs	r3, #2
  }
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	372c      	adds	r7, #44	@ 0x2c
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	0800d4b9 	.word	0x0800d4b9
 800c20c:	0800d403 	.word	0x0800d403

0800c210 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b08a      	sub	sp, #40	@ 0x28
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	4613      	mov	r3, r2
 800c21c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c222:	2b20      	cmp	r3, #32
 800c224:	d142      	bne.n	800c2ac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <HAL_UART_Receive_IT+0x22>
 800c22c:	88fb      	ldrh	r3, [r7, #6]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e03b      	b.n	800c2ae <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d101      	bne.n	800c244 <HAL_UART_Receive_IT+0x34>
 800c240:	2302      	movs	r3, #2
 800c242:	e034      	b.n	800c2ae <HAL_UART_Receive_IT+0x9e>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a18      	ldr	r2, [pc, #96]	@ (800c2b8 <HAL_UART_Receive_IT+0xa8>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d01f      	beq.n	800c29c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c266:	2b00      	cmp	r3, #0
 800c268:	d018      	beq.n	800c29c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	613b      	str	r3, [r7, #16]
   return(result);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c27e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	461a      	mov	r2, r3
 800c286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c288:	623b      	str	r3, [r7, #32]
 800c28a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	69f9      	ldr	r1, [r7, #28]
 800c28e:	6a3a      	ldr	r2, [r7, #32]
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	61bb      	str	r3, [r7, #24]
   return(result);
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e6      	bne.n	800c26a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	68b9      	ldr	r1, [r7, #8]
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 ff6a 	bl	800d17c <UART_Start_Receive_IT>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	e000      	b.n	800c2ae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c2ac:	2302      	movs	r3, #2
  }
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3728      	adds	r7, #40	@ 0x28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	40008000 	.word	0x40008000

0800c2bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b0ba      	sub	sp, #232	@ 0xe8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	69db      	ldr	r3, [r3, #28]
 800c2ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c2e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c2e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c2f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d115      	bne.n	800c324 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2fc:	f003 0320 	and.w	r3, r3, #32
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00f      	beq.n	800c324 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c308:	f003 0320 	and.w	r3, r3, #32
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d009      	beq.n	800c324 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 82a6 	beq.w	800c866 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	4798      	blx	r3
      }
      return;
 800c322:	e2a0      	b.n	800c866 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 8117 	beq.w	800c55c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c33a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c33e:	4b85      	ldr	r3, [pc, #532]	@ (800c554 <HAL_UART_IRQHandler+0x298>)
 800c340:	4013      	ands	r3, r2
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 810a 	beq.w	800c55c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d011      	beq.n	800c378 <HAL_UART_IRQHandler+0xbc>
 800c354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00b      	beq.n	800c378 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2201      	movs	r2, #1
 800c366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c36e:	f043 0201 	orr.w	r2, r3, #1
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c37c:	f003 0302 	and.w	r3, r3, #2
 800c380:	2b00      	cmp	r3, #0
 800c382:	d011      	beq.n	800c3a8 <HAL_UART_IRQHandler+0xec>
 800c384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2202      	movs	r2, #2
 800c396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c39e:	f043 0204 	orr.w	r2, r3, #4
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d011      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x11c>
 800c3b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00b      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2204      	movs	r2, #4
 800c3c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ce:	f043 0202 	orr.w	r2, r3, #2
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3dc:	f003 0308 	and.w	r3, r3, #8
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d017      	beq.n	800c414 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3e8:	f003 0320 	and.w	r3, r3, #32
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d105      	bne.n	800c3fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c3f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00b      	beq.n	800c414 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2208      	movs	r2, #8
 800c402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c40a:	f043 0208 	orr.w	r2, r3, #8
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d012      	beq.n	800c446 <HAL_UART_IRQHandler+0x18a>
 800c420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00c      	beq.n	800c446 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c43c:	f043 0220 	orr.w	r2, r3, #32
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 820c 	beq.w	800c86a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c456:	f003 0320 	and.w	r3, r3, #32
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00d      	beq.n	800c47a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c45e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c462:	f003 0320 	and.w	r3, r3, #32
 800c466:	2b00      	cmp	r3, #0
 800c468:	d007      	beq.n	800c47a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c480:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c48e:	2b40      	cmp	r3, #64	@ 0x40
 800c490:	d005      	beq.n	800c49e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c496:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d04f      	beq.n	800c53e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 ff36 	bl	800d310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4ae:	2b40      	cmp	r3, #64	@ 0x40
 800c4b0:	d141      	bne.n	800c536 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4c0:	e853 3f00 	ldrex	r3, [r3]
 800c4c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c4c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3308      	adds	r3, #8
 800c4da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c4de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c4e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c4ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c4ee:	e841 2300 	strex	r3, r2, [r1]
 800c4f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c4f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1d9      	bne.n	800c4b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c502:	2b00      	cmp	r3, #0
 800c504:	d013      	beq.n	800c52e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c50a:	4a13      	ldr	r2, [pc, #76]	@ (800c558 <HAL_UART_IRQHandler+0x29c>)
 800c50c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c512:	4618      	mov	r0, r3
 800c514:	f7fb fecf 	bl	80082b6 <HAL_DMA_Abort_IT>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d017      	beq.n	800c54e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800c528:	4610      	mov	r0, r2
 800c52a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c52c:	e00f      	b.n	800c54e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f9a6 	bl	800c880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c534:	e00b      	b.n	800c54e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f9a2 	bl	800c880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c53c:	e007      	b.n	800c54e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f99e 	bl	800c880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
    return;
 800c54c:	e18d      	b.n	800c86a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c54e:	bf00      	nop
    return;
 800c550:	e18b      	b.n	800c86a <HAL_UART_IRQHandler+0x5ae>
 800c552:	bf00      	nop
 800c554:	04000120 	.word	0x04000120
 800c558:	0800d3d7 	.word	0x0800d3d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c560:	2b01      	cmp	r3, #1
 800c562:	f040 8146 	bne.w	800c7f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c56a:	f003 0310 	and.w	r3, r3, #16
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 813f 	beq.w	800c7f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c578:	f003 0310 	and.w	r3, r3, #16
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 8138 	beq.w	800c7f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2210      	movs	r2, #16
 800c588:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c594:	2b40      	cmp	r3, #64	@ 0x40
 800c596:	f040 80b4 	bne.w	800c702 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c5a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f000 815f 	beq.w	800c86e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c5b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	f080 8157 	bcs.w	800c86e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c5c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0320 	and.w	r3, r3, #32
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f040 8085 	bne.w	800c6e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5e8:	e853 3f00 	ldrex	r3, [r3]
 800c5ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c5f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c606:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c60a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c612:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c61e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1da      	bne.n	800c5dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3308      	adds	r3, #8
 800c62c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c630:	e853 3f00 	ldrex	r3, [r3]
 800c634:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c638:	f023 0301 	bic.w	r3, r3, #1
 800c63c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3308      	adds	r3, #8
 800c646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c64a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c64e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c650:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c652:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c656:	e841 2300 	strex	r3, r2, [r1]
 800c65a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c65c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1e1      	bne.n	800c626 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3308      	adds	r3, #8
 800c668:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c66c:	e853 3f00 	ldrex	r3, [r3]
 800c670:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3308      	adds	r3, #8
 800c682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c688:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c68c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e3      	bne.n	800c662 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2220      	movs	r2, #32
 800c69e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ae:	e853 3f00 	ldrex	r3, [r3]
 800c6b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c6b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b6:	f023 0310 	bic.w	r3, r3, #16
 800c6ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6d0:	e841 2300 	strex	r3, r2, [r1]
 800c6d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c6d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e4      	bne.n	800c6a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fb fdaa 	bl	800823a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f8ca 	bl	800c894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c700:	e0b5      	b.n	800c86e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c70e:	b29b      	uxth	r3, r3
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f000 80a7 	beq.w	800c872 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 80a2 	beq.w	800c872 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	e853 3f00 	ldrex	r3, [r3]
 800c73a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c73e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c750:	647b      	str	r3, [r7, #68]	@ 0x44
 800c752:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c758:	e841 2300 	strex	r3, r2, [r1]
 800c75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e4      	bne.n	800c72e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3308      	adds	r3, #8
 800c76a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76e:	e853 3f00 	ldrex	r3, [r3]
 800c772:	623b      	str	r3, [r7, #32]
   return(result);
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	f023 0301 	bic.w	r3, r3, #1
 800c77a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	3308      	adds	r3, #8
 800c784:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c788:	633a      	str	r2, [r7, #48]	@ 0x30
 800c78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c78e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c790:	e841 2300 	strex	r3, r2, [r1]
 800c794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1e3      	bne.n	800c764 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2220      	movs	r2, #32
 800c7a0:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	665a      	str	r2, [r3, #100]	@ 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	e853 3f00 	ldrex	r3, [r3]
 800c7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f023 0310 	bic.w	r3, r3, #16
 800c7c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c7d0:	61fb      	str	r3, [r7, #28]
 800c7d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d4:	69b9      	ldr	r1, [r7, #24]
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	e841 2300 	strex	r3, r2, [r1]
 800c7dc:	617b      	str	r3, [r7, #20]
   return(result);
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1e4      	bne.n	800c7ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f852 	bl	800c894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7f0:	e03f      	b.n	800c872 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00e      	beq.n	800c81c <HAL_UART_IRQHandler+0x560>
 800c7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d008      	beq.n	800c81c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f001 f839 	bl	800d88c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c81a:	e02d      	b.n	800c878 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00e      	beq.n	800c846 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c82c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c830:	2b00      	cmp	r3, #0
 800c832:	d008      	beq.n	800c846 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d01c      	beq.n	800c876 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	4798      	blx	r3
    }
    return;
 800c844:	e017      	b.n	800c876 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d012      	beq.n	800c878 <HAL_UART_IRQHandler+0x5bc>
 800c852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00c      	beq.n	800c878 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fe8a 	bl	800d578 <UART_EndTransmit_IT>
    return;
 800c864:	e008      	b.n	800c878 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c866:	bf00      	nop
 800c868:	e006      	b.n	800c878 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c86a:	bf00      	nop
 800c86c:	e004      	b.n	800c878 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c86e:	bf00      	nop
 800c870:	e002      	b.n	800c878 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c872:	bf00      	nop
 800c874:	e000      	b.n	800c878 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c876:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c878:	37e8      	adds	r7, #232	@ 0xe8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop

0800c880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c888:	bf00      	nop
 800c88a:	370c      	adds	r7, #12
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	460b      	mov	r3, r1
 800c89e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c8a0:	bf00      	nop
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8b0:	b08a      	sub	sp, #40	@ 0x28
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	69db      	ldr	r3, [r3, #28]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	4ba4      	ldr	r3, [pc, #656]	@ (800cb6c <UART_SetConfig+0x2c0>)
 800c8dc:	4013      	ands	r3, r2
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	6812      	ldr	r2, [r2, #0]
 800c8e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8e4:	430b      	orrs	r3, r1
 800c8e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a99      	ldr	r2, [pc, #612]	@ (800cb70 <UART_SetConfig+0x2c4>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d004      	beq.n	800c918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c914:	4313      	orrs	r3, r2
 800c916:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c928:	430a      	orrs	r2, r1
 800c92a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a90      	ldr	r2, [pc, #576]	@ (800cb74 <UART_SetConfig+0x2c8>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d126      	bne.n	800c984 <UART_SetConfig+0xd8>
 800c936:	4b90      	ldr	r3, [pc, #576]	@ (800cb78 <UART_SetConfig+0x2cc>)
 800c938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c93c:	f003 0303 	and.w	r3, r3, #3
 800c940:	2b03      	cmp	r3, #3
 800c942:	d81b      	bhi.n	800c97c <UART_SetConfig+0xd0>
 800c944:	a201      	add	r2, pc, #4	@ (adr r2, 800c94c <UART_SetConfig+0xa0>)
 800c946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94a:	bf00      	nop
 800c94c:	0800c95d 	.word	0x0800c95d
 800c950:	0800c96d 	.word	0x0800c96d
 800c954:	0800c965 	.word	0x0800c965
 800c958:	0800c975 	.word	0x0800c975
 800c95c:	2301      	movs	r3, #1
 800c95e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c962:	e116      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c964:	2302      	movs	r3, #2
 800c966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c96a:	e112      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c972:	e10e      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c97a:	e10a      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c982:	e106      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a7c      	ldr	r2, [pc, #496]	@ (800cb7c <UART_SetConfig+0x2d0>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d138      	bne.n	800ca00 <UART_SetConfig+0x154>
 800c98e:	4b7a      	ldr	r3, [pc, #488]	@ (800cb78 <UART_SetConfig+0x2cc>)
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c994:	f003 030c 	and.w	r3, r3, #12
 800c998:	2b0c      	cmp	r3, #12
 800c99a:	d82d      	bhi.n	800c9f8 <UART_SetConfig+0x14c>
 800c99c:	a201      	add	r2, pc, #4	@ (adr r2, 800c9a4 <UART_SetConfig+0xf8>)
 800c99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a2:	bf00      	nop
 800c9a4:	0800c9d9 	.word	0x0800c9d9
 800c9a8:	0800c9f9 	.word	0x0800c9f9
 800c9ac:	0800c9f9 	.word	0x0800c9f9
 800c9b0:	0800c9f9 	.word	0x0800c9f9
 800c9b4:	0800c9e9 	.word	0x0800c9e9
 800c9b8:	0800c9f9 	.word	0x0800c9f9
 800c9bc:	0800c9f9 	.word	0x0800c9f9
 800c9c0:	0800c9f9 	.word	0x0800c9f9
 800c9c4:	0800c9e1 	.word	0x0800c9e1
 800c9c8:	0800c9f9 	.word	0x0800c9f9
 800c9cc:	0800c9f9 	.word	0x0800c9f9
 800c9d0:	0800c9f9 	.word	0x0800c9f9
 800c9d4:	0800c9f1 	.word	0x0800c9f1
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9de:	e0d8      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9e6:	e0d4      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c9e8:	2304      	movs	r3, #4
 800c9ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9ee:	e0d0      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9f6:	e0cc      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9fe:	e0c8      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a5e      	ldr	r2, [pc, #376]	@ (800cb80 <UART_SetConfig+0x2d4>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d125      	bne.n	800ca56 <UART_SetConfig+0x1aa>
 800ca0a:	4b5b      	ldr	r3, [pc, #364]	@ (800cb78 <UART_SetConfig+0x2cc>)
 800ca0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca14:	2b30      	cmp	r3, #48	@ 0x30
 800ca16:	d016      	beq.n	800ca46 <UART_SetConfig+0x19a>
 800ca18:	2b30      	cmp	r3, #48	@ 0x30
 800ca1a:	d818      	bhi.n	800ca4e <UART_SetConfig+0x1a2>
 800ca1c:	2b20      	cmp	r3, #32
 800ca1e:	d00a      	beq.n	800ca36 <UART_SetConfig+0x18a>
 800ca20:	2b20      	cmp	r3, #32
 800ca22:	d814      	bhi.n	800ca4e <UART_SetConfig+0x1a2>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <UART_SetConfig+0x182>
 800ca28:	2b10      	cmp	r3, #16
 800ca2a:	d008      	beq.n	800ca3e <UART_SetConfig+0x192>
 800ca2c:	e00f      	b.n	800ca4e <UART_SetConfig+0x1a2>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca34:	e0ad      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca36:	2302      	movs	r3, #2
 800ca38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca3c:	e0a9      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca3e:	2304      	movs	r3, #4
 800ca40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca44:	e0a5      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca46:	2308      	movs	r3, #8
 800ca48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca4c:	e0a1      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca4e:	2310      	movs	r3, #16
 800ca50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca54:	e09d      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a4a      	ldr	r2, [pc, #296]	@ (800cb84 <UART_SetConfig+0x2d8>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d125      	bne.n	800caac <UART_SetConfig+0x200>
 800ca60:	4b45      	ldr	r3, [pc, #276]	@ (800cb78 <UART_SetConfig+0x2cc>)
 800ca62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ca6a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca6c:	d016      	beq.n	800ca9c <UART_SetConfig+0x1f0>
 800ca6e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca70:	d818      	bhi.n	800caa4 <UART_SetConfig+0x1f8>
 800ca72:	2b80      	cmp	r3, #128	@ 0x80
 800ca74:	d00a      	beq.n	800ca8c <UART_SetConfig+0x1e0>
 800ca76:	2b80      	cmp	r3, #128	@ 0x80
 800ca78:	d814      	bhi.n	800caa4 <UART_SetConfig+0x1f8>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d002      	beq.n	800ca84 <UART_SetConfig+0x1d8>
 800ca7e:	2b40      	cmp	r3, #64	@ 0x40
 800ca80:	d008      	beq.n	800ca94 <UART_SetConfig+0x1e8>
 800ca82:	e00f      	b.n	800caa4 <UART_SetConfig+0x1f8>
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca8a:	e082      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca92:	e07e      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca94:	2304      	movs	r3, #4
 800ca96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca9a:	e07a      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800ca9c:	2308      	movs	r3, #8
 800ca9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caa2:	e076      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800caa4:	2310      	movs	r3, #16
 800caa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caaa:	e072      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a35      	ldr	r2, [pc, #212]	@ (800cb88 <UART_SetConfig+0x2dc>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d12a      	bne.n	800cb0c <UART_SetConfig+0x260>
 800cab6:	4b30      	ldr	r3, [pc, #192]	@ (800cb78 <UART_SetConfig+0x2cc>)
 800cab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cabc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cac4:	d01a      	beq.n	800cafc <UART_SetConfig+0x250>
 800cac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800caca:	d81b      	bhi.n	800cb04 <UART_SetConfig+0x258>
 800cacc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cad0:	d00c      	beq.n	800caec <UART_SetConfig+0x240>
 800cad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cad6:	d815      	bhi.n	800cb04 <UART_SetConfig+0x258>
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d003      	beq.n	800cae4 <UART_SetConfig+0x238>
 800cadc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cae0:	d008      	beq.n	800caf4 <UART_SetConfig+0x248>
 800cae2:	e00f      	b.n	800cb04 <UART_SetConfig+0x258>
 800cae4:	2300      	movs	r3, #0
 800cae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caea:	e052      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800caec:	2302      	movs	r3, #2
 800caee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caf2:	e04e      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800caf4:	2304      	movs	r3, #4
 800caf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cafa:	e04a      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cafc:	2308      	movs	r3, #8
 800cafe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb02:	e046      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cb04:	2310      	movs	r3, #16
 800cb06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb0a:	e042      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a17      	ldr	r2, [pc, #92]	@ (800cb70 <UART_SetConfig+0x2c4>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d13a      	bne.n	800cb8c <UART_SetConfig+0x2e0>
 800cb16:	4b18      	ldr	r3, [pc, #96]	@ (800cb78 <UART_SetConfig+0x2cc>)
 800cb18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cb20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb24:	d01a      	beq.n	800cb5c <UART_SetConfig+0x2b0>
 800cb26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb2a:	d81b      	bhi.n	800cb64 <UART_SetConfig+0x2b8>
 800cb2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb30:	d00c      	beq.n	800cb4c <UART_SetConfig+0x2a0>
 800cb32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb36:	d815      	bhi.n	800cb64 <UART_SetConfig+0x2b8>
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <UART_SetConfig+0x298>
 800cb3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb40:	d008      	beq.n	800cb54 <UART_SetConfig+0x2a8>
 800cb42:	e00f      	b.n	800cb64 <UART_SetConfig+0x2b8>
 800cb44:	2300      	movs	r3, #0
 800cb46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb4a:	e022      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb52:	e01e      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cb54:	2304      	movs	r3, #4
 800cb56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb5a:	e01a      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cb5c:	2308      	movs	r3, #8
 800cb5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb62:	e016      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cb64:	2310      	movs	r3, #16
 800cb66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb6a:	e012      	b.n	800cb92 <UART_SetConfig+0x2e6>
 800cb6c:	efff69f3 	.word	0xefff69f3
 800cb70:	40008000 	.word	0x40008000
 800cb74:	40013800 	.word	0x40013800
 800cb78:	40021000 	.word	0x40021000
 800cb7c:	40004400 	.word	0x40004400
 800cb80:	40004800 	.word	0x40004800
 800cb84:	40004c00 	.word	0x40004c00
 800cb88:	40005000 	.word	0x40005000
 800cb8c:	2310      	movs	r3, #16
 800cb8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a9f      	ldr	r2, [pc, #636]	@ (800ce14 <UART_SetConfig+0x568>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d17a      	bne.n	800cc92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	d824      	bhi.n	800cbee <UART_SetConfig+0x342>
 800cba4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbac <UART_SetConfig+0x300>)
 800cba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbaa:	bf00      	nop
 800cbac:	0800cbd1 	.word	0x0800cbd1
 800cbb0:	0800cbef 	.word	0x0800cbef
 800cbb4:	0800cbd9 	.word	0x0800cbd9
 800cbb8:	0800cbef 	.word	0x0800cbef
 800cbbc:	0800cbdf 	.word	0x0800cbdf
 800cbc0:	0800cbef 	.word	0x0800cbef
 800cbc4:	0800cbef 	.word	0x0800cbef
 800cbc8:	0800cbef 	.word	0x0800cbef
 800cbcc:	0800cbe7 	.word	0x0800cbe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbd0:	f7fd fa84 	bl	800a0dc <HAL_RCC_GetPCLK1Freq>
 800cbd4:	61f8      	str	r0, [r7, #28]
        break;
 800cbd6:	e010      	b.n	800cbfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbd8:	4b8f      	ldr	r3, [pc, #572]	@ (800ce18 <UART_SetConfig+0x56c>)
 800cbda:	61fb      	str	r3, [r7, #28]
        break;
 800cbdc:	e00d      	b.n	800cbfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbde:	f7fd f9e5 	bl	8009fac <HAL_RCC_GetSysClockFreq>
 800cbe2:	61f8      	str	r0, [r7, #28]
        break;
 800cbe4:	e009      	b.n	800cbfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbea:	61fb      	str	r3, [r7, #28]
        break;
 800cbec:	e005      	b.n	800cbfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cbf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 80fb 	beq.w	800cdf8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	4413      	add	r3, r2
 800cc0c:	69fa      	ldr	r2, [r7, #28]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d305      	bcc.n	800cc1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cc18:	69fa      	ldr	r2, [r7, #28]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d903      	bls.n	800cc26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cc24:	e0e8      	b.n	800cdf8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	461c      	mov	r4, r3
 800cc2c:	4615      	mov	r5, r2
 800cc2e:	f04f 0200 	mov.w	r2, #0
 800cc32:	f04f 0300 	mov.w	r3, #0
 800cc36:	022b      	lsls	r3, r5, #8
 800cc38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cc3c:	0222      	lsls	r2, r4, #8
 800cc3e:	68f9      	ldr	r1, [r7, #12]
 800cc40:	6849      	ldr	r1, [r1, #4]
 800cc42:	0849      	lsrs	r1, r1, #1
 800cc44:	2000      	movs	r0, #0
 800cc46:	4688      	mov	r8, r1
 800cc48:	4681      	mov	r9, r0
 800cc4a:	eb12 0a08 	adds.w	sl, r2, r8
 800cc4e:	eb43 0b09 	adc.w	fp, r3, r9
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	603b      	str	r3, [r7, #0]
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc60:	4650      	mov	r0, sl
 800cc62:	4659      	mov	r1, fp
 800cc64:	f7f4 f820 	bl	8000ca8 <__aeabi_uldivmod>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc76:	d308      	bcc.n	800cc8a <UART_SetConfig+0x3de>
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc7e:	d204      	bcs.n	800cc8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	69ba      	ldr	r2, [r7, #24]
 800cc86:	60da      	str	r2, [r3, #12]
 800cc88:	e0b6      	b.n	800cdf8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cc90:	e0b2      	b.n	800cdf8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	69db      	ldr	r3, [r3, #28]
 800cc96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc9a:	d15e      	bne.n	800cd5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800cc9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cca0:	2b08      	cmp	r3, #8
 800cca2:	d828      	bhi.n	800ccf6 <UART_SetConfig+0x44a>
 800cca4:	a201      	add	r2, pc, #4	@ (adr r2, 800ccac <UART_SetConfig+0x400>)
 800cca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccaa:	bf00      	nop
 800ccac:	0800ccd1 	.word	0x0800ccd1
 800ccb0:	0800ccd9 	.word	0x0800ccd9
 800ccb4:	0800cce1 	.word	0x0800cce1
 800ccb8:	0800ccf7 	.word	0x0800ccf7
 800ccbc:	0800cce7 	.word	0x0800cce7
 800ccc0:	0800ccf7 	.word	0x0800ccf7
 800ccc4:	0800ccf7 	.word	0x0800ccf7
 800ccc8:	0800ccf7 	.word	0x0800ccf7
 800cccc:	0800ccef 	.word	0x0800ccef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccd0:	f7fd fa04 	bl	800a0dc <HAL_RCC_GetPCLK1Freq>
 800ccd4:	61f8      	str	r0, [r7, #28]
        break;
 800ccd6:	e014      	b.n	800cd02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccd8:	f7fd fa16 	bl	800a108 <HAL_RCC_GetPCLK2Freq>
 800ccdc:	61f8      	str	r0, [r7, #28]
        break;
 800ccde:	e010      	b.n	800cd02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cce0:	4b4d      	ldr	r3, [pc, #308]	@ (800ce18 <UART_SetConfig+0x56c>)
 800cce2:	61fb      	str	r3, [r7, #28]
        break;
 800cce4:	e00d      	b.n	800cd02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cce6:	f7fd f961 	bl	8009fac <HAL_RCC_GetSysClockFreq>
 800ccea:	61f8      	str	r0, [r7, #28]
        break;
 800ccec:	e009      	b.n	800cd02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccf2:	61fb      	str	r3, [r7, #28]
        break;
 800ccf4:	e005      	b.n	800cd02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cd00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d077      	beq.n	800cdf8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	005a      	lsls	r2, r3, #1
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	085b      	lsrs	r3, r3, #1
 800cd12:	441a      	add	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	2b0f      	cmp	r3, #15
 800cd22:	d916      	bls.n	800cd52 <UART_SetConfig+0x4a6>
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd2a:	d212      	bcs.n	800cd52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	f023 030f 	bic.w	r3, r3, #15
 800cd34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	085b      	lsrs	r3, r3, #1
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	f003 0307 	and.w	r3, r3, #7
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	8afb      	ldrh	r3, [r7, #22]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	8afa      	ldrh	r2, [r7, #22]
 800cd4e:	60da      	str	r2, [r3, #12]
 800cd50:	e052      	b.n	800cdf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cd58:	e04e      	b.n	800cdf8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cd5e:	2b08      	cmp	r3, #8
 800cd60:	d827      	bhi.n	800cdb2 <UART_SetConfig+0x506>
 800cd62:	a201      	add	r2, pc, #4	@ (adr r2, 800cd68 <UART_SetConfig+0x4bc>)
 800cd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd68:	0800cd8d 	.word	0x0800cd8d
 800cd6c:	0800cd95 	.word	0x0800cd95
 800cd70:	0800cd9d 	.word	0x0800cd9d
 800cd74:	0800cdb3 	.word	0x0800cdb3
 800cd78:	0800cda3 	.word	0x0800cda3
 800cd7c:	0800cdb3 	.word	0x0800cdb3
 800cd80:	0800cdb3 	.word	0x0800cdb3
 800cd84:	0800cdb3 	.word	0x0800cdb3
 800cd88:	0800cdab 	.word	0x0800cdab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd8c:	f7fd f9a6 	bl	800a0dc <HAL_RCC_GetPCLK1Freq>
 800cd90:	61f8      	str	r0, [r7, #28]
        break;
 800cd92:	e014      	b.n	800cdbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd94:	f7fd f9b8 	bl	800a108 <HAL_RCC_GetPCLK2Freq>
 800cd98:	61f8      	str	r0, [r7, #28]
        break;
 800cd9a:	e010      	b.n	800cdbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd9c:	4b1e      	ldr	r3, [pc, #120]	@ (800ce18 <UART_SetConfig+0x56c>)
 800cd9e:	61fb      	str	r3, [r7, #28]
        break;
 800cda0:	e00d      	b.n	800cdbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cda2:	f7fd f903 	bl	8009fac <HAL_RCC_GetSysClockFreq>
 800cda6:	61f8      	str	r0, [r7, #28]
        break;
 800cda8:	e009      	b.n	800cdbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdae:	61fb      	str	r3, [r7, #28]
        break;
 800cdb0:	e005      	b.n	800cdbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cdbc:	bf00      	nop
    }

    if (pclk != 0U)
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d019      	beq.n	800cdf8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	085a      	lsrs	r2, r3, #1
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	441a      	add	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	2b0f      	cmp	r3, #15
 800cddc:	d909      	bls.n	800cdf2 <UART_SetConfig+0x546>
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cde4:	d205      	bcs.n	800cdf2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	60da      	str	r2, [r3, #12]
 800cdf0:	e002      	b.n	800cdf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 800ce04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3728      	adds	r7, #40	@ 0x28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce12:	bf00      	nop
 800ce14:	40008000 	.word	0x40008000
 800ce18:	00f42400 	.word	0x00f42400

0800ce1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00a      	beq.n	800ce46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	430a      	orrs	r2, r1
 800ce44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce4a:	f003 0302 	and.w	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00a      	beq.n	800ce68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	430a      	orrs	r2, r1
 800ce66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00a      	beq.n	800ce8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	430a      	orrs	r2, r1
 800ce88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8e:	f003 0308 	and.w	r3, r3, #8
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00a      	beq.n	800ceac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	430a      	orrs	r2, r1
 800ceaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb0:	f003 0310 	and.w	r3, r3, #16
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00a      	beq.n	800cece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced2:	f003 0320 	and.w	r3, r3, #32
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00a      	beq.n	800cef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d01a      	beq.n	800cf32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf1a:	d10a      	bne.n	800cf32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	430a      	orrs	r2, r1
 800cf30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	430a      	orrs	r2, r1
 800cf52:	605a      	str	r2, [r3, #4]
  }
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af02      	add	r7, sp, #8
 800cf66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf70:	f7f9 feba 	bl	8006ce8 <HAL_GetTick>
 800cf74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 0308 	and.w	r3, r3, #8
 800cf80:	2b08      	cmp	r3, #8
 800cf82:	d10e      	bne.n	800cfa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f82d 	bl	800cff2 <UART_WaitOnFlagUntilTimeout>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d001      	beq.n	800cfa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e023      	b.n	800cfea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	d10e      	bne.n	800cfce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f817 	bl	800cff2 <UART_WaitOnFlagUntilTimeout>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e00d      	b.n	800cfea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2220      	movs	r2, #32
 800cfd2:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2220      	movs	r2, #32
 800cfd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b09c      	sub	sp, #112	@ 0x70
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	603b      	str	r3, [r7, #0]
 800cffe:	4613      	mov	r3, r2
 800d000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d002:	e0a5      	b.n	800d150 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d00a:	f000 80a1 	beq.w	800d150 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d00e:	f7f9 fe6b 	bl	8006ce8 <HAL_GetTick>
 800d012:	4602      	mov	r2, r0
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d302      	bcc.n	800d024 <UART_WaitOnFlagUntilTimeout+0x32>
 800d01e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d020:	2b00      	cmp	r3, #0
 800d022:	d13e      	bne.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d02c:	e853 3f00 	ldrex	r3, [r3]
 800d030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d034:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d038:	667b      	str	r3, [r7, #100]	@ 0x64
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d042:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d044:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d046:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d048:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d04a:	e841 2300 	strex	r3, r2, [r1]
 800d04e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1e6      	bne.n	800d024 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d060:	e853 3f00 	ldrex	r3, [r3]
 800d064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d068:	f023 0301 	bic.w	r3, r3, #1
 800d06c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3308      	adds	r3, #8
 800d074:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d076:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d078:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d07c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d07e:	e841 2300 	strex	r3, r2, [r1]
 800d082:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1e5      	bne.n	800d056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2220      	movs	r2, #32
 800d08e:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2220      	movs	r2, #32
 800d094:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e067      	b.n	800d172 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 0304 	and.w	r3, r3, #4
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d04f      	beq.n	800d150 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0be:	d147      	bne.n	800d150 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d0c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d2:	e853 3f00 	ldrex	r3, [r3]
 800d0d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0da:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d0de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d0ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0f0:	e841 2300 	strex	r3, r2, [r1]
 800d0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1e6      	bne.n	800d0ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3308      	adds	r3, #8
 800d102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	e853 3f00 	ldrex	r3, [r3]
 800d10a:	613b      	str	r3, [r7, #16]
   return(result);
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f023 0301 	bic.w	r3, r3, #1
 800d112:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3308      	adds	r3, #8
 800d11a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d11c:	623a      	str	r2, [r7, #32]
 800d11e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d120:	69f9      	ldr	r1, [r7, #28]
 800d122:	6a3a      	ldr	r2, [r7, #32]
 800d124:	e841 2300 	strex	r3, r2, [r1]
 800d128:	61bb      	str	r3, [r7, #24]
   return(result);
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e5      	bne.n	800d0fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2220      	movs	r2, #32
 800d134:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2220      	movs	r2, #32
 800d13a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2220      	movs	r2, #32
 800d140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 800d14c:	2303      	movs	r3, #3
 800d14e:	e010      	b.n	800d172 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	69da      	ldr	r2, [r3, #28]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	4013      	ands	r3, r2
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	bf0c      	ite	eq
 800d160:	2301      	moveq	r3, #1
 800d162:	2300      	movne	r3, #0
 800d164:	b2db      	uxtb	r3, r3
 800d166:	461a      	mov	r2, r3
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	f43f af4a 	beq.w	800d004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3770      	adds	r7, #112	@ 0x70
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b097      	sub	sp, #92	@ 0x5c
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	4613      	mov	r3, r2
 800d188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	88fa      	ldrh	r2, [r7, #6]
 800d194:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	88fa      	ldrh	r2, [r7, #6]
 800d19c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1ae:	d10e      	bne.n	800d1ce <UART_Start_Receive_IT+0x52>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d105      	bne.n	800d1c4 <UART_Start_Receive_IT+0x48>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d1be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d1c2:	e02d      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	22ff      	movs	r2, #255	@ 0xff
 800d1c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d1cc:	e028      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10d      	bne.n	800d1f2 <UART_Start_Receive_IT+0x76>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <UART_Start_Receive_IT+0x6c>
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	22ff      	movs	r2, #255	@ 0xff
 800d1e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d1e6:	e01b      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	227f      	movs	r2, #127	@ 0x7f
 800d1ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d1f0:	e016      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1fa:	d10d      	bne.n	800d218 <UART_Start_Receive_IT+0x9c>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d104      	bne.n	800d20e <UART_Start_Receive_IT+0x92>
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	227f      	movs	r2, #127	@ 0x7f
 800d208:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d20c:	e008      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	223f      	movs	r2, #63	@ 0x3f
 800d212:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d216:	e003      	b.n	800d220 <UART_Start_Receive_IT+0xa4>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2222      	movs	r2, #34	@ 0x22
 800d22c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3308      	adds	r3, #8
 800d234:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d238:	e853 3f00 	ldrex	r3, [r3]
 800d23c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	f043 0301 	orr.w	r3, r3, #1
 800d244:	657b      	str	r3, [r7, #84]	@ 0x54
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3308      	adds	r3, #8
 800d24c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d24e:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d250:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d25c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e5      	bne.n	800d22e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d26a:	d107      	bne.n	800d27c <UART_Start_Receive_IT+0x100>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	4a24      	ldr	r2, [pc, #144]	@ (800d308 <UART_Start_Receive_IT+0x18c>)
 800d278:	665a      	str	r2, [r3, #100]	@ 0x64
 800d27a:	e002      	b.n	800d282 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4a23      	ldr	r2, [pc, #140]	@ (800d30c <UART_Start_Receive_IT+0x190>)
 800d280:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  __HAL_UNLOCK(huart);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d019      	beq.n	800d2c6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2b2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d2b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2b8:	e841 2300 	strex	r3, r2, [r1]
 800d2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e6      	bne.n	800d292 <UART_Start_Receive_IT+0x116>
 800d2c4:	e018      	b.n	800d2f8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	e853 3f00 	ldrex	r3, [r3]
 800d2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	f043 0320 	orr.w	r3, r3, #32
 800d2da:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e4:	623b      	str	r3, [r7, #32]
 800d2e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e8:	69f9      	ldr	r1, [r7, #28]
 800d2ea:	6a3a      	ldr	r2, [r7, #32]
 800d2ec:	e841 2300 	strex	r3, r2, [r1]
 800d2f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1e6      	bne.n	800d2c6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	375c      	adds	r7, #92	@ 0x5c
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	0800d72d 	.word	0x0800d72d
 800d30c:	0800d5cd 	.word	0x0800d5cd

0800d310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d310:	b480      	push	{r7}
 800d312:	b095      	sub	sp, #84	@ 0x54
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d320:	e853 3f00 	ldrex	r3, [r3]
 800d324:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d32c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d336:	643b      	str	r3, [r7, #64]	@ 0x40
 800d338:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d33c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e6      	bne.n	800d318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3308      	adds	r3, #8
 800d350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d352:	6a3b      	ldr	r3, [r7, #32]
 800d354:	e853 3f00 	ldrex	r3, [r3]
 800d358:	61fb      	str	r3, [r7, #28]
   return(result);
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	f023 0301 	bic.w	r3, r3, #1
 800d360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3308      	adds	r3, #8
 800d368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d36a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d36c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d372:	e841 2300 	strex	r3, r2, [r1]
 800d376:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1e5      	bne.n	800d34a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d382:	2b01      	cmp	r3, #1
 800d384:	d118      	bne.n	800d3b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	e853 3f00 	ldrex	r3, [r3]
 800d392:	60bb      	str	r3, [r7, #8]
   return(result);
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f023 0310 	bic.w	r3, r3, #16
 800d39a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3a4:	61bb      	str	r3, [r7, #24]
 800d3a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a8:	6979      	ldr	r1, [r7, #20]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	e841 2300 	strex	r3, r2, [r1]
 800d3b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1e6      	bne.n	800d386 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	665a      	str	r2, [r3, #100]	@ 0x64
}
 800d3ca:	bf00      	nop
 800d3cc:	3754      	adds	r7, #84	@ 0x54
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b084      	sub	sp, #16
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3f4:	68f8      	ldr	r0, [r7, #12]
 800d3f6:	f7ff fa43 	bl	800c880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d402:	b480      	push	{r7}
 800d404:	b08f      	sub	sp, #60	@ 0x3c
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d40e:	2b21      	cmp	r3, #33	@ 0x21
 800d410:	d14c      	bne.n	800d4ac <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d418:	b29b      	uxth	r3, r3
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d132      	bne.n	800d484 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	e853 3f00 	ldrex	r3, [r3]
 800d42a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d432:	637b      	str	r3, [r7, #52]	@ 0x34
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	461a      	mov	r2, r3
 800d43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d43c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d43e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d444:	e841 2300 	strex	r3, r2, [r1]
 800d448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1e6      	bne.n	800d41e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	e853 3f00 	ldrex	r3, [r3]
 800d45c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d464:	633b      	str	r3, [r7, #48]	@ 0x30
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	461a      	mov	r2, r3
 800d46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d46e:	61bb      	str	r3, [r7, #24]
 800d470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d472:	6979      	ldr	r1, [r7, #20]
 800d474:	69ba      	ldr	r2, [r7, #24]
 800d476:	e841 2300 	strex	r3, r2, [r1]
 800d47a:	613b      	str	r3, [r7, #16]
   return(result);
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1e6      	bne.n	800d450 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d482:	e013      	b.n	800d4ac <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d488:	781a      	ldrb	r2, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d494:	1c5a      	adds	r2, r3, #1
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d4ac:	bf00      	nop
 800d4ae:	373c      	adds	r7, #60	@ 0x3c
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b091      	sub	sp, #68	@ 0x44
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d4c4:	2b21      	cmp	r3, #33	@ 0x21
 800d4c6:	d151      	bne.n	800d56c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d132      	bne.n	800d53a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4dc:	e853 3f00 	ldrex	r3, [r3]
 800d4e0:	623b      	str	r3, [r7, #32]
   return(result);
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4fa:	e841 2300 	strex	r3, r2, [r1]
 800d4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1e6      	bne.n	800d4d4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	e853 3f00 	ldrex	r3, [r3]
 800d512:	60fb      	str	r3, [r7, #12]
   return(result);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	461a      	mov	r2, r3
 800d522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d524:	61fb      	str	r3, [r7, #28]
 800d526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d528:	69b9      	ldr	r1, [r7, #24]
 800d52a:	69fa      	ldr	r2, [r7, #28]
 800d52c:	e841 2300 	strex	r3, r2, [r1]
 800d530:	617b      	str	r3, [r7, #20]
   return(result);
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1e6      	bne.n	800d506 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d538:	e018      	b.n	800d56c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d542:	881a      	ldrh	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d54c:	b292      	uxth	r2, r2
 800d54e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d554:	1c9a      	adds	r2, r3, #2
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d560:	b29b      	uxth	r3, r3
 800d562:	3b01      	subs	r3, #1
 800d564:	b29a      	uxth	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d56c:	bf00      	nop
 800d56e:	3744      	adds	r7, #68	@ 0x44
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b088      	sub	sp, #32
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	e853 3f00 	ldrex	r3, [r3]
 800d58c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d594:	61fb      	str	r3, [r7, #28]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	461a      	mov	r2, r3
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	61bb      	str	r3, [r7, #24]
 800d5a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a2:	6979      	ldr	r1, [r7, #20]
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	e841 2300 	strex	r3, r2, [r1]
 800d5aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1e6      	bne.n	800d580 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2220      	movs	r2, #32
 800d5b6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7f3 fe3e 	bl	8001240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5c4:	bf00      	nop
 800d5c6:	3720      	adds	r7, #32
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b096      	sub	sp, #88	@ 0x58
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d5da:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5e2:	2b22      	cmp	r3, #34	@ 0x22
 800d5e4:	f040 8094 	bne.w	800d710 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d5ee:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800d5f6:	b2d9      	uxtb	r1, r3
 800d5f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d602:	400a      	ands	r2, r1
 800d604:	b2d2      	uxtb	r2, r2
 800d606:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3b01      	subs	r3, #1
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d179      	bne.n	800d724 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d638:	e853 3f00 	ldrex	r3, [r3]
 800d63c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d644:	653b      	str	r3, [r7, #80]	@ 0x50
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d64e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d650:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d656:	e841 2300 	strex	r3, r2, [r1]
 800d65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e6      	bne.n	800d630 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3308      	adds	r3, #8
 800d668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	623b      	str	r3, [r7, #32]
   return(result);
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	f023 0301 	bic.w	r3, r3, #1
 800d678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	3308      	adds	r3, #8
 800d680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d682:	633a      	str	r2, [r7, #48]	@ 0x30
 800d684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e5      	bne.n	800d662 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2220      	movs	r2, #32
 800d69a:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d12e      	bne.n	800d708 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	e853 3f00 	ldrex	r3, [r3]
 800d6bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f023 0310 	bic.w	r3, r3, #16
 800d6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6ce:	61fb      	str	r3, [r7, #28]
 800d6d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d2:	69b9      	ldr	r1, [r7, #24]
 800d6d4:	69fa      	ldr	r2, [r7, #28]
 800d6d6:	e841 2300 	strex	r3, r2, [r1]
 800d6da:	617b      	str	r3, [r7, #20]
   return(result);
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1e6      	bne.n	800d6b0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69db      	ldr	r3, [r3, #28]
 800d6e8:	f003 0310 	and.w	r3, r3, #16
 800d6ec:	2b10      	cmp	r3, #16
 800d6ee:	d103      	bne.n	800d6f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2210      	movs	r2, #16
 800d6f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff f8c7 	bl	800c894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d706:	e00d      	b.n	800d724 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7f3 fda3 	bl	8001254 <HAL_UART_RxCpltCallback>
}
 800d70e:	e009      	b.n	800d724 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	8b1b      	ldrh	r3, [r3, #24]
 800d716:	b29a      	uxth	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f042 0208 	orr.w	r2, r2, #8
 800d720:	b292      	uxth	r2, r2
 800d722:	831a      	strh	r2, [r3, #24]
}
 800d724:	bf00      	nop
 800d726:	3758      	adds	r7, #88	@ 0x58
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b096      	sub	sp, #88	@ 0x58
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d73a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d742:	2b22      	cmp	r3, #34	@ 0x22
 800d744:	f040 8094 	bne.w	800d870 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d74e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d756:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d758:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800d75c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d760:	4013      	ands	r3, r2
 800d762:	b29a      	uxth	r2, r3
 800d764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d766:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d76c:	1c9a      	adds	r2, r3, #2
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d778:	b29b      	uxth	r3, r3
 800d77a:	3b01      	subs	r3, #1
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d179      	bne.n	800d884 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d798:	e853 3f00 	ldrex	r3, [r3]
 800d79c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e6      	bne.n	800d790 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	3308      	adds	r3, #8
 800d7c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	e853 3f00 	ldrex	r3, [r3]
 800d7d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	f023 0301 	bic.w	r3, r3, #1
 800d7d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	3308      	adds	r3, #8
 800d7e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7ea:	e841 2300 	strex	r3, r2, [r1]
 800d7ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e5      	bne.n	800d7c2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d806:	2b01      	cmp	r3, #1
 800d808:	d12e      	bne.n	800d868 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	e853 3f00 	ldrex	r3, [r3]
 800d81c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	f023 0310 	bic.w	r3, r3, #16
 800d824:	647b      	str	r3, [r7, #68]	@ 0x44
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d82e:	61bb      	str	r3, [r7, #24]
 800d830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d832:	6979      	ldr	r1, [r7, #20]
 800d834:	69ba      	ldr	r2, [r7, #24]
 800d836:	e841 2300 	strex	r3, r2, [r1]
 800d83a:	613b      	str	r3, [r7, #16]
   return(result);
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1e6      	bne.n	800d810 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	69db      	ldr	r3, [r3, #28]
 800d848:	f003 0310 	and.w	r3, r3, #16
 800d84c:	2b10      	cmp	r3, #16
 800d84e:	d103      	bne.n	800d858 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2210      	movs	r2, #16
 800d856:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff f817 	bl	800c894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d866:	e00d      	b.n	800d884 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7f3 fcf3 	bl	8001254 <HAL_UART_RxCpltCallback>
}
 800d86e:	e009      	b.n	800d884 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	8b1b      	ldrh	r3, [r3, #24]
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f042 0208 	orr.w	r2, r2, #8
 800d880:	b292      	uxth	r2, r2
 800d882:	831a      	strh	r2, [r3, #24]
}
 800d884:	bf00      	nop
 800d886:	3758      	adds	r7, #88	@ 0x58
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d894:	bf00      	nop
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d8ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8b2:	2b84      	cmp	r3, #132	@ 0x84
 800d8b4:	d005      	beq.n	800d8c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d8b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	4413      	add	r3, r2
 800d8be:	3303      	adds	r3, #3
 800d8c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d8d4:	f000 ff48 	bl	800e768 <vTaskStartScheduler>
  
  return osOK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8e0:	b089      	sub	sp, #36	@ 0x24
 800d8e2:	af04      	add	r7, sp, #16
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	695b      	ldr	r3, [r3, #20]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d020      	beq.n	800d932 <osThreadCreate+0x54>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d01c      	beq.n	800d932 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685c      	ldr	r4, [r3, #4]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	691e      	ldr	r6, [r3, #16]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff ffc8 	bl	800d8a0 <makeFreeRtosPriority>
 800d910:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d91a:	9202      	str	r2, [sp, #8]
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	9100      	str	r1, [sp, #0]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	4632      	mov	r2, r6
 800d924:	4629      	mov	r1, r5
 800d926:	4620      	mov	r0, r4
 800d928:	f000 fcd0 	bl	800e2cc <xTaskCreateStatic>
 800d92c:	4603      	mov	r3, r0
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	e01c      	b.n	800d96c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	685c      	ldr	r4, [r3, #4]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d93e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff ffaa 	bl	800d8a0 <makeFreeRtosPriority>
 800d94c:	4602      	mov	r2, r0
 800d94e:	f107 030c 	add.w	r3, r7, #12
 800d952:	9301      	str	r3, [sp, #4]
 800d954:	9200      	str	r2, [sp, #0]
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	4632      	mov	r2, r6
 800d95a:	4629      	mov	r1, r5
 800d95c:	4620      	mov	r0, r4
 800d95e:	f000 fd15 	bl	800e38c <xTaskCreate>
 800d962:	4603      	mov	r3, r0
 800d964:	2b01      	cmp	r3, #1
 800d966:	d001      	beq.n	800d96c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d968:	2300      	movs	r3, #0
 800d96a:	e000      	b.n	800d96e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d96c:	68fb      	ldr	r3, [r7, #12]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d976 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b084      	sub	sp, #16
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <osDelay+0x16>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	e000      	b.n	800d98e <osDelay+0x18>
 800d98c:	2301      	movs	r3, #1
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 feb4 	bl	800e6fc <vTaskDelay>
  
  return osOK;
 800d994:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b083      	sub	sp, #12
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f103 0208 	add.w	r2, r3, #8
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f103 0208 	add.w	r2, r3, #8
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f103 0208 	add.w	r2, r3, #8
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9d2:	bf00      	nop
 800d9d4:	370c      	adds	r7, #12
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b083      	sub	sp, #12
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9ec:	bf00      	nop
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	689a      	ldr	r2, [r3, #8]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	601a      	str	r2, [r3, #0]
}
 800da34:	bf00      	nop
 800da36:	3714      	adds	r7, #20
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da56:	d103      	bne.n	800da60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	e00c      	b.n	800da7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	3308      	adds	r3, #8
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	e002      	b.n	800da6e <vListInsert+0x2e>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	60fb      	str	r3, [r7, #12]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	429a      	cmp	r2, r3
 800da78:	d2f6      	bcs.n	800da68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	685a      	ldr	r2, [r3, #4]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	601a      	str	r2, [r3, #0]
}
 800daa6:	bf00      	nop
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dab2:	b480      	push	{r7}
 800dab4:	b085      	sub	sp, #20
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	6892      	ldr	r2, [r2, #8]
 800dac8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	6852      	ldr	r2, [r2, #4]
 800dad2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d103      	bne.n	800dae6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	689a      	ldr	r2, [r3, #8]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	1e5a      	subs	r2, r3, #1
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
	...

0800db08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10b      	bne.n	800db34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800db2e:	bf00      	nop
 800db30:	bf00      	nop
 800db32:	e7fd      	b.n	800db30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800db34:	f001 fc70 	bl	800f418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db40:	68f9      	ldr	r1, [r7, #12]
 800db42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800db44:	fb01 f303 	mul.w	r3, r1, r3
 800db48:	441a      	add	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db64:	3b01      	subs	r3, #1
 800db66:	68f9      	ldr	r1, [r7, #12]
 800db68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800db6a:	fb01 f303 	mul.w	r3, r1, r3
 800db6e:	441a      	add	r2, r3
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	22ff      	movs	r2, #255	@ 0xff
 800db78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	22ff      	movs	r2, #255	@ 0xff
 800db80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d114      	bne.n	800dbb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d01a      	beq.n	800dbc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	3310      	adds	r3, #16
 800db96:	4618      	mov	r0, r3
 800db98:	f001 f840 	bl	800ec1c <xTaskRemoveFromEventList>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d012      	beq.n	800dbc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dba2:	4b0d      	ldr	r3, [pc, #52]	@ (800dbd8 <xQueueGenericReset+0xd0>)
 800dba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dba8:	601a      	str	r2, [r3, #0]
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	e009      	b.n	800dbc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	3310      	adds	r3, #16
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fef0 	bl	800d99e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3324      	adds	r3, #36	@ 0x24
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff feeb 	bl	800d99e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dbc8:	f001 fc58 	bl	800f47c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dbcc:	2301      	movs	r3, #1
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	e000ed04 	.word	0xe000ed04

0800dbdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b08a      	sub	sp, #40	@ 0x28
 800dbe0:	af02      	add	r7, sp, #8
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10b      	bne.n	800dc08 <xQueueGenericCreate+0x2c>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	613b      	str	r3, [r7, #16]
}
 800dc02:	bf00      	nop
 800dc04:	bf00      	nop
 800dc06:	e7fd      	b.n	800dc04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	fb02 f303 	mul.w	r3, r2, r3
 800dc10:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	3348      	adds	r3, #72	@ 0x48
 800dc16:	4618      	mov	r0, r3
 800dc18:	f001 fcde 	bl	800f5d8 <pvPortMalloc>
 800dc1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d011      	beq.n	800dc48 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	3348      	adds	r3, #72	@ 0x48
 800dc2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc36:	79fa      	ldrb	r2, [r7, #7]
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	697a      	ldr	r2, [r7, #20]
 800dc40:	68b9      	ldr	r1, [r7, #8]
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f000 f805 	bl	800dc52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc48:	69bb      	ldr	r3, [r7, #24]
	}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3720      	adds	r7, #32
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b084      	sub	sp, #16
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	60f8      	str	r0, [r7, #12]
 800dc5a:	60b9      	str	r1, [r7, #8]
 800dc5c:	607a      	str	r2, [r7, #4]
 800dc5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d103      	bne.n	800dc6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	69ba      	ldr	r2, [r7, #24]
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	e002      	b.n	800dc74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc80:	2101      	movs	r1, #1
 800dc82:	69b8      	ldr	r0, [r7, #24]
 800dc84:	f7ff ff40 	bl	800db08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc88:	bf00      	nop
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08e      	sub	sp, #56	@ 0x38
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
 800dc9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10b      	bne.n	800dcc4 <xQueueGenericSend+0x34>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	e7fd      	b.n	800dcc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d103      	bne.n	800dcd2 <xQueueGenericSend+0x42>
 800dcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <xQueueGenericSend+0x46>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e000      	b.n	800dcd8 <xQueueGenericSend+0x48>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10b      	bne.n	800dcf4 <xQueueGenericSend+0x64>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dcee:	bf00      	nop
 800dcf0:	bf00      	nop
 800dcf2:	e7fd      	b.n	800dcf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d103      	bne.n	800dd02 <xQueueGenericSend+0x72>
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d101      	bne.n	800dd06 <xQueueGenericSend+0x76>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e000      	b.n	800dd08 <xQueueGenericSend+0x78>
 800dd06:	2300      	movs	r3, #0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10b      	bne.n	800dd24 <xQueueGenericSend+0x94>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	623b      	str	r3, [r7, #32]
}
 800dd1e:	bf00      	nop
 800dd20:	bf00      	nop
 800dd22:	e7fd      	b.n	800dd20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd24:	f001 f93a 	bl	800ef9c <xTaskGetSchedulerState>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d102      	bne.n	800dd34 <xQueueGenericSend+0xa4>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <xQueueGenericSend+0xa8>
 800dd34:	2301      	movs	r3, #1
 800dd36:	e000      	b.n	800dd3a <xQueueGenericSend+0xaa>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10b      	bne.n	800dd56 <xQueueGenericSend+0xc6>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	61fb      	str	r3, [r7, #28]
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	e7fd      	b.n	800dd52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd56:	f001 fb5f 	bl	800f418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d302      	bcc.n	800dd6c <xQueueGenericSend+0xdc>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	d129      	bne.n	800ddc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	68b9      	ldr	r1, [r7, #8]
 800dd70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd72:	f000 f971 	bl	800e058 <prvCopyDataToQueue>
 800dd76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d010      	beq.n	800dda2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd82:	3324      	adds	r3, #36	@ 0x24
 800dd84:	4618      	mov	r0, r3
 800dd86:	f000 ff49 	bl	800ec1c <xTaskRemoveFromEventList>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d013      	beq.n	800ddb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd90:	4b3f      	ldr	r3, [pc, #252]	@ (800de90 <xQueueGenericSend+0x200>)
 800dd92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	e00a      	b.n	800ddb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d007      	beq.n	800ddb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dda8:	4b39      	ldr	r3, [pc, #228]	@ (800de90 <xQueueGenericSend+0x200>)
 800ddaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ddb8:	f001 fb60 	bl	800f47c <vPortExitCritical>
				return pdPASS;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e063      	b.n	800de88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d103      	bne.n	800ddce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddc6:	f001 fb59 	bl	800f47c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	e05c      	b.n	800de88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d106      	bne.n	800dde2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddd4:	f107 0314 	add.w	r3, r7, #20
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 ff83 	bl	800ece4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddde:	2301      	movs	r3, #1
 800dde0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dde2:	f001 fb4b 	bl	800f47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dde6:	f000 fd21 	bl	800e82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddea:	f001 fb15 	bl	800f418 <vPortEnterCritical>
 800ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ddf4:	b25b      	sxtb	r3, r3
 800ddf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ddfa:	d103      	bne.n	800de04 <xQueueGenericSend+0x174>
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de0a:	b25b      	sxtb	r3, r3
 800de0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de10:	d103      	bne.n	800de1a <xQueueGenericSend+0x18a>
 800de12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de14:	2200      	movs	r2, #0
 800de16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de1a:	f001 fb2f 	bl	800f47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de1e:	1d3a      	adds	r2, r7, #4
 800de20:	f107 0314 	add.w	r3, r7, #20
 800de24:	4611      	mov	r1, r2
 800de26:	4618      	mov	r0, r3
 800de28:	f000 ff72 	bl	800ed10 <xTaskCheckForTimeOut>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d124      	bne.n	800de7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de34:	f000 fa08 	bl	800e248 <prvIsQueueFull>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d018      	beq.n	800de70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de40:	3310      	adds	r3, #16
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	4611      	mov	r1, r2
 800de46:	4618      	mov	r0, r3
 800de48:	f000 fec2 	bl	800ebd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de4e:	f000 f993 	bl	800e178 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de52:	f000 fcf9 	bl	800e848 <xTaskResumeAll>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f47f af7c 	bne.w	800dd56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800de5e:	4b0c      	ldr	r3, [pc, #48]	@ (800de90 <xQueueGenericSend+0x200>)
 800de60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de64:	601a      	str	r2, [r3, #0]
 800de66:	f3bf 8f4f 	dsb	sy
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	e772      	b.n	800dd56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800de70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de72:	f000 f981 	bl	800e178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de76:	f000 fce7 	bl	800e848 <xTaskResumeAll>
 800de7a:	e76c      	b.n	800dd56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de7e:	f000 f97b 	bl	800e178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de82:	f000 fce1 	bl	800e848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3738      	adds	r7, #56	@ 0x38
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	e000ed04 	.word	0xe000ed04

0800de94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b08c      	sub	sp, #48	@ 0x30
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dea0:	2300      	movs	r3, #0
 800dea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10b      	bne.n	800dec6 <xQueueReceive+0x32>
	__asm volatile
 800deae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb2:	f383 8811 	msr	BASEPRI, r3
 800deb6:	f3bf 8f6f 	isb	sy
 800deba:	f3bf 8f4f 	dsb	sy
 800debe:	623b      	str	r3, [r7, #32]
}
 800dec0:	bf00      	nop
 800dec2:	bf00      	nop
 800dec4:	e7fd      	b.n	800dec2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d103      	bne.n	800ded4 <xQueueReceive+0x40>
 800decc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d101      	bne.n	800ded8 <xQueueReceive+0x44>
 800ded4:	2301      	movs	r3, #1
 800ded6:	e000      	b.n	800deda <xQueueReceive+0x46>
 800ded8:	2300      	movs	r3, #0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d10b      	bne.n	800def6 <xQueueReceive+0x62>
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	61fb      	str	r3, [r7, #28]
}
 800def0:	bf00      	nop
 800def2:	bf00      	nop
 800def4:	e7fd      	b.n	800def2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800def6:	f001 f851 	bl	800ef9c <xTaskGetSchedulerState>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <xQueueReceive+0x72>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <xQueueReceive+0x76>
 800df06:	2301      	movs	r3, #1
 800df08:	e000      	b.n	800df0c <xQueueReceive+0x78>
 800df0a:	2300      	movs	r3, #0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10b      	bne.n	800df28 <xQueueReceive+0x94>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	61bb      	str	r3, [r7, #24]
}
 800df22:	bf00      	nop
 800df24:	bf00      	nop
 800df26:	e7fd      	b.n	800df24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df28:	f001 fa76 	bl	800f418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df34:	2b00      	cmp	r3, #0
 800df36:	d01f      	beq.n	800df78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df38:	68b9      	ldr	r1, [r7, #8]
 800df3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df3c:	f000 f8f6 	bl	800e12c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df42:	1e5a      	subs	r2, r3, #1
 800df44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00f      	beq.n	800df70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df52:	3310      	adds	r3, #16
 800df54:	4618      	mov	r0, r3
 800df56:	f000 fe61 	bl	800ec1c <xTaskRemoveFromEventList>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d007      	beq.n	800df70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df60:	4b3c      	ldr	r3, [pc, #240]	@ (800e054 <xQueueReceive+0x1c0>)
 800df62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df70:	f001 fa84 	bl	800f47c <vPortExitCritical>
				return pdPASS;
 800df74:	2301      	movs	r3, #1
 800df76:	e069      	b.n	800e04c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d103      	bne.n	800df86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df7e:	f001 fa7d 	bl	800f47c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800df82:	2300      	movs	r3, #0
 800df84:	e062      	b.n	800e04c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d106      	bne.n	800df9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df8c:	f107 0310 	add.w	r3, r7, #16
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fea7 	bl	800ece4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df96:	2301      	movs	r3, #1
 800df98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df9a:	f001 fa6f 	bl	800f47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df9e:	f000 fc45 	bl	800e82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfa2:	f001 fa39 	bl	800f418 <vPortEnterCritical>
 800dfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dfac:	b25b      	sxtb	r3, r3
 800dfae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfb2:	d103      	bne.n	800dfbc <xQueueReceive+0x128>
 800dfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dfc2:	b25b      	sxtb	r3, r3
 800dfc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfc8:	d103      	bne.n	800dfd2 <xQueueReceive+0x13e>
 800dfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfd2:	f001 fa53 	bl	800f47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfd6:	1d3a      	adds	r2, r7, #4
 800dfd8:	f107 0310 	add.w	r3, r7, #16
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f000 fe96 	bl	800ed10 <xTaskCheckForTimeOut>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d123      	bne.n	800e032 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfec:	f000 f916 	bl	800e21c <prvIsQueueEmpty>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d017      	beq.n	800e026 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff8:	3324      	adds	r3, #36	@ 0x24
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	4611      	mov	r1, r2
 800dffe:	4618      	mov	r0, r3
 800e000:	f000 fde6 	bl	800ebd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e006:	f000 f8b7 	bl	800e178 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e00a:	f000 fc1d 	bl	800e848 <xTaskResumeAll>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d189      	bne.n	800df28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e014:	4b0f      	ldr	r3, [pc, #60]	@ (800e054 <xQueueReceive+0x1c0>)
 800e016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	e780      	b.n	800df28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e028:	f000 f8a6 	bl	800e178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e02c:	f000 fc0c 	bl	800e848 <xTaskResumeAll>
 800e030:	e77a      	b.n	800df28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e034:	f000 f8a0 	bl	800e178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e038:	f000 fc06 	bl	800e848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e03c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e03e:	f000 f8ed 	bl	800e21c <prvIsQueueEmpty>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	f43f af6f 	beq.w	800df28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e04a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3730      	adds	r7, #48	@ 0x30
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	e000ed04 	.word	0xe000ed04

0800e058 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e064:	2300      	movs	r3, #0
 800e066:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e06c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10d      	bne.n	800e092 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d14d      	bne.n	800e11a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	4618      	mov	r0, r3
 800e084:	f000 ffa8 	bl	800efd8 <xTaskPriorityDisinherit>
 800e088:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	609a      	str	r2, [r3, #8]
 800e090:	e043      	b.n	800e11a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d119      	bne.n	800e0cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6858      	ldr	r0, [r3, #4]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	68b9      	ldr	r1, [r7, #8]
 800e0a4:	f002 fa4b 	bl	801053e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	685a      	ldr	r2, [r3, #4]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0b0:	441a      	add	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	685a      	ldr	r2, [r3, #4]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d32b      	bcc.n	800e11a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	605a      	str	r2, [r3, #4]
 800e0ca:	e026      	b.n	800e11a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68d8      	ldr	r0, [r3, #12]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	68b9      	ldr	r1, [r7, #8]
 800e0d8:	f002 fa31 	bl	801053e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	68da      	ldr	r2, [r3, #12]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0e4:	425b      	negs	r3, r3
 800e0e6:	441a      	add	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	68da      	ldr	r2, [r3, #12]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d207      	bcs.n	800e108 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	689a      	ldr	r2, [r3, #8]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e100:	425b      	negs	r3, r3
 800e102:	441a      	add	r2, r3
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d105      	bne.n	800e11a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	3b01      	subs	r3, #1
 800e118:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	1c5a      	adds	r2, r3, #1
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e122:	697b      	ldr	r3, [r7, #20]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d018      	beq.n	800e170 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68da      	ldr	r2, [r3, #12]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e146:	441a      	add	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	68da      	ldr	r2, [r3, #12]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	429a      	cmp	r2, r3
 800e156:	d303      	bcc.n	800e160 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68d9      	ldr	r1, [r3, #12]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e168:	461a      	mov	r2, r3
 800e16a:	6838      	ldr	r0, [r7, #0]
 800e16c:	f002 f9e7 	bl	801053e <memcpy>
	}
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e180:	f001 f94a 	bl	800f418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e18a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e18c:	e011      	b.n	800e1b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e192:	2b00      	cmp	r3, #0
 800e194:	d012      	beq.n	800e1bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	3324      	adds	r3, #36	@ 0x24
 800e19a:	4618      	mov	r0, r3
 800e19c:	f000 fd3e 	bl	800ec1c <xTaskRemoveFromEventList>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e1a6:	f000 fe17 	bl	800edd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e1aa:	7bfb      	ldrb	r3, [r7, #15]
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	dce9      	bgt.n	800e18e <prvUnlockQueue+0x16>
 800e1ba:	e000      	b.n	800e1be <prvUnlockQueue+0x46>
					break;
 800e1bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	22ff      	movs	r2, #255	@ 0xff
 800e1c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e1c6:	f001 f959 	bl	800f47c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e1ca:	f001 f925 	bl	800f418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1d6:	e011      	b.n	800e1fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d012      	beq.n	800e206 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3310      	adds	r3, #16
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f000 fd19 	bl	800ec1c <xTaskRemoveFromEventList>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d001      	beq.n	800e1f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e1f0:	f000 fdf2 	bl	800edd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e1f4:	7bbb      	ldrb	r3, [r7, #14]
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e200:	2b00      	cmp	r3, #0
 800e202:	dce9      	bgt.n	800e1d8 <prvUnlockQueue+0x60>
 800e204:	e000      	b.n	800e208 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e206:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	22ff      	movs	r2, #255	@ 0xff
 800e20c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e210:	f001 f934 	bl	800f47c <vPortExitCritical>
}
 800e214:	bf00      	nop
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e224:	f001 f8f8 	bl	800f418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d102      	bne.n	800e236 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e230:	2301      	movs	r3, #1
 800e232:	60fb      	str	r3, [r7, #12]
 800e234:	e001      	b.n	800e23a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e236:	2300      	movs	r3, #0
 800e238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e23a:	f001 f91f 	bl	800f47c <vPortExitCritical>

	return xReturn;
 800e23e:	68fb      	ldr	r3, [r7, #12]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e250:	f001 f8e2 	bl	800f418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d102      	bne.n	800e266 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e260:	2301      	movs	r3, #1
 800e262:	60fb      	str	r3, [r7, #12]
 800e264:	e001      	b.n	800e26a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e26a:	f001 f907 	bl	800f47c <vPortExitCritical>

	return xReturn;
 800e26e:	68fb      	ldr	r3, [r7, #12]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e282:	2300      	movs	r3, #0
 800e284:	60fb      	str	r3, [r7, #12]
 800e286:	e014      	b.n	800e2b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e288:	4a0f      	ldr	r2, [pc, #60]	@ (800e2c8 <vQueueAddToRegistry+0x50>)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10b      	bne.n	800e2ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e294:	490c      	ldr	r1, [pc, #48]	@ (800e2c8 <vQueueAddToRegistry+0x50>)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e29e:	4a0a      	ldr	r2, [pc, #40]	@ (800e2c8 <vQueueAddToRegistry+0x50>)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	00db      	lsls	r3, r3, #3
 800e2a4:	4413      	add	r3, r2
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e2aa:	e006      	b.n	800e2ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	60fb      	str	r3, [r7, #12]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2b07      	cmp	r3, #7
 800e2b6:	d9e7      	bls.n	800e288 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e2b8:	bf00      	nop
 800e2ba:	bf00      	nop
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	200013dc 	.word	0x200013dc

0800e2cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08e      	sub	sp, #56	@ 0x38
 800e2d0:	af04      	add	r7, sp, #16
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
 800e2d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10b      	bne.n	800e2f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	623b      	str	r3, [r7, #32]
}
 800e2f2:	bf00      	nop
 800e2f4:	bf00      	nop
 800e2f6:	e7fd      	b.n	800e2f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10b      	bne.n	800e316 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	61fb      	str	r3, [r7, #28]
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	e7fd      	b.n	800e312 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e316:	2354      	movs	r3, #84	@ 0x54
 800e318:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	2b54      	cmp	r3, #84	@ 0x54
 800e31e:	d00b      	beq.n	800e338 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	61bb      	str	r3, [r7, #24]
}
 800e332:	bf00      	nop
 800e334:	bf00      	nop
 800e336:	e7fd      	b.n	800e334 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e338:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d01e      	beq.n	800e37e <xTaskCreateStatic+0xb2>
 800e340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e342:	2b00      	cmp	r3, #0
 800e344:	d01b      	beq.n	800e37e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e348:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e34e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e352:	2202      	movs	r2, #2
 800e354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e358:	2300      	movs	r3, #0
 800e35a:	9303      	str	r3, [sp, #12]
 800e35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e35e:	9302      	str	r3, [sp, #8]
 800e360:	f107 0314 	add.w	r3, r7, #20
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	68b9      	ldr	r1, [r7, #8]
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 f850 	bl	800e416 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e376:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e378:	f000 f8d6 	bl	800e528 <prvAddNewTaskToReadyList>
 800e37c:	e001      	b.n	800e382 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e382:	697b      	ldr	r3, [r7, #20]
	}
 800e384:	4618      	mov	r0, r3
 800e386:	3728      	adds	r7, #40	@ 0x28
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08c      	sub	sp, #48	@ 0x30
 800e390:	af04      	add	r7, sp, #16
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	4613      	mov	r3, r2
 800e39a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e39c:	88fb      	ldrh	r3, [r7, #6]
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f001 f919 	bl	800f5d8 <pvPortMalloc>
 800e3a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00e      	beq.n	800e3cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e3ae:	2054      	movs	r0, #84	@ 0x54
 800e3b0:	f001 f912 	bl	800f5d8 <pvPortMalloc>
 800e3b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e3c2:	e005      	b.n	800e3d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e3c4:	6978      	ldr	r0, [r7, #20]
 800e3c6:	f001 f9d5 	bl	800f774 <vPortFree>
 800e3ca:	e001      	b.n	800e3d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d017      	beq.n	800e406 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e3de:	88fa      	ldrh	r2, [r7, #6]
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	9303      	str	r3, [sp, #12]
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	9302      	str	r3, [sp, #8]
 800e3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ea:	9301      	str	r3, [sp, #4]
 800e3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	68b9      	ldr	r1, [r7, #8]
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f000 f80e 	bl	800e416 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e3fa:	69f8      	ldr	r0, [r7, #28]
 800e3fc:	f000 f894 	bl	800e528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e400:	2301      	movs	r3, #1
 800e402:	61bb      	str	r3, [r7, #24]
 800e404:	e002      	b.n	800e40c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e40a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e40c:	69bb      	ldr	r3, [r7, #24]
	}
 800e40e:	4618      	mov	r0, r3
 800e410:	3720      	adds	r7, #32
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b088      	sub	sp, #32
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
 800e422:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e42e:	3b01      	subs	r3, #1
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	f023 0307 	bic.w	r3, r3, #7
 800e43c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	f003 0307 	and.w	r3, r3, #7
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00b      	beq.n	800e460 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	617b      	str	r3, [r7, #20]
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	e7fd      	b.n	800e45c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d01f      	beq.n	800e4a6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e466:	2300      	movs	r3, #0
 800e468:	61fb      	str	r3, [r7, #28]
 800e46a:	e012      	b.n	800e492 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e46c:	68ba      	ldr	r2, [r7, #8]
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	4413      	add	r3, r2
 800e472:	7819      	ldrb	r1, [r3, #0]
 800e474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	4413      	add	r3, r2
 800e47a:	3334      	adds	r3, #52	@ 0x34
 800e47c:	460a      	mov	r2, r1
 800e47e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	4413      	add	r3, r2
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d006      	beq.n	800e49a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	3301      	adds	r3, #1
 800e490:	61fb      	str	r3, [r7, #28]
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	2b0f      	cmp	r3, #15
 800e496:	d9e9      	bls.n	800e46c <prvInitialiseNewTask+0x56>
 800e498:	e000      	b.n	800e49c <prvInitialiseNewTask+0x86>
			{
				break;
 800e49a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e4a4:	e003      	b.n	800e4ae <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b0:	2b06      	cmp	r3, #6
 800e4b2:	d901      	bls.n	800e4b8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e4b4:	2306      	movs	r3, #6
 800e4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4c2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7ff fa85 	bl	800d9de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d6:	3318      	adds	r3, #24
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7ff fa80 	bl	800d9de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e6:	f1c3 0207 	rsb	r2, r3, #7
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e502:	683a      	ldr	r2, [r7, #0]
 800e504:	68f9      	ldr	r1, [r7, #12]
 800e506:	69b8      	ldr	r0, [r7, #24]
 800e508:	f000 fe54 	bl	800f1b4 <pxPortInitialiseStack>
 800e50c:	4602      	mov	r2, r0
 800e50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e510:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d002      	beq.n	800e51e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e51c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e51e:	bf00      	nop
 800e520:	3720      	adds	r7, #32
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e530:	f000 ff72 	bl	800f418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e534:	4b2a      	ldr	r3, [pc, #168]	@ (800e5e0 <prvAddNewTaskToReadyList+0xb8>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	3301      	adds	r3, #1
 800e53a:	4a29      	ldr	r2, [pc, #164]	@ (800e5e0 <prvAddNewTaskToReadyList+0xb8>)
 800e53c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e53e:	4b29      	ldr	r3, [pc, #164]	@ (800e5e4 <prvAddNewTaskToReadyList+0xbc>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d109      	bne.n	800e55a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e546:	4a27      	ldr	r2, [pc, #156]	@ (800e5e4 <prvAddNewTaskToReadyList+0xbc>)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e54c:	4b24      	ldr	r3, [pc, #144]	@ (800e5e0 <prvAddNewTaskToReadyList+0xb8>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d110      	bne.n	800e576 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e554:	f000 fc64 	bl	800ee20 <prvInitialiseTaskLists>
 800e558:	e00d      	b.n	800e576 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e55a:	4b23      	ldr	r3, [pc, #140]	@ (800e5e8 <prvAddNewTaskToReadyList+0xc0>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d109      	bne.n	800e576 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e562:	4b20      	ldr	r3, [pc, #128]	@ (800e5e4 <prvAddNewTaskToReadyList+0xbc>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d802      	bhi.n	800e576 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e570:	4a1c      	ldr	r2, [pc, #112]	@ (800e5e4 <prvAddNewTaskToReadyList+0xbc>)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e576:	4b1d      	ldr	r3, [pc, #116]	@ (800e5ec <prvAddNewTaskToReadyList+0xc4>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3301      	adds	r3, #1
 800e57c:	4a1b      	ldr	r2, [pc, #108]	@ (800e5ec <prvAddNewTaskToReadyList+0xc4>)
 800e57e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e584:	2201      	movs	r2, #1
 800e586:	409a      	lsls	r2, r3
 800e588:	4b19      	ldr	r3, [pc, #100]	@ (800e5f0 <prvAddNewTaskToReadyList+0xc8>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	4a18      	ldr	r2, [pc, #96]	@ (800e5f0 <prvAddNewTaskToReadyList+0xc8>)
 800e590:	6013      	str	r3, [r2, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e596:	4613      	mov	r3, r2
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4a15      	ldr	r2, [pc, #84]	@ (800e5f4 <prvAddNewTaskToReadyList+0xcc>)
 800e5a0:	441a      	add	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	f7ff fa25 	bl	800d9f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e5ae:	f000 ff65 	bl	800f47c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e5e8 <prvAddNewTaskToReadyList+0xc0>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00e      	beq.n	800e5d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e5ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e5e4 <prvAddNewTaskToReadyList+0xbc>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d207      	bcs.n	800e5d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f8 <prvAddNewTaskToReadyList+0xd0>)
 800e5ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	2000151c 	.word	0x2000151c
 800e5e4:	2000141c 	.word	0x2000141c
 800e5e8:	20001528 	.word	0x20001528
 800e5ec:	20001538 	.word	0x20001538
 800e5f0:	20001524 	.word	0x20001524
 800e5f4:	20001420 	.word	0x20001420
 800e5f8:	e000ed04 	.word	0xe000ed04

0800e5fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08a      	sub	sp, #40	@ 0x28
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e606:	2300      	movs	r3, #0
 800e608:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10b      	bne.n	800e628 <vTaskDelayUntil+0x2c>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	617b      	str	r3, [r7, #20]
}
 800e622:	bf00      	nop
 800e624:	bf00      	nop
 800e626:	e7fd      	b.n	800e624 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10b      	bne.n	800e646 <vTaskDelayUntil+0x4a>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	613b      	str	r3, [r7, #16]
}
 800e640:	bf00      	nop
 800e642:	bf00      	nop
 800e644:	e7fd      	b.n	800e642 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800e646:	4b2a      	ldr	r3, [pc, #168]	@ (800e6f0 <vTaskDelayUntil+0xf4>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00b      	beq.n	800e666 <vTaskDelayUntil+0x6a>
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	60fb      	str	r3, [r7, #12]
}
 800e660:	bf00      	nop
 800e662:	bf00      	nop
 800e664:	e7fd      	b.n	800e662 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800e666:	f000 f8e1 	bl	800e82c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e66a:	4b22      	ldr	r3, [pc, #136]	@ (800e6f4 <vTaskDelayUntil+0xf8>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	683a      	ldr	r2, [r7, #0]
 800e676:	4413      	add	r3, r2
 800e678:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	6a3a      	ldr	r2, [r7, #32]
 800e680:	429a      	cmp	r2, r3
 800e682:	d20b      	bcs.n	800e69c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	69fa      	ldr	r2, [r7, #28]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d211      	bcs.n	800e6b2 <vTaskDelayUntil+0xb6>
 800e68e:	69fa      	ldr	r2, [r7, #28]
 800e690:	6a3b      	ldr	r3, [r7, #32]
 800e692:	429a      	cmp	r2, r3
 800e694:	d90d      	bls.n	800e6b2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800e696:	2301      	movs	r3, #1
 800e698:	627b      	str	r3, [r7, #36]	@ 0x24
 800e69a:	e00a      	b.n	800e6b2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	69fa      	ldr	r2, [r7, #28]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d303      	bcc.n	800e6ae <vTaskDelayUntil+0xb2>
 800e6a6:	69fa      	ldr	r2, [r7, #28]
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d901      	bls.n	800e6b2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	69fa      	ldr	r2, [r7, #28]
 800e6b6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d006      	beq.n	800e6cc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e6be:	69fa      	ldr	r2, [r7, #28]
 800e6c0:	6a3b      	ldr	r3, [r7, #32]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	2100      	movs	r1, #0
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 fd0e 	bl	800f0e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e6cc:	f000 f8bc 	bl	800e848 <xTaskResumeAll>
 800e6d0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d107      	bne.n	800e6e8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800e6d8:	4b07      	ldr	r3, [pc, #28]	@ (800e6f8 <vTaskDelayUntil+0xfc>)
 800e6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6e8:	bf00      	nop
 800e6ea:	3728      	adds	r7, #40	@ 0x28
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	20001544 	.word	0x20001544
 800e6f4:	20001520 	.word	0x20001520
 800e6f8:	e000ed04 	.word	0xe000ed04

0800e6fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e704:	2300      	movs	r3, #0
 800e706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d018      	beq.n	800e740 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e70e:	4b14      	ldr	r3, [pc, #80]	@ (800e760 <vTaskDelay+0x64>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00b      	beq.n	800e72e <vTaskDelay+0x32>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71a:	f383 8811 	msr	BASEPRI, r3
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	f3bf 8f4f 	dsb	sy
 800e726:	60bb      	str	r3, [r7, #8]
}
 800e728:	bf00      	nop
 800e72a:	bf00      	nop
 800e72c:	e7fd      	b.n	800e72a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e72e:	f000 f87d 	bl	800e82c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e732:	2100      	movs	r1, #0
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 fcd7 	bl	800f0e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e73a:	f000 f885 	bl	800e848 <xTaskResumeAll>
 800e73e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d107      	bne.n	800e756 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e746:	4b07      	ldr	r3, [pc, #28]	@ (800e764 <vTaskDelay+0x68>)
 800e748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	f3bf 8f4f 	dsb	sy
 800e752:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e756:	bf00      	nop
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20001544 	.word	0x20001544
 800e764:	e000ed04 	.word	0xe000ed04

0800e768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08a      	sub	sp, #40	@ 0x28
 800e76c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e76e:	2300      	movs	r3, #0
 800e770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e772:	2300      	movs	r3, #0
 800e774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e776:	463a      	mov	r2, r7
 800e778:	1d39      	adds	r1, r7, #4
 800e77a:	f107 0308 	add.w	r3, r7, #8
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f4 f91a 	bl	80029b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	9202      	str	r2, [sp, #8]
 800e78c:	9301      	str	r3, [sp, #4]
 800e78e:	2300      	movs	r3, #0
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	2300      	movs	r3, #0
 800e794:	460a      	mov	r2, r1
 800e796:	491f      	ldr	r1, [pc, #124]	@ (800e814 <vTaskStartScheduler+0xac>)
 800e798:	481f      	ldr	r0, [pc, #124]	@ (800e818 <vTaskStartScheduler+0xb0>)
 800e79a:	f7ff fd97 	bl	800e2cc <xTaskCreateStatic>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	4a1e      	ldr	r2, [pc, #120]	@ (800e81c <vTaskStartScheduler+0xb4>)
 800e7a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7a4:	4b1d      	ldr	r3, [pc, #116]	@ (800e81c <vTaskStartScheduler+0xb4>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	617b      	str	r3, [r7, #20]
 800e7b0:	e001      	b.n	800e7b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d116      	bne.n	800e7ea <vTaskStartScheduler+0x82>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	613b      	str	r3, [r7, #16]
}
 800e7ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e7d0:	4b13      	ldr	r3, [pc, #76]	@ (800e820 <vTaskStartScheduler+0xb8>)
 800e7d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e7d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e7d8:	4b12      	ldr	r3, [pc, #72]	@ (800e824 <vTaskStartScheduler+0xbc>)
 800e7da:	2201      	movs	r2, #1
 800e7dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e7de:	4b12      	ldr	r3, [pc, #72]	@ (800e828 <vTaskStartScheduler+0xc0>)
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e7e4:	f000 fd74 	bl	800f2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e7e8:	e00f      	b.n	800e80a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7f0:	d10b      	bne.n	800e80a <vTaskStartScheduler+0xa2>
	__asm volatile
 800e7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	60fb      	str	r3, [r7, #12]
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop
 800e808:	e7fd      	b.n	800e806 <vTaskStartScheduler+0x9e>
}
 800e80a:	bf00      	nop
 800e80c:	3718      	adds	r7, #24
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	0801399c 	.word	0x0801399c
 800e818:	0800edf1 	.word	0x0800edf1
 800e81c:	20001540 	.word	0x20001540
 800e820:	2000153c 	.word	0x2000153c
 800e824:	20001528 	.word	0x20001528
 800e828:	20001520 	.word	0x20001520

0800e82c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e830:	4b04      	ldr	r3, [pc, #16]	@ (800e844 <vTaskSuspendAll+0x18>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3301      	adds	r3, #1
 800e836:	4a03      	ldr	r2, [pc, #12]	@ (800e844 <vTaskSuspendAll+0x18>)
 800e838:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e83a:	bf00      	nop
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	20001544 	.word	0x20001544

0800e848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e84e:	2300      	movs	r3, #0
 800e850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e852:	2300      	movs	r3, #0
 800e854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e856:	4b42      	ldr	r3, [pc, #264]	@ (800e960 <xTaskResumeAll+0x118>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10b      	bne.n	800e876 <xTaskResumeAll+0x2e>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	603b      	str	r3, [r7, #0]
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	e7fd      	b.n	800e872 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e876:	f000 fdcf 	bl	800f418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e87a:	4b39      	ldr	r3, [pc, #228]	@ (800e960 <xTaskResumeAll+0x118>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3b01      	subs	r3, #1
 800e880:	4a37      	ldr	r2, [pc, #220]	@ (800e960 <xTaskResumeAll+0x118>)
 800e882:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e884:	4b36      	ldr	r3, [pc, #216]	@ (800e960 <xTaskResumeAll+0x118>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d161      	bne.n	800e950 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e88c:	4b35      	ldr	r3, [pc, #212]	@ (800e964 <xTaskResumeAll+0x11c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d05d      	beq.n	800e950 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e894:	e02e      	b.n	800e8f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e896:	4b34      	ldr	r3, [pc, #208]	@ (800e968 <xTaskResumeAll+0x120>)
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	3318      	adds	r3, #24
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7ff f905 	bl	800dab2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff f900 	bl	800dab2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	409a      	lsls	r2, r3
 800e8ba:	4b2c      	ldr	r3, [pc, #176]	@ (800e96c <xTaskResumeAll+0x124>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	4a2a      	ldr	r2, [pc, #168]	@ (800e96c <xTaskResumeAll+0x124>)
 800e8c2:	6013      	str	r3, [r2, #0]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4a27      	ldr	r2, [pc, #156]	@ (800e970 <xTaskResumeAll+0x128>)
 800e8d2:	441a      	add	r2, r3
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7ff f88c 	bl	800d9f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e4:	4b23      	ldr	r3, [pc, #140]	@ (800e974 <xTaskResumeAll+0x12c>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d302      	bcc.n	800e8f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e8ee:	4b22      	ldr	r3, [pc, #136]	@ (800e978 <xTaskResumeAll+0x130>)
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8f4:	4b1c      	ldr	r3, [pc, #112]	@ (800e968 <xTaskResumeAll+0x120>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1cc      	bne.n	800e896 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e902:	f000 fb2b 	bl	800ef5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e906:	4b1d      	ldr	r3, [pc, #116]	@ (800e97c <xTaskResumeAll+0x134>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d010      	beq.n	800e934 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e912:	f000 f847 	bl	800e9a4 <xTaskIncrementTick>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d002      	beq.n	800e922 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e91c:	4b16      	ldr	r3, [pc, #88]	@ (800e978 <xTaskResumeAll+0x130>)
 800e91e:	2201      	movs	r2, #1
 800e920:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3b01      	subs	r3, #1
 800e926:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1f1      	bne.n	800e912 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e92e:	4b13      	ldr	r3, [pc, #76]	@ (800e97c <xTaskResumeAll+0x134>)
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e934:	4b10      	ldr	r3, [pc, #64]	@ (800e978 <xTaskResumeAll+0x130>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d009      	beq.n	800e950 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e93c:	2301      	movs	r3, #1
 800e93e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e940:	4b0f      	ldr	r3, [pc, #60]	@ (800e980 <xTaskResumeAll+0x138>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e950:	f000 fd94 	bl	800f47c <vPortExitCritical>

	return xAlreadyYielded;
 800e954:	68bb      	ldr	r3, [r7, #8]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	20001544 	.word	0x20001544
 800e964:	2000151c 	.word	0x2000151c
 800e968:	200014dc 	.word	0x200014dc
 800e96c:	20001524 	.word	0x20001524
 800e970:	20001420 	.word	0x20001420
 800e974:	2000141c 	.word	0x2000141c
 800e978:	20001530 	.word	0x20001530
 800e97c:	2000152c 	.word	0x2000152c
 800e980:	e000ed04 	.word	0xe000ed04

0800e984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e98a:	4b05      	ldr	r3, [pc, #20]	@ (800e9a0 <xTaskGetTickCount+0x1c>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e990:	687b      	ldr	r3, [r7, #4]
}
 800e992:	4618      	mov	r0, r3
 800e994:	370c      	adds	r7, #12
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	20001520 	.word	0x20001520

0800e9a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9ae:	4b4f      	ldr	r3, [pc, #316]	@ (800eaec <xTaskIncrementTick+0x148>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f040 808f 	bne.w	800ead6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e9b8:	4b4d      	ldr	r3, [pc, #308]	@ (800eaf0 <xTaskIncrementTick+0x14c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e9c0:	4a4b      	ldr	r2, [pc, #300]	@ (800eaf0 <xTaskIncrementTick+0x14c>)
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d121      	bne.n	800ea10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e9cc:	4b49      	ldr	r3, [pc, #292]	@ (800eaf4 <xTaskIncrementTick+0x150>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00b      	beq.n	800e9ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	603b      	str	r3, [r7, #0]
}
 800e9e8:	bf00      	nop
 800e9ea:	bf00      	nop
 800e9ec:	e7fd      	b.n	800e9ea <xTaskIncrementTick+0x46>
 800e9ee:	4b41      	ldr	r3, [pc, #260]	@ (800eaf4 <xTaskIncrementTick+0x150>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	4b40      	ldr	r3, [pc, #256]	@ (800eaf8 <xTaskIncrementTick+0x154>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a3e      	ldr	r2, [pc, #248]	@ (800eaf4 <xTaskIncrementTick+0x150>)
 800e9fa:	6013      	str	r3, [r2, #0]
 800e9fc:	4a3e      	ldr	r2, [pc, #248]	@ (800eaf8 <xTaskIncrementTick+0x154>)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6013      	str	r3, [r2, #0]
 800ea02:	4b3e      	ldr	r3, [pc, #248]	@ (800eafc <xTaskIncrementTick+0x158>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3301      	adds	r3, #1
 800ea08:	4a3c      	ldr	r2, [pc, #240]	@ (800eafc <xTaskIncrementTick+0x158>)
 800ea0a:	6013      	str	r3, [r2, #0]
 800ea0c:	f000 faa6 	bl	800ef5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea10:	4b3b      	ldr	r3, [pc, #236]	@ (800eb00 <xTaskIncrementTick+0x15c>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d348      	bcc.n	800eaac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea1a:	4b36      	ldr	r3, [pc, #216]	@ (800eaf4 <xTaskIncrementTick+0x150>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d104      	bne.n	800ea2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea24:	4b36      	ldr	r3, [pc, #216]	@ (800eb00 <xTaskIncrementTick+0x15c>)
 800ea26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea2a:	601a      	str	r2, [r3, #0]
					break;
 800ea2c:	e03e      	b.n	800eaac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea2e:	4b31      	ldr	r3, [pc, #196]	@ (800eaf4 <xTaskIncrementTick+0x150>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea3e:	693a      	ldr	r2, [r7, #16]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d203      	bcs.n	800ea4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea46:	4a2e      	ldr	r2, [pc, #184]	@ (800eb00 <xTaskIncrementTick+0x15c>)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ea4c:	e02e      	b.n	800eaac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	3304      	adds	r3, #4
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff f82d 	bl	800dab2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d004      	beq.n	800ea6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	3318      	adds	r3, #24
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7ff f824 	bl	800dab2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea6e:	2201      	movs	r2, #1
 800ea70:	409a      	lsls	r2, r3
 800ea72:	4b24      	ldr	r3, [pc, #144]	@ (800eb04 <xTaskIncrementTick+0x160>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	4a22      	ldr	r2, [pc, #136]	@ (800eb04 <xTaskIncrementTick+0x160>)
 800ea7a:	6013      	str	r3, [r2, #0]
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea80:	4613      	mov	r3, r2
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4413      	add	r3, r2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	4a1f      	ldr	r2, [pc, #124]	@ (800eb08 <xTaskIncrementTick+0x164>)
 800ea8a:	441a      	add	r2, r3
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	3304      	adds	r3, #4
 800ea90:	4619      	mov	r1, r3
 800ea92:	4610      	mov	r0, r2
 800ea94:	f7fe ffb0 	bl	800d9f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea9c:	4b1b      	ldr	r3, [pc, #108]	@ (800eb0c <xTaskIncrementTick+0x168>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d3b9      	bcc.n	800ea1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaaa:	e7b6      	b.n	800ea1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eaac:	4b17      	ldr	r3, [pc, #92]	@ (800eb0c <xTaskIncrementTick+0x168>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eab2:	4915      	ldr	r1, [pc, #84]	@ (800eb08 <xTaskIncrementTick+0x164>)
 800eab4:	4613      	mov	r3, r2
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	4413      	add	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	440b      	add	r3, r1
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d901      	bls.n	800eac8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eac4:	2301      	movs	r3, #1
 800eac6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eac8:	4b11      	ldr	r3, [pc, #68]	@ (800eb10 <xTaskIncrementTick+0x16c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d007      	beq.n	800eae0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ead0:	2301      	movs	r3, #1
 800ead2:	617b      	str	r3, [r7, #20]
 800ead4:	e004      	b.n	800eae0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ead6:	4b0f      	ldr	r3, [pc, #60]	@ (800eb14 <xTaskIncrementTick+0x170>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3301      	adds	r3, #1
 800eadc:	4a0d      	ldr	r2, [pc, #52]	@ (800eb14 <xTaskIncrementTick+0x170>)
 800eade:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eae0:	697b      	ldr	r3, [r7, #20]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3718      	adds	r7, #24
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	20001544 	.word	0x20001544
 800eaf0:	20001520 	.word	0x20001520
 800eaf4:	200014d4 	.word	0x200014d4
 800eaf8:	200014d8 	.word	0x200014d8
 800eafc:	20001534 	.word	0x20001534
 800eb00:	2000153c 	.word	0x2000153c
 800eb04:	20001524 	.word	0x20001524
 800eb08:	20001420 	.word	0x20001420
 800eb0c:	2000141c 	.word	0x2000141c
 800eb10:	20001530 	.word	0x20001530
 800eb14:	2000152c 	.word	0x2000152c

0800eb18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b087      	sub	sp, #28
 800eb1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb1e:	4b27      	ldr	r3, [pc, #156]	@ (800ebbc <vTaskSwitchContext+0xa4>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d003      	beq.n	800eb2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb26:	4b26      	ldr	r3, [pc, #152]	@ (800ebc0 <vTaskSwitchContext+0xa8>)
 800eb28:	2201      	movs	r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb2c:	e040      	b.n	800ebb0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800eb2e:	4b24      	ldr	r3, [pc, #144]	@ (800ebc0 <vTaskSwitchContext+0xa8>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb34:	4b23      	ldr	r3, [pc, #140]	@ (800ebc4 <vTaskSwitchContext+0xac>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	fab3 f383 	clz	r3, r3
 800eb40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800eb42:	7afb      	ldrb	r3, [r7, #11]
 800eb44:	f1c3 031f 	rsb	r3, r3, #31
 800eb48:	617b      	str	r3, [r7, #20]
 800eb4a:	491f      	ldr	r1, [pc, #124]	@ (800ebc8 <vTaskSwitchContext+0xb0>)
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	440b      	add	r3, r1
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d10b      	bne.n	800eb76 <vTaskSwitchContext+0x5e>
	__asm volatile
 800eb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	607b      	str	r3, [r7, #4]
}
 800eb70:	bf00      	nop
 800eb72:	bf00      	nop
 800eb74:	e7fd      	b.n	800eb72 <vTaskSwitchContext+0x5a>
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	4a11      	ldr	r2, [pc, #68]	@ (800ebc8 <vTaskSwitchContext+0xb0>)
 800eb82:	4413      	add	r3, r2
 800eb84:	613b      	str	r3, [r7, #16]
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	685a      	ldr	r2, [r3, #4]
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	605a      	str	r2, [r3, #4]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	3308      	adds	r3, #8
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d104      	bne.n	800eba6 <vTaskSwitchContext+0x8e>
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	685a      	ldr	r2, [r3, #4]
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	605a      	str	r2, [r3, #4]
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	4a07      	ldr	r2, [pc, #28]	@ (800ebcc <vTaskSwitchContext+0xb4>)
 800ebae:	6013      	str	r3, [r2, #0]
}
 800ebb0:	bf00      	nop
 800ebb2:	371c      	adds	r7, #28
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	20001544 	.word	0x20001544
 800ebc0:	20001530 	.word	0x20001530
 800ebc4:	20001524 	.word	0x20001524
 800ebc8:	20001420 	.word	0x20001420
 800ebcc:	2000141c 	.word	0x2000141c

0800ebd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d10b      	bne.n	800ebf8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ebe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	60fb      	str	r3, [r7, #12]
}
 800ebf2:	bf00      	nop
 800ebf4:	bf00      	nop
 800ebf6:	e7fd      	b.n	800ebf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebf8:	4b07      	ldr	r3, [pc, #28]	@ (800ec18 <vTaskPlaceOnEventList+0x48>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	3318      	adds	r3, #24
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7fe ff1d 	bl	800da40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec06:	2101      	movs	r1, #1
 800ec08:	6838      	ldr	r0, [r7, #0]
 800ec0a:	f000 fa6d 	bl	800f0e8 <prvAddCurrentTaskToDelayedList>
}
 800ec0e:	bf00      	nop
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	2000141c 	.word	0x2000141c

0800ec1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10b      	bne.n	800ec4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	60fb      	str	r3, [r7, #12]
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	e7fd      	b.n	800ec46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	3318      	adds	r3, #24
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fe ff2f 	bl	800dab2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec54:	4b1d      	ldr	r3, [pc, #116]	@ (800eccc <xTaskRemoveFromEventList+0xb0>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d11c      	bne.n	800ec96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	3304      	adds	r3, #4
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe ff26 	bl	800dab2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	409a      	lsls	r2, r3
 800ec6e:	4b18      	ldr	r3, [pc, #96]	@ (800ecd0 <xTaskRemoveFromEventList+0xb4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4313      	orrs	r3, r2
 800ec74:	4a16      	ldr	r2, [pc, #88]	@ (800ecd0 <xTaskRemoveFromEventList+0xb4>)
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4a13      	ldr	r2, [pc, #76]	@ (800ecd4 <xTaskRemoveFromEventList+0xb8>)
 800ec86:	441a      	add	r2, r3
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	4610      	mov	r0, r2
 800ec90:	f7fe feb2 	bl	800d9f8 <vListInsertEnd>
 800ec94:	e005      	b.n	800eca2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	3318      	adds	r3, #24
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	480e      	ldr	r0, [pc, #56]	@ (800ecd8 <xTaskRemoveFromEventList+0xbc>)
 800ec9e:	f7fe feab 	bl	800d9f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eca6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecdc <xTaskRemoveFromEventList+0xc0>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d905      	bls.n	800ecbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ece0 <xTaskRemoveFromEventList+0xc4>)
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	601a      	str	r2, [r3, #0]
 800ecba:	e001      	b.n	800ecc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ecc0:	697b      	ldr	r3, [r7, #20]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3718      	adds	r7, #24
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	20001544 	.word	0x20001544
 800ecd0:	20001524 	.word	0x20001524
 800ecd4:	20001420 	.word	0x20001420
 800ecd8:	200014dc 	.word	0x200014dc
 800ecdc:	2000141c 	.word	0x2000141c
 800ece0:	20001530 	.word	0x20001530

0800ece4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ecec:	4b06      	ldr	r3, [pc, #24]	@ (800ed08 <vTaskInternalSetTimeOutState+0x24>)
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ecf4:	4b05      	ldr	r3, [pc, #20]	@ (800ed0c <vTaskInternalSetTimeOutState+0x28>)
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	605a      	str	r2, [r3, #4]
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr
 800ed08:	20001534 	.word	0x20001534
 800ed0c:	20001520 	.word	0x20001520

0800ed10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10b      	bne.n	800ed38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	613b      	str	r3, [r7, #16]
}
 800ed32:	bf00      	nop
 800ed34:	bf00      	nop
 800ed36:	e7fd      	b.n	800ed34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10b      	bne.n	800ed56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ed3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	60fb      	str	r3, [r7, #12]
}
 800ed50:	bf00      	nop
 800ed52:	bf00      	nop
 800ed54:	e7fd      	b.n	800ed52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ed56:	f000 fb5f 	bl	800f418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ed5a:	4b1d      	ldr	r3, [pc, #116]	@ (800edd0 <xTaskCheckForTimeOut+0xc0>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	69ba      	ldr	r2, [r7, #24]
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed72:	d102      	bne.n	800ed7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed74:	2300      	movs	r3, #0
 800ed76:	61fb      	str	r3, [r7, #28]
 800ed78:	e023      	b.n	800edc2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	4b15      	ldr	r3, [pc, #84]	@ (800edd4 <xTaskCheckForTimeOut+0xc4>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d007      	beq.n	800ed96 <xTaskCheckForTimeOut+0x86>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	69ba      	ldr	r2, [r7, #24]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d302      	bcc.n	800ed96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed90:	2301      	movs	r3, #1
 800ed92:	61fb      	str	r3, [r7, #28]
 800ed94:	e015      	b.n	800edc2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	697a      	ldr	r2, [r7, #20]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d20b      	bcs.n	800edb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	1ad2      	subs	r2, r2, r3
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7ff ff99 	bl	800ece4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800edb2:	2300      	movs	r3, #0
 800edb4:	61fb      	str	r3, [r7, #28]
 800edb6:	e004      	b.n	800edc2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2200      	movs	r2, #0
 800edbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800edbe:	2301      	movs	r3, #1
 800edc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800edc2:	f000 fb5b 	bl	800f47c <vPortExitCritical>

	return xReturn;
 800edc6:	69fb      	ldr	r3, [r7, #28]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3720      	adds	r7, #32
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	20001520 	.word	0x20001520
 800edd4:	20001534 	.word	0x20001534

0800edd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800edd8:	b480      	push	{r7}
 800edda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eddc:	4b03      	ldr	r3, [pc, #12]	@ (800edec <vTaskMissedYield+0x14>)
 800edde:	2201      	movs	r2, #1
 800ede0:	601a      	str	r2, [r3, #0]
}
 800ede2:	bf00      	nop
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	20001530 	.word	0x20001530

0800edf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800edf8:	f000 f852 	bl	800eea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800edfc:	4b06      	ldr	r3, [pc, #24]	@ (800ee18 <prvIdleTask+0x28>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d9f9      	bls.n	800edf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee04:	4b05      	ldr	r3, [pc, #20]	@ (800ee1c <prvIdleTask+0x2c>)
 800ee06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee0a:	601a      	str	r2, [r3, #0]
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee14:	e7f0      	b.n	800edf8 <prvIdleTask+0x8>
 800ee16:	bf00      	nop
 800ee18:	20001420 	.word	0x20001420
 800ee1c:	e000ed04 	.word	0xe000ed04

0800ee20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee26:	2300      	movs	r3, #0
 800ee28:	607b      	str	r3, [r7, #4]
 800ee2a:	e00c      	b.n	800ee46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4a12      	ldr	r2, [pc, #72]	@ (800ee80 <prvInitialiseTaskLists+0x60>)
 800ee38:	4413      	add	r3, r2
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fe fdaf 	bl	800d99e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3301      	adds	r3, #1
 800ee44:	607b      	str	r3, [r7, #4]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b06      	cmp	r3, #6
 800ee4a:	d9ef      	bls.n	800ee2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ee4c:	480d      	ldr	r0, [pc, #52]	@ (800ee84 <prvInitialiseTaskLists+0x64>)
 800ee4e:	f7fe fda6 	bl	800d99e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ee52:	480d      	ldr	r0, [pc, #52]	@ (800ee88 <prvInitialiseTaskLists+0x68>)
 800ee54:	f7fe fda3 	bl	800d99e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ee58:	480c      	ldr	r0, [pc, #48]	@ (800ee8c <prvInitialiseTaskLists+0x6c>)
 800ee5a:	f7fe fda0 	bl	800d99e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ee5e:	480c      	ldr	r0, [pc, #48]	@ (800ee90 <prvInitialiseTaskLists+0x70>)
 800ee60:	f7fe fd9d 	bl	800d99e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ee64:	480b      	ldr	r0, [pc, #44]	@ (800ee94 <prvInitialiseTaskLists+0x74>)
 800ee66:	f7fe fd9a 	bl	800d99e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ee6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee98 <prvInitialiseTaskLists+0x78>)
 800ee6c:	4a05      	ldr	r2, [pc, #20]	@ (800ee84 <prvInitialiseTaskLists+0x64>)
 800ee6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ee70:	4b0a      	ldr	r3, [pc, #40]	@ (800ee9c <prvInitialiseTaskLists+0x7c>)
 800ee72:	4a05      	ldr	r2, [pc, #20]	@ (800ee88 <prvInitialiseTaskLists+0x68>)
 800ee74:	601a      	str	r2, [r3, #0]
}
 800ee76:	bf00      	nop
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20001420 	.word	0x20001420
 800ee84:	200014ac 	.word	0x200014ac
 800ee88:	200014c0 	.word	0x200014c0
 800ee8c:	200014dc 	.word	0x200014dc
 800ee90:	200014f0 	.word	0x200014f0
 800ee94:	20001508 	.word	0x20001508
 800ee98:	200014d4 	.word	0x200014d4
 800ee9c:	200014d8 	.word	0x200014d8

0800eea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eea6:	e019      	b.n	800eedc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eea8:	f000 fab6 	bl	800f418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeac:	4b10      	ldr	r3, [pc, #64]	@ (800eef0 <prvCheckTasksWaitingTermination+0x50>)
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fe fdfa 	bl	800dab2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eebe:	4b0d      	ldr	r3, [pc, #52]	@ (800eef4 <prvCheckTasksWaitingTermination+0x54>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3b01      	subs	r3, #1
 800eec4:	4a0b      	ldr	r2, [pc, #44]	@ (800eef4 <prvCheckTasksWaitingTermination+0x54>)
 800eec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eec8:	4b0b      	ldr	r3, [pc, #44]	@ (800eef8 <prvCheckTasksWaitingTermination+0x58>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3b01      	subs	r3, #1
 800eece:	4a0a      	ldr	r2, [pc, #40]	@ (800eef8 <prvCheckTasksWaitingTermination+0x58>)
 800eed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eed2:	f000 fad3 	bl	800f47c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 f810 	bl	800eefc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eedc:	4b06      	ldr	r3, [pc, #24]	@ (800eef8 <prvCheckTasksWaitingTermination+0x58>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1e1      	bne.n	800eea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eee4:	bf00      	nop
 800eee6:	bf00      	nop
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	200014f0 	.word	0x200014f0
 800eef4:	2000151c 	.word	0x2000151c
 800eef8:	20001504 	.word	0x20001504

0800eefc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d108      	bne.n	800ef20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 fc2e 	bl	800f774 <vPortFree>
				vPortFree( pxTCB );
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 fc2b 	bl	800f774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ef1e:	e019      	b.n	800ef54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d103      	bne.n	800ef32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fc22 	bl	800f774 <vPortFree>
	}
 800ef30:	e010      	b.n	800ef54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d00b      	beq.n	800ef54 <prvDeleteTCB+0x58>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	60fb      	str	r3, [r7, #12]
}
 800ef4e:	bf00      	nop
 800ef50:	bf00      	nop
 800ef52:	e7fd      	b.n	800ef50 <prvDeleteTCB+0x54>
	}
 800ef54:	bf00      	nop
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef62:	4b0c      	ldr	r3, [pc, #48]	@ (800ef94 <prvResetNextTaskUnblockTime+0x38>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d104      	bne.n	800ef76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef98 <prvResetNextTaskUnblockTime+0x3c>)
 800ef6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ef74:	e008      	b.n	800ef88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef76:	4b07      	ldr	r3, [pc, #28]	@ (800ef94 <prvResetNextTaskUnblockTime+0x38>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	4a04      	ldr	r2, [pc, #16]	@ (800ef98 <prvResetNextTaskUnblockTime+0x3c>)
 800ef86:	6013      	str	r3, [r2, #0]
}
 800ef88:	bf00      	nop
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	200014d4 	.word	0x200014d4
 800ef98:	2000153c 	.word	0x2000153c

0800ef9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800efa2:	4b0b      	ldr	r3, [pc, #44]	@ (800efd0 <xTaskGetSchedulerState+0x34>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d102      	bne.n	800efb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800efaa:	2301      	movs	r3, #1
 800efac:	607b      	str	r3, [r7, #4]
 800efae:	e008      	b.n	800efc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efb0:	4b08      	ldr	r3, [pc, #32]	@ (800efd4 <xTaskGetSchedulerState+0x38>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800efb8:	2302      	movs	r3, #2
 800efba:	607b      	str	r3, [r7, #4]
 800efbc:	e001      	b.n	800efc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800efbe:	2300      	movs	r3, #0
 800efc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800efc2:	687b      	ldr	r3, [r7, #4]
	}
 800efc4:	4618      	mov	r0, r3
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	20001528 	.word	0x20001528
 800efd4:	20001544 	.word	0x20001544

0800efd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800efe4:	2300      	movs	r3, #0
 800efe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d070      	beq.n	800f0d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800efee:	4b3b      	ldr	r3, [pc, #236]	@ (800f0dc <xTaskPriorityDisinherit+0x104>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	693a      	ldr	r2, [r7, #16]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d00b      	beq.n	800f010 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	60fb      	str	r3, [r7, #12]
}
 800f00a:	bf00      	nop
 800f00c:	bf00      	nop
 800f00e:	e7fd      	b.n	800f00c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f014:	2b00      	cmp	r3, #0
 800f016:	d10b      	bne.n	800f030 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01c:	f383 8811 	msr	BASEPRI, r3
 800f020:	f3bf 8f6f 	isb	sy
 800f024:	f3bf 8f4f 	dsb	sy
 800f028:	60bb      	str	r3, [r7, #8]
}
 800f02a:	bf00      	nop
 800f02c:	bf00      	nop
 800f02e:	e7fd      	b.n	800f02c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f034:	1e5a      	subs	r2, r3, #1
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f042:	429a      	cmp	r2, r3
 800f044:	d044      	beq.n	800f0d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d140      	bne.n	800f0d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	3304      	adds	r3, #4
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fd2d 	bl	800dab2 <uxListRemove>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d115      	bne.n	800f08a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f062:	491f      	ldr	r1, [pc, #124]	@ (800f0e0 <xTaskPriorityDisinherit+0x108>)
 800f064:	4613      	mov	r3, r2
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	4413      	add	r3, r2
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	440b      	add	r3, r1
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d10a      	bne.n	800f08a <xTaskPriorityDisinherit+0xb2>
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f078:	2201      	movs	r2, #1
 800f07a:	fa02 f303 	lsl.w	r3, r2, r3
 800f07e:	43da      	mvns	r2, r3
 800f080:	4b18      	ldr	r3, [pc, #96]	@ (800f0e4 <xTaskPriorityDisinherit+0x10c>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4013      	ands	r3, r2
 800f086:	4a17      	ldr	r2, [pc, #92]	@ (800f0e4 <xTaskPriorityDisinherit+0x10c>)
 800f088:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f096:	f1c3 0207 	rsb	r2, r3, #7
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	409a      	lsls	r2, r3
 800f0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e4 <xTaskPriorityDisinherit+0x10c>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	4a0d      	ldr	r2, [pc, #52]	@ (800f0e4 <xTaskPriorityDisinherit+0x10c>)
 800f0ae:	6013      	str	r3, [r2, #0]
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4413      	add	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4a08      	ldr	r2, [pc, #32]	@ (800f0e0 <xTaskPriorityDisinherit+0x108>)
 800f0be:	441a      	add	r2, r3
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	3304      	adds	r3, #4
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	4610      	mov	r0, r2
 800f0c8:	f7fe fc96 	bl	800d9f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f0d0:	697b      	ldr	r3, [r7, #20]
	}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	2000141c 	.word	0x2000141c
 800f0e0:	20001420 	.word	0x20001420
 800f0e4:	20001524 	.word	0x20001524

0800f0e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f0f2:	4b29      	ldr	r3, [pc, #164]	@ (800f198 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0f8:	4b28      	ldr	r3, [pc, #160]	@ (800f19c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fe fcd7 	bl	800dab2 <uxListRemove>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10b      	bne.n	800f122 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f10a:	4b24      	ldr	r3, [pc, #144]	@ (800f19c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f110:	2201      	movs	r2, #1
 800f112:	fa02 f303 	lsl.w	r3, r2, r3
 800f116:	43da      	mvns	r2, r3
 800f118:	4b21      	ldr	r3, [pc, #132]	@ (800f1a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4013      	ands	r3, r2
 800f11e:	4a20      	ldr	r2, [pc, #128]	@ (800f1a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f120:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f128:	d10a      	bne.n	800f140 <prvAddCurrentTaskToDelayedList+0x58>
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d007      	beq.n	800f140 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f130:	4b1a      	ldr	r3, [pc, #104]	@ (800f19c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3304      	adds	r3, #4
 800f136:	4619      	mov	r1, r3
 800f138:	481a      	ldr	r0, [pc, #104]	@ (800f1a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f13a:	f7fe fc5d 	bl	800d9f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f13e:	e026      	b.n	800f18e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4413      	add	r3, r2
 800f146:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f148:	4b14      	ldr	r3, [pc, #80]	@ (800f19c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	429a      	cmp	r2, r3
 800f156:	d209      	bcs.n	800f16c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f158:	4b13      	ldr	r3, [pc, #76]	@ (800f1a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	4b0f      	ldr	r3, [pc, #60]	@ (800f19c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	3304      	adds	r3, #4
 800f162:	4619      	mov	r1, r3
 800f164:	4610      	mov	r0, r2
 800f166:	f7fe fc6b 	bl	800da40 <vListInsert>
}
 800f16a:	e010      	b.n	800f18e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f16c:	4b0f      	ldr	r3, [pc, #60]	@ (800f1ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	4b0a      	ldr	r3, [pc, #40]	@ (800f19c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3304      	adds	r3, #4
 800f176:	4619      	mov	r1, r3
 800f178:	4610      	mov	r0, r2
 800f17a:	f7fe fc61 	bl	800da40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f17e:	4b0c      	ldr	r3, [pc, #48]	@ (800f1b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	429a      	cmp	r2, r3
 800f186:	d202      	bcs.n	800f18e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f188:	4a09      	ldr	r2, [pc, #36]	@ (800f1b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	6013      	str	r3, [r2, #0]
}
 800f18e:	bf00      	nop
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	20001520 	.word	0x20001520
 800f19c:	2000141c 	.word	0x2000141c
 800f1a0:	20001524 	.word	0x20001524
 800f1a4:	20001508 	.word	0x20001508
 800f1a8:	200014d8 	.word	0x200014d8
 800f1ac:	200014d4 	.word	0x200014d4
 800f1b0:	2000153c 	.word	0x2000153c

0800f1b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b085      	sub	sp, #20
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3b04      	subs	r3, #4
 800f1c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f1cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	3b04      	subs	r3, #4
 800f1d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	f023 0201 	bic.w	r2, r3, #1
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3b04      	subs	r3, #4
 800f1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1e4:	4a0c      	ldr	r2, [pc, #48]	@ (800f218 <pxPortInitialiseStack+0x64>)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	3b14      	subs	r3, #20
 800f1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3b04      	subs	r3, #4
 800f1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f06f 0202 	mvn.w	r2, #2
 800f202:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3b20      	subs	r3, #32
 800f208:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f20a:	68fb      	ldr	r3, [r7, #12]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3714      	adds	r7, #20
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr
 800f218:	0800f21d 	.word	0x0800f21d

0800f21c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f21c:	b480      	push	{r7}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f222:	2300      	movs	r3, #0
 800f224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f226:	4b13      	ldr	r3, [pc, #76]	@ (800f274 <prvTaskExitError+0x58>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f22e:	d00b      	beq.n	800f248 <prvTaskExitError+0x2c>
	__asm volatile
 800f230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	60fb      	str	r3, [r7, #12]
}
 800f242:	bf00      	nop
 800f244:	bf00      	nop
 800f246:	e7fd      	b.n	800f244 <prvTaskExitError+0x28>
	__asm volatile
 800f248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24c:	f383 8811 	msr	BASEPRI, r3
 800f250:	f3bf 8f6f 	isb	sy
 800f254:	f3bf 8f4f 	dsb	sy
 800f258:	60bb      	str	r3, [r7, #8]
}
 800f25a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f25c:	bf00      	nop
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d0fc      	beq.n	800f25e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f264:	bf00      	nop
 800f266:	bf00      	nop
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	2000000c 	.word	0x2000000c
	...

0800f280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f280:	4b07      	ldr	r3, [pc, #28]	@ (800f2a0 <pxCurrentTCBConst2>)
 800f282:	6819      	ldr	r1, [r3, #0]
 800f284:	6808      	ldr	r0, [r1, #0]
 800f286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28a:	f380 8809 	msr	PSP, r0
 800f28e:	f3bf 8f6f 	isb	sy
 800f292:	f04f 0000 	mov.w	r0, #0
 800f296:	f380 8811 	msr	BASEPRI, r0
 800f29a:	4770      	bx	lr
 800f29c:	f3af 8000 	nop.w

0800f2a0 <pxCurrentTCBConst2>:
 800f2a0:	2000141c 	.word	0x2000141c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f2a4:	bf00      	nop
 800f2a6:	bf00      	nop

0800f2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f2a8:	4808      	ldr	r0, [pc, #32]	@ (800f2cc <prvPortStartFirstTask+0x24>)
 800f2aa:	6800      	ldr	r0, [r0, #0]
 800f2ac:	6800      	ldr	r0, [r0, #0]
 800f2ae:	f380 8808 	msr	MSP, r0
 800f2b2:	f04f 0000 	mov.w	r0, #0
 800f2b6:	f380 8814 	msr	CONTROL, r0
 800f2ba:	b662      	cpsie	i
 800f2bc:	b661      	cpsie	f
 800f2be:	f3bf 8f4f 	dsb	sy
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	df00      	svc	0
 800f2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f2ca:	bf00      	nop
 800f2cc:	e000ed08 	.word	0xe000ed08

0800f2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f2d6:	4b47      	ldr	r3, [pc, #284]	@ (800f3f4 <xPortStartScheduler+0x124>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a47      	ldr	r2, [pc, #284]	@ (800f3f8 <xPortStartScheduler+0x128>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d10b      	bne.n	800f2f8 <xPortStartScheduler+0x28>
	__asm volatile
 800f2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e4:	f383 8811 	msr	BASEPRI, r3
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	613b      	str	r3, [r7, #16]
}
 800f2f2:	bf00      	nop
 800f2f4:	bf00      	nop
 800f2f6:	e7fd      	b.n	800f2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f2f8:	4b3e      	ldr	r3, [pc, #248]	@ (800f3f4 <xPortStartScheduler+0x124>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a3f      	ldr	r2, [pc, #252]	@ (800f3fc <xPortStartScheduler+0x12c>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d10b      	bne.n	800f31a <xPortStartScheduler+0x4a>
	__asm volatile
 800f302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f306:	f383 8811 	msr	BASEPRI, r3
 800f30a:	f3bf 8f6f 	isb	sy
 800f30e:	f3bf 8f4f 	dsb	sy
 800f312:	60fb      	str	r3, [r7, #12]
}
 800f314:	bf00      	nop
 800f316:	bf00      	nop
 800f318:	e7fd      	b.n	800f316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f31a:	4b39      	ldr	r3, [pc, #228]	@ (800f400 <xPortStartScheduler+0x130>)
 800f31c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	b2db      	uxtb	r3, r3
 800f324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	22ff      	movs	r2, #255	@ 0xff
 800f32a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	b2db      	uxtb	r3, r3
 800f332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f334:	78fb      	ldrb	r3, [r7, #3]
 800f336:	b2db      	uxtb	r3, r3
 800f338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f33c:	b2da      	uxtb	r2, r3
 800f33e:	4b31      	ldr	r3, [pc, #196]	@ (800f404 <xPortStartScheduler+0x134>)
 800f340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f342:	4b31      	ldr	r3, [pc, #196]	@ (800f408 <xPortStartScheduler+0x138>)
 800f344:	2207      	movs	r2, #7
 800f346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f348:	e009      	b.n	800f35e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f34a:	4b2f      	ldr	r3, [pc, #188]	@ (800f408 <xPortStartScheduler+0x138>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	3b01      	subs	r3, #1
 800f350:	4a2d      	ldr	r2, [pc, #180]	@ (800f408 <xPortStartScheduler+0x138>)
 800f352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f354:	78fb      	ldrb	r3, [r7, #3]
 800f356:	b2db      	uxtb	r3, r3
 800f358:	005b      	lsls	r3, r3, #1
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f35e:	78fb      	ldrb	r3, [r7, #3]
 800f360:	b2db      	uxtb	r3, r3
 800f362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f366:	2b80      	cmp	r3, #128	@ 0x80
 800f368:	d0ef      	beq.n	800f34a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f36a:	4b27      	ldr	r3, [pc, #156]	@ (800f408 <xPortStartScheduler+0x138>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f1c3 0307 	rsb	r3, r3, #7
 800f372:	2b04      	cmp	r3, #4
 800f374:	d00b      	beq.n	800f38e <xPortStartScheduler+0xbe>
	__asm volatile
 800f376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	60bb      	str	r3, [r7, #8]
}
 800f388:	bf00      	nop
 800f38a:	bf00      	nop
 800f38c:	e7fd      	b.n	800f38a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f38e:	4b1e      	ldr	r3, [pc, #120]	@ (800f408 <xPortStartScheduler+0x138>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	021b      	lsls	r3, r3, #8
 800f394:	4a1c      	ldr	r2, [pc, #112]	@ (800f408 <xPortStartScheduler+0x138>)
 800f396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f398:	4b1b      	ldr	r3, [pc, #108]	@ (800f408 <xPortStartScheduler+0x138>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f3a0:	4a19      	ldr	r2, [pc, #100]	@ (800f408 <xPortStartScheduler+0x138>)
 800f3a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	b2da      	uxtb	r2, r3
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f3ac:	4b17      	ldr	r3, [pc, #92]	@ (800f40c <xPortStartScheduler+0x13c>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a16      	ldr	r2, [pc, #88]	@ (800f40c <xPortStartScheduler+0x13c>)
 800f3b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f3b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f3b8:	4b14      	ldr	r3, [pc, #80]	@ (800f40c <xPortStartScheduler+0x13c>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a13      	ldr	r2, [pc, #76]	@ (800f40c <xPortStartScheduler+0x13c>)
 800f3be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f3c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f3c4:	f000 f8da 	bl	800f57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f3c8:	4b11      	ldr	r3, [pc, #68]	@ (800f410 <xPortStartScheduler+0x140>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f3ce:	f000 f8f9 	bl	800f5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f3d2:	4b10      	ldr	r3, [pc, #64]	@ (800f414 <xPortStartScheduler+0x144>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4a0f      	ldr	r2, [pc, #60]	@ (800f414 <xPortStartScheduler+0x144>)
 800f3d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f3dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f3de:	f7ff ff63 	bl	800f2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f3e2:	f7ff fb99 	bl	800eb18 <vTaskSwitchContext>
	prvTaskExitError();
 800f3e6:	f7ff ff19 	bl	800f21c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3718      	adds	r7, #24
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	e000ed00 	.word	0xe000ed00
 800f3f8:	410fc271 	.word	0x410fc271
 800f3fc:	410fc270 	.word	0x410fc270
 800f400:	e000e400 	.word	0xe000e400
 800f404:	20001548 	.word	0x20001548
 800f408:	2000154c 	.word	0x2000154c
 800f40c:	e000ed20 	.word	0xe000ed20
 800f410:	2000000c 	.word	0x2000000c
 800f414:	e000ef34 	.word	0xe000ef34

0800f418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
	__asm volatile
 800f41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	607b      	str	r3, [r7, #4]
}
 800f430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f432:	4b10      	ldr	r3, [pc, #64]	@ (800f474 <vPortEnterCritical+0x5c>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	3301      	adds	r3, #1
 800f438:	4a0e      	ldr	r2, [pc, #56]	@ (800f474 <vPortEnterCritical+0x5c>)
 800f43a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f43c:	4b0d      	ldr	r3, [pc, #52]	@ (800f474 <vPortEnterCritical+0x5c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d110      	bne.n	800f466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f444:	4b0c      	ldr	r3, [pc, #48]	@ (800f478 <vPortEnterCritical+0x60>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00b      	beq.n	800f466 <vPortEnterCritical+0x4e>
	__asm volatile
 800f44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f452:	f383 8811 	msr	BASEPRI, r3
 800f456:	f3bf 8f6f 	isb	sy
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	603b      	str	r3, [r7, #0]
}
 800f460:	bf00      	nop
 800f462:	bf00      	nop
 800f464:	e7fd      	b.n	800f462 <vPortEnterCritical+0x4a>
	}
}
 800f466:	bf00      	nop
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	2000000c 	.word	0x2000000c
 800f478:	e000ed04 	.word	0xe000ed04

0800f47c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f482:	4b12      	ldr	r3, [pc, #72]	@ (800f4cc <vPortExitCritical+0x50>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d10b      	bne.n	800f4a2 <vPortExitCritical+0x26>
	__asm volatile
 800f48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f48e:	f383 8811 	msr	BASEPRI, r3
 800f492:	f3bf 8f6f 	isb	sy
 800f496:	f3bf 8f4f 	dsb	sy
 800f49a:	607b      	str	r3, [r7, #4]
}
 800f49c:	bf00      	nop
 800f49e:	bf00      	nop
 800f4a0:	e7fd      	b.n	800f49e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f4cc <vPortExitCritical+0x50>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	4a08      	ldr	r2, [pc, #32]	@ (800f4cc <vPortExitCritical+0x50>)
 800f4aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f4ac:	4b07      	ldr	r3, [pc, #28]	@ (800f4cc <vPortExitCritical+0x50>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d105      	bne.n	800f4c0 <vPortExitCritical+0x44>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f4be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f4c0:	bf00      	nop
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr
 800f4cc:	2000000c 	.word	0x2000000c

0800f4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f4d0:	f3ef 8009 	mrs	r0, PSP
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	4b15      	ldr	r3, [pc, #84]	@ (800f530 <pxCurrentTCBConst>)
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	f01e 0f10 	tst.w	lr, #16
 800f4e0:	bf08      	it	eq
 800f4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ea:	6010      	str	r0, [r2, #0]
 800f4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f4f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f4f4:	f380 8811 	msr	BASEPRI, r0
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f7ff fb0a 	bl	800eb18 <vTaskSwitchContext>
 800f504:	f04f 0000 	mov.w	r0, #0
 800f508:	f380 8811 	msr	BASEPRI, r0
 800f50c:	bc09      	pop	{r0, r3}
 800f50e:	6819      	ldr	r1, [r3, #0]
 800f510:	6808      	ldr	r0, [r1, #0]
 800f512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f516:	f01e 0f10 	tst.w	lr, #16
 800f51a:	bf08      	it	eq
 800f51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f520:	f380 8809 	msr	PSP, r0
 800f524:	f3bf 8f6f 	isb	sy
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	f3af 8000 	nop.w

0800f530 <pxCurrentTCBConst>:
 800f530:	2000141c 	.word	0x2000141c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f534:	bf00      	nop
 800f536:	bf00      	nop

0800f538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	607b      	str	r3, [r7, #4]
}
 800f550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f552:	f7ff fa27 	bl	800e9a4 <xTaskIncrementTick>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d003      	beq.n	800f564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f55c:	4b06      	ldr	r3, [pc, #24]	@ (800f578 <xPortSysTickHandler+0x40>)
 800f55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f562:	601a      	str	r2, [r3, #0]
 800f564:	2300      	movs	r3, #0
 800f566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	f383 8811 	msr	BASEPRI, r3
}
 800f56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f570:	bf00      	nop
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	e000ed04 	.word	0xe000ed04

0800f57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f57c:	b480      	push	{r7}
 800f57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f580:	4b0b      	ldr	r3, [pc, #44]	@ (800f5b0 <vPortSetupTimerInterrupt+0x34>)
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f586:	4b0b      	ldr	r3, [pc, #44]	@ (800f5b4 <vPortSetupTimerInterrupt+0x38>)
 800f588:	2200      	movs	r2, #0
 800f58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f58c:	4b0a      	ldr	r3, [pc, #40]	@ (800f5b8 <vPortSetupTimerInterrupt+0x3c>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4a0a      	ldr	r2, [pc, #40]	@ (800f5bc <vPortSetupTimerInterrupt+0x40>)
 800f592:	fba2 2303 	umull	r2, r3, r2, r3
 800f596:	099b      	lsrs	r3, r3, #6
 800f598:	4a09      	ldr	r2, [pc, #36]	@ (800f5c0 <vPortSetupTimerInterrupt+0x44>)
 800f59a:	3b01      	subs	r3, #1
 800f59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f59e:	4b04      	ldr	r3, [pc, #16]	@ (800f5b0 <vPortSetupTimerInterrupt+0x34>)
 800f5a0:	2207      	movs	r2, #7
 800f5a2:	601a      	str	r2, [r3, #0]
}
 800f5a4:	bf00      	nop
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	e000e010 	.word	0xe000e010
 800f5b4:	e000e018 	.word	0xe000e018
 800f5b8:	20000000 	.word	0x20000000
 800f5bc:	10624dd3 	.word	0x10624dd3
 800f5c0:	e000e014 	.word	0xe000e014

0800f5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f5d4 <vPortEnableVFP+0x10>
 800f5c8:	6801      	ldr	r1, [r0, #0]
 800f5ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f5ce:	6001      	str	r1, [r0, #0]
 800f5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f5d2:	bf00      	nop
 800f5d4:	e000ed88 	.word	0xe000ed88

0800f5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08a      	sub	sp, #40	@ 0x28
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f5e4:	f7ff f922 	bl	800e82c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f5e8:	4b5c      	ldr	r3, [pc, #368]	@ (800f75c <pvPortMalloc+0x184>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d101      	bne.n	800f5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f5f0:	f000 f924 	bl	800f83c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f5f4:	4b5a      	ldr	r3, [pc, #360]	@ (800f760 <pvPortMalloc+0x188>)
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4013      	ands	r3, r2
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f040 8095 	bne.w	800f72c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d01e      	beq.n	800f646 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f608:	2208      	movs	r2, #8
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4413      	add	r3, r2
 800f60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f003 0307 	and.w	r3, r3, #7
 800f616:	2b00      	cmp	r3, #0
 800f618:	d015      	beq.n	800f646 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f023 0307 	bic.w	r3, r3, #7
 800f620:	3308      	adds	r3, #8
 800f622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f003 0307 	and.w	r3, r3, #7
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00b      	beq.n	800f646 <pvPortMalloc+0x6e>
	__asm volatile
 800f62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	617b      	str	r3, [r7, #20]
}
 800f640:	bf00      	nop
 800f642:	bf00      	nop
 800f644:	e7fd      	b.n	800f642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d06f      	beq.n	800f72c <pvPortMalloc+0x154>
 800f64c:	4b45      	ldr	r3, [pc, #276]	@ (800f764 <pvPortMalloc+0x18c>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	429a      	cmp	r2, r3
 800f654:	d86a      	bhi.n	800f72c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f656:	4b44      	ldr	r3, [pc, #272]	@ (800f768 <pvPortMalloc+0x190>)
 800f658:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f65a:	4b43      	ldr	r3, [pc, #268]	@ (800f768 <pvPortMalloc+0x190>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f660:	e004      	b.n	800f66c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f664:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	429a      	cmp	r2, r3
 800f674:	d903      	bls.n	800f67e <pvPortMalloc+0xa6>
 800f676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1f1      	bne.n	800f662 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f67e:	4b37      	ldr	r3, [pc, #220]	@ (800f75c <pvPortMalloc+0x184>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f684:	429a      	cmp	r2, r3
 800f686:	d051      	beq.n	800f72c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f688:	6a3b      	ldr	r3, [r7, #32]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2208      	movs	r2, #8
 800f68e:	4413      	add	r3, r2
 800f690:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69c:	685a      	ldr	r2, [r3, #4]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	1ad2      	subs	r2, r2, r3
 800f6a2:	2308      	movs	r3, #8
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d920      	bls.n	800f6ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	f003 0307 	and.w	r3, r3, #7
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00b      	beq.n	800f6d4 <pvPortMalloc+0xfc>
	__asm volatile
 800f6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c0:	f383 8811 	msr	BASEPRI, r3
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	613b      	str	r3, [r7, #16]
}
 800f6ce:	bf00      	nop
 800f6d0:	bf00      	nop
 800f6d2:	e7fd      	b.n	800f6d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d6:	685a      	ldr	r2, [r3, #4]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	1ad2      	subs	r2, r2, r3
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f6e6:	69b8      	ldr	r0, [r7, #24]
 800f6e8:	f000 f90a 	bl	800f900 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f6ec:	4b1d      	ldr	r3, [pc, #116]	@ (800f764 <pvPortMalloc+0x18c>)
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	4a1b      	ldr	r2, [pc, #108]	@ (800f764 <pvPortMalloc+0x18c>)
 800f6f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f6fa:	4b1a      	ldr	r3, [pc, #104]	@ (800f764 <pvPortMalloc+0x18c>)
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	4b1b      	ldr	r3, [pc, #108]	@ (800f76c <pvPortMalloc+0x194>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	429a      	cmp	r2, r3
 800f704:	d203      	bcs.n	800f70e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f706:	4b17      	ldr	r3, [pc, #92]	@ (800f764 <pvPortMalloc+0x18c>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a18      	ldr	r2, [pc, #96]	@ (800f76c <pvPortMalloc+0x194>)
 800f70c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	4b13      	ldr	r3, [pc, #76]	@ (800f760 <pvPortMalloc+0x188>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	431a      	orrs	r2, r3
 800f718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71e:	2200      	movs	r2, #0
 800f720:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f722:	4b13      	ldr	r3, [pc, #76]	@ (800f770 <pvPortMalloc+0x198>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3301      	adds	r3, #1
 800f728:	4a11      	ldr	r2, [pc, #68]	@ (800f770 <pvPortMalloc+0x198>)
 800f72a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f72c:	f7ff f88c 	bl	800e848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	f003 0307 	and.w	r3, r3, #7
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00b      	beq.n	800f752 <pvPortMalloc+0x17a>
	__asm volatile
 800f73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73e:	f383 8811 	msr	BASEPRI, r3
 800f742:	f3bf 8f6f 	isb	sy
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	60fb      	str	r3, [r7, #12]
}
 800f74c:	bf00      	nop
 800f74e:	bf00      	nop
 800f750:	e7fd      	b.n	800f74e <pvPortMalloc+0x176>
	return pvReturn;
 800f752:	69fb      	ldr	r3, [r7, #28]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3728      	adds	r7, #40	@ 0x28
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	20003d58 	.word	0x20003d58
 800f760:	20003d6c 	.word	0x20003d6c
 800f764:	20003d5c 	.word	0x20003d5c
 800f768:	20003d50 	.word	0x20003d50
 800f76c:	20003d60 	.word	0x20003d60
 800f770:	20003d64 	.word	0x20003d64

0800f774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b086      	sub	sp, #24
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d04f      	beq.n	800f826 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f786:	2308      	movs	r3, #8
 800f788:	425b      	negs	r3, r3
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	4413      	add	r3, r2
 800f78e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	685a      	ldr	r2, [r3, #4]
 800f798:	4b25      	ldr	r3, [pc, #148]	@ (800f830 <vPortFree+0xbc>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4013      	ands	r3, r2
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10b      	bne.n	800f7ba <vPortFree+0x46>
	__asm volatile
 800f7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	60fb      	str	r3, [r7, #12]
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop
 800f7b8:	e7fd      	b.n	800f7b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00b      	beq.n	800f7da <vPortFree+0x66>
	__asm volatile
 800f7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	60bb      	str	r3, [r7, #8]
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop
 800f7d8:	e7fd      	b.n	800f7d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	4b14      	ldr	r3, [pc, #80]	@ (800f830 <vPortFree+0xbc>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4013      	ands	r3, r2
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d01e      	beq.n	800f826 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d11a      	bne.n	800f826 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	685a      	ldr	r2, [r3, #4]
 800f7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800f830 <vPortFree+0xbc>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	43db      	mvns	r3, r3
 800f7fa:	401a      	ands	r2, r3
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f800:	f7ff f814 	bl	800e82c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	685a      	ldr	r2, [r3, #4]
 800f808:	4b0a      	ldr	r3, [pc, #40]	@ (800f834 <vPortFree+0xc0>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4413      	add	r3, r2
 800f80e:	4a09      	ldr	r2, [pc, #36]	@ (800f834 <vPortFree+0xc0>)
 800f810:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f812:	6938      	ldr	r0, [r7, #16]
 800f814:	f000 f874 	bl	800f900 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f818:	4b07      	ldr	r3, [pc, #28]	@ (800f838 <vPortFree+0xc4>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	3301      	adds	r3, #1
 800f81e:	4a06      	ldr	r2, [pc, #24]	@ (800f838 <vPortFree+0xc4>)
 800f820:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f822:	f7ff f811 	bl	800e848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f826:	bf00      	nop
 800f828:	3718      	adds	r7, #24
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	20003d6c 	.word	0x20003d6c
 800f834:	20003d5c 	.word	0x20003d5c
 800f838:	20003d68 	.word	0x20003d68

0800f83c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f842:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800f846:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f848:	4b27      	ldr	r3, [pc, #156]	@ (800f8e8 <prvHeapInit+0xac>)
 800f84a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f003 0307 	and.w	r3, r3, #7
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00c      	beq.n	800f870 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	3307      	adds	r3, #7
 800f85a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f023 0307 	bic.w	r3, r3, #7
 800f862:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	4a1f      	ldr	r2, [pc, #124]	@ (800f8e8 <prvHeapInit+0xac>)
 800f86c:	4413      	add	r3, r2
 800f86e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f874:	4a1d      	ldr	r2, [pc, #116]	@ (800f8ec <prvHeapInit+0xb0>)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f87a:	4b1c      	ldr	r3, [pc, #112]	@ (800f8ec <prvHeapInit+0xb0>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	4413      	add	r3, r2
 800f886:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f888:	2208      	movs	r2, #8
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	1a9b      	subs	r3, r3, r2
 800f88e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f023 0307 	bic.w	r3, r3, #7
 800f896:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	4a15      	ldr	r2, [pc, #84]	@ (800f8f0 <prvHeapInit+0xb4>)
 800f89c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f89e:	4b14      	ldr	r3, [pc, #80]	@ (800f8f0 <prvHeapInit+0xb4>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f8a6:	4b12      	ldr	r3, [pc, #72]	@ (800f8f0 <prvHeapInit+0xb4>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	1ad2      	subs	r2, r2, r3
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800f8f0 <prvHeapInit+0xb4>)
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	4a0a      	ldr	r2, [pc, #40]	@ (800f8f4 <prvHeapInit+0xb8>)
 800f8ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	4a09      	ldr	r2, [pc, #36]	@ (800f8f8 <prvHeapInit+0xbc>)
 800f8d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f8d4:	4b09      	ldr	r3, [pc, #36]	@ (800f8fc <prvHeapInit+0xc0>)
 800f8d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f8da:	601a      	str	r2, [r3, #0]
}
 800f8dc:	bf00      	nop
 800f8de:	3714      	adds	r7, #20
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr
 800f8e8:	20001550 	.word	0x20001550
 800f8ec:	20003d50 	.word	0x20003d50
 800f8f0:	20003d58 	.word	0x20003d58
 800f8f4:	20003d60 	.word	0x20003d60
 800f8f8:	20003d5c 	.word	0x20003d5c
 800f8fc:	20003d6c 	.word	0x20003d6c

0800f900 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f908:	4b28      	ldr	r3, [pc, #160]	@ (800f9ac <prvInsertBlockIntoFreeList+0xac>)
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	e002      	b.n	800f914 <prvInsertBlockIntoFreeList+0x14>
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d8f7      	bhi.n	800f90e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	4413      	add	r3, r2
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d108      	bne.n	800f942 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	685a      	ldr	r2, [r3, #4]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	441a      	add	r2, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	441a      	add	r2, r3
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	429a      	cmp	r2, r3
 800f954:	d118      	bne.n	800f988 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	4b15      	ldr	r3, [pc, #84]	@ (800f9b0 <prvInsertBlockIntoFreeList+0xb0>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d00d      	beq.n	800f97e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	685a      	ldr	r2, [r3, #4]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	441a      	add	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	601a      	str	r2, [r3, #0]
 800f97c:	e008      	b.n	800f990 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f97e:	4b0c      	ldr	r3, [pc, #48]	@ (800f9b0 <prvInsertBlockIntoFreeList+0xb0>)
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	e003      	b.n	800f990 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	429a      	cmp	r2, r3
 800f996:	d002      	beq.n	800f99e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f99e:	bf00      	nop
 800f9a0:	3714      	adds	r7, #20
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	20003d50 	.word	0x20003d50
 800f9b0:	20003d58 	.word	0x20003d58

0800f9b4 <malloc>:
 800f9b4:	4b02      	ldr	r3, [pc, #8]	@ (800f9c0 <malloc+0xc>)
 800f9b6:	4601      	mov	r1, r0
 800f9b8:	6818      	ldr	r0, [r3, #0]
 800f9ba:	f000 b82d 	b.w	800fa18 <_malloc_r>
 800f9be:	bf00      	nop
 800f9c0:	2000001c 	.word	0x2000001c

0800f9c4 <free>:
 800f9c4:	4b02      	ldr	r3, [pc, #8]	@ (800f9d0 <free+0xc>)
 800f9c6:	4601      	mov	r1, r0
 800f9c8:	6818      	ldr	r0, [r3, #0]
 800f9ca:	f000 bdcd 	b.w	8010568 <_free_r>
 800f9ce:	bf00      	nop
 800f9d0:	2000001c 	.word	0x2000001c

0800f9d4 <sbrk_aligned>:
 800f9d4:	b570      	push	{r4, r5, r6, lr}
 800f9d6:	4e0f      	ldr	r6, [pc, #60]	@ (800fa14 <sbrk_aligned+0x40>)
 800f9d8:	460c      	mov	r4, r1
 800f9da:	6831      	ldr	r1, [r6, #0]
 800f9dc:	4605      	mov	r5, r0
 800f9de:	b911      	cbnz	r1, 800f9e6 <sbrk_aligned+0x12>
 800f9e0:	f000 fd5e 	bl	80104a0 <_sbrk_r>
 800f9e4:	6030      	str	r0, [r6, #0]
 800f9e6:	4621      	mov	r1, r4
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f000 fd59 	bl	80104a0 <_sbrk_r>
 800f9ee:	1c43      	adds	r3, r0, #1
 800f9f0:	d103      	bne.n	800f9fa <sbrk_aligned+0x26>
 800f9f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	bd70      	pop	{r4, r5, r6, pc}
 800f9fa:	1cc4      	adds	r4, r0, #3
 800f9fc:	f024 0403 	bic.w	r4, r4, #3
 800fa00:	42a0      	cmp	r0, r4
 800fa02:	d0f8      	beq.n	800f9f6 <sbrk_aligned+0x22>
 800fa04:	1a21      	subs	r1, r4, r0
 800fa06:	4628      	mov	r0, r5
 800fa08:	f000 fd4a 	bl	80104a0 <_sbrk_r>
 800fa0c:	3001      	adds	r0, #1
 800fa0e:	d1f2      	bne.n	800f9f6 <sbrk_aligned+0x22>
 800fa10:	e7ef      	b.n	800f9f2 <sbrk_aligned+0x1e>
 800fa12:	bf00      	nop
 800fa14:	20003d70 	.word	0x20003d70

0800fa18 <_malloc_r>:
 800fa18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa1c:	1ccd      	adds	r5, r1, #3
 800fa1e:	f025 0503 	bic.w	r5, r5, #3
 800fa22:	3508      	adds	r5, #8
 800fa24:	2d0c      	cmp	r5, #12
 800fa26:	bf38      	it	cc
 800fa28:	250c      	movcc	r5, #12
 800fa2a:	2d00      	cmp	r5, #0
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	db01      	blt.n	800fa34 <_malloc_r+0x1c>
 800fa30:	42a9      	cmp	r1, r5
 800fa32:	d904      	bls.n	800fa3e <_malloc_r+0x26>
 800fa34:	230c      	movs	r3, #12
 800fa36:	6033      	str	r3, [r6, #0]
 800fa38:	2000      	movs	r0, #0
 800fa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb14 <_malloc_r+0xfc>
 800fa42:	f000 f869 	bl	800fb18 <__malloc_lock>
 800fa46:	f8d8 3000 	ldr.w	r3, [r8]
 800fa4a:	461c      	mov	r4, r3
 800fa4c:	bb44      	cbnz	r4, 800faa0 <_malloc_r+0x88>
 800fa4e:	4629      	mov	r1, r5
 800fa50:	4630      	mov	r0, r6
 800fa52:	f7ff ffbf 	bl	800f9d4 <sbrk_aligned>
 800fa56:	1c43      	adds	r3, r0, #1
 800fa58:	4604      	mov	r4, r0
 800fa5a:	d158      	bne.n	800fb0e <_malloc_r+0xf6>
 800fa5c:	f8d8 4000 	ldr.w	r4, [r8]
 800fa60:	4627      	mov	r7, r4
 800fa62:	2f00      	cmp	r7, #0
 800fa64:	d143      	bne.n	800faee <_malloc_r+0xd6>
 800fa66:	2c00      	cmp	r4, #0
 800fa68:	d04b      	beq.n	800fb02 <_malloc_r+0xea>
 800fa6a:	6823      	ldr	r3, [r4, #0]
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	4630      	mov	r0, r6
 800fa70:	eb04 0903 	add.w	r9, r4, r3
 800fa74:	f000 fd14 	bl	80104a0 <_sbrk_r>
 800fa78:	4581      	cmp	r9, r0
 800fa7a:	d142      	bne.n	800fb02 <_malloc_r+0xea>
 800fa7c:	6821      	ldr	r1, [r4, #0]
 800fa7e:	1a6d      	subs	r5, r5, r1
 800fa80:	4629      	mov	r1, r5
 800fa82:	4630      	mov	r0, r6
 800fa84:	f7ff ffa6 	bl	800f9d4 <sbrk_aligned>
 800fa88:	3001      	adds	r0, #1
 800fa8a:	d03a      	beq.n	800fb02 <_malloc_r+0xea>
 800fa8c:	6823      	ldr	r3, [r4, #0]
 800fa8e:	442b      	add	r3, r5
 800fa90:	6023      	str	r3, [r4, #0]
 800fa92:	f8d8 3000 	ldr.w	r3, [r8]
 800fa96:	685a      	ldr	r2, [r3, #4]
 800fa98:	bb62      	cbnz	r2, 800faf4 <_malloc_r+0xdc>
 800fa9a:	f8c8 7000 	str.w	r7, [r8]
 800fa9e:	e00f      	b.n	800fac0 <_malloc_r+0xa8>
 800faa0:	6822      	ldr	r2, [r4, #0]
 800faa2:	1b52      	subs	r2, r2, r5
 800faa4:	d420      	bmi.n	800fae8 <_malloc_r+0xd0>
 800faa6:	2a0b      	cmp	r2, #11
 800faa8:	d917      	bls.n	800fada <_malloc_r+0xc2>
 800faaa:	1961      	adds	r1, r4, r5
 800faac:	42a3      	cmp	r3, r4
 800faae:	6025      	str	r5, [r4, #0]
 800fab0:	bf18      	it	ne
 800fab2:	6059      	strne	r1, [r3, #4]
 800fab4:	6863      	ldr	r3, [r4, #4]
 800fab6:	bf08      	it	eq
 800fab8:	f8c8 1000 	streq.w	r1, [r8]
 800fabc:	5162      	str	r2, [r4, r5]
 800fabe:	604b      	str	r3, [r1, #4]
 800fac0:	4630      	mov	r0, r6
 800fac2:	f000 f82f 	bl	800fb24 <__malloc_unlock>
 800fac6:	f104 000b 	add.w	r0, r4, #11
 800faca:	1d23      	adds	r3, r4, #4
 800facc:	f020 0007 	bic.w	r0, r0, #7
 800fad0:	1ac2      	subs	r2, r0, r3
 800fad2:	bf1c      	itt	ne
 800fad4:	1a1b      	subne	r3, r3, r0
 800fad6:	50a3      	strne	r3, [r4, r2]
 800fad8:	e7af      	b.n	800fa3a <_malloc_r+0x22>
 800fada:	6862      	ldr	r2, [r4, #4]
 800fadc:	42a3      	cmp	r3, r4
 800fade:	bf0c      	ite	eq
 800fae0:	f8c8 2000 	streq.w	r2, [r8]
 800fae4:	605a      	strne	r2, [r3, #4]
 800fae6:	e7eb      	b.n	800fac0 <_malloc_r+0xa8>
 800fae8:	4623      	mov	r3, r4
 800faea:	6864      	ldr	r4, [r4, #4]
 800faec:	e7ae      	b.n	800fa4c <_malloc_r+0x34>
 800faee:	463c      	mov	r4, r7
 800faf0:	687f      	ldr	r7, [r7, #4]
 800faf2:	e7b6      	b.n	800fa62 <_malloc_r+0x4a>
 800faf4:	461a      	mov	r2, r3
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	d1fb      	bne.n	800faf4 <_malloc_r+0xdc>
 800fafc:	2300      	movs	r3, #0
 800fafe:	6053      	str	r3, [r2, #4]
 800fb00:	e7de      	b.n	800fac0 <_malloc_r+0xa8>
 800fb02:	230c      	movs	r3, #12
 800fb04:	6033      	str	r3, [r6, #0]
 800fb06:	4630      	mov	r0, r6
 800fb08:	f000 f80c 	bl	800fb24 <__malloc_unlock>
 800fb0c:	e794      	b.n	800fa38 <_malloc_r+0x20>
 800fb0e:	6005      	str	r5, [r0, #0]
 800fb10:	e7d6      	b.n	800fac0 <_malloc_r+0xa8>
 800fb12:	bf00      	nop
 800fb14:	20003d74 	.word	0x20003d74

0800fb18 <__malloc_lock>:
 800fb18:	4801      	ldr	r0, [pc, #4]	@ (800fb20 <__malloc_lock+0x8>)
 800fb1a:	f000 bd0e 	b.w	801053a <__retarget_lock_acquire_recursive>
 800fb1e:	bf00      	nop
 800fb20:	20003eb8 	.word	0x20003eb8

0800fb24 <__malloc_unlock>:
 800fb24:	4801      	ldr	r0, [pc, #4]	@ (800fb2c <__malloc_unlock+0x8>)
 800fb26:	f000 bd09 	b.w	801053c <__retarget_lock_release_recursive>
 800fb2a:	bf00      	nop
 800fb2c:	20003eb8 	.word	0x20003eb8

0800fb30 <_scanf_float>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	b087      	sub	sp, #28
 800fb36:	4617      	mov	r7, r2
 800fb38:	9303      	str	r3, [sp, #12]
 800fb3a:	688b      	ldr	r3, [r1, #8]
 800fb3c:	1e5a      	subs	r2, r3, #1
 800fb3e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fb42:	bf81      	itttt	hi
 800fb44:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fb48:	eb03 0b05 	addhi.w	fp, r3, r5
 800fb4c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fb50:	608b      	strhi	r3, [r1, #8]
 800fb52:	680b      	ldr	r3, [r1, #0]
 800fb54:	460a      	mov	r2, r1
 800fb56:	f04f 0500 	mov.w	r5, #0
 800fb5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fb5e:	f842 3b1c 	str.w	r3, [r2], #28
 800fb62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fb66:	4680      	mov	r8, r0
 800fb68:	460c      	mov	r4, r1
 800fb6a:	bf98      	it	ls
 800fb6c:	f04f 0b00 	movls.w	fp, #0
 800fb70:	9201      	str	r2, [sp, #4]
 800fb72:	4616      	mov	r6, r2
 800fb74:	46aa      	mov	sl, r5
 800fb76:	46a9      	mov	r9, r5
 800fb78:	9502      	str	r5, [sp, #8]
 800fb7a:	68a2      	ldr	r2, [r4, #8]
 800fb7c:	b152      	cbz	r2, 800fb94 <_scanf_float+0x64>
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2b4e      	cmp	r3, #78	@ 0x4e
 800fb84:	d864      	bhi.n	800fc50 <_scanf_float+0x120>
 800fb86:	2b40      	cmp	r3, #64	@ 0x40
 800fb88:	d83c      	bhi.n	800fc04 <_scanf_float+0xd4>
 800fb8a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fb8e:	b2c8      	uxtb	r0, r1
 800fb90:	280e      	cmp	r0, #14
 800fb92:	d93a      	bls.n	800fc0a <_scanf_float+0xda>
 800fb94:	f1b9 0f00 	cmp.w	r9, #0
 800fb98:	d003      	beq.n	800fba2 <_scanf_float+0x72>
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fba0:	6023      	str	r3, [r4, #0]
 800fba2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fba6:	f1ba 0f01 	cmp.w	sl, #1
 800fbaa:	f200 8117 	bhi.w	800fddc <_scanf_float+0x2ac>
 800fbae:	9b01      	ldr	r3, [sp, #4]
 800fbb0:	429e      	cmp	r6, r3
 800fbb2:	f200 8108 	bhi.w	800fdc6 <_scanf_float+0x296>
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	b007      	add	sp, #28
 800fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fbc2:	2a0d      	cmp	r2, #13
 800fbc4:	d8e6      	bhi.n	800fb94 <_scanf_float+0x64>
 800fbc6:	a101      	add	r1, pc, #4	@ (adr r1, 800fbcc <_scanf_float+0x9c>)
 800fbc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fbcc:	0800fd13 	.word	0x0800fd13
 800fbd0:	0800fb95 	.word	0x0800fb95
 800fbd4:	0800fb95 	.word	0x0800fb95
 800fbd8:	0800fb95 	.word	0x0800fb95
 800fbdc:	0800fd73 	.word	0x0800fd73
 800fbe0:	0800fd4b 	.word	0x0800fd4b
 800fbe4:	0800fb95 	.word	0x0800fb95
 800fbe8:	0800fb95 	.word	0x0800fb95
 800fbec:	0800fd21 	.word	0x0800fd21
 800fbf0:	0800fb95 	.word	0x0800fb95
 800fbf4:	0800fb95 	.word	0x0800fb95
 800fbf8:	0800fb95 	.word	0x0800fb95
 800fbfc:	0800fb95 	.word	0x0800fb95
 800fc00:	0800fcd9 	.word	0x0800fcd9
 800fc04:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fc08:	e7db      	b.n	800fbc2 <_scanf_float+0x92>
 800fc0a:	290e      	cmp	r1, #14
 800fc0c:	d8c2      	bhi.n	800fb94 <_scanf_float+0x64>
 800fc0e:	a001      	add	r0, pc, #4	@ (adr r0, 800fc14 <_scanf_float+0xe4>)
 800fc10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fc14:	0800fcc9 	.word	0x0800fcc9
 800fc18:	0800fb95 	.word	0x0800fb95
 800fc1c:	0800fcc9 	.word	0x0800fcc9
 800fc20:	0800fd5f 	.word	0x0800fd5f
 800fc24:	0800fb95 	.word	0x0800fb95
 800fc28:	0800fc71 	.word	0x0800fc71
 800fc2c:	0800fcaf 	.word	0x0800fcaf
 800fc30:	0800fcaf 	.word	0x0800fcaf
 800fc34:	0800fcaf 	.word	0x0800fcaf
 800fc38:	0800fcaf 	.word	0x0800fcaf
 800fc3c:	0800fcaf 	.word	0x0800fcaf
 800fc40:	0800fcaf 	.word	0x0800fcaf
 800fc44:	0800fcaf 	.word	0x0800fcaf
 800fc48:	0800fcaf 	.word	0x0800fcaf
 800fc4c:	0800fcaf 	.word	0x0800fcaf
 800fc50:	2b6e      	cmp	r3, #110	@ 0x6e
 800fc52:	d809      	bhi.n	800fc68 <_scanf_float+0x138>
 800fc54:	2b60      	cmp	r3, #96	@ 0x60
 800fc56:	d8b2      	bhi.n	800fbbe <_scanf_float+0x8e>
 800fc58:	2b54      	cmp	r3, #84	@ 0x54
 800fc5a:	d07b      	beq.n	800fd54 <_scanf_float+0x224>
 800fc5c:	2b59      	cmp	r3, #89	@ 0x59
 800fc5e:	d199      	bne.n	800fb94 <_scanf_float+0x64>
 800fc60:	2d07      	cmp	r5, #7
 800fc62:	d197      	bne.n	800fb94 <_scanf_float+0x64>
 800fc64:	2508      	movs	r5, #8
 800fc66:	e02c      	b.n	800fcc2 <_scanf_float+0x192>
 800fc68:	2b74      	cmp	r3, #116	@ 0x74
 800fc6a:	d073      	beq.n	800fd54 <_scanf_float+0x224>
 800fc6c:	2b79      	cmp	r3, #121	@ 0x79
 800fc6e:	e7f6      	b.n	800fc5e <_scanf_float+0x12e>
 800fc70:	6821      	ldr	r1, [r4, #0]
 800fc72:	05c8      	lsls	r0, r1, #23
 800fc74:	d51b      	bpl.n	800fcae <_scanf_float+0x17e>
 800fc76:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fc7a:	6021      	str	r1, [r4, #0]
 800fc7c:	f109 0901 	add.w	r9, r9, #1
 800fc80:	f1bb 0f00 	cmp.w	fp, #0
 800fc84:	d003      	beq.n	800fc8e <_scanf_float+0x15e>
 800fc86:	3201      	adds	r2, #1
 800fc88:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800fc8c:	60a2      	str	r2, [r4, #8]
 800fc8e:	68a3      	ldr	r3, [r4, #8]
 800fc90:	3b01      	subs	r3, #1
 800fc92:	60a3      	str	r3, [r4, #8]
 800fc94:	6923      	ldr	r3, [r4, #16]
 800fc96:	3301      	adds	r3, #1
 800fc98:	6123      	str	r3, [r4, #16]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	607b      	str	r3, [r7, #4]
 800fca2:	f340 8087 	ble.w	800fdb4 <_scanf_float+0x284>
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	603b      	str	r3, [r7, #0]
 800fcac:	e765      	b.n	800fb7a <_scanf_float+0x4a>
 800fcae:	eb1a 0105 	adds.w	r1, sl, r5
 800fcb2:	f47f af6f 	bne.w	800fb94 <_scanf_float+0x64>
 800fcb6:	6822      	ldr	r2, [r4, #0]
 800fcb8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fcbc:	6022      	str	r2, [r4, #0]
 800fcbe:	460d      	mov	r5, r1
 800fcc0:	468a      	mov	sl, r1
 800fcc2:	f806 3b01 	strb.w	r3, [r6], #1
 800fcc6:	e7e2      	b.n	800fc8e <_scanf_float+0x15e>
 800fcc8:	6822      	ldr	r2, [r4, #0]
 800fcca:	0610      	lsls	r0, r2, #24
 800fccc:	f57f af62 	bpl.w	800fb94 <_scanf_float+0x64>
 800fcd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fcd4:	6022      	str	r2, [r4, #0]
 800fcd6:	e7f4      	b.n	800fcc2 <_scanf_float+0x192>
 800fcd8:	f1ba 0f00 	cmp.w	sl, #0
 800fcdc:	d10e      	bne.n	800fcfc <_scanf_float+0x1cc>
 800fcde:	f1b9 0f00 	cmp.w	r9, #0
 800fce2:	d10e      	bne.n	800fd02 <_scanf_float+0x1d2>
 800fce4:	6822      	ldr	r2, [r4, #0]
 800fce6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fcea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fcee:	d108      	bne.n	800fd02 <_scanf_float+0x1d2>
 800fcf0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fcf4:	6022      	str	r2, [r4, #0]
 800fcf6:	f04f 0a01 	mov.w	sl, #1
 800fcfa:	e7e2      	b.n	800fcc2 <_scanf_float+0x192>
 800fcfc:	f1ba 0f02 	cmp.w	sl, #2
 800fd00:	d055      	beq.n	800fdae <_scanf_float+0x27e>
 800fd02:	2d01      	cmp	r5, #1
 800fd04:	d002      	beq.n	800fd0c <_scanf_float+0x1dc>
 800fd06:	2d04      	cmp	r5, #4
 800fd08:	f47f af44 	bne.w	800fb94 <_scanf_float+0x64>
 800fd0c:	3501      	adds	r5, #1
 800fd0e:	b2ed      	uxtb	r5, r5
 800fd10:	e7d7      	b.n	800fcc2 <_scanf_float+0x192>
 800fd12:	f1ba 0f01 	cmp.w	sl, #1
 800fd16:	f47f af3d 	bne.w	800fb94 <_scanf_float+0x64>
 800fd1a:	f04f 0a02 	mov.w	sl, #2
 800fd1e:	e7d0      	b.n	800fcc2 <_scanf_float+0x192>
 800fd20:	b97d      	cbnz	r5, 800fd42 <_scanf_float+0x212>
 800fd22:	f1b9 0f00 	cmp.w	r9, #0
 800fd26:	f47f af38 	bne.w	800fb9a <_scanf_float+0x6a>
 800fd2a:	6822      	ldr	r2, [r4, #0]
 800fd2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fd30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fd34:	f040 8108 	bne.w	800ff48 <_scanf_float+0x418>
 800fd38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fd3c:	6022      	str	r2, [r4, #0]
 800fd3e:	2501      	movs	r5, #1
 800fd40:	e7bf      	b.n	800fcc2 <_scanf_float+0x192>
 800fd42:	2d03      	cmp	r5, #3
 800fd44:	d0e2      	beq.n	800fd0c <_scanf_float+0x1dc>
 800fd46:	2d05      	cmp	r5, #5
 800fd48:	e7de      	b.n	800fd08 <_scanf_float+0x1d8>
 800fd4a:	2d02      	cmp	r5, #2
 800fd4c:	f47f af22 	bne.w	800fb94 <_scanf_float+0x64>
 800fd50:	2503      	movs	r5, #3
 800fd52:	e7b6      	b.n	800fcc2 <_scanf_float+0x192>
 800fd54:	2d06      	cmp	r5, #6
 800fd56:	f47f af1d 	bne.w	800fb94 <_scanf_float+0x64>
 800fd5a:	2507      	movs	r5, #7
 800fd5c:	e7b1      	b.n	800fcc2 <_scanf_float+0x192>
 800fd5e:	6822      	ldr	r2, [r4, #0]
 800fd60:	0591      	lsls	r1, r2, #22
 800fd62:	f57f af17 	bpl.w	800fb94 <_scanf_float+0x64>
 800fd66:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fd6a:	6022      	str	r2, [r4, #0]
 800fd6c:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd70:	e7a7      	b.n	800fcc2 <_scanf_float+0x192>
 800fd72:	6822      	ldr	r2, [r4, #0]
 800fd74:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fd78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fd7c:	d006      	beq.n	800fd8c <_scanf_float+0x25c>
 800fd7e:	0550      	lsls	r0, r2, #21
 800fd80:	f57f af08 	bpl.w	800fb94 <_scanf_float+0x64>
 800fd84:	f1b9 0f00 	cmp.w	r9, #0
 800fd88:	f000 80de 	beq.w	800ff48 <_scanf_float+0x418>
 800fd8c:	0591      	lsls	r1, r2, #22
 800fd8e:	bf58      	it	pl
 800fd90:	9902      	ldrpl	r1, [sp, #8]
 800fd92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fd96:	bf58      	it	pl
 800fd98:	eba9 0101 	subpl.w	r1, r9, r1
 800fd9c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fda0:	bf58      	it	pl
 800fda2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fda6:	6022      	str	r2, [r4, #0]
 800fda8:	f04f 0900 	mov.w	r9, #0
 800fdac:	e789      	b.n	800fcc2 <_scanf_float+0x192>
 800fdae:	f04f 0a03 	mov.w	sl, #3
 800fdb2:	e786      	b.n	800fcc2 <_scanf_float+0x192>
 800fdb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fdb8:	4639      	mov	r1, r7
 800fdba:	4640      	mov	r0, r8
 800fdbc:	4798      	blx	r3
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	f43f aedb 	beq.w	800fb7a <_scanf_float+0x4a>
 800fdc4:	e6e6      	b.n	800fb94 <_scanf_float+0x64>
 800fdc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fdca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdce:	463a      	mov	r2, r7
 800fdd0:	4640      	mov	r0, r8
 800fdd2:	4798      	blx	r3
 800fdd4:	6923      	ldr	r3, [r4, #16]
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	6123      	str	r3, [r4, #16]
 800fdda:	e6e8      	b.n	800fbae <_scanf_float+0x7e>
 800fddc:	1e6b      	subs	r3, r5, #1
 800fdde:	2b06      	cmp	r3, #6
 800fde0:	d824      	bhi.n	800fe2c <_scanf_float+0x2fc>
 800fde2:	2d02      	cmp	r5, #2
 800fde4:	d836      	bhi.n	800fe54 <_scanf_float+0x324>
 800fde6:	9b01      	ldr	r3, [sp, #4]
 800fde8:	429e      	cmp	r6, r3
 800fdea:	f67f aee4 	bls.w	800fbb6 <_scanf_float+0x86>
 800fdee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fdf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdf6:	463a      	mov	r2, r7
 800fdf8:	4640      	mov	r0, r8
 800fdfa:	4798      	blx	r3
 800fdfc:	6923      	ldr	r3, [r4, #16]
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	6123      	str	r3, [r4, #16]
 800fe02:	e7f0      	b.n	800fde6 <_scanf_float+0x2b6>
 800fe04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fe0c:	463a      	mov	r2, r7
 800fe0e:	4640      	mov	r0, r8
 800fe10:	4798      	blx	r3
 800fe12:	6923      	ldr	r3, [r4, #16]
 800fe14:	3b01      	subs	r3, #1
 800fe16:	6123      	str	r3, [r4, #16]
 800fe18:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fe1c:	fa5f fa8a 	uxtb.w	sl, sl
 800fe20:	f1ba 0f02 	cmp.w	sl, #2
 800fe24:	d1ee      	bne.n	800fe04 <_scanf_float+0x2d4>
 800fe26:	3d03      	subs	r5, #3
 800fe28:	b2ed      	uxtb	r5, r5
 800fe2a:	1b76      	subs	r6, r6, r5
 800fe2c:	6823      	ldr	r3, [r4, #0]
 800fe2e:	05da      	lsls	r2, r3, #23
 800fe30:	d530      	bpl.n	800fe94 <_scanf_float+0x364>
 800fe32:	055b      	lsls	r3, r3, #21
 800fe34:	d511      	bpl.n	800fe5a <_scanf_float+0x32a>
 800fe36:	9b01      	ldr	r3, [sp, #4]
 800fe38:	429e      	cmp	r6, r3
 800fe3a:	f67f aebc 	bls.w	800fbb6 <_scanf_float+0x86>
 800fe3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe46:	463a      	mov	r2, r7
 800fe48:	4640      	mov	r0, r8
 800fe4a:	4798      	blx	r3
 800fe4c:	6923      	ldr	r3, [r4, #16]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	6123      	str	r3, [r4, #16]
 800fe52:	e7f0      	b.n	800fe36 <_scanf_float+0x306>
 800fe54:	46aa      	mov	sl, r5
 800fe56:	46b3      	mov	fp, r6
 800fe58:	e7de      	b.n	800fe18 <_scanf_float+0x2e8>
 800fe5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fe5e:	6923      	ldr	r3, [r4, #16]
 800fe60:	2965      	cmp	r1, #101	@ 0x65
 800fe62:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800fe66:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800fe6a:	6123      	str	r3, [r4, #16]
 800fe6c:	d00c      	beq.n	800fe88 <_scanf_float+0x358>
 800fe6e:	2945      	cmp	r1, #69	@ 0x45
 800fe70:	d00a      	beq.n	800fe88 <_scanf_float+0x358>
 800fe72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe76:	463a      	mov	r2, r7
 800fe78:	4640      	mov	r0, r8
 800fe7a:	4798      	blx	r3
 800fe7c:	6923      	ldr	r3, [r4, #16]
 800fe7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fe82:	3b01      	subs	r3, #1
 800fe84:	1eb5      	subs	r5, r6, #2
 800fe86:	6123      	str	r3, [r4, #16]
 800fe88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe8c:	463a      	mov	r2, r7
 800fe8e:	4640      	mov	r0, r8
 800fe90:	4798      	blx	r3
 800fe92:	462e      	mov	r6, r5
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	f012 0210 	ands.w	r2, r2, #16
 800fe9a:	d001      	beq.n	800fea0 <_scanf_float+0x370>
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	e68b      	b.n	800fbb8 <_scanf_float+0x88>
 800fea0:	7032      	strb	r2, [r6, #0]
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800feac:	d11c      	bne.n	800fee8 <_scanf_float+0x3b8>
 800feae:	9b02      	ldr	r3, [sp, #8]
 800feb0:	454b      	cmp	r3, r9
 800feb2:	eba3 0209 	sub.w	r2, r3, r9
 800feb6:	d123      	bne.n	800ff00 <_scanf_float+0x3d0>
 800feb8:	9901      	ldr	r1, [sp, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	4640      	mov	r0, r8
 800febe:	f001 f99f 	bl	8011200 <_strtod_r>
 800fec2:	9b03      	ldr	r3, [sp, #12]
 800fec4:	6821      	ldr	r1, [r4, #0]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f011 0f02 	tst.w	r1, #2
 800fecc:	ec57 6b10 	vmov	r6, r7, d0
 800fed0:	f103 0204 	add.w	r2, r3, #4
 800fed4:	d01f      	beq.n	800ff16 <_scanf_float+0x3e6>
 800fed6:	9903      	ldr	r1, [sp, #12]
 800fed8:	600a      	str	r2, [r1, #0]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	e9c3 6700 	strd	r6, r7, [r3]
 800fee0:	68e3      	ldr	r3, [r4, #12]
 800fee2:	3301      	adds	r3, #1
 800fee4:	60e3      	str	r3, [r4, #12]
 800fee6:	e7d9      	b.n	800fe9c <_scanf_float+0x36c>
 800fee8:	9b04      	ldr	r3, [sp, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d0e4      	beq.n	800feb8 <_scanf_float+0x388>
 800feee:	9905      	ldr	r1, [sp, #20]
 800fef0:	230a      	movs	r3, #10
 800fef2:	3101      	adds	r1, #1
 800fef4:	4640      	mov	r0, r8
 800fef6:	f001 fa03 	bl	8011300 <_strtol_r>
 800fefa:	9b04      	ldr	r3, [sp, #16]
 800fefc:	9e05      	ldr	r6, [sp, #20]
 800fefe:	1ac2      	subs	r2, r0, r3
 800ff00:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ff04:	429e      	cmp	r6, r3
 800ff06:	bf28      	it	cs
 800ff08:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ff0c:	4910      	ldr	r1, [pc, #64]	@ (800ff50 <_scanf_float+0x420>)
 800ff0e:	4630      	mov	r0, r6
 800ff10:	f000 f954 	bl	80101bc <siprintf>
 800ff14:	e7d0      	b.n	800feb8 <_scanf_float+0x388>
 800ff16:	f011 0f04 	tst.w	r1, #4
 800ff1a:	9903      	ldr	r1, [sp, #12]
 800ff1c:	600a      	str	r2, [r1, #0]
 800ff1e:	d1dc      	bne.n	800feda <_scanf_float+0x3aa>
 800ff20:	681d      	ldr	r5, [r3, #0]
 800ff22:	4632      	mov	r2, r6
 800ff24:	463b      	mov	r3, r7
 800ff26:	4630      	mov	r0, r6
 800ff28:	4639      	mov	r1, r7
 800ff2a:	f7f0 fe0f 	bl	8000b4c <__aeabi_dcmpun>
 800ff2e:	b128      	cbz	r0, 800ff3c <_scanf_float+0x40c>
 800ff30:	4808      	ldr	r0, [pc, #32]	@ (800ff54 <_scanf_float+0x424>)
 800ff32:	f000 fb13 	bl	801055c <nanf>
 800ff36:	ed85 0a00 	vstr	s0, [r5]
 800ff3a:	e7d1      	b.n	800fee0 <_scanf_float+0x3b0>
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	4639      	mov	r1, r7
 800ff40:	f7f0 fe62 	bl	8000c08 <__aeabi_d2f>
 800ff44:	6028      	str	r0, [r5, #0]
 800ff46:	e7cb      	b.n	800fee0 <_scanf_float+0x3b0>
 800ff48:	f04f 0900 	mov.w	r9, #0
 800ff4c:	e629      	b.n	800fba2 <_scanf_float+0x72>
 800ff4e:	bf00      	nop
 800ff50:	08013af8 	.word	0x08013af8
 800ff54:	08013ed3 	.word	0x08013ed3

0800ff58 <std>:
 800ff58:	2300      	movs	r3, #0
 800ff5a:	b510      	push	{r4, lr}
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff66:	6083      	str	r3, [r0, #8]
 800ff68:	8181      	strh	r1, [r0, #12]
 800ff6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff6c:	81c2      	strh	r2, [r0, #14]
 800ff6e:	6183      	str	r3, [r0, #24]
 800ff70:	4619      	mov	r1, r3
 800ff72:	2208      	movs	r2, #8
 800ff74:	305c      	adds	r0, #92	@ 0x5c
 800ff76:	f000 fa45 	bl	8010404 <memset>
 800ff7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffb0 <std+0x58>)
 800ff7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffb4 <std+0x5c>)
 800ff80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff82:	4b0d      	ldr	r3, [pc, #52]	@ (800ffb8 <std+0x60>)
 800ff84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff86:	4b0d      	ldr	r3, [pc, #52]	@ (800ffbc <std+0x64>)
 800ff88:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc0 <std+0x68>)
 800ff8c:	6224      	str	r4, [r4, #32]
 800ff8e:	429c      	cmp	r4, r3
 800ff90:	d006      	beq.n	800ffa0 <std+0x48>
 800ff92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff96:	4294      	cmp	r4, r2
 800ff98:	d002      	beq.n	800ffa0 <std+0x48>
 800ff9a:	33d0      	adds	r3, #208	@ 0xd0
 800ff9c:	429c      	cmp	r4, r3
 800ff9e:	d105      	bne.n	800ffac <std+0x54>
 800ffa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ffa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffa8:	f000 bac6 	b.w	8010538 <__retarget_lock_init_recursive>
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	bf00      	nop
 800ffb0:	08010251 	.word	0x08010251
 800ffb4:	08010277 	.word	0x08010277
 800ffb8:	080102af 	.word	0x080102af
 800ffbc:	080102d3 	.word	0x080102d3
 800ffc0:	20003d78 	.word	0x20003d78

0800ffc4 <stdio_exit_handler>:
 800ffc4:	4a02      	ldr	r2, [pc, #8]	@ (800ffd0 <stdio_exit_handler+0xc>)
 800ffc6:	4903      	ldr	r1, [pc, #12]	@ (800ffd4 <stdio_exit_handler+0x10>)
 800ffc8:	4803      	ldr	r0, [pc, #12]	@ (800ffd8 <stdio_exit_handler+0x14>)
 800ffca:	f000 b869 	b.w	80100a0 <_fwalk_sglue>
 800ffce:	bf00      	nop
 800ffd0:	20000010 	.word	0x20000010
 800ffd4:	08012291 	.word	0x08012291
 800ffd8:	20000020 	.word	0x20000020

0800ffdc <cleanup_stdio>:
 800ffdc:	6841      	ldr	r1, [r0, #4]
 800ffde:	4b0c      	ldr	r3, [pc, #48]	@ (8010010 <cleanup_stdio+0x34>)
 800ffe0:	4299      	cmp	r1, r3
 800ffe2:	b510      	push	{r4, lr}
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	d001      	beq.n	800ffec <cleanup_stdio+0x10>
 800ffe8:	f002 f952 	bl	8012290 <_fflush_r>
 800ffec:	68a1      	ldr	r1, [r4, #8]
 800ffee:	4b09      	ldr	r3, [pc, #36]	@ (8010014 <cleanup_stdio+0x38>)
 800fff0:	4299      	cmp	r1, r3
 800fff2:	d002      	beq.n	800fffa <cleanup_stdio+0x1e>
 800fff4:	4620      	mov	r0, r4
 800fff6:	f002 f94b 	bl	8012290 <_fflush_r>
 800fffa:	68e1      	ldr	r1, [r4, #12]
 800fffc:	4b06      	ldr	r3, [pc, #24]	@ (8010018 <cleanup_stdio+0x3c>)
 800fffe:	4299      	cmp	r1, r3
 8010000:	d004      	beq.n	801000c <cleanup_stdio+0x30>
 8010002:	4620      	mov	r0, r4
 8010004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010008:	f002 b942 	b.w	8012290 <_fflush_r>
 801000c:	bd10      	pop	{r4, pc}
 801000e:	bf00      	nop
 8010010:	20003d78 	.word	0x20003d78
 8010014:	20003de0 	.word	0x20003de0
 8010018:	20003e48 	.word	0x20003e48

0801001c <global_stdio_init.part.0>:
 801001c:	b510      	push	{r4, lr}
 801001e:	4b0b      	ldr	r3, [pc, #44]	@ (801004c <global_stdio_init.part.0+0x30>)
 8010020:	4c0b      	ldr	r4, [pc, #44]	@ (8010050 <global_stdio_init.part.0+0x34>)
 8010022:	4a0c      	ldr	r2, [pc, #48]	@ (8010054 <global_stdio_init.part.0+0x38>)
 8010024:	601a      	str	r2, [r3, #0]
 8010026:	4620      	mov	r0, r4
 8010028:	2200      	movs	r2, #0
 801002a:	2104      	movs	r1, #4
 801002c:	f7ff ff94 	bl	800ff58 <std>
 8010030:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010034:	2201      	movs	r2, #1
 8010036:	2109      	movs	r1, #9
 8010038:	f7ff ff8e 	bl	800ff58 <std>
 801003c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010040:	2202      	movs	r2, #2
 8010042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010046:	2112      	movs	r1, #18
 8010048:	f7ff bf86 	b.w	800ff58 <std>
 801004c:	20003eb0 	.word	0x20003eb0
 8010050:	20003d78 	.word	0x20003d78
 8010054:	0800ffc5 	.word	0x0800ffc5

08010058 <__sfp_lock_acquire>:
 8010058:	4801      	ldr	r0, [pc, #4]	@ (8010060 <__sfp_lock_acquire+0x8>)
 801005a:	f000 ba6e 	b.w	801053a <__retarget_lock_acquire_recursive>
 801005e:	bf00      	nop
 8010060:	20003eb9 	.word	0x20003eb9

08010064 <__sfp_lock_release>:
 8010064:	4801      	ldr	r0, [pc, #4]	@ (801006c <__sfp_lock_release+0x8>)
 8010066:	f000 ba69 	b.w	801053c <__retarget_lock_release_recursive>
 801006a:	bf00      	nop
 801006c:	20003eb9 	.word	0x20003eb9

08010070 <__sinit>:
 8010070:	b510      	push	{r4, lr}
 8010072:	4604      	mov	r4, r0
 8010074:	f7ff fff0 	bl	8010058 <__sfp_lock_acquire>
 8010078:	6a23      	ldr	r3, [r4, #32]
 801007a:	b11b      	cbz	r3, 8010084 <__sinit+0x14>
 801007c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010080:	f7ff bff0 	b.w	8010064 <__sfp_lock_release>
 8010084:	4b04      	ldr	r3, [pc, #16]	@ (8010098 <__sinit+0x28>)
 8010086:	6223      	str	r3, [r4, #32]
 8010088:	4b04      	ldr	r3, [pc, #16]	@ (801009c <__sinit+0x2c>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1f5      	bne.n	801007c <__sinit+0xc>
 8010090:	f7ff ffc4 	bl	801001c <global_stdio_init.part.0>
 8010094:	e7f2      	b.n	801007c <__sinit+0xc>
 8010096:	bf00      	nop
 8010098:	0800ffdd 	.word	0x0800ffdd
 801009c:	20003eb0 	.word	0x20003eb0

080100a0 <_fwalk_sglue>:
 80100a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100a4:	4607      	mov	r7, r0
 80100a6:	4688      	mov	r8, r1
 80100a8:	4614      	mov	r4, r2
 80100aa:	2600      	movs	r6, #0
 80100ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100b0:	f1b9 0901 	subs.w	r9, r9, #1
 80100b4:	d505      	bpl.n	80100c2 <_fwalk_sglue+0x22>
 80100b6:	6824      	ldr	r4, [r4, #0]
 80100b8:	2c00      	cmp	r4, #0
 80100ba:	d1f7      	bne.n	80100ac <_fwalk_sglue+0xc>
 80100bc:	4630      	mov	r0, r6
 80100be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c2:	89ab      	ldrh	r3, [r5, #12]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d907      	bls.n	80100d8 <_fwalk_sglue+0x38>
 80100c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100cc:	3301      	adds	r3, #1
 80100ce:	d003      	beq.n	80100d8 <_fwalk_sglue+0x38>
 80100d0:	4629      	mov	r1, r5
 80100d2:	4638      	mov	r0, r7
 80100d4:	47c0      	blx	r8
 80100d6:	4306      	orrs	r6, r0
 80100d8:	3568      	adds	r5, #104	@ 0x68
 80100da:	e7e9      	b.n	80100b0 <_fwalk_sglue+0x10>

080100dc <iprintf>:
 80100dc:	b40f      	push	{r0, r1, r2, r3}
 80100de:	b507      	push	{r0, r1, r2, lr}
 80100e0:	4906      	ldr	r1, [pc, #24]	@ (80100fc <iprintf+0x20>)
 80100e2:	ab04      	add	r3, sp, #16
 80100e4:	6808      	ldr	r0, [r1, #0]
 80100e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ea:	6881      	ldr	r1, [r0, #8]
 80100ec:	9301      	str	r3, [sp, #4]
 80100ee:	f001 fc57 	bl	80119a0 <_vfiprintf_r>
 80100f2:	b003      	add	sp, #12
 80100f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80100f8:	b004      	add	sp, #16
 80100fa:	4770      	bx	lr
 80100fc:	2000001c 	.word	0x2000001c

08010100 <_puts_r>:
 8010100:	6a03      	ldr	r3, [r0, #32]
 8010102:	b570      	push	{r4, r5, r6, lr}
 8010104:	6884      	ldr	r4, [r0, #8]
 8010106:	4605      	mov	r5, r0
 8010108:	460e      	mov	r6, r1
 801010a:	b90b      	cbnz	r3, 8010110 <_puts_r+0x10>
 801010c:	f7ff ffb0 	bl	8010070 <__sinit>
 8010110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010112:	07db      	lsls	r3, r3, #31
 8010114:	d405      	bmi.n	8010122 <_puts_r+0x22>
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	0598      	lsls	r0, r3, #22
 801011a:	d402      	bmi.n	8010122 <_puts_r+0x22>
 801011c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801011e:	f000 fa0c 	bl	801053a <__retarget_lock_acquire_recursive>
 8010122:	89a3      	ldrh	r3, [r4, #12]
 8010124:	0719      	lsls	r1, r3, #28
 8010126:	d502      	bpl.n	801012e <_puts_r+0x2e>
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d135      	bne.n	801019a <_puts_r+0x9a>
 801012e:	4621      	mov	r1, r4
 8010130:	4628      	mov	r0, r5
 8010132:	f000 f911 	bl	8010358 <__swsetup_r>
 8010136:	b380      	cbz	r0, 801019a <_puts_r+0x9a>
 8010138:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801013c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801013e:	07da      	lsls	r2, r3, #31
 8010140:	d405      	bmi.n	801014e <_puts_r+0x4e>
 8010142:	89a3      	ldrh	r3, [r4, #12]
 8010144:	059b      	lsls	r3, r3, #22
 8010146:	d402      	bmi.n	801014e <_puts_r+0x4e>
 8010148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801014a:	f000 f9f7 	bl	801053c <__retarget_lock_release_recursive>
 801014e:	4628      	mov	r0, r5
 8010150:	bd70      	pop	{r4, r5, r6, pc}
 8010152:	2b00      	cmp	r3, #0
 8010154:	da04      	bge.n	8010160 <_puts_r+0x60>
 8010156:	69a2      	ldr	r2, [r4, #24]
 8010158:	429a      	cmp	r2, r3
 801015a:	dc17      	bgt.n	801018c <_puts_r+0x8c>
 801015c:	290a      	cmp	r1, #10
 801015e:	d015      	beq.n	801018c <_puts_r+0x8c>
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	1c5a      	adds	r2, r3, #1
 8010164:	6022      	str	r2, [r4, #0]
 8010166:	7019      	strb	r1, [r3, #0]
 8010168:	68a3      	ldr	r3, [r4, #8]
 801016a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801016e:	3b01      	subs	r3, #1
 8010170:	60a3      	str	r3, [r4, #8]
 8010172:	2900      	cmp	r1, #0
 8010174:	d1ed      	bne.n	8010152 <_puts_r+0x52>
 8010176:	2b00      	cmp	r3, #0
 8010178:	da11      	bge.n	801019e <_puts_r+0x9e>
 801017a:	4622      	mov	r2, r4
 801017c:	210a      	movs	r1, #10
 801017e:	4628      	mov	r0, r5
 8010180:	f000 f8ab 	bl	80102da <__swbuf_r>
 8010184:	3001      	adds	r0, #1
 8010186:	d0d7      	beq.n	8010138 <_puts_r+0x38>
 8010188:	250a      	movs	r5, #10
 801018a:	e7d7      	b.n	801013c <_puts_r+0x3c>
 801018c:	4622      	mov	r2, r4
 801018e:	4628      	mov	r0, r5
 8010190:	f000 f8a3 	bl	80102da <__swbuf_r>
 8010194:	3001      	adds	r0, #1
 8010196:	d1e7      	bne.n	8010168 <_puts_r+0x68>
 8010198:	e7ce      	b.n	8010138 <_puts_r+0x38>
 801019a:	3e01      	subs	r6, #1
 801019c:	e7e4      	b.n	8010168 <_puts_r+0x68>
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	1c5a      	adds	r2, r3, #1
 80101a2:	6022      	str	r2, [r4, #0]
 80101a4:	220a      	movs	r2, #10
 80101a6:	701a      	strb	r2, [r3, #0]
 80101a8:	e7ee      	b.n	8010188 <_puts_r+0x88>
	...

080101ac <puts>:
 80101ac:	4b02      	ldr	r3, [pc, #8]	@ (80101b8 <puts+0xc>)
 80101ae:	4601      	mov	r1, r0
 80101b0:	6818      	ldr	r0, [r3, #0]
 80101b2:	f7ff bfa5 	b.w	8010100 <_puts_r>
 80101b6:	bf00      	nop
 80101b8:	2000001c 	.word	0x2000001c

080101bc <siprintf>:
 80101bc:	b40e      	push	{r1, r2, r3}
 80101be:	b500      	push	{lr}
 80101c0:	b09c      	sub	sp, #112	@ 0x70
 80101c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80101c4:	9002      	str	r0, [sp, #8]
 80101c6:	9006      	str	r0, [sp, #24]
 80101c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80101cc:	4809      	ldr	r0, [pc, #36]	@ (80101f4 <siprintf+0x38>)
 80101ce:	9107      	str	r1, [sp, #28]
 80101d0:	9104      	str	r1, [sp, #16]
 80101d2:	4909      	ldr	r1, [pc, #36]	@ (80101f8 <siprintf+0x3c>)
 80101d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80101d8:	9105      	str	r1, [sp, #20]
 80101da:	6800      	ldr	r0, [r0, #0]
 80101dc:	9301      	str	r3, [sp, #4]
 80101de:	a902      	add	r1, sp, #8
 80101e0:	f001 f8ec 	bl	80113bc <_svfiprintf_r>
 80101e4:	9b02      	ldr	r3, [sp, #8]
 80101e6:	2200      	movs	r2, #0
 80101e8:	701a      	strb	r2, [r3, #0]
 80101ea:	b01c      	add	sp, #112	@ 0x70
 80101ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80101f0:	b003      	add	sp, #12
 80101f2:	4770      	bx	lr
 80101f4:	2000001c 	.word	0x2000001c
 80101f8:	ffff0208 	.word	0xffff0208

080101fc <siscanf>:
 80101fc:	b40e      	push	{r1, r2, r3}
 80101fe:	b530      	push	{r4, r5, lr}
 8010200:	b09c      	sub	sp, #112	@ 0x70
 8010202:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010204:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010208:	f854 5b04 	ldr.w	r5, [r4], #4
 801020c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010210:	9002      	str	r0, [sp, #8]
 8010212:	9006      	str	r0, [sp, #24]
 8010214:	f7ef ffe6 	bl	80001e4 <strlen>
 8010218:	4b0b      	ldr	r3, [pc, #44]	@ (8010248 <siscanf+0x4c>)
 801021a:	9003      	str	r0, [sp, #12]
 801021c:	9007      	str	r0, [sp, #28]
 801021e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010220:	480a      	ldr	r0, [pc, #40]	@ (801024c <siscanf+0x50>)
 8010222:	9401      	str	r4, [sp, #4]
 8010224:	2300      	movs	r3, #0
 8010226:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010228:	9314      	str	r3, [sp, #80]	@ 0x50
 801022a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801022e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010232:	462a      	mov	r2, r5
 8010234:	4623      	mov	r3, r4
 8010236:	a902      	add	r1, sp, #8
 8010238:	6800      	ldr	r0, [r0, #0]
 801023a:	f001 fa13 	bl	8011664 <__ssvfiscanf_r>
 801023e:	b01c      	add	sp, #112	@ 0x70
 8010240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010244:	b003      	add	sp, #12
 8010246:	4770      	bx	lr
 8010248:	08010273 	.word	0x08010273
 801024c:	2000001c 	.word	0x2000001c

08010250 <__sread>:
 8010250:	b510      	push	{r4, lr}
 8010252:	460c      	mov	r4, r1
 8010254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010258:	f000 f910 	bl	801047c <_read_r>
 801025c:	2800      	cmp	r0, #0
 801025e:	bfab      	itete	ge
 8010260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010262:	89a3      	ldrhlt	r3, [r4, #12]
 8010264:	181b      	addge	r3, r3, r0
 8010266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801026a:	bfac      	ite	ge
 801026c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801026e:	81a3      	strhlt	r3, [r4, #12]
 8010270:	bd10      	pop	{r4, pc}

08010272 <__seofread>:
 8010272:	2000      	movs	r0, #0
 8010274:	4770      	bx	lr

08010276 <__swrite>:
 8010276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801027a:	461f      	mov	r7, r3
 801027c:	898b      	ldrh	r3, [r1, #12]
 801027e:	05db      	lsls	r3, r3, #23
 8010280:	4605      	mov	r5, r0
 8010282:	460c      	mov	r4, r1
 8010284:	4616      	mov	r6, r2
 8010286:	d505      	bpl.n	8010294 <__swrite+0x1e>
 8010288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801028c:	2302      	movs	r3, #2
 801028e:	2200      	movs	r2, #0
 8010290:	f000 f8e2 	bl	8010458 <_lseek_r>
 8010294:	89a3      	ldrh	r3, [r4, #12]
 8010296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801029a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801029e:	81a3      	strh	r3, [r4, #12]
 80102a0:	4632      	mov	r2, r6
 80102a2:	463b      	mov	r3, r7
 80102a4:	4628      	mov	r0, r5
 80102a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102aa:	f000 b909 	b.w	80104c0 <_write_r>

080102ae <__sseek>:
 80102ae:	b510      	push	{r4, lr}
 80102b0:	460c      	mov	r4, r1
 80102b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b6:	f000 f8cf 	bl	8010458 <_lseek_r>
 80102ba:	1c43      	adds	r3, r0, #1
 80102bc:	89a3      	ldrh	r3, [r4, #12]
 80102be:	bf15      	itete	ne
 80102c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80102c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80102c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80102ca:	81a3      	strheq	r3, [r4, #12]
 80102cc:	bf18      	it	ne
 80102ce:	81a3      	strhne	r3, [r4, #12]
 80102d0:	bd10      	pop	{r4, pc}

080102d2 <__sclose>:
 80102d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d6:	f000 b8af 	b.w	8010438 <_close_r>

080102da <__swbuf_r>:
 80102da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102dc:	460e      	mov	r6, r1
 80102de:	4614      	mov	r4, r2
 80102e0:	4605      	mov	r5, r0
 80102e2:	b118      	cbz	r0, 80102ec <__swbuf_r+0x12>
 80102e4:	6a03      	ldr	r3, [r0, #32]
 80102e6:	b90b      	cbnz	r3, 80102ec <__swbuf_r+0x12>
 80102e8:	f7ff fec2 	bl	8010070 <__sinit>
 80102ec:	69a3      	ldr	r3, [r4, #24]
 80102ee:	60a3      	str	r3, [r4, #8]
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	071a      	lsls	r2, r3, #28
 80102f4:	d501      	bpl.n	80102fa <__swbuf_r+0x20>
 80102f6:	6923      	ldr	r3, [r4, #16]
 80102f8:	b943      	cbnz	r3, 801030c <__swbuf_r+0x32>
 80102fa:	4621      	mov	r1, r4
 80102fc:	4628      	mov	r0, r5
 80102fe:	f000 f82b 	bl	8010358 <__swsetup_r>
 8010302:	b118      	cbz	r0, 801030c <__swbuf_r+0x32>
 8010304:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010308:	4638      	mov	r0, r7
 801030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	6922      	ldr	r2, [r4, #16]
 8010310:	1a98      	subs	r0, r3, r2
 8010312:	6963      	ldr	r3, [r4, #20]
 8010314:	b2f6      	uxtb	r6, r6
 8010316:	4283      	cmp	r3, r0
 8010318:	4637      	mov	r7, r6
 801031a:	dc05      	bgt.n	8010328 <__swbuf_r+0x4e>
 801031c:	4621      	mov	r1, r4
 801031e:	4628      	mov	r0, r5
 8010320:	f001 ffb6 	bl	8012290 <_fflush_r>
 8010324:	2800      	cmp	r0, #0
 8010326:	d1ed      	bne.n	8010304 <__swbuf_r+0x2a>
 8010328:	68a3      	ldr	r3, [r4, #8]
 801032a:	3b01      	subs	r3, #1
 801032c:	60a3      	str	r3, [r4, #8]
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	6022      	str	r2, [r4, #0]
 8010334:	701e      	strb	r6, [r3, #0]
 8010336:	6962      	ldr	r2, [r4, #20]
 8010338:	1c43      	adds	r3, r0, #1
 801033a:	429a      	cmp	r2, r3
 801033c:	d004      	beq.n	8010348 <__swbuf_r+0x6e>
 801033e:	89a3      	ldrh	r3, [r4, #12]
 8010340:	07db      	lsls	r3, r3, #31
 8010342:	d5e1      	bpl.n	8010308 <__swbuf_r+0x2e>
 8010344:	2e0a      	cmp	r6, #10
 8010346:	d1df      	bne.n	8010308 <__swbuf_r+0x2e>
 8010348:	4621      	mov	r1, r4
 801034a:	4628      	mov	r0, r5
 801034c:	f001 ffa0 	bl	8012290 <_fflush_r>
 8010350:	2800      	cmp	r0, #0
 8010352:	d0d9      	beq.n	8010308 <__swbuf_r+0x2e>
 8010354:	e7d6      	b.n	8010304 <__swbuf_r+0x2a>
	...

08010358 <__swsetup_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	4b29      	ldr	r3, [pc, #164]	@ (8010400 <__swsetup_r+0xa8>)
 801035c:	4605      	mov	r5, r0
 801035e:	6818      	ldr	r0, [r3, #0]
 8010360:	460c      	mov	r4, r1
 8010362:	b118      	cbz	r0, 801036c <__swsetup_r+0x14>
 8010364:	6a03      	ldr	r3, [r0, #32]
 8010366:	b90b      	cbnz	r3, 801036c <__swsetup_r+0x14>
 8010368:	f7ff fe82 	bl	8010070 <__sinit>
 801036c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010370:	0719      	lsls	r1, r3, #28
 8010372:	d422      	bmi.n	80103ba <__swsetup_r+0x62>
 8010374:	06da      	lsls	r2, r3, #27
 8010376:	d407      	bmi.n	8010388 <__swsetup_r+0x30>
 8010378:	2209      	movs	r2, #9
 801037a:	602a      	str	r2, [r5, #0]
 801037c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010380:	81a3      	strh	r3, [r4, #12]
 8010382:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010386:	e033      	b.n	80103f0 <__swsetup_r+0x98>
 8010388:	0758      	lsls	r0, r3, #29
 801038a:	d512      	bpl.n	80103b2 <__swsetup_r+0x5a>
 801038c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801038e:	b141      	cbz	r1, 80103a2 <__swsetup_r+0x4a>
 8010390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010394:	4299      	cmp	r1, r3
 8010396:	d002      	beq.n	801039e <__swsetup_r+0x46>
 8010398:	4628      	mov	r0, r5
 801039a:	f000 f8e5 	bl	8010568 <_free_r>
 801039e:	2300      	movs	r3, #0
 80103a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80103a2:	89a3      	ldrh	r3, [r4, #12]
 80103a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80103a8:	81a3      	strh	r3, [r4, #12]
 80103aa:	2300      	movs	r3, #0
 80103ac:	6063      	str	r3, [r4, #4]
 80103ae:	6923      	ldr	r3, [r4, #16]
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	89a3      	ldrh	r3, [r4, #12]
 80103b4:	f043 0308 	orr.w	r3, r3, #8
 80103b8:	81a3      	strh	r3, [r4, #12]
 80103ba:	6923      	ldr	r3, [r4, #16]
 80103bc:	b94b      	cbnz	r3, 80103d2 <__swsetup_r+0x7a>
 80103be:	89a3      	ldrh	r3, [r4, #12]
 80103c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80103c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80103c8:	d003      	beq.n	80103d2 <__swsetup_r+0x7a>
 80103ca:	4621      	mov	r1, r4
 80103cc:	4628      	mov	r0, r5
 80103ce:	f001 ffad 	bl	801232c <__smakebuf_r>
 80103d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103d6:	f013 0201 	ands.w	r2, r3, #1
 80103da:	d00a      	beq.n	80103f2 <__swsetup_r+0x9a>
 80103dc:	2200      	movs	r2, #0
 80103de:	60a2      	str	r2, [r4, #8]
 80103e0:	6962      	ldr	r2, [r4, #20]
 80103e2:	4252      	negs	r2, r2
 80103e4:	61a2      	str	r2, [r4, #24]
 80103e6:	6922      	ldr	r2, [r4, #16]
 80103e8:	b942      	cbnz	r2, 80103fc <__swsetup_r+0xa4>
 80103ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80103ee:	d1c5      	bne.n	801037c <__swsetup_r+0x24>
 80103f0:	bd38      	pop	{r3, r4, r5, pc}
 80103f2:	0799      	lsls	r1, r3, #30
 80103f4:	bf58      	it	pl
 80103f6:	6962      	ldrpl	r2, [r4, #20]
 80103f8:	60a2      	str	r2, [r4, #8]
 80103fa:	e7f4      	b.n	80103e6 <__swsetup_r+0x8e>
 80103fc:	2000      	movs	r0, #0
 80103fe:	e7f7      	b.n	80103f0 <__swsetup_r+0x98>
 8010400:	2000001c 	.word	0x2000001c

08010404 <memset>:
 8010404:	4402      	add	r2, r0
 8010406:	4603      	mov	r3, r0
 8010408:	4293      	cmp	r3, r2
 801040a:	d100      	bne.n	801040e <memset+0xa>
 801040c:	4770      	bx	lr
 801040e:	f803 1b01 	strb.w	r1, [r3], #1
 8010412:	e7f9      	b.n	8010408 <memset+0x4>

08010414 <strncmp>:
 8010414:	b510      	push	{r4, lr}
 8010416:	b16a      	cbz	r2, 8010434 <strncmp+0x20>
 8010418:	3901      	subs	r1, #1
 801041a:	1884      	adds	r4, r0, r2
 801041c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010420:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010424:	429a      	cmp	r2, r3
 8010426:	d103      	bne.n	8010430 <strncmp+0x1c>
 8010428:	42a0      	cmp	r0, r4
 801042a:	d001      	beq.n	8010430 <strncmp+0x1c>
 801042c:	2a00      	cmp	r2, #0
 801042e:	d1f5      	bne.n	801041c <strncmp+0x8>
 8010430:	1ad0      	subs	r0, r2, r3
 8010432:	bd10      	pop	{r4, pc}
 8010434:	4610      	mov	r0, r2
 8010436:	e7fc      	b.n	8010432 <strncmp+0x1e>

08010438 <_close_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4d06      	ldr	r5, [pc, #24]	@ (8010454 <_close_r+0x1c>)
 801043c:	2300      	movs	r3, #0
 801043e:	4604      	mov	r4, r0
 8010440:	4608      	mov	r0, r1
 8010442:	602b      	str	r3, [r5, #0]
 8010444:	f7f4 f88e 	bl	8004564 <_close>
 8010448:	1c43      	adds	r3, r0, #1
 801044a:	d102      	bne.n	8010452 <_close_r+0x1a>
 801044c:	682b      	ldr	r3, [r5, #0]
 801044e:	b103      	cbz	r3, 8010452 <_close_r+0x1a>
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	bd38      	pop	{r3, r4, r5, pc}
 8010454:	20003eb4 	.word	0x20003eb4

08010458 <_lseek_r>:
 8010458:	b538      	push	{r3, r4, r5, lr}
 801045a:	4d07      	ldr	r5, [pc, #28]	@ (8010478 <_lseek_r+0x20>)
 801045c:	4604      	mov	r4, r0
 801045e:	4608      	mov	r0, r1
 8010460:	4611      	mov	r1, r2
 8010462:	2200      	movs	r2, #0
 8010464:	602a      	str	r2, [r5, #0]
 8010466:	461a      	mov	r2, r3
 8010468:	f7f4 f8a3 	bl	80045b2 <_lseek>
 801046c:	1c43      	adds	r3, r0, #1
 801046e:	d102      	bne.n	8010476 <_lseek_r+0x1e>
 8010470:	682b      	ldr	r3, [r5, #0]
 8010472:	b103      	cbz	r3, 8010476 <_lseek_r+0x1e>
 8010474:	6023      	str	r3, [r4, #0]
 8010476:	bd38      	pop	{r3, r4, r5, pc}
 8010478:	20003eb4 	.word	0x20003eb4

0801047c <_read_r>:
 801047c:	b538      	push	{r3, r4, r5, lr}
 801047e:	4d07      	ldr	r5, [pc, #28]	@ (801049c <_read_r+0x20>)
 8010480:	4604      	mov	r4, r0
 8010482:	4608      	mov	r0, r1
 8010484:	4611      	mov	r1, r2
 8010486:	2200      	movs	r2, #0
 8010488:	602a      	str	r2, [r5, #0]
 801048a:	461a      	mov	r2, r3
 801048c:	f7f4 f831 	bl	80044f2 <_read>
 8010490:	1c43      	adds	r3, r0, #1
 8010492:	d102      	bne.n	801049a <_read_r+0x1e>
 8010494:	682b      	ldr	r3, [r5, #0]
 8010496:	b103      	cbz	r3, 801049a <_read_r+0x1e>
 8010498:	6023      	str	r3, [r4, #0]
 801049a:	bd38      	pop	{r3, r4, r5, pc}
 801049c:	20003eb4 	.word	0x20003eb4

080104a0 <_sbrk_r>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	4d06      	ldr	r5, [pc, #24]	@ (80104bc <_sbrk_r+0x1c>)
 80104a4:	2300      	movs	r3, #0
 80104a6:	4604      	mov	r4, r0
 80104a8:	4608      	mov	r0, r1
 80104aa:	602b      	str	r3, [r5, #0]
 80104ac:	f7f4 f88e 	bl	80045cc <_sbrk>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	d102      	bne.n	80104ba <_sbrk_r+0x1a>
 80104b4:	682b      	ldr	r3, [r5, #0]
 80104b6:	b103      	cbz	r3, 80104ba <_sbrk_r+0x1a>
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	20003eb4 	.word	0x20003eb4

080104c0 <_write_r>:
 80104c0:	b538      	push	{r3, r4, r5, lr}
 80104c2:	4d07      	ldr	r5, [pc, #28]	@ (80104e0 <_write_r+0x20>)
 80104c4:	4604      	mov	r4, r0
 80104c6:	4608      	mov	r0, r1
 80104c8:	4611      	mov	r1, r2
 80104ca:	2200      	movs	r2, #0
 80104cc:	602a      	str	r2, [r5, #0]
 80104ce:	461a      	mov	r2, r3
 80104d0:	f7f4 f82c 	bl	800452c <_write>
 80104d4:	1c43      	adds	r3, r0, #1
 80104d6:	d102      	bne.n	80104de <_write_r+0x1e>
 80104d8:	682b      	ldr	r3, [r5, #0]
 80104da:	b103      	cbz	r3, 80104de <_write_r+0x1e>
 80104dc:	6023      	str	r3, [r4, #0]
 80104de:	bd38      	pop	{r3, r4, r5, pc}
 80104e0:	20003eb4 	.word	0x20003eb4

080104e4 <__errno>:
 80104e4:	4b01      	ldr	r3, [pc, #4]	@ (80104ec <__errno+0x8>)
 80104e6:	6818      	ldr	r0, [r3, #0]
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	2000001c 	.word	0x2000001c

080104f0 <__libc_init_array>:
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	4d0d      	ldr	r5, [pc, #52]	@ (8010528 <__libc_init_array+0x38>)
 80104f4:	4c0d      	ldr	r4, [pc, #52]	@ (801052c <__libc_init_array+0x3c>)
 80104f6:	1b64      	subs	r4, r4, r5
 80104f8:	10a4      	asrs	r4, r4, #2
 80104fa:	2600      	movs	r6, #0
 80104fc:	42a6      	cmp	r6, r4
 80104fe:	d109      	bne.n	8010514 <__libc_init_array+0x24>
 8010500:	4d0b      	ldr	r5, [pc, #44]	@ (8010530 <__libc_init_array+0x40>)
 8010502:	4c0c      	ldr	r4, [pc, #48]	@ (8010534 <__libc_init_array+0x44>)
 8010504:	f003 f9c8 	bl	8013898 <_init>
 8010508:	1b64      	subs	r4, r4, r5
 801050a:	10a4      	asrs	r4, r4, #2
 801050c:	2600      	movs	r6, #0
 801050e:	42a6      	cmp	r6, r4
 8010510:	d105      	bne.n	801051e <__libc_init_array+0x2e>
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	f855 3b04 	ldr.w	r3, [r5], #4
 8010518:	4798      	blx	r3
 801051a:	3601      	adds	r6, #1
 801051c:	e7ee      	b.n	80104fc <__libc_init_array+0xc>
 801051e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010522:	4798      	blx	r3
 8010524:	3601      	adds	r6, #1
 8010526:	e7f2      	b.n	801050e <__libc_init_array+0x1e>
 8010528:	08013edc 	.word	0x08013edc
 801052c:	08013edc 	.word	0x08013edc
 8010530:	08013edc 	.word	0x08013edc
 8010534:	08013ee0 	.word	0x08013ee0

08010538 <__retarget_lock_init_recursive>:
 8010538:	4770      	bx	lr

0801053a <__retarget_lock_acquire_recursive>:
 801053a:	4770      	bx	lr

0801053c <__retarget_lock_release_recursive>:
 801053c:	4770      	bx	lr

0801053e <memcpy>:
 801053e:	440a      	add	r2, r1
 8010540:	4291      	cmp	r1, r2
 8010542:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010546:	d100      	bne.n	801054a <memcpy+0xc>
 8010548:	4770      	bx	lr
 801054a:	b510      	push	{r4, lr}
 801054c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010554:	4291      	cmp	r1, r2
 8010556:	d1f9      	bne.n	801054c <memcpy+0xe>
 8010558:	bd10      	pop	{r4, pc}
	...

0801055c <nanf>:
 801055c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010564 <nanf+0x8>
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	7fc00000 	.word	0x7fc00000

08010568 <_free_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	4605      	mov	r5, r0
 801056c:	2900      	cmp	r1, #0
 801056e:	d041      	beq.n	80105f4 <_free_r+0x8c>
 8010570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010574:	1f0c      	subs	r4, r1, #4
 8010576:	2b00      	cmp	r3, #0
 8010578:	bfb8      	it	lt
 801057a:	18e4      	addlt	r4, r4, r3
 801057c:	f7ff facc 	bl	800fb18 <__malloc_lock>
 8010580:	4a1d      	ldr	r2, [pc, #116]	@ (80105f8 <_free_r+0x90>)
 8010582:	6813      	ldr	r3, [r2, #0]
 8010584:	b933      	cbnz	r3, 8010594 <_free_r+0x2c>
 8010586:	6063      	str	r3, [r4, #4]
 8010588:	6014      	str	r4, [r2, #0]
 801058a:	4628      	mov	r0, r5
 801058c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010590:	f7ff bac8 	b.w	800fb24 <__malloc_unlock>
 8010594:	42a3      	cmp	r3, r4
 8010596:	d908      	bls.n	80105aa <_free_r+0x42>
 8010598:	6820      	ldr	r0, [r4, #0]
 801059a:	1821      	adds	r1, r4, r0
 801059c:	428b      	cmp	r3, r1
 801059e:	bf01      	itttt	eq
 80105a0:	6819      	ldreq	r1, [r3, #0]
 80105a2:	685b      	ldreq	r3, [r3, #4]
 80105a4:	1809      	addeq	r1, r1, r0
 80105a6:	6021      	streq	r1, [r4, #0]
 80105a8:	e7ed      	b.n	8010586 <_free_r+0x1e>
 80105aa:	461a      	mov	r2, r3
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	b10b      	cbz	r3, 80105b4 <_free_r+0x4c>
 80105b0:	42a3      	cmp	r3, r4
 80105b2:	d9fa      	bls.n	80105aa <_free_r+0x42>
 80105b4:	6811      	ldr	r1, [r2, #0]
 80105b6:	1850      	adds	r0, r2, r1
 80105b8:	42a0      	cmp	r0, r4
 80105ba:	d10b      	bne.n	80105d4 <_free_r+0x6c>
 80105bc:	6820      	ldr	r0, [r4, #0]
 80105be:	4401      	add	r1, r0
 80105c0:	1850      	adds	r0, r2, r1
 80105c2:	4283      	cmp	r3, r0
 80105c4:	6011      	str	r1, [r2, #0]
 80105c6:	d1e0      	bne.n	801058a <_free_r+0x22>
 80105c8:	6818      	ldr	r0, [r3, #0]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	6053      	str	r3, [r2, #4]
 80105ce:	4408      	add	r0, r1
 80105d0:	6010      	str	r0, [r2, #0]
 80105d2:	e7da      	b.n	801058a <_free_r+0x22>
 80105d4:	d902      	bls.n	80105dc <_free_r+0x74>
 80105d6:	230c      	movs	r3, #12
 80105d8:	602b      	str	r3, [r5, #0]
 80105da:	e7d6      	b.n	801058a <_free_r+0x22>
 80105dc:	6820      	ldr	r0, [r4, #0]
 80105de:	1821      	adds	r1, r4, r0
 80105e0:	428b      	cmp	r3, r1
 80105e2:	bf04      	itt	eq
 80105e4:	6819      	ldreq	r1, [r3, #0]
 80105e6:	685b      	ldreq	r3, [r3, #4]
 80105e8:	6063      	str	r3, [r4, #4]
 80105ea:	bf04      	itt	eq
 80105ec:	1809      	addeq	r1, r1, r0
 80105ee:	6021      	streq	r1, [r4, #0]
 80105f0:	6054      	str	r4, [r2, #4]
 80105f2:	e7ca      	b.n	801058a <_free_r+0x22>
 80105f4:	bd38      	pop	{r3, r4, r5, pc}
 80105f6:	bf00      	nop
 80105f8:	20003d74 	.word	0x20003d74

080105fc <sulp>:
 80105fc:	b570      	push	{r4, r5, r6, lr}
 80105fe:	4604      	mov	r4, r0
 8010600:	460d      	mov	r5, r1
 8010602:	ec45 4b10 	vmov	d0, r4, r5
 8010606:	4616      	mov	r6, r2
 8010608:	f002 fe46 	bl	8013298 <__ulp>
 801060c:	ec51 0b10 	vmov	r0, r1, d0
 8010610:	b17e      	cbz	r6, 8010632 <sulp+0x36>
 8010612:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010616:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801061a:	2b00      	cmp	r3, #0
 801061c:	dd09      	ble.n	8010632 <sulp+0x36>
 801061e:	051b      	lsls	r3, r3, #20
 8010620:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010624:	2400      	movs	r4, #0
 8010626:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801062a:	4622      	mov	r2, r4
 801062c:	462b      	mov	r3, r5
 801062e:	f7ef fff3 	bl	8000618 <__aeabi_dmul>
 8010632:	ec41 0b10 	vmov	d0, r0, r1
 8010636:	bd70      	pop	{r4, r5, r6, pc}

08010638 <_strtod_l>:
 8010638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801063c:	b09f      	sub	sp, #124	@ 0x7c
 801063e:	460c      	mov	r4, r1
 8010640:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010642:	2200      	movs	r2, #0
 8010644:	921a      	str	r2, [sp, #104]	@ 0x68
 8010646:	9005      	str	r0, [sp, #20]
 8010648:	f04f 0a00 	mov.w	sl, #0
 801064c:	f04f 0b00 	mov.w	fp, #0
 8010650:	460a      	mov	r2, r1
 8010652:	9219      	str	r2, [sp, #100]	@ 0x64
 8010654:	7811      	ldrb	r1, [r2, #0]
 8010656:	292b      	cmp	r1, #43	@ 0x2b
 8010658:	d04a      	beq.n	80106f0 <_strtod_l+0xb8>
 801065a:	d838      	bhi.n	80106ce <_strtod_l+0x96>
 801065c:	290d      	cmp	r1, #13
 801065e:	d832      	bhi.n	80106c6 <_strtod_l+0x8e>
 8010660:	2908      	cmp	r1, #8
 8010662:	d832      	bhi.n	80106ca <_strtod_l+0x92>
 8010664:	2900      	cmp	r1, #0
 8010666:	d03b      	beq.n	80106e0 <_strtod_l+0xa8>
 8010668:	2200      	movs	r2, #0
 801066a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801066c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801066e:	782a      	ldrb	r2, [r5, #0]
 8010670:	2a30      	cmp	r2, #48	@ 0x30
 8010672:	f040 80b3 	bne.w	80107dc <_strtod_l+0x1a4>
 8010676:	786a      	ldrb	r2, [r5, #1]
 8010678:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801067c:	2a58      	cmp	r2, #88	@ 0x58
 801067e:	d16e      	bne.n	801075e <_strtod_l+0x126>
 8010680:	9302      	str	r3, [sp, #8]
 8010682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010684:	9301      	str	r3, [sp, #4]
 8010686:	ab1a      	add	r3, sp, #104	@ 0x68
 8010688:	9300      	str	r3, [sp, #0]
 801068a:	4a8e      	ldr	r2, [pc, #568]	@ (80108c4 <_strtod_l+0x28c>)
 801068c:	9805      	ldr	r0, [sp, #20]
 801068e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010690:	a919      	add	r1, sp, #100	@ 0x64
 8010692:	f001 ffa9 	bl	80125e8 <__gethex>
 8010696:	f010 060f 	ands.w	r6, r0, #15
 801069a:	4604      	mov	r4, r0
 801069c:	d005      	beq.n	80106aa <_strtod_l+0x72>
 801069e:	2e06      	cmp	r6, #6
 80106a0:	d128      	bne.n	80106f4 <_strtod_l+0xbc>
 80106a2:	3501      	adds	r5, #1
 80106a4:	2300      	movs	r3, #0
 80106a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80106a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f040 858e 	bne.w	80111ce <_strtod_l+0xb96>
 80106b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106b4:	b1cb      	cbz	r3, 80106ea <_strtod_l+0xb2>
 80106b6:	4652      	mov	r2, sl
 80106b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80106bc:	ec43 2b10 	vmov	d0, r2, r3
 80106c0:	b01f      	add	sp, #124	@ 0x7c
 80106c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c6:	2920      	cmp	r1, #32
 80106c8:	d1ce      	bne.n	8010668 <_strtod_l+0x30>
 80106ca:	3201      	adds	r2, #1
 80106cc:	e7c1      	b.n	8010652 <_strtod_l+0x1a>
 80106ce:	292d      	cmp	r1, #45	@ 0x2d
 80106d0:	d1ca      	bne.n	8010668 <_strtod_l+0x30>
 80106d2:	2101      	movs	r1, #1
 80106d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80106d6:	1c51      	adds	r1, r2, #1
 80106d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80106da:	7852      	ldrb	r2, [r2, #1]
 80106dc:	2a00      	cmp	r2, #0
 80106de:	d1c5      	bne.n	801066c <_strtod_l+0x34>
 80106e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80106e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f040 8570 	bne.w	80111ca <_strtod_l+0xb92>
 80106ea:	4652      	mov	r2, sl
 80106ec:	465b      	mov	r3, fp
 80106ee:	e7e5      	b.n	80106bc <_strtod_l+0x84>
 80106f0:	2100      	movs	r1, #0
 80106f2:	e7ef      	b.n	80106d4 <_strtod_l+0x9c>
 80106f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80106f6:	b13a      	cbz	r2, 8010708 <_strtod_l+0xd0>
 80106f8:	2135      	movs	r1, #53	@ 0x35
 80106fa:	a81c      	add	r0, sp, #112	@ 0x70
 80106fc:	f002 fec6 	bl	801348c <__copybits>
 8010700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010702:	9805      	ldr	r0, [sp, #20]
 8010704:	f002 fa94 	bl	8012c30 <_Bfree>
 8010708:	3e01      	subs	r6, #1
 801070a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801070c:	2e04      	cmp	r6, #4
 801070e:	d806      	bhi.n	801071e <_strtod_l+0xe6>
 8010710:	e8df f006 	tbb	[pc, r6]
 8010714:	201d0314 	.word	0x201d0314
 8010718:	14          	.byte	0x14
 8010719:	00          	.byte	0x00
 801071a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801071e:	05e1      	lsls	r1, r4, #23
 8010720:	bf48      	it	mi
 8010722:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801072a:	0d1b      	lsrs	r3, r3, #20
 801072c:	051b      	lsls	r3, r3, #20
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1bb      	bne.n	80106aa <_strtod_l+0x72>
 8010732:	f7ff fed7 	bl	80104e4 <__errno>
 8010736:	2322      	movs	r3, #34	@ 0x22
 8010738:	6003      	str	r3, [r0, #0]
 801073a:	e7b6      	b.n	80106aa <_strtod_l+0x72>
 801073c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010740:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010744:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010748:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801074c:	e7e7      	b.n	801071e <_strtod_l+0xe6>
 801074e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80108cc <_strtod_l+0x294>
 8010752:	e7e4      	b.n	801071e <_strtod_l+0xe6>
 8010754:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010758:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801075c:	e7df      	b.n	801071e <_strtod_l+0xe6>
 801075e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010760:	1c5a      	adds	r2, r3, #1
 8010762:	9219      	str	r2, [sp, #100]	@ 0x64
 8010764:	785b      	ldrb	r3, [r3, #1]
 8010766:	2b30      	cmp	r3, #48	@ 0x30
 8010768:	d0f9      	beq.n	801075e <_strtod_l+0x126>
 801076a:	2b00      	cmp	r3, #0
 801076c:	d09d      	beq.n	80106aa <_strtod_l+0x72>
 801076e:	2301      	movs	r3, #1
 8010770:	9309      	str	r3, [sp, #36]	@ 0x24
 8010772:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010774:	930c      	str	r3, [sp, #48]	@ 0x30
 8010776:	2300      	movs	r3, #0
 8010778:	9308      	str	r3, [sp, #32]
 801077a:	930a      	str	r3, [sp, #40]	@ 0x28
 801077c:	461f      	mov	r7, r3
 801077e:	220a      	movs	r2, #10
 8010780:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010782:	7805      	ldrb	r5, [r0, #0]
 8010784:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010788:	b2d9      	uxtb	r1, r3
 801078a:	2909      	cmp	r1, #9
 801078c:	d928      	bls.n	80107e0 <_strtod_l+0x1a8>
 801078e:	494e      	ldr	r1, [pc, #312]	@ (80108c8 <_strtod_l+0x290>)
 8010790:	2201      	movs	r2, #1
 8010792:	f7ff fe3f 	bl	8010414 <strncmp>
 8010796:	2800      	cmp	r0, #0
 8010798:	d032      	beq.n	8010800 <_strtod_l+0x1c8>
 801079a:	2000      	movs	r0, #0
 801079c:	462a      	mov	r2, r5
 801079e:	4681      	mov	r9, r0
 80107a0:	463d      	mov	r5, r7
 80107a2:	4603      	mov	r3, r0
 80107a4:	2a65      	cmp	r2, #101	@ 0x65
 80107a6:	d001      	beq.n	80107ac <_strtod_l+0x174>
 80107a8:	2a45      	cmp	r2, #69	@ 0x45
 80107aa:	d114      	bne.n	80107d6 <_strtod_l+0x19e>
 80107ac:	b91d      	cbnz	r5, 80107b6 <_strtod_l+0x17e>
 80107ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107b0:	4302      	orrs	r2, r0
 80107b2:	d095      	beq.n	80106e0 <_strtod_l+0xa8>
 80107b4:	2500      	movs	r5, #0
 80107b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80107b8:	1c62      	adds	r2, r4, #1
 80107ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80107bc:	7862      	ldrb	r2, [r4, #1]
 80107be:	2a2b      	cmp	r2, #43	@ 0x2b
 80107c0:	d077      	beq.n	80108b2 <_strtod_l+0x27a>
 80107c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80107c4:	d07b      	beq.n	80108be <_strtod_l+0x286>
 80107c6:	f04f 0c00 	mov.w	ip, #0
 80107ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80107ce:	2909      	cmp	r1, #9
 80107d0:	f240 8082 	bls.w	80108d8 <_strtod_l+0x2a0>
 80107d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80107d6:	f04f 0800 	mov.w	r8, #0
 80107da:	e0a2      	b.n	8010922 <_strtod_l+0x2ea>
 80107dc:	2300      	movs	r3, #0
 80107de:	e7c7      	b.n	8010770 <_strtod_l+0x138>
 80107e0:	2f08      	cmp	r7, #8
 80107e2:	bfd5      	itete	le
 80107e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80107e6:	9908      	ldrgt	r1, [sp, #32]
 80107e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80107ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80107f0:	f100 0001 	add.w	r0, r0, #1
 80107f4:	bfd4      	ite	le
 80107f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80107f8:	9308      	strgt	r3, [sp, #32]
 80107fa:	3701      	adds	r7, #1
 80107fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80107fe:	e7bf      	b.n	8010780 <_strtod_l+0x148>
 8010800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010802:	1c5a      	adds	r2, r3, #1
 8010804:	9219      	str	r2, [sp, #100]	@ 0x64
 8010806:	785a      	ldrb	r2, [r3, #1]
 8010808:	b37f      	cbz	r7, 801086a <_strtod_l+0x232>
 801080a:	4681      	mov	r9, r0
 801080c:	463d      	mov	r5, r7
 801080e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010812:	2b09      	cmp	r3, #9
 8010814:	d912      	bls.n	801083c <_strtod_l+0x204>
 8010816:	2301      	movs	r3, #1
 8010818:	e7c4      	b.n	80107a4 <_strtod_l+0x16c>
 801081a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801081c:	1c5a      	adds	r2, r3, #1
 801081e:	9219      	str	r2, [sp, #100]	@ 0x64
 8010820:	785a      	ldrb	r2, [r3, #1]
 8010822:	3001      	adds	r0, #1
 8010824:	2a30      	cmp	r2, #48	@ 0x30
 8010826:	d0f8      	beq.n	801081a <_strtod_l+0x1e2>
 8010828:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801082c:	2b08      	cmp	r3, #8
 801082e:	f200 84d3 	bhi.w	80111d8 <_strtod_l+0xba0>
 8010832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010834:	930c      	str	r3, [sp, #48]	@ 0x30
 8010836:	4681      	mov	r9, r0
 8010838:	2000      	movs	r0, #0
 801083a:	4605      	mov	r5, r0
 801083c:	3a30      	subs	r2, #48	@ 0x30
 801083e:	f100 0301 	add.w	r3, r0, #1
 8010842:	d02a      	beq.n	801089a <_strtod_l+0x262>
 8010844:	4499      	add	r9, r3
 8010846:	eb00 0c05 	add.w	ip, r0, r5
 801084a:	462b      	mov	r3, r5
 801084c:	210a      	movs	r1, #10
 801084e:	4563      	cmp	r3, ip
 8010850:	d10d      	bne.n	801086e <_strtod_l+0x236>
 8010852:	1c69      	adds	r1, r5, #1
 8010854:	4401      	add	r1, r0
 8010856:	4428      	add	r0, r5
 8010858:	2808      	cmp	r0, #8
 801085a:	dc16      	bgt.n	801088a <_strtod_l+0x252>
 801085c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801085e:	230a      	movs	r3, #10
 8010860:	fb03 2300 	mla	r3, r3, r0, r2
 8010864:	930a      	str	r3, [sp, #40]	@ 0x28
 8010866:	2300      	movs	r3, #0
 8010868:	e018      	b.n	801089c <_strtod_l+0x264>
 801086a:	4638      	mov	r0, r7
 801086c:	e7da      	b.n	8010824 <_strtod_l+0x1ec>
 801086e:	2b08      	cmp	r3, #8
 8010870:	f103 0301 	add.w	r3, r3, #1
 8010874:	dc03      	bgt.n	801087e <_strtod_l+0x246>
 8010876:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010878:	434e      	muls	r6, r1
 801087a:	960a      	str	r6, [sp, #40]	@ 0x28
 801087c:	e7e7      	b.n	801084e <_strtod_l+0x216>
 801087e:	2b10      	cmp	r3, #16
 8010880:	bfde      	ittt	le
 8010882:	9e08      	ldrle	r6, [sp, #32]
 8010884:	434e      	mulle	r6, r1
 8010886:	9608      	strle	r6, [sp, #32]
 8010888:	e7e1      	b.n	801084e <_strtod_l+0x216>
 801088a:	280f      	cmp	r0, #15
 801088c:	dceb      	bgt.n	8010866 <_strtod_l+0x22e>
 801088e:	9808      	ldr	r0, [sp, #32]
 8010890:	230a      	movs	r3, #10
 8010892:	fb03 2300 	mla	r3, r3, r0, r2
 8010896:	9308      	str	r3, [sp, #32]
 8010898:	e7e5      	b.n	8010866 <_strtod_l+0x22e>
 801089a:	4629      	mov	r1, r5
 801089c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801089e:	1c50      	adds	r0, r2, #1
 80108a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80108a2:	7852      	ldrb	r2, [r2, #1]
 80108a4:	4618      	mov	r0, r3
 80108a6:	460d      	mov	r5, r1
 80108a8:	e7b1      	b.n	801080e <_strtod_l+0x1d6>
 80108aa:	f04f 0900 	mov.w	r9, #0
 80108ae:	2301      	movs	r3, #1
 80108b0:	e77d      	b.n	80107ae <_strtod_l+0x176>
 80108b2:	f04f 0c00 	mov.w	ip, #0
 80108b6:	1ca2      	adds	r2, r4, #2
 80108b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80108ba:	78a2      	ldrb	r2, [r4, #2]
 80108bc:	e785      	b.n	80107ca <_strtod_l+0x192>
 80108be:	f04f 0c01 	mov.w	ip, #1
 80108c2:	e7f8      	b.n	80108b6 <_strtod_l+0x27e>
 80108c4:	08013b20 	.word	0x08013b20
 80108c8:	08013afd 	.word	0x08013afd
 80108cc:	7ff00000 	.word	0x7ff00000
 80108d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80108d2:	1c51      	adds	r1, r2, #1
 80108d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80108d6:	7852      	ldrb	r2, [r2, #1]
 80108d8:	2a30      	cmp	r2, #48	@ 0x30
 80108da:	d0f9      	beq.n	80108d0 <_strtod_l+0x298>
 80108dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80108e0:	2908      	cmp	r1, #8
 80108e2:	f63f af78 	bhi.w	80107d6 <_strtod_l+0x19e>
 80108e6:	3a30      	subs	r2, #48	@ 0x30
 80108e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80108ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80108ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80108ee:	f04f 080a 	mov.w	r8, #10
 80108f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80108f4:	1c56      	adds	r6, r2, #1
 80108f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80108f8:	7852      	ldrb	r2, [r2, #1]
 80108fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80108fe:	f1be 0f09 	cmp.w	lr, #9
 8010902:	d939      	bls.n	8010978 <_strtod_l+0x340>
 8010904:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010906:	1a76      	subs	r6, r6, r1
 8010908:	2e08      	cmp	r6, #8
 801090a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801090e:	dc03      	bgt.n	8010918 <_strtod_l+0x2e0>
 8010910:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010912:	4588      	cmp	r8, r1
 8010914:	bfa8      	it	ge
 8010916:	4688      	movge	r8, r1
 8010918:	f1bc 0f00 	cmp.w	ip, #0
 801091c:	d001      	beq.n	8010922 <_strtod_l+0x2ea>
 801091e:	f1c8 0800 	rsb	r8, r8, #0
 8010922:	2d00      	cmp	r5, #0
 8010924:	d14e      	bne.n	80109c4 <_strtod_l+0x38c>
 8010926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010928:	4308      	orrs	r0, r1
 801092a:	f47f aebe 	bne.w	80106aa <_strtod_l+0x72>
 801092e:	2b00      	cmp	r3, #0
 8010930:	f47f aed6 	bne.w	80106e0 <_strtod_l+0xa8>
 8010934:	2a69      	cmp	r2, #105	@ 0x69
 8010936:	d028      	beq.n	801098a <_strtod_l+0x352>
 8010938:	dc25      	bgt.n	8010986 <_strtod_l+0x34e>
 801093a:	2a49      	cmp	r2, #73	@ 0x49
 801093c:	d025      	beq.n	801098a <_strtod_l+0x352>
 801093e:	2a4e      	cmp	r2, #78	@ 0x4e
 8010940:	f47f aece 	bne.w	80106e0 <_strtod_l+0xa8>
 8010944:	499b      	ldr	r1, [pc, #620]	@ (8010bb4 <_strtod_l+0x57c>)
 8010946:	a819      	add	r0, sp, #100	@ 0x64
 8010948:	f002 f870 	bl	8012a2c <__match>
 801094c:	2800      	cmp	r0, #0
 801094e:	f43f aec7 	beq.w	80106e0 <_strtod_l+0xa8>
 8010952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	2b28      	cmp	r3, #40	@ 0x28
 8010958:	d12e      	bne.n	80109b8 <_strtod_l+0x380>
 801095a:	4997      	ldr	r1, [pc, #604]	@ (8010bb8 <_strtod_l+0x580>)
 801095c:	aa1c      	add	r2, sp, #112	@ 0x70
 801095e:	a819      	add	r0, sp, #100	@ 0x64
 8010960:	f002 f878 	bl	8012a54 <__hexnan>
 8010964:	2805      	cmp	r0, #5
 8010966:	d127      	bne.n	80109b8 <_strtod_l+0x380>
 8010968:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801096a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801096e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010972:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010976:	e698      	b.n	80106aa <_strtod_l+0x72>
 8010978:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801097a:	fb08 2101 	mla	r1, r8, r1, r2
 801097e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010982:	920e      	str	r2, [sp, #56]	@ 0x38
 8010984:	e7b5      	b.n	80108f2 <_strtod_l+0x2ba>
 8010986:	2a6e      	cmp	r2, #110	@ 0x6e
 8010988:	e7da      	b.n	8010940 <_strtod_l+0x308>
 801098a:	498c      	ldr	r1, [pc, #560]	@ (8010bbc <_strtod_l+0x584>)
 801098c:	a819      	add	r0, sp, #100	@ 0x64
 801098e:	f002 f84d 	bl	8012a2c <__match>
 8010992:	2800      	cmp	r0, #0
 8010994:	f43f aea4 	beq.w	80106e0 <_strtod_l+0xa8>
 8010998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801099a:	4989      	ldr	r1, [pc, #548]	@ (8010bc0 <_strtod_l+0x588>)
 801099c:	3b01      	subs	r3, #1
 801099e:	a819      	add	r0, sp, #100	@ 0x64
 80109a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80109a2:	f002 f843 	bl	8012a2c <__match>
 80109a6:	b910      	cbnz	r0, 80109ae <_strtod_l+0x376>
 80109a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80109aa:	3301      	adds	r3, #1
 80109ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80109ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010bd0 <_strtod_l+0x598>
 80109b2:	f04f 0a00 	mov.w	sl, #0
 80109b6:	e678      	b.n	80106aa <_strtod_l+0x72>
 80109b8:	4882      	ldr	r0, [pc, #520]	@ (8010bc4 <_strtod_l+0x58c>)
 80109ba:	f001 fda5 	bl	8012508 <nan>
 80109be:	ec5b ab10 	vmov	sl, fp, d0
 80109c2:	e672      	b.n	80106aa <_strtod_l+0x72>
 80109c4:	eba8 0309 	sub.w	r3, r8, r9
 80109c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80109ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80109cc:	2f00      	cmp	r7, #0
 80109ce:	bf08      	it	eq
 80109d0:	462f      	moveq	r7, r5
 80109d2:	2d10      	cmp	r5, #16
 80109d4:	462c      	mov	r4, r5
 80109d6:	bfa8      	it	ge
 80109d8:	2410      	movge	r4, #16
 80109da:	f7ef fda3 	bl	8000524 <__aeabi_ui2d>
 80109de:	2d09      	cmp	r5, #9
 80109e0:	4682      	mov	sl, r0
 80109e2:	468b      	mov	fp, r1
 80109e4:	dc13      	bgt.n	8010a0e <_strtod_l+0x3d6>
 80109e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f43f ae5e 	beq.w	80106aa <_strtod_l+0x72>
 80109ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f0:	dd78      	ble.n	8010ae4 <_strtod_l+0x4ac>
 80109f2:	2b16      	cmp	r3, #22
 80109f4:	dc5f      	bgt.n	8010ab6 <_strtod_l+0x47e>
 80109f6:	4974      	ldr	r1, [pc, #464]	@ (8010bc8 <_strtod_l+0x590>)
 80109f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80109fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a00:	4652      	mov	r2, sl
 8010a02:	465b      	mov	r3, fp
 8010a04:	f7ef fe08 	bl	8000618 <__aeabi_dmul>
 8010a08:	4682      	mov	sl, r0
 8010a0a:	468b      	mov	fp, r1
 8010a0c:	e64d      	b.n	80106aa <_strtod_l+0x72>
 8010a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8010bc8 <_strtod_l+0x590>)
 8010a10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010a18:	f7ef fdfe 	bl	8000618 <__aeabi_dmul>
 8010a1c:	4682      	mov	sl, r0
 8010a1e:	9808      	ldr	r0, [sp, #32]
 8010a20:	468b      	mov	fp, r1
 8010a22:	f7ef fd7f 	bl	8000524 <__aeabi_ui2d>
 8010a26:	4602      	mov	r2, r0
 8010a28:	460b      	mov	r3, r1
 8010a2a:	4650      	mov	r0, sl
 8010a2c:	4659      	mov	r1, fp
 8010a2e:	f7ef fc3d 	bl	80002ac <__adddf3>
 8010a32:	2d0f      	cmp	r5, #15
 8010a34:	4682      	mov	sl, r0
 8010a36:	468b      	mov	fp, r1
 8010a38:	ddd5      	ble.n	80109e6 <_strtod_l+0x3ae>
 8010a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a3c:	1b2c      	subs	r4, r5, r4
 8010a3e:	441c      	add	r4, r3
 8010a40:	2c00      	cmp	r4, #0
 8010a42:	f340 8096 	ble.w	8010b72 <_strtod_l+0x53a>
 8010a46:	f014 030f 	ands.w	r3, r4, #15
 8010a4a:	d00a      	beq.n	8010a62 <_strtod_l+0x42a>
 8010a4c:	495e      	ldr	r1, [pc, #376]	@ (8010bc8 <_strtod_l+0x590>)
 8010a4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010a52:	4652      	mov	r2, sl
 8010a54:	465b      	mov	r3, fp
 8010a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a5a:	f7ef fddd 	bl	8000618 <__aeabi_dmul>
 8010a5e:	4682      	mov	sl, r0
 8010a60:	468b      	mov	fp, r1
 8010a62:	f034 040f 	bics.w	r4, r4, #15
 8010a66:	d073      	beq.n	8010b50 <_strtod_l+0x518>
 8010a68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010a6c:	dd48      	ble.n	8010b00 <_strtod_l+0x4c8>
 8010a6e:	2400      	movs	r4, #0
 8010a70:	46a0      	mov	r8, r4
 8010a72:	940a      	str	r4, [sp, #40]	@ 0x28
 8010a74:	46a1      	mov	r9, r4
 8010a76:	9a05      	ldr	r2, [sp, #20]
 8010a78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010bd0 <_strtod_l+0x598>
 8010a7c:	2322      	movs	r3, #34	@ 0x22
 8010a7e:	6013      	str	r3, [r2, #0]
 8010a80:	f04f 0a00 	mov.w	sl, #0
 8010a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f43f ae0f 	beq.w	80106aa <_strtod_l+0x72>
 8010a8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a8e:	9805      	ldr	r0, [sp, #20]
 8010a90:	f002 f8ce 	bl	8012c30 <_Bfree>
 8010a94:	9805      	ldr	r0, [sp, #20]
 8010a96:	4649      	mov	r1, r9
 8010a98:	f002 f8ca 	bl	8012c30 <_Bfree>
 8010a9c:	9805      	ldr	r0, [sp, #20]
 8010a9e:	4641      	mov	r1, r8
 8010aa0:	f002 f8c6 	bl	8012c30 <_Bfree>
 8010aa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010aa6:	9805      	ldr	r0, [sp, #20]
 8010aa8:	f002 f8c2 	bl	8012c30 <_Bfree>
 8010aac:	9805      	ldr	r0, [sp, #20]
 8010aae:	4621      	mov	r1, r4
 8010ab0:	f002 f8be 	bl	8012c30 <_Bfree>
 8010ab4:	e5f9      	b.n	80106aa <_strtod_l+0x72>
 8010ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ab8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010abc:	4293      	cmp	r3, r2
 8010abe:	dbbc      	blt.n	8010a3a <_strtod_l+0x402>
 8010ac0:	4c41      	ldr	r4, [pc, #260]	@ (8010bc8 <_strtod_l+0x590>)
 8010ac2:	f1c5 050f 	rsb	r5, r5, #15
 8010ac6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010aca:	4652      	mov	r2, sl
 8010acc:	465b      	mov	r3, fp
 8010ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ad2:	f7ef fda1 	bl	8000618 <__aeabi_dmul>
 8010ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ad8:	1b5d      	subs	r5, r3, r5
 8010ada:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010ade:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010ae2:	e78f      	b.n	8010a04 <_strtod_l+0x3cc>
 8010ae4:	3316      	adds	r3, #22
 8010ae6:	dba8      	blt.n	8010a3a <_strtod_l+0x402>
 8010ae8:	4b37      	ldr	r3, [pc, #220]	@ (8010bc8 <_strtod_l+0x590>)
 8010aea:	eba9 0808 	sub.w	r8, r9, r8
 8010aee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010af2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010af6:	4650      	mov	r0, sl
 8010af8:	4659      	mov	r1, fp
 8010afa:	f7ef feb7 	bl	800086c <__aeabi_ddiv>
 8010afe:	e783      	b.n	8010a08 <_strtod_l+0x3d0>
 8010b00:	4b32      	ldr	r3, [pc, #200]	@ (8010bcc <_strtod_l+0x594>)
 8010b02:	9308      	str	r3, [sp, #32]
 8010b04:	2300      	movs	r3, #0
 8010b06:	1124      	asrs	r4, r4, #4
 8010b08:	4650      	mov	r0, sl
 8010b0a:	4659      	mov	r1, fp
 8010b0c:	461e      	mov	r6, r3
 8010b0e:	2c01      	cmp	r4, #1
 8010b10:	dc21      	bgt.n	8010b56 <_strtod_l+0x51e>
 8010b12:	b10b      	cbz	r3, 8010b18 <_strtod_l+0x4e0>
 8010b14:	4682      	mov	sl, r0
 8010b16:	468b      	mov	fp, r1
 8010b18:	492c      	ldr	r1, [pc, #176]	@ (8010bcc <_strtod_l+0x594>)
 8010b1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010b1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010b22:	4652      	mov	r2, sl
 8010b24:	465b      	mov	r3, fp
 8010b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b2a:	f7ef fd75 	bl	8000618 <__aeabi_dmul>
 8010b2e:	4b28      	ldr	r3, [pc, #160]	@ (8010bd0 <_strtod_l+0x598>)
 8010b30:	460a      	mov	r2, r1
 8010b32:	400b      	ands	r3, r1
 8010b34:	4927      	ldr	r1, [pc, #156]	@ (8010bd4 <_strtod_l+0x59c>)
 8010b36:	428b      	cmp	r3, r1
 8010b38:	4682      	mov	sl, r0
 8010b3a:	d898      	bhi.n	8010a6e <_strtod_l+0x436>
 8010b3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010b40:	428b      	cmp	r3, r1
 8010b42:	bf86      	itte	hi
 8010b44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010bd8 <_strtod_l+0x5a0>
 8010b48:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8010b4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010b50:	2300      	movs	r3, #0
 8010b52:	9308      	str	r3, [sp, #32]
 8010b54:	e07a      	b.n	8010c4c <_strtod_l+0x614>
 8010b56:	07e2      	lsls	r2, r4, #31
 8010b58:	d505      	bpl.n	8010b66 <_strtod_l+0x52e>
 8010b5a:	9b08      	ldr	r3, [sp, #32]
 8010b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b60:	f7ef fd5a 	bl	8000618 <__aeabi_dmul>
 8010b64:	2301      	movs	r3, #1
 8010b66:	9a08      	ldr	r2, [sp, #32]
 8010b68:	3208      	adds	r2, #8
 8010b6a:	3601      	adds	r6, #1
 8010b6c:	1064      	asrs	r4, r4, #1
 8010b6e:	9208      	str	r2, [sp, #32]
 8010b70:	e7cd      	b.n	8010b0e <_strtod_l+0x4d6>
 8010b72:	d0ed      	beq.n	8010b50 <_strtod_l+0x518>
 8010b74:	4264      	negs	r4, r4
 8010b76:	f014 020f 	ands.w	r2, r4, #15
 8010b7a:	d00a      	beq.n	8010b92 <_strtod_l+0x55a>
 8010b7c:	4b12      	ldr	r3, [pc, #72]	@ (8010bc8 <_strtod_l+0x590>)
 8010b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b82:	4650      	mov	r0, sl
 8010b84:	4659      	mov	r1, fp
 8010b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8a:	f7ef fe6f 	bl	800086c <__aeabi_ddiv>
 8010b8e:	4682      	mov	sl, r0
 8010b90:	468b      	mov	fp, r1
 8010b92:	1124      	asrs	r4, r4, #4
 8010b94:	d0dc      	beq.n	8010b50 <_strtod_l+0x518>
 8010b96:	2c1f      	cmp	r4, #31
 8010b98:	dd20      	ble.n	8010bdc <_strtod_l+0x5a4>
 8010b9a:	2400      	movs	r4, #0
 8010b9c:	46a0      	mov	r8, r4
 8010b9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010ba0:	46a1      	mov	r9, r4
 8010ba2:	9a05      	ldr	r2, [sp, #20]
 8010ba4:	2322      	movs	r3, #34	@ 0x22
 8010ba6:	f04f 0a00 	mov.w	sl, #0
 8010baa:	f04f 0b00 	mov.w	fp, #0
 8010bae:	6013      	str	r3, [r2, #0]
 8010bb0:	e768      	b.n	8010a84 <_strtod_l+0x44c>
 8010bb2:	bf00      	nop
 8010bb4:	08013b08 	.word	0x08013b08
 8010bb8:	08013b0c 	.word	0x08013b0c
 8010bbc:	08013aff 	.word	0x08013aff
 8010bc0:	08013b02 	.word	0x08013b02
 8010bc4:	08013ed3 	.word	0x08013ed3
 8010bc8:	08013dd0 	.word	0x08013dd0
 8010bcc:	08013da8 	.word	0x08013da8
 8010bd0:	7ff00000 	.word	0x7ff00000
 8010bd4:	7ca00000 	.word	0x7ca00000
 8010bd8:	7fefffff 	.word	0x7fefffff
 8010bdc:	f014 0310 	ands.w	r3, r4, #16
 8010be0:	bf18      	it	ne
 8010be2:	236a      	movne	r3, #106	@ 0x6a
 8010be4:	4ea9      	ldr	r6, [pc, #676]	@ (8010e8c <_strtod_l+0x854>)
 8010be6:	9308      	str	r3, [sp, #32]
 8010be8:	4650      	mov	r0, sl
 8010bea:	4659      	mov	r1, fp
 8010bec:	2300      	movs	r3, #0
 8010bee:	07e2      	lsls	r2, r4, #31
 8010bf0:	d504      	bpl.n	8010bfc <_strtod_l+0x5c4>
 8010bf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010bf6:	f7ef fd0f 	bl	8000618 <__aeabi_dmul>
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	1064      	asrs	r4, r4, #1
 8010bfe:	f106 0608 	add.w	r6, r6, #8
 8010c02:	d1f4      	bne.n	8010bee <_strtod_l+0x5b6>
 8010c04:	b10b      	cbz	r3, 8010c0a <_strtod_l+0x5d2>
 8010c06:	4682      	mov	sl, r0
 8010c08:	468b      	mov	fp, r1
 8010c0a:	9b08      	ldr	r3, [sp, #32]
 8010c0c:	b1b3      	cbz	r3, 8010c3c <_strtod_l+0x604>
 8010c0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010c12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	4659      	mov	r1, fp
 8010c1a:	dd0f      	ble.n	8010c3c <_strtod_l+0x604>
 8010c1c:	2b1f      	cmp	r3, #31
 8010c1e:	dd55      	ble.n	8010ccc <_strtod_l+0x694>
 8010c20:	2b34      	cmp	r3, #52	@ 0x34
 8010c22:	bfde      	ittt	le
 8010c24:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8010c28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010c2c:	4093      	lslle	r3, r2
 8010c2e:	f04f 0a00 	mov.w	sl, #0
 8010c32:	bfcc      	ite	gt
 8010c34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010c38:	ea03 0b01 	andle.w	fp, r3, r1
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	2300      	movs	r3, #0
 8010c40:	4650      	mov	r0, sl
 8010c42:	4659      	mov	r1, fp
 8010c44:	f7ef ff50 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d1a6      	bne.n	8010b9a <_strtod_l+0x562>
 8010c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010c52:	9805      	ldr	r0, [sp, #20]
 8010c54:	462b      	mov	r3, r5
 8010c56:	463a      	mov	r2, r7
 8010c58:	f002 f852 	bl	8012d00 <__s2b>
 8010c5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	f43f af05 	beq.w	8010a6e <_strtod_l+0x436>
 8010c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c66:	2a00      	cmp	r2, #0
 8010c68:	eba9 0308 	sub.w	r3, r9, r8
 8010c6c:	bfa8      	it	ge
 8010c6e:	2300      	movge	r3, #0
 8010c70:	9312      	str	r3, [sp, #72]	@ 0x48
 8010c72:	2400      	movs	r4, #0
 8010c74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010c78:	9316      	str	r3, [sp, #88]	@ 0x58
 8010c7a:	46a0      	mov	r8, r4
 8010c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c7e:	9805      	ldr	r0, [sp, #20]
 8010c80:	6859      	ldr	r1, [r3, #4]
 8010c82:	f001 ff95 	bl	8012bb0 <_Balloc>
 8010c86:	4681      	mov	r9, r0
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	f43f aef4 	beq.w	8010a76 <_strtod_l+0x43e>
 8010c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c90:	691a      	ldr	r2, [r3, #16]
 8010c92:	3202      	adds	r2, #2
 8010c94:	f103 010c 	add.w	r1, r3, #12
 8010c98:	0092      	lsls	r2, r2, #2
 8010c9a:	300c      	adds	r0, #12
 8010c9c:	f7ff fc4f 	bl	801053e <memcpy>
 8010ca0:	ec4b ab10 	vmov	d0, sl, fp
 8010ca4:	9805      	ldr	r0, [sp, #20]
 8010ca6:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ca8:	a91b      	add	r1, sp, #108	@ 0x6c
 8010caa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010cae:	f002 fb63 	bl	8013378 <__d2b>
 8010cb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f43f aede 	beq.w	8010a76 <_strtod_l+0x43e>
 8010cba:	9805      	ldr	r0, [sp, #20]
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	f002 f8b5 	bl	8012e2c <__i2b>
 8010cc2:	4680      	mov	r8, r0
 8010cc4:	b948      	cbnz	r0, 8010cda <_strtod_l+0x6a2>
 8010cc6:	f04f 0800 	mov.w	r8, #0
 8010cca:	e6d4      	b.n	8010a76 <_strtod_l+0x43e>
 8010ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010cd4:	ea03 0a0a 	and.w	sl, r3, sl
 8010cd8:	e7b0      	b.n	8010c3c <_strtod_l+0x604>
 8010cda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010cdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010cde:	2d00      	cmp	r5, #0
 8010ce0:	bfab      	itete	ge
 8010ce2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010ce4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010ce6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010ce8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010cea:	bfac      	ite	ge
 8010cec:	18ef      	addge	r7, r5, r3
 8010cee:	1b5e      	sublt	r6, r3, r5
 8010cf0:	9b08      	ldr	r3, [sp, #32]
 8010cf2:	1aed      	subs	r5, r5, r3
 8010cf4:	4415      	add	r5, r2
 8010cf6:	4b66      	ldr	r3, [pc, #408]	@ (8010e90 <_strtod_l+0x858>)
 8010cf8:	3d01      	subs	r5, #1
 8010cfa:	429d      	cmp	r5, r3
 8010cfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010d00:	da50      	bge.n	8010da4 <_strtod_l+0x76c>
 8010d02:	1b5b      	subs	r3, r3, r5
 8010d04:	2b1f      	cmp	r3, #31
 8010d06:	eba2 0203 	sub.w	r2, r2, r3
 8010d0a:	f04f 0101 	mov.w	r1, #1
 8010d0e:	dc3d      	bgt.n	8010d8c <_strtod_l+0x754>
 8010d10:	fa01 f303 	lsl.w	r3, r1, r3
 8010d14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d16:	2300      	movs	r3, #0
 8010d18:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d1a:	18bd      	adds	r5, r7, r2
 8010d1c:	9b08      	ldr	r3, [sp, #32]
 8010d1e:	42af      	cmp	r7, r5
 8010d20:	4416      	add	r6, r2
 8010d22:	441e      	add	r6, r3
 8010d24:	463b      	mov	r3, r7
 8010d26:	bfa8      	it	ge
 8010d28:	462b      	movge	r3, r5
 8010d2a:	42b3      	cmp	r3, r6
 8010d2c:	bfa8      	it	ge
 8010d2e:	4633      	movge	r3, r6
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	bfc2      	ittt	gt
 8010d34:	1aed      	subgt	r5, r5, r3
 8010d36:	1af6      	subgt	r6, r6, r3
 8010d38:	1aff      	subgt	r7, r7, r3
 8010d3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dd16      	ble.n	8010d6e <_strtod_l+0x736>
 8010d40:	4641      	mov	r1, r8
 8010d42:	9805      	ldr	r0, [sp, #20]
 8010d44:	461a      	mov	r2, r3
 8010d46:	f002 f931 	bl	8012fac <__pow5mult>
 8010d4a:	4680      	mov	r8, r0
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	d0ba      	beq.n	8010cc6 <_strtod_l+0x68e>
 8010d50:	4601      	mov	r1, r0
 8010d52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010d54:	9805      	ldr	r0, [sp, #20]
 8010d56:	f002 f87f 	bl	8012e58 <__multiply>
 8010d5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	f43f ae8a 	beq.w	8010a76 <_strtod_l+0x43e>
 8010d62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d64:	9805      	ldr	r0, [sp, #20]
 8010d66:	f001 ff63 	bl	8012c30 <_Bfree>
 8010d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d6e:	2d00      	cmp	r5, #0
 8010d70:	dc1d      	bgt.n	8010dae <_strtod_l+0x776>
 8010d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	dd23      	ble.n	8010dc0 <_strtod_l+0x788>
 8010d78:	4649      	mov	r1, r9
 8010d7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010d7c:	9805      	ldr	r0, [sp, #20]
 8010d7e:	f002 f915 	bl	8012fac <__pow5mult>
 8010d82:	4681      	mov	r9, r0
 8010d84:	b9e0      	cbnz	r0, 8010dc0 <_strtod_l+0x788>
 8010d86:	f04f 0900 	mov.w	r9, #0
 8010d8a:	e674      	b.n	8010a76 <_strtod_l+0x43e>
 8010d8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010d90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010d94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010d98:	35e2      	adds	r5, #226	@ 0xe2
 8010d9a:	fa01 f305 	lsl.w	r3, r1, r5
 8010d9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010da0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010da2:	e7ba      	b.n	8010d1a <_strtod_l+0x6e2>
 8010da4:	2300      	movs	r3, #0
 8010da6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010da8:	2301      	movs	r3, #1
 8010daa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010dac:	e7b5      	b.n	8010d1a <_strtod_l+0x6e2>
 8010dae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010db0:	9805      	ldr	r0, [sp, #20]
 8010db2:	462a      	mov	r2, r5
 8010db4:	f002 f954 	bl	8013060 <__lshift>
 8010db8:	901a      	str	r0, [sp, #104]	@ 0x68
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d1d9      	bne.n	8010d72 <_strtod_l+0x73a>
 8010dbe:	e65a      	b.n	8010a76 <_strtod_l+0x43e>
 8010dc0:	2e00      	cmp	r6, #0
 8010dc2:	dd07      	ble.n	8010dd4 <_strtod_l+0x79c>
 8010dc4:	4649      	mov	r1, r9
 8010dc6:	9805      	ldr	r0, [sp, #20]
 8010dc8:	4632      	mov	r2, r6
 8010dca:	f002 f949 	bl	8013060 <__lshift>
 8010dce:	4681      	mov	r9, r0
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d0d8      	beq.n	8010d86 <_strtod_l+0x74e>
 8010dd4:	2f00      	cmp	r7, #0
 8010dd6:	dd08      	ble.n	8010dea <_strtod_l+0x7b2>
 8010dd8:	4641      	mov	r1, r8
 8010dda:	9805      	ldr	r0, [sp, #20]
 8010ddc:	463a      	mov	r2, r7
 8010dde:	f002 f93f 	bl	8013060 <__lshift>
 8010de2:	4680      	mov	r8, r0
 8010de4:	2800      	cmp	r0, #0
 8010de6:	f43f ae46 	beq.w	8010a76 <_strtod_l+0x43e>
 8010dea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010dec:	9805      	ldr	r0, [sp, #20]
 8010dee:	464a      	mov	r2, r9
 8010df0:	f002 f9be 	bl	8013170 <__mdiff>
 8010df4:	4604      	mov	r4, r0
 8010df6:	2800      	cmp	r0, #0
 8010df8:	f43f ae3d 	beq.w	8010a76 <_strtod_l+0x43e>
 8010dfc:	68c3      	ldr	r3, [r0, #12]
 8010dfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e00:	2300      	movs	r3, #0
 8010e02:	60c3      	str	r3, [r0, #12]
 8010e04:	4641      	mov	r1, r8
 8010e06:	f002 f997 	bl	8013138 <__mcmp>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	da46      	bge.n	8010e9c <_strtod_l+0x864>
 8010e0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e10:	ea53 030a 	orrs.w	r3, r3, sl
 8010e14:	d16c      	bne.n	8010ef0 <_strtod_l+0x8b8>
 8010e16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d168      	bne.n	8010ef0 <_strtod_l+0x8b8>
 8010e1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010e22:	0d1b      	lsrs	r3, r3, #20
 8010e24:	051b      	lsls	r3, r3, #20
 8010e26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010e2a:	d961      	bls.n	8010ef0 <_strtod_l+0x8b8>
 8010e2c:	6963      	ldr	r3, [r4, #20]
 8010e2e:	b913      	cbnz	r3, 8010e36 <_strtod_l+0x7fe>
 8010e30:	6923      	ldr	r3, [r4, #16]
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	dd5c      	ble.n	8010ef0 <_strtod_l+0x8b8>
 8010e36:	4621      	mov	r1, r4
 8010e38:	2201      	movs	r2, #1
 8010e3a:	9805      	ldr	r0, [sp, #20]
 8010e3c:	f002 f910 	bl	8013060 <__lshift>
 8010e40:	4641      	mov	r1, r8
 8010e42:	4604      	mov	r4, r0
 8010e44:	f002 f978 	bl	8013138 <__mcmp>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	dd51      	ble.n	8010ef0 <_strtod_l+0x8b8>
 8010e4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010e50:	9a08      	ldr	r2, [sp, #32]
 8010e52:	0d1b      	lsrs	r3, r3, #20
 8010e54:	051b      	lsls	r3, r3, #20
 8010e56:	2a00      	cmp	r2, #0
 8010e58:	d06b      	beq.n	8010f32 <_strtod_l+0x8fa>
 8010e5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010e5e:	d868      	bhi.n	8010f32 <_strtod_l+0x8fa>
 8010e60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010e64:	f67f ae9d 	bls.w	8010ba2 <_strtod_l+0x56a>
 8010e68:	4b0a      	ldr	r3, [pc, #40]	@ (8010e94 <_strtod_l+0x85c>)
 8010e6a:	4650      	mov	r0, sl
 8010e6c:	4659      	mov	r1, fp
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f7ef fbd2 	bl	8000618 <__aeabi_dmul>
 8010e74:	4b08      	ldr	r3, [pc, #32]	@ (8010e98 <_strtod_l+0x860>)
 8010e76:	400b      	ands	r3, r1
 8010e78:	4682      	mov	sl, r0
 8010e7a:	468b      	mov	fp, r1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f47f ae05 	bne.w	8010a8c <_strtod_l+0x454>
 8010e82:	9a05      	ldr	r2, [sp, #20]
 8010e84:	2322      	movs	r3, #34	@ 0x22
 8010e86:	6013      	str	r3, [r2, #0]
 8010e88:	e600      	b.n	8010a8c <_strtod_l+0x454>
 8010e8a:	bf00      	nop
 8010e8c:	08013b38 	.word	0x08013b38
 8010e90:	fffffc02 	.word	0xfffffc02
 8010e94:	39500000 	.word	0x39500000
 8010e98:	7ff00000 	.word	0x7ff00000
 8010e9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010ea0:	d165      	bne.n	8010f6e <_strtod_l+0x936>
 8010ea2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010ea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ea8:	b35a      	cbz	r2, 8010f02 <_strtod_l+0x8ca>
 8010eaa:	4a9f      	ldr	r2, [pc, #636]	@ (8011128 <_strtod_l+0xaf0>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d12b      	bne.n	8010f08 <_strtod_l+0x8d0>
 8010eb0:	9b08      	ldr	r3, [sp, #32]
 8010eb2:	4651      	mov	r1, sl
 8010eb4:	b303      	cbz	r3, 8010ef8 <_strtod_l+0x8c0>
 8010eb6:	4b9d      	ldr	r3, [pc, #628]	@ (801112c <_strtod_l+0xaf4>)
 8010eb8:	465a      	mov	r2, fp
 8010eba:	4013      	ands	r3, r2
 8010ebc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010ec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010ec4:	d81b      	bhi.n	8010efe <_strtod_l+0x8c6>
 8010ec6:	0d1b      	lsrs	r3, r3, #20
 8010ec8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8010ed0:	4299      	cmp	r1, r3
 8010ed2:	d119      	bne.n	8010f08 <_strtod_l+0x8d0>
 8010ed4:	4b96      	ldr	r3, [pc, #600]	@ (8011130 <_strtod_l+0xaf8>)
 8010ed6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d102      	bne.n	8010ee2 <_strtod_l+0x8aa>
 8010edc:	3101      	adds	r1, #1
 8010ede:	f43f adca 	beq.w	8010a76 <_strtod_l+0x43e>
 8010ee2:	4b92      	ldr	r3, [pc, #584]	@ (801112c <_strtod_l+0xaf4>)
 8010ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ee6:	401a      	ands	r2, r3
 8010ee8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010eec:	f04f 0a00 	mov.w	sl, #0
 8010ef0:	9b08      	ldr	r3, [sp, #32]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d1b8      	bne.n	8010e68 <_strtod_l+0x830>
 8010ef6:	e5c9      	b.n	8010a8c <_strtod_l+0x454>
 8010ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010efc:	e7e8      	b.n	8010ed0 <_strtod_l+0x898>
 8010efe:	4613      	mov	r3, r2
 8010f00:	e7e6      	b.n	8010ed0 <_strtod_l+0x898>
 8010f02:	ea53 030a 	orrs.w	r3, r3, sl
 8010f06:	d0a1      	beq.n	8010e4c <_strtod_l+0x814>
 8010f08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f0a:	b1db      	cbz	r3, 8010f44 <_strtod_l+0x90c>
 8010f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f0e:	4213      	tst	r3, r2
 8010f10:	d0ee      	beq.n	8010ef0 <_strtod_l+0x8b8>
 8010f12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f14:	9a08      	ldr	r2, [sp, #32]
 8010f16:	4650      	mov	r0, sl
 8010f18:	4659      	mov	r1, fp
 8010f1a:	b1bb      	cbz	r3, 8010f4c <_strtod_l+0x914>
 8010f1c:	f7ff fb6e 	bl	80105fc <sulp>
 8010f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f24:	ec53 2b10 	vmov	r2, r3, d0
 8010f28:	f7ef f9c0 	bl	80002ac <__adddf3>
 8010f2c:	4682      	mov	sl, r0
 8010f2e:	468b      	mov	fp, r1
 8010f30:	e7de      	b.n	8010ef0 <_strtod_l+0x8b8>
 8010f32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010f36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010f3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010f3e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8010f42:	e7d5      	b.n	8010ef0 <_strtod_l+0x8b8>
 8010f44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010f46:	ea13 0f0a 	tst.w	r3, sl
 8010f4a:	e7e1      	b.n	8010f10 <_strtod_l+0x8d8>
 8010f4c:	f7ff fb56 	bl	80105fc <sulp>
 8010f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f54:	ec53 2b10 	vmov	r2, r3, d0
 8010f58:	f7ef f9a6 	bl	80002a8 <__aeabi_dsub>
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	2300      	movs	r3, #0
 8010f60:	4682      	mov	sl, r0
 8010f62:	468b      	mov	fp, r1
 8010f64:	f7ef fdc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d0c1      	beq.n	8010ef0 <_strtod_l+0x8b8>
 8010f6c:	e619      	b.n	8010ba2 <_strtod_l+0x56a>
 8010f6e:	4641      	mov	r1, r8
 8010f70:	4620      	mov	r0, r4
 8010f72:	f002 fa59 	bl	8013428 <__ratio>
 8010f76:	ec57 6b10 	vmov	r6, r7, d0
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010f80:	4630      	mov	r0, r6
 8010f82:	4639      	mov	r1, r7
 8010f84:	f7ef fdc4 	bl	8000b10 <__aeabi_dcmple>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d06f      	beq.n	801106c <_strtod_l+0xa34>
 8010f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d17a      	bne.n	8011088 <_strtod_l+0xa50>
 8010f92:	f1ba 0f00 	cmp.w	sl, #0
 8010f96:	d158      	bne.n	801104a <_strtod_l+0xa12>
 8010f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d15a      	bne.n	8011058 <_strtod_l+0xa20>
 8010fa2:	4b64      	ldr	r3, [pc, #400]	@ (8011134 <_strtod_l+0xafc>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	4639      	mov	r1, r7
 8010faa:	f7ef fda7 	bl	8000afc <__aeabi_dcmplt>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d159      	bne.n	8011066 <_strtod_l+0xa2e>
 8010fb2:	4630      	mov	r0, r6
 8010fb4:	4639      	mov	r1, r7
 8010fb6:	4b60      	ldr	r3, [pc, #384]	@ (8011138 <_strtod_l+0xb00>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f7ef fb2d 	bl	8000618 <__aeabi_dmul>
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	460f      	mov	r7, r1
 8010fc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010fc6:	9606      	str	r6, [sp, #24]
 8010fc8:	9307      	str	r3, [sp, #28]
 8010fca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010fce:	4d57      	ldr	r5, [pc, #348]	@ (801112c <_strtod_l+0xaf4>)
 8010fd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fd6:	401d      	ands	r5, r3
 8010fd8:	4b58      	ldr	r3, [pc, #352]	@ (801113c <_strtod_l+0xb04>)
 8010fda:	429d      	cmp	r5, r3
 8010fdc:	f040 80b2 	bne.w	8011144 <_strtod_l+0xb0c>
 8010fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fe2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010fe6:	ec4b ab10 	vmov	d0, sl, fp
 8010fea:	f002 f955 	bl	8013298 <__ulp>
 8010fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ff2:	ec51 0b10 	vmov	r0, r1, d0
 8010ff6:	f7ef fb0f 	bl	8000618 <__aeabi_dmul>
 8010ffa:	4652      	mov	r2, sl
 8010ffc:	465b      	mov	r3, fp
 8010ffe:	f7ef f955 	bl	80002ac <__adddf3>
 8011002:	460b      	mov	r3, r1
 8011004:	4949      	ldr	r1, [pc, #292]	@ (801112c <_strtod_l+0xaf4>)
 8011006:	4a4e      	ldr	r2, [pc, #312]	@ (8011140 <_strtod_l+0xb08>)
 8011008:	4019      	ands	r1, r3
 801100a:	4291      	cmp	r1, r2
 801100c:	4682      	mov	sl, r0
 801100e:	d942      	bls.n	8011096 <_strtod_l+0xa5e>
 8011010:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011012:	4b47      	ldr	r3, [pc, #284]	@ (8011130 <_strtod_l+0xaf8>)
 8011014:	429a      	cmp	r2, r3
 8011016:	d103      	bne.n	8011020 <_strtod_l+0x9e8>
 8011018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801101a:	3301      	adds	r3, #1
 801101c:	f43f ad2b 	beq.w	8010a76 <_strtod_l+0x43e>
 8011020:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011130 <_strtod_l+0xaf8>
 8011024:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8011028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801102a:	9805      	ldr	r0, [sp, #20]
 801102c:	f001 fe00 	bl	8012c30 <_Bfree>
 8011030:	9805      	ldr	r0, [sp, #20]
 8011032:	4649      	mov	r1, r9
 8011034:	f001 fdfc 	bl	8012c30 <_Bfree>
 8011038:	9805      	ldr	r0, [sp, #20]
 801103a:	4641      	mov	r1, r8
 801103c:	f001 fdf8 	bl	8012c30 <_Bfree>
 8011040:	9805      	ldr	r0, [sp, #20]
 8011042:	4621      	mov	r1, r4
 8011044:	f001 fdf4 	bl	8012c30 <_Bfree>
 8011048:	e618      	b.n	8010c7c <_strtod_l+0x644>
 801104a:	f1ba 0f01 	cmp.w	sl, #1
 801104e:	d103      	bne.n	8011058 <_strtod_l+0xa20>
 8011050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011052:	2b00      	cmp	r3, #0
 8011054:	f43f ada5 	beq.w	8010ba2 <_strtod_l+0x56a>
 8011058:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011108 <_strtod_l+0xad0>
 801105c:	4f35      	ldr	r7, [pc, #212]	@ (8011134 <_strtod_l+0xafc>)
 801105e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011062:	2600      	movs	r6, #0
 8011064:	e7b1      	b.n	8010fca <_strtod_l+0x992>
 8011066:	4f34      	ldr	r7, [pc, #208]	@ (8011138 <_strtod_l+0xb00>)
 8011068:	2600      	movs	r6, #0
 801106a:	e7aa      	b.n	8010fc2 <_strtod_l+0x98a>
 801106c:	4b32      	ldr	r3, [pc, #200]	@ (8011138 <_strtod_l+0xb00>)
 801106e:	4630      	mov	r0, r6
 8011070:	4639      	mov	r1, r7
 8011072:	2200      	movs	r2, #0
 8011074:	f7ef fad0 	bl	8000618 <__aeabi_dmul>
 8011078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801107a:	4606      	mov	r6, r0
 801107c:	460f      	mov	r7, r1
 801107e:	2b00      	cmp	r3, #0
 8011080:	d09f      	beq.n	8010fc2 <_strtod_l+0x98a>
 8011082:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011086:	e7a0      	b.n	8010fca <_strtod_l+0x992>
 8011088:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011110 <_strtod_l+0xad8>
 801108c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011090:	ec57 6b17 	vmov	r6, r7, d7
 8011094:	e799      	b.n	8010fca <_strtod_l+0x992>
 8011096:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801109a:	9b08      	ldr	r3, [sp, #32]
 801109c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d1c1      	bne.n	8011028 <_strtod_l+0x9f0>
 80110a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110a8:	0d1b      	lsrs	r3, r3, #20
 80110aa:	051b      	lsls	r3, r3, #20
 80110ac:	429d      	cmp	r5, r3
 80110ae:	d1bb      	bne.n	8011028 <_strtod_l+0x9f0>
 80110b0:	4630      	mov	r0, r6
 80110b2:	4639      	mov	r1, r7
 80110b4:	f7ef fe10 	bl	8000cd8 <__aeabi_d2lz>
 80110b8:	f7ef fa80 	bl	80005bc <__aeabi_l2d>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	4630      	mov	r0, r6
 80110c2:	4639      	mov	r1, r7
 80110c4:	f7ef f8f0 	bl	80002a8 <__aeabi_dsub>
 80110c8:	460b      	mov	r3, r1
 80110ca:	4602      	mov	r2, r0
 80110cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80110d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80110d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110d6:	ea46 060a 	orr.w	r6, r6, sl
 80110da:	431e      	orrs	r6, r3
 80110dc:	d06f      	beq.n	80111be <_strtod_l+0xb86>
 80110de:	a30e      	add	r3, pc, #56	@ (adr r3, 8011118 <_strtod_l+0xae0>)
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	f7ef fd0a 	bl	8000afc <__aeabi_dcmplt>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	f47f accf 	bne.w	8010a8c <_strtod_l+0x454>
 80110ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8011120 <_strtod_l+0xae8>)
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80110f8:	f7ef fd1e 	bl	8000b38 <__aeabi_dcmpgt>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	d093      	beq.n	8011028 <_strtod_l+0x9f0>
 8011100:	e4c4      	b.n	8010a8c <_strtod_l+0x454>
 8011102:	bf00      	nop
 8011104:	f3af 8000 	nop.w
 8011108:	00000000 	.word	0x00000000
 801110c:	bff00000 	.word	0xbff00000
 8011110:	00000000 	.word	0x00000000
 8011114:	3ff00000 	.word	0x3ff00000
 8011118:	94a03595 	.word	0x94a03595
 801111c:	3fdfffff 	.word	0x3fdfffff
 8011120:	35afe535 	.word	0x35afe535
 8011124:	3fe00000 	.word	0x3fe00000
 8011128:	000fffff 	.word	0x000fffff
 801112c:	7ff00000 	.word	0x7ff00000
 8011130:	7fefffff 	.word	0x7fefffff
 8011134:	3ff00000 	.word	0x3ff00000
 8011138:	3fe00000 	.word	0x3fe00000
 801113c:	7fe00000 	.word	0x7fe00000
 8011140:	7c9fffff 	.word	0x7c9fffff
 8011144:	9b08      	ldr	r3, [sp, #32]
 8011146:	b323      	cbz	r3, 8011192 <_strtod_l+0xb5a>
 8011148:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801114c:	d821      	bhi.n	8011192 <_strtod_l+0xb5a>
 801114e:	a328      	add	r3, pc, #160	@ (adr r3, 80111f0 <_strtod_l+0xbb8>)
 8011150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011154:	4630      	mov	r0, r6
 8011156:	4639      	mov	r1, r7
 8011158:	f7ef fcda 	bl	8000b10 <__aeabi_dcmple>
 801115c:	b1a0      	cbz	r0, 8011188 <_strtod_l+0xb50>
 801115e:	4639      	mov	r1, r7
 8011160:	4630      	mov	r0, r6
 8011162:	f7ef fd31 	bl	8000bc8 <__aeabi_d2uiz>
 8011166:	2801      	cmp	r0, #1
 8011168:	bf38      	it	cc
 801116a:	2001      	movcc	r0, #1
 801116c:	f7ef f9da 	bl	8000524 <__aeabi_ui2d>
 8011170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011172:	4606      	mov	r6, r0
 8011174:	460f      	mov	r7, r1
 8011176:	b9fb      	cbnz	r3, 80111b8 <_strtod_l+0xb80>
 8011178:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801117c:	9014      	str	r0, [sp, #80]	@ 0x50
 801117e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011180:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011184:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011188:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801118a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801118e:	1b5b      	subs	r3, r3, r5
 8011190:	9311      	str	r3, [sp, #68]	@ 0x44
 8011192:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011196:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801119a:	f002 f87d 	bl	8013298 <__ulp>
 801119e:	4650      	mov	r0, sl
 80111a0:	ec53 2b10 	vmov	r2, r3, d0
 80111a4:	4659      	mov	r1, fp
 80111a6:	f7ef fa37 	bl	8000618 <__aeabi_dmul>
 80111aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80111ae:	f7ef f87d 	bl	80002ac <__adddf3>
 80111b2:	4682      	mov	sl, r0
 80111b4:	468b      	mov	fp, r1
 80111b6:	e770      	b.n	801109a <_strtod_l+0xa62>
 80111b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80111bc:	e7e0      	b.n	8011180 <_strtod_l+0xb48>
 80111be:	a30e      	add	r3, pc, #56	@ (adr r3, 80111f8 <_strtod_l+0xbc0>)
 80111c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c4:	f7ef fc9a 	bl	8000afc <__aeabi_dcmplt>
 80111c8:	e798      	b.n	80110fc <_strtod_l+0xac4>
 80111ca:	2300      	movs	r3, #0
 80111cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80111d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80111d2:	6013      	str	r3, [r2, #0]
 80111d4:	f7ff ba6d 	b.w	80106b2 <_strtod_l+0x7a>
 80111d8:	2a65      	cmp	r2, #101	@ 0x65
 80111da:	f43f ab66 	beq.w	80108aa <_strtod_l+0x272>
 80111de:	2a45      	cmp	r2, #69	@ 0x45
 80111e0:	f43f ab63 	beq.w	80108aa <_strtod_l+0x272>
 80111e4:	2301      	movs	r3, #1
 80111e6:	f7ff bb9e 	b.w	8010926 <_strtod_l+0x2ee>
 80111ea:	bf00      	nop
 80111ec:	f3af 8000 	nop.w
 80111f0:	ffc00000 	.word	0xffc00000
 80111f4:	41dfffff 	.word	0x41dfffff
 80111f8:	94a03595 	.word	0x94a03595
 80111fc:	3fcfffff 	.word	0x3fcfffff

08011200 <_strtod_r>:
 8011200:	4b01      	ldr	r3, [pc, #4]	@ (8011208 <_strtod_r+0x8>)
 8011202:	f7ff ba19 	b.w	8010638 <_strtod_l>
 8011206:	bf00      	nop
 8011208:	2000006c 	.word	0x2000006c

0801120c <_strtol_l.constprop.0>:
 801120c:	2b24      	cmp	r3, #36	@ 0x24
 801120e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011212:	4686      	mov	lr, r0
 8011214:	4690      	mov	r8, r2
 8011216:	d801      	bhi.n	801121c <_strtol_l.constprop.0+0x10>
 8011218:	2b01      	cmp	r3, #1
 801121a:	d106      	bne.n	801122a <_strtol_l.constprop.0+0x1e>
 801121c:	f7ff f962 	bl	80104e4 <__errno>
 8011220:	2316      	movs	r3, #22
 8011222:	6003      	str	r3, [r0, #0]
 8011224:	2000      	movs	r0, #0
 8011226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801122a:	4834      	ldr	r0, [pc, #208]	@ (80112fc <_strtol_l.constprop.0+0xf0>)
 801122c:	460d      	mov	r5, r1
 801122e:	462a      	mov	r2, r5
 8011230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011234:	5d06      	ldrb	r6, [r0, r4]
 8011236:	f016 0608 	ands.w	r6, r6, #8
 801123a:	d1f8      	bne.n	801122e <_strtol_l.constprop.0+0x22>
 801123c:	2c2d      	cmp	r4, #45	@ 0x2d
 801123e:	d12d      	bne.n	801129c <_strtol_l.constprop.0+0x90>
 8011240:	782c      	ldrb	r4, [r5, #0]
 8011242:	2601      	movs	r6, #1
 8011244:	1c95      	adds	r5, r2, #2
 8011246:	f033 0210 	bics.w	r2, r3, #16
 801124a:	d109      	bne.n	8011260 <_strtol_l.constprop.0+0x54>
 801124c:	2c30      	cmp	r4, #48	@ 0x30
 801124e:	d12a      	bne.n	80112a6 <_strtol_l.constprop.0+0x9a>
 8011250:	782a      	ldrb	r2, [r5, #0]
 8011252:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011256:	2a58      	cmp	r2, #88	@ 0x58
 8011258:	d125      	bne.n	80112a6 <_strtol_l.constprop.0+0x9a>
 801125a:	786c      	ldrb	r4, [r5, #1]
 801125c:	2310      	movs	r3, #16
 801125e:	3502      	adds	r5, #2
 8011260:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011264:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8011268:	2200      	movs	r2, #0
 801126a:	fbbc f9f3 	udiv	r9, ip, r3
 801126e:	4610      	mov	r0, r2
 8011270:	fb03 ca19 	mls	sl, r3, r9, ip
 8011274:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011278:	2f09      	cmp	r7, #9
 801127a:	d81b      	bhi.n	80112b4 <_strtol_l.constprop.0+0xa8>
 801127c:	463c      	mov	r4, r7
 801127e:	42a3      	cmp	r3, r4
 8011280:	dd27      	ble.n	80112d2 <_strtol_l.constprop.0+0xc6>
 8011282:	1c57      	adds	r7, r2, #1
 8011284:	d007      	beq.n	8011296 <_strtol_l.constprop.0+0x8a>
 8011286:	4581      	cmp	r9, r0
 8011288:	d320      	bcc.n	80112cc <_strtol_l.constprop.0+0xc0>
 801128a:	d101      	bne.n	8011290 <_strtol_l.constprop.0+0x84>
 801128c:	45a2      	cmp	sl, r4
 801128e:	db1d      	blt.n	80112cc <_strtol_l.constprop.0+0xc0>
 8011290:	fb00 4003 	mla	r0, r0, r3, r4
 8011294:	2201      	movs	r2, #1
 8011296:	f815 4b01 	ldrb.w	r4, [r5], #1
 801129a:	e7eb      	b.n	8011274 <_strtol_l.constprop.0+0x68>
 801129c:	2c2b      	cmp	r4, #43	@ 0x2b
 801129e:	bf04      	itt	eq
 80112a0:	782c      	ldrbeq	r4, [r5, #0]
 80112a2:	1c95      	addeq	r5, r2, #2
 80112a4:	e7cf      	b.n	8011246 <_strtol_l.constprop.0+0x3a>
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d1da      	bne.n	8011260 <_strtol_l.constprop.0+0x54>
 80112aa:	2c30      	cmp	r4, #48	@ 0x30
 80112ac:	bf0c      	ite	eq
 80112ae:	2308      	moveq	r3, #8
 80112b0:	230a      	movne	r3, #10
 80112b2:	e7d5      	b.n	8011260 <_strtol_l.constprop.0+0x54>
 80112b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80112b8:	2f19      	cmp	r7, #25
 80112ba:	d801      	bhi.n	80112c0 <_strtol_l.constprop.0+0xb4>
 80112bc:	3c37      	subs	r4, #55	@ 0x37
 80112be:	e7de      	b.n	801127e <_strtol_l.constprop.0+0x72>
 80112c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80112c4:	2f19      	cmp	r7, #25
 80112c6:	d804      	bhi.n	80112d2 <_strtol_l.constprop.0+0xc6>
 80112c8:	3c57      	subs	r4, #87	@ 0x57
 80112ca:	e7d8      	b.n	801127e <_strtol_l.constprop.0+0x72>
 80112cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80112d0:	e7e1      	b.n	8011296 <_strtol_l.constprop.0+0x8a>
 80112d2:	1c53      	adds	r3, r2, #1
 80112d4:	d108      	bne.n	80112e8 <_strtol_l.constprop.0+0xdc>
 80112d6:	2322      	movs	r3, #34	@ 0x22
 80112d8:	f8ce 3000 	str.w	r3, [lr]
 80112dc:	4660      	mov	r0, ip
 80112de:	f1b8 0f00 	cmp.w	r8, #0
 80112e2:	d0a0      	beq.n	8011226 <_strtol_l.constprop.0+0x1a>
 80112e4:	1e69      	subs	r1, r5, #1
 80112e6:	e006      	b.n	80112f6 <_strtol_l.constprop.0+0xea>
 80112e8:	b106      	cbz	r6, 80112ec <_strtol_l.constprop.0+0xe0>
 80112ea:	4240      	negs	r0, r0
 80112ec:	f1b8 0f00 	cmp.w	r8, #0
 80112f0:	d099      	beq.n	8011226 <_strtol_l.constprop.0+0x1a>
 80112f2:	2a00      	cmp	r2, #0
 80112f4:	d1f6      	bne.n	80112e4 <_strtol_l.constprop.0+0xd8>
 80112f6:	f8c8 1000 	str.w	r1, [r8]
 80112fa:	e794      	b.n	8011226 <_strtol_l.constprop.0+0x1a>
 80112fc:	08013b61 	.word	0x08013b61

08011300 <_strtol_r>:
 8011300:	f7ff bf84 	b.w	801120c <_strtol_l.constprop.0>

08011304 <__ssputs_r>:
 8011304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011308:	688e      	ldr	r6, [r1, #8]
 801130a:	461f      	mov	r7, r3
 801130c:	42be      	cmp	r6, r7
 801130e:	680b      	ldr	r3, [r1, #0]
 8011310:	4682      	mov	sl, r0
 8011312:	460c      	mov	r4, r1
 8011314:	4690      	mov	r8, r2
 8011316:	d82d      	bhi.n	8011374 <__ssputs_r+0x70>
 8011318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801131c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011320:	d026      	beq.n	8011370 <__ssputs_r+0x6c>
 8011322:	6965      	ldr	r5, [r4, #20]
 8011324:	6909      	ldr	r1, [r1, #16]
 8011326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801132a:	eba3 0901 	sub.w	r9, r3, r1
 801132e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011332:	1c7b      	adds	r3, r7, #1
 8011334:	444b      	add	r3, r9
 8011336:	106d      	asrs	r5, r5, #1
 8011338:	429d      	cmp	r5, r3
 801133a:	bf38      	it	cc
 801133c:	461d      	movcc	r5, r3
 801133e:	0553      	lsls	r3, r2, #21
 8011340:	d527      	bpl.n	8011392 <__ssputs_r+0x8e>
 8011342:	4629      	mov	r1, r5
 8011344:	f7fe fb68 	bl	800fa18 <_malloc_r>
 8011348:	4606      	mov	r6, r0
 801134a:	b360      	cbz	r0, 80113a6 <__ssputs_r+0xa2>
 801134c:	6921      	ldr	r1, [r4, #16]
 801134e:	464a      	mov	r2, r9
 8011350:	f7ff f8f5 	bl	801053e <memcpy>
 8011354:	89a3      	ldrh	r3, [r4, #12]
 8011356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801135a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801135e:	81a3      	strh	r3, [r4, #12]
 8011360:	6126      	str	r6, [r4, #16]
 8011362:	6165      	str	r5, [r4, #20]
 8011364:	444e      	add	r6, r9
 8011366:	eba5 0509 	sub.w	r5, r5, r9
 801136a:	6026      	str	r6, [r4, #0]
 801136c:	60a5      	str	r5, [r4, #8]
 801136e:	463e      	mov	r6, r7
 8011370:	42be      	cmp	r6, r7
 8011372:	d900      	bls.n	8011376 <__ssputs_r+0x72>
 8011374:	463e      	mov	r6, r7
 8011376:	6820      	ldr	r0, [r4, #0]
 8011378:	4632      	mov	r2, r6
 801137a:	4641      	mov	r1, r8
 801137c:	f001 f885 	bl	801248a <memmove>
 8011380:	68a3      	ldr	r3, [r4, #8]
 8011382:	1b9b      	subs	r3, r3, r6
 8011384:	60a3      	str	r3, [r4, #8]
 8011386:	6823      	ldr	r3, [r4, #0]
 8011388:	4433      	add	r3, r6
 801138a:	6023      	str	r3, [r4, #0]
 801138c:	2000      	movs	r0, #0
 801138e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011392:	462a      	mov	r2, r5
 8011394:	f002 f8be 	bl	8013514 <_realloc_r>
 8011398:	4606      	mov	r6, r0
 801139a:	2800      	cmp	r0, #0
 801139c:	d1e0      	bne.n	8011360 <__ssputs_r+0x5c>
 801139e:	6921      	ldr	r1, [r4, #16]
 80113a0:	4650      	mov	r0, sl
 80113a2:	f7ff f8e1 	bl	8010568 <_free_r>
 80113a6:	230c      	movs	r3, #12
 80113a8:	f8ca 3000 	str.w	r3, [sl]
 80113ac:	89a3      	ldrh	r3, [r4, #12]
 80113ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113b2:	81a3      	strh	r3, [r4, #12]
 80113b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80113b8:	e7e9      	b.n	801138e <__ssputs_r+0x8a>
	...

080113bc <_svfiprintf_r>:
 80113bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c0:	4698      	mov	r8, r3
 80113c2:	898b      	ldrh	r3, [r1, #12]
 80113c4:	061b      	lsls	r3, r3, #24
 80113c6:	b09d      	sub	sp, #116	@ 0x74
 80113c8:	4607      	mov	r7, r0
 80113ca:	460d      	mov	r5, r1
 80113cc:	4614      	mov	r4, r2
 80113ce:	d510      	bpl.n	80113f2 <_svfiprintf_r+0x36>
 80113d0:	690b      	ldr	r3, [r1, #16]
 80113d2:	b973      	cbnz	r3, 80113f2 <_svfiprintf_r+0x36>
 80113d4:	2140      	movs	r1, #64	@ 0x40
 80113d6:	f7fe fb1f 	bl	800fa18 <_malloc_r>
 80113da:	6028      	str	r0, [r5, #0]
 80113dc:	6128      	str	r0, [r5, #16]
 80113de:	b930      	cbnz	r0, 80113ee <_svfiprintf_r+0x32>
 80113e0:	230c      	movs	r3, #12
 80113e2:	603b      	str	r3, [r7, #0]
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80113e8:	b01d      	add	sp, #116	@ 0x74
 80113ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ee:	2340      	movs	r3, #64	@ 0x40
 80113f0:	616b      	str	r3, [r5, #20]
 80113f2:	2300      	movs	r3, #0
 80113f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113f6:	2320      	movs	r3, #32
 80113f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80113fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011400:	2330      	movs	r3, #48	@ 0x30
 8011402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80115a0 <_svfiprintf_r+0x1e4>
 8011406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801140a:	f04f 0901 	mov.w	r9, #1
 801140e:	4623      	mov	r3, r4
 8011410:	469a      	mov	sl, r3
 8011412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011416:	b10a      	cbz	r2, 801141c <_svfiprintf_r+0x60>
 8011418:	2a25      	cmp	r2, #37	@ 0x25
 801141a:	d1f9      	bne.n	8011410 <_svfiprintf_r+0x54>
 801141c:	ebba 0b04 	subs.w	fp, sl, r4
 8011420:	d00b      	beq.n	801143a <_svfiprintf_r+0x7e>
 8011422:	465b      	mov	r3, fp
 8011424:	4622      	mov	r2, r4
 8011426:	4629      	mov	r1, r5
 8011428:	4638      	mov	r0, r7
 801142a:	f7ff ff6b 	bl	8011304 <__ssputs_r>
 801142e:	3001      	adds	r0, #1
 8011430:	f000 80a7 	beq.w	8011582 <_svfiprintf_r+0x1c6>
 8011434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011436:	445a      	add	r2, fp
 8011438:	9209      	str	r2, [sp, #36]	@ 0x24
 801143a:	f89a 3000 	ldrb.w	r3, [sl]
 801143e:	2b00      	cmp	r3, #0
 8011440:	f000 809f 	beq.w	8011582 <_svfiprintf_r+0x1c6>
 8011444:	2300      	movs	r3, #0
 8011446:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801144a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801144e:	f10a 0a01 	add.w	sl, sl, #1
 8011452:	9304      	str	r3, [sp, #16]
 8011454:	9307      	str	r3, [sp, #28]
 8011456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801145a:	931a      	str	r3, [sp, #104]	@ 0x68
 801145c:	4654      	mov	r4, sl
 801145e:	2205      	movs	r2, #5
 8011460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011464:	484e      	ldr	r0, [pc, #312]	@ (80115a0 <_svfiprintf_r+0x1e4>)
 8011466:	f7ee fecb 	bl	8000200 <memchr>
 801146a:	9a04      	ldr	r2, [sp, #16]
 801146c:	b9d8      	cbnz	r0, 80114a6 <_svfiprintf_r+0xea>
 801146e:	06d0      	lsls	r0, r2, #27
 8011470:	bf44      	itt	mi
 8011472:	2320      	movmi	r3, #32
 8011474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011478:	0711      	lsls	r1, r2, #28
 801147a:	bf44      	itt	mi
 801147c:	232b      	movmi	r3, #43	@ 0x2b
 801147e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011482:	f89a 3000 	ldrb.w	r3, [sl]
 8011486:	2b2a      	cmp	r3, #42	@ 0x2a
 8011488:	d015      	beq.n	80114b6 <_svfiprintf_r+0xfa>
 801148a:	9a07      	ldr	r2, [sp, #28]
 801148c:	4654      	mov	r4, sl
 801148e:	2000      	movs	r0, #0
 8011490:	f04f 0c0a 	mov.w	ip, #10
 8011494:	4621      	mov	r1, r4
 8011496:	f811 3b01 	ldrb.w	r3, [r1], #1
 801149a:	3b30      	subs	r3, #48	@ 0x30
 801149c:	2b09      	cmp	r3, #9
 801149e:	d94b      	bls.n	8011538 <_svfiprintf_r+0x17c>
 80114a0:	b1b0      	cbz	r0, 80114d0 <_svfiprintf_r+0x114>
 80114a2:	9207      	str	r2, [sp, #28]
 80114a4:	e014      	b.n	80114d0 <_svfiprintf_r+0x114>
 80114a6:	eba0 0308 	sub.w	r3, r0, r8
 80114aa:	fa09 f303 	lsl.w	r3, r9, r3
 80114ae:	4313      	orrs	r3, r2
 80114b0:	9304      	str	r3, [sp, #16]
 80114b2:	46a2      	mov	sl, r4
 80114b4:	e7d2      	b.n	801145c <_svfiprintf_r+0xa0>
 80114b6:	9b03      	ldr	r3, [sp, #12]
 80114b8:	1d19      	adds	r1, r3, #4
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	9103      	str	r1, [sp, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	bfbb      	ittet	lt
 80114c2:	425b      	neglt	r3, r3
 80114c4:	f042 0202 	orrlt.w	r2, r2, #2
 80114c8:	9307      	strge	r3, [sp, #28]
 80114ca:	9307      	strlt	r3, [sp, #28]
 80114cc:	bfb8      	it	lt
 80114ce:	9204      	strlt	r2, [sp, #16]
 80114d0:	7823      	ldrb	r3, [r4, #0]
 80114d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80114d4:	d10a      	bne.n	80114ec <_svfiprintf_r+0x130>
 80114d6:	7863      	ldrb	r3, [r4, #1]
 80114d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80114da:	d132      	bne.n	8011542 <_svfiprintf_r+0x186>
 80114dc:	9b03      	ldr	r3, [sp, #12]
 80114de:	1d1a      	adds	r2, r3, #4
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	9203      	str	r2, [sp, #12]
 80114e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114e8:	3402      	adds	r4, #2
 80114ea:	9305      	str	r3, [sp, #20]
 80114ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80115b0 <_svfiprintf_r+0x1f4>
 80114f0:	7821      	ldrb	r1, [r4, #0]
 80114f2:	2203      	movs	r2, #3
 80114f4:	4650      	mov	r0, sl
 80114f6:	f7ee fe83 	bl	8000200 <memchr>
 80114fa:	b138      	cbz	r0, 801150c <_svfiprintf_r+0x150>
 80114fc:	9b04      	ldr	r3, [sp, #16]
 80114fe:	eba0 000a 	sub.w	r0, r0, sl
 8011502:	2240      	movs	r2, #64	@ 0x40
 8011504:	4082      	lsls	r2, r0
 8011506:	4313      	orrs	r3, r2
 8011508:	3401      	adds	r4, #1
 801150a:	9304      	str	r3, [sp, #16]
 801150c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011510:	4824      	ldr	r0, [pc, #144]	@ (80115a4 <_svfiprintf_r+0x1e8>)
 8011512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011516:	2206      	movs	r2, #6
 8011518:	f7ee fe72 	bl	8000200 <memchr>
 801151c:	2800      	cmp	r0, #0
 801151e:	d036      	beq.n	801158e <_svfiprintf_r+0x1d2>
 8011520:	4b21      	ldr	r3, [pc, #132]	@ (80115a8 <_svfiprintf_r+0x1ec>)
 8011522:	bb1b      	cbnz	r3, 801156c <_svfiprintf_r+0x1b0>
 8011524:	9b03      	ldr	r3, [sp, #12]
 8011526:	3307      	adds	r3, #7
 8011528:	f023 0307 	bic.w	r3, r3, #7
 801152c:	3308      	adds	r3, #8
 801152e:	9303      	str	r3, [sp, #12]
 8011530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011532:	4433      	add	r3, r6
 8011534:	9309      	str	r3, [sp, #36]	@ 0x24
 8011536:	e76a      	b.n	801140e <_svfiprintf_r+0x52>
 8011538:	fb0c 3202 	mla	r2, ip, r2, r3
 801153c:	460c      	mov	r4, r1
 801153e:	2001      	movs	r0, #1
 8011540:	e7a8      	b.n	8011494 <_svfiprintf_r+0xd8>
 8011542:	2300      	movs	r3, #0
 8011544:	3401      	adds	r4, #1
 8011546:	9305      	str	r3, [sp, #20]
 8011548:	4619      	mov	r1, r3
 801154a:	f04f 0c0a 	mov.w	ip, #10
 801154e:	4620      	mov	r0, r4
 8011550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011554:	3a30      	subs	r2, #48	@ 0x30
 8011556:	2a09      	cmp	r2, #9
 8011558:	d903      	bls.n	8011562 <_svfiprintf_r+0x1a6>
 801155a:	2b00      	cmp	r3, #0
 801155c:	d0c6      	beq.n	80114ec <_svfiprintf_r+0x130>
 801155e:	9105      	str	r1, [sp, #20]
 8011560:	e7c4      	b.n	80114ec <_svfiprintf_r+0x130>
 8011562:	fb0c 2101 	mla	r1, ip, r1, r2
 8011566:	4604      	mov	r4, r0
 8011568:	2301      	movs	r3, #1
 801156a:	e7f0      	b.n	801154e <_svfiprintf_r+0x192>
 801156c:	ab03      	add	r3, sp, #12
 801156e:	9300      	str	r3, [sp, #0]
 8011570:	462a      	mov	r2, r5
 8011572:	4b0e      	ldr	r3, [pc, #56]	@ (80115ac <_svfiprintf_r+0x1f0>)
 8011574:	a904      	add	r1, sp, #16
 8011576:	4638      	mov	r0, r7
 8011578:	f3af 8000 	nop.w
 801157c:	1c42      	adds	r2, r0, #1
 801157e:	4606      	mov	r6, r0
 8011580:	d1d6      	bne.n	8011530 <_svfiprintf_r+0x174>
 8011582:	89ab      	ldrh	r3, [r5, #12]
 8011584:	065b      	lsls	r3, r3, #25
 8011586:	f53f af2d 	bmi.w	80113e4 <_svfiprintf_r+0x28>
 801158a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801158c:	e72c      	b.n	80113e8 <_svfiprintf_r+0x2c>
 801158e:	ab03      	add	r3, sp, #12
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	462a      	mov	r2, r5
 8011594:	4b05      	ldr	r3, [pc, #20]	@ (80115ac <_svfiprintf_r+0x1f0>)
 8011596:	a904      	add	r1, sp, #16
 8011598:	4638      	mov	r0, r7
 801159a:	f000 fb87 	bl	8011cac <_printf_i>
 801159e:	e7ed      	b.n	801157c <_svfiprintf_r+0x1c0>
 80115a0:	08013c61 	.word	0x08013c61
 80115a4:	08013c6b 	.word	0x08013c6b
 80115a8:	00000000 	.word	0x00000000
 80115ac:	08011305 	.word	0x08011305
 80115b0:	08013c67 	.word	0x08013c67

080115b4 <_sungetc_r>:
 80115b4:	b538      	push	{r3, r4, r5, lr}
 80115b6:	1c4b      	adds	r3, r1, #1
 80115b8:	4614      	mov	r4, r2
 80115ba:	d103      	bne.n	80115c4 <_sungetc_r+0x10>
 80115bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80115c0:	4628      	mov	r0, r5
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	8993      	ldrh	r3, [r2, #12]
 80115c6:	f023 0320 	bic.w	r3, r3, #32
 80115ca:	8193      	strh	r3, [r2, #12]
 80115cc:	6853      	ldr	r3, [r2, #4]
 80115ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80115d0:	b2cd      	uxtb	r5, r1
 80115d2:	b18a      	cbz	r2, 80115f8 <_sungetc_r+0x44>
 80115d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80115d6:	429a      	cmp	r2, r3
 80115d8:	dd08      	ble.n	80115ec <_sungetc_r+0x38>
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	1e5a      	subs	r2, r3, #1
 80115de:	6022      	str	r2, [r4, #0]
 80115e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80115e4:	6863      	ldr	r3, [r4, #4]
 80115e6:	3301      	adds	r3, #1
 80115e8:	6063      	str	r3, [r4, #4]
 80115ea:	e7e9      	b.n	80115c0 <_sungetc_r+0xc>
 80115ec:	4621      	mov	r1, r4
 80115ee:	f000 ff12 	bl	8012416 <__submore>
 80115f2:	2800      	cmp	r0, #0
 80115f4:	d0f1      	beq.n	80115da <_sungetc_r+0x26>
 80115f6:	e7e1      	b.n	80115bc <_sungetc_r+0x8>
 80115f8:	6921      	ldr	r1, [r4, #16]
 80115fa:	6822      	ldr	r2, [r4, #0]
 80115fc:	b141      	cbz	r1, 8011610 <_sungetc_r+0x5c>
 80115fe:	4291      	cmp	r1, r2
 8011600:	d206      	bcs.n	8011610 <_sungetc_r+0x5c>
 8011602:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011606:	42a9      	cmp	r1, r5
 8011608:	d102      	bne.n	8011610 <_sungetc_r+0x5c>
 801160a:	3a01      	subs	r2, #1
 801160c:	6022      	str	r2, [r4, #0]
 801160e:	e7ea      	b.n	80115e6 <_sungetc_r+0x32>
 8011610:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011618:	6363      	str	r3, [r4, #52]	@ 0x34
 801161a:	2303      	movs	r3, #3
 801161c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801161e:	4623      	mov	r3, r4
 8011620:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011624:	6023      	str	r3, [r4, #0]
 8011626:	2301      	movs	r3, #1
 8011628:	e7de      	b.n	80115e8 <_sungetc_r+0x34>

0801162a <__ssrefill_r>:
 801162a:	b510      	push	{r4, lr}
 801162c:	460c      	mov	r4, r1
 801162e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011630:	b169      	cbz	r1, 801164e <__ssrefill_r+0x24>
 8011632:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011636:	4299      	cmp	r1, r3
 8011638:	d001      	beq.n	801163e <__ssrefill_r+0x14>
 801163a:	f7fe ff95 	bl	8010568 <_free_r>
 801163e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011640:	6063      	str	r3, [r4, #4]
 8011642:	2000      	movs	r0, #0
 8011644:	6360      	str	r0, [r4, #52]	@ 0x34
 8011646:	b113      	cbz	r3, 801164e <__ssrefill_r+0x24>
 8011648:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801164a:	6023      	str	r3, [r4, #0]
 801164c:	bd10      	pop	{r4, pc}
 801164e:	6923      	ldr	r3, [r4, #16]
 8011650:	6023      	str	r3, [r4, #0]
 8011652:	2300      	movs	r3, #0
 8011654:	6063      	str	r3, [r4, #4]
 8011656:	89a3      	ldrh	r3, [r4, #12]
 8011658:	f043 0320 	orr.w	r3, r3, #32
 801165c:	81a3      	strh	r3, [r4, #12]
 801165e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011662:	e7f3      	b.n	801164c <__ssrefill_r+0x22>

08011664 <__ssvfiscanf_r>:
 8011664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801166e:	2100      	movs	r1, #0
 8011670:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011674:	49a5      	ldr	r1, [pc, #660]	@ (801190c <__ssvfiscanf_r+0x2a8>)
 8011676:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011678:	f10d 0804 	add.w	r8, sp, #4
 801167c:	49a4      	ldr	r1, [pc, #656]	@ (8011910 <__ssvfiscanf_r+0x2ac>)
 801167e:	4fa5      	ldr	r7, [pc, #660]	@ (8011914 <__ssvfiscanf_r+0x2b0>)
 8011680:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011684:	4606      	mov	r6, r0
 8011686:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	7813      	ldrb	r3, [r2, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	f000 8158 	beq.w	8011942 <__ssvfiscanf_r+0x2de>
 8011692:	5cf9      	ldrb	r1, [r7, r3]
 8011694:	f011 0108 	ands.w	r1, r1, #8
 8011698:	f102 0501 	add.w	r5, r2, #1
 801169c:	d019      	beq.n	80116d2 <__ssvfiscanf_r+0x6e>
 801169e:	6863      	ldr	r3, [r4, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	dd0f      	ble.n	80116c4 <__ssvfiscanf_r+0x60>
 80116a4:	6823      	ldr	r3, [r4, #0]
 80116a6:	781a      	ldrb	r2, [r3, #0]
 80116a8:	5cba      	ldrb	r2, [r7, r2]
 80116aa:	0712      	lsls	r2, r2, #28
 80116ac:	d401      	bmi.n	80116b2 <__ssvfiscanf_r+0x4e>
 80116ae:	462a      	mov	r2, r5
 80116b0:	e7eb      	b.n	801168a <__ssvfiscanf_r+0x26>
 80116b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80116b4:	3201      	adds	r2, #1
 80116b6:	9245      	str	r2, [sp, #276]	@ 0x114
 80116b8:	6862      	ldr	r2, [r4, #4]
 80116ba:	3301      	adds	r3, #1
 80116bc:	3a01      	subs	r2, #1
 80116be:	6062      	str	r2, [r4, #4]
 80116c0:	6023      	str	r3, [r4, #0]
 80116c2:	e7ec      	b.n	801169e <__ssvfiscanf_r+0x3a>
 80116c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80116c6:	4621      	mov	r1, r4
 80116c8:	4630      	mov	r0, r6
 80116ca:	4798      	blx	r3
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d0e9      	beq.n	80116a4 <__ssvfiscanf_r+0x40>
 80116d0:	e7ed      	b.n	80116ae <__ssvfiscanf_r+0x4a>
 80116d2:	2b25      	cmp	r3, #37	@ 0x25
 80116d4:	d012      	beq.n	80116fc <__ssvfiscanf_r+0x98>
 80116d6:	4699      	mov	r9, r3
 80116d8:	6863      	ldr	r3, [r4, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f340 8093 	ble.w	8011806 <__ssvfiscanf_r+0x1a2>
 80116e0:	6822      	ldr	r2, [r4, #0]
 80116e2:	7813      	ldrb	r3, [r2, #0]
 80116e4:	454b      	cmp	r3, r9
 80116e6:	f040 812c 	bne.w	8011942 <__ssvfiscanf_r+0x2de>
 80116ea:	6863      	ldr	r3, [r4, #4]
 80116ec:	3b01      	subs	r3, #1
 80116ee:	6063      	str	r3, [r4, #4]
 80116f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80116f2:	3201      	adds	r2, #1
 80116f4:	3301      	adds	r3, #1
 80116f6:	6022      	str	r2, [r4, #0]
 80116f8:	9345      	str	r3, [sp, #276]	@ 0x114
 80116fa:	e7d8      	b.n	80116ae <__ssvfiscanf_r+0x4a>
 80116fc:	9141      	str	r1, [sp, #260]	@ 0x104
 80116fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011700:	7853      	ldrb	r3, [r2, #1]
 8011702:	2b2a      	cmp	r3, #42	@ 0x2a
 8011704:	bf02      	ittt	eq
 8011706:	2310      	moveq	r3, #16
 8011708:	1c95      	addeq	r5, r2, #2
 801170a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801170c:	220a      	movs	r2, #10
 801170e:	46a9      	mov	r9, r5
 8011710:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011714:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011718:	2b09      	cmp	r3, #9
 801171a:	d91e      	bls.n	801175a <__ssvfiscanf_r+0xf6>
 801171c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011918 <__ssvfiscanf_r+0x2b4>
 8011720:	2203      	movs	r2, #3
 8011722:	4650      	mov	r0, sl
 8011724:	f7ee fd6c 	bl	8000200 <memchr>
 8011728:	b138      	cbz	r0, 801173a <__ssvfiscanf_r+0xd6>
 801172a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801172c:	eba0 000a 	sub.w	r0, r0, sl
 8011730:	2301      	movs	r3, #1
 8011732:	4083      	lsls	r3, r0
 8011734:	4313      	orrs	r3, r2
 8011736:	9341      	str	r3, [sp, #260]	@ 0x104
 8011738:	464d      	mov	r5, r9
 801173a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801173e:	2b78      	cmp	r3, #120	@ 0x78
 8011740:	d806      	bhi.n	8011750 <__ssvfiscanf_r+0xec>
 8011742:	2b57      	cmp	r3, #87	@ 0x57
 8011744:	d810      	bhi.n	8011768 <__ssvfiscanf_r+0x104>
 8011746:	2b25      	cmp	r3, #37	@ 0x25
 8011748:	d0c5      	beq.n	80116d6 <__ssvfiscanf_r+0x72>
 801174a:	d857      	bhi.n	80117fc <__ssvfiscanf_r+0x198>
 801174c:	2b00      	cmp	r3, #0
 801174e:	d065      	beq.n	801181c <__ssvfiscanf_r+0x1b8>
 8011750:	2303      	movs	r3, #3
 8011752:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011754:	230a      	movs	r3, #10
 8011756:	9342      	str	r3, [sp, #264]	@ 0x108
 8011758:	e078      	b.n	801184c <__ssvfiscanf_r+0x1e8>
 801175a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801175c:	fb02 1103 	mla	r1, r2, r3, r1
 8011760:	3930      	subs	r1, #48	@ 0x30
 8011762:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011764:	464d      	mov	r5, r9
 8011766:	e7d2      	b.n	801170e <__ssvfiscanf_r+0xaa>
 8011768:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801176c:	2a20      	cmp	r2, #32
 801176e:	d8ef      	bhi.n	8011750 <__ssvfiscanf_r+0xec>
 8011770:	a101      	add	r1, pc, #4	@ (adr r1, 8011778 <__ssvfiscanf_r+0x114>)
 8011772:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011776:	bf00      	nop
 8011778:	0801182b 	.word	0x0801182b
 801177c:	08011751 	.word	0x08011751
 8011780:	08011751 	.word	0x08011751
 8011784:	08011885 	.word	0x08011885
 8011788:	08011751 	.word	0x08011751
 801178c:	08011751 	.word	0x08011751
 8011790:	08011751 	.word	0x08011751
 8011794:	08011751 	.word	0x08011751
 8011798:	08011751 	.word	0x08011751
 801179c:	08011751 	.word	0x08011751
 80117a0:	08011751 	.word	0x08011751
 80117a4:	0801189b 	.word	0x0801189b
 80117a8:	08011881 	.word	0x08011881
 80117ac:	08011803 	.word	0x08011803
 80117b0:	08011803 	.word	0x08011803
 80117b4:	08011803 	.word	0x08011803
 80117b8:	08011751 	.word	0x08011751
 80117bc:	0801183d 	.word	0x0801183d
 80117c0:	08011751 	.word	0x08011751
 80117c4:	08011751 	.word	0x08011751
 80117c8:	08011751 	.word	0x08011751
 80117cc:	08011751 	.word	0x08011751
 80117d0:	080118ab 	.word	0x080118ab
 80117d4:	08011845 	.word	0x08011845
 80117d8:	08011823 	.word	0x08011823
 80117dc:	08011751 	.word	0x08011751
 80117e0:	08011751 	.word	0x08011751
 80117e4:	080118a7 	.word	0x080118a7
 80117e8:	08011751 	.word	0x08011751
 80117ec:	08011881 	.word	0x08011881
 80117f0:	08011751 	.word	0x08011751
 80117f4:	08011751 	.word	0x08011751
 80117f8:	0801182b 	.word	0x0801182b
 80117fc:	3b45      	subs	r3, #69	@ 0x45
 80117fe:	2b02      	cmp	r3, #2
 8011800:	d8a6      	bhi.n	8011750 <__ssvfiscanf_r+0xec>
 8011802:	2305      	movs	r3, #5
 8011804:	e021      	b.n	801184a <__ssvfiscanf_r+0x1e6>
 8011806:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011808:	4621      	mov	r1, r4
 801180a:	4630      	mov	r0, r6
 801180c:	4798      	blx	r3
 801180e:	2800      	cmp	r0, #0
 8011810:	f43f af66 	beq.w	80116e0 <__ssvfiscanf_r+0x7c>
 8011814:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011816:	2800      	cmp	r0, #0
 8011818:	f040 808b 	bne.w	8011932 <__ssvfiscanf_r+0x2ce>
 801181c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011820:	e08b      	b.n	801193a <__ssvfiscanf_r+0x2d6>
 8011822:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011824:	f042 0220 	orr.w	r2, r2, #32
 8011828:	9241      	str	r2, [sp, #260]	@ 0x104
 801182a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801182c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011830:	9241      	str	r2, [sp, #260]	@ 0x104
 8011832:	2210      	movs	r2, #16
 8011834:	2b6e      	cmp	r3, #110	@ 0x6e
 8011836:	9242      	str	r2, [sp, #264]	@ 0x108
 8011838:	d902      	bls.n	8011840 <__ssvfiscanf_r+0x1dc>
 801183a:	e005      	b.n	8011848 <__ssvfiscanf_r+0x1e4>
 801183c:	2300      	movs	r3, #0
 801183e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011840:	2303      	movs	r3, #3
 8011842:	e002      	b.n	801184a <__ssvfiscanf_r+0x1e6>
 8011844:	2308      	movs	r3, #8
 8011846:	9342      	str	r3, [sp, #264]	@ 0x108
 8011848:	2304      	movs	r3, #4
 801184a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801184c:	6863      	ldr	r3, [r4, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	dd39      	ble.n	80118c6 <__ssvfiscanf_r+0x262>
 8011852:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011854:	0659      	lsls	r1, r3, #25
 8011856:	d404      	bmi.n	8011862 <__ssvfiscanf_r+0x1fe>
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	781a      	ldrb	r2, [r3, #0]
 801185c:	5cba      	ldrb	r2, [r7, r2]
 801185e:	0712      	lsls	r2, r2, #28
 8011860:	d438      	bmi.n	80118d4 <__ssvfiscanf_r+0x270>
 8011862:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011864:	2b02      	cmp	r3, #2
 8011866:	dc47      	bgt.n	80118f8 <__ssvfiscanf_r+0x294>
 8011868:	466b      	mov	r3, sp
 801186a:	4622      	mov	r2, r4
 801186c:	a941      	add	r1, sp, #260	@ 0x104
 801186e:	4630      	mov	r0, r6
 8011870:	f000 fb3c 	bl	8011eec <_scanf_chars>
 8011874:	2801      	cmp	r0, #1
 8011876:	d064      	beq.n	8011942 <__ssvfiscanf_r+0x2de>
 8011878:	2802      	cmp	r0, #2
 801187a:	f47f af18 	bne.w	80116ae <__ssvfiscanf_r+0x4a>
 801187e:	e7c9      	b.n	8011814 <__ssvfiscanf_r+0x1b0>
 8011880:	220a      	movs	r2, #10
 8011882:	e7d7      	b.n	8011834 <__ssvfiscanf_r+0x1d0>
 8011884:	4629      	mov	r1, r5
 8011886:	4640      	mov	r0, r8
 8011888:	f000 fd8c 	bl	80123a4 <__sccl>
 801188c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801188e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011892:	9341      	str	r3, [sp, #260]	@ 0x104
 8011894:	4605      	mov	r5, r0
 8011896:	2301      	movs	r3, #1
 8011898:	e7d7      	b.n	801184a <__ssvfiscanf_r+0x1e6>
 801189a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801189c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80118a2:	2300      	movs	r3, #0
 80118a4:	e7d1      	b.n	801184a <__ssvfiscanf_r+0x1e6>
 80118a6:	2302      	movs	r3, #2
 80118a8:	e7cf      	b.n	801184a <__ssvfiscanf_r+0x1e6>
 80118aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80118ac:	06c3      	lsls	r3, r0, #27
 80118ae:	f53f aefe 	bmi.w	80116ae <__ssvfiscanf_r+0x4a>
 80118b2:	9b00      	ldr	r3, [sp, #0]
 80118b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80118b6:	1d19      	adds	r1, r3, #4
 80118b8:	9100      	str	r1, [sp, #0]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	07c0      	lsls	r0, r0, #31
 80118be:	bf4c      	ite	mi
 80118c0:	801a      	strhmi	r2, [r3, #0]
 80118c2:	601a      	strpl	r2, [r3, #0]
 80118c4:	e6f3      	b.n	80116ae <__ssvfiscanf_r+0x4a>
 80118c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80118c8:	4621      	mov	r1, r4
 80118ca:	4630      	mov	r0, r6
 80118cc:	4798      	blx	r3
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d0bf      	beq.n	8011852 <__ssvfiscanf_r+0x1ee>
 80118d2:	e79f      	b.n	8011814 <__ssvfiscanf_r+0x1b0>
 80118d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80118d6:	3201      	adds	r2, #1
 80118d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80118da:	6862      	ldr	r2, [r4, #4]
 80118dc:	3a01      	subs	r2, #1
 80118de:	2a00      	cmp	r2, #0
 80118e0:	6062      	str	r2, [r4, #4]
 80118e2:	dd02      	ble.n	80118ea <__ssvfiscanf_r+0x286>
 80118e4:	3301      	adds	r3, #1
 80118e6:	6023      	str	r3, [r4, #0]
 80118e8:	e7b6      	b.n	8011858 <__ssvfiscanf_r+0x1f4>
 80118ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80118ec:	4621      	mov	r1, r4
 80118ee:	4630      	mov	r0, r6
 80118f0:	4798      	blx	r3
 80118f2:	2800      	cmp	r0, #0
 80118f4:	d0b0      	beq.n	8011858 <__ssvfiscanf_r+0x1f4>
 80118f6:	e78d      	b.n	8011814 <__ssvfiscanf_r+0x1b0>
 80118f8:	2b04      	cmp	r3, #4
 80118fa:	dc0f      	bgt.n	801191c <__ssvfiscanf_r+0x2b8>
 80118fc:	466b      	mov	r3, sp
 80118fe:	4622      	mov	r2, r4
 8011900:	a941      	add	r1, sp, #260	@ 0x104
 8011902:	4630      	mov	r0, r6
 8011904:	f000 fb4c 	bl	8011fa0 <_scanf_i>
 8011908:	e7b4      	b.n	8011874 <__ssvfiscanf_r+0x210>
 801190a:	bf00      	nop
 801190c:	080115b5 	.word	0x080115b5
 8011910:	0801162b 	.word	0x0801162b
 8011914:	08013b61 	.word	0x08013b61
 8011918:	08013c67 	.word	0x08013c67
 801191c:	4b0a      	ldr	r3, [pc, #40]	@ (8011948 <__ssvfiscanf_r+0x2e4>)
 801191e:	2b00      	cmp	r3, #0
 8011920:	f43f aec5 	beq.w	80116ae <__ssvfiscanf_r+0x4a>
 8011924:	466b      	mov	r3, sp
 8011926:	4622      	mov	r2, r4
 8011928:	a941      	add	r1, sp, #260	@ 0x104
 801192a:	4630      	mov	r0, r6
 801192c:	f7fe f900 	bl	800fb30 <_scanf_float>
 8011930:	e7a0      	b.n	8011874 <__ssvfiscanf_r+0x210>
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	065b      	lsls	r3, r3, #25
 8011936:	f53f af71 	bmi.w	801181c <__ssvfiscanf_r+0x1b8>
 801193a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801193e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011942:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011944:	e7f9      	b.n	801193a <__ssvfiscanf_r+0x2d6>
 8011946:	bf00      	nop
 8011948:	0800fb31 	.word	0x0800fb31

0801194c <__sfputc_r>:
 801194c:	6893      	ldr	r3, [r2, #8]
 801194e:	3b01      	subs	r3, #1
 8011950:	2b00      	cmp	r3, #0
 8011952:	b410      	push	{r4}
 8011954:	6093      	str	r3, [r2, #8]
 8011956:	da08      	bge.n	801196a <__sfputc_r+0x1e>
 8011958:	6994      	ldr	r4, [r2, #24]
 801195a:	42a3      	cmp	r3, r4
 801195c:	db01      	blt.n	8011962 <__sfputc_r+0x16>
 801195e:	290a      	cmp	r1, #10
 8011960:	d103      	bne.n	801196a <__sfputc_r+0x1e>
 8011962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011966:	f7fe bcb8 	b.w	80102da <__swbuf_r>
 801196a:	6813      	ldr	r3, [r2, #0]
 801196c:	1c58      	adds	r0, r3, #1
 801196e:	6010      	str	r0, [r2, #0]
 8011970:	7019      	strb	r1, [r3, #0]
 8011972:	4608      	mov	r0, r1
 8011974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011978:	4770      	bx	lr

0801197a <__sfputs_r>:
 801197a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801197c:	4606      	mov	r6, r0
 801197e:	460f      	mov	r7, r1
 8011980:	4614      	mov	r4, r2
 8011982:	18d5      	adds	r5, r2, r3
 8011984:	42ac      	cmp	r4, r5
 8011986:	d101      	bne.n	801198c <__sfputs_r+0x12>
 8011988:	2000      	movs	r0, #0
 801198a:	e007      	b.n	801199c <__sfputs_r+0x22>
 801198c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011990:	463a      	mov	r2, r7
 8011992:	4630      	mov	r0, r6
 8011994:	f7ff ffda 	bl	801194c <__sfputc_r>
 8011998:	1c43      	adds	r3, r0, #1
 801199a:	d1f3      	bne.n	8011984 <__sfputs_r+0xa>
 801199c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119a0 <_vfiprintf_r>:
 80119a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	460d      	mov	r5, r1
 80119a6:	b09d      	sub	sp, #116	@ 0x74
 80119a8:	4614      	mov	r4, r2
 80119aa:	4698      	mov	r8, r3
 80119ac:	4606      	mov	r6, r0
 80119ae:	b118      	cbz	r0, 80119b8 <_vfiprintf_r+0x18>
 80119b0:	6a03      	ldr	r3, [r0, #32]
 80119b2:	b90b      	cbnz	r3, 80119b8 <_vfiprintf_r+0x18>
 80119b4:	f7fe fb5c 	bl	8010070 <__sinit>
 80119b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119ba:	07d9      	lsls	r1, r3, #31
 80119bc:	d405      	bmi.n	80119ca <_vfiprintf_r+0x2a>
 80119be:	89ab      	ldrh	r3, [r5, #12]
 80119c0:	059a      	lsls	r2, r3, #22
 80119c2:	d402      	bmi.n	80119ca <_vfiprintf_r+0x2a>
 80119c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119c6:	f7fe fdb8 	bl	801053a <__retarget_lock_acquire_recursive>
 80119ca:	89ab      	ldrh	r3, [r5, #12]
 80119cc:	071b      	lsls	r3, r3, #28
 80119ce:	d501      	bpl.n	80119d4 <_vfiprintf_r+0x34>
 80119d0:	692b      	ldr	r3, [r5, #16]
 80119d2:	b99b      	cbnz	r3, 80119fc <_vfiprintf_r+0x5c>
 80119d4:	4629      	mov	r1, r5
 80119d6:	4630      	mov	r0, r6
 80119d8:	f7fe fcbe 	bl	8010358 <__swsetup_r>
 80119dc:	b170      	cbz	r0, 80119fc <_vfiprintf_r+0x5c>
 80119de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119e0:	07dc      	lsls	r4, r3, #31
 80119e2:	d504      	bpl.n	80119ee <_vfiprintf_r+0x4e>
 80119e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80119e8:	b01d      	add	sp, #116	@ 0x74
 80119ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ee:	89ab      	ldrh	r3, [r5, #12]
 80119f0:	0598      	lsls	r0, r3, #22
 80119f2:	d4f7      	bmi.n	80119e4 <_vfiprintf_r+0x44>
 80119f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119f6:	f7fe fda1 	bl	801053c <__retarget_lock_release_recursive>
 80119fa:	e7f3      	b.n	80119e4 <_vfiprintf_r+0x44>
 80119fc:	2300      	movs	r3, #0
 80119fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a00:	2320      	movs	r3, #32
 8011a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a0a:	2330      	movs	r3, #48	@ 0x30
 8011a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011bbc <_vfiprintf_r+0x21c>
 8011a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a14:	f04f 0901 	mov.w	r9, #1
 8011a18:	4623      	mov	r3, r4
 8011a1a:	469a      	mov	sl, r3
 8011a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a20:	b10a      	cbz	r2, 8011a26 <_vfiprintf_r+0x86>
 8011a22:	2a25      	cmp	r2, #37	@ 0x25
 8011a24:	d1f9      	bne.n	8011a1a <_vfiprintf_r+0x7a>
 8011a26:	ebba 0b04 	subs.w	fp, sl, r4
 8011a2a:	d00b      	beq.n	8011a44 <_vfiprintf_r+0xa4>
 8011a2c:	465b      	mov	r3, fp
 8011a2e:	4622      	mov	r2, r4
 8011a30:	4629      	mov	r1, r5
 8011a32:	4630      	mov	r0, r6
 8011a34:	f7ff ffa1 	bl	801197a <__sfputs_r>
 8011a38:	3001      	adds	r0, #1
 8011a3a:	f000 80a7 	beq.w	8011b8c <_vfiprintf_r+0x1ec>
 8011a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a40:	445a      	add	r2, fp
 8011a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a44:	f89a 3000 	ldrb.w	r3, [sl]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f000 809f 	beq.w	8011b8c <_vfiprintf_r+0x1ec>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a58:	f10a 0a01 	add.w	sl, sl, #1
 8011a5c:	9304      	str	r3, [sp, #16]
 8011a5e:	9307      	str	r3, [sp, #28]
 8011a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a66:	4654      	mov	r4, sl
 8011a68:	2205      	movs	r2, #5
 8011a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a6e:	4853      	ldr	r0, [pc, #332]	@ (8011bbc <_vfiprintf_r+0x21c>)
 8011a70:	f7ee fbc6 	bl	8000200 <memchr>
 8011a74:	9a04      	ldr	r2, [sp, #16]
 8011a76:	b9d8      	cbnz	r0, 8011ab0 <_vfiprintf_r+0x110>
 8011a78:	06d1      	lsls	r1, r2, #27
 8011a7a:	bf44      	itt	mi
 8011a7c:	2320      	movmi	r3, #32
 8011a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a82:	0713      	lsls	r3, r2, #28
 8011a84:	bf44      	itt	mi
 8011a86:	232b      	movmi	r3, #43	@ 0x2b
 8011a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a92:	d015      	beq.n	8011ac0 <_vfiprintf_r+0x120>
 8011a94:	9a07      	ldr	r2, [sp, #28]
 8011a96:	4654      	mov	r4, sl
 8011a98:	2000      	movs	r0, #0
 8011a9a:	f04f 0c0a 	mov.w	ip, #10
 8011a9e:	4621      	mov	r1, r4
 8011aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011aa4:	3b30      	subs	r3, #48	@ 0x30
 8011aa6:	2b09      	cmp	r3, #9
 8011aa8:	d94b      	bls.n	8011b42 <_vfiprintf_r+0x1a2>
 8011aaa:	b1b0      	cbz	r0, 8011ada <_vfiprintf_r+0x13a>
 8011aac:	9207      	str	r2, [sp, #28]
 8011aae:	e014      	b.n	8011ada <_vfiprintf_r+0x13a>
 8011ab0:	eba0 0308 	sub.w	r3, r0, r8
 8011ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	9304      	str	r3, [sp, #16]
 8011abc:	46a2      	mov	sl, r4
 8011abe:	e7d2      	b.n	8011a66 <_vfiprintf_r+0xc6>
 8011ac0:	9b03      	ldr	r3, [sp, #12]
 8011ac2:	1d19      	adds	r1, r3, #4
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	9103      	str	r1, [sp, #12]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	bfbb      	ittet	lt
 8011acc:	425b      	neglt	r3, r3
 8011ace:	f042 0202 	orrlt.w	r2, r2, #2
 8011ad2:	9307      	strge	r3, [sp, #28]
 8011ad4:	9307      	strlt	r3, [sp, #28]
 8011ad6:	bfb8      	it	lt
 8011ad8:	9204      	strlt	r2, [sp, #16]
 8011ada:	7823      	ldrb	r3, [r4, #0]
 8011adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ade:	d10a      	bne.n	8011af6 <_vfiprintf_r+0x156>
 8011ae0:	7863      	ldrb	r3, [r4, #1]
 8011ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ae4:	d132      	bne.n	8011b4c <_vfiprintf_r+0x1ac>
 8011ae6:	9b03      	ldr	r3, [sp, #12]
 8011ae8:	1d1a      	adds	r2, r3, #4
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	9203      	str	r2, [sp, #12]
 8011aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011af2:	3402      	adds	r4, #2
 8011af4:	9305      	str	r3, [sp, #20]
 8011af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011bcc <_vfiprintf_r+0x22c>
 8011afa:	7821      	ldrb	r1, [r4, #0]
 8011afc:	2203      	movs	r2, #3
 8011afe:	4650      	mov	r0, sl
 8011b00:	f7ee fb7e 	bl	8000200 <memchr>
 8011b04:	b138      	cbz	r0, 8011b16 <_vfiprintf_r+0x176>
 8011b06:	9b04      	ldr	r3, [sp, #16]
 8011b08:	eba0 000a 	sub.w	r0, r0, sl
 8011b0c:	2240      	movs	r2, #64	@ 0x40
 8011b0e:	4082      	lsls	r2, r0
 8011b10:	4313      	orrs	r3, r2
 8011b12:	3401      	adds	r4, #1
 8011b14:	9304      	str	r3, [sp, #16]
 8011b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b1a:	4829      	ldr	r0, [pc, #164]	@ (8011bc0 <_vfiprintf_r+0x220>)
 8011b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b20:	2206      	movs	r2, #6
 8011b22:	f7ee fb6d 	bl	8000200 <memchr>
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d03f      	beq.n	8011baa <_vfiprintf_r+0x20a>
 8011b2a:	4b26      	ldr	r3, [pc, #152]	@ (8011bc4 <_vfiprintf_r+0x224>)
 8011b2c:	bb1b      	cbnz	r3, 8011b76 <_vfiprintf_r+0x1d6>
 8011b2e:	9b03      	ldr	r3, [sp, #12]
 8011b30:	3307      	adds	r3, #7
 8011b32:	f023 0307 	bic.w	r3, r3, #7
 8011b36:	3308      	adds	r3, #8
 8011b38:	9303      	str	r3, [sp, #12]
 8011b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b3c:	443b      	add	r3, r7
 8011b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b40:	e76a      	b.n	8011a18 <_vfiprintf_r+0x78>
 8011b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b46:	460c      	mov	r4, r1
 8011b48:	2001      	movs	r0, #1
 8011b4a:	e7a8      	b.n	8011a9e <_vfiprintf_r+0xfe>
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	3401      	adds	r4, #1
 8011b50:	9305      	str	r3, [sp, #20]
 8011b52:	4619      	mov	r1, r3
 8011b54:	f04f 0c0a 	mov.w	ip, #10
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b5e:	3a30      	subs	r2, #48	@ 0x30
 8011b60:	2a09      	cmp	r2, #9
 8011b62:	d903      	bls.n	8011b6c <_vfiprintf_r+0x1cc>
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d0c6      	beq.n	8011af6 <_vfiprintf_r+0x156>
 8011b68:	9105      	str	r1, [sp, #20]
 8011b6a:	e7c4      	b.n	8011af6 <_vfiprintf_r+0x156>
 8011b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b70:	4604      	mov	r4, r0
 8011b72:	2301      	movs	r3, #1
 8011b74:	e7f0      	b.n	8011b58 <_vfiprintf_r+0x1b8>
 8011b76:	ab03      	add	r3, sp, #12
 8011b78:	9300      	str	r3, [sp, #0]
 8011b7a:	462a      	mov	r2, r5
 8011b7c:	4b12      	ldr	r3, [pc, #72]	@ (8011bc8 <_vfiprintf_r+0x228>)
 8011b7e:	a904      	add	r1, sp, #16
 8011b80:	4630      	mov	r0, r6
 8011b82:	f3af 8000 	nop.w
 8011b86:	4607      	mov	r7, r0
 8011b88:	1c78      	adds	r0, r7, #1
 8011b8a:	d1d6      	bne.n	8011b3a <_vfiprintf_r+0x19a>
 8011b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b8e:	07d9      	lsls	r1, r3, #31
 8011b90:	d405      	bmi.n	8011b9e <_vfiprintf_r+0x1fe>
 8011b92:	89ab      	ldrh	r3, [r5, #12]
 8011b94:	059a      	lsls	r2, r3, #22
 8011b96:	d402      	bmi.n	8011b9e <_vfiprintf_r+0x1fe>
 8011b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b9a:	f7fe fccf 	bl	801053c <__retarget_lock_release_recursive>
 8011b9e:	89ab      	ldrh	r3, [r5, #12]
 8011ba0:	065b      	lsls	r3, r3, #25
 8011ba2:	f53f af1f 	bmi.w	80119e4 <_vfiprintf_r+0x44>
 8011ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ba8:	e71e      	b.n	80119e8 <_vfiprintf_r+0x48>
 8011baa:	ab03      	add	r3, sp, #12
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	462a      	mov	r2, r5
 8011bb0:	4b05      	ldr	r3, [pc, #20]	@ (8011bc8 <_vfiprintf_r+0x228>)
 8011bb2:	a904      	add	r1, sp, #16
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	f000 f879 	bl	8011cac <_printf_i>
 8011bba:	e7e4      	b.n	8011b86 <_vfiprintf_r+0x1e6>
 8011bbc:	08013c61 	.word	0x08013c61
 8011bc0:	08013c6b 	.word	0x08013c6b
 8011bc4:	00000000 	.word	0x00000000
 8011bc8:	0801197b 	.word	0x0801197b
 8011bcc:	08013c67 	.word	0x08013c67

08011bd0 <_printf_common>:
 8011bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bd4:	4616      	mov	r6, r2
 8011bd6:	4698      	mov	r8, r3
 8011bd8:	688a      	ldr	r2, [r1, #8]
 8011bda:	690b      	ldr	r3, [r1, #16]
 8011bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011be0:	4293      	cmp	r3, r2
 8011be2:	bfb8      	it	lt
 8011be4:	4613      	movlt	r3, r2
 8011be6:	6033      	str	r3, [r6, #0]
 8011be8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011bec:	4607      	mov	r7, r0
 8011bee:	460c      	mov	r4, r1
 8011bf0:	b10a      	cbz	r2, 8011bf6 <_printf_common+0x26>
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	6033      	str	r3, [r6, #0]
 8011bf6:	6823      	ldr	r3, [r4, #0]
 8011bf8:	0699      	lsls	r1, r3, #26
 8011bfa:	bf42      	ittt	mi
 8011bfc:	6833      	ldrmi	r3, [r6, #0]
 8011bfe:	3302      	addmi	r3, #2
 8011c00:	6033      	strmi	r3, [r6, #0]
 8011c02:	6825      	ldr	r5, [r4, #0]
 8011c04:	f015 0506 	ands.w	r5, r5, #6
 8011c08:	d106      	bne.n	8011c18 <_printf_common+0x48>
 8011c0a:	f104 0a19 	add.w	sl, r4, #25
 8011c0e:	68e3      	ldr	r3, [r4, #12]
 8011c10:	6832      	ldr	r2, [r6, #0]
 8011c12:	1a9b      	subs	r3, r3, r2
 8011c14:	42ab      	cmp	r3, r5
 8011c16:	dc26      	bgt.n	8011c66 <_printf_common+0x96>
 8011c18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011c1c:	6822      	ldr	r2, [r4, #0]
 8011c1e:	3b00      	subs	r3, #0
 8011c20:	bf18      	it	ne
 8011c22:	2301      	movne	r3, #1
 8011c24:	0692      	lsls	r2, r2, #26
 8011c26:	d42b      	bmi.n	8011c80 <_printf_common+0xb0>
 8011c28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011c2c:	4641      	mov	r1, r8
 8011c2e:	4638      	mov	r0, r7
 8011c30:	47c8      	blx	r9
 8011c32:	3001      	adds	r0, #1
 8011c34:	d01e      	beq.n	8011c74 <_printf_common+0xa4>
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	6922      	ldr	r2, [r4, #16]
 8011c3a:	f003 0306 	and.w	r3, r3, #6
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	bf02      	ittt	eq
 8011c42:	68e5      	ldreq	r5, [r4, #12]
 8011c44:	6833      	ldreq	r3, [r6, #0]
 8011c46:	1aed      	subeq	r5, r5, r3
 8011c48:	68a3      	ldr	r3, [r4, #8]
 8011c4a:	bf0c      	ite	eq
 8011c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c50:	2500      	movne	r5, #0
 8011c52:	4293      	cmp	r3, r2
 8011c54:	bfc4      	itt	gt
 8011c56:	1a9b      	subgt	r3, r3, r2
 8011c58:	18ed      	addgt	r5, r5, r3
 8011c5a:	2600      	movs	r6, #0
 8011c5c:	341a      	adds	r4, #26
 8011c5e:	42b5      	cmp	r5, r6
 8011c60:	d11a      	bne.n	8011c98 <_printf_common+0xc8>
 8011c62:	2000      	movs	r0, #0
 8011c64:	e008      	b.n	8011c78 <_printf_common+0xa8>
 8011c66:	2301      	movs	r3, #1
 8011c68:	4652      	mov	r2, sl
 8011c6a:	4641      	mov	r1, r8
 8011c6c:	4638      	mov	r0, r7
 8011c6e:	47c8      	blx	r9
 8011c70:	3001      	adds	r0, #1
 8011c72:	d103      	bne.n	8011c7c <_printf_common+0xac>
 8011c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c7c:	3501      	adds	r5, #1
 8011c7e:	e7c6      	b.n	8011c0e <_printf_common+0x3e>
 8011c80:	18e1      	adds	r1, r4, r3
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	2030      	movs	r0, #48	@ 0x30
 8011c86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011c8a:	4422      	add	r2, r4
 8011c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011c90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011c94:	3302      	adds	r3, #2
 8011c96:	e7c7      	b.n	8011c28 <_printf_common+0x58>
 8011c98:	2301      	movs	r3, #1
 8011c9a:	4622      	mov	r2, r4
 8011c9c:	4641      	mov	r1, r8
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	47c8      	blx	r9
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d0e6      	beq.n	8011c74 <_printf_common+0xa4>
 8011ca6:	3601      	adds	r6, #1
 8011ca8:	e7d9      	b.n	8011c5e <_printf_common+0x8e>
	...

08011cac <_printf_i>:
 8011cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011cb0:	7e0f      	ldrb	r7, [r1, #24]
 8011cb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011cb4:	2f78      	cmp	r7, #120	@ 0x78
 8011cb6:	4691      	mov	r9, r2
 8011cb8:	4680      	mov	r8, r0
 8011cba:	460c      	mov	r4, r1
 8011cbc:	469a      	mov	sl, r3
 8011cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011cc2:	d807      	bhi.n	8011cd4 <_printf_i+0x28>
 8011cc4:	2f62      	cmp	r7, #98	@ 0x62
 8011cc6:	d80a      	bhi.n	8011cde <_printf_i+0x32>
 8011cc8:	2f00      	cmp	r7, #0
 8011cca:	f000 80d2 	beq.w	8011e72 <_printf_i+0x1c6>
 8011cce:	2f58      	cmp	r7, #88	@ 0x58
 8011cd0:	f000 80b9 	beq.w	8011e46 <_printf_i+0x19a>
 8011cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011cdc:	e03a      	b.n	8011d54 <_printf_i+0xa8>
 8011cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011ce2:	2b15      	cmp	r3, #21
 8011ce4:	d8f6      	bhi.n	8011cd4 <_printf_i+0x28>
 8011ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8011cec <_printf_i+0x40>)
 8011ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011cec:	08011d45 	.word	0x08011d45
 8011cf0:	08011d59 	.word	0x08011d59
 8011cf4:	08011cd5 	.word	0x08011cd5
 8011cf8:	08011cd5 	.word	0x08011cd5
 8011cfc:	08011cd5 	.word	0x08011cd5
 8011d00:	08011cd5 	.word	0x08011cd5
 8011d04:	08011d59 	.word	0x08011d59
 8011d08:	08011cd5 	.word	0x08011cd5
 8011d0c:	08011cd5 	.word	0x08011cd5
 8011d10:	08011cd5 	.word	0x08011cd5
 8011d14:	08011cd5 	.word	0x08011cd5
 8011d18:	08011e59 	.word	0x08011e59
 8011d1c:	08011d83 	.word	0x08011d83
 8011d20:	08011e13 	.word	0x08011e13
 8011d24:	08011cd5 	.word	0x08011cd5
 8011d28:	08011cd5 	.word	0x08011cd5
 8011d2c:	08011e7b 	.word	0x08011e7b
 8011d30:	08011cd5 	.word	0x08011cd5
 8011d34:	08011d83 	.word	0x08011d83
 8011d38:	08011cd5 	.word	0x08011cd5
 8011d3c:	08011cd5 	.word	0x08011cd5
 8011d40:	08011e1b 	.word	0x08011e1b
 8011d44:	6833      	ldr	r3, [r6, #0]
 8011d46:	1d1a      	adds	r2, r3, #4
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	6032      	str	r2, [r6, #0]
 8011d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011d54:	2301      	movs	r3, #1
 8011d56:	e09d      	b.n	8011e94 <_printf_i+0x1e8>
 8011d58:	6833      	ldr	r3, [r6, #0]
 8011d5a:	6820      	ldr	r0, [r4, #0]
 8011d5c:	1d19      	adds	r1, r3, #4
 8011d5e:	6031      	str	r1, [r6, #0]
 8011d60:	0606      	lsls	r6, r0, #24
 8011d62:	d501      	bpl.n	8011d68 <_printf_i+0xbc>
 8011d64:	681d      	ldr	r5, [r3, #0]
 8011d66:	e003      	b.n	8011d70 <_printf_i+0xc4>
 8011d68:	0645      	lsls	r5, r0, #25
 8011d6a:	d5fb      	bpl.n	8011d64 <_printf_i+0xb8>
 8011d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011d70:	2d00      	cmp	r5, #0
 8011d72:	da03      	bge.n	8011d7c <_printf_i+0xd0>
 8011d74:	232d      	movs	r3, #45	@ 0x2d
 8011d76:	426d      	negs	r5, r5
 8011d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d7c:	4859      	ldr	r0, [pc, #356]	@ (8011ee4 <_printf_i+0x238>)
 8011d7e:	230a      	movs	r3, #10
 8011d80:	e011      	b.n	8011da6 <_printf_i+0xfa>
 8011d82:	6821      	ldr	r1, [r4, #0]
 8011d84:	6833      	ldr	r3, [r6, #0]
 8011d86:	0608      	lsls	r0, r1, #24
 8011d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8011d8c:	d402      	bmi.n	8011d94 <_printf_i+0xe8>
 8011d8e:	0649      	lsls	r1, r1, #25
 8011d90:	bf48      	it	mi
 8011d92:	b2ad      	uxthmi	r5, r5
 8011d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8011d96:	4853      	ldr	r0, [pc, #332]	@ (8011ee4 <_printf_i+0x238>)
 8011d98:	6033      	str	r3, [r6, #0]
 8011d9a:	bf14      	ite	ne
 8011d9c:	230a      	movne	r3, #10
 8011d9e:	2308      	moveq	r3, #8
 8011da0:	2100      	movs	r1, #0
 8011da2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011da6:	6866      	ldr	r6, [r4, #4]
 8011da8:	60a6      	str	r6, [r4, #8]
 8011daa:	2e00      	cmp	r6, #0
 8011dac:	bfa2      	ittt	ge
 8011dae:	6821      	ldrge	r1, [r4, #0]
 8011db0:	f021 0104 	bicge.w	r1, r1, #4
 8011db4:	6021      	strge	r1, [r4, #0]
 8011db6:	b90d      	cbnz	r5, 8011dbc <_printf_i+0x110>
 8011db8:	2e00      	cmp	r6, #0
 8011dba:	d04b      	beq.n	8011e54 <_printf_i+0x1a8>
 8011dbc:	4616      	mov	r6, r2
 8011dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8011dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8011dc6:	5dc7      	ldrb	r7, [r0, r7]
 8011dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011dcc:	462f      	mov	r7, r5
 8011dce:	42bb      	cmp	r3, r7
 8011dd0:	460d      	mov	r5, r1
 8011dd2:	d9f4      	bls.n	8011dbe <_printf_i+0x112>
 8011dd4:	2b08      	cmp	r3, #8
 8011dd6:	d10b      	bne.n	8011df0 <_printf_i+0x144>
 8011dd8:	6823      	ldr	r3, [r4, #0]
 8011dda:	07df      	lsls	r7, r3, #31
 8011ddc:	d508      	bpl.n	8011df0 <_printf_i+0x144>
 8011dde:	6923      	ldr	r3, [r4, #16]
 8011de0:	6861      	ldr	r1, [r4, #4]
 8011de2:	4299      	cmp	r1, r3
 8011de4:	bfde      	ittt	le
 8011de6:	2330      	movle	r3, #48	@ 0x30
 8011de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011dec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011df0:	1b92      	subs	r2, r2, r6
 8011df2:	6122      	str	r2, [r4, #16]
 8011df4:	f8cd a000 	str.w	sl, [sp]
 8011df8:	464b      	mov	r3, r9
 8011dfa:	aa03      	add	r2, sp, #12
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	4640      	mov	r0, r8
 8011e00:	f7ff fee6 	bl	8011bd0 <_printf_common>
 8011e04:	3001      	adds	r0, #1
 8011e06:	d14a      	bne.n	8011e9e <_printf_i+0x1f2>
 8011e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e0c:	b004      	add	sp, #16
 8011e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e12:	6823      	ldr	r3, [r4, #0]
 8011e14:	f043 0320 	orr.w	r3, r3, #32
 8011e18:	6023      	str	r3, [r4, #0]
 8011e1a:	4833      	ldr	r0, [pc, #204]	@ (8011ee8 <_printf_i+0x23c>)
 8011e1c:	2778      	movs	r7, #120	@ 0x78
 8011e1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011e22:	6823      	ldr	r3, [r4, #0]
 8011e24:	6831      	ldr	r1, [r6, #0]
 8011e26:	061f      	lsls	r7, r3, #24
 8011e28:	f851 5b04 	ldr.w	r5, [r1], #4
 8011e2c:	d402      	bmi.n	8011e34 <_printf_i+0x188>
 8011e2e:	065f      	lsls	r7, r3, #25
 8011e30:	bf48      	it	mi
 8011e32:	b2ad      	uxthmi	r5, r5
 8011e34:	6031      	str	r1, [r6, #0]
 8011e36:	07d9      	lsls	r1, r3, #31
 8011e38:	bf44      	itt	mi
 8011e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8011e3e:	6023      	strmi	r3, [r4, #0]
 8011e40:	b11d      	cbz	r5, 8011e4a <_printf_i+0x19e>
 8011e42:	2310      	movs	r3, #16
 8011e44:	e7ac      	b.n	8011da0 <_printf_i+0xf4>
 8011e46:	4827      	ldr	r0, [pc, #156]	@ (8011ee4 <_printf_i+0x238>)
 8011e48:	e7e9      	b.n	8011e1e <_printf_i+0x172>
 8011e4a:	6823      	ldr	r3, [r4, #0]
 8011e4c:	f023 0320 	bic.w	r3, r3, #32
 8011e50:	6023      	str	r3, [r4, #0]
 8011e52:	e7f6      	b.n	8011e42 <_printf_i+0x196>
 8011e54:	4616      	mov	r6, r2
 8011e56:	e7bd      	b.n	8011dd4 <_printf_i+0x128>
 8011e58:	6833      	ldr	r3, [r6, #0]
 8011e5a:	6825      	ldr	r5, [r4, #0]
 8011e5c:	6961      	ldr	r1, [r4, #20]
 8011e5e:	1d18      	adds	r0, r3, #4
 8011e60:	6030      	str	r0, [r6, #0]
 8011e62:	062e      	lsls	r6, r5, #24
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	d501      	bpl.n	8011e6c <_printf_i+0x1c0>
 8011e68:	6019      	str	r1, [r3, #0]
 8011e6a:	e002      	b.n	8011e72 <_printf_i+0x1c6>
 8011e6c:	0668      	lsls	r0, r5, #25
 8011e6e:	d5fb      	bpl.n	8011e68 <_printf_i+0x1bc>
 8011e70:	8019      	strh	r1, [r3, #0]
 8011e72:	2300      	movs	r3, #0
 8011e74:	6123      	str	r3, [r4, #16]
 8011e76:	4616      	mov	r6, r2
 8011e78:	e7bc      	b.n	8011df4 <_printf_i+0x148>
 8011e7a:	6833      	ldr	r3, [r6, #0]
 8011e7c:	1d1a      	adds	r2, r3, #4
 8011e7e:	6032      	str	r2, [r6, #0]
 8011e80:	681e      	ldr	r6, [r3, #0]
 8011e82:	6862      	ldr	r2, [r4, #4]
 8011e84:	2100      	movs	r1, #0
 8011e86:	4630      	mov	r0, r6
 8011e88:	f7ee f9ba 	bl	8000200 <memchr>
 8011e8c:	b108      	cbz	r0, 8011e92 <_printf_i+0x1e6>
 8011e8e:	1b80      	subs	r0, r0, r6
 8011e90:	6060      	str	r0, [r4, #4]
 8011e92:	6863      	ldr	r3, [r4, #4]
 8011e94:	6123      	str	r3, [r4, #16]
 8011e96:	2300      	movs	r3, #0
 8011e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e9c:	e7aa      	b.n	8011df4 <_printf_i+0x148>
 8011e9e:	6923      	ldr	r3, [r4, #16]
 8011ea0:	4632      	mov	r2, r6
 8011ea2:	4649      	mov	r1, r9
 8011ea4:	4640      	mov	r0, r8
 8011ea6:	47d0      	blx	sl
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	d0ad      	beq.n	8011e08 <_printf_i+0x15c>
 8011eac:	6823      	ldr	r3, [r4, #0]
 8011eae:	079b      	lsls	r3, r3, #30
 8011eb0:	d413      	bmi.n	8011eda <_printf_i+0x22e>
 8011eb2:	68e0      	ldr	r0, [r4, #12]
 8011eb4:	9b03      	ldr	r3, [sp, #12]
 8011eb6:	4298      	cmp	r0, r3
 8011eb8:	bfb8      	it	lt
 8011eba:	4618      	movlt	r0, r3
 8011ebc:	e7a6      	b.n	8011e0c <_printf_i+0x160>
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	4632      	mov	r2, r6
 8011ec2:	4649      	mov	r1, r9
 8011ec4:	4640      	mov	r0, r8
 8011ec6:	47d0      	blx	sl
 8011ec8:	3001      	adds	r0, #1
 8011eca:	d09d      	beq.n	8011e08 <_printf_i+0x15c>
 8011ecc:	3501      	adds	r5, #1
 8011ece:	68e3      	ldr	r3, [r4, #12]
 8011ed0:	9903      	ldr	r1, [sp, #12]
 8011ed2:	1a5b      	subs	r3, r3, r1
 8011ed4:	42ab      	cmp	r3, r5
 8011ed6:	dcf2      	bgt.n	8011ebe <_printf_i+0x212>
 8011ed8:	e7eb      	b.n	8011eb2 <_printf_i+0x206>
 8011eda:	2500      	movs	r5, #0
 8011edc:	f104 0619 	add.w	r6, r4, #25
 8011ee0:	e7f5      	b.n	8011ece <_printf_i+0x222>
 8011ee2:	bf00      	nop
 8011ee4:	08013c72 	.word	0x08013c72
 8011ee8:	08013c83 	.word	0x08013c83

08011eec <_scanf_chars>:
 8011eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ef0:	4615      	mov	r5, r2
 8011ef2:	688a      	ldr	r2, [r1, #8]
 8011ef4:	4680      	mov	r8, r0
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	b932      	cbnz	r2, 8011f08 <_scanf_chars+0x1c>
 8011efa:	698a      	ldr	r2, [r1, #24]
 8011efc:	2a00      	cmp	r2, #0
 8011efe:	bf14      	ite	ne
 8011f00:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8011f04:	2201      	moveq	r2, #1
 8011f06:	608a      	str	r2, [r1, #8]
 8011f08:	6822      	ldr	r2, [r4, #0]
 8011f0a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011f9c <_scanf_chars+0xb0>
 8011f0e:	06d1      	lsls	r1, r2, #27
 8011f10:	bf5f      	itttt	pl
 8011f12:	681a      	ldrpl	r2, [r3, #0]
 8011f14:	1d11      	addpl	r1, r2, #4
 8011f16:	6019      	strpl	r1, [r3, #0]
 8011f18:	6816      	ldrpl	r6, [r2, #0]
 8011f1a:	2700      	movs	r7, #0
 8011f1c:	69a0      	ldr	r0, [r4, #24]
 8011f1e:	b188      	cbz	r0, 8011f44 <_scanf_chars+0x58>
 8011f20:	2801      	cmp	r0, #1
 8011f22:	d107      	bne.n	8011f34 <_scanf_chars+0x48>
 8011f24:	682b      	ldr	r3, [r5, #0]
 8011f26:	781a      	ldrb	r2, [r3, #0]
 8011f28:	6963      	ldr	r3, [r4, #20]
 8011f2a:	5c9b      	ldrb	r3, [r3, r2]
 8011f2c:	b953      	cbnz	r3, 8011f44 <_scanf_chars+0x58>
 8011f2e:	2f00      	cmp	r7, #0
 8011f30:	d031      	beq.n	8011f96 <_scanf_chars+0xaa>
 8011f32:	e022      	b.n	8011f7a <_scanf_chars+0x8e>
 8011f34:	2802      	cmp	r0, #2
 8011f36:	d120      	bne.n	8011f7a <_scanf_chars+0x8e>
 8011f38:	682b      	ldr	r3, [r5, #0]
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011f40:	071b      	lsls	r3, r3, #28
 8011f42:	d41a      	bmi.n	8011f7a <_scanf_chars+0x8e>
 8011f44:	6823      	ldr	r3, [r4, #0]
 8011f46:	06da      	lsls	r2, r3, #27
 8011f48:	bf5e      	ittt	pl
 8011f4a:	682b      	ldrpl	r3, [r5, #0]
 8011f4c:	781b      	ldrbpl	r3, [r3, #0]
 8011f4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011f52:	682a      	ldr	r2, [r5, #0]
 8011f54:	686b      	ldr	r3, [r5, #4]
 8011f56:	3201      	adds	r2, #1
 8011f58:	602a      	str	r2, [r5, #0]
 8011f5a:	68a2      	ldr	r2, [r4, #8]
 8011f5c:	3b01      	subs	r3, #1
 8011f5e:	3a01      	subs	r2, #1
 8011f60:	606b      	str	r3, [r5, #4]
 8011f62:	3701      	adds	r7, #1
 8011f64:	60a2      	str	r2, [r4, #8]
 8011f66:	b142      	cbz	r2, 8011f7a <_scanf_chars+0x8e>
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	dcd7      	bgt.n	8011f1c <_scanf_chars+0x30>
 8011f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011f70:	4629      	mov	r1, r5
 8011f72:	4640      	mov	r0, r8
 8011f74:	4798      	blx	r3
 8011f76:	2800      	cmp	r0, #0
 8011f78:	d0d0      	beq.n	8011f1c <_scanf_chars+0x30>
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	f013 0310 	ands.w	r3, r3, #16
 8011f80:	d105      	bne.n	8011f8e <_scanf_chars+0xa2>
 8011f82:	68e2      	ldr	r2, [r4, #12]
 8011f84:	3201      	adds	r2, #1
 8011f86:	60e2      	str	r2, [r4, #12]
 8011f88:	69a2      	ldr	r2, [r4, #24]
 8011f8a:	b102      	cbz	r2, 8011f8e <_scanf_chars+0xa2>
 8011f8c:	7033      	strb	r3, [r6, #0]
 8011f8e:	6923      	ldr	r3, [r4, #16]
 8011f90:	443b      	add	r3, r7
 8011f92:	6123      	str	r3, [r4, #16]
 8011f94:	2000      	movs	r0, #0
 8011f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f9a:	bf00      	nop
 8011f9c:	08013b61 	.word	0x08013b61

08011fa0 <_scanf_i>:
 8011fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	4698      	mov	r8, r3
 8011fa6:	4b74      	ldr	r3, [pc, #464]	@ (8012178 <_scanf_i+0x1d8>)
 8011fa8:	460c      	mov	r4, r1
 8011faa:	4682      	mov	sl, r0
 8011fac:	4616      	mov	r6, r2
 8011fae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011fb2:	b087      	sub	sp, #28
 8011fb4:	ab03      	add	r3, sp, #12
 8011fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011fba:	4b70      	ldr	r3, [pc, #448]	@ (801217c <_scanf_i+0x1dc>)
 8011fbc:	69a1      	ldr	r1, [r4, #24]
 8011fbe:	4a70      	ldr	r2, [pc, #448]	@ (8012180 <_scanf_i+0x1e0>)
 8011fc0:	2903      	cmp	r1, #3
 8011fc2:	bf08      	it	eq
 8011fc4:	461a      	moveq	r2, r3
 8011fc6:	68a3      	ldr	r3, [r4, #8]
 8011fc8:	9201      	str	r2, [sp, #4]
 8011fca:	1e5a      	subs	r2, r3, #1
 8011fcc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011fd0:	bf88      	it	hi
 8011fd2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011fd6:	4627      	mov	r7, r4
 8011fd8:	bf82      	ittt	hi
 8011fda:	eb03 0905 	addhi.w	r9, r3, r5
 8011fde:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011fe2:	60a3      	strhi	r3, [r4, #8]
 8011fe4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011fe8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011fec:	bf98      	it	ls
 8011fee:	f04f 0900 	movls.w	r9, #0
 8011ff2:	6023      	str	r3, [r4, #0]
 8011ff4:	463d      	mov	r5, r7
 8011ff6:	f04f 0b00 	mov.w	fp, #0
 8011ffa:	6831      	ldr	r1, [r6, #0]
 8011ffc:	ab03      	add	r3, sp, #12
 8011ffe:	7809      	ldrb	r1, [r1, #0]
 8012000:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012004:	2202      	movs	r2, #2
 8012006:	f7ee f8fb 	bl	8000200 <memchr>
 801200a:	b328      	cbz	r0, 8012058 <_scanf_i+0xb8>
 801200c:	f1bb 0f01 	cmp.w	fp, #1
 8012010:	d159      	bne.n	80120c6 <_scanf_i+0x126>
 8012012:	6862      	ldr	r2, [r4, #4]
 8012014:	b92a      	cbnz	r2, 8012022 <_scanf_i+0x82>
 8012016:	6822      	ldr	r2, [r4, #0]
 8012018:	2108      	movs	r1, #8
 801201a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801201e:	6061      	str	r1, [r4, #4]
 8012020:	6022      	str	r2, [r4, #0]
 8012022:	6822      	ldr	r2, [r4, #0]
 8012024:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012028:	6022      	str	r2, [r4, #0]
 801202a:	68a2      	ldr	r2, [r4, #8]
 801202c:	1e51      	subs	r1, r2, #1
 801202e:	60a1      	str	r1, [r4, #8]
 8012030:	b192      	cbz	r2, 8012058 <_scanf_i+0xb8>
 8012032:	6832      	ldr	r2, [r6, #0]
 8012034:	1c51      	adds	r1, r2, #1
 8012036:	6031      	str	r1, [r6, #0]
 8012038:	7812      	ldrb	r2, [r2, #0]
 801203a:	f805 2b01 	strb.w	r2, [r5], #1
 801203e:	6872      	ldr	r2, [r6, #4]
 8012040:	3a01      	subs	r2, #1
 8012042:	2a00      	cmp	r2, #0
 8012044:	6072      	str	r2, [r6, #4]
 8012046:	dc07      	bgt.n	8012058 <_scanf_i+0xb8>
 8012048:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801204c:	4631      	mov	r1, r6
 801204e:	4650      	mov	r0, sl
 8012050:	4790      	blx	r2
 8012052:	2800      	cmp	r0, #0
 8012054:	f040 8085 	bne.w	8012162 <_scanf_i+0x1c2>
 8012058:	f10b 0b01 	add.w	fp, fp, #1
 801205c:	f1bb 0f03 	cmp.w	fp, #3
 8012060:	d1cb      	bne.n	8011ffa <_scanf_i+0x5a>
 8012062:	6863      	ldr	r3, [r4, #4]
 8012064:	b90b      	cbnz	r3, 801206a <_scanf_i+0xca>
 8012066:	230a      	movs	r3, #10
 8012068:	6063      	str	r3, [r4, #4]
 801206a:	6863      	ldr	r3, [r4, #4]
 801206c:	4945      	ldr	r1, [pc, #276]	@ (8012184 <_scanf_i+0x1e4>)
 801206e:	6960      	ldr	r0, [r4, #20]
 8012070:	1ac9      	subs	r1, r1, r3
 8012072:	f000 f997 	bl	80123a4 <__sccl>
 8012076:	f04f 0b00 	mov.w	fp, #0
 801207a:	68a3      	ldr	r3, [r4, #8]
 801207c:	6822      	ldr	r2, [r4, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d03d      	beq.n	80120fe <_scanf_i+0x15e>
 8012082:	6831      	ldr	r1, [r6, #0]
 8012084:	6960      	ldr	r0, [r4, #20]
 8012086:	f891 c000 	ldrb.w	ip, [r1]
 801208a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801208e:	2800      	cmp	r0, #0
 8012090:	d035      	beq.n	80120fe <_scanf_i+0x15e>
 8012092:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012096:	d124      	bne.n	80120e2 <_scanf_i+0x142>
 8012098:	0510      	lsls	r0, r2, #20
 801209a:	d522      	bpl.n	80120e2 <_scanf_i+0x142>
 801209c:	f10b 0b01 	add.w	fp, fp, #1
 80120a0:	f1b9 0f00 	cmp.w	r9, #0
 80120a4:	d003      	beq.n	80120ae <_scanf_i+0x10e>
 80120a6:	3301      	adds	r3, #1
 80120a8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80120ac:	60a3      	str	r3, [r4, #8]
 80120ae:	6873      	ldr	r3, [r6, #4]
 80120b0:	3b01      	subs	r3, #1
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	6073      	str	r3, [r6, #4]
 80120b6:	dd1b      	ble.n	80120f0 <_scanf_i+0x150>
 80120b8:	6833      	ldr	r3, [r6, #0]
 80120ba:	3301      	adds	r3, #1
 80120bc:	6033      	str	r3, [r6, #0]
 80120be:	68a3      	ldr	r3, [r4, #8]
 80120c0:	3b01      	subs	r3, #1
 80120c2:	60a3      	str	r3, [r4, #8]
 80120c4:	e7d9      	b.n	801207a <_scanf_i+0xda>
 80120c6:	f1bb 0f02 	cmp.w	fp, #2
 80120ca:	d1ae      	bne.n	801202a <_scanf_i+0x8a>
 80120cc:	6822      	ldr	r2, [r4, #0]
 80120ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80120d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80120d6:	d1bf      	bne.n	8012058 <_scanf_i+0xb8>
 80120d8:	2110      	movs	r1, #16
 80120da:	6061      	str	r1, [r4, #4]
 80120dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80120e0:	e7a2      	b.n	8012028 <_scanf_i+0x88>
 80120e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80120e6:	6022      	str	r2, [r4, #0]
 80120e8:	780b      	ldrb	r3, [r1, #0]
 80120ea:	f805 3b01 	strb.w	r3, [r5], #1
 80120ee:	e7de      	b.n	80120ae <_scanf_i+0x10e>
 80120f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80120f4:	4631      	mov	r1, r6
 80120f6:	4650      	mov	r0, sl
 80120f8:	4798      	blx	r3
 80120fa:	2800      	cmp	r0, #0
 80120fc:	d0df      	beq.n	80120be <_scanf_i+0x11e>
 80120fe:	6823      	ldr	r3, [r4, #0]
 8012100:	05d9      	lsls	r1, r3, #23
 8012102:	d50d      	bpl.n	8012120 <_scanf_i+0x180>
 8012104:	42bd      	cmp	r5, r7
 8012106:	d909      	bls.n	801211c <_scanf_i+0x17c>
 8012108:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801210c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012110:	4632      	mov	r2, r6
 8012112:	4650      	mov	r0, sl
 8012114:	4798      	blx	r3
 8012116:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801211a:	464d      	mov	r5, r9
 801211c:	42bd      	cmp	r5, r7
 801211e:	d028      	beq.n	8012172 <_scanf_i+0x1d2>
 8012120:	6822      	ldr	r2, [r4, #0]
 8012122:	f012 0210 	ands.w	r2, r2, #16
 8012126:	d113      	bne.n	8012150 <_scanf_i+0x1b0>
 8012128:	702a      	strb	r2, [r5, #0]
 801212a:	6863      	ldr	r3, [r4, #4]
 801212c:	9e01      	ldr	r6, [sp, #4]
 801212e:	4639      	mov	r1, r7
 8012130:	4650      	mov	r0, sl
 8012132:	47b0      	blx	r6
 8012134:	f8d8 3000 	ldr.w	r3, [r8]
 8012138:	6821      	ldr	r1, [r4, #0]
 801213a:	1d1a      	adds	r2, r3, #4
 801213c:	f8c8 2000 	str.w	r2, [r8]
 8012140:	f011 0f20 	tst.w	r1, #32
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	d00f      	beq.n	8012168 <_scanf_i+0x1c8>
 8012148:	6018      	str	r0, [r3, #0]
 801214a:	68e3      	ldr	r3, [r4, #12]
 801214c:	3301      	adds	r3, #1
 801214e:	60e3      	str	r3, [r4, #12]
 8012150:	6923      	ldr	r3, [r4, #16]
 8012152:	1bed      	subs	r5, r5, r7
 8012154:	445d      	add	r5, fp
 8012156:	442b      	add	r3, r5
 8012158:	6123      	str	r3, [r4, #16]
 801215a:	2000      	movs	r0, #0
 801215c:	b007      	add	sp, #28
 801215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012162:	f04f 0b00 	mov.w	fp, #0
 8012166:	e7ca      	b.n	80120fe <_scanf_i+0x15e>
 8012168:	07ca      	lsls	r2, r1, #31
 801216a:	bf4c      	ite	mi
 801216c:	8018      	strhmi	r0, [r3, #0]
 801216e:	6018      	strpl	r0, [r3, #0]
 8012170:	e7eb      	b.n	801214a <_scanf_i+0x1aa>
 8012172:	2001      	movs	r0, #1
 8012174:	e7f2      	b.n	801215c <_scanf_i+0x1bc>
 8012176:	bf00      	nop
 8012178:	080139a4 	.word	0x080139a4
 801217c:	08011301 	.word	0x08011301
 8012180:	0801364d 	.word	0x0801364d
 8012184:	08013ca4 	.word	0x08013ca4

08012188 <__sflush_r>:
 8012188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012190:	0716      	lsls	r6, r2, #28
 8012192:	4605      	mov	r5, r0
 8012194:	460c      	mov	r4, r1
 8012196:	d454      	bmi.n	8012242 <__sflush_r+0xba>
 8012198:	684b      	ldr	r3, [r1, #4]
 801219a:	2b00      	cmp	r3, #0
 801219c:	dc02      	bgt.n	80121a4 <__sflush_r+0x1c>
 801219e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	dd48      	ble.n	8012236 <__sflush_r+0xae>
 80121a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121a6:	2e00      	cmp	r6, #0
 80121a8:	d045      	beq.n	8012236 <__sflush_r+0xae>
 80121aa:	2300      	movs	r3, #0
 80121ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80121b0:	682f      	ldr	r7, [r5, #0]
 80121b2:	6a21      	ldr	r1, [r4, #32]
 80121b4:	602b      	str	r3, [r5, #0]
 80121b6:	d030      	beq.n	801221a <__sflush_r+0x92>
 80121b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121ba:	89a3      	ldrh	r3, [r4, #12]
 80121bc:	0759      	lsls	r1, r3, #29
 80121be:	d505      	bpl.n	80121cc <__sflush_r+0x44>
 80121c0:	6863      	ldr	r3, [r4, #4]
 80121c2:	1ad2      	subs	r2, r2, r3
 80121c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121c6:	b10b      	cbz	r3, 80121cc <__sflush_r+0x44>
 80121c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80121ca:	1ad2      	subs	r2, r2, r3
 80121cc:	2300      	movs	r3, #0
 80121ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121d0:	6a21      	ldr	r1, [r4, #32]
 80121d2:	4628      	mov	r0, r5
 80121d4:	47b0      	blx	r6
 80121d6:	1c43      	adds	r3, r0, #1
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	d106      	bne.n	80121ea <__sflush_r+0x62>
 80121dc:	6829      	ldr	r1, [r5, #0]
 80121de:	291d      	cmp	r1, #29
 80121e0:	d82b      	bhi.n	801223a <__sflush_r+0xb2>
 80121e2:	4a2a      	ldr	r2, [pc, #168]	@ (801228c <__sflush_r+0x104>)
 80121e4:	410a      	asrs	r2, r1
 80121e6:	07d6      	lsls	r6, r2, #31
 80121e8:	d427      	bmi.n	801223a <__sflush_r+0xb2>
 80121ea:	2200      	movs	r2, #0
 80121ec:	6062      	str	r2, [r4, #4]
 80121ee:	04d9      	lsls	r1, r3, #19
 80121f0:	6922      	ldr	r2, [r4, #16]
 80121f2:	6022      	str	r2, [r4, #0]
 80121f4:	d504      	bpl.n	8012200 <__sflush_r+0x78>
 80121f6:	1c42      	adds	r2, r0, #1
 80121f8:	d101      	bne.n	80121fe <__sflush_r+0x76>
 80121fa:	682b      	ldr	r3, [r5, #0]
 80121fc:	b903      	cbnz	r3, 8012200 <__sflush_r+0x78>
 80121fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8012200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012202:	602f      	str	r7, [r5, #0]
 8012204:	b1b9      	cbz	r1, 8012236 <__sflush_r+0xae>
 8012206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801220a:	4299      	cmp	r1, r3
 801220c:	d002      	beq.n	8012214 <__sflush_r+0x8c>
 801220e:	4628      	mov	r0, r5
 8012210:	f7fe f9aa 	bl	8010568 <_free_r>
 8012214:	2300      	movs	r3, #0
 8012216:	6363      	str	r3, [r4, #52]	@ 0x34
 8012218:	e00d      	b.n	8012236 <__sflush_r+0xae>
 801221a:	2301      	movs	r3, #1
 801221c:	4628      	mov	r0, r5
 801221e:	47b0      	blx	r6
 8012220:	4602      	mov	r2, r0
 8012222:	1c50      	adds	r0, r2, #1
 8012224:	d1c9      	bne.n	80121ba <__sflush_r+0x32>
 8012226:	682b      	ldr	r3, [r5, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d0c6      	beq.n	80121ba <__sflush_r+0x32>
 801222c:	2b1d      	cmp	r3, #29
 801222e:	d001      	beq.n	8012234 <__sflush_r+0xac>
 8012230:	2b16      	cmp	r3, #22
 8012232:	d11e      	bne.n	8012272 <__sflush_r+0xea>
 8012234:	602f      	str	r7, [r5, #0]
 8012236:	2000      	movs	r0, #0
 8012238:	e022      	b.n	8012280 <__sflush_r+0xf8>
 801223a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801223e:	b21b      	sxth	r3, r3
 8012240:	e01b      	b.n	801227a <__sflush_r+0xf2>
 8012242:	690f      	ldr	r7, [r1, #16]
 8012244:	2f00      	cmp	r7, #0
 8012246:	d0f6      	beq.n	8012236 <__sflush_r+0xae>
 8012248:	0793      	lsls	r3, r2, #30
 801224a:	680e      	ldr	r6, [r1, #0]
 801224c:	bf08      	it	eq
 801224e:	694b      	ldreq	r3, [r1, #20]
 8012250:	600f      	str	r7, [r1, #0]
 8012252:	bf18      	it	ne
 8012254:	2300      	movne	r3, #0
 8012256:	eba6 0807 	sub.w	r8, r6, r7
 801225a:	608b      	str	r3, [r1, #8]
 801225c:	f1b8 0f00 	cmp.w	r8, #0
 8012260:	dde9      	ble.n	8012236 <__sflush_r+0xae>
 8012262:	6a21      	ldr	r1, [r4, #32]
 8012264:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012266:	4643      	mov	r3, r8
 8012268:	463a      	mov	r2, r7
 801226a:	4628      	mov	r0, r5
 801226c:	47b0      	blx	r6
 801226e:	2800      	cmp	r0, #0
 8012270:	dc08      	bgt.n	8012284 <__sflush_r+0xfc>
 8012272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801227a:	81a3      	strh	r3, [r4, #12]
 801227c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012284:	4407      	add	r7, r0
 8012286:	eba8 0800 	sub.w	r8, r8, r0
 801228a:	e7e7      	b.n	801225c <__sflush_r+0xd4>
 801228c:	dfbffffe 	.word	0xdfbffffe

08012290 <_fflush_r>:
 8012290:	b538      	push	{r3, r4, r5, lr}
 8012292:	690b      	ldr	r3, [r1, #16]
 8012294:	4605      	mov	r5, r0
 8012296:	460c      	mov	r4, r1
 8012298:	b913      	cbnz	r3, 80122a0 <_fflush_r+0x10>
 801229a:	2500      	movs	r5, #0
 801229c:	4628      	mov	r0, r5
 801229e:	bd38      	pop	{r3, r4, r5, pc}
 80122a0:	b118      	cbz	r0, 80122aa <_fflush_r+0x1a>
 80122a2:	6a03      	ldr	r3, [r0, #32]
 80122a4:	b90b      	cbnz	r3, 80122aa <_fflush_r+0x1a>
 80122a6:	f7fd fee3 	bl	8010070 <__sinit>
 80122aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d0f3      	beq.n	801229a <_fflush_r+0xa>
 80122b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122b4:	07d0      	lsls	r0, r2, #31
 80122b6:	d404      	bmi.n	80122c2 <_fflush_r+0x32>
 80122b8:	0599      	lsls	r1, r3, #22
 80122ba:	d402      	bmi.n	80122c2 <_fflush_r+0x32>
 80122bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122be:	f7fe f93c 	bl	801053a <__retarget_lock_acquire_recursive>
 80122c2:	4628      	mov	r0, r5
 80122c4:	4621      	mov	r1, r4
 80122c6:	f7ff ff5f 	bl	8012188 <__sflush_r>
 80122ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122cc:	07da      	lsls	r2, r3, #31
 80122ce:	4605      	mov	r5, r0
 80122d0:	d4e4      	bmi.n	801229c <_fflush_r+0xc>
 80122d2:	89a3      	ldrh	r3, [r4, #12]
 80122d4:	059b      	lsls	r3, r3, #22
 80122d6:	d4e1      	bmi.n	801229c <_fflush_r+0xc>
 80122d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122da:	f7fe f92f 	bl	801053c <__retarget_lock_release_recursive>
 80122de:	e7dd      	b.n	801229c <_fflush_r+0xc>

080122e0 <__swhatbuf_r>:
 80122e0:	b570      	push	{r4, r5, r6, lr}
 80122e2:	460c      	mov	r4, r1
 80122e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122e8:	2900      	cmp	r1, #0
 80122ea:	b096      	sub	sp, #88	@ 0x58
 80122ec:	4615      	mov	r5, r2
 80122ee:	461e      	mov	r6, r3
 80122f0:	da0d      	bge.n	801230e <__swhatbuf_r+0x2e>
 80122f2:	89a3      	ldrh	r3, [r4, #12]
 80122f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80122f8:	f04f 0100 	mov.w	r1, #0
 80122fc:	bf14      	ite	ne
 80122fe:	2340      	movne	r3, #64	@ 0x40
 8012300:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012304:	2000      	movs	r0, #0
 8012306:	6031      	str	r1, [r6, #0]
 8012308:	602b      	str	r3, [r5, #0]
 801230a:	b016      	add	sp, #88	@ 0x58
 801230c:	bd70      	pop	{r4, r5, r6, pc}
 801230e:	466a      	mov	r2, sp
 8012310:	f000 f8d6 	bl	80124c0 <_fstat_r>
 8012314:	2800      	cmp	r0, #0
 8012316:	dbec      	blt.n	80122f2 <__swhatbuf_r+0x12>
 8012318:	9901      	ldr	r1, [sp, #4]
 801231a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801231e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012322:	4259      	negs	r1, r3
 8012324:	4159      	adcs	r1, r3
 8012326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801232a:	e7eb      	b.n	8012304 <__swhatbuf_r+0x24>

0801232c <__smakebuf_r>:
 801232c:	898b      	ldrh	r3, [r1, #12]
 801232e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012330:	079d      	lsls	r5, r3, #30
 8012332:	4606      	mov	r6, r0
 8012334:	460c      	mov	r4, r1
 8012336:	d507      	bpl.n	8012348 <__smakebuf_r+0x1c>
 8012338:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801233c:	6023      	str	r3, [r4, #0]
 801233e:	6123      	str	r3, [r4, #16]
 8012340:	2301      	movs	r3, #1
 8012342:	6163      	str	r3, [r4, #20]
 8012344:	b003      	add	sp, #12
 8012346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012348:	ab01      	add	r3, sp, #4
 801234a:	466a      	mov	r2, sp
 801234c:	f7ff ffc8 	bl	80122e0 <__swhatbuf_r>
 8012350:	9f00      	ldr	r7, [sp, #0]
 8012352:	4605      	mov	r5, r0
 8012354:	4639      	mov	r1, r7
 8012356:	4630      	mov	r0, r6
 8012358:	f7fd fb5e 	bl	800fa18 <_malloc_r>
 801235c:	b948      	cbnz	r0, 8012372 <__smakebuf_r+0x46>
 801235e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012362:	059a      	lsls	r2, r3, #22
 8012364:	d4ee      	bmi.n	8012344 <__smakebuf_r+0x18>
 8012366:	f023 0303 	bic.w	r3, r3, #3
 801236a:	f043 0302 	orr.w	r3, r3, #2
 801236e:	81a3      	strh	r3, [r4, #12]
 8012370:	e7e2      	b.n	8012338 <__smakebuf_r+0xc>
 8012372:	89a3      	ldrh	r3, [r4, #12]
 8012374:	6020      	str	r0, [r4, #0]
 8012376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801237a:	81a3      	strh	r3, [r4, #12]
 801237c:	9b01      	ldr	r3, [sp, #4]
 801237e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012382:	b15b      	cbz	r3, 801239c <__smakebuf_r+0x70>
 8012384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012388:	4630      	mov	r0, r6
 801238a:	f000 f8ab 	bl	80124e4 <_isatty_r>
 801238e:	b128      	cbz	r0, 801239c <__smakebuf_r+0x70>
 8012390:	89a3      	ldrh	r3, [r4, #12]
 8012392:	f023 0303 	bic.w	r3, r3, #3
 8012396:	f043 0301 	orr.w	r3, r3, #1
 801239a:	81a3      	strh	r3, [r4, #12]
 801239c:	89a3      	ldrh	r3, [r4, #12]
 801239e:	431d      	orrs	r5, r3
 80123a0:	81a5      	strh	r5, [r4, #12]
 80123a2:	e7cf      	b.n	8012344 <__smakebuf_r+0x18>

080123a4 <__sccl>:
 80123a4:	b570      	push	{r4, r5, r6, lr}
 80123a6:	780b      	ldrb	r3, [r1, #0]
 80123a8:	4604      	mov	r4, r0
 80123aa:	2b5e      	cmp	r3, #94	@ 0x5e
 80123ac:	bf0b      	itete	eq
 80123ae:	784b      	ldrbeq	r3, [r1, #1]
 80123b0:	1c4a      	addne	r2, r1, #1
 80123b2:	1c8a      	addeq	r2, r1, #2
 80123b4:	2100      	movne	r1, #0
 80123b6:	bf08      	it	eq
 80123b8:	2101      	moveq	r1, #1
 80123ba:	3801      	subs	r0, #1
 80123bc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80123c0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80123c4:	42a8      	cmp	r0, r5
 80123c6:	d1fb      	bne.n	80123c0 <__sccl+0x1c>
 80123c8:	b90b      	cbnz	r3, 80123ce <__sccl+0x2a>
 80123ca:	1e50      	subs	r0, r2, #1
 80123cc:	bd70      	pop	{r4, r5, r6, pc}
 80123ce:	f081 0101 	eor.w	r1, r1, #1
 80123d2:	54e1      	strb	r1, [r4, r3]
 80123d4:	4610      	mov	r0, r2
 80123d6:	4602      	mov	r2, r0
 80123d8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80123dc:	2d2d      	cmp	r5, #45	@ 0x2d
 80123de:	d005      	beq.n	80123ec <__sccl+0x48>
 80123e0:	2d5d      	cmp	r5, #93	@ 0x5d
 80123e2:	d016      	beq.n	8012412 <__sccl+0x6e>
 80123e4:	2d00      	cmp	r5, #0
 80123e6:	d0f1      	beq.n	80123cc <__sccl+0x28>
 80123e8:	462b      	mov	r3, r5
 80123ea:	e7f2      	b.n	80123d2 <__sccl+0x2e>
 80123ec:	7846      	ldrb	r6, [r0, #1]
 80123ee:	2e5d      	cmp	r6, #93	@ 0x5d
 80123f0:	d0fa      	beq.n	80123e8 <__sccl+0x44>
 80123f2:	42b3      	cmp	r3, r6
 80123f4:	dcf8      	bgt.n	80123e8 <__sccl+0x44>
 80123f6:	3002      	adds	r0, #2
 80123f8:	461a      	mov	r2, r3
 80123fa:	3201      	adds	r2, #1
 80123fc:	4296      	cmp	r6, r2
 80123fe:	54a1      	strb	r1, [r4, r2]
 8012400:	dcfb      	bgt.n	80123fa <__sccl+0x56>
 8012402:	1af2      	subs	r2, r6, r3
 8012404:	3a01      	subs	r2, #1
 8012406:	1c5d      	adds	r5, r3, #1
 8012408:	42b3      	cmp	r3, r6
 801240a:	bfa8      	it	ge
 801240c:	2200      	movge	r2, #0
 801240e:	18ab      	adds	r3, r5, r2
 8012410:	e7e1      	b.n	80123d6 <__sccl+0x32>
 8012412:	4610      	mov	r0, r2
 8012414:	e7da      	b.n	80123cc <__sccl+0x28>

08012416 <__submore>:
 8012416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801241a:	460c      	mov	r4, r1
 801241c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801241e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012422:	4299      	cmp	r1, r3
 8012424:	d11d      	bne.n	8012462 <__submore+0x4c>
 8012426:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801242a:	f7fd faf5 	bl	800fa18 <_malloc_r>
 801242e:	b918      	cbnz	r0, 8012438 <__submore+0x22>
 8012430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801243c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801243e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012442:	6360      	str	r0, [r4, #52]	@ 0x34
 8012444:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012448:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801244c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012450:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012454:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012458:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801245c:	6020      	str	r0, [r4, #0]
 801245e:	2000      	movs	r0, #0
 8012460:	e7e8      	b.n	8012434 <__submore+0x1e>
 8012462:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012464:	0077      	lsls	r7, r6, #1
 8012466:	463a      	mov	r2, r7
 8012468:	f001 f854 	bl	8013514 <_realloc_r>
 801246c:	4605      	mov	r5, r0
 801246e:	2800      	cmp	r0, #0
 8012470:	d0de      	beq.n	8012430 <__submore+0x1a>
 8012472:	eb00 0806 	add.w	r8, r0, r6
 8012476:	4601      	mov	r1, r0
 8012478:	4632      	mov	r2, r6
 801247a:	4640      	mov	r0, r8
 801247c:	f7fe f85f 	bl	801053e <memcpy>
 8012480:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012484:	f8c4 8000 	str.w	r8, [r4]
 8012488:	e7e9      	b.n	801245e <__submore+0x48>

0801248a <memmove>:
 801248a:	4288      	cmp	r0, r1
 801248c:	b510      	push	{r4, lr}
 801248e:	eb01 0402 	add.w	r4, r1, r2
 8012492:	d902      	bls.n	801249a <memmove+0x10>
 8012494:	4284      	cmp	r4, r0
 8012496:	4623      	mov	r3, r4
 8012498:	d807      	bhi.n	80124aa <memmove+0x20>
 801249a:	1e43      	subs	r3, r0, #1
 801249c:	42a1      	cmp	r1, r4
 801249e:	d008      	beq.n	80124b2 <memmove+0x28>
 80124a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124a8:	e7f8      	b.n	801249c <memmove+0x12>
 80124aa:	4402      	add	r2, r0
 80124ac:	4601      	mov	r1, r0
 80124ae:	428a      	cmp	r2, r1
 80124b0:	d100      	bne.n	80124b4 <memmove+0x2a>
 80124b2:	bd10      	pop	{r4, pc}
 80124b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124bc:	e7f7      	b.n	80124ae <memmove+0x24>
	...

080124c0 <_fstat_r>:
 80124c0:	b538      	push	{r3, r4, r5, lr}
 80124c2:	4d07      	ldr	r5, [pc, #28]	@ (80124e0 <_fstat_r+0x20>)
 80124c4:	2300      	movs	r3, #0
 80124c6:	4604      	mov	r4, r0
 80124c8:	4608      	mov	r0, r1
 80124ca:	4611      	mov	r1, r2
 80124cc:	602b      	str	r3, [r5, #0]
 80124ce:	f7f2 f855 	bl	800457c <_fstat>
 80124d2:	1c43      	adds	r3, r0, #1
 80124d4:	d102      	bne.n	80124dc <_fstat_r+0x1c>
 80124d6:	682b      	ldr	r3, [r5, #0]
 80124d8:	b103      	cbz	r3, 80124dc <_fstat_r+0x1c>
 80124da:	6023      	str	r3, [r4, #0]
 80124dc:	bd38      	pop	{r3, r4, r5, pc}
 80124de:	bf00      	nop
 80124e0:	20003eb4 	.word	0x20003eb4

080124e4 <_isatty_r>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	4d06      	ldr	r5, [pc, #24]	@ (8012500 <_isatty_r+0x1c>)
 80124e8:	2300      	movs	r3, #0
 80124ea:	4604      	mov	r4, r0
 80124ec:	4608      	mov	r0, r1
 80124ee:	602b      	str	r3, [r5, #0]
 80124f0:	f7f2 f854 	bl	800459c <_isatty>
 80124f4:	1c43      	adds	r3, r0, #1
 80124f6:	d102      	bne.n	80124fe <_isatty_r+0x1a>
 80124f8:	682b      	ldr	r3, [r5, #0]
 80124fa:	b103      	cbz	r3, 80124fe <_isatty_r+0x1a>
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	bd38      	pop	{r3, r4, r5, pc}
 8012500:	20003eb4 	.word	0x20003eb4
 8012504:	00000000 	.word	0x00000000

08012508 <nan>:
 8012508:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012510 <nan+0x8>
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop
 8012510:	00000000 	.word	0x00000000
 8012514:	7ff80000 	.word	0x7ff80000

08012518 <rshift>:
 8012518:	6903      	ldr	r3, [r0, #16]
 801251a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801251e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012522:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012526:	f100 0414 	add.w	r4, r0, #20
 801252a:	dd45      	ble.n	80125b8 <rshift+0xa0>
 801252c:	f011 011f 	ands.w	r1, r1, #31
 8012530:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012534:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012538:	d10c      	bne.n	8012554 <rshift+0x3c>
 801253a:	f100 0710 	add.w	r7, r0, #16
 801253e:	4629      	mov	r1, r5
 8012540:	42b1      	cmp	r1, r6
 8012542:	d334      	bcc.n	80125ae <rshift+0x96>
 8012544:	1a9b      	subs	r3, r3, r2
 8012546:	009b      	lsls	r3, r3, #2
 8012548:	1eea      	subs	r2, r5, #3
 801254a:	4296      	cmp	r6, r2
 801254c:	bf38      	it	cc
 801254e:	2300      	movcc	r3, #0
 8012550:	4423      	add	r3, r4
 8012552:	e015      	b.n	8012580 <rshift+0x68>
 8012554:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012558:	f1c1 0820 	rsb	r8, r1, #32
 801255c:	40cf      	lsrs	r7, r1
 801255e:	f105 0e04 	add.w	lr, r5, #4
 8012562:	46a1      	mov	r9, r4
 8012564:	4576      	cmp	r6, lr
 8012566:	46f4      	mov	ip, lr
 8012568:	d815      	bhi.n	8012596 <rshift+0x7e>
 801256a:	1a9a      	subs	r2, r3, r2
 801256c:	0092      	lsls	r2, r2, #2
 801256e:	3a04      	subs	r2, #4
 8012570:	3501      	adds	r5, #1
 8012572:	42ae      	cmp	r6, r5
 8012574:	bf38      	it	cc
 8012576:	2200      	movcc	r2, #0
 8012578:	18a3      	adds	r3, r4, r2
 801257a:	50a7      	str	r7, [r4, r2]
 801257c:	b107      	cbz	r7, 8012580 <rshift+0x68>
 801257e:	3304      	adds	r3, #4
 8012580:	1b1a      	subs	r2, r3, r4
 8012582:	42a3      	cmp	r3, r4
 8012584:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012588:	bf08      	it	eq
 801258a:	2300      	moveq	r3, #0
 801258c:	6102      	str	r2, [r0, #16]
 801258e:	bf08      	it	eq
 8012590:	6143      	streq	r3, [r0, #20]
 8012592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012596:	f8dc c000 	ldr.w	ip, [ip]
 801259a:	fa0c fc08 	lsl.w	ip, ip, r8
 801259e:	ea4c 0707 	orr.w	r7, ip, r7
 80125a2:	f849 7b04 	str.w	r7, [r9], #4
 80125a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80125aa:	40cf      	lsrs	r7, r1
 80125ac:	e7da      	b.n	8012564 <rshift+0x4c>
 80125ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80125b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80125b6:	e7c3      	b.n	8012540 <rshift+0x28>
 80125b8:	4623      	mov	r3, r4
 80125ba:	e7e1      	b.n	8012580 <rshift+0x68>

080125bc <__hexdig_fun>:
 80125bc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80125c0:	2b09      	cmp	r3, #9
 80125c2:	d802      	bhi.n	80125ca <__hexdig_fun+0xe>
 80125c4:	3820      	subs	r0, #32
 80125c6:	b2c0      	uxtb	r0, r0
 80125c8:	4770      	bx	lr
 80125ca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80125ce:	2b05      	cmp	r3, #5
 80125d0:	d801      	bhi.n	80125d6 <__hexdig_fun+0x1a>
 80125d2:	3847      	subs	r0, #71	@ 0x47
 80125d4:	e7f7      	b.n	80125c6 <__hexdig_fun+0xa>
 80125d6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80125da:	2b05      	cmp	r3, #5
 80125dc:	d801      	bhi.n	80125e2 <__hexdig_fun+0x26>
 80125de:	3827      	subs	r0, #39	@ 0x27
 80125e0:	e7f1      	b.n	80125c6 <__hexdig_fun+0xa>
 80125e2:	2000      	movs	r0, #0
 80125e4:	4770      	bx	lr
	...

080125e8 <__gethex>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	b085      	sub	sp, #20
 80125ee:	468a      	mov	sl, r1
 80125f0:	9302      	str	r3, [sp, #8]
 80125f2:	680b      	ldr	r3, [r1, #0]
 80125f4:	9001      	str	r0, [sp, #4]
 80125f6:	4690      	mov	r8, r2
 80125f8:	1c9c      	adds	r4, r3, #2
 80125fa:	46a1      	mov	r9, r4
 80125fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012600:	2830      	cmp	r0, #48	@ 0x30
 8012602:	d0fa      	beq.n	80125fa <__gethex+0x12>
 8012604:	eba9 0303 	sub.w	r3, r9, r3
 8012608:	f1a3 0b02 	sub.w	fp, r3, #2
 801260c:	f7ff ffd6 	bl	80125bc <__hexdig_fun>
 8012610:	4605      	mov	r5, r0
 8012612:	2800      	cmp	r0, #0
 8012614:	d168      	bne.n	80126e8 <__gethex+0x100>
 8012616:	49a0      	ldr	r1, [pc, #640]	@ (8012898 <__gethex+0x2b0>)
 8012618:	2201      	movs	r2, #1
 801261a:	4648      	mov	r0, r9
 801261c:	f7fd fefa 	bl	8010414 <strncmp>
 8012620:	4607      	mov	r7, r0
 8012622:	2800      	cmp	r0, #0
 8012624:	d167      	bne.n	80126f6 <__gethex+0x10e>
 8012626:	f899 0001 	ldrb.w	r0, [r9, #1]
 801262a:	4626      	mov	r6, r4
 801262c:	f7ff ffc6 	bl	80125bc <__hexdig_fun>
 8012630:	2800      	cmp	r0, #0
 8012632:	d062      	beq.n	80126fa <__gethex+0x112>
 8012634:	4623      	mov	r3, r4
 8012636:	7818      	ldrb	r0, [r3, #0]
 8012638:	2830      	cmp	r0, #48	@ 0x30
 801263a:	4699      	mov	r9, r3
 801263c:	f103 0301 	add.w	r3, r3, #1
 8012640:	d0f9      	beq.n	8012636 <__gethex+0x4e>
 8012642:	f7ff ffbb 	bl	80125bc <__hexdig_fun>
 8012646:	fab0 f580 	clz	r5, r0
 801264a:	096d      	lsrs	r5, r5, #5
 801264c:	f04f 0b01 	mov.w	fp, #1
 8012650:	464a      	mov	r2, r9
 8012652:	4616      	mov	r6, r2
 8012654:	3201      	adds	r2, #1
 8012656:	7830      	ldrb	r0, [r6, #0]
 8012658:	f7ff ffb0 	bl	80125bc <__hexdig_fun>
 801265c:	2800      	cmp	r0, #0
 801265e:	d1f8      	bne.n	8012652 <__gethex+0x6a>
 8012660:	498d      	ldr	r1, [pc, #564]	@ (8012898 <__gethex+0x2b0>)
 8012662:	2201      	movs	r2, #1
 8012664:	4630      	mov	r0, r6
 8012666:	f7fd fed5 	bl	8010414 <strncmp>
 801266a:	2800      	cmp	r0, #0
 801266c:	d13f      	bne.n	80126ee <__gethex+0x106>
 801266e:	b944      	cbnz	r4, 8012682 <__gethex+0x9a>
 8012670:	1c74      	adds	r4, r6, #1
 8012672:	4622      	mov	r2, r4
 8012674:	4616      	mov	r6, r2
 8012676:	3201      	adds	r2, #1
 8012678:	7830      	ldrb	r0, [r6, #0]
 801267a:	f7ff ff9f 	bl	80125bc <__hexdig_fun>
 801267e:	2800      	cmp	r0, #0
 8012680:	d1f8      	bne.n	8012674 <__gethex+0x8c>
 8012682:	1ba4      	subs	r4, r4, r6
 8012684:	00a7      	lsls	r7, r4, #2
 8012686:	7833      	ldrb	r3, [r6, #0]
 8012688:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801268c:	2b50      	cmp	r3, #80	@ 0x50
 801268e:	d13e      	bne.n	801270e <__gethex+0x126>
 8012690:	7873      	ldrb	r3, [r6, #1]
 8012692:	2b2b      	cmp	r3, #43	@ 0x2b
 8012694:	d033      	beq.n	80126fe <__gethex+0x116>
 8012696:	2b2d      	cmp	r3, #45	@ 0x2d
 8012698:	d034      	beq.n	8012704 <__gethex+0x11c>
 801269a:	1c71      	adds	r1, r6, #1
 801269c:	2400      	movs	r4, #0
 801269e:	7808      	ldrb	r0, [r1, #0]
 80126a0:	f7ff ff8c 	bl	80125bc <__hexdig_fun>
 80126a4:	1e43      	subs	r3, r0, #1
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	2b18      	cmp	r3, #24
 80126aa:	d830      	bhi.n	801270e <__gethex+0x126>
 80126ac:	f1a0 0210 	sub.w	r2, r0, #16
 80126b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80126b4:	f7ff ff82 	bl	80125bc <__hexdig_fun>
 80126b8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80126bc:	fa5f fc8c 	uxtb.w	ip, ip
 80126c0:	f1bc 0f18 	cmp.w	ip, #24
 80126c4:	f04f 030a 	mov.w	r3, #10
 80126c8:	d91e      	bls.n	8012708 <__gethex+0x120>
 80126ca:	b104      	cbz	r4, 80126ce <__gethex+0xe6>
 80126cc:	4252      	negs	r2, r2
 80126ce:	4417      	add	r7, r2
 80126d0:	f8ca 1000 	str.w	r1, [sl]
 80126d4:	b1ed      	cbz	r5, 8012712 <__gethex+0x12a>
 80126d6:	f1bb 0f00 	cmp.w	fp, #0
 80126da:	bf0c      	ite	eq
 80126dc:	2506      	moveq	r5, #6
 80126de:	2500      	movne	r5, #0
 80126e0:	4628      	mov	r0, r5
 80126e2:	b005      	add	sp, #20
 80126e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e8:	2500      	movs	r5, #0
 80126ea:	462c      	mov	r4, r5
 80126ec:	e7b0      	b.n	8012650 <__gethex+0x68>
 80126ee:	2c00      	cmp	r4, #0
 80126f0:	d1c7      	bne.n	8012682 <__gethex+0x9a>
 80126f2:	4627      	mov	r7, r4
 80126f4:	e7c7      	b.n	8012686 <__gethex+0x9e>
 80126f6:	464e      	mov	r6, r9
 80126f8:	462f      	mov	r7, r5
 80126fa:	2501      	movs	r5, #1
 80126fc:	e7c3      	b.n	8012686 <__gethex+0x9e>
 80126fe:	2400      	movs	r4, #0
 8012700:	1cb1      	adds	r1, r6, #2
 8012702:	e7cc      	b.n	801269e <__gethex+0xb6>
 8012704:	2401      	movs	r4, #1
 8012706:	e7fb      	b.n	8012700 <__gethex+0x118>
 8012708:	fb03 0002 	mla	r0, r3, r2, r0
 801270c:	e7ce      	b.n	80126ac <__gethex+0xc4>
 801270e:	4631      	mov	r1, r6
 8012710:	e7de      	b.n	80126d0 <__gethex+0xe8>
 8012712:	eba6 0309 	sub.w	r3, r6, r9
 8012716:	3b01      	subs	r3, #1
 8012718:	4629      	mov	r1, r5
 801271a:	2b07      	cmp	r3, #7
 801271c:	dc0a      	bgt.n	8012734 <__gethex+0x14c>
 801271e:	9801      	ldr	r0, [sp, #4]
 8012720:	f000 fa46 	bl	8012bb0 <_Balloc>
 8012724:	4604      	mov	r4, r0
 8012726:	b940      	cbnz	r0, 801273a <__gethex+0x152>
 8012728:	4b5c      	ldr	r3, [pc, #368]	@ (801289c <__gethex+0x2b4>)
 801272a:	4602      	mov	r2, r0
 801272c:	21e4      	movs	r1, #228	@ 0xe4
 801272e:	485c      	ldr	r0, [pc, #368]	@ (80128a0 <__gethex+0x2b8>)
 8012730:	f000 ff9c 	bl	801366c <__assert_func>
 8012734:	3101      	adds	r1, #1
 8012736:	105b      	asrs	r3, r3, #1
 8012738:	e7ef      	b.n	801271a <__gethex+0x132>
 801273a:	f100 0a14 	add.w	sl, r0, #20
 801273e:	2300      	movs	r3, #0
 8012740:	4655      	mov	r5, sl
 8012742:	469b      	mov	fp, r3
 8012744:	45b1      	cmp	r9, r6
 8012746:	d337      	bcc.n	80127b8 <__gethex+0x1d0>
 8012748:	f845 bb04 	str.w	fp, [r5], #4
 801274c:	eba5 050a 	sub.w	r5, r5, sl
 8012750:	10ad      	asrs	r5, r5, #2
 8012752:	6125      	str	r5, [r4, #16]
 8012754:	4658      	mov	r0, fp
 8012756:	f000 fb1d 	bl	8012d94 <__hi0bits>
 801275a:	016d      	lsls	r5, r5, #5
 801275c:	f8d8 6000 	ldr.w	r6, [r8]
 8012760:	1a2d      	subs	r5, r5, r0
 8012762:	42b5      	cmp	r5, r6
 8012764:	dd54      	ble.n	8012810 <__gethex+0x228>
 8012766:	1bad      	subs	r5, r5, r6
 8012768:	4629      	mov	r1, r5
 801276a:	4620      	mov	r0, r4
 801276c:	f000 feb1 	bl	80134d2 <__any_on>
 8012770:	4681      	mov	r9, r0
 8012772:	b178      	cbz	r0, 8012794 <__gethex+0x1ac>
 8012774:	1e6b      	subs	r3, r5, #1
 8012776:	1159      	asrs	r1, r3, #5
 8012778:	f003 021f 	and.w	r2, r3, #31
 801277c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012780:	f04f 0901 	mov.w	r9, #1
 8012784:	fa09 f202 	lsl.w	r2, r9, r2
 8012788:	420a      	tst	r2, r1
 801278a:	d003      	beq.n	8012794 <__gethex+0x1ac>
 801278c:	454b      	cmp	r3, r9
 801278e:	dc36      	bgt.n	80127fe <__gethex+0x216>
 8012790:	f04f 0902 	mov.w	r9, #2
 8012794:	4629      	mov	r1, r5
 8012796:	4620      	mov	r0, r4
 8012798:	f7ff febe 	bl	8012518 <rshift>
 801279c:	442f      	add	r7, r5
 801279e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80127a2:	42bb      	cmp	r3, r7
 80127a4:	da42      	bge.n	801282c <__gethex+0x244>
 80127a6:	9801      	ldr	r0, [sp, #4]
 80127a8:	4621      	mov	r1, r4
 80127aa:	f000 fa41 	bl	8012c30 <_Bfree>
 80127ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127b0:	2300      	movs	r3, #0
 80127b2:	6013      	str	r3, [r2, #0]
 80127b4:	25a3      	movs	r5, #163	@ 0xa3
 80127b6:	e793      	b.n	80126e0 <__gethex+0xf8>
 80127b8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80127bc:	2a2e      	cmp	r2, #46	@ 0x2e
 80127be:	d012      	beq.n	80127e6 <__gethex+0x1fe>
 80127c0:	2b20      	cmp	r3, #32
 80127c2:	d104      	bne.n	80127ce <__gethex+0x1e6>
 80127c4:	f845 bb04 	str.w	fp, [r5], #4
 80127c8:	f04f 0b00 	mov.w	fp, #0
 80127cc:	465b      	mov	r3, fp
 80127ce:	7830      	ldrb	r0, [r6, #0]
 80127d0:	9303      	str	r3, [sp, #12]
 80127d2:	f7ff fef3 	bl	80125bc <__hexdig_fun>
 80127d6:	9b03      	ldr	r3, [sp, #12]
 80127d8:	f000 000f 	and.w	r0, r0, #15
 80127dc:	4098      	lsls	r0, r3
 80127de:	ea4b 0b00 	orr.w	fp, fp, r0
 80127e2:	3304      	adds	r3, #4
 80127e4:	e7ae      	b.n	8012744 <__gethex+0x15c>
 80127e6:	45b1      	cmp	r9, r6
 80127e8:	d8ea      	bhi.n	80127c0 <__gethex+0x1d8>
 80127ea:	492b      	ldr	r1, [pc, #172]	@ (8012898 <__gethex+0x2b0>)
 80127ec:	9303      	str	r3, [sp, #12]
 80127ee:	2201      	movs	r2, #1
 80127f0:	4630      	mov	r0, r6
 80127f2:	f7fd fe0f 	bl	8010414 <strncmp>
 80127f6:	9b03      	ldr	r3, [sp, #12]
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d1e1      	bne.n	80127c0 <__gethex+0x1d8>
 80127fc:	e7a2      	b.n	8012744 <__gethex+0x15c>
 80127fe:	1ea9      	subs	r1, r5, #2
 8012800:	4620      	mov	r0, r4
 8012802:	f000 fe66 	bl	80134d2 <__any_on>
 8012806:	2800      	cmp	r0, #0
 8012808:	d0c2      	beq.n	8012790 <__gethex+0x1a8>
 801280a:	f04f 0903 	mov.w	r9, #3
 801280e:	e7c1      	b.n	8012794 <__gethex+0x1ac>
 8012810:	da09      	bge.n	8012826 <__gethex+0x23e>
 8012812:	1b75      	subs	r5, r6, r5
 8012814:	4621      	mov	r1, r4
 8012816:	9801      	ldr	r0, [sp, #4]
 8012818:	462a      	mov	r2, r5
 801281a:	f000 fc21 	bl	8013060 <__lshift>
 801281e:	1b7f      	subs	r7, r7, r5
 8012820:	4604      	mov	r4, r0
 8012822:	f100 0a14 	add.w	sl, r0, #20
 8012826:	f04f 0900 	mov.w	r9, #0
 801282a:	e7b8      	b.n	801279e <__gethex+0x1b6>
 801282c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012830:	42bd      	cmp	r5, r7
 8012832:	dd6f      	ble.n	8012914 <__gethex+0x32c>
 8012834:	1bed      	subs	r5, r5, r7
 8012836:	42ae      	cmp	r6, r5
 8012838:	dc34      	bgt.n	80128a4 <__gethex+0x2bc>
 801283a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801283e:	2b02      	cmp	r3, #2
 8012840:	d022      	beq.n	8012888 <__gethex+0x2a0>
 8012842:	2b03      	cmp	r3, #3
 8012844:	d024      	beq.n	8012890 <__gethex+0x2a8>
 8012846:	2b01      	cmp	r3, #1
 8012848:	d115      	bne.n	8012876 <__gethex+0x28e>
 801284a:	42ae      	cmp	r6, r5
 801284c:	d113      	bne.n	8012876 <__gethex+0x28e>
 801284e:	2e01      	cmp	r6, #1
 8012850:	d10b      	bne.n	801286a <__gethex+0x282>
 8012852:	9a02      	ldr	r2, [sp, #8]
 8012854:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012858:	6013      	str	r3, [r2, #0]
 801285a:	2301      	movs	r3, #1
 801285c:	6123      	str	r3, [r4, #16]
 801285e:	f8ca 3000 	str.w	r3, [sl]
 8012862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012864:	2562      	movs	r5, #98	@ 0x62
 8012866:	601c      	str	r4, [r3, #0]
 8012868:	e73a      	b.n	80126e0 <__gethex+0xf8>
 801286a:	1e71      	subs	r1, r6, #1
 801286c:	4620      	mov	r0, r4
 801286e:	f000 fe30 	bl	80134d2 <__any_on>
 8012872:	2800      	cmp	r0, #0
 8012874:	d1ed      	bne.n	8012852 <__gethex+0x26a>
 8012876:	9801      	ldr	r0, [sp, #4]
 8012878:	4621      	mov	r1, r4
 801287a:	f000 f9d9 	bl	8012c30 <_Bfree>
 801287e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012880:	2300      	movs	r3, #0
 8012882:	6013      	str	r3, [r2, #0]
 8012884:	2550      	movs	r5, #80	@ 0x50
 8012886:	e72b      	b.n	80126e0 <__gethex+0xf8>
 8012888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801288a:	2b00      	cmp	r3, #0
 801288c:	d1f3      	bne.n	8012876 <__gethex+0x28e>
 801288e:	e7e0      	b.n	8012852 <__gethex+0x26a>
 8012890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012892:	2b00      	cmp	r3, #0
 8012894:	d1dd      	bne.n	8012852 <__gethex+0x26a>
 8012896:	e7ee      	b.n	8012876 <__gethex+0x28e>
 8012898:	08013afd 	.word	0x08013afd
 801289c:	08013cb7 	.word	0x08013cb7
 80128a0:	08013cc8 	.word	0x08013cc8
 80128a4:	1e6f      	subs	r7, r5, #1
 80128a6:	f1b9 0f00 	cmp.w	r9, #0
 80128aa:	d130      	bne.n	801290e <__gethex+0x326>
 80128ac:	b127      	cbz	r7, 80128b8 <__gethex+0x2d0>
 80128ae:	4639      	mov	r1, r7
 80128b0:	4620      	mov	r0, r4
 80128b2:	f000 fe0e 	bl	80134d2 <__any_on>
 80128b6:	4681      	mov	r9, r0
 80128b8:	117a      	asrs	r2, r7, #5
 80128ba:	2301      	movs	r3, #1
 80128bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80128c0:	f007 071f 	and.w	r7, r7, #31
 80128c4:	40bb      	lsls	r3, r7
 80128c6:	4213      	tst	r3, r2
 80128c8:	4629      	mov	r1, r5
 80128ca:	4620      	mov	r0, r4
 80128cc:	bf18      	it	ne
 80128ce:	f049 0902 	orrne.w	r9, r9, #2
 80128d2:	f7ff fe21 	bl	8012518 <rshift>
 80128d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80128da:	1b76      	subs	r6, r6, r5
 80128dc:	2502      	movs	r5, #2
 80128de:	f1b9 0f00 	cmp.w	r9, #0
 80128e2:	d047      	beq.n	8012974 <__gethex+0x38c>
 80128e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128e8:	2b02      	cmp	r3, #2
 80128ea:	d015      	beq.n	8012918 <__gethex+0x330>
 80128ec:	2b03      	cmp	r3, #3
 80128ee:	d017      	beq.n	8012920 <__gethex+0x338>
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d109      	bne.n	8012908 <__gethex+0x320>
 80128f4:	f019 0f02 	tst.w	r9, #2
 80128f8:	d006      	beq.n	8012908 <__gethex+0x320>
 80128fa:	f8da 3000 	ldr.w	r3, [sl]
 80128fe:	ea49 0903 	orr.w	r9, r9, r3
 8012902:	f019 0f01 	tst.w	r9, #1
 8012906:	d10e      	bne.n	8012926 <__gethex+0x33e>
 8012908:	f045 0510 	orr.w	r5, r5, #16
 801290c:	e032      	b.n	8012974 <__gethex+0x38c>
 801290e:	f04f 0901 	mov.w	r9, #1
 8012912:	e7d1      	b.n	80128b8 <__gethex+0x2d0>
 8012914:	2501      	movs	r5, #1
 8012916:	e7e2      	b.n	80128de <__gethex+0x2f6>
 8012918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801291a:	f1c3 0301 	rsb	r3, r3, #1
 801291e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012922:	2b00      	cmp	r3, #0
 8012924:	d0f0      	beq.n	8012908 <__gethex+0x320>
 8012926:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801292a:	f104 0314 	add.w	r3, r4, #20
 801292e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012932:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012936:	f04f 0c00 	mov.w	ip, #0
 801293a:	4618      	mov	r0, r3
 801293c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012940:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8012944:	d01b      	beq.n	801297e <__gethex+0x396>
 8012946:	3201      	adds	r2, #1
 8012948:	6002      	str	r2, [r0, #0]
 801294a:	2d02      	cmp	r5, #2
 801294c:	f104 0314 	add.w	r3, r4, #20
 8012950:	d13c      	bne.n	80129cc <__gethex+0x3e4>
 8012952:	f8d8 2000 	ldr.w	r2, [r8]
 8012956:	3a01      	subs	r2, #1
 8012958:	42b2      	cmp	r2, r6
 801295a:	d109      	bne.n	8012970 <__gethex+0x388>
 801295c:	1171      	asrs	r1, r6, #5
 801295e:	2201      	movs	r2, #1
 8012960:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012964:	f006 061f 	and.w	r6, r6, #31
 8012968:	fa02 f606 	lsl.w	r6, r2, r6
 801296c:	421e      	tst	r6, r3
 801296e:	d13a      	bne.n	80129e6 <__gethex+0x3fe>
 8012970:	f045 0520 	orr.w	r5, r5, #32
 8012974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012976:	601c      	str	r4, [r3, #0]
 8012978:	9b02      	ldr	r3, [sp, #8]
 801297a:	601f      	str	r7, [r3, #0]
 801297c:	e6b0      	b.n	80126e0 <__gethex+0xf8>
 801297e:	4299      	cmp	r1, r3
 8012980:	f843 cc04 	str.w	ip, [r3, #-4]
 8012984:	d8d9      	bhi.n	801293a <__gethex+0x352>
 8012986:	68a3      	ldr	r3, [r4, #8]
 8012988:	459b      	cmp	fp, r3
 801298a:	db17      	blt.n	80129bc <__gethex+0x3d4>
 801298c:	6861      	ldr	r1, [r4, #4]
 801298e:	9801      	ldr	r0, [sp, #4]
 8012990:	3101      	adds	r1, #1
 8012992:	f000 f90d 	bl	8012bb0 <_Balloc>
 8012996:	4681      	mov	r9, r0
 8012998:	b918      	cbnz	r0, 80129a2 <__gethex+0x3ba>
 801299a:	4b1a      	ldr	r3, [pc, #104]	@ (8012a04 <__gethex+0x41c>)
 801299c:	4602      	mov	r2, r0
 801299e:	2184      	movs	r1, #132	@ 0x84
 80129a0:	e6c5      	b.n	801272e <__gethex+0x146>
 80129a2:	6922      	ldr	r2, [r4, #16]
 80129a4:	3202      	adds	r2, #2
 80129a6:	f104 010c 	add.w	r1, r4, #12
 80129aa:	0092      	lsls	r2, r2, #2
 80129ac:	300c      	adds	r0, #12
 80129ae:	f7fd fdc6 	bl	801053e <memcpy>
 80129b2:	4621      	mov	r1, r4
 80129b4:	9801      	ldr	r0, [sp, #4]
 80129b6:	f000 f93b 	bl	8012c30 <_Bfree>
 80129ba:	464c      	mov	r4, r9
 80129bc:	6923      	ldr	r3, [r4, #16]
 80129be:	1c5a      	adds	r2, r3, #1
 80129c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129c4:	6122      	str	r2, [r4, #16]
 80129c6:	2201      	movs	r2, #1
 80129c8:	615a      	str	r2, [r3, #20]
 80129ca:	e7be      	b.n	801294a <__gethex+0x362>
 80129cc:	6922      	ldr	r2, [r4, #16]
 80129ce:	455a      	cmp	r2, fp
 80129d0:	dd0b      	ble.n	80129ea <__gethex+0x402>
 80129d2:	2101      	movs	r1, #1
 80129d4:	4620      	mov	r0, r4
 80129d6:	f7ff fd9f 	bl	8012518 <rshift>
 80129da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129de:	3701      	adds	r7, #1
 80129e0:	42bb      	cmp	r3, r7
 80129e2:	f6ff aee0 	blt.w	80127a6 <__gethex+0x1be>
 80129e6:	2501      	movs	r5, #1
 80129e8:	e7c2      	b.n	8012970 <__gethex+0x388>
 80129ea:	f016 061f 	ands.w	r6, r6, #31
 80129ee:	d0fa      	beq.n	80129e6 <__gethex+0x3fe>
 80129f0:	4453      	add	r3, sl
 80129f2:	f1c6 0620 	rsb	r6, r6, #32
 80129f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80129fa:	f000 f9cb 	bl	8012d94 <__hi0bits>
 80129fe:	42b0      	cmp	r0, r6
 8012a00:	dbe7      	blt.n	80129d2 <__gethex+0x3ea>
 8012a02:	e7f0      	b.n	80129e6 <__gethex+0x3fe>
 8012a04:	08013cb7 	.word	0x08013cb7

08012a08 <L_shift>:
 8012a08:	f1c2 0208 	rsb	r2, r2, #8
 8012a0c:	0092      	lsls	r2, r2, #2
 8012a0e:	b570      	push	{r4, r5, r6, lr}
 8012a10:	f1c2 0620 	rsb	r6, r2, #32
 8012a14:	6843      	ldr	r3, [r0, #4]
 8012a16:	6804      	ldr	r4, [r0, #0]
 8012a18:	fa03 f506 	lsl.w	r5, r3, r6
 8012a1c:	432c      	orrs	r4, r5
 8012a1e:	40d3      	lsrs	r3, r2
 8012a20:	6004      	str	r4, [r0, #0]
 8012a22:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a26:	4288      	cmp	r0, r1
 8012a28:	d3f4      	bcc.n	8012a14 <L_shift+0xc>
 8012a2a:	bd70      	pop	{r4, r5, r6, pc}

08012a2c <__match>:
 8012a2c:	b530      	push	{r4, r5, lr}
 8012a2e:	6803      	ldr	r3, [r0, #0]
 8012a30:	3301      	adds	r3, #1
 8012a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a36:	b914      	cbnz	r4, 8012a3e <__match+0x12>
 8012a38:	6003      	str	r3, [r0, #0]
 8012a3a:	2001      	movs	r0, #1
 8012a3c:	bd30      	pop	{r4, r5, pc}
 8012a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a42:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012a46:	2d19      	cmp	r5, #25
 8012a48:	bf98      	it	ls
 8012a4a:	3220      	addls	r2, #32
 8012a4c:	42a2      	cmp	r2, r4
 8012a4e:	d0f0      	beq.n	8012a32 <__match+0x6>
 8012a50:	2000      	movs	r0, #0
 8012a52:	e7f3      	b.n	8012a3c <__match+0x10>

08012a54 <__hexnan>:
 8012a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a58:	680b      	ldr	r3, [r1, #0]
 8012a5a:	6801      	ldr	r1, [r0, #0]
 8012a5c:	115e      	asrs	r6, r3, #5
 8012a5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a62:	f013 031f 	ands.w	r3, r3, #31
 8012a66:	b087      	sub	sp, #28
 8012a68:	bf18      	it	ne
 8012a6a:	3604      	addne	r6, #4
 8012a6c:	2500      	movs	r5, #0
 8012a6e:	1f37      	subs	r7, r6, #4
 8012a70:	4682      	mov	sl, r0
 8012a72:	4690      	mov	r8, r2
 8012a74:	9301      	str	r3, [sp, #4]
 8012a76:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a7a:	46b9      	mov	r9, r7
 8012a7c:	463c      	mov	r4, r7
 8012a7e:	9502      	str	r5, [sp, #8]
 8012a80:	46ab      	mov	fp, r5
 8012a82:	784a      	ldrb	r2, [r1, #1]
 8012a84:	1c4b      	adds	r3, r1, #1
 8012a86:	9303      	str	r3, [sp, #12]
 8012a88:	b342      	cbz	r2, 8012adc <__hexnan+0x88>
 8012a8a:	4610      	mov	r0, r2
 8012a8c:	9105      	str	r1, [sp, #20]
 8012a8e:	9204      	str	r2, [sp, #16]
 8012a90:	f7ff fd94 	bl	80125bc <__hexdig_fun>
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d151      	bne.n	8012b3c <__hexnan+0xe8>
 8012a98:	9a04      	ldr	r2, [sp, #16]
 8012a9a:	9905      	ldr	r1, [sp, #20]
 8012a9c:	2a20      	cmp	r2, #32
 8012a9e:	d818      	bhi.n	8012ad2 <__hexnan+0x7e>
 8012aa0:	9b02      	ldr	r3, [sp, #8]
 8012aa2:	459b      	cmp	fp, r3
 8012aa4:	dd13      	ble.n	8012ace <__hexnan+0x7a>
 8012aa6:	454c      	cmp	r4, r9
 8012aa8:	d206      	bcs.n	8012ab8 <__hexnan+0x64>
 8012aaa:	2d07      	cmp	r5, #7
 8012aac:	dc04      	bgt.n	8012ab8 <__hexnan+0x64>
 8012aae:	462a      	mov	r2, r5
 8012ab0:	4649      	mov	r1, r9
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f7ff ffa8 	bl	8012a08 <L_shift>
 8012ab8:	4544      	cmp	r4, r8
 8012aba:	d952      	bls.n	8012b62 <__hexnan+0x10e>
 8012abc:	2300      	movs	r3, #0
 8012abe:	f1a4 0904 	sub.w	r9, r4, #4
 8012ac2:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ac6:	f8cd b008 	str.w	fp, [sp, #8]
 8012aca:	464c      	mov	r4, r9
 8012acc:	461d      	mov	r5, r3
 8012ace:	9903      	ldr	r1, [sp, #12]
 8012ad0:	e7d7      	b.n	8012a82 <__hexnan+0x2e>
 8012ad2:	2a29      	cmp	r2, #41	@ 0x29
 8012ad4:	d157      	bne.n	8012b86 <__hexnan+0x132>
 8012ad6:	3102      	adds	r1, #2
 8012ad8:	f8ca 1000 	str.w	r1, [sl]
 8012adc:	f1bb 0f00 	cmp.w	fp, #0
 8012ae0:	d051      	beq.n	8012b86 <__hexnan+0x132>
 8012ae2:	454c      	cmp	r4, r9
 8012ae4:	d206      	bcs.n	8012af4 <__hexnan+0xa0>
 8012ae6:	2d07      	cmp	r5, #7
 8012ae8:	dc04      	bgt.n	8012af4 <__hexnan+0xa0>
 8012aea:	462a      	mov	r2, r5
 8012aec:	4649      	mov	r1, r9
 8012aee:	4620      	mov	r0, r4
 8012af0:	f7ff ff8a 	bl	8012a08 <L_shift>
 8012af4:	4544      	cmp	r4, r8
 8012af6:	d936      	bls.n	8012b66 <__hexnan+0x112>
 8012af8:	f1a8 0204 	sub.w	r2, r8, #4
 8012afc:	4623      	mov	r3, r4
 8012afe:	f853 1b04 	ldr.w	r1, [r3], #4
 8012b02:	f842 1f04 	str.w	r1, [r2, #4]!
 8012b06:	429f      	cmp	r7, r3
 8012b08:	d2f9      	bcs.n	8012afe <__hexnan+0xaa>
 8012b0a:	1b3b      	subs	r3, r7, r4
 8012b0c:	f023 0303 	bic.w	r3, r3, #3
 8012b10:	3304      	adds	r3, #4
 8012b12:	3401      	adds	r4, #1
 8012b14:	3e03      	subs	r6, #3
 8012b16:	42b4      	cmp	r4, r6
 8012b18:	bf88      	it	hi
 8012b1a:	2304      	movhi	r3, #4
 8012b1c:	4443      	add	r3, r8
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f843 2b04 	str.w	r2, [r3], #4
 8012b24:	429f      	cmp	r7, r3
 8012b26:	d2fb      	bcs.n	8012b20 <__hexnan+0xcc>
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	b91b      	cbnz	r3, 8012b34 <__hexnan+0xe0>
 8012b2c:	4547      	cmp	r7, r8
 8012b2e:	d128      	bne.n	8012b82 <__hexnan+0x12e>
 8012b30:	2301      	movs	r3, #1
 8012b32:	603b      	str	r3, [r7, #0]
 8012b34:	2005      	movs	r0, #5
 8012b36:	b007      	add	sp, #28
 8012b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	3501      	adds	r5, #1
 8012b3e:	2d08      	cmp	r5, #8
 8012b40:	f10b 0b01 	add.w	fp, fp, #1
 8012b44:	dd06      	ble.n	8012b54 <__hexnan+0x100>
 8012b46:	4544      	cmp	r4, r8
 8012b48:	d9c1      	bls.n	8012ace <__hexnan+0x7a>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b50:	2501      	movs	r5, #1
 8012b52:	3c04      	subs	r4, #4
 8012b54:	6822      	ldr	r2, [r4, #0]
 8012b56:	f000 000f 	and.w	r0, r0, #15
 8012b5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012b5e:	6020      	str	r0, [r4, #0]
 8012b60:	e7b5      	b.n	8012ace <__hexnan+0x7a>
 8012b62:	2508      	movs	r5, #8
 8012b64:	e7b3      	b.n	8012ace <__hexnan+0x7a>
 8012b66:	9b01      	ldr	r3, [sp, #4]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d0dd      	beq.n	8012b28 <__hexnan+0xd4>
 8012b6c:	f1c3 0320 	rsb	r3, r3, #32
 8012b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b74:	40da      	lsrs	r2, r3
 8012b76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012b7a:	4013      	ands	r3, r2
 8012b7c:	f846 3c04 	str.w	r3, [r6, #-4]
 8012b80:	e7d2      	b.n	8012b28 <__hexnan+0xd4>
 8012b82:	3f04      	subs	r7, #4
 8012b84:	e7d0      	b.n	8012b28 <__hexnan+0xd4>
 8012b86:	2004      	movs	r0, #4
 8012b88:	e7d5      	b.n	8012b36 <__hexnan+0xe2>

08012b8a <__ascii_mbtowc>:
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	b901      	cbnz	r1, 8012b90 <__ascii_mbtowc+0x6>
 8012b8e:	a901      	add	r1, sp, #4
 8012b90:	b142      	cbz	r2, 8012ba4 <__ascii_mbtowc+0x1a>
 8012b92:	b14b      	cbz	r3, 8012ba8 <__ascii_mbtowc+0x1e>
 8012b94:	7813      	ldrb	r3, [r2, #0]
 8012b96:	600b      	str	r3, [r1, #0]
 8012b98:	7812      	ldrb	r2, [r2, #0]
 8012b9a:	1e10      	subs	r0, r2, #0
 8012b9c:	bf18      	it	ne
 8012b9e:	2001      	movne	r0, #1
 8012ba0:	b002      	add	sp, #8
 8012ba2:	4770      	bx	lr
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	e7fb      	b.n	8012ba0 <__ascii_mbtowc+0x16>
 8012ba8:	f06f 0001 	mvn.w	r0, #1
 8012bac:	e7f8      	b.n	8012ba0 <__ascii_mbtowc+0x16>
	...

08012bb0 <_Balloc>:
 8012bb0:	b570      	push	{r4, r5, r6, lr}
 8012bb2:	69c6      	ldr	r6, [r0, #28]
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	460d      	mov	r5, r1
 8012bb8:	b976      	cbnz	r6, 8012bd8 <_Balloc+0x28>
 8012bba:	2010      	movs	r0, #16
 8012bbc:	f7fc fefa 	bl	800f9b4 <malloc>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	61e0      	str	r0, [r4, #28]
 8012bc4:	b920      	cbnz	r0, 8012bd0 <_Balloc+0x20>
 8012bc6:	4b18      	ldr	r3, [pc, #96]	@ (8012c28 <_Balloc+0x78>)
 8012bc8:	4818      	ldr	r0, [pc, #96]	@ (8012c2c <_Balloc+0x7c>)
 8012bca:	216b      	movs	r1, #107	@ 0x6b
 8012bcc:	f000 fd4e 	bl	801366c <__assert_func>
 8012bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012bd4:	6006      	str	r6, [r0, #0]
 8012bd6:	60c6      	str	r6, [r0, #12]
 8012bd8:	69e6      	ldr	r6, [r4, #28]
 8012bda:	68f3      	ldr	r3, [r6, #12]
 8012bdc:	b183      	cbz	r3, 8012c00 <_Balloc+0x50>
 8012bde:	69e3      	ldr	r3, [r4, #28]
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012be6:	b9b8      	cbnz	r0, 8012c18 <_Balloc+0x68>
 8012be8:	2101      	movs	r1, #1
 8012bea:	fa01 f605 	lsl.w	r6, r1, r5
 8012bee:	1d72      	adds	r2, r6, #5
 8012bf0:	0092      	lsls	r2, r2, #2
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f000 fd58 	bl	80136a8 <_calloc_r>
 8012bf8:	b160      	cbz	r0, 8012c14 <_Balloc+0x64>
 8012bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012bfe:	e00e      	b.n	8012c1e <_Balloc+0x6e>
 8012c00:	2221      	movs	r2, #33	@ 0x21
 8012c02:	2104      	movs	r1, #4
 8012c04:	4620      	mov	r0, r4
 8012c06:	f000 fd4f 	bl	80136a8 <_calloc_r>
 8012c0a:	69e3      	ldr	r3, [r4, #28]
 8012c0c:	60f0      	str	r0, [r6, #12]
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1e4      	bne.n	8012bde <_Balloc+0x2e>
 8012c14:	2000      	movs	r0, #0
 8012c16:	bd70      	pop	{r4, r5, r6, pc}
 8012c18:	6802      	ldr	r2, [r0, #0]
 8012c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c1e:	2300      	movs	r3, #0
 8012c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c24:	e7f7      	b.n	8012c16 <_Balloc+0x66>
 8012c26:	bf00      	nop
 8012c28:	08013d28 	.word	0x08013d28
 8012c2c:	08013d3f 	.word	0x08013d3f

08012c30 <_Bfree>:
 8012c30:	b570      	push	{r4, r5, r6, lr}
 8012c32:	69c6      	ldr	r6, [r0, #28]
 8012c34:	4605      	mov	r5, r0
 8012c36:	460c      	mov	r4, r1
 8012c38:	b976      	cbnz	r6, 8012c58 <_Bfree+0x28>
 8012c3a:	2010      	movs	r0, #16
 8012c3c:	f7fc feba 	bl	800f9b4 <malloc>
 8012c40:	4602      	mov	r2, r0
 8012c42:	61e8      	str	r0, [r5, #28]
 8012c44:	b920      	cbnz	r0, 8012c50 <_Bfree+0x20>
 8012c46:	4b09      	ldr	r3, [pc, #36]	@ (8012c6c <_Bfree+0x3c>)
 8012c48:	4809      	ldr	r0, [pc, #36]	@ (8012c70 <_Bfree+0x40>)
 8012c4a:	218f      	movs	r1, #143	@ 0x8f
 8012c4c:	f000 fd0e 	bl	801366c <__assert_func>
 8012c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c54:	6006      	str	r6, [r0, #0]
 8012c56:	60c6      	str	r6, [r0, #12]
 8012c58:	b13c      	cbz	r4, 8012c6a <_Bfree+0x3a>
 8012c5a:	69eb      	ldr	r3, [r5, #28]
 8012c5c:	6862      	ldr	r2, [r4, #4]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c64:	6021      	str	r1, [r4, #0]
 8012c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012c6a:	bd70      	pop	{r4, r5, r6, pc}
 8012c6c:	08013d28 	.word	0x08013d28
 8012c70:	08013d3f 	.word	0x08013d3f

08012c74 <__multadd>:
 8012c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c78:	690d      	ldr	r5, [r1, #16]
 8012c7a:	4607      	mov	r7, r0
 8012c7c:	460c      	mov	r4, r1
 8012c7e:	461e      	mov	r6, r3
 8012c80:	f101 0c14 	add.w	ip, r1, #20
 8012c84:	2000      	movs	r0, #0
 8012c86:	f8dc 3000 	ldr.w	r3, [ip]
 8012c8a:	b299      	uxth	r1, r3
 8012c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8012c90:	0c1e      	lsrs	r6, r3, #16
 8012c92:	0c0b      	lsrs	r3, r1, #16
 8012c94:	fb02 3306 	mla	r3, r2, r6, r3
 8012c98:	b289      	uxth	r1, r1
 8012c9a:	3001      	adds	r0, #1
 8012c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ca0:	4285      	cmp	r5, r0
 8012ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8012ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012caa:	dcec      	bgt.n	8012c86 <__multadd+0x12>
 8012cac:	b30e      	cbz	r6, 8012cf2 <__multadd+0x7e>
 8012cae:	68a3      	ldr	r3, [r4, #8]
 8012cb0:	42ab      	cmp	r3, r5
 8012cb2:	dc19      	bgt.n	8012ce8 <__multadd+0x74>
 8012cb4:	6861      	ldr	r1, [r4, #4]
 8012cb6:	4638      	mov	r0, r7
 8012cb8:	3101      	adds	r1, #1
 8012cba:	f7ff ff79 	bl	8012bb0 <_Balloc>
 8012cbe:	4680      	mov	r8, r0
 8012cc0:	b928      	cbnz	r0, 8012cce <__multadd+0x5a>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8012cf8 <__multadd+0x84>)
 8012cc6:	480d      	ldr	r0, [pc, #52]	@ (8012cfc <__multadd+0x88>)
 8012cc8:	21ba      	movs	r1, #186	@ 0xba
 8012cca:	f000 fccf 	bl	801366c <__assert_func>
 8012cce:	6922      	ldr	r2, [r4, #16]
 8012cd0:	3202      	adds	r2, #2
 8012cd2:	f104 010c 	add.w	r1, r4, #12
 8012cd6:	0092      	lsls	r2, r2, #2
 8012cd8:	300c      	adds	r0, #12
 8012cda:	f7fd fc30 	bl	801053e <memcpy>
 8012cde:	4621      	mov	r1, r4
 8012ce0:	4638      	mov	r0, r7
 8012ce2:	f7ff ffa5 	bl	8012c30 <_Bfree>
 8012ce6:	4644      	mov	r4, r8
 8012ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012cec:	3501      	adds	r5, #1
 8012cee:	615e      	str	r6, [r3, #20]
 8012cf0:	6125      	str	r5, [r4, #16]
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf8:	08013cb7 	.word	0x08013cb7
 8012cfc:	08013d3f 	.word	0x08013d3f

08012d00 <__s2b>:
 8012d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d04:	460c      	mov	r4, r1
 8012d06:	4615      	mov	r5, r2
 8012d08:	461f      	mov	r7, r3
 8012d0a:	2209      	movs	r2, #9
 8012d0c:	3308      	adds	r3, #8
 8012d0e:	4606      	mov	r6, r0
 8012d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d14:	2100      	movs	r1, #0
 8012d16:	2201      	movs	r2, #1
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	db09      	blt.n	8012d30 <__s2b+0x30>
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f7ff ff47 	bl	8012bb0 <_Balloc>
 8012d22:	b940      	cbnz	r0, 8012d36 <__s2b+0x36>
 8012d24:	4602      	mov	r2, r0
 8012d26:	4b19      	ldr	r3, [pc, #100]	@ (8012d8c <__s2b+0x8c>)
 8012d28:	4819      	ldr	r0, [pc, #100]	@ (8012d90 <__s2b+0x90>)
 8012d2a:	21d3      	movs	r1, #211	@ 0xd3
 8012d2c:	f000 fc9e 	bl	801366c <__assert_func>
 8012d30:	0052      	lsls	r2, r2, #1
 8012d32:	3101      	adds	r1, #1
 8012d34:	e7f0      	b.n	8012d18 <__s2b+0x18>
 8012d36:	9b08      	ldr	r3, [sp, #32]
 8012d38:	6143      	str	r3, [r0, #20]
 8012d3a:	2d09      	cmp	r5, #9
 8012d3c:	f04f 0301 	mov.w	r3, #1
 8012d40:	6103      	str	r3, [r0, #16]
 8012d42:	dd16      	ble.n	8012d72 <__s2b+0x72>
 8012d44:	f104 0909 	add.w	r9, r4, #9
 8012d48:	46c8      	mov	r8, r9
 8012d4a:	442c      	add	r4, r5
 8012d4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012d50:	4601      	mov	r1, r0
 8012d52:	3b30      	subs	r3, #48	@ 0x30
 8012d54:	220a      	movs	r2, #10
 8012d56:	4630      	mov	r0, r6
 8012d58:	f7ff ff8c 	bl	8012c74 <__multadd>
 8012d5c:	45a0      	cmp	r8, r4
 8012d5e:	d1f5      	bne.n	8012d4c <__s2b+0x4c>
 8012d60:	f1a5 0408 	sub.w	r4, r5, #8
 8012d64:	444c      	add	r4, r9
 8012d66:	1b2d      	subs	r5, r5, r4
 8012d68:	1963      	adds	r3, r4, r5
 8012d6a:	42bb      	cmp	r3, r7
 8012d6c:	db04      	blt.n	8012d78 <__s2b+0x78>
 8012d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d72:	340a      	adds	r4, #10
 8012d74:	2509      	movs	r5, #9
 8012d76:	e7f6      	b.n	8012d66 <__s2b+0x66>
 8012d78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012d7c:	4601      	mov	r1, r0
 8012d7e:	3b30      	subs	r3, #48	@ 0x30
 8012d80:	220a      	movs	r2, #10
 8012d82:	4630      	mov	r0, r6
 8012d84:	f7ff ff76 	bl	8012c74 <__multadd>
 8012d88:	e7ee      	b.n	8012d68 <__s2b+0x68>
 8012d8a:	bf00      	nop
 8012d8c:	08013cb7 	.word	0x08013cb7
 8012d90:	08013d3f 	.word	0x08013d3f

08012d94 <__hi0bits>:
 8012d94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012d98:	4603      	mov	r3, r0
 8012d9a:	bf36      	itet	cc
 8012d9c:	0403      	lslcc	r3, r0, #16
 8012d9e:	2000      	movcs	r0, #0
 8012da0:	2010      	movcc	r0, #16
 8012da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012da6:	bf3c      	itt	cc
 8012da8:	021b      	lslcc	r3, r3, #8
 8012daa:	3008      	addcc	r0, #8
 8012dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012db0:	bf3c      	itt	cc
 8012db2:	011b      	lslcc	r3, r3, #4
 8012db4:	3004      	addcc	r0, #4
 8012db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012dba:	bf3c      	itt	cc
 8012dbc:	009b      	lslcc	r3, r3, #2
 8012dbe:	3002      	addcc	r0, #2
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	db05      	blt.n	8012dd0 <__hi0bits+0x3c>
 8012dc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012dc8:	f100 0001 	add.w	r0, r0, #1
 8012dcc:	bf08      	it	eq
 8012dce:	2020      	moveq	r0, #32
 8012dd0:	4770      	bx	lr

08012dd2 <__lo0bits>:
 8012dd2:	6803      	ldr	r3, [r0, #0]
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	f013 0007 	ands.w	r0, r3, #7
 8012dda:	d00b      	beq.n	8012df4 <__lo0bits+0x22>
 8012ddc:	07d9      	lsls	r1, r3, #31
 8012dde:	d421      	bmi.n	8012e24 <__lo0bits+0x52>
 8012de0:	0798      	lsls	r0, r3, #30
 8012de2:	bf49      	itett	mi
 8012de4:	085b      	lsrmi	r3, r3, #1
 8012de6:	089b      	lsrpl	r3, r3, #2
 8012de8:	2001      	movmi	r0, #1
 8012dea:	6013      	strmi	r3, [r2, #0]
 8012dec:	bf5c      	itt	pl
 8012dee:	6013      	strpl	r3, [r2, #0]
 8012df0:	2002      	movpl	r0, #2
 8012df2:	4770      	bx	lr
 8012df4:	b299      	uxth	r1, r3
 8012df6:	b909      	cbnz	r1, 8012dfc <__lo0bits+0x2a>
 8012df8:	0c1b      	lsrs	r3, r3, #16
 8012dfa:	2010      	movs	r0, #16
 8012dfc:	b2d9      	uxtb	r1, r3
 8012dfe:	b909      	cbnz	r1, 8012e04 <__lo0bits+0x32>
 8012e00:	3008      	adds	r0, #8
 8012e02:	0a1b      	lsrs	r3, r3, #8
 8012e04:	0719      	lsls	r1, r3, #28
 8012e06:	bf04      	itt	eq
 8012e08:	091b      	lsreq	r3, r3, #4
 8012e0a:	3004      	addeq	r0, #4
 8012e0c:	0799      	lsls	r1, r3, #30
 8012e0e:	bf04      	itt	eq
 8012e10:	089b      	lsreq	r3, r3, #2
 8012e12:	3002      	addeq	r0, #2
 8012e14:	07d9      	lsls	r1, r3, #31
 8012e16:	d403      	bmi.n	8012e20 <__lo0bits+0x4e>
 8012e18:	085b      	lsrs	r3, r3, #1
 8012e1a:	f100 0001 	add.w	r0, r0, #1
 8012e1e:	d003      	beq.n	8012e28 <__lo0bits+0x56>
 8012e20:	6013      	str	r3, [r2, #0]
 8012e22:	4770      	bx	lr
 8012e24:	2000      	movs	r0, #0
 8012e26:	4770      	bx	lr
 8012e28:	2020      	movs	r0, #32
 8012e2a:	4770      	bx	lr

08012e2c <__i2b>:
 8012e2c:	b510      	push	{r4, lr}
 8012e2e:	460c      	mov	r4, r1
 8012e30:	2101      	movs	r1, #1
 8012e32:	f7ff febd 	bl	8012bb0 <_Balloc>
 8012e36:	4602      	mov	r2, r0
 8012e38:	b928      	cbnz	r0, 8012e46 <__i2b+0x1a>
 8012e3a:	4b05      	ldr	r3, [pc, #20]	@ (8012e50 <__i2b+0x24>)
 8012e3c:	4805      	ldr	r0, [pc, #20]	@ (8012e54 <__i2b+0x28>)
 8012e3e:	f240 1145 	movw	r1, #325	@ 0x145
 8012e42:	f000 fc13 	bl	801366c <__assert_func>
 8012e46:	2301      	movs	r3, #1
 8012e48:	6144      	str	r4, [r0, #20]
 8012e4a:	6103      	str	r3, [r0, #16]
 8012e4c:	bd10      	pop	{r4, pc}
 8012e4e:	bf00      	nop
 8012e50:	08013cb7 	.word	0x08013cb7
 8012e54:	08013d3f 	.word	0x08013d3f

08012e58 <__multiply>:
 8012e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e5c:	4614      	mov	r4, r2
 8012e5e:	690a      	ldr	r2, [r1, #16]
 8012e60:	6923      	ldr	r3, [r4, #16]
 8012e62:	429a      	cmp	r2, r3
 8012e64:	bfa8      	it	ge
 8012e66:	4623      	movge	r3, r4
 8012e68:	460f      	mov	r7, r1
 8012e6a:	bfa4      	itt	ge
 8012e6c:	460c      	movge	r4, r1
 8012e6e:	461f      	movge	r7, r3
 8012e70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012e74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012e78:	68a3      	ldr	r3, [r4, #8]
 8012e7a:	6861      	ldr	r1, [r4, #4]
 8012e7c:	eb0a 0609 	add.w	r6, sl, r9
 8012e80:	42b3      	cmp	r3, r6
 8012e82:	b085      	sub	sp, #20
 8012e84:	bfb8      	it	lt
 8012e86:	3101      	addlt	r1, #1
 8012e88:	f7ff fe92 	bl	8012bb0 <_Balloc>
 8012e8c:	b930      	cbnz	r0, 8012e9c <__multiply+0x44>
 8012e8e:	4602      	mov	r2, r0
 8012e90:	4b44      	ldr	r3, [pc, #272]	@ (8012fa4 <__multiply+0x14c>)
 8012e92:	4845      	ldr	r0, [pc, #276]	@ (8012fa8 <__multiply+0x150>)
 8012e94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012e98:	f000 fbe8 	bl	801366c <__assert_func>
 8012e9c:	f100 0514 	add.w	r5, r0, #20
 8012ea0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ea4:	462b      	mov	r3, r5
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	4543      	cmp	r3, r8
 8012eaa:	d321      	bcc.n	8012ef0 <__multiply+0x98>
 8012eac:	f107 0114 	add.w	r1, r7, #20
 8012eb0:	f104 0214 	add.w	r2, r4, #20
 8012eb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012eb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012ebc:	9302      	str	r3, [sp, #8]
 8012ebe:	1b13      	subs	r3, r2, r4
 8012ec0:	3b15      	subs	r3, #21
 8012ec2:	f023 0303 	bic.w	r3, r3, #3
 8012ec6:	3304      	adds	r3, #4
 8012ec8:	f104 0715 	add.w	r7, r4, #21
 8012ecc:	42ba      	cmp	r2, r7
 8012ece:	bf38      	it	cc
 8012ed0:	2304      	movcc	r3, #4
 8012ed2:	9301      	str	r3, [sp, #4]
 8012ed4:	9b02      	ldr	r3, [sp, #8]
 8012ed6:	9103      	str	r1, [sp, #12]
 8012ed8:	428b      	cmp	r3, r1
 8012eda:	d80c      	bhi.n	8012ef6 <__multiply+0x9e>
 8012edc:	2e00      	cmp	r6, #0
 8012ede:	dd03      	ble.n	8012ee8 <__multiply+0x90>
 8012ee0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d05b      	beq.n	8012fa0 <__multiply+0x148>
 8012ee8:	6106      	str	r6, [r0, #16]
 8012eea:	b005      	add	sp, #20
 8012eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef0:	f843 2b04 	str.w	r2, [r3], #4
 8012ef4:	e7d8      	b.n	8012ea8 <__multiply+0x50>
 8012ef6:	f8b1 a000 	ldrh.w	sl, [r1]
 8012efa:	f1ba 0f00 	cmp.w	sl, #0
 8012efe:	d024      	beq.n	8012f4a <__multiply+0xf2>
 8012f00:	f104 0e14 	add.w	lr, r4, #20
 8012f04:	46a9      	mov	r9, r5
 8012f06:	f04f 0c00 	mov.w	ip, #0
 8012f0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f0e:	f8d9 3000 	ldr.w	r3, [r9]
 8012f12:	fa1f fb87 	uxth.w	fp, r7
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	fb0a 330b 	mla	r3, sl, fp, r3
 8012f1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012f20:	f8d9 7000 	ldr.w	r7, [r9]
 8012f24:	4463      	add	r3, ip
 8012f26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8012f2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f38:	4572      	cmp	r2, lr
 8012f3a:	f849 3b04 	str.w	r3, [r9], #4
 8012f3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f42:	d8e2      	bhi.n	8012f0a <__multiply+0xb2>
 8012f44:	9b01      	ldr	r3, [sp, #4]
 8012f46:	f845 c003 	str.w	ip, [r5, r3]
 8012f4a:	9b03      	ldr	r3, [sp, #12]
 8012f4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012f50:	3104      	adds	r1, #4
 8012f52:	f1b9 0f00 	cmp.w	r9, #0
 8012f56:	d021      	beq.n	8012f9c <__multiply+0x144>
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	f104 0c14 	add.w	ip, r4, #20
 8012f5e:	46ae      	mov	lr, r5
 8012f60:	f04f 0a00 	mov.w	sl, #0
 8012f64:	f8bc b000 	ldrh.w	fp, [ip]
 8012f68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012f6c:	fb09 770b 	mla	r7, r9, fp, r7
 8012f70:	4457      	add	r7, sl
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f78:	f84e 3b04 	str.w	r3, [lr], #4
 8012f7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012f80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f84:	f8be 3000 	ldrh.w	r3, [lr]
 8012f88:	fb09 330a 	mla	r3, r9, sl, r3
 8012f8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012f90:	4562      	cmp	r2, ip
 8012f92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f96:	d8e5      	bhi.n	8012f64 <__multiply+0x10c>
 8012f98:	9f01      	ldr	r7, [sp, #4]
 8012f9a:	51eb      	str	r3, [r5, r7]
 8012f9c:	3504      	adds	r5, #4
 8012f9e:	e799      	b.n	8012ed4 <__multiply+0x7c>
 8012fa0:	3e01      	subs	r6, #1
 8012fa2:	e79b      	b.n	8012edc <__multiply+0x84>
 8012fa4:	08013cb7 	.word	0x08013cb7
 8012fa8:	08013d3f 	.word	0x08013d3f

08012fac <__pow5mult>:
 8012fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fb0:	4615      	mov	r5, r2
 8012fb2:	f012 0203 	ands.w	r2, r2, #3
 8012fb6:	4607      	mov	r7, r0
 8012fb8:	460e      	mov	r6, r1
 8012fba:	d007      	beq.n	8012fcc <__pow5mult+0x20>
 8012fbc:	4c25      	ldr	r4, [pc, #148]	@ (8013054 <__pow5mult+0xa8>)
 8012fbe:	3a01      	subs	r2, #1
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012fc6:	f7ff fe55 	bl	8012c74 <__multadd>
 8012fca:	4606      	mov	r6, r0
 8012fcc:	10ad      	asrs	r5, r5, #2
 8012fce:	d03d      	beq.n	801304c <__pow5mult+0xa0>
 8012fd0:	69fc      	ldr	r4, [r7, #28]
 8012fd2:	b97c      	cbnz	r4, 8012ff4 <__pow5mult+0x48>
 8012fd4:	2010      	movs	r0, #16
 8012fd6:	f7fc fced 	bl	800f9b4 <malloc>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	61f8      	str	r0, [r7, #28]
 8012fde:	b928      	cbnz	r0, 8012fec <__pow5mult+0x40>
 8012fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8013058 <__pow5mult+0xac>)
 8012fe2:	481e      	ldr	r0, [pc, #120]	@ (801305c <__pow5mult+0xb0>)
 8012fe4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012fe8:	f000 fb40 	bl	801366c <__assert_func>
 8012fec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ff0:	6004      	str	r4, [r0, #0]
 8012ff2:	60c4      	str	r4, [r0, #12]
 8012ff4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012ff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ffc:	b94c      	cbnz	r4, 8013012 <__pow5mult+0x66>
 8012ffe:	f240 2171 	movw	r1, #625	@ 0x271
 8013002:	4638      	mov	r0, r7
 8013004:	f7ff ff12 	bl	8012e2c <__i2b>
 8013008:	2300      	movs	r3, #0
 801300a:	f8c8 0008 	str.w	r0, [r8, #8]
 801300e:	4604      	mov	r4, r0
 8013010:	6003      	str	r3, [r0, #0]
 8013012:	f04f 0900 	mov.w	r9, #0
 8013016:	07eb      	lsls	r3, r5, #31
 8013018:	d50a      	bpl.n	8013030 <__pow5mult+0x84>
 801301a:	4631      	mov	r1, r6
 801301c:	4622      	mov	r2, r4
 801301e:	4638      	mov	r0, r7
 8013020:	f7ff ff1a 	bl	8012e58 <__multiply>
 8013024:	4631      	mov	r1, r6
 8013026:	4680      	mov	r8, r0
 8013028:	4638      	mov	r0, r7
 801302a:	f7ff fe01 	bl	8012c30 <_Bfree>
 801302e:	4646      	mov	r6, r8
 8013030:	106d      	asrs	r5, r5, #1
 8013032:	d00b      	beq.n	801304c <__pow5mult+0xa0>
 8013034:	6820      	ldr	r0, [r4, #0]
 8013036:	b938      	cbnz	r0, 8013048 <__pow5mult+0x9c>
 8013038:	4622      	mov	r2, r4
 801303a:	4621      	mov	r1, r4
 801303c:	4638      	mov	r0, r7
 801303e:	f7ff ff0b 	bl	8012e58 <__multiply>
 8013042:	6020      	str	r0, [r4, #0]
 8013044:	f8c0 9000 	str.w	r9, [r0]
 8013048:	4604      	mov	r4, r0
 801304a:	e7e4      	b.n	8013016 <__pow5mult+0x6a>
 801304c:	4630      	mov	r0, r6
 801304e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013052:	bf00      	nop
 8013054:	08013d98 	.word	0x08013d98
 8013058:	08013d28 	.word	0x08013d28
 801305c:	08013d3f 	.word	0x08013d3f

08013060 <__lshift>:
 8013060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013064:	460c      	mov	r4, r1
 8013066:	6849      	ldr	r1, [r1, #4]
 8013068:	6923      	ldr	r3, [r4, #16]
 801306a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801306e:	68a3      	ldr	r3, [r4, #8]
 8013070:	4607      	mov	r7, r0
 8013072:	4691      	mov	r9, r2
 8013074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013078:	f108 0601 	add.w	r6, r8, #1
 801307c:	42b3      	cmp	r3, r6
 801307e:	db0b      	blt.n	8013098 <__lshift+0x38>
 8013080:	4638      	mov	r0, r7
 8013082:	f7ff fd95 	bl	8012bb0 <_Balloc>
 8013086:	4605      	mov	r5, r0
 8013088:	b948      	cbnz	r0, 801309e <__lshift+0x3e>
 801308a:	4602      	mov	r2, r0
 801308c:	4b28      	ldr	r3, [pc, #160]	@ (8013130 <__lshift+0xd0>)
 801308e:	4829      	ldr	r0, [pc, #164]	@ (8013134 <__lshift+0xd4>)
 8013090:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013094:	f000 faea 	bl	801366c <__assert_func>
 8013098:	3101      	adds	r1, #1
 801309a:	005b      	lsls	r3, r3, #1
 801309c:	e7ee      	b.n	801307c <__lshift+0x1c>
 801309e:	2300      	movs	r3, #0
 80130a0:	f100 0114 	add.w	r1, r0, #20
 80130a4:	f100 0210 	add.w	r2, r0, #16
 80130a8:	4618      	mov	r0, r3
 80130aa:	4553      	cmp	r3, sl
 80130ac:	db33      	blt.n	8013116 <__lshift+0xb6>
 80130ae:	6920      	ldr	r0, [r4, #16]
 80130b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130b4:	f104 0314 	add.w	r3, r4, #20
 80130b8:	f019 091f 	ands.w	r9, r9, #31
 80130bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80130c4:	d02b      	beq.n	801311e <__lshift+0xbe>
 80130c6:	f1c9 0e20 	rsb	lr, r9, #32
 80130ca:	468a      	mov	sl, r1
 80130cc:	2200      	movs	r2, #0
 80130ce:	6818      	ldr	r0, [r3, #0]
 80130d0:	fa00 f009 	lsl.w	r0, r0, r9
 80130d4:	4310      	orrs	r0, r2
 80130d6:	f84a 0b04 	str.w	r0, [sl], #4
 80130da:	f853 2b04 	ldr.w	r2, [r3], #4
 80130de:	459c      	cmp	ip, r3
 80130e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80130e4:	d8f3      	bhi.n	80130ce <__lshift+0x6e>
 80130e6:	ebac 0304 	sub.w	r3, ip, r4
 80130ea:	3b15      	subs	r3, #21
 80130ec:	f023 0303 	bic.w	r3, r3, #3
 80130f0:	3304      	adds	r3, #4
 80130f2:	f104 0015 	add.w	r0, r4, #21
 80130f6:	4584      	cmp	ip, r0
 80130f8:	bf38      	it	cc
 80130fa:	2304      	movcc	r3, #4
 80130fc:	50ca      	str	r2, [r1, r3]
 80130fe:	b10a      	cbz	r2, 8013104 <__lshift+0xa4>
 8013100:	f108 0602 	add.w	r6, r8, #2
 8013104:	3e01      	subs	r6, #1
 8013106:	4638      	mov	r0, r7
 8013108:	612e      	str	r6, [r5, #16]
 801310a:	4621      	mov	r1, r4
 801310c:	f7ff fd90 	bl	8012c30 <_Bfree>
 8013110:	4628      	mov	r0, r5
 8013112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013116:	f842 0f04 	str.w	r0, [r2, #4]!
 801311a:	3301      	adds	r3, #1
 801311c:	e7c5      	b.n	80130aa <__lshift+0x4a>
 801311e:	3904      	subs	r1, #4
 8013120:	f853 2b04 	ldr.w	r2, [r3], #4
 8013124:	f841 2f04 	str.w	r2, [r1, #4]!
 8013128:	459c      	cmp	ip, r3
 801312a:	d8f9      	bhi.n	8013120 <__lshift+0xc0>
 801312c:	e7ea      	b.n	8013104 <__lshift+0xa4>
 801312e:	bf00      	nop
 8013130:	08013cb7 	.word	0x08013cb7
 8013134:	08013d3f 	.word	0x08013d3f

08013138 <__mcmp>:
 8013138:	690a      	ldr	r2, [r1, #16]
 801313a:	4603      	mov	r3, r0
 801313c:	6900      	ldr	r0, [r0, #16]
 801313e:	1a80      	subs	r0, r0, r2
 8013140:	b530      	push	{r4, r5, lr}
 8013142:	d10e      	bne.n	8013162 <__mcmp+0x2a>
 8013144:	3314      	adds	r3, #20
 8013146:	3114      	adds	r1, #20
 8013148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801314c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013158:	4295      	cmp	r5, r2
 801315a:	d003      	beq.n	8013164 <__mcmp+0x2c>
 801315c:	d205      	bcs.n	801316a <__mcmp+0x32>
 801315e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013162:	bd30      	pop	{r4, r5, pc}
 8013164:	42a3      	cmp	r3, r4
 8013166:	d3f3      	bcc.n	8013150 <__mcmp+0x18>
 8013168:	e7fb      	b.n	8013162 <__mcmp+0x2a>
 801316a:	2001      	movs	r0, #1
 801316c:	e7f9      	b.n	8013162 <__mcmp+0x2a>
	...

08013170 <__mdiff>:
 8013170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013174:	4689      	mov	r9, r1
 8013176:	4606      	mov	r6, r0
 8013178:	4611      	mov	r1, r2
 801317a:	4648      	mov	r0, r9
 801317c:	4614      	mov	r4, r2
 801317e:	f7ff ffdb 	bl	8013138 <__mcmp>
 8013182:	1e05      	subs	r5, r0, #0
 8013184:	d112      	bne.n	80131ac <__mdiff+0x3c>
 8013186:	4629      	mov	r1, r5
 8013188:	4630      	mov	r0, r6
 801318a:	f7ff fd11 	bl	8012bb0 <_Balloc>
 801318e:	4602      	mov	r2, r0
 8013190:	b928      	cbnz	r0, 801319e <__mdiff+0x2e>
 8013192:	4b3f      	ldr	r3, [pc, #252]	@ (8013290 <__mdiff+0x120>)
 8013194:	f240 2137 	movw	r1, #567	@ 0x237
 8013198:	483e      	ldr	r0, [pc, #248]	@ (8013294 <__mdiff+0x124>)
 801319a:	f000 fa67 	bl	801366c <__assert_func>
 801319e:	2301      	movs	r3, #1
 80131a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80131a4:	4610      	mov	r0, r2
 80131a6:	b003      	add	sp, #12
 80131a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ac:	bfbc      	itt	lt
 80131ae:	464b      	movlt	r3, r9
 80131b0:	46a1      	movlt	r9, r4
 80131b2:	4630      	mov	r0, r6
 80131b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80131b8:	bfba      	itte	lt
 80131ba:	461c      	movlt	r4, r3
 80131bc:	2501      	movlt	r5, #1
 80131be:	2500      	movge	r5, #0
 80131c0:	f7ff fcf6 	bl	8012bb0 <_Balloc>
 80131c4:	4602      	mov	r2, r0
 80131c6:	b918      	cbnz	r0, 80131d0 <__mdiff+0x60>
 80131c8:	4b31      	ldr	r3, [pc, #196]	@ (8013290 <__mdiff+0x120>)
 80131ca:	f240 2145 	movw	r1, #581	@ 0x245
 80131ce:	e7e3      	b.n	8013198 <__mdiff+0x28>
 80131d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80131d4:	6926      	ldr	r6, [r4, #16]
 80131d6:	60c5      	str	r5, [r0, #12]
 80131d8:	f109 0310 	add.w	r3, r9, #16
 80131dc:	f109 0514 	add.w	r5, r9, #20
 80131e0:	f104 0e14 	add.w	lr, r4, #20
 80131e4:	f100 0b14 	add.w	fp, r0, #20
 80131e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80131ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80131f0:	9301      	str	r3, [sp, #4]
 80131f2:	46d9      	mov	r9, fp
 80131f4:	f04f 0c00 	mov.w	ip, #0
 80131f8:	9b01      	ldr	r3, [sp, #4]
 80131fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80131fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	fa1f f38a 	uxth.w	r3, sl
 8013208:	4619      	mov	r1, r3
 801320a:	b283      	uxth	r3, r0
 801320c:	1acb      	subs	r3, r1, r3
 801320e:	0c00      	lsrs	r0, r0, #16
 8013210:	4463      	add	r3, ip
 8013212:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013216:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801321a:	b29b      	uxth	r3, r3
 801321c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013220:	4576      	cmp	r6, lr
 8013222:	f849 3b04 	str.w	r3, [r9], #4
 8013226:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801322a:	d8e5      	bhi.n	80131f8 <__mdiff+0x88>
 801322c:	1b33      	subs	r3, r6, r4
 801322e:	3b15      	subs	r3, #21
 8013230:	f023 0303 	bic.w	r3, r3, #3
 8013234:	3415      	adds	r4, #21
 8013236:	3304      	adds	r3, #4
 8013238:	42a6      	cmp	r6, r4
 801323a:	bf38      	it	cc
 801323c:	2304      	movcc	r3, #4
 801323e:	441d      	add	r5, r3
 8013240:	445b      	add	r3, fp
 8013242:	461e      	mov	r6, r3
 8013244:	462c      	mov	r4, r5
 8013246:	4544      	cmp	r4, r8
 8013248:	d30e      	bcc.n	8013268 <__mdiff+0xf8>
 801324a:	f108 0103 	add.w	r1, r8, #3
 801324e:	1b49      	subs	r1, r1, r5
 8013250:	f021 0103 	bic.w	r1, r1, #3
 8013254:	3d03      	subs	r5, #3
 8013256:	45a8      	cmp	r8, r5
 8013258:	bf38      	it	cc
 801325a:	2100      	movcc	r1, #0
 801325c:	440b      	add	r3, r1
 801325e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013262:	b191      	cbz	r1, 801328a <__mdiff+0x11a>
 8013264:	6117      	str	r7, [r2, #16]
 8013266:	e79d      	b.n	80131a4 <__mdiff+0x34>
 8013268:	f854 1b04 	ldr.w	r1, [r4], #4
 801326c:	46e6      	mov	lr, ip
 801326e:	0c08      	lsrs	r0, r1, #16
 8013270:	fa1c fc81 	uxtah	ip, ip, r1
 8013274:	4471      	add	r1, lr
 8013276:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801327a:	b289      	uxth	r1, r1
 801327c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013280:	f846 1b04 	str.w	r1, [r6], #4
 8013284:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013288:	e7dd      	b.n	8013246 <__mdiff+0xd6>
 801328a:	3f01      	subs	r7, #1
 801328c:	e7e7      	b.n	801325e <__mdiff+0xee>
 801328e:	bf00      	nop
 8013290:	08013cb7 	.word	0x08013cb7
 8013294:	08013d3f 	.word	0x08013d3f

08013298 <__ulp>:
 8013298:	b082      	sub	sp, #8
 801329a:	ed8d 0b00 	vstr	d0, [sp]
 801329e:	9a01      	ldr	r2, [sp, #4]
 80132a0:	4b0f      	ldr	r3, [pc, #60]	@ (80132e0 <__ulp+0x48>)
 80132a2:	4013      	ands	r3, r2
 80132a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	dc08      	bgt.n	80132be <__ulp+0x26>
 80132ac:	425b      	negs	r3, r3
 80132ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80132b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80132b6:	da04      	bge.n	80132c2 <__ulp+0x2a>
 80132b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80132bc:	4113      	asrs	r3, r2
 80132be:	2200      	movs	r2, #0
 80132c0:	e008      	b.n	80132d4 <__ulp+0x3c>
 80132c2:	f1a2 0314 	sub.w	r3, r2, #20
 80132c6:	2b1e      	cmp	r3, #30
 80132c8:	bfda      	itte	le
 80132ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80132ce:	40da      	lsrle	r2, r3
 80132d0:	2201      	movgt	r2, #1
 80132d2:	2300      	movs	r3, #0
 80132d4:	4619      	mov	r1, r3
 80132d6:	4610      	mov	r0, r2
 80132d8:	ec41 0b10 	vmov	d0, r0, r1
 80132dc:	b002      	add	sp, #8
 80132de:	4770      	bx	lr
 80132e0:	7ff00000 	.word	0x7ff00000

080132e4 <__b2d>:
 80132e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132e8:	6906      	ldr	r6, [r0, #16]
 80132ea:	f100 0814 	add.w	r8, r0, #20
 80132ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80132f2:	1f37      	subs	r7, r6, #4
 80132f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80132f8:	4610      	mov	r0, r2
 80132fa:	f7ff fd4b 	bl	8012d94 <__hi0bits>
 80132fe:	f1c0 0320 	rsb	r3, r0, #32
 8013302:	280a      	cmp	r0, #10
 8013304:	600b      	str	r3, [r1, #0]
 8013306:	491b      	ldr	r1, [pc, #108]	@ (8013374 <__b2d+0x90>)
 8013308:	dc15      	bgt.n	8013336 <__b2d+0x52>
 801330a:	f1c0 0c0b 	rsb	ip, r0, #11
 801330e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013312:	45b8      	cmp	r8, r7
 8013314:	ea43 0501 	orr.w	r5, r3, r1
 8013318:	bf34      	ite	cc
 801331a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801331e:	2300      	movcs	r3, #0
 8013320:	3015      	adds	r0, #21
 8013322:	fa02 f000 	lsl.w	r0, r2, r0
 8013326:	fa23 f30c 	lsr.w	r3, r3, ip
 801332a:	4303      	orrs	r3, r0
 801332c:	461c      	mov	r4, r3
 801332e:	ec45 4b10 	vmov	d0, r4, r5
 8013332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013336:	45b8      	cmp	r8, r7
 8013338:	bf3a      	itte	cc
 801333a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801333e:	f1a6 0708 	subcc.w	r7, r6, #8
 8013342:	2300      	movcs	r3, #0
 8013344:	380b      	subs	r0, #11
 8013346:	d012      	beq.n	801336e <__b2d+0x8a>
 8013348:	f1c0 0120 	rsb	r1, r0, #32
 801334c:	fa23 f401 	lsr.w	r4, r3, r1
 8013350:	4082      	lsls	r2, r0
 8013352:	4322      	orrs	r2, r4
 8013354:	4547      	cmp	r7, r8
 8013356:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801335a:	bf8c      	ite	hi
 801335c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013360:	2200      	movls	r2, #0
 8013362:	4083      	lsls	r3, r0
 8013364:	40ca      	lsrs	r2, r1
 8013366:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801336a:	4313      	orrs	r3, r2
 801336c:	e7de      	b.n	801332c <__b2d+0x48>
 801336e:	ea42 0501 	orr.w	r5, r2, r1
 8013372:	e7db      	b.n	801332c <__b2d+0x48>
 8013374:	3ff00000 	.word	0x3ff00000

08013378 <__d2b>:
 8013378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801337c:	460f      	mov	r7, r1
 801337e:	2101      	movs	r1, #1
 8013380:	ec59 8b10 	vmov	r8, r9, d0
 8013384:	4616      	mov	r6, r2
 8013386:	f7ff fc13 	bl	8012bb0 <_Balloc>
 801338a:	4604      	mov	r4, r0
 801338c:	b930      	cbnz	r0, 801339c <__d2b+0x24>
 801338e:	4602      	mov	r2, r0
 8013390:	4b23      	ldr	r3, [pc, #140]	@ (8013420 <__d2b+0xa8>)
 8013392:	4824      	ldr	r0, [pc, #144]	@ (8013424 <__d2b+0xac>)
 8013394:	f240 310f 	movw	r1, #783	@ 0x30f
 8013398:	f000 f968 	bl	801366c <__assert_func>
 801339c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80133a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133a4:	b10d      	cbz	r5, 80133aa <__d2b+0x32>
 80133a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80133aa:	9301      	str	r3, [sp, #4]
 80133ac:	f1b8 0300 	subs.w	r3, r8, #0
 80133b0:	d023      	beq.n	80133fa <__d2b+0x82>
 80133b2:	4668      	mov	r0, sp
 80133b4:	9300      	str	r3, [sp, #0]
 80133b6:	f7ff fd0c 	bl	8012dd2 <__lo0bits>
 80133ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80133be:	b1d0      	cbz	r0, 80133f6 <__d2b+0x7e>
 80133c0:	f1c0 0320 	rsb	r3, r0, #32
 80133c4:	fa02 f303 	lsl.w	r3, r2, r3
 80133c8:	430b      	orrs	r3, r1
 80133ca:	40c2      	lsrs	r2, r0
 80133cc:	6163      	str	r3, [r4, #20]
 80133ce:	9201      	str	r2, [sp, #4]
 80133d0:	9b01      	ldr	r3, [sp, #4]
 80133d2:	61a3      	str	r3, [r4, #24]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	bf0c      	ite	eq
 80133d8:	2201      	moveq	r2, #1
 80133da:	2202      	movne	r2, #2
 80133dc:	6122      	str	r2, [r4, #16]
 80133de:	b1a5      	cbz	r5, 801340a <__d2b+0x92>
 80133e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80133e4:	4405      	add	r5, r0
 80133e6:	603d      	str	r5, [r7, #0]
 80133e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80133ec:	6030      	str	r0, [r6, #0]
 80133ee:	4620      	mov	r0, r4
 80133f0:	b003      	add	sp, #12
 80133f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133f6:	6161      	str	r1, [r4, #20]
 80133f8:	e7ea      	b.n	80133d0 <__d2b+0x58>
 80133fa:	a801      	add	r0, sp, #4
 80133fc:	f7ff fce9 	bl	8012dd2 <__lo0bits>
 8013400:	9b01      	ldr	r3, [sp, #4]
 8013402:	6163      	str	r3, [r4, #20]
 8013404:	3020      	adds	r0, #32
 8013406:	2201      	movs	r2, #1
 8013408:	e7e8      	b.n	80133dc <__d2b+0x64>
 801340a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801340e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013412:	6038      	str	r0, [r7, #0]
 8013414:	6918      	ldr	r0, [r3, #16]
 8013416:	f7ff fcbd 	bl	8012d94 <__hi0bits>
 801341a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801341e:	e7e5      	b.n	80133ec <__d2b+0x74>
 8013420:	08013cb7 	.word	0x08013cb7
 8013424:	08013d3f 	.word	0x08013d3f

08013428 <__ratio>:
 8013428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801342c:	b085      	sub	sp, #20
 801342e:	e9cd 1000 	strd	r1, r0, [sp]
 8013432:	a902      	add	r1, sp, #8
 8013434:	f7ff ff56 	bl	80132e4 <__b2d>
 8013438:	9800      	ldr	r0, [sp, #0]
 801343a:	a903      	add	r1, sp, #12
 801343c:	ec55 4b10 	vmov	r4, r5, d0
 8013440:	f7ff ff50 	bl	80132e4 <__b2d>
 8013444:	9b01      	ldr	r3, [sp, #4]
 8013446:	6919      	ldr	r1, [r3, #16]
 8013448:	9b00      	ldr	r3, [sp, #0]
 801344a:	691b      	ldr	r3, [r3, #16]
 801344c:	1ac9      	subs	r1, r1, r3
 801344e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013452:	1a9b      	subs	r3, r3, r2
 8013454:	ec5b ab10 	vmov	sl, fp, d0
 8013458:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801345c:	2b00      	cmp	r3, #0
 801345e:	bfce      	itee	gt
 8013460:	462a      	movgt	r2, r5
 8013462:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013466:	465a      	movle	r2, fp
 8013468:	462f      	mov	r7, r5
 801346a:	46d9      	mov	r9, fp
 801346c:	bfcc      	ite	gt
 801346e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013472:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013476:	464b      	mov	r3, r9
 8013478:	4652      	mov	r2, sl
 801347a:	4620      	mov	r0, r4
 801347c:	4639      	mov	r1, r7
 801347e:	f7ed f9f5 	bl	800086c <__aeabi_ddiv>
 8013482:	ec41 0b10 	vmov	d0, r0, r1
 8013486:	b005      	add	sp, #20
 8013488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801348c <__copybits>:
 801348c:	3901      	subs	r1, #1
 801348e:	b570      	push	{r4, r5, r6, lr}
 8013490:	1149      	asrs	r1, r1, #5
 8013492:	6914      	ldr	r4, [r2, #16]
 8013494:	3101      	adds	r1, #1
 8013496:	f102 0314 	add.w	r3, r2, #20
 801349a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801349e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80134a2:	1f05      	subs	r5, r0, #4
 80134a4:	42a3      	cmp	r3, r4
 80134a6:	d30c      	bcc.n	80134c2 <__copybits+0x36>
 80134a8:	1aa3      	subs	r3, r4, r2
 80134aa:	3b11      	subs	r3, #17
 80134ac:	f023 0303 	bic.w	r3, r3, #3
 80134b0:	3211      	adds	r2, #17
 80134b2:	42a2      	cmp	r2, r4
 80134b4:	bf88      	it	hi
 80134b6:	2300      	movhi	r3, #0
 80134b8:	4418      	add	r0, r3
 80134ba:	2300      	movs	r3, #0
 80134bc:	4288      	cmp	r0, r1
 80134be:	d305      	bcc.n	80134cc <__copybits+0x40>
 80134c0:	bd70      	pop	{r4, r5, r6, pc}
 80134c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80134c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80134ca:	e7eb      	b.n	80134a4 <__copybits+0x18>
 80134cc:	f840 3b04 	str.w	r3, [r0], #4
 80134d0:	e7f4      	b.n	80134bc <__copybits+0x30>

080134d2 <__any_on>:
 80134d2:	f100 0214 	add.w	r2, r0, #20
 80134d6:	6900      	ldr	r0, [r0, #16]
 80134d8:	114b      	asrs	r3, r1, #5
 80134da:	4298      	cmp	r0, r3
 80134dc:	b510      	push	{r4, lr}
 80134de:	db11      	blt.n	8013504 <__any_on+0x32>
 80134e0:	dd0a      	ble.n	80134f8 <__any_on+0x26>
 80134e2:	f011 011f 	ands.w	r1, r1, #31
 80134e6:	d007      	beq.n	80134f8 <__any_on+0x26>
 80134e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80134ec:	fa24 f001 	lsr.w	r0, r4, r1
 80134f0:	fa00 f101 	lsl.w	r1, r0, r1
 80134f4:	428c      	cmp	r4, r1
 80134f6:	d10b      	bne.n	8013510 <__any_on+0x3e>
 80134f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80134fc:	4293      	cmp	r3, r2
 80134fe:	d803      	bhi.n	8013508 <__any_on+0x36>
 8013500:	2000      	movs	r0, #0
 8013502:	bd10      	pop	{r4, pc}
 8013504:	4603      	mov	r3, r0
 8013506:	e7f7      	b.n	80134f8 <__any_on+0x26>
 8013508:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801350c:	2900      	cmp	r1, #0
 801350e:	d0f5      	beq.n	80134fc <__any_on+0x2a>
 8013510:	2001      	movs	r0, #1
 8013512:	e7f6      	b.n	8013502 <__any_on+0x30>

08013514 <_realloc_r>:
 8013514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013518:	4680      	mov	r8, r0
 801351a:	4615      	mov	r5, r2
 801351c:	460c      	mov	r4, r1
 801351e:	b921      	cbnz	r1, 801352a <_realloc_r+0x16>
 8013520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013524:	4611      	mov	r1, r2
 8013526:	f7fc ba77 	b.w	800fa18 <_malloc_r>
 801352a:	b92a      	cbnz	r2, 8013538 <_realloc_r+0x24>
 801352c:	f7fd f81c 	bl	8010568 <_free_r>
 8013530:	2400      	movs	r4, #0
 8013532:	4620      	mov	r0, r4
 8013534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013538:	f000 f8ca 	bl	80136d0 <_malloc_usable_size_r>
 801353c:	4285      	cmp	r5, r0
 801353e:	4606      	mov	r6, r0
 8013540:	d802      	bhi.n	8013548 <_realloc_r+0x34>
 8013542:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013546:	d8f4      	bhi.n	8013532 <_realloc_r+0x1e>
 8013548:	4629      	mov	r1, r5
 801354a:	4640      	mov	r0, r8
 801354c:	f7fc fa64 	bl	800fa18 <_malloc_r>
 8013550:	4607      	mov	r7, r0
 8013552:	2800      	cmp	r0, #0
 8013554:	d0ec      	beq.n	8013530 <_realloc_r+0x1c>
 8013556:	42b5      	cmp	r5, r6
 8013558:	462a      	mov	r2, r5
 801355a:	4621      	mov	r1, r4
 801355c:	bf28      	it	cs
 801355e:	4632      	movcs	r2, r6
 8013560:	f7fc ffed 	bl	801053e <memcpy>
 8013564:	4621      	mov	r1, r4
 8013566:	4640      	mov	r0, r8
 8013568:	f7fc fffe 	bl	8010568 <_free_r>
 801356c:	463c      	mov	r4, r7
 801356e:	e7e0      	b.n	8013532 <_realloc_r+0x1e>

08013570 <_strtoul_l.constprop.0>:
 8013570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013574:	4e34      	ldr	r6, [pc, #208]	@ (8013648 <_strtoul_l.constprop.0+0xd8>)
 8013576:	4686      	mov	lr, r0
 8013578:	460d      	mov	r5, r1
 801357a:	4628      	mov	r0, r5
 801357c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013580:	5d37      	ldrb	r7, [r6, r4]
 8013582:	f017 0708 	ands.w	r7, r7, #8
 8013586:	d1f8      	bne.n	801357a <_strtoul_l.constprop.0+0xa>
 8013588:	2c2d      	cmp	r4, #45	@ 0x2d
 801358a:	d12f      	bne.n	80135ec <_strtoul_l.constprop.0+0x7c>
 801358c:	782c      	ldrb	r4, [r5, #0]
 801358e:	2701      	movs	r7, #1
 8013590:	1c85      	adds	r5, r0, #2
 8013592:	f033 0010 	bics.w	r0, r3, #16
 8013596:	d109      	bne.n	80135ac <_strtoul_l.constprop.0+0x3c>
 8013598:	2c30      	cmp	r4, #48	@ 0x30
 801359a:	d12c      	bne.n	80135f6 <_strtoul_l.constprop.0+0x86>
 801359c:	7828      	ldrb	r0, [r5, #0]
 801359e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80135a2:	2858      	cmp	r0, #88	@ 0x58
 80135a4:	d127      	bne.n	80135f6 <_strtoul_l.constprop.0+0x86>
 80135a6:	786c      	ldrb	r4, [r5, #1]
 80135a8:	2310      	movs	r3, #16
 80135aa:	3502      	adds	r5, #2
 80135ac:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80135b0:	2600      	movs	r6, #0
 80135b2:	fbb8 f8f3 	udiv	r8, r8, r3
 80135b6:	fb03 f908 	mul.w	r9, r3, r8
 80135ba:	ea6f 0909 	mvn.w	r9, r9
 80135be:	4630      	mov	r0, r6
 80135c0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80135c4:	f1bc 0f09 	cmp.w	ip, #9
 80135c8:	d81c      	bhi.n	8013604 <_strtoul_l.constprop.0+0x94>
 80135ca:	4664      	mov	r4, ip
 80135cc:	42a3      	cmp	r3, r4
 80135ce:	dd2a      	ble.n	8013626 <_strtoul_l.constprop.0+0xb6>
 80135d0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80135d4:	d007      	beq.n	80135e6 <_strtoul_l.constprop.0+0x76>
 80135d6:	4580      	cmp	r8, r0
 80135d8:	d322      	bcc.n	8013620 <_strtoul_l.constprop.0+0xb0>
 80135da:	d101      	bne.n	80135e0 <_strtoul_l.constprop.0+0x70>
 80135dc:	45a1      	cmp	r9, r4
 80135de:	db1f      	blt.n	8013620 <_strtoul_l.constprop.0+0xb0>
 80135e0:	fb00 4003 	mla	r0, r0, r3, r4
 80135e4:	2601      	movs	r6, #1
 80135e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135ea:	e7e9      	b.n	80135c0 <_strtoul_l.constprop.0+0x50>
 80135ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80135ee:	bf04      	itt	eq
 80135f0:	782c      	ldrbeq	r4, [r5, #0]
 80135f2:	1c85      	addeq	r5, r0, #2
 80135f4:	e7cd      	b.n	8013592 <_strtoul_l.constprop.0+0x22>
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d1d8      	bne.n	80135ac <_strtoul_l.constprop.0+0x3c>
 80135fa:	2c30      	cmp	r4, #48	@ 0x30
 80135fc:	bf0c      	ite	eq
 80135fe:	2308      	moveq	r3, #8
 8013600:	230a      	movne	r3, #10
 8013602:	e7d3      	b.n	80135ac <_strtoul_l.constprop.0+0x3c>
 8013604:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013608:	f1bc 0f19 	cmp.w	ip, #25
 801360c:	d801      	bhi.n	8013612 <_strtoul_l.constprop.0+0xa2>
 801360e:	3c37      	subs	r4, #55	@ 0x37
 8013610:	e7dc      	b.n	80135cc <_strtoul_l.constprop.0+0x5c>
 8013612:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013616:	f1bc 0f19 	cmp.w	ip, #25
 801361a:	d804      	bhi.n	8013626 <_strtoul_l.constprop.0+0xb6>
 801361c:	3c57      	subs	r4, #87	@ 0x57
 801361e:	e7d5      	b.n	80135cc <_strtoul_l.constprop.0+0x5c>
 8013620:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8013624:	e7df      	b.n	80135e6 <_strtoul_l.constprop.0+0x76>
 8013626:	1c73      	adds	r3, r6, #1
 8013628:	d106      	bne.n	8013638 <_strtoul_l.constprop.0+0xc8>
 801362a:	2322      	movs	r3, #34	@ 0x22
 801362c:	f8ce 3000 	str.w	r3, [lr]
 8013630:	4630      	mov	r0, r6
 8013632:	b932      	cbnz	r2, 8013642 <_strtoul_l.constprop.0+0xd2>
 8013634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013638:	b107      	cbz	r7, 801363c <_strtoul_l.constprop.0+0xcc>
 801363a:	4240      	negs	r0, r0
 801363c:	2a00      	cmp	r2, #0
 801363e:	d0f9      	beq.n	8013634 <_strtoul_l.constprop.0+0xc4>
 8013640:	b106      	cbz	r6, 8013644 <_strtoul_l.constprop.0+0xd4>
 8013642:	1e69      	subs	r1, r5, #1
 8013644:	6011      	str	r1, [r2, #0]
 8013646:	e7f5      	b.n	8013634 <_strtoul_l.constprop.0+0xc4>
 8013648:	08013b61 	.word	0x08013b61

0801364c <_strtoul_r>:
 801364c:	f7ff bf90 	b.w	8013570 <_strtoul_l.constprop.0>

08013650 <__ascii_wctomb>:
 8013650:	4603      	mov	r3, r0
 8013652:	4608      	mov	r0, r1
 8013654:	b141      	cbz	r1, 8013668 <__ascii_wctomb+0x18>
 8013656:	2aff      	cmp	r2, #255	@ 0xff
 8013658:	d904      	bls.n	8013664 <__ascii_wctomb+0x14>
 801365a:	228a      	movs	r2, #138	@ 0x8a
 801365c:	601a      	str	r2, [r3, #0]
 801365e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013662:	4770      	bx	lr
 8013664:	700a      	strb	r2, [r1, #0]
 8013666:	2001      	movs	r0, #1
 8013668:	4770      	bx	lr
	...

0801366c <__assert_func>:
 801366c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801366e:	4614      	mov	r4, r2
 8013670:	461a      	mov	r2, r3
 8013672:	4b09      	ldr	r3, [pc, #36]	@ (8013698 <__assert_func+0x2c>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	4605      	mov	r5, r0
 8013678:	68d8      	ldr	r0, [r3, #12]
 801367a:	b954      	cbnz	r4, 8013692 <__assert_func+0x26>
 801367c:	4b07      	ldr	r3, [pc, #28]	@ (801369c <__assert_func+0x30>)
 801367e:	461c      	mov	r4, r3
 8013680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013684:	9100      	str	r1, [sp, #0]
 8013686:	462b      	mov	r3, r5
 8013688:	4905      	ldr	r1, [pc, #20]	@ (80136a0 <__assert_func+0x34>)
 801368a:	f000 f829 	bl	80136e0 <fiprintf>
 801368e:	f000 f839 	bl	8013704 <abort>
 8013692:	4b04      	ldr	r3, [pc, #16]	@ (80136a4 <__assert_func+0x38>)
 8013694:	e7f4      	b.n	8013680 <__assert_func+0x14>
 8013696:	bf00      	nop
 8013698:	2000001c 	.word	0x2000001c
 801369c:	08013ed3 	.word	0x08013ed3
 80136a0:	08013ea5 	.word	0x08013ea5
 80136a4:	08013e98 	.word	0x08013e98

080136a8 <_calloc_r>:
 80136a8:	b570      	push	{r4, r5, r6, lr}
 80136aa:	fba1 5402 	umull	r5, r4, r1, r2
 80136ae:	b93c      	cbnz	r4, 80136c0 <_calloc_r+0x18>
 80136b0:	4629      	mov	r1, r5
 80136b2:	f7fc f9b1 	bl	800fa18 <_malloc_r>
 80136b6:	4606      	mov	r6, r0
 80136b8:	b928      	cbnz	r0, 80136c6 <_calloc_r+0x1e>
 80136ba:	2600      	movs	r6, #0
 80136bc:	4630      	mov	r0, r6
 80136be:	bd70      	pop	{r4, r5, r6, pc}
 80136c0:	220c      	movs	r2, #12
 80136c2:	6002      	str	r2, [r0, #0]
 80136c4:	e7f9      	b.n	80136ba <_calloc_r+0x12>
 80136c6:	462a      	mov	r2, r5
 80136c8:	4621      	mov	r1, r4
 80136ca:	f7fc fe9b 	bl	8010404 <memset>
 80136ce:	e7f5      	b.n	80136bc <_calloc_r+0x14>

080136d0 <_malloc_usable_size_r>:
 80136d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136d4:	1f18      	subs	r0, r3, #4
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	bfbc      	itt	lt
 80136da:	580b      	ldrlt	r3, [r1, r0]
 80136dc:	18c0      	addlt	r0, r0, r3
 80136de:	4770      	bx	lr

080136e0 <fiprintf>:
 80136e0:	b40e      	push	{r1, r2, r3}
 80136e2:	b503      	push	{r0, r1, lr}
 80136e4:	4601      	mov	r1, r0
 80136e6:	ab03      	add	r3, sp, #12
 80136e8:	4805      	ldr	r0, [pc, #20]	@ (8013700 <fiprintf+0x20>)
 80136ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80136ee:	6800      	ldr	r0, [r0, #0]
 80136f0:	9301      	str	r3, [sp, #4]
 80136f2:	f7fe f955 	bl	80119a0 <_vfiprintf_r>
 80136f6:	b002      	add	sp, #8
 80136f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80136fc:	b003      	add	sp, #12
 80136fe:	4770      	bx	lr
 8013700:	2000001c 	.word	0x2000001c

08013704 <abort>:
 8013704:	b508      	push	{r3, lr}
 8013706:	2006      	movs	r0, #6
 8013708:	f000 f82c 	bl	8013764 <raise>
 801370c:	2001      	movs	r0, #1
 801370e:	f7f0 fee5 	bl	80044dc <_exit>

08013712 <_raise_r>:
 8013712:	291f      	cmp	r1, #31
 8013714:	b538      	push	{r3, r4, r5, lr}
 8013716:	4605      	mov	r5, r0
 8013718:	460c      	mov	r4, r1
 801371a:	d904      	bls.n	8013726 <_raise_r+0x14>
 801371c:	2316      	movs	r3, #22
 801371e:	6003      	str	r3, [r0, #0]
 8013720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013724:	bd38      	pop	{r3, r4, r5, pc}
 8013726:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013728:	b112      	cbz	r2, 8013730 <_raise_r+0x1e>
 801372a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801372e:	b94b      	cbnz	r3, 8013744 <_raise_r+0x32>
 8013730:	4628      	mov	r0, r5
 8013732:	f000 f831 	bl	8013798 <_getpid_r>
 8013736:	4622      	mov	r2, r4
 8013738:	4601      	mov	r1, r0
 801373a:	4628      	mov	r0, r5
 801373c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013740:	f000 b818 	b.w	8013774 <_kill_r>
 8013744:	2b01      	cmp	r3, #1
 8013746:	d00a      	beq.n	801375e <_raise_r+0x4c>
 8013748:	1c59      	adds	r1, r3, #1
 801374a:	d103      	bne.n	8013754 <_raise_r+0x42>
 801374c:	2316      	movs	r3, #22
 801374e:	6003      	str	r3, [r0, #0]
 8013750:	2001      	movs	r0, #1
 8013752:	e7e7      	b.n	8013724 <_raise_r+0x12>
 8013754:	2100      	movs	r1, #0
 8013756:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801375a:	4620      	mov	r0, r4
 801375c:	4798      	blx	r3
 801375e:	2000      	movs	r0, #0
 8013760:	e7e0      	b.n	8013724 <_raise_r+0x12>
	...

08013764 <raise>:
 8013764:	4b02      	ldr	r3, [pc, #8]	@ (8013770 <raise+0xc>)
 8013766:	4601      	mov	r1, r0
 8013768:	6818      	ldr	r0, [r3, #0]
 801376a:	f7ff bfd2 	b.w	8013712 <_raise_r>
 801376e:	bf00      	nop
 8013770:	2000001c 	.word	0x2000001c

08013774 <_kill_r>:
 8013774:	b538      	push	{r3, r4, r5, lr}
 8013776:	4d07      	ldr	r5, [pc, #28]	@ (8013794 <_kill_r+0x20>)
 8013778:	2300      	movs	r3, #0
 801377a:	4604      	mov	r4, r0
 801377c:	4608      	mov	r0, r1
 801377e:	4611      	mov	r1, r2
 8013780:	602b      	str	r3, [r5, #0]
 8013782:	f7f0 fe9b 	bl	80044bc <_kill>
 8013786:	1c43      	adds	r3, r0, #1
 8013788:	d102      	bne.n	8013790 <_kill_r+0x1c>
 801378a:	682b      	ldr	r3, [r5, #0]
 801378c:	b103      	cbz	r3, 8013790 <_kill_r+0x1c>
 801378e:	6023      	str	r3, [r4, #0]
 8013790:	bd38      	pop	{r3, r4, r5, pc}
 8013792:	bf00      	nop
 8013794:	20003eb4 	.word	0x20003eb4

08013798 <_getpid_r>:
 8013798:	f7f0 be88 	b.w	80044ac <_getpid>
 801379c:	0000      	movs	r0, r0
	...

080137a0 <floor>:
 80137a0:	ec51 0b10 	vmov	r0, r1, d0
 80137a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80137a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80137b0:	2e13      	cmp	r6, #19
 80137b2:	460c      	mov	r4, r1
 80137b4:	4605      	mov	r5, r0
 80137b6:	4680      	mov	r8, r0
 80137b8:	dc34      	bgt.n	8013824 <floor+0x84>
 80137ba:	2e00      	cmp	r6, #0
 80137bc:	da17      	bge.n	80137ee <floor+0x4e>
 80137be:	a332      	add	r3, pc, #200	@ (adr r3, 8013888 <floor+0xe8>)
 80137c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c4:	f7ec fd72 	bl	80002ac <__adddf3>
 80137c8:	2200      	movs	r2, #0
 80137ca:	2300      	movs	r3, #0
 80137cc:	f7ed f9b4 	bl	8000b38 <__aeabi_dcmpgt>
 80137d0:	b150      	cbz	r0, 80137e8 <floor+0x48>
 80137d2:	2c00      	cmp	r4, #0
 80137d4:	da55      	bge.n	8013882 <floor+0xe2>
 80137d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80137da:	432c      	orrs	r4, r5
 80137dc:	2500      	movs	r5, #0
 80137de:	42ac      	cmp	r4, r5
 80137e0:	4c2b      	ldr	r4, [pc, #172]	@ (8013890 <floor+0xf0>)
 80137e2:	bf08      	it	eq
 80137e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80137e8:	4621      	mov	r1, r4
 80137ea:	4628      	mov	r0, r5
 80137ec:	e023      	b.n	8013836 <floor+0x96>
 80137ee:	4f29      	ldr	r7, [pc, #164]	@ (8013894 <floor+0xf4>)
 80137f0:	4137      	asrs	r7, r6
 80137f2:	ea01 0307 	and.w	r3, r1, r7
 80137f6:	4303      	orrs	r3, r0
 80137f8:	d01d      	beq.n	8013836 <floor+0x96>
 80137fa:	a323      	add	r3, pc, #140	@ (adr r3, 8013888 <floor+0xe8>)
 80137fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013800:	f7ec fd54 	bl	80002ac <__adddf3>
 8013804:	2200      	movs	r2, #0
 8013806:	2300      	movs	r3, #0
 8013808:	f7ed f996 	bl	8000b38 <__aeabi_dcmpgt>
 801380c:	2800      	cmp	r0, #0
 801380e:	d0eb      	beq.n	80137e8 <floor+0x48>
 8013810:	2c00      	cmp	r4, #0
 8013812:	bfbe      	ittt	lt
 8013814:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013818:	4133      	asrlt	r3, r6
 801381a:	18e4      	addlt	r4, r4, r3
 801381c:	ea24 0407 	bic.w	r4, r4, r7
 8013820:	2500      	movs	r5, #0
 8013822:	e7e1      	b.n	80137e8 <floor+0x48>
 8013824:	2e33      	cmp	r6, #51	@ 0x33
 8013826:	dd0a      	ble.n	801383e <floor+0x9e>
 8013828:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801382c:	d103      	bne.n	8013836 <floor+0x96>
 801382e:	4602      	mov	r2, r0
 8013830:	460b      	mov	r3, r1
 8013832:	f7ec fd3b 	bl	80002ac <__adddf3>
 8013836:	ec41 0b10 	vmov	d0, r0, r1
 801383a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801383e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013842:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013846:	40df      	lsrs	r7, r3
 8013848:	4207      	tst	r7, r0
 801384a:	d0f4      	beq.n	8013836 <floor+0x96>
 801384c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013888 <floor+0xe8>)
 801384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013852:	f7ec fd2b 	bl	80002ac <__adddf3>
 8013856:	2200      	movs	r2, #0
 8013858:	2300      	movs	r3, #0
 801385a:	f7ed f96d 	bl	8000b38 <__aeabi_dcmpgt>
 801385e:	2800      	cmp	r0, #0
 8013860:	d0c2      	beq.n	80137e8 <floor+0x48>
 8013862:	2c00      	cmp	r4, #0
 8013864:	da0a      	bge.n	801387c <floor+0xdc>
 8013866:	2e14      	cmp	r6, #20
 8013868:	d101      	bne.n	801386e <floor+0xce>
 801386a:	3401      	adds	r4, #1
 801386c:	e006      	b.n	801387c <floor+0xdc>
 801386e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013872:	2301      	movs	r3, #1
 8013874:	40b3      	lsls	r3, r6
 8013876:	441d      	add	r5, r3
 8013878:	4545      	cmp	r5, r8
 801387a:	d3f6      	bcc.n	801386a <floor+0xca>
 801387c:	ea25 0507 	bic.w	r5, r5, r7
 8013880:	e7b2      	b.n	80137e8 <floor+0x48>
 8013882:	2500      	movs	r5, #0
 8013884:	462c      	mov	r4, r5
 8013886:	e7af      	b.n	80137e8 <floor+0x48>
 8013888:	8800759c 	.word	0x8800759c
 801388c:	7e37e43c 	.word	0x7e37e43c
 8013890:	bff00000 	.word	0xbff00000
 8013894:	000fffff 	.word	0x000fffff

08013898 <_init>:
 8013898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801389a:	bf00      	nop
 801389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801389e:	bc08      	pop	{r3}
 80138a0:	469e      	mov	lr, r3
 80138a2:	4770      	bx	lr

080138a4 <_fini>:
 80138a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138a6:	bf00      	nop
 80138a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138aa:	bc08      	pop	{r3}
 80138ac:	469e      	mov	lr, r3
 80138ae:	4770      	bx	lr
