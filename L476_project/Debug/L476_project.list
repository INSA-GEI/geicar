
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ab8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08013c48  08013c48  00014c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801425c  0801425c  000161d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801425c  0801425c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014264  08014264  000161d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014264  08014264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014268  08014268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0801426c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003df0  200001d8  08014444  000161d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003fc8  08014444  00016fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f691  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a9e  00000000  00000000  00055899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003a38  00000000  00000000  0005c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002cc8  00000000  00000000  0005fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000324fa  00000000  00000000  00062a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038ca8  00000000  00000000  00094f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001295c5  00000000  00000000  000cdbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f719f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000110fc  00000000  00000000  001f71e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  002082e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013c30 	.word	0x08013c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08013c30 	.word	0x08013c30

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Tasks_Init>:

extern SemaphoreHandle_t xHandleSemaphoreTX;
extern StaticSemaphore_t xSemaphoreTX;

void Tasks_Init(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b096      	sub	sp, #88	@ 0x58
 8001008:	af00      	add	r7, sp, #0
	osThreadDef(UART, StartUart, osPriorityNormal, 0, 64);
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <Tasks_Init+0x7c>)
 800100c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UARTHandle = osThreadCreate(osThread(UART), NULL);
 800101e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f00c faac 	bl	800d582 <osThreadCreate>
 800102a:	4603      	mov	r3, r0
 800102c:	4a15      	ldr	r2, [pc, #84]	@ (8001084 <Tasks_Init+0x80>)
 800102e:	6013      	str	r3, [r2, #0]

	osThreadDef(IMU, StartIMU, osPriorityHigh, 0, 512);
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <Tasks_Init+0x84>)
 8001032:	f107 0420 	add.w	r4, r7, #32
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMUHandle = osThreadCreate(osThread(IMU), NULL);
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00c fa99 	bl	800d582 <osThreadCreate>
 8001050:	4603      	mov	r3, r0
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <Tasks_Init+0x88>)
 8001054:	6013      	str	r3, [r2, #0]

	osThreadDef(GPS, StartGPS, osPriorityNormal, 0, 64);
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <Tasks_Init+0x8c>)
 8001058:	1d3c      	adds	r4, r7, #4
 800105a:	461d      	mov	r5, r3
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00c fa88 	bl	800d582 <osThreadCreate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <Tasks_Init+0x90>)
 8001076:	6013      	str	r3, [r2, #0]
	osThreadDef(I2C, StartI2C, osPriorityBelowNormal, 0, 64);
	I2CHandle = osThreadCreate(osThread(I2C), NULL);

	osThreadDef(SPI, StartSPI, osPriorityBelowNormal, 0, 64);
	SPIHandle = osThreadCreate(osThread(SPI), NULL);*/
}
 8001078:	bf00      	nop
 800107a:	3758      	adds	r7, #88	@ 0x58
 800107c:	46bd      	mov	sp, r7
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	08013c50 	.word	0x08013c50
 8001084:	200001fc 	.word	0x200001fc
 8001088:	08013c70 	.word	0x08013c70
 800108c:	200001f4 	.word	0x200001f4
 8001090:	08013c90 	.word	0x08013c90
 8001094:	200001f8 	.word	0x200001f8

08001098 <IMU_Receive_Transmit_Data>:

void IMU_Receive_Transmit_Data()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	IMU_GetData();
 800109c:	f000 faba 	bl	8001614 <IMU_GetData>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <GetData_GPS>:

void GetData_GPS(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	4903      	ldr	r1, [pc, #12]	@ (80010b8 <GetData_GPS+0x14>)
 80010ac:	4803      	ldr	r0, [pc, #12]	@ (80010bc <GetData_GPS+0x18>)
 80010ae:	f00a ff01 	bl	800beb4 <HAL_UART_Receive_IT>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000136c 	.word	0x2000136c
 80010bc:	20001260 	.word	0x20001260

080010c0 <HAL_UART_TxCpltCallback>:
		 }
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
	 if (huart -> Instance == UART4)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a12      	ldr	r2, [pc, #72]	@ (800111c <HAL_UART_TxCpltCallback+0x5c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11e      	bne.n	8001114 <HAL_UART_TxCpltCallback+0x54>
	 {
		 if (adresse_buffer != NULL) {
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_UART_TxCpltCallback+0x60>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <HAL_UART_TxCpltCallback+0x2e>
		             free(adresse_buffer);
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <HAL_UART_TxCpltCallback+0x60>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00e fe50 	bl	800fd88 <free>
		             adresse_buffer = NULL; // Bonne pratique pour éviter les double free
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <HAL_UART_TxCpltCallback+0x60>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
		  }

		 xSemaphoreGiveFromISR(xHandleSemaphoreTX, &xHigherPriorityTaskWoken);
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <HAL_UART_TxCpltCallback+0x64>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f107 020c 	add.w	r2, r7, #12
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00c fd9b 	bl	800dc34 <xQueueGiveFromISR>
		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // Assurer un changement de contexte si nécessaire
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_UART_TxCpltCallback+0x54>
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_UART_TxCpltCallback+0x68>)
 8001106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	f3bf 8f6f 	isb	sy

	 }

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004c00 	.word	0x40004c00
 8001120:	200002fc 	.word	0x200002fc
 8001124:	2000143c 	.word	0x2000143c
 8001128:	e000ed04 	.word	0xe000ed04

0800112c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1f      	ldr	r2, [pc, #124]	@ (80011b8 <HAL_UART_RxCpltCallback+0x8c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d137      	bne.n	80011ae <HAL_UART_RxCpltCallback+0x82>

			static char rx_buffer[LINEMAX];   // Local holding buffer to build line
			static int rx_index = 0;


			if ((rxBufferGps == '\r') || (rxBufferGps == '\n')) // Is this an end-of-line condition, either will suffice?
 800113e:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <HAL_UART_RxCpltCallback+0x90>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d003      	beq.n	800114e <HAL_UART_RxCpltCallback+0x22>
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_UART_RxCpltCallback+0x90>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d116      	bne.n	800117c <HAL_UART_RxCpltCallback+0x50>
			{
			  if (rx_index != 0) // Line has some content
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d026      	beq.n	80011a4 <HAL_UART_RxCpltCallback+0x78>
			  {
				memcpy((void *)nmeaFrame, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	4919      	ldr	r1, [pc, #100]	@ (80011c4 <HAL_UART_RxCpltCallback+0x98>)
 800115e:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <HAL_UART_RxCpltCallback+0x9c>)
 8001160:	f00f fbbd 	bl	80108de <memcpy>
				nmeaFrame[rx_index] = 0; // Add terminating NUL
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	@ (80011c8 <HAL_UART_RxCpltCallback+0x9c>)
 800116a:	2100      	movs	r1, #0
 800116c:	54d1      	strb	r1, [r2, r3]
				nmeaFrameValid = 1; // flag new line valid for processing
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_UART_RxCpltCallback+0xa0>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

				rx_index = 0; // Reset content pointer
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
			  if (rx_index != 0) // Line has some content
 800117a:	e013      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x78>
			  }
			}
			else
			{
			  if ((rxBufferGps == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_UART_RxCpltCallback+0x90>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b24      	cmp	r3, #36	@ 0x24
 8001182:	d003      	beq.n	800118c <HAL_UART_RxCpltCallback+0x60>
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2bc8      	cmp	r3, #200	@ 0xc8
 800118a:	d102      	bne.n	8001192 <HAL_UART_RxCpltCallback+0x66>
				rx_index = 0;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

			  rx_buffer[rx_index++] = rxBufferGps; // Copy to buffer and increment
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	4909      	ldr	r1, [pc, #36]	@ (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 800119a:	600a      	str	r2, [r1, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <HAL_UART_RxCpltCallback+0x90>)
 800119e:	7811      	ldrb	r1, [r2, #0]
 80011a0:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <HAL_UART_RxCpltCallback+0x98>)
 80011a2:	54d1      	strb	r1, [r2, r3]
			}


    	HAL_UART_Receive_IT(&huart2, &rxBufferGps, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	4905      	ldr	r1, [pc, #20]	@ (80011bc <HAL_UART_RxCpltCallback+0x90>)
 80011a8:	4809      	ldr	r0, [pc, #36]	@ (80011d0 <HAL_UART_RxCpltCallback+0xa4>)
 80011aa:	f00a fe83 	bl	800beb4 <HAL_UART_Receive_IT>

    if (huart -> Instance == USART3)
    {

    }
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004400 	.word	0x40004400
 80011bc:	2000136c 	.word	0x2000136c
 80011c0:	20000200 	.word	0x20000200
 80011c4:	20000204 	.word	0x20000204
 80011c8:	20001370 	.word	0x20001370
 80011cc:	20001438 	.word	0x20001438
 80011d0:	20001260 	.word	0x20001260

080011d4 <Transmit_data_to_usb>:



void Transmit_data_to_usb(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
		MESSAGE_Typedef message_appli;
		message_appli = MESSAGE_ReadMailboxNoDelay(Appli_Mailbox);
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <Transmit_data_to_usb+0x50>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fb4a 	bl	800187c <MESSAGE_ReadMailboxNoDelay>
		switch(message_appli.id){
 80011e8:	88bb      	ldrh	r3, [r7, #4]
 80011ea:	2b40      	cmp	r3, #64	@ 0x40
 80011ec:	d00f      	beq.n	800120e <Transmit_data_to_usb+0x3a>
 80011ee:	2b40      	cmp	r3, #64	@ 0x40
 80011f0:	dc12      	bgt.n	8001218 <Transmit_data_to_usb+0x44>
 80011f2:	2b20      	cmp	r3, #32
 80011f4:	d006      	beq.n	8001204 <Transmit_data_to_usb+0x30>
 80011f6:	2b30      	cmp	r3, #48	@ 0x30
 80011f8:	d10e      	bne.n	8001218 <Transmit_data_to_usb+0x44>
		case MSG_ID_GPS :
			TransmitGPSFrame(message_appli.data);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 ff2b 	bl	8002058 <TransmitGPSFrame>
			break;
 8001202:	e00a      	b.n	800121a <Transmit_data_to_usb+0x46>
		case MSG_ID_IMU :
			TransmitIMUFrame(message_appli.data);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fa72 	bl	80016f0 <TransmitIMUFrame>
			break;
 800120c:	e005      	b.n	800121a <Transmit_data_to_usb+0x46>
		case MSG_ID_LIDAR :
			TransmitLiDARFrame(message_appli.data);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 faeb 	bl	80017ec <TransmitLiDARFrame>
			break;
 8001216:	e000      	b.n	800121a <Transmit_data_to_usb+0x46>
		default :
			break;
 8001218:	bf00      	nop
		}
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200004d4 	.word	0x200004d4

08001228 <StartUart>:

void StartUart(void const * argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300);
 8001230:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001234:	60fb      	str	r3, [r7, #12]
	xHandleSemaphoreTX = xSemaphoreCreateBinaryStatic( &xSemaphoreTX );
 8001236:	2303      	movs	r3, #3
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <StartUart+0x60>)
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2001      	movs	r0, #1
 8001242:	f00c fb1d 	bl	800d880 <xQueueGenericCreateStatic>
 8001246:	4603      	mov	r3, r0
 8001248:	4a10      	ldr	r2, [pc, #64]	@ (800128c <StartUart+0x64>)
 800124a:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(xHandleSemaphoreTX);
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <StartUart+0x64>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	f00c fbeb 	bl	800da30 <xQueueGenericSend>
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800125a:	f00d fc1b 	bl	800ea94 <xTaskGetTickCount>
 800125e:	4603      	mov	r3, r0
 8001260:	60bb      	str	r3, [r7, #8]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
	  if( xSemaphoreTake( xHandleSemaphoreTX, (TickType_t)10 ) == pdTRUE ){
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <StartUart+0x64>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	210a      	movs	r1, #10
 8001268:	4618      	mov	r0, r3
 800126a:	f00c fe55 	bl	800df18 <xQueueSemaphoreTake>
 800126e:	4603      	mov	r3, r0
 8001270:	2b01      	cmp	r3, #1
 8001272:	d1f6      	bne.n	8001262 <StartUart+0x3a>
		  Transmit_data_to_usb();
 8001274:	f7ff ffae 	bl	80011d4 <Transmit_data_to_usb>
		  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	68f9      	ldr	r1, [r7, #12]
 800127e:	4618      	mov	r0, r3
 8001280:	f00d fa44 	bl	800e70c <vTaskDelayUntil>
	  if( xSemaphoreTake( xHandleSemaphoreTX, (TickType_t)10 ) == pdTRUE ){
 8001284:	e7ed      	b.n	8001262 <StartUart+0x3a>
 8001286:	bf00      	nop
 8001288:	20001440 	.word	0x20001440
 800128c:	2000143c 	.word	0x2000143c

08001290 <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(200);
 8001298:	23c8      	movs	r3, #200	@ 0xc8
 800129a:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800129c:	f00d fbfa 	bl	800ea94 <xTaskGetTickCount>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	IMU_Receive_Transmit_Data();
 80012a4:	f7ff fef8 	bl	8001098 <IMU_Receive_Transmit_Data>
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00d fa2c 	bl	800e70c <vTaskDelayUntil>
	IMU_Receive_Transmit_Data();
 80012b4:	bf00      	nop
 80012b6:	e7f5      	b.n	80012a4 <StartIMU+0x14>

080012b8 <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 80012c0:	2364      	movs	r3, #100	@ 0x64
 80012c2:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80012c4:	f00d fbe6 	bl	800ea94 <xTaskGetTickCount>
 80012c8:	4603      	mov	r3, r0
 80012ca:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  GetData_GPS();
 80012cc:	f7ff feea 	bl	80010a4 <GetData_GPS>
	  task_update_gps();
 80012d0:	f000 fb1a 	bl	8001908 <task_update_gps>
	  task_send_values_GPS();
 80012d4:	f000 fb36 	bl	8001944 <task_send_values_GPS>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	68f9      	ldr	r1, [r7, #12]
 80012de:	4618      	mov	r0, r3
 80012e0:	f00d fa14 	bl	800e70c <vTaskDelayUntil>
	  GetData_GPS();
 80012e4:	bf00      	nop
 80012e6:	e7f1      	b.n	80012cc <StartGPS+0x14>

080012e8 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 80012ec:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <GLOBVAR_Init+0x88>)
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <GLOBVAR_Init+0x8c>)
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <GLOBVAR_Init+0x90>)
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 8001304:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <GLOBVAR_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <GLOBVAR_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 8001310:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <GLOBVAR_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <GLOBVAR_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <GLOBVAR_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <GLOBVAR_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <GLOBVAR_Init+0x9c>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <GLOBVAR_Init+0x9c>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <GLOBVAR_Init+0x9c>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 800133a:	4913      	ldr	r1, [pc, #76]	@ (8001388 <GLOBVAR_Init+0xa0>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 8001348:	490f      	ldr	r1, [pc, #60]	@ (8001388 <GLOBVAR_Init+0xa0>)
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 8001356:	490c      	ldr	r1, [pc, #48]	@ (8001388 <GLOBVAR_Init+0xa0>)
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9c1 2302 	strd	r2, r3, [r1, #8]


}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200002f0 	.word	0x200002f0
 8001374:	200002f4 	.word	0x200002f4
 8001378:	200002f8 	.word	0x200002f8
 800137c:	200002cc 	.word	0x200002cc
 8001380:	200002d8 	.word	0x200002d8
 8001384:	200002e4 	.word	0x200002e4
 8001388:	20000300 	.word	0x20000300

0800138c <CalculateCRC>:
 0x78, 0xd6, 0x9b, 0x4c, 0x01, 0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17,
 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8
};

uint8_t CalculateCRC(uint8_t package[], uint8_t len)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++)
 800139c:	2300      	movs	r3, #0
 800139e:	81bb      	strh	r3, [r7, #12]
 80013a0:	e009      	b.n	80013b6 <CalculateCRC+0x2a>
	{
		crc += package[i];
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	4413      	add	r3, r2
 80013ae:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++)
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	3301      	adds	r3, #1
 80013b4:	81bb      	strh	r3, [r7, #12]
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	89ba      	ldrh	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3f0      	bcc.n	80013a2 <CalculateCRC+0x16>
	}
	return 0xFF - crc;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <IMU_init>:

void IMU_init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 80013d8:	4b5c      	ldr	r3, [pc, #368]	@ (800154c <IMU_init+0x178>)
 80013da:	22bf      	movs	r2, #191	@ 0xbf
 80013dc:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 80013de:	4b5b      	ldr	r3, [pc, #364]	@ (800154c <IMU_init+0x178>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80013e4:	4b59      	ldr	r3, [pc, #356]	@ (800154c <IMU_init+0x178>)
 80013e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001550 <IMU_init+0x17c>)
 80013e8:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80013ea:	4b58      	ldr	r3, [pc, #352]	@ (800154c <IMU_init+0x178>)
 80013ec:	4a59      	ldr	r2, [pc, #356]	@ (8001554 <IMU_init+0x180>)
 80013ee:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80013f0:	4b56      	ldr	r3, [pc, #344]	@ (800154c <IMU_init+0x178>)
 80013f2:	4a59      	ldr	r2, [pc, #356]	@ (8001558 <IMU_init+0x184>)
 80013f4:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80013f6:	4b55      	ldr	r3, [pc, #340]	@ (800154c <IMU_init+0x178>)
 80013f8:	4a58      	ldr	r2, [pc, #352]	@ (800155c <IMU_init+0x188>)
 80013fa:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80013fc:	4b53      	ldr	r3, [pc, #332]	@ (800154c <IMU_init+0x178>)
 80013fe:	4a58      	ldr	r2, [pc, #352]	@ (8001560 <IMU_init+0x18c>)
 8001400:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 8001402:	4b52      	ldr	r3, [pc, #328]	@ (800154c <IMU_init+0x178>)
 8001404:	4a57      	ldr	r2, [pc, #348]	@ (8001564 <IMU_init+0x190>)
 8001406:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 8001408:	4950      	ldr	r1, [pc, #320]	@ (800154c <IMU_init+0x178>)
 800140a:	4857      	ldr	r0, [pc, #348]	@ (8001568 <IMU_init+0x194>)
 800140c:	f003 f8da 	bl	80045c4 <HTS221_RegisterBusIO>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <IMU_init+0x46>
		while(1);
 8001416:	bf00      	nop
 8001418:	e7fd      	b.n	8001416 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 800141a:	4853      	ldr	r0, [pc, #332]	@ (8001568 <IMU_init+0x194>)
 800141c:	f003 f91c 	bl	8004658 <HTS221_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <IMU_init+0x56>
		while (1);
 8001426:	bf00      	nop
 8001428:	e7fd      	b.n	8001426 <IMU_init+0x52>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 800142a:	4b50      	ldr	r3, [pc, #320]	@ (800156c <IMU_init+0x198>)
 800142c:	2233      	movs	r2, #51	@ 0x33
 800142e:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 8001430:	4b4e      	ldr	r3, [pc, #312]	@ (800156c <IMU_init+0x198>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001436:	4b4d      	ldr	r3, [pc, #308]	@ (800156c <IMU_init+0x198>)
 8001438:	4a45      	ldr	r2, [pc, #276]	@ (8001550 <IMU_init+0x17c>)
 800143a:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <IMU_init+0x198>)
 800143e:	4a45      	ldr	r2, [pc, #276]	@ (8001554 <IMU_init+0x180>)
 8001440:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001442:	4b4a      	ldr	r3, [pc, #296]	@ (800156c <IMU_init+0x198>)
 8001444:	4a44      	ldr	r2, [pc, #272]	@ (8001558 <IMU_init+0x184>)
 8001446:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001448:	4b48      	ldr	r3, [pc, #288]	@ (800156c <IMU_init+0x198>)
 800144a:	4a44      	ldr	r2, [pc, #272]	@ (800155c <IMU_init+0x188>)
 800144c:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800144e:	4b47      	ldr	r3, [pc, #284]	@ (800156c <IMU_init+0x198>)
 8001450:	4a43      	ldr	r2, [pc, #268]	@ (8001560 <IMU_init+0x18c>)
 8001452:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 8001454:	4b45      	ldr	r3, [pc, #276]	@ (800156c <IMU_init+0x198>)
 8001456:	4a43      	ldr	r2, [pc, #268]	@ (8001564 <IMU_init+0x190>)
 8001458:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 800145a:	4944      	ldr	r1, [pc, #272]	@ (800156c <IMU_init+0x198>)
 800145c:	4844      	ldr	r0, [pc, #272]	@ (8001570 <IMU_init+0x19c>)
 800145e:	f004 f851 	bl	8005504 <LSM303AGR_ACC_RegisterBusIO>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <IMU_init+0x98>
		while(1);
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <IMU_init+0x94>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 800146c:	4b3f      	ldr	r3, [pc, #252]	@ (800156c <IMU_init+0x198>)
 800146e:	223d      	movs	r2, #61	@ 0x3d
 8001470:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 8001472:	493e      	ldr	r1, [pc, #248]	@ (800156c <IMU_init+0x198>)
 8001474:	483f      	ldr	r0, [pc, #252]	@ (8001574 <IMU_init+0x1a0>)
 8001476:	f004 fa35 	bl	80058e4 <LSM303AGR_MAG_RegisterBusIO>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <IMU_init+0xb0>
		while(1);
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <IMU_init+0xac>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 8001484:	483a      	ldr	r0, [pc, #232]	@ (8001570 <IMU_init+0x19c>)
 8001486:	f004 f8a7 	bl	80055d8 <LSM303AGR_ACC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <IMU_init+0xc0>
		while (1);
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <IMU_init+0xbc>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 8001494:	4837      	ldr	r0, [pc, #220]	@ (8001574 <IMU_init+0x1a0>)
 8001496:	f004 fa89 	bl	80059ac <LSM303AGR_MAG_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <IMU_init+0xd0>
		while (1);
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <IMU_init+0xcc>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 80014a4:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <IMU_init+0x1a4>)
 80014a6:	22d7      	movs	r2, #215	@ 0xd7
 80014a8:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 80014aa:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <IMU_init+0x1a4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80014b0:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <IMU_init+0x1a4>)
 80014b2:	4a27      	ldr	r2, [pc, #156]	@ (8001550 <IMU_init+0x17c>)
 80014b4:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80014b6:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <IMU_init+0x1a4>)
 80014b8:	4a26      	ldr	r2, [pc, #152]	@ (8001554 <IMU_init+0x180>)
 80014ba:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80014bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <IMU_init+0x1a4>)
 80014be:	4a26      	ldr	r2, [pc, #152]	@ (8001558 <IMU_init+0x184>)
 80014c0:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80014c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <IMU_init+0x1a4>)
 80014c4:	4a25      	ldr	r2, [pc, #148]	@ (800155c <IMU_init+0x188>)
 80014c6:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80014c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <IMU_init+0x1a4>)
 80014ca:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <IMU_init+0x18c>)
 80014cc:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <IMU_init+0x1a4>)
 80014d0:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <IMU_init+0x190>)
 80014d2:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 80014d4:	4928      	ldr	r1, [pc, #160]	@ (8001578 <IMU_init+0x1a4>)
 80014d6:	4829      	ldr	r0, [pc, #164]	@ (800157c <IMU_init+0x1a8>)
 80014d8:	f004 ff3c 	bl	8006354 <LSM6DSL_RegisterBusIO>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <IMU_init+0x112>
		while(1);
 80014e2:	bf00      	nop
 80014e4:	e7fd      	b.n	80014e2 <IMU_init+0x10e>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 80014e6:	4825      	ldr	r0, [pc, #148]	@ (800157c <IMU_init+0x1a8>)
 80014e8:	f004 ff9e 	bl	8006428 <LSM6DSL_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <IMU_init+0x122>
		while (1);
 80014f2:	bf00      	nop
 80014f4:	e7fd      	b.n	80014f2 <IMU_init+0x11e>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <IMU_init+0x1ac>)
 80014f8:	22bb      	movs	r2, #187	@ 0xbb
 80014fa:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <IMU_init+0x1ac>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <IMU_init+0x1ac>)
 8001504:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <IMU_init+0x17c>)
 8001506:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <IMU_init+0x1ac>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <IMU_init+0x180>)
 800150c:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <IMU_init+0x1ac>)
 8001510:	4a11      	ldr	r2, [pc, #68]	@ (8001558 <IMU_init+0x184>)
 8001512:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <IMU_init+0x1ac>)
 8001516:	4a11      	ldr	r2, [pc, #68]	@ (800155c <IMU_init+0x188>)
 8001518:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <IMU_init+0x1ac>)
 800151c:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <IMU_init+0x18c>)
 800151e:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <IMU_init+0x1ac>)
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <IMU_init+0x190>)
 8001524:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 8001526:	4916      	ldr	r1, [pc, #88]	@ (8001580 <IMU_init+0x1ac>)
 8001528:	4816      	ldr	r0, [pc, #88]	@ (8001584 <IMU_init+0x1b0>)
 800152a:	f003 fcef 	bl	8004f0c <LPS22HB_RegisterBusIO>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <IMU_init+0x164>
		while(1);
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <IMU_init+0x160>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 8001538:	4812      	ldr	r0, [pc, #72]	@ (8001584 <IMU_init+0x1b0>)
 800153a:	f003 fd51 	bl	8004fe0 <LPS22HB_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <IMU_init+0x174>
		while (1);
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <IMU_init+0x170>
	}



}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000031c 	.word	0x2000031c
 8001550:	080040ad 	.word	0x080040ad
 8001554:	08004129 	.word	0x08004129
 8001558:	080041dd 	.word	0x080041dd
 800155c:	08004179 	.word	0x08004179
 8001560:	08006be5 	.word	0x08006be5
 8001564:	08006bfd 	.word	0x08006bfd
 8001568:	2000033c 	.word	0x2000033c
 800156c:	20000370 	.word	0x20000370
 8001570:	20000390 	.word	0x20000390
 8001574:	200003c4 	.word	0x200003c4
 8001578:	200003f8 	.word	0x200003f8
 800157c:	20000418 	.word	0x20000418
 8001580:	20000450 	.word	0x20000450
 8001584:	20000470 	.word	0x20000470

08001588 <IMU_enable>:

void IMU_enable(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 800158c:	481c      	ldr	r0, [pc, #112]	@ (8001600 <IMU_enable+0x78>)
 800158e:	f003 f87e 	bl	800468e <HTS221_HUM_Enable>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <IMU_enable+0x14>
		while (1);
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 800159c:	4818      	ldr	r0, [pc, #96]	@ (8001600 <IMU_enable+0x78>)
 800159e:	f003 f923 	bl	80047e8 <HTS221_TEMP_Enable>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <IMU_enable+0x24>
		while (1);
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <IMU_enable+0x20>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 80015ac:	4815      	ldr	r0, [pc, #84]	@ (8001604 <IMU_enable+0x7c>)
 80015ae:	f004 f854 	bl	800565a <LSM303AGR_ACC_Enable>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <IMU_enable+0x34>
		while (1);
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <IMU_enable+0x30>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 80015bc:	4812      	ldr	r0, [pc, #72]	@ (8001608 <IMU_enable+0x80>)
 80015be:	f004 fa32 	bl	8005a26 <LSM303AGR_MAG_Enable>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <IMU_enable+0x44>
		while (1);
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <IMU_enable+0x40>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 80015cc:	480f      	ldr	r0, [pc, #60]	@ (800160c <IMU_enable+0x84>)
 80015ce:	f004 ff94 	bl	80064fa <LSM6DSL_ACC_Enable>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <IMU_enable+0x54>
		while (1);
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <IMU_enable+0x50>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <IMU_enable+0x84>)
 80015de:	f004 ffb0 	bl	8006542 <LSM6DSL_GYRO_Enable>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <IMU_enable+0x64>
		while (1);
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <IMU_enable+0x60>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 80015ec:	4808      	ldr	r0, [pc, #32]	@ (8001610 <IMU_enable+0x88>)
 80015ee:	f003 fd12 	bl	8005016 <LPS22HB_PRESS_Enable>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <IMU_enable+0x74>
		while (1);
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <IMU_enable+0x70>
	}
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000033c 	.word	0x2000033c
 8001604:	20000390 	.word	0x20000390
 8001608:	200003c4 	.word	0x200003c4
 800160c:	20000418 	.word	0x20000418
 8001610:	20000470 	.word	0x20000470

08001614 <IMU_GetData>:

void IMU_GetData(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	 //IMUFrameTypeDef imu_frame;

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 8001618:	4928      	ldr	r1, [pc, #160]	@ (80016bc <IMU_GetData+0xa8>)
 800161a:	4829      	ldr	r0, [pc, #164]	@ (80016c0 <IMU_GetData+0xac>)
 800161c:	f003 f85c 	bl	80046d8 <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 8001620:	4928      	ldr	r1, [pc, #160]	@ (80016c4 <IMU_GetData+0xb0>)
 8001622:	4827      	ldr	r0, [pc, #156]	@ (80016c0 <IMU_GetData+0xac>)
 8001624:	f003 f905 	bl	8004832 <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 8001628:	4927      	ldr	r1, [pc, #156]	@ (80016c8 <IMU_GetData+0xb4>)
 800162a:	4828      	ldr	r0, [pc, #160]	@ (80016cc <IMU_GetData+0xb8>)
 800162c:	f004 f8ea 	bl	8005804 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 8001630:	4927      	ldr	r1, [pc, #156]	@ (80016d0 <IMU_GetData+0xbc>)
 8001632:	4828      	ldr	r0, [pc, #160]	@ (80016d4 <IMU_GetData+0xc0>)
 8001634:	f004 fa27 	bl	8005a86 <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 8001638:	4927      	ldr	r1, [pc, #156]	@ (80016d8 <IMU_GetData+0xc4>)
 800163a:	4828      	ldr	r0, [pc, #160]	@ (80016dc <IMU_GetData+0xc8>)
 800163c:	f003 fd0f 	bl	800505e <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 8001640:	4927      	ldr	r1, [pc, #156]	@ (80016e0 <IMU_GetData+0xcc>)
 8001642:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <IMU_GetData+0xd0>)
 8001644:	f004 fff4 	bl	8006630 <LSM6DSL_GYRO_GetAxes>

	 imu_frame.humidity = current_humidity_perc;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <IMU_GetData+0xa8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a26      	ldr	r2, [pc, #152]	@ (80016e8 <IMU_GetData+0xd4>)
 800164e:	6053      	str	r3, [r2, #4]
	 imu_frame.temperature = current_temperature_degC;
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <IMU_GetData+0xb0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a24      	ldr	r2, [pc, #144]	@ (80016e8 <IMU_GetData+0xd4>)
 8001656:	6013      	str	r3, [r2, #0]
	 imu_frame.pressure = current_pressure_hPa;
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <IMU_GetData+0xc4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a22      	ldr	r2, [pc, #136]	@ (80016e8 <IMU_GetData+0xd4>)
 800165e:	6093      	str	r3, [r2, #8]
	 imu_frame.magnetic_x = current_magnetic_mG.x;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <IMU_GetData+0xbc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a20      	ldr	r2, [pc, #128]	@ (80016e8 <IMU_GetData+0xd4>)
 8001666:	60d3      	str	r3, [r2, #12]
	 imu_frame.magnetic_y = current_magnetic_mG.y;
 8001668:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <IMU_GetData+0xbc>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a1e      	ldr	r2, [pc, #120]	@ (80016e8 <IMU_GetData+0xd4>)
 800166e:	6113      	str	r3, [r2, #16]
	 imu_frame.magnetic_z = current_magnetic_mG.z;
 8001670:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <IMU_GetData+0xbc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a1c      	ldr	r2, [pc, #112]	@ (80016e8 <IMU_GetData+0xd4>)
 8001676:	6153      	str	r3, [r2, #20]
	 imu_frame.acceleration_x = current_acceleration_mg.x;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <IMU_GetData+0xb4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <IMU_GetData+0xd4>)
 800167e:	6193      	str	r3, [r2, #24]
	 imu_frame.acceleration_y = current_acceleration_mg.y;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <IMU_GetData+0xb4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <IMU_GetData+0xd4>)
 8001686:	61d3      	str	r3, [r2, #28]
	 imu_frame.acceleration_z = current_acceleration_mg.z;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <IMU_GetData+0xb4>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a16      	ldr	r2, [pc, #88]	@ (80016e8 <IMU_GetData+0xd4>)
 800168e:	6213      	str	r3, [r2, #32]
	 imu_frame.gyro_x = current_angular_rate_mdps.x;
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <IMU_GetData+0xcc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <IMU_GetData+0xd4>)
 8001696:	6253      	str	r3, [r2, #36]	@ 0x24
	 imu_frame.gyro_y = current_angular_rate_mdps.y;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <IMU_GetData+0xcc>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <IMU_GetData+0xd4>)
 800169e:	6293      	str	r3, [r2, #40]	@ 0x28
	 imu_frame.gyro_z = current_angular_rate_mdps.z;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <IMU_GetData+0xcc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <IMU_GetData+0xd4>)
 80016a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU, NULL,&imu_frame);
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <IMU_GetData+0xd8>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <IMU_GetData+0xd4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	2120      	movs	r1, #32
 80016b2:	f000 f907 	bl	80018c4 <MESSAGE_SendMailbox>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_GYR, NULL,message_gyro);
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_MAG, NULL,message_mag);*/

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200002f8 	.word	0x200002f8
 80016c0:	2000033c 	.word	0x2000033c
 80016c4:	200002f4 	.word	0x200002f4
 80016c8:	200002cc 	.word	0x200002cc
 80016cc:	20000390 	.word	0x20000390
 80016d0:	200002e4 	.word	0x200002e4
 80016d4:	200003c4 	.word	0x200003c4
 80016d8:	200002f0 	.word	0x200002f0
 80016dc:	20000470 	.word	0x20000470
 80016e0:	200002d8 	.word	0x200002d8
 80016e4:	20000418 	.word	0x20000418
 80016e8:	200004a4 	.word	0x200004a4
 80016ec:	200004d4 	.word	0x200004d4

080016f0 <TransmitIMUFrame>:

void TransmitIMUFrame(IMUFrameTypeDef *frame) {
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	b093      	sub	sp, #76	@ 0x4c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    // Convertir la structure en un tableau de bytes
	uint8_t *buffer = (uint8_t *)malloc(sizeof(API_FrameTypeDef_IMU));
 80016f8:	2036      	movs	r0, #54	@ 0x36
 80016fa:	f00e fb3d 	bl	800fd78 <malloc>
 80016fe:	4603      	mov	r3, r0
 8001700:	647b      	str	r3, [r7, #68]	@ 0x44
    //uint8_t buffer[sizeof(API_FrameTypeDef_IMU)];
	if (buffer == NULL) {
 8001702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001704:	2b00      	cmp	r3, #0
 8001706:	d041      	beq.n	800178c <TransmitIMUFrame+0x9c>
		// Gerer l'erreur d'allocation de mémoire
		return;
	}
    API_FrameTypeDef_IMU api_frame = {
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2236      	movs	r2, #54	@ 0x36
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f00f f847 	bl	80107a4 <memset>
 8001716:	237e      	movs	r3, #126	@ 0x7e
 8001718:	733b      	strb	r3, [r7, #12]
 800171a:	2330      	movs	r3, #48	@ 0x30
 800171c:	81fb      	strh	r3, [r7, #14]
 800171e:	2320      	movs	r3, #32
 8001720:	743b      	strb	r3, [r7, #16]
    .length = sizeof(IMUFrameTypeDef),
    .frame_type = MSG_ID_IMU,
	.data={0},
	.crc = 0};

    memcpy(&(api_frame.data), frame, sizeof(IMUFrameTypeDef));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f107 0011 	add.w	r0, r7, #17
 8001728:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800172c:	4602      	mov	r2, r0
 800172e:	4619      	mov	r1, r3
 8001730:	f8d1 c000 	ldr.w	ip, [r1]
 8001734:	684e      	ldr	r6, [r1, #4]
 8001736:	688d      	ldr	r5, [r1, #8]
 8001738:	68c9      	ldr	r1, [r1, #12]
 800173a:	f8c2 c000 	str.w	ip, [r2]
 800173e:	6056      	str	r6, [r2, #4]
 8001740:	6095      	str	r5, [r2, #8]
 8001742:	60d1      	str	r1, [r2, #12]
 8001744:	3310      	adds	r3, #16
 8001746:	3010      	adds	r0, #16
 8001748:	42a3      	cmp	r3, r4
 800174a:	d1ef      	bne.n	800172c <TransmitIMUFrame+0x3c>
    api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(IMUFrameTypeDef));
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	3305      	adds	r3, #5
 8001752:	2130      	movs	r1, #48	@ 0x30
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fe19 	bl	800138c <CalculateCRC>
 800175a:	4603      	mov	r3, r0
 800175c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
    memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_IMU));
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2236      	movs	r2, #54	@ 0x36
 8001766:	4619      	mov	r1, r3
 8001768:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800176a:	f00f f8b8 	bl	80108de <memcpy>

    adresse_buffer = buffer;
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <TransmitIMUFrame+0xa4>)
 8001770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001772:	6013      	str	r3, [r2, #0]
    // Transmettre le tableau de bytes via UART
    if(HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_IMU))!=HAL_OK){
 8001774:	2236      	movs	r2, #54	@ 0x36
 8001776:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <TransmitIMUFrame+0xa8>)
 800177a:	f00a fb2d 	bl	800bdd8 <HAL_UART_Transmit_IT>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <TransmitIMUFrame+0x9e>
    	free(buffer);
 8001784:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001786:	f00e faff 	bl	800fd88 <free>
 800178a:	e000      	b.n	800178e <TransmitIMUFrame+0x9e>
		return;
 800178c:	bf00      	nop

    }
}
 800178e:	374c      	adds	r7, #76	@ 0x4c
 8001790:	46bd      	mov	sp, r7
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	200002fc 	.word	0x200002fc
 8001798:	200010d4 	.word	0x200010d4

0800179c <CalCRC8>:
#include "stm32l4xx_hal.h"

extern UART_HandleTypeDef huart4;

uint8_t CalCRC8(uint8_t package[], uint8_t len)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	for (i = 0; i < len; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	81bb      	strh	r3, [r7, #12]
 80017b0:	e00d      	b.n	80017ce <CalCRC8+0x32>
	{
		crc = CrcTable[(crc ^ package[i]) & 0xff];
 80017b2:	89bb      	ldrh	r3, [r7, #12]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	4053      	eors	r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <CalCRC8+0x4c>)
 80017c4:	5c9b      	ldrb	r3, [r3, r2]
 80017c6:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len; i++)
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	81bb      	strh	r3, [r7, #12]
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	89ba      	ldrh	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d3ec      	bcc.n	80017b2 <CalCRC8+0x16>
	}
	return crc;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	08013d38 	.word	0x08013d38

080017ec <TransmitLiDARFrame>:
		}
	}
	return lf;
}

void TransmitLiDARFrame(LiDARFrameTypeDef *frame) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0be      	sub	sp, #248	@ 0xf8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_LIDAR)];
	API_FrameTypeDef_LIDAR api_frame;
	api_frame.header = API_HEADER;
 80017f4:	237e      	movs	r3, #126	@ 0x7e
 80017f6:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(LiDARFrameTypeDef);
 80017f8:	2371      	movs	r3, #113	@ 0x71
 80017fa:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_LIDAR;
 80017fc:	2340      	movs	r3, #64	@ 0x40
 80017fe:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(LiDARFrameTypeDef));
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	f107 030d 	add.w	r3, r7, #13
 8001806:	4611      	mov	r1, r2
 8001808:	2271      	movs	r2, #113	@ 0x71
 800180a:	4618      	mov	r0, r3
 800180c:	f00f f867 	bl	80108de <memcpy>
	api_frame.crc = CalCRC8((uint8_t*)&(api_frame.data), sizeof(LiDARFrameTypeDef));
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	3305      	adds	r3, #5
 8001816:	2171      	movs	r1, #113	@ 0x71
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ffbf 	bl	800179c <CalCRC8>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_LIDAR));
 8001824:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001828:	f107 0108 	add.w	r1, r7, #8
 800182c:	2278      	movs	r2, #120	@ 0x78
 800182e:	4618      	mov	r0, r3
 8001830:	f00f f855 	bl	80108de <memcpy>

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_LIDAR));
 8001834:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001838:	2278      	movs	r2, #120	@ 0x78
 800183a:	4619      	mov	r1, r3
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <TransmitLiDARFrame+0x60>)
 800183e:	f00a facb 	bl	800bdd8 <HAL_UART_Transmit_IT>

}
 8001842:	bf00      	nop
 8001844:	37f8      	adds	r7, #248	@ 0xf8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200010d4 	.word	0x200010d4

08001850 <MESSAGE_Init>:

//QueueHandle_t IMU_Mailbox;
//QueueHandle_t GPS_Mailbox;
QueueHandle_t Appli_Mailbox;

void  MESSAGE_Init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	//IMU_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	//GPS_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	Appli_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
 8001854:	2200      	movs	r2, #0
 8001856:	210c      	movs	r1, #12
 8001858:	2020      	movs	r0, #32
 800185a:	f00c f88e 	bl	800d97a <xQueueGenericCreate>
 800185e:	4603      	mov	r3, r0
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <MESSAGE_Init+0x24>)
 8001862:	6013      	str	r3, [r2, #0]

	/* Add queues to registry in order to view them in stm32cube ide */
	//vQueueAddToRegistry(IMU_Mailbox,"IMU Mailbox");
	//vQueueAddToRegistry(GPS_Mailbox,"GPS Mailbox");
	vQueueAddToRegistry(Appli_Mailbox,"Appli Mailbox");
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <MESSAGE_Init+0x24>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4903      	ldr	r1, [pc, #12]	@ (8001878 <MESSAGE_Init+0x28>)
 800186a:	4618      	mov	r0, r3
 800186c:	f00c fd8c 	bl	800e388 <vQueueAddToRegistry>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200004d4 	.word	0x200004d4
 8001878:	08013cac 	.word	0x08013cac

0800187c <MESSAGE_ReadMailboxNoDelay>:
 *
 * @remark This function is non blocking.
 * If mailbox is empty when calling the function, a message structure is still returned with \ref MSG_ID_NO_MESSAGE
 * in message id field
 */
MESSAGE_Typedef MESSAGE_ReadMailboxNoDelay(QueueHandle_t mbx) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	MESSAGE_Typedef msg= {0};
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]

	if (!xQueueReceive(mbx, &msg, 0))  // Pas de message dans la mailbox
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	2200      	movs	r2, #0
 8001898:	4619      	mov	r1, r3
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f00c fa5a 	bl	800dd54 <xQueueReceive>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <MESSAGE_ReadMailboxNoDelay+0x2e>
		msg.id=MSG_ID_NO_MESSAGE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	81bb      	strh	r3, [r7, #12]

	return msg;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	461c      	mov	r4, r3
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd90      	pop	{r4, r7, pc}
	...

080018c4 <MESSAGE_SendMailbox>:
 * @return None
 *
 * @remark This function is non blocking.
 * If mailbox is full when calling the function, error will be ignored silently
 */
void MESSAGE_SendMailbox(QueueHandle_t mbx_dest, uint16_t id, QueueHandle_t mbx_sender, void *data){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	460b      	mov	r3, r1
 80018d2:	817b      	strh	r3, [r7, #10]
	MESSAGE_Typedef msg;

	msg.id=id;
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	82bb      	strh	r3, [r7, #20]
	msg.sender = &mbx_sender;
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	61bb      	str	r3, [r7, #24]
	msg.data=data;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	61fb      	str	r3, [r7, #28]

	if (!xQueueSend(mbx_dest, &msg, 0)) { // envoi sans attendre
 80018e0:	f107 0114 	add.w	r1, r7, #20
 80018e4:	2300      	movs	r3, #0
 80018e6:	2200      	movs	r2, #0
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f00c f8a1 	bl	800da30 <xQueueGenericSend>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <MESSAGE_SendMailbox+0x36>
		printf("Failed to send data, Queue full.\r\n");
 80018f4:	4803      	ldr	r0, [pc, #12]	@ (8001904 <MESSAGE_SendMailbox+0x40>)
 80018f6:	f00e fe29 	bl	801054c <puts>
	}
}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	08013cbc 	.word	0x08013cbc

08001908 <task_update_gps>:
	}
}



void task_update_gps(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	if (nmeaFrameValid){
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <task_update_gps+0x28>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <task_update_gps+0x22>
		ProcessNMEALine(nmeaFrame,&gpsCoords, &gpsQuality);
 8001914:	4a07      	ldr	r2, [pc, #28]	@ (8001934 <task_update_gps+0x2c>)
 8001916:	4908      	ldr	r1, [pc, #32]	@ (8001938 <task_update_gps+0x30>)
 8001918:	4808      	ldr	r0, [pc, #32]	@ (800193c <task_update_gps+0x34>)
 800191a:	f000 fbd7 	bl	80020cc <ProcessNMEALine>
		gpsSend = 1;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <task_update_gps+0x38>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
		nmeaFrameValid = 0;
 8001924:	4b02      	ldr	r3, [pc, #8]	@ (8001930 <task_update_gps+0x28>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
	}

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20001438 	.word	0x20001438
 8001934:	20000318 	.word	0x20000318
 8001938:	20000300 	.word	0x20000300
 800193c:	20001370 	.word	0x20001370
 8001940:	200004d8 	.word	0x200004d8

08001944 <task_send_values_GPS>:

void task_send_values_GPS (void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b09a      	sub	sp, #104	@ 0x68
 8001948:	af00      	add	r7, sp, #0

	if (gpsSend){
 800194a:	4bc8      	ldr	r3, [pc, #800]	@ (8001c6c <task_send_values_GPS+0x328>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8378 	beq.w	8002044 <task_send_values_GPS+0x700>
		//Latitude
		double computing = gpsCoords.lat;
 8001954:	4bc6      	ldr	r3, [pc, #792]	@ (8001c70 <task_send_values_GPS+0x32c>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat7 = floor(computing);
 800195e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001962:	f012 f8e9 	bl	8013b38 <floor>
 8001966:	ec53 2b10 	vmov	r2, r3, d0
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f903 	bl	8000b78 <__aeabi_d2iz>
 8001972:	4603      	mov	r3, r0
 8001974:	65fb      	str	r3, [r7, #92]	@ 0x5c
		computing = 100.0*(computing-(double)Lat7);
 8001976:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001978:	f7fe fde4 	bl	8000544 <__aeabi_i2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001984:	f7fe fc90 	bl	80002a8 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4bb7      	ldr	r3, [pc, #732]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001996:	f7fe fe3f 	bl	8000618 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat6 = floor(computing);
 80019a2:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80019a6:	f012 f8c7 	bl	8013b38 <floor>
 80019aa:	ec53 2b10 	vmov	r2, r3, d0
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f8e1 	bl	8000b78 <__aeabi_d2iz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	65bb      	str	r3, [r7, #88]	@ 0x58
		computing = 100.0*(computing-(double)Lat6);
 80019ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80019bc:	f7fe fdc2 	bl	8000544 <__aeabi_i2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80019c8:	f7fe fc6e 	bl	80002a8 <__aeabi_dsub>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4ba6      	ldr	r3, [pc, #664]	@ (8001c74 <task_send_values_GPS+0x330>)
 80019da:	f7fe fe1d 	bl	8000618 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat5 = floor(computing);
 80019e6:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80019ea:	f012 f8a5 	bl	8013b38 <floor>
 80019ee:	ec53 2b10 	vmov	r2, r3, d0
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8bf 	bl	8000b78 <__aeabi_d2iz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	657b      	str	r3, [r7, #84]	@ 0x54
		computing = 100.0*(computing-(double)Lat5);
 80019fe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001a00:	f7fe fda0 	bl	8000544 <__aeabi_i2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001a0c:	f7fe fc4c 	bl	80002a8 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b95      	ldr	r3, [pc, #596]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001a1e:	f7fe fdfb 	bl	8000618 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat4 = floor(computing);
 8001a2a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001a2e:	f012 f883 	bl	8013b38 <floor>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f89d 	bl	8000b78 <__aeabi_d2iz>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	653b      	str	r3, [r7, #80]	@ 0x50
		computing = 100.0*(computing-(double)Lat4);
 8001a42:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001a44:	f7fe fd7e 	bl	8000544 <__aeabi_i2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001a50:	f7fe fc2a 	bl	80002a8 <__aeabi_dsub>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b84      	ldr	r3, [pc, #528]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001a62:	f7fe fdd9 	bl	8000618 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat3 = floor(computing);
 8001a6e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001a72:	f012 f861 	bl	8013b38 <floor>
 8001a76:	ec53 2b10 	vmov	r2, r3, d0
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f87b 	bl	8000b78 <__aeabi_d2iz>
 8001a82:	4603      	mov	r3, r0
 8001a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
		computing = 100.0*(computing-(double)Lat3);
 8001a86:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001a88:	f7fe fd5c 	bl	8000544 <__aeabi_i2d>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001a94:	f7fe fc08 	bl	80002a8 <__aeabi_dsub>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001aa6:	f7fe fdb7 	bl	8000618 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat2 = floor(computing);
 8001ab2:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001ab6:	f012 f83f 	bl	8013b38 <floor>
 8001aba:	ec53 2b10 	vmov	r2, r3, d0
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f859 	bl	8000b78 <__aeabi_d2iz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
		computing = 100.0*(computing-(double)Lat2);
 8001aca:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001acc:	f7fe fd3a 	bl	8000544 <__aeabi_i2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ad8:	f7fe fbe6 	bl	80002a8 <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b62      	ldr	r3, [pc, #392]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001aea:	f7fe fd95 	bl	8000618 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat1 = floor(computing);
 8001af6:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001afa:	f012 f81d 	bl	8013b38 <floor>
 8001afe:	ec53 2b10 	vmov	r2, r3, d0
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f837 	bl	8000b78 <__aeabi_d2iz>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	647b      	str	r3, [r7, #68]	@ 0x44
		computing = 100.0*(computing-(double)Lat1);
 8001b0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b10:	f7fe fd18 	bl	8000544 <__aeabi_i2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001b1c:	f7fe fbc4 	bl	80002a8 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b51      	ldr	r3, [pc, #324]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001b2e:	f7fe fd73 	bl	8000618 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lat0 = floor(computing);
 8001b3a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001b3e:	f011 fffb 	bl	8013b38 <floor>
 8001b42:	ec53 2b10 	vmov	r2, r3, d0
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f815 	bl	8000b78 <__aeabi_d2iz>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	643b      	str	r3, [r7, #64]	@ 0x40

		gps_data1.gps_data_lat[0] = Lat7;
 8001b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b48      	ldr	r3, [pc, #288]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b58:	701a      	strb	r2, [r3, #0]
		gps_data1.gps_data_lat[1] = Lat6;
 8001b5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b46      	ldr	r3, [pc, #280]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b60:	705a      	strb	r2, [r3, #1]
		gps_data1.gps_data_lat[2] = Lat5;
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b68:	709a      	strb	r2, [r3, #2]
		gps_data1.gps_data_lat[3] = Lat4;
 8001b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b42      	ldr	r3, [pc, #264]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b70:	70da      	strb	r2, [r3, #3]
		gps_data1.gps_data_lat[4] = Lat3;
 8001b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b40      	ldr	r3, [pc, #256]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b78:	711a      	strb	r2, [r3, #4]
		gps_data1.gps_data_lat[5] = Lat2;
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b80:	715a      	strb	r2, [r3, #5]
		gps_data1.gps_data_lat[6] = Lat1;
 8001b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b88:	719a      	strb	r2, [r3, #6]
		gps_data1.gps_data_lat[7] = Lat0;
 8001b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c78 <task_send_values_GPS+0x334>)
 8001b90:	71da      	strb	r2, [r3, #7]
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Longitude
		computing = gpsCoords.lon;
 8001b92:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <task_send_values_GPS+0x32c>)
 8001b94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b98:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon7 = floor(computing);
 8001b9c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001ba0:	f011 ffca 	bl	8013b38 <floor>
 8001ba4:	ec53 2b10 	vmov	r2, r3, d0
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe ffe4 	bl	8000b78 <__aeabi_d2iz>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		computing = 100.0*(computing-(double)Lon7);
 8001bb4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001bb6:	f7fe fcc5 	bl	8000544 <__aeabi_i2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001bc2:	f7fe fb71 	bl	80002a8 <__aeabi_dsub>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001bd4:	f7fe fd20 	bl	8000618 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon6 = floor(computing);
 8001be0:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001be4:	f011 ffa8 	bl	8013b38 <floor>
 8001be8:	ec53 2b10 	vmov	r2, r3, d0
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ffc2 	bl	8000b78 <__aeabi_d2iz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
		computing = 100.0*(computing-(double)Lon6);
 8001bf8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001bfa:	f7fe fca3 	bl	8000544 <__aeabi_i2d>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001c06:	f7fe fb4f 	bl	80002a8 <__aeabi_dsub>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001c18:	f7fe fcfe 	bl	8000618 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon5 = floor(computing);
 8001c24:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001c28:	f011 ff86 	bl	8013b38 <floor>
 8001c2c:	ec53 2b10 	vmov	r2, r3, d0
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ffa0 	bl	8000b78 <__aeabi_d2iz>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	637b      	str	r3, [r7, #52]	@ 0x34
		computing = 100.0*(computing-(double)Lon5);
 8001c3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c3e:	f7fe fc81 	bl	8000544 <__aeabi_i2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001c4a:	f7fe fb2d 	bl	80002a8 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <task_send_values_GPS+0x330>)
 8001c5c:	f7fe fcdc 	bl	8000618 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001c68:	e008      	b.n	8001c7c <task_send_values_GPS+0x338>
 8001c6a:	bf00      	nop
 8001c6c:	200004d8 	.word	0x200004d8
 8001c70:	20000300 	.word	0x20000300
 8001c74:	40590000 	.word	0x40590000
 8001c78:	200004dc 	.word	0x200004dc
		int Lon4 = floor(computing);
 8001c7c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001c80:	f011 ff5a 	bl	8013b38 <floor>
 8001c84:	ec53 2b10 	vmov	r2, r3, d0
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe ff74 	bl	8000b78 <__aeabi_d2iz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	633b      	str	r3, [r7, #48]	@ 0x30
		computing = 100.0*(computing-(double)Lon4);
 8001c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c96:	f7fe fc55 	bl	8000544 <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ca2:	f7fe fb01 	bl	80002a8 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4bca      	ldr	r3, [pc, #808]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001cb4:	f7fe fcb0 	bl	8000618 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon3 = floor(computing);
 8001cc0:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001cc4:	f011 ff38 	bl	8013b38 <floor>
 8001cc8:	ec53 2b10 	vmov	r2, r3, d0
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff52 	bl	8000b78 <__aeabi_d2iz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		computing = 100.0*(computing-(double)Lon3);
 8001cd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001cda:	f7fe fc33 	bl	8000544 <__aeabi_i2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ce6:	f7fe fadf 	bl	80002a8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4bb9      	ldr	r3, [pc, #740]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001cf8:	f7fe fc8e 	bl	8000618 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon2 = floor(computing);
 8001d04:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001d08:	f011 ff16 	bl	8013b38 <floor>
 8001d0c:	ec53 2b10 	vmov	r2, r3, d0
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff30 	bl	8000b78 <__aeabi_d2iz>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
		computing = 100.0*(computing-(double)Lon2);
 8001d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d1e:	f7fe fc11 	bl	8000544 <__aeabi_i2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001d2a:	f7fe fabd 	bl	80002a8 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4ba8      	ldr	r3, [pc, #672]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001d3c:	f7fe fc6c 	bl	8000618 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon1 = floor(computing);
 8001d48:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001d4c:	f011 fef4 	bl	8013b38 <floor>
 8001d50:	ec53 2b10 	vmov	r2, r3, d0
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe ff0e 	bl	8000b78 <__aeabi_d2iz>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
		computing = 100.0*(computing-(double)Lon1);
 8001d60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d62:	f7fe fbef 	bl	8000544 <__aeabi_i2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001d6e:	f7fe fa9b 	bl	80002a8 <__aeabi_dsub>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4b97      	ldr	r3, [pc, #604]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001d80:	f7fe fc4a 	bl	8000618 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Lon0 = floor(computing);
 8001d8c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001d90:	f011 fed2 	bl	8013b38 <floor>
 8001d94:	ec53 2b10 	vmov	r2, r3, d0
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe feec 	bl	8000b78 <__aeabi_d2iz>
 8001da0:	4603      	mov	r3, r0
 8001da2:	623b      	str	r3, [r7, #32]

		gps_data1.gps_data_long[0] = Lon7;
 8001da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001daa:	721a      	strb	r2, [r3, #8]
		gps_data1.gps_data_long[1] = Lon6;
 8001dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001db2:	725a      	strb	r2, [r3, #9]
		gps_data1.gps_data_long[2] = Lon5;
 8001db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b89      	ldr	r3, [pc, #548]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001dba:	729a      	strb	r2, [r3, #10]
		gps_data1.gps_data_long[3] = Lon4;
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	4b87      	ldr	r3, [pc, #540]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001dc2:	72da      	strb	r2, [r3, #11]
		gps_data1.gps_data_long[4] = Lon3;
 8001dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b85      	ldr	r3, [pc, #532]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001dca:	731a      	strb	r2, [r3, #12]
		gps_data1.gps_data_long[5] = Lon2;
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b83      	ldr	r3, [pc, #524]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001dd2:	735a      	strb	r2, [r3, #13]
		gps_data1.gps_data_long[6] = Lon1;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b81      	ldr	r3, [pc, #516]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001dda:	739a      	strb	r2, [r3, #14]
		gps_data1.gps_data_long[7] = Lon0;
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe0 <task_send_values_GPS+0x69c>)
 8001de2:	73da      	strb	r2, [r3, #15]

		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Altitude
		computing = gpsCoords.alt;
 8001de4:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe4 <task_send_values_GPS+0x6a0>)
 8001de6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001dea:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt7 = floor(computing);
 8001dee:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001df2:	f011 fea1 	bl	8013b38 <floor>
 8001df6:	ec53 2b10 	vmov	r2, r3, d0
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe febb 	bl	8000b78 <__aeabi_d2iz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	61fb      	str	r3, [r7, #28]
		computing = 100.0*(computing-(double)Alt7);
 8001e06:	69f8      	ldr	r0, [r7, #28]
 8001e08:	f7fe fb9c 	bl	8000544 <__aeabi_i2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001e14:	f7fe fa48 	bl	80002a8 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001e26:	f7fe fbf7 	bl	8000618 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt6 = floor(computing);
 8001e32:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001e36:	f011 fe7f 	bl	8013b38 <floor>
 8001e3a:	ec53 2b10 	vmov	r2, r3, d0
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe99 	bl	8000b78 <__aeabi_d2iz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]
		computing = 100.0*(computing-(double)Alt6);
 8001e4a:	69b8      	ldr	r0, [r7, #24]
 8001e4c:	f7fe fb7a 	bl	8000544 <__aeabi_i2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001e58:	f7fe fa26 	bl	80002a8 <__aeabi_dsub>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b5c      	ldr	r3, [pc, #368]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001e6a:	f7fe fbd5 	bl	8000618 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt5 = floor(computing);
 8001e76:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001e7a:	f011 fe5d 	bl	8013b38 <floor>
 8001e7e:	ec53 2b10 	vmov	r2, r3, d0
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe77 	bl	8000b78 <__aeabi_d2iz>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	617b      	str	r3, [r7, #20]
		computing = 100.0*(computing-(double)Alt5);
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7fe fb58 	bl	8000544 <__aeabi_i2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001e9c:	f7fe fa04 	bl	80002a8 <__aeabi_dsub>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b4b      	ldr	r3, [pc, #300]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001eae:	f7fe fbb3 	bl	8000618 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt4 = floor(computing);
 8001eba:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001ebe:	f011 fe3b 	bl	8013b38 <floor>
 8001ec2:	ec53 2b10 	vmov	r2, r3, d0
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fe55 	bl	8000b78 <__aeabi_d2iz>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	613b      	str	r3, [r7, #16]
		computing = 100.0*(computing-(double)Alt4);
 8001ed2:	6938      	ldr	r0, [r7, #16]
 8001ed4:	f7fe fb36 	bl	8000544 <__aeabi_i2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ee0:	f7fe f9e2 	bl	80002a8 <__aeabi_dsub>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001ef2:	f7fe fb91 	bl	8000618 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt3 = floor(computing);
 8001efe:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f02:	f011 fe19 	bl	8013b38 <floor>
 8001f06:	ec53 2b10 	vmov	r2, r3, d0
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fe33 	bl	8000b78 <__aeabi_d2iz>
 8001f12:	4603      	mov	r3, r0
 8001f14:	60fb      	str	r3, [r7, #12]
		computing = 100.0*(computing-(double)Alt3);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7fe fb14 	bl	8000544 <__aeabi_i2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001f24:	f7fe f9c0 	bl	80002a8 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001f36:	f7fe fb6f 	bl	8000618 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt2 = floor(computing);
 8001f42:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f46:	f011 fdf7 	bl	8013b38 <floor>
 8001f4a:	ec53 2b10 	vmov	r2, r3, d0
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe11 	bl	8000b78 <__aeabi_d2iz>
 8001f56:	4603      	mov	r3, r0
 8001f58:	60bb      	str	r3, [r7, #8]
		computing = 100.0*(computing-(double)Alt2);
 8001f5a:	68b8      	ldr	r0, [r7, #8]
 8001f5c:	f7fe faf2 	bl	8000544 <__aeabi_i2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001f68:	f7fe f99e 	bl	80002a8 <__aeabi_dsub>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001f7a:	f7fe fb4d 	bl	8000618 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt1 = floor(computing);
 8001f86:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f8a:	f011 fdd5 	bl	8013b38 <floor>
 8001f8e:	ec53 2b10 	vmov	r2, r3, d0
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fdef 	bl	8000b78 <__aeabi_d2iz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	607b      	str	r3, [r7, #4]
		computing = 100.0*(computing-(double)Alt1);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fad0 	bl	8000544 <__aeabi_i2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001fac:	f7fe f97c 	bl	80002a8 <__aeabi_dsub>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <task_send_values_GPS+0x698>)
 8001fbe:	f7fe fb2b 	bl	8000618 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		int Alt0 = floor(computing);
 8001fca:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001fce:	f011 fdb3 	bl	8013b38 <floor>
 8001fd2:	ec53 2b10 	vmov	r2, r3, d0
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	e005      	b.n	8001fe8 <task_send_values_GPS+0x6a4>
 8001fdc:	40590000 	.word	0x40590000
 8001fe0:	200004dc 	.word	0x200004dc
 8001fe4:	20000300 	.word	0x20000300
 8001fe8:	f7fe fdc6 	bl	8000b78 <__aeabi_d2iz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	603b      	str	r3, [r7, #0]

		gps_data1.gps_data_alt[0] = Alt7;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <task_send_values_GPS+0x708>)
 8001ff6:	741a      	strb	r2, [r3, #16]
		gps_data1.gps_data_alt[1] = Alt6;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <task_send_values_GPS+0x708>)
 8001ffe:	745a      	strb	r2, [r3, #17]
		gps_data1.gps_data_alt[2] = Alt5;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <task_send_values_GPS+0x708>)
 8002006:	749a      	strb	r2, [r3, #18]
		gps_data1.gps_data_alt[3] = Alt4;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <task_send_values_GPS+0x708>)
 800200e:	74da      	strb	r2, [r3, #19]
		gps_data1.gps_data_alt[4] = Alt3;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <task_send_values_GPS+0x708>)
 8002016:	751a      	strb	r2, [r3, #20]
		gps_data1.gps_data_alt[5] = Alt2;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <task_send_values_GPS+0x708>)
 800201e:	755a      	strb	r2, [r3, #21]
		gps_data1.gps_data_alt[6] = Alt1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <task_send_values_GPS+0x708>)
 8002026:	759a      	strb	r2, [r3, #22]
		gps_data1.gps_data_alt[7] = Alt0;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b07      	ldr	r3, [pc, #28]	@ (800204c <task_send_values_GPS+0x708>)
 800202e:	75da      	strb	r2, [r3, #23]

		MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_GPS, NULL,&gps_data1);
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <task_send_values_GPS+0x70c>)
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <task_send_values_GPS+0x708>)
 8002036:	2200      	movs	r2, #0
 8002038:	2130      	movs	r1, #48	@ 0x30
 800203a:	f7ff fc43 	bl	80018c4 <MESSAGE_SendMailbox>
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		gpsSend = 0;
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <task_send_values_GPS+0x710>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
	}


}
 8002044:	bf00      	nop
 8002046:	3768      	adds	r7, #104	@ 0x68
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200004dc 	.word	0x200004dc
 8002050:	200004d4 	.word	0x200004d4
 8002054:	200004d8 	.word	0x200004d8

08002058 <TransmitGPSFrame>:

void TransmitGPSFrame(GPSFrameTypeDef *frame) {
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b092      	sub	sp, #72	@ 0x48
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_GPS)];
	API_FrameTypeDef_GPS api_frame;
	api_frame.header = API_HEADER;
 8002060:	237e      	movs	r3, #126	@ 0x7e
 8002062:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(GPSFrameTypeDef);
 8002064:	2318      	movs	r3, #24
 8002066:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_GPS;
 8002068:	2330      	movs	r3, #48	@ 0x30
 800206a:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(GPSFrameTypeDef));
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	f107 030d 	add.w	r3, r7, #13
 8002072:	6810      	ldr	r0, [r2, #0]
 8002074:	6851      	ldr	r1, [r2, #4]
 8002076:	6895      	ldr	r5, [r2, #8]
 8002078:	68d4      	ldr	r4, [r2, #12]
 800207a:	6018      	str	r0, [r3, #0]
 800207c:	6059      	str	r1, [r3, #4]
 800207e:	609d      	str	r5, [r3, #8]
 8002080:	60dc      	str	r4, [r3, #12]
 8002082:	6910      	ldr	r0, [r2, #16]
 8002084:	6951      	ldr	r1, [r2, #20]
 8002086:	6118      	str	r0, [r3, #16]
 8002088:	6159      	str	r1, [r3, #20]
	api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(GPSFrameTypeDef));
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	3305      	adds	r3, #5
 8002090:	2118      	movs	r1, #24
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f97a 	bl	800138c <CalculateCRC>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_GPS));
 800209e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80020a2:	f107 0508 	add.w	r5, r7, #8
 80020a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020ae:	c407      	stmia	r4!, {r0, r1, r2}
 80020b0:	8023      	strh	r3, [r4, #0]

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_GPS));
 80020b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020b6:	221e      	movs	r2, #30
 80020b8:	4619      	mov	r1, r3
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <TransmitGPSFrame+0x70>)
 80020bc:	f009 fe8c 	bl	800bdd8 <HAL_UART_Transmit_IT>

}
 80020c0:	bf00      	nop
 80020c2:	3748      	adds	r7, #72	@ 0x48
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}
 80020c8:	200010d4 	.word	0x200010d4

080020cc <ProcessNMEALine>:
#include <trames_nmea.h>

//Interprets gps frames to retrieve useful data (latitude, longitude, altitude ...)
void ProcessNMEALine(char *s, GPS_Coords_t * coords, int * quality)
{
 80020cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d0:	b0d6      	sub	sp, #344	@ 0x158
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80020d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020dc:	6018      	str	r0, [r3, #0]
 80020de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80020e2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020e6:	6019      	str	r1, [r3, #0]
 80020e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80020ec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020f0:	601a      	str	r2, [r3, #0]
  int x;


  // Check the line synchronization

  if (s[0] != '$')
 80020f2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80020f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b24      	cmp	r3, #36	@ 0x24
 8002100:	f040 83f5 	bne.w	80028ee <ProcessNMEALine+0x822>
    return;

  // Verify the line checksum integrity

  c = 0; // checksum
 8002104:	2300      	movs	r3, #0
 8002106:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f

  i = 1; // Xor bytes between $ and *, but not including those bytes
 800210a:	2301      	movs	r3, #1
 800210c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

  while((s[i] != 0) && (s[i] != '*'))
 8002110:	e011      	b.n	8002136 <ProcessNMEALine+0x6a>
    c ^= s[i++];
 8002112:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800211c:	461a      	mov	r2, r3
 800211e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002122:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4413      	add	r3, r2
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8002130:	4053      	eors	r3, r2
 8002132:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
  while((s[i] != 0) && (s[i] != '*'))
 8002136:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800213a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800213e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <ProcessNMEALine+0x96>
 800214c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002150:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002154:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002160:	d1d7      	bne.n	8002112 <ProcessNMEALine+0x46>

  if (s[i] == 0)
 8002162:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002166:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800216a:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 83bc 	beq.w	80028f2 <ProcessNMEALine+0x826>
    return;

  sscanf(&s[i + 1],"%x",&x); // Checksum byte - Note sscanf needs this to be an int, rather than a single byte
 800217a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800217e:	3301      	adds	r3, #1
 8002180:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002184:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4413      	add	r3, r2
 800218c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8002190:	4952      	ldr	r1, [pc, #328]	@ (80022dc <ProcessNMEALine+0x210>)
 8002192:	4618      	mov	r0, r3
 8002194:	f00e fa02 	bl	801059c <siscanf>

  if (c != (char)(x & 0xFF)) // Leave if checksum fails
 8002198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f897 214f 	ldrb.w	r2, [r7, #335]	@ 0x14f
 80021a2:	429a      	cmp	r2, r3
 80021a4:	f040 83a7 	bne.w	80028f6 <ProcessNMEALine+0x82a>
    return;

  // Parse out fields on , and *

  f = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  while(1)
  {
    field[f++] = s;
 80021ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021be:	f107 0208 	add.w	r2, r7, #8
 80021c2:	4413      	add	r3, r2
 80021c4:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80021c8:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f843 2ccc 	str.w	r2, [r3, #-204]

    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 80021d2:	e00a      	b.n	80021ea <ProcessNMEALine+0x11e>
      s++;
 80021d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80021d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021dc:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80021e0:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	3201      	adds	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 80021ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80021ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01f      	beq.n	800223a <ProcessNMEALine+0x16e>
 80021fa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80021fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b2c      	cmp	r3, #44	@ 0x2c
 8002208:	d017      	beq.n	800223a <ProcessNMEALine+0x16e>
 800220a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800220e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b2a      	cmp	r3, #42	@ 0x2a
 8002218:	d00f      	beq.n	800223a <ProcessNMEALine+0x16e>
 800221a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800221e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b0d      	cmp	r3, #13
 8002228:	d007      	beq.n	800223a <ProcessNMEALine+0x16e>
 800222a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800222e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b0a      	cmp	r3, #10
 8002238:	d1cc      	bne.n	80021d4 <ProcessNMEALine+0x108>

    if ((*s == 0) || (*s == '*') || (*s == 0x0D) || (*s == 0x0A) || (f == (FIELD_MAX - 1)))
 800223a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800223e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01b      	beq.n	8002282 <ProcessNMEALine+0x1b6>
 800224a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800224e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b2a      	cmp	r3, #42	@ 0x2a
 8002258:	d013      	beq.n	8002282 <ProcessNMEALine+0x1b6>
 800225a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800225e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b0d      	cmp	r3, #13
 8002268:	d00b      	beq.n	8002282 <ProcessNMEALine+0x1b6>
 800226a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800226e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d003      	beq.n	8002282 <ProcessNMEALine+0x1b6>
 800227a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800227e:	2b13      	cmp	r3, #19
 8002280:	d11e      	bne.n	80022c0 <ProcessNMEALine+0x1f4>
    {
      *s = 0;
 8002282:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002286:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
      field[f] = NULL;
 8002290:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800229a:	f107 0208 	add.w	r2, r7, #8
 800229e:	4413      	add	r3, r2
 80022a0:	2200      	movs	r2, #0
 80022a2:	f843 2ccc 	str.w	r2, [r3, #-204]
      break;
 80022a6:	bf00      	nop
  }


  // Process a couple of NMEA sentences for illustration

  if (strncmp(field[0],"$G",2) == 0) // Allow for different Talker ID's ie $GP, $GN, $GL, etc
 80022a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ac:	2202      	movs	r2, #2
 80022ae:	490c      	ldr	r1, [pc, #48]	@ (80022e0 <ProcessNMEALine+0x214>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00e fa7f 	bl	80107b4 <strncmp>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 831e 	bne.w	80028fa <ProcessNMEALine+0x82e>
 80022be:	e011      	b.n	80022e4 <ProcessNMEALine+0x218>
    *s++ = 0;
 80022c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80022c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80022ce:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	6011      	str	r1, [r2, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
    field[f++] = s;
 80022da:	e768      	b.n	80021ae <ProcessNMEALine+0xe2>
 80022dc:	08013ce0 	.word	0x08013ce0
 80022e0:	08013ce4 	.word	0x08013ce4
  {
    if ((strcmp(&field[0][3],"GLL") == 0) && (f > 6)) // Geographic Position, Latitude, Longitude and Time
 80022e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e8:	3303      	adds	r3, #3
 80022ea:	49bd      	ldr	r1, [pc, #756]	@ (80025e0 <ProcessNMEALine+0x514>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fd ff6f 	bl	80001d0 <strcmp>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 8116 	bne.w	8002526 <ProcessNMEALine+0x45a>
 80022fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80022fe:	2b06      	cmp	r3, #6
 8002300:	f340 8111 	ble.w	8002526 <ProcessNMEALine+0x45a>
      // Field 4 Lon Hemi E/W
      // Field 5 UTC Time HHMMSS.SSS
      // Field 6 Fix A=Valid, V=Not Valid
      // Field 7 Mode A=Autonomous, D=Differential, E=Estimated, N=Not Valid [Optional] - Simulator Does not report this

      sscanf(field[1],"%lf",&lat);
 8002304:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002308:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800230c:	49b5      	ldr	r1, [pc, #724]	@ (80025e4 <ProcessNMEALine+0x518>)
 800230e:	4618      	mov	r0, r3
 8002310:	f00e f944 	bl	801059c <siscanf>

      lat_hemi = field[2][0];
 8002314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143

      sscanf(field[3],"%lf",&lon);
 800231e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002322:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8002326:	49af      	ldr	r1, [pc, #700]	@ (80025e4 <ProcessNMEALine+0x518>)
 8002328:	4618      	mov	r0, r3
 800232a:	f00e f937 	bl	801059c <siscanf>

      lon_hemi = field[4][0];
 800232e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142

      sscanf(field[5],"%lf",&fix_time);
 8002338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800233c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8002340:	49a8      	ldr	r1, [pc, #672]	@ (80025e4 <ProcessNMEALine+0x518>)
 8002342:	4618      	mov	r0, r3
 8002344:	f00e f92a 	bl	801059c <siscanf>

      valid = field[6][0];
 8002348:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141

      if (valid == 'A')
 8002352:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8002356:	2b41      	cmp	r3, #65	@ 0x41
 8002358:	f040 82c7 	bne.w	80028ea <ProcessNMEALine+0x81e>
      {
        // Extract Time-of-Fix

        fix_minute = (int)fix_time / 100;
 800235c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fc08 	bl	8000b78 <__aeabi_d2iz>
 8002368:	4603      	mov	r3, r0
 800236a:	4a9f      	ldr	r2, [pc, #636]	@ (80025e8 <ProcessNMEALine+0x51c>)
 800236c:	fb82 1203 	smull	r1, r2, r2, r3
 8002370:	1152      	asrs	r2, r2, #5
 8002372:	17db      	asrs	r3, r3, #31
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

        fix_second = fix_time - (fix_minute * 100);
 800237a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800237e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002382:	2264      	movs	r2, #100	@ 0x64
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8db 	bl	8000544 <__aeabi_i2d>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4620      	mov	r0, r4
 8002394:	4629      	mov	r1, r5
 8002396:	f7fd ff87 	bl	80002a8 <__aeabi_dsub>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

        fix_hour = fix_minute / 100;
 80023a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023a6:	4a90      	ldr	r2, [pc, #576]	@ (80025e8 <ProcessNMEALine+0x51c>)
 80023a8:	fb82 1203 	smull	r1, r2, r2, r3
 80023ac:	1152      	asrs	r2, r2, #5
 80023ae:	17db      	asrs	r3, r3, #31
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

        fix_minute = fix_minute % 100;
 80023b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023ba:	4a8b      	ldr	r2, [pc, #556]	@ (80025e8 <ProcessNMEALine+0x51c>)
 80023bc:	fb82 1203 	smull	r1, r2, r2, r3
 80023c0:	1151      	asrs	r1, r2, #5
 80023c2:	17da      	asrs	r2, r3, #31
 80023c4:	1a8a      	subs	r2, r1, r2
 80023c6:	2164      	movs	r1, #100	@ 0x64
 80023c8:	fb01 f202 	mul.w	r2, r1, r2
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

        // Process Latitude DDMM.mmmmm

        lat_deg = (int)lat / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 80023d2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbcd 	bl	8000b78 <__aeabi_d2iz>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a81      	ldr	r2, [pc, #516]	@ (80025e8 <ProcessNMEALine+0x51c>)
 80023e2:	fb82 1203 	smull	r1, r2, r2, r3
 80023e6:	1152      	asrs	r2, r2, #5
 80023e8:	17db      	asrs	r3, r3, #31
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

        lat_min = lat - (lat_deg * 100);
 80023f0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80023f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023f8:	2264      	movs	r2, #100	@ 0x64
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f8a0 	bl	8000544 <__aeabi_i2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4620      	mov	r0, r4
 800240a:	4629      	mov	r1, r5
 800240c:	f7fd ff4c 	bl	80002a8 <__aeabi_dsub>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

        lat = (double)lat_deg + (lat_min / 60.0); // Computed Latitude in DECIMAL DEGREES
 8002418:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800241c:	f7fe f892 	bl	8000544 <__aeabi_i2d>
 8002420:	4604      	mov	r4, r0
 8002422:	460d      	mov	r5, r1
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <ProcessNMEALine+0x520>)
 800242a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800242e:	f7fe fa1d 	bl	800086c <__aeabi_ddiv>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	f7fd ff37 	bl	80002ac <__adddf3>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

        if (lat_hemi == 'S')
 8002446:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 800244a:	2b53      	cmp	r3, #83	@ 0x53
 800244c:	d10e      	bne.n	800246c <ProcessNMEALine+0x3a0>
        {
          lat_deg = -lat_deg;
 800244e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002452:	425b      	negs	r3, r3
 8002454:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
          lat = -lat;
 8002458:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800245c:	603a      	str	r2, [r7, #0]
 800245e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	ed97 7b00 	vldr	d7, [r7]
 8002468:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
        }

        // Process Longitude DDDMM.mmmmm

        lon_deg = (int)lon / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 800246c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb80 	bl	8000b78 <__aeabi_d2iz>
 8002478:	4603      	mov	r3, r0
 800247a:	4a5b      	ldr	r2, [pc, #364]	@ (80025e8 <ProcessNMEALine+0x51c>)
 800247c:	fb82 1203 	smull	r1, r2, r2, r3
 8002480:	1152      	asrs	r2, r2, #5
 8002482:	17db      	asrs	r3, r3, #31
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

        lon_min = lon - (lon_deg * 100);
 800248a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800248e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002492:	2264      	movs	r2, #100	@ 0x64
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f853 	bl	8000544 <__aeabi_i2d>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4620      	mov	r0, r4
 80024a4:	4629      	mov	r1, r5
 80024a6:	f7fd feff 	bl	80002a8 <__aeabi_dsub>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

        lon = (double)lon_deg + (lon_min / 60.0); // Computed Longitude in DECIMAL DEGREES
 80024b2:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80024b6:	f7fe f845 	bl	8000544 <__aeabi_i2d>
 80024ba:	4604      	mov	r4, r0
 80024bc:	460d      	mov	r5, r1
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <ProcessNMEALine+0x520>)
 80024c4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80024c8:	f7fe f9d0 	bl	800086c <__aeabi_ddiv>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd feea 	bl	80002ac <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

        if (lon_hemi == 'W')
 80024e0:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 80024e4:	2b57      	cmp	r3, #87	@ 0x57
 80024e6:	d10b      	bne.n	8002500 <ProcessNMEALine+0x434>
        {
          lon_deg = -lon_deg;
 80024e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024ec:	425b      	negs	r3, r3
 80024ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
          lon = -lon;
 80024f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80024f6:	4692      	mov	sl, r2
 80024f8:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80024fc:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
        }


        coords->lat=lat;
 8002500:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002504:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8002508:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800250c:	6809      	ldr	r1, [r1, #0]
 800250e:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 8002512:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002516:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800251a:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800251e:	6809      	ldr	r1, [r1, #0]
 8002520:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
 8002524:	e1e1      	b.n	80028ea <ProcessNMEALine+0x81e>
      }

    }
    else if ((strcmp(&field[0][3],"GSA") == 0) && (f > 17)) // GPS DOP and Active Satellites
 8002526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800252a:	3303      	adds	r3, #3
 800252c:	4930      	ldr	r1, [pc, #192]	@ (80025f0 <ProcessNMEALine+0x524>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd fe4e 	bl	80001d0 <strcmp>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d15e      	bne.n	80025f8 <ProcessNMEALine+0x52c>
 800253a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800253e:	2b11      	cmp	r3, #17
 8002540:	dd5a      	ble.n	80025f8 <ProcessNMEALine+0x52c>
      // Field 14 SV List#12
      // Field 15 PDOP
      // Field 16 HDOP
      // Field 17 VDOP

      mode = field[1][0];
 8002542:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      fix = field[2][0];
 800254c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

      sscanf(field[15],"%lf",&pdop); // Position Dilution of precision (PDOP)
 8002556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800255a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800255e:	4921      	ldr	r1, [pc, #132]	@ (80025e4 <ProcessNMEALine+0x518>)
 8002560:	4618      	mov	r0, r3
 8002562:	f00e f81b 	bl	801059c <siscanf>
      sscanf(field[16],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 8002566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800256a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800256e:	491d      	ldr	r1, [pc, #116]	@ (80025e4 <ProcessNMEALine+0x518>)
 8002570:	4618      	mov	r0, r3
 8002572:	f00e f813 	bl	801059c <siscanf>
      sscanf(field[17],"%lf",&vdop); // Vertical Dilution of precision (VDOP)
 8002576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800257a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800257e:	4919      	ldr	r1, [pc, #100]	@ (80025e4 <ProcessNMEALine+0x518>)
 8002580:	4618      	mov	r0, r3
 8002582:	f00e f80b 	bl	801059c <siscanf>


      for(i=0; i<12; i++)
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800258c:	e023      	b.n	80025d6 <ProcessNMEALine+0x50a>
      {
        if (field[3+i][0])
 800258e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8002592:	3303      	adds	r3, #3
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800259a:	f107 0208 	add.w	r2, r7, #8
 800259e:	4413      	add	r3, r2
 80025a0:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d010      	beq.n	80025cc <ProcessNMEALine+0x500>
        {
          sscanf(field[3+i],"%d",&sv);
 80025aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80025ae:	3303      	adds	r3, #3
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025b6:	f107 0208 	add.w	r2, r7, #8
 80025ba:	4413      	add	r3, r2
 80025bc:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 80025c0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80025c4:	490b      	ldr	r1, [pc, #44]	@ (80025f4 <ProcessNMEALine+0x528>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f00d ffe8 	bl	801059c <siscanf>
      for(i=0; i<12; i++)
 80025cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80025d0:	3301      	adds	r3, #1
 80025d2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80025d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80025da:	2b0b      	cmp	r3, #11
 80025dc:	ddd7      	ble.n	800258e <ProcessNMEALine+0x4c2>
    {
 80025de:	e185      	b.n	80028ec <ProcessNMEALine+0x820>
 80025e0:	08013ce8 	.word	0x08013ce8
 80025e4:	08013cec 	.word	0x08013cec
 80025e8:	51eb851f 	.word	0x51eb851f
 80025ec:	404e0000 	.word	0x404e0000
 80025f0:	08013cf0 	.word	0x08013cf0
 80025f4:	08013cf4 	.word	0x08013cf4
        }
      }


    }
    else  if ((strcmp(&field[0][3],"GGA") == 0) && (f > 14))
 80025f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fc:	3303      	adds	r3, #3
 80025fe:	49c2      	ldr	r1, [pc, #776]	@ (8002908 <ProcessNMEALine+0x83c>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd fde5 	bl	80001d0 <strcmp>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 8176 	bne.w	80028fa <ProcessNMEALine+0x82e>
 800260e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002612:	2b0e      	cmp	r3, #14
 8002614:	f340 8171 	ble.w	80028fa <ProcessNMEALine+0x82e>
      double lat_min, lon_min;
      double fix_time;
      int fix_hour, fix_minute;
      double fix_second;
      char lat_hemi, lon_hemi;
      int valid = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
      // Field 11 Geoid Separation
      // Field 12 Units M
      // Field 13 Age of Differential (NULL when not used)
      // Field 14 Differential Reference Station ID

      sscanf(field[2],"%lf",&lat);
 800261e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002622:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002626:	49b9      	ldr	r1, [pc, #740]	@ (800290c <ProcessNMEALine+0x840>)
 8002628:	4618      	mov	r0, r3
 800262a:	f00d ffb7 	bl	801059c <siscanf>

      lat_hemi = field[3][0];
 800262e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d

      sscanf(field[4],"%lf",&lon);
 8002638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800263c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002640:	49b2      	ldr	r1, [pc, #712]	@ (800290c <ProcessNMEALine+0x840>)
 8002642:	4618      	mov	r0, r3
 8002644:	f00d ffaa 	bl	801059c <siscanf>

      lon_hemi = field[5][0];
 8002648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c

      sscanf(field[9],"%lf",&msl);
 8002652:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002656:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800265a:	49ac      	ldr	r1, [pc, #688]	@ (800290c <ProcessNMEALine+0x840>)
 800265c:	4618      	mov	r0, r3
 800265e:	f00d ff9d 	bl	801059c <siscanf>

      sscanf(field[11],"%lf",&alt);
 8002662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002666:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800266a:	49a8      	ldr	r1, [pc, #672]	@ (800290c <ProcessNMEALine+0x840>)
 800266c:	4618      	mov	r0, r3
 800266e:	f00d ff95 	bl	801059c <siscanf>

      sscanf(field[1],"%lf",&fix_time);
 8002672:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002676:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800267a:	49a4      	ldr	r1, [pc, #656]	@ (800290c <ProcessNMEALine+0x840>)
 800267c:	4618      	mov	r0, r3
 800267e:	f00d ff8d 	bl	801059c <siscanf>

      if (sscanf(field[6],"%d",quality) == 0)// 0=Fix Not available, 1=GPS SPS, 2=GPS SPS DIFF
 8002682:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002686:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800268a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	499f      	ldr	r1, [pc, #636]	@ (8002910 <ProcessNMEALine+0x844>)
 8002692:	f00d ff83 	bl	801059c <siscanf>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <ProcessNMEALine+0x5d6>
        valid = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

      sscanf(field[7],"%d",&sv);    // Satellites used (or in view, depends on receiver)
 80026a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026a6:	f107 021c 	add.w	r2, r7, #28
 80026aa:	4999      	ldr	r1, [pc, #612]	@ (8002910 <ProcessNMEALine+0x844>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00d ff75 	bl	801059c <siscanf>

      sscanf(field[8],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 80026b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b6:	f107 0220 	add.w	r2, r7, #32
 80026ba:	4994      	ldr	r1, [pc, #592]	@ (800290c <ProcessNMEALine+0x840>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f00d ff6d 	bl	801059c <siscanf>

      if (valid != 0)
 80026c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8117 	beq.w	80028fa <ProcessNMEALine+0x82e>
      {
        lat_deg = (int)lat / 100;
 80026cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7fe fa4e 	bl	8000b78 <__aeabi_d2iz>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a8d      	ldr	r2, [pc, #564]	@ (8002914 <ProcessNMEALine+0x848>)
 80026e0:	fb82 1203 	smull	r1, r2, r2, r3
 80026e4:	1152      	asrs	r2, r2, #5
 80026e6:	17db      	asrs	r3, r3, #31
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

        lat_min = lat - (lat_deg * 100);
 80026ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80026f2:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80026f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80026fa:	2264      	movs	r2, #100	@ 0x64
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff1f 	bl	8000544 <__aeabi_i2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4650      	mov	r0, sl
 800270c:	4659      	mov	r1, fp
 800270e:	f7fd fdcb 	bl	80002a8 <__aeabi_dsub>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100

        lat = (double)lat_deg + (lat_min / 60.0);
 800271a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800271e:	f7fd ff11 	bl	8000544 <__aeabi_i2d>
 8002722:	4682      	mov	sl, r0
 8002724:	468b      	mov	fp, r1
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	4b7b      	ldr	r3, [pc, #492]	@ (8002918 <ProcessNMEALine+0x84c>)
 800272c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8002730:	f7fe f89c 	bl	800086c <__aeabi_ddiv>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4650      	mov	r0, sl
 800273a:	4659      	mov	r1, fp
 800273c:	f7fd fdb6 	bl	80002ac <__adddf3>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002748:	e9c1 2300 	strd	r2, r3, [r1]

        if (lat_hemi == 'S')
 800274c:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002750:	2b53      	cmp	r3, #83	@ 0x53
 8002752:	d10a      	bne.n	800276a <ProcessNMEALine+0x69e>
          lat = -lat;
 8002754:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	4690      	mov	r8, r2
 800275e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002762:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002766:	e9c3 8900 	strd	r8, r9, [r3]


        lon_deg = (int)lon / 100;
 800276a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800276e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe f9ff 	bl	8000b78 <__aeabi_d2iz>
 800277a:	4603      	mov	r3, r0
 800277c:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <ProcessNMEALine+0x848>)
 800277e:	fb82 1203 	smull	r1, r2, r2, r3
 8002782:	1152      	asrs	r2, r2, #5
 8002784:	17db      	asrs	r3, r3, #31
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

        lon_min = lon - (lon_deg * 100);
 800278c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002790:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8002794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002798:	2264      	movs	r2, #100	@ 0x64
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fed0 	bl	8000544 <__aeabi_i2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4640      	mov	r0, r8
 80027aa:	4649      	mov	r1, r9
 80027ac:	f7fd fd7c 	bl	80002a8 <__aeabi_dsub>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

        lon = (double)lon_deg + (lon_min / 60.0);
 80027b8:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80027bc:	f7fd fec2 	bl	8000544 <__aeabi_i2d>
 80027c0:	4680      	mov	r8, r0
 80027c2:	4689      	mov	r9, r1
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <ProcessNMEALine+0x84c>)
 80027ca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80027ce:	f7fe f84d 	bl	800086c <__aeabi_ddiv>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4640      	mov	r0, r8
 80027d8:	4649      	mov	r1, r9
 80027da:	f7fd fd67 	bl	80002ac <__adddf3>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80027e6:	e941 2302 	strd	r2, r3, [r1, #-8]

        if (lon_hemi == 'W')
 80027ea:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80027ee:	2b57      	cmp	r3, #87	@ 0x57
 80027f0:	d10a      	bne.n	8002808 <ProcessNMEALine+0x73c>
          lon = -lon;
 80027f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80027fa:	4614      	mov	r4, r2
 80027fc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002800:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002804:	e943 4502 	strd	r4, r5, [r3, #-8]

        alt += msl; // Convert to height above datum
 8002808:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800280c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002810:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002814:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002818:	f7fd fd48 	bl	80002ac <__adddf3>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002824:	e9c1 2300 	strd	r2, r3, [r1]

        fix_minute = (int)fix_time / 100;
 8002828:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f9a0 	bl	8000b78 <__aeabi_d2iz>
 8002838:	4603      	mov	r3, r0
 800283a:	4a36      	ldr	r2, [pc, #216]	@ (8002914 <ProcessNMEALine+0x848>)
 800283c:	fb82 1203 	smull	r1, r2, r2, r3
 8002840:	1152      	asrs	r2, r2, #5
 8002842:	17db      	asrs	r3, r3, #31
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

        fix_second = fix_time - (fix_minute * 100);
 800284a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800284e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002852:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002856:	2264      	movs	r2, #100	@ 0x64
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe71 	bl	8000544 <__aeabi_i2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4620      	mov	r0, r4
 8002868:	4629      	mov	r1, r5
 800286a:	f7fd fd1d 	bl	80002a8 <__aeabi_dsub>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0

        fix_hour = fix_minute / 100;
 8002876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800287a:	4a26      	ldr	r2, [pc, #152]	@ (8002914 <ProcessNMEALine+0x848>)
 800287c:	fb82 1203 	smull	r1, r2, r2, r3
 8002880:	1152      	asrs	r2, r2, #5
 8002882:	17db      	asrs	r3, r3, #31
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

        fix_minute = fix_minute % 100;
 800288a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800288e:	4a21      	ldr	r2, [pc, #132]	@ (8002914 <ProcessNMEALine+0x848>)
 8002890:	fb82 1203 	smull	r1, r2, r2, r3
 8002894:	1151      	asrs	r1, r2, #5
 8002896:	17da      	asrs	r2, r3, #31
 8002898:	1a8a      	subs	r2, r1, r2
 800289a:	2164      	movs	r1, #100	@ 0x64
 800289c:	fb01 f202 	mul.w	r2, r1, r2
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

        coords->lat=lat;
 80028a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80028b2:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80028b6:	6809      	ldr	r1, [r1, #0]
 80028b8:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 80028bc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80028c4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80028c8:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80028cc:	6809      	ldr	r1, [r1, #0]
 80028ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
        coords->alt=alt;
 80028d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80028de:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80028e2:	6809      	ldr	r1, [r1, #0]
 80028e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      }
    }
  }
  return;
 80028e8:	e007      	b.n	80028fa <ProcessNMEALine+0x82e>
    {
 80028ea:	bf00      	nop
  return;
 80028ec:	e005      	b.n	80028fa <ProcessNMEALine+0x82e>
    return;
 80028ee:	bf00      	nop
 80028f0:	e004      	b.n	80028fc <ProcessNMEALine+0x830>
    return;
 80028f2:	bf00      	nop
 80028f4:	e002      	b.n	80028fc <ProcessNMEALine+0x830>
    return;
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <ProcessNMEALine+0x830>
  return;
 80028fa:	bf00      	nop
}
 80028fc:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8002900:	46bd      	mov	sp, r7
 8002902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002906:	bf00      	nop
 8002908:	08013cf8 	.word	0x08013cf8
 800290c:	08013cec 	.word	0x08013cec
 8002910:	08013cf4 	.word	0x08013cf4
 8002914:	51eb851f 	.word	0x51eb851f
 8002918:	404e0000 	.word	0x404e0000

0800291c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a07      	ldr	r2, [pc, #28]	@ (8002948 <vApplicationGetIdleTaskMemory+0x2c>)
 800292c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4a06      	ldr	r2, [pc, #24]	@ (800294c <vApplicationGetIdleTaskMemory+0x30>)
 8002932:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	200004f4 	.word	0x200004f4
 800294c:	20000548 	.word	0x20000548

08002950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002956:	f004 f8d5 	bl	8006b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800295a:	f000 f847 	bl	80029ec <SystemClock_Config>

  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800295e:	f000 fd53 	bl	8003408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002962:	f000 fcf1 	bl	8003348 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8002966:	f000 f893 	bl	8002a90 <MX_ADC3_Init>
  MX_CAN1_Init();
 800296a:	f000 f8f5 	bl	8002b58 <MX_CAN1_Init>
  MX_TIM1_Init();
 800296e:	f000 fa2d 	bl	8002dcc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002972:	f000 fa85 	bl	8002e80 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002976:	f000 fb87 	bl	8003088 <MX_TIM8_Init>
  MX_UART4_Init();
 800297a:	f000 fc55 	bl	8003228 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800297e:	f000 fd13 	bl	80033a8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8002982:	f000 f94b 	bl	8002c1c <MX_I2C2_Init>
  MX_UART5_Init();
 8002986:	f000 fc7f 	bl	8003288 <MX_UART5_Init>
  MX_COMP2_Init();
 800298a:	f000 f91b 	bl	8002bc4 <MX_COMP2_Init>
  MX_SPI2_Init();
 800298e:	f000 f985 	bl	8002c9c <MX_SPI2_Init>
  MX_SPI3_Init();
 8002992:	f000 f9c1 	bl	8002d18 <MX_SPI3_Init>
  MX_SWPMI1_Init();
 8002996:	f000 f9f9 	bl	8002d8c <MX_SWPMI1_Init>
  MX_TIM6_Init();
 800299a:	f000 fb09 	bl	8002fb0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800299e:	f000 fb3d 	bl	800301c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80029a2:	f000 fca1 	bl	80032e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 80029a6:	f7fe fc9f 	bl	80012e8 <GLOBVAR_Init>

  MESSAGE_Init();
 80029aa:	f7fe ff51 	bl	8001850 <MESSAGE_Init>

  IMU_init();
 80029ae:	f7fe fd11 	bl	80013d4 <IMU_init>
  IMU_enable();
 80029b2:	f7fe fde9 	bl	8001588 <IMU_enable>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <main+0x94>)
 80029b8:	1d3c      	adds	r4, r7, #4
 80029ba:	461d      	mov	r5, r3
 80029bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00a fdd8 	bl	800d582 <osThreadCreate>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <main+0x98>)
 80029d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Tasks_Init();
 80029d8:	f7fe fb14 	bl	8001004 <Tasks_Init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80029dc:	f00a fdca 	bl	800d574 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <main+0x90>
 80029e4:	08013d08 	.word	0x08013d08
 80029e8:	20001368 	.word	0x20001368

080029ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b096      	sub	sp, #88	@ 0x58
 80029f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	2244      	movs	r2, #68	@ 0x44
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00d fed2 	bl	80107a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a00:	463b      	mov	r3, r7
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002a12:	f006 fd17 	bl	8009444 <HAL_PWREx_ControlVoltageScaling>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002a1c:	f000 fd6f 	bl	80034fe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a20:	2302      	movs	r3, #2
 8002a22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a32:	2302      	movs	r3, #2
 8002a34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a42:	2302      	movs	r3, #2
 8002a44:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a46:	2302      	movs	r3, #2
 8002a48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f006 fd4e 	bl	80094f0 <HAL_RCC_OscConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002a5a:	f000 fd50 	bl	80034fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a5e:	230f      	movs	r3, #15
 8002a60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a62:	2303      	movs	r3, #3
 8002a64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a72:	463b      	mov	r3, r7
 8002a74:	2104      	movs	r1, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f007 f916 	bl	8009ca8 <HAL_RCC_ClockConfig>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a82:	f000 fd3c 	bl	80034fe <Error_Handler>
  }
}
 8002a86:	bf00      	nop
 8002a88:	3758      	adds	r7, #88	@ 0x58
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a96:	463b      	mov	r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
 8002aa4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002aa6:	4b29      	ldr	r3, [pc, #164]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002aa8:	4a29      	ldr	r2, [pc, #164]	@ (8002b50 <MX_ADC3_Init+0xc0>)
 8002aaa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002aac:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002ab2:	4b26      	ldr	r3, [pc, #152]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ab8:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002abe:	4b23      	ldr	r3, [pc, #140]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ac4:	4b21      	ldr	r3, [pc, #132]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002aca:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ae4:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002af0:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002b06:	4811      	ldr	r0, [pc, #68]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002b08:	f004 fa28 	bl	8006f5c <HAL_ADC_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002b12:	f000 fcf4 	bl	80034fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b16:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <MX_ADC3_Init+0xc4>)
 8002b18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b22:	237f      	movs	r3, #127	@ 0x7f
 8002b24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b26:	2304      	movs	r3, #4
 8002b28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b2e:	463b      	mov	r3, r7
 8002b30:	4619      	mov	r1, r3
 8002b32:	4806      	ldr	r0, [pc, #24]	@ (8002b4c <MX_ADC3_Init+0xbc>)
 8002b34:	f004 fb68 	bl	8007208 <HAL_ADC_ConfigChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8002b3e:	f000 fcde 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000d48 	.word	0x20000d48
 8002b50:	50040200 	.word	0x50040200
 8002b54:	04300002 	.word	0x04300002

08002b58 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002b5c:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b5e:	4a18      	ldr	r2, [pc, #96]	@ (8002bc0 <MX_CAN1_Init+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002b62:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b64:	2210      	movs	r2, #16
 8002b66:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b7a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002ba6:	4805      	ldr	r0, [pc, #20]	@ (8002bbc <MX_CAN1_Init+0x64>)
 8002ba8:	f004 ff1e 	bl	80079e8 <HAL_CAN_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002bb2:	f000 fca4 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000dac 	.word	0x20000dac
 8002bc0:	40006400 	.word	0x40006400

08002bc4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002bca:	4a13      	ldr	r2, [pc, #76]	@ (8002c18 <MX_COMP2_Init+0x54>)
 8002bcc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002bd0:	2270      	movs	r2, #112	@ 0x70
 8002bd2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002bfe:	4805      	ldr	r0, [pc, #20]	@ (8002c14 <MX_COMP2_Init+0x50>)
 8002c00:	f005 f896 	bl	8007d30 <HAL_COMP_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002c0a:	f000 fc78 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000dd4 	.word	0x20000dd4
 8002c18:	40010204 	.word	0x40010204

08002c1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c22:	4a1c      	ldr	r2, [pc, #112]	@ (8002c94 <MX_I2C2_Init+0x78>)
 8002c24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c28:	4a1b      	ldr	r2, [pc, #108]	@ (8002c98 <MX_I2C2_Init+0x7c>)
 8002c2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c2c:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c32:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c38:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c3e:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c44:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c56:	480e      	ldr	r0, [pc, #56]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c58:	f005 fda2 	bl	80087a0 <HAL_I2C_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c62:	f000 fc4c 	bl	80034fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c66:	2100      	movs	r1, #0
 8002c68:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c6a:	f006 fb45 	bl	80092f8 <HAL_I2CEx_ConfigAnalogFilter>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c74:	f000 fc43 	bl	80034fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <MX_I2C2_Init+0x74>)
 8002c7c:	f006 fb87 	bl	800938e <HAL_I2CEx_ConfigDigitalFilter>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c86:	f000 fc3a 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000e00 	.word	0x20000e00
 8002c94:	40005800 	.word	0x40005800
 8002c98:	10909cec 	.word	0x10909cec

08002c9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d14 <MX_SPI2_Init+0x78>)
 8002ca4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002ca8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cae:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cb6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002cba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc2:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cea:	2207      	movs	r2, #7
 8002cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cee:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cfa:	4805      	ldr	r0, [pc, #20]	@ (8002d10 <MX_SPI2_Init+0x74>)
 8002cfc:	f007 feb4 	bl	800aa68 <HAL_SPI_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d06:	f000 fbfa 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000e54 	.word	0x20000e54
 8002d14:	40003800 	.word	0x40003800

08002d18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d88 <MX_SPI3_Init+0x70>)
 8002d20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002d22:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d28:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d30:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002d34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d48:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d5e:	2207      	movs	r2, #7
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002d6e:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <MX_SPI3_Init+0x6c>)
 8002d70:	f007 fe7a 	bl	800aa68 <HAL_SPI_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8002d7a:	f000 fbc0 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000eb8 	.word	0x20000eb8
 8002d88:	40003c00 	.word	0x40003c00

08002d8c <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <MX_SWPMI1_Init+0x38>)
 8002d92:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc8 <MX_SWPMI1_Init+0x3c>)
 8002d94:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <MX_SWPMI1_Init+0x38>)
 8002d98:	2202      	movs	r2, #2
 8002d9a:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <MX_SWPMI1_Init+0x38>)
 8002d9e:	2213      	movs	r2, #19
 8002da0:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 8002da2:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <MX_SWPMI1_Init+0x38>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <MX_SWPMI1_Init+0x38>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 8002dae:	4805      	ldr	r0, [pc, #20]	@ (8002dc4 <MX_SWPMI1_Init+0x38>)
 8002db0:	f007 fefe 	bl	800abb0 <HAL_SWPMI_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 8002dba:	f000 fba0 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000f1c 	.word	0x20000f1c
 8002dc8:	40008800 	.word	0x40008800

08002dcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	@ 0x30
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	2224      	movs	r2, #36	@ 0x24
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f00d fce2 	bl	80107a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	463b      	mov	r3, r7
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dea:	4b23      	ldr	r3, [pc, #140]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002dec:	4a23      	ldr	r2, [pc, #140]	@ (8002e7c <MX_TIM1_Init+0xb0>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002df0:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b20      	ldr	r3, [pc, #128]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e10:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e32:	2300      	movs	r3, #0
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480d      	ldr	r0, [pc, #52]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002e42:	f007 ffe7 	bl	800ae14 <HAL_TIM_Encoder_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002e4c:	f000 fb57 	bl	80034fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <MX_TIM1_Init+0xac>)
 8002e62:	f008 fe65 	bl	800bb30 <HAL_TIMEx_MasterConfigSynchronization>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002e6c:	f000 fb47 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e70:	bf00      	nop
 8002e72:	3730      	adds	r7, #48	@ 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000f58 	.word	0x20000f58
 8002e7c:	40012c00 	.word	0x40012c00

08002e80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	@ 0x38
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	615a      	str	r2, [r3, #20]
 8002eb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002eb4:	4a3d      	ldr	r2, [pc, #244]	@ (8002fac <MX_TIM3_Init+0x12c>)
 8002eb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ec4:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002ec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ecc:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed2:	4b35      	ldr	r3, [pc, #212]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ed8:	4833      	ldr	r0, [pc, #204]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002eda:	f007 fee3 	bl	800aca4 <HAL_TIM_Base_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ee4:	f000 fb0b 	bl	80034fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	482c      	ldr	r0, [pc, #176]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002ef6:	f008 f947 	bl	800b188 <HAL_TIM_ConfigClockSource>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f00:	f000 fafd 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f04:	4828      	ldr	r0, [pc, #160]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002f06:	f007 ff24 	bl	800ad52 <HAL_TIM_PWM_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f10:	f000 faf5 	bl	80034fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f1c:	f107 031c 	add.w	r3, r7, #28
 8002f20:	4619      	mov	r1, r3
 8002f22:	4821      	ldr	r0, [pc, #132]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002f24:	f008 fe04 	bl	800bb30 <HAL_TIMEx_MasterConfigSynchronization>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f2e:	f000 fae6 	bl	80034fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f32:	2360      	movs	r3, #96	@ 0x60
 8002f34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f42:	463b      	mov	r3, r7
 8002f44:	2200      	movs	r2, #0
 8002f46:	4619      	mov	r1, r3
 8002f48:	4817      	ldr	r0, [pc, #92]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002f4a:	f008 f809 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f54:	f000 fad3 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f58:	463b      	mov	r3, r7
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4812      	ldr	r0, [pc, #72]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002f60:	f007 fffe 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002f6a:	f000 fac8 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2208      	movs	r2, #8
 8002f72:	4619      	mov	r1, r3
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002f76:	f007 fff3 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002f80:	f000 fabd 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f84:	463b      	mov	r3, r7
 8002f86:	220c      	movs	r2, #12
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4807      	ldr	r0, [pc, #28]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002f8c:	f007 ffe8 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002f96:	f000 fab2 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f9a:	4803      	ldr	r0, [pc, #12]	@ (8002fa8 <MX_TIM3_Init+0x128>)
 8002f9c:	f000 fdf2 	bl	8003b84 <HAL_TIM_MspPostInit>

}
 8002fa0:	bf00      	nop
 8002fa2:	3738      	adds	r7, #56	@ 0x38
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000fa4 	.word	0x20000fa4
 8002fac:	40000400 	.word	0x40000400

08002fb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fc0:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <MX_TIM6_Init+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002fc6:	4b13      	ldr	r3, [pc, #76]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fd8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fe0:	480c      	ldr	r0, [pc, #48]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fe2:	f007 fe5f 	bl	800aca4 <HAL_TIM_Base_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002fec:	f000 fa87 	bl	80034fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4805      	ldr	r0, [pc, #20]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002ffe:	f008 fd97 	bl	800bb30 <HAL_TIMEx_MasterConfigSynchronization>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003008:	f000 fa79 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000ff0 	.word	0x20000ff0
 8003018:	40001000 	.word	0x40001000

0800301c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800302c:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <MX_TIM7_Init+0x64>)
 800302e:	4a15      	ldr	r2, [pc, #84]	@ (8003084 <MX_TIM7_Init+0x68>)
 8003030:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003032:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <MX_TIM7_Init+0x64>)
 8003034:	2200      	movs	r2, #0
 8003036:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <MX_TIM7_Init+0x64>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <MX_TIM7_Init+0x64>)
 8003040:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003044:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003046:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <MX_TIM7_Init+0x64>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800304c:	480c      	ldr	r0, [pc, #48]	@ (8003080 <MX_TIM7_Init+0x64>)
 800304e:	f007 fe29 	bl	800aca4 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003058:	f000 fa51 	bl	80034fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800305c:	2300      	movs	r3, #0
 800305e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4805      	ldr	r0, [pc, #20]	@ (8003080 <MX_TIM7_Init+0x64>)
 800306a:	f008 fd61 	bl	800bb30 <HAL_TIMEx_MasterConfigSynchronization>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003074:	f000 fa43 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	2000103c 	.word	0x2000103c
 8003084:	40001400 	.word	0x40001400

08003088 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b09a      	sub	sp, #104	@ 0x68
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	222c      	movs	r2, #44	@ 0x2c
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f00d fb6e 	bl	80107a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030c8:	4b55      	ldr	r3, [pc, #340]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030ca:	4a56      	ldr	r2, [pc, #344]	@ (8003224 <MX_TIM8_Init+0x19c>)
 80030cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030ce:	4b54      	ldr	r3, [pc, #336]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d4:	4b52      	ldr	r3, [pc, #328]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80030da:	4b51      	ldr	r3, [pc, #324]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030f4:	484a      	ldr	r0, [pc, #296]	@ (8003220 <MX_TIM8_Init+0x198>)
 80030f6:	f007 fdd5 	bl	800aca4 <HAL_TIM_Base_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003100:	f000 f9fd 	bl	80034fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003108:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800310a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800310e:	4619      	mov	r1, r3
 8003110:	4843      	ldr	r0, [pc, #268]	@ (8003220 <MX_TIM8_Init+0x198>)
 8003112:	f008 f839 	bl	800b188 <HAL_TIM_ConfigClockSource>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800311c:	f000 f9ef 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003120:	483f      	ldr	r0, [pc, #252]	@ (8003220 <MX_TIM8_Init+0x198>)
 8003122:	f007 fe16 	bl	800ad52 <HAL_TIM_PWM_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800312c:	f000 f9e7 	bl	80034fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800313c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003140:	4619      	mov	r1, r3
 8003142:	4837      	ldr	r0, [pc, #220]	@ (8003220 <MX_TIM8_Init+0x198>)
 8003144:	f008 fcf4 	bl	800bb30 <HAL_TIMEx_MasterConfigSynchronization>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800314e:	f000 f9d6 	bl	80034fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003152:	2360      	movs	r3, #96	@ 0x60
 8003154:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800315a:	2300      	movs	r3, #0
 800315c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800315e:	2300      	movs	r3, #0
 8003160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800316e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003172:	2200      	movs	r2, #0
 8003174:	4619      	mov	r1, r3
 8003176:	482a      	ldr	r0, [pc, #168]	@ (8003220 <MX_TIM8_Init+0x198>)
 8003178:	f007 fef2 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003182:	f000 f9bc 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003186:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800318a:	2204      	movs	r2, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4824      	ldr	r0, [pc, #144]	@ (8003220 <MX_TIM8_Init+0x198>)
 8003190:	f007 fee6 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800319a:	f000 f9b0 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800319e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031a2:	2208      	movs	r2, #8
 80031a4:	4619      	mov	r1, r3
 80031a6:	481e      	ldr	r0, [pc, #120]	@ (8003220 <MX_TIM8_Init+0x198>)
 80031a8:	f007 feda 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80031b2:	f000 f9a4 	bl	80034fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031ba:	220c      	movs	r2, #12
 80031bc:	4619      	mov	r1, r3
 80031be:	4818      	ldr	r0, [pc, #96]	@ (8003220 <MX_TIM8_Init+0x198>)
 80031c0:	f007 fece 	bl	800af60 <HAL_TIM_PWM_ConfigChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 80031ca:	f000 f998 	bl	80034fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4807      	ldr	r0, [pc, #28]	@ (8003220 <MX_TIM8_Init+0x198>)
 8003204:	f008 fd1c 	bl	800bc40 <HAL_TIMEx_ConfigBreakDeadTime>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 800320e:	f000 f976 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003212:	4803      	ldr	r0, [pc, #12]	@ (8003220 <MX_TIM8_Init+0x198>)
 8003214:	f000 fcb6 	bl	8003b84 <HAL_TIM_MspPostInit>

}
 8003218:	bf00      	nop
 800321a:	3768      	adds	r7, #104	@ 0x68
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20001088 	.word	0x20001088
 8003224:	40013400 	.word	0x40013400

08003228 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800322c:	4b14      	ldr	r3, [pc, #80]	@ (8003280 <MX_UART4_Init+0x58>)
 800322e:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <MX_UART4_Init+0x5c>)
 8003230:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003232:	4b13      	ldr	r3, [pc, #76]	@ (8003280 <MX_UART4_Init+0x58>)
 8003234:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003238:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800323a:	4b11      	ldr	r3, [pc, #68]	@ (8003280 <MX_UART4_Init+0x58>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003240:	4b0f      	ldr	r3, [pc, #60]	@ (8003280 <MX_UART4_Init+0x58>)
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003246:	4b0e      	ldr	r3, [pc, #56]	@ (8003280 <MX_UART4_Init+0x58>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <MX_UART4_Init+0x58>)
 800324e:	220c      	movs	r2, #12
 8003250:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <MX_UART4_Init+0x58>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003258:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <MX_UART4_Init+0x58>)
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800325e:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <MX_UART4_Init+0x58>)
 8003260:	2200      	movs	r2, #0
 8003262:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003264:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <MX_UART4_Init+0x58>)
 8003266:	2200      	movs	r2, #0
 8003268:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800326a:	4805      	ldr	r0, [pc, #20]	@ (8003280 <MX_UART4_Init+0x58>)
 800326c:	f008 fd66 	bl	800bd3c <HAL_UART_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003276:	f000 f942 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200010d4 	.word	0x200010d4
 8003284:	40004c00 	.word	0x40004c00

08003288 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800328c:	4b14      	ldr	r3, [pc, #80]	@ (80032e0 <MX_UART5_Init+0x58>)
 800328e:	4a15      	ldr	r2, [pc, #84]	@ (80032e4 <MX_UART5_Init+0x5c>)
 8003290:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003292:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <MX_UART5_Init+0x58>)
 8003294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003298:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800329a:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <MX_UART5_Init+0x58>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80032a6:	4b0e      	ldr	r3, [pc, #56]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80032ac:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032ae:	220c      	movs	r2, #12
 80032b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032b2:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b8:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032be:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80032ca:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <MX_UART5_Init+0x58>)
 80032cc:	f008 fd36 	bl	800bd3c <HAL_UART_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80032d6:	f000 f912 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20001158 	.word	0x20001158
 80032e4:	40005000 	.word	0x40005000

080032e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032ec:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 80032ee:	4a15      	ldr	r2, [pc, #84]	@ (8003344 <MX_USART1_UART_Init+0x5c>)
 80032f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 80032f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032fa:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003306:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 800330e:	220c      	movs	r2, #12
 8003310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003312:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003318:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800331e:	4b08      	ldr	r3, [pc, #32]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 8003326:	2200      	movs	r2, #0
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800332a:	4805      	ldr	r0, [pc, #20]	@ (8003340 <MX_USART1_UART_Init+0x58>)
 800332c:	f008 fd06 	bl	800bd3c <HAL_UART_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003336:	f000 f8e2 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200011dc 	.word	0x200011dc
 8003344:	40013800 	.word	0x40013800

08003348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800334c:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 800334e:	4a15      	ldr	r2, [pc, #84]	@ (80033a4 <MX_USART2_UART_Init+0x5c>)
 8003350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003352:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 8003354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800336c:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 800336e:	220c      	movs	r2, #12
 8003370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003378:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800337e:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 8003380:	2200      	movs	r2, #0
 8003382:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 8003386:	2200      	movs	r2, #0
 8003388:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800338a:	4805      	ldr	r0, [pc, #20]	@ (80033a0 <MX_USART2_UART_Init+0x58>)
 800338c:	f008 fcd6 	bl	800bd3c <HAL_UART_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003396:	f000 f8b2 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20001260 	.word	0x20001260
 80033a4:	40004400 	.word	0x40004400

080033a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033ac:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033ae:	4a15      	ldr	r2, [pc, #84]	@ (8003404 <MX_USART3_UART_Init+0x5c>)
 80033b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80033b2:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033b4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80033b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033ba:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033ce:	220c      	movs	r2, #12
 80033d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d8:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033de:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033ea:	4805      	ldr	r0, [pc, #20]	@ (8003400 <MX_USART3_UART_Init+0x58>)
 80033ec:	f008 fca6 	bl	800bd3c <HAL_UART_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033f6:	f000 f882 	bl	80034fe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200012e4 	.word	0x200012e4
 8003404:	40004800 	.word	0x40004800

08003408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800341e:	4b31      	ldr	r3, [pc, #196]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	4a30      	ldr	r2, [pc, #192]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800342a:	4b2e      	ldr	r3, [pc, #184]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003436:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	4a2a      	ldr	r2, [pc, #168]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 800343c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003442:	4b28      	ldr	r3, [pc, #160]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800345a:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	4b1f      	ldr	r3, [pc, #124]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	4a1e      	ldr	r2, [pc, #120]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003472:	4b1c      	ldr	r3, [pc, #112]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800347e:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	4a18      	ldr	r2, [pc, #96]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800348a:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <MX_GPIO_Init+0xdc>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003496:	2200      	movs	r2, #0
 8003498:	2120      	movs	r1, #32
 800349a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349e:	f005 f967 	bl	8008770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80034ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	480b      	ldr	r0, [pc, #44]	@ (80034e8 <MX_GPIO_Init+0xe0>)
 80034ba:	f004 febb 	bl	8008234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80034be:	2320      	movs	r3, #32
 80034c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d8:	f004 feac 	bl	8008234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034dc:	bf00      	nop
 80034de:	3728      	adds	r7, #40	@ 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	48000800 	.word	0x48000800

080034ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 80034f4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80034f8:	f00a f88f 	bl	800d61a <osDelay>
 80034fc:	e7fa      	b.n	80034f4 <StartDefaultTask+0x8>

080034fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003502:	b672      	cpsid	i
}
 8003504:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <Error_Handler+0x8>
	...

0800350c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_MspInit+0x4c>)
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <HAL_MspInit+0x4c>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6613      	str	r3, [r2, #96]	@ 0x60
 800351e:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_MspInit+0x4c>)
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_MspInit+0x4c>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <HAL_MspInit+0x4c>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	@ 0x58
 8003536:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <HAL_MspInit+0x4c>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	210f      	movs	r1, #15
 8003546:	f06f 0001 	mvn.w	r0, #1
 800354a:	f004 fdbe 	bl	80080ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000

0800355c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0ac      	sub	sp, #176	@ 0xb0
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2288      	movs	r2, #136	@ 0x88
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f00d f911 	bl	80107a4 <memset>
  if(hadc->Instance==ADC3)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a27      	ldr	r2, [pc, #156]	@ (8003624 <HAL_ADC_MspInit+0xc8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d146      	bne.n	800361a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800358c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003590:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003592:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800359a:	2302      	movs	r3, #2
 800359c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80035a2:	2308      	movs	r3, #8
 80035a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80035a6:	2307      	movs	r3, #7
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80035aa:	2302      	movs	r3, #2
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80035ae:	2302      	movs	r3, #2
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80035b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4618      	mov	r0, r3
 80035be:	f006 fd97 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80035c8:	f7ff ff99 	bl	80034fe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80035cc:	4b16      	ldr	r3, [pc, #88]	@ (8003628 <HAL_ADC_MspInit+0xcc>)
 80035ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d0:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <HAL_ADC_MspInit+0xcc>)
 80035d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_ADC_MspInit+0xcc>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <HAL_ADC_MspInit+0xcc>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003628 <HAL_ADC_MspInit+0xcc>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <HAL_ADC_MspInit+0xcc>)
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80035fc:	2307      	movs	r3, #7
 80035fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003602:	230b      	movs	r3, #11
 8003604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003612:	4619      	mov	r1, r3
 8003614:	4805      	ldr	r0, [pc, #20]	@ (800362c <HAL_ADC_MspInit+0xd0>)
 8003616:	f004 fe0d 	bl	8008234 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800361a:	bf00      	nop
 800361c:	37b0      	adds	r7, #176	@ 0xb0
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	50040200 	.word	0x50040200
 8003628:	40021000 	.word	0x40021000
 800362c:	48000800 	.word	0x48000800

08003630 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	@ 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <HAL_CAN_MspInit+0x80>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d129      	bne.n	80036a6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003652:	4b18      	ldr	r3, [pc, #96]	@ (80036b4 <HAL_CAN_MspInit+0x84>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003656:	4a17      	ldr	r2, [pc, #92]	@ (80036b4 <HAL_CAN_MspInit+0x84>)
 8003658:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800365c:	6593      	str	r3, [r2, #88]	@ 0x58
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <HAL_CAN_MspInit+0x84>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <HAL_CAN_MspInit+0x84>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366e:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <HAL_CAN_MspInit+0x84>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003676:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <HAL_CAN_MspInit+0x84>)
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003682:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2302      	movs	r3, #2
 800368a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003690:	2303      	movs	r3, #3
 8003692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003694:	2309      	movs	r3, #9
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4619      	mov	r1, r3
 800369e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036a2:	f004 fdc7 	bl	8008234 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80036a6:	bf00      	nop
 80036a8:	3728      	adds	r7, #40	@ 0x28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40006400 	.word	0x40006400
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 030c 	add.w	r3, r7, #12
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003714 <HAL_COMP_MspInit+0x5c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d117      	bne.n	800370a <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <HAL_COMP_MspInit+0x60>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036de:	4a0e      	ldr	r2, [pc, #56]	@ (8003718 <HAL_COMP_MspInit+0x60>)
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_COMP_MspInit+0x60>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80036f2:	2390      	movs	r3, #144	@ 0x90
 80036f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f6:	2303      	movs	r3, #3
 80036f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	4619      	mov	r1, r3
 8003704:	4805      	ldr	r0, [pc, #20]	@ (800371c <HAL_COMP_MspInit+0x64>)
 8003706:	f004 fd95 	bl	8008234 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40010204 	.word	0x40010204
 8003718:	40021000 	.word	0x40021000
 800371c:	48000400 	.word	0x48000400

08003720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0ac      	sub	sp, #176	@ 0xb0
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	2288      	movs	r2, #136	@ 0x88
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f00d f82f 	bl	80107a4 <memset>
  if(hi2c->Instance==I2C2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	@ (80037d0 <HAL_I2C_MspInit+0xb0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d13b      	bne.n	80037c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003754:	2300      	movs	r3, #0
 8003756:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4618      	mov	r0, r3
 800375e:	f006 fcc7 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003768:	f7ff fec9 	bl	80034fe <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376c:	4b19      	ldr	r3, [pc, #100]	@ (80037d4 <HAL_I2C_MspInit+0xb4>)
 800376e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003770:	4a18      	ldr	r2, [pc, #96]	@ (80037d4 <HAL_I2C_MspInit+0xb4>)
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003778:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <HAL_I2C_MspInit+0xb4>)
 800377a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003784:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003788:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800378c:	2312      	movs	r3, #18
 800378e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800379e:	2304      	movs	r3, #4
 80037a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80037a8:	4619      	mov	r1, r3
 80037aa:	480b      	ldr	r0, [pc, #44]	@ (80037d8 <HAL_I2C_MspInit+0xb8>)
 80037ac:	f004 fd42 	bl	8008234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037b0:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_I2C_MspInit+0xb4>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	4a07      	ldr	r2, [pc, #28]	@ (80037d4 <HAL_I2C_MspInit+0xb4>)
 80037b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_I2C_MspInit+0xb4>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037c8:	bf00      	nop
 80037ca:	37b0      	adds	r7, #176	@ 0xb0
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40005800 	.word	0x40005800
 80037d4:	40021000 	.word	0x40021000
 80037d8:	48000400 	.word	0x48000400

080037dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003818 <HAL_I2C_MspDeInit+0x3c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10f      	bne.n	800380e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80037ee:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_I2C_MspDeInit+0x40>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	4a0a      	ldr	r2, [pc, #40]	@ (800381c <HAL_I2C_MspDeInit+0x40>)
 80037f4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80037f8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80037fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037fe:	4808      	ldr	r0, [pc, #32]	@ (8003820 <HAL_I2C_MspDeInit+0x44>)
 8003800:	f004 fec2 	bl	8008588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8003804:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003808:	4805      	ldr	r0, [pc, #20]	@ (8003820 <HAL_I2C_MspDeInit+0x44>)
 800380a:	f004 febd 	bl	8008588 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40005800 	.word	0x40005800
 800381c:	40021000 	.word	0x40021000
 8003820:	48000400 	.word	0x48000400

08003824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	@ 0x38
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a4b      	ldr	r2, [pc, #300]	@ (8003970 <HAL_SPI_MspInit+0x14c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d145      	bne.n	80038d2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003846:	4b4b      	ldr	r3, [pc, #300]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384a:	4a4a      	ldr	r2, [pc, #296]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 800384c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003850:	6593      	str	r3, [r2, #88]	@ 0x58
 8003852:	4b48      	ldr	r3, [pc, #288]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	4b45      	ldr	r3, [pc, #276]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003862:	4a44      	ldr	r2, [pc, #272]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800386a:	4b42      	ldr	r3, [pc, #264]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003876:	4b3f      	ldr	r3, [pc, #252]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387a:	4a3e      	ldr	r2, [pc, #248]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003882:	4b3c      	ldr	r3, [pc, #240]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800388e:	2308      	movs	r3, #8
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800389e:	2305      	movs	r3, #5
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a6:	4619      	mov	r1, r3
 80038a8:	4833      	ldr	r0, [pc, #204]	@ (8003978 <HAL_SPI_MspInit+0x154>)
 80038aa:	f004 fcc3 	bl	8008234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80038ae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038bc:	2303      	movs	r3, #3
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038c0:	2305      	movs	r3, #5
 80038c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c8:	4619      	mov	r1, r3
 80038ca:	482c      	ldr	r0, [pc, #176]	@ (800397c <HAL_SPI_MspInit+0x158>)
 80038cc:	f004 fcb2 	bl	8008234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80038d0:	e049      	b.n	8003966 <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003980 <HAL_SPI_MspInit+0x15c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d144      	bne.n	8003966 <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80038dc:	4b25      	ldr	r3, [pc, #148]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	4a24      	ldr	r2, [pc, #144]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e8:	4b22      	ldr	r3, [pc, #136]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 80038fa:	f043 0304 	orr.w	r3, r3, #4
 80038fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003900:	4b1c      	ldr	r3, [pc, #112]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390c:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 800390e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003910:	4a18      	ldr	r2, [pc, #96]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 8003912:	f043 0302 	orr.w	r3, r3, #2
 8003916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003918:	4b16      	ldr	r3, [pc, #88]	@ (8003974 <HAL_SPI_MspInit+0x150>)
 800391a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003924:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392a:	2302      	movs	r3, #2
 800392c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003932:	2303      	movs	r3, #3
 8003934:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003936:	2306      	movs	r3, #6
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800393e:	4619      	mov	r1, r3
 8003940:	480d      	ldr	r0, [pc, #52]	@ (8003978 <HAL_SPI_MspInit+0x154>)
 8003942:	f004 fc77 	bl	8008234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003946:	2320      	movs	r3, #32
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003956:	2306      	movs	r3, #6
 8003958:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800395e:	4619      	mov	r1, r3
 8003960:	4806      	ldr	r0, [pc, #24]	@ (800397c <HAL_SPI_MspInit+0x158>)
 8003962:	f004 fc67 	bl	8008234 <HAL_GPIO_Init>
}
 8003966:	bf00      	nop
 8003968:	3738      	adds	r7, #56	@ 0x38
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40003800 	.word	0x40003800
 8003974:	40021000 	.word	0x40021000
 8003978:	48000800 	.word	0x48000800
 800397c:	48000400 	.word	0x48000400
 8003980:	40003c00 	.word	0x40003c00

08003984 <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b0ac      	sub	sp, #176	@ 0xb0
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	2288      	movs	r2, #136	@ 0x88
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00c fefd 	bl	80107a4 <memset>
  if(hswpmi->Instance==SWPMI1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <HAL_SWPMI_MspInit+0xb4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d13d      	bne.n	8003a30 <HAL_SWPMI_MspInit+0xac>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 80039b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	4618      	mov	r0, r3
 80039c6:	f006 fb93 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 80039d0:	f7ff fd95 	bl	80034fe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 80039d4:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <HAL_SWPMI_MspInit+0xb8>)
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	4a18      	ldr	r2, [pc, #96]	@ (8003a3c <HAL_SWPMI_MspInit+0xb8>)
 80039da:	f043 0304 	orr.w	r3, r3, #4
 80039de:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80039e0:	4b16      	ldr	r3, [pc, #88]	@ (8003a3c <HAL_SWPMI_MspInit+0xb8>)
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ec:	4b13      	ldr	r3, [pc, #76]	@ (8003a3c <HAL_SWPMI_MspInit+0xb8>)
 80039ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f0:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <HAL_SWPMI_MspInit+0xb8>)
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f8:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <HAL_SWPMI_MspInit+0xb8>)
 80039fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
    /**SWPMI1 GPIO Configuration
    PB12     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 8003a1e:	230c      	movs	r3, #12
 8003a20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4805      	ldr	r0, [pc, #20]	@ (8003a40 <HAL_SWPMI_MspInit+0xbc>)
 8003a2c:	f004 fc02 	bl	8008234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 8003a30:	bf00      	nop
 8003a32:	37b0      	adds	r7, #176	@ 0xb0
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40008800 	.word	0x40008800
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	48000400 	.word	0x48000400

08003a44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	@ 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	f107 0314 	add.w	r3, r7, #20
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a18      	ldr	r2, [pc, #96]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d129      	bne.n	8003aba <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a66:	4b18      	ldr	r3, [pc, #96]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a72:	4b15      	ldr	r3, [pc, #84]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ab6:	f004 fbbd 	bl	8008234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	@ 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40021000 	.word	0x40021000

08003acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	@ (8003b70 <HAL_TIM_Base_MspInit+0xa4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10c      	bne.n	8003af8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ade:	4b25      	ldr	r3, [pc, #148]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	4a24      	ldr	r2, [pc, #144]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aea:	4b22      	ldr	r3, [pc, #136]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003af6:	e034      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <HAL_TIM_Base_MspInit+0xac>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10c      	bne.n	8003b1c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b02:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b08:	f043 0310 	orr.w	r3, r3, #16
 8003b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0e:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
}
 8003b1a:	e022      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <HAL_TIM_Base_MspInit+0xb0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10c      	bne.n	8003b40 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b26:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b2c:	f043 0320 	orr.w	r3, r3, #32
 8003b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b32:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	e010      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <HAL_TIM_Base_MspInit+0xb4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10b      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b54:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b56:	4b07      	ldr	r3, [pc, #28]	@ (8003b74 <HAL_TIM_Base_MspInit+0xa8>)
 8003b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40001000 	.word	0x40001000
 8003b7c:	40001400 	.word	0x40001400
 8003b80:	40013400 	.word	0x40013400

08003b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	@ 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a31      	ldr	r2, [pc, #196]	@ (8003c68 <HAL_TIM_MspPostInit+0xe4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d139      	bne.n	8003c1a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	4b31      	ldr	r3, [pc, #196]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003baa:	4a30      	ldr	r2, [pc, #192]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bca:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bd6:	23c0      	movs	r3, #192	@ 0xc0
 8003bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003be6:	2302      	movs	r3, #2
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bf4:	f004 fb1e 	bl	8008234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	2300      	movs	r3, #0
 8003c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4619      	mov	r1, r3
 8003c12:	4817      	ldr	r0, [pc, #92]	@ (8003c70 <HAL_TIM_MspPostInit+0xec>)
 8003c14:	f004 fb0e 	bl	8008234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c18:	e021      	b.n	8003c5e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a15      	ldr	r2, [pc, #84]	@ (8003c74 <HAL_TIM_MspPostInit+0xf0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d11c      	bne.n	8003c5e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c28:	4a10      	ldr	r2, [pc, #64]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c30:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <HAL_TIM_MspPostInit+0xe8>)
 8003c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003c3c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	4807      	ldr	r0, [pc, #28]	@ (8003c78 <HAL_TIM_MspPostInit+0xf4>)
 8003c5a:	f004 faeb 	bl	8008234 <HAL_GPIO_Init>
}
 8003c5e:	bf00      	nop
 8003c60:	3728      	adds	r7, #40	@ 0x28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	40013400 	.word	0x40013400
 8003c78:	48000800 	.word	0x48000800

08003c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b0b6      	sub	sp, #216	@ 0xd8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c98:	2288      	movs	r2, #136	@ 0x88
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f00c fd81 	bl	80107a4 <memset>
  if(huart->Instance==UART4)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4aad      	ldr	r2, [pc, #692]	@ (8003f5c <HAL_UART_MspInit+0x2e0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d145      	bne.n	8003d38 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003cac:	2308      	movs	r3, #8
 8003cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 fa18 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cc6:	f7ff fc1a 	bl	80034fe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cca:	4ba5      	ldr	r3, [pc, #660]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	4aa4      	ldr	r2, [pc, #656]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003cd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd6:	4ba2      	ldr	r3, [pc, #648]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	4a9e      	ldr	r2, [pc, #632]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cee:	4b9c      	ldr	r3, [pc, #624]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d12:	2308      	movs	r3, #8
 8003d14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d18:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d22:	f004 fa87 	bl	8008234 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2105      	movs	r1, #5
 8003d2a:	2034      	movs	r0, #52	@ 0x34
 8003d2c:	f004 f9cd 	bl	80080ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003d30:	2034      	movs	r0, #52	@ 0x34
 8003d32:	f004 f9e6 	bl	8008102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d36:	e169      	b.n	800400c <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a89      	ldr	r2, [pc, #548]	@ (8003f64 <HAL_UART_MspInit+0x2e8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d15e      	bne.n	8003e00 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003d42:	2310      	movs	r3, #16
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d50:	4618      	mov	r0, r3
 8003d52:	f006 f9cd 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003d5c:	f7ff fbcf 	bl	80034fe <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d60:	4b7f      	ldr	r3, [pc, #508]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	4a7e      	ldr	r2, [pc, #504]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d78:	4b79      	ldr	r3, [pc, #484]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7c:	4a78      	ldr	r2, [pc, #480]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d84:	4b76      	ldr	r3, [pc, #472]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d90:	4b73      	ldr	r3, [pc, #460]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	4a72      	ldr	r2, [pc, #456]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d96:	f043 0308 	orr.w	r3, r3, #8
 8003d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9c:	4b70      	ldr	r3, [pc, #448]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	2302      	movs	r3, #2
 8003db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4866      	ldr	r0, [pc, #408]	@ (8003f68 <HAL_UART_MspInit+0x2ec>)
 8003dd0:	f004 fa30 	bl	8008234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de6:	2303      	movs	r3, #3
 8003de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003dec:	2308      	movs	r3, #8
 8003dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003df2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003df6:	4619      	mov	r1, r3
 8003df8:	485c      	ldr	r0, [pc, #368]	@ (8003f6c <HAL_UART_MspInit+0x2f0>)
 8003dfa:	f004 fa1b 	bl	8008234 <HAL_GPIO_Init>
}
 8003dfe:	e105      	b.n	800400c <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5a      	ldr	r2, [pc, #360]	@ (8003f70 <HAL_UART_MspInit+0x2f4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d15e      	bne.n	8003ec8 <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e12:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003e16:	4618      	mov	r0, r3
 8003e18:	f006 f96a 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003e22:	f7ff fb6c 	bl	80034fe <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e26:	4b4e      	ldr	r3, [pc, #312]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e32:	4b4b      	ldr	r3, [pc, #300]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3e:	4b48      	ldr	r3, [pc, #288]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	4a47      	ldr	r2, [pc, #284]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e4a:	4b45      	ldr	r3, [pc, #276]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e56:	4b42      	ldr	r3, [pc, #264]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5a:	4a41      	ldr	r2, [pc, #260]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e62:	4b3f      	ldr	r3, [pc, #252]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e82:	2303      	movs	r3, #3
 8003e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e88:	2307      	movs	r3, #7
 8003e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003e92:	4619      	mov	r1, r3
 8003e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e98:	f004 f9cc 	bl	8008234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e9c:	2340      	movs	r3, #64	@ 0x40
 8003e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eb4:	2307      	movs	r3, #7
 8003eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eba:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	482c      	ldr	r0, [pc, #176]	@ (8003f74 <HAL_UART_MspInit+0x2f8>)
 8003ec2:	f004 f9b7 	bl	8008234 <HAL_GPIO_Init>
}
 8003ec6:	e0a1      	b.n	800400c <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8003f78 <HAL_UART_MspInit+0x2fc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d154      	bne.n	8003f7c <HAL_UART_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f006 f906 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_UART_MspInit+0x272>
      Error_Handler();
 8003eea:	f7ff fb08 	bl	80034fe <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efa:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f06:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	4a15      	ldr	r2, [pc, #84]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f12:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <HAL_UART_MspInit+0x2e4>)
 8003f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f1e:	230c      	movs	r3, #12
 8003f20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f36:	2307      	movs	r3, #7
 8003f38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003f40:	4619      	mov	r1, r3
 8003f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f46:	f004 f975 	bl	8008234 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2105      	movs	r1, #5
 8003f4e:	2026      	movs	r0, #38	@ 0x26
 8003f50:	f004 f8bb 	bl	80080ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f54:	2026      	movs	r0, #38	@ 0x26
 8003f56:	f004 f8d4 	bl	8008102 <HAL_NVIC_EnableIRQ>
}
 8003f5a:	e057      	b.n	800400c <HAL_UART_MspInit+0x390>
 8003f5c:	40004c00 	.word	0x40004c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40005000 	.word	0x40005000
 8003f68:	48000800 	.word	0x48000800
 8003f6c:	48000c00 	.word	0x48000c00
 8003f70:	40013800 	.word	0x40013800
 8003f74:	48000400 	.word	0x48000400
 8003f78:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a24      	ldr	r2, [pc, #144]	@ (8004014 <HAL_UART_MspInit+0x398>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d142      	bne.n	800400c <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f86:	2304      	movs	r3, #4
 8003f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f8e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f92:	4618      	mov	r0, r3
 8003f94:	f006 f8ac 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_UART_MspInit+0x326>
      Error_Handler();
 8003f9e:	f7ff faae 	bl	80034fe <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <HAL_UART_MspInit+0x39c>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8004018 <HAL_UART_MspInit+0x39c>)
 8003fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fae:	4b1a      	ldr	r3, [pc, #104]	@ (8004018 <HAL_UART_MspInit+0x39c>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fba:	4b17      	ldr	r3, [pc, #92]	@ (8004018 <HAL_UART_MspInit+0x39c>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	4a16      	ldr	r2, [pc, #88]	@ (8004018 <HAL_UART_MspInit+0x39c>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc6:	4b14      	ldr	r3, [pc, #80]	@ (8004018 <HAL_UART_MspInit+0x39c>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003fd2:	2330      	movs	r3, #48	@ 0x30
 8003fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fea:	2307      	movs	r3, #7
 8003fec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4809      	ldr	r0, [pc, #36]	@ (800401c <HAL_UART_MspInit+0x3a0>)
 8003ff8:	f004 f91c 	bl	8008234 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2105      	movs	r1, #5
 8004000:	2027      	movs	r0, #39	@ 0x27
 8004002:	f004 f862 	bl	80080ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004006:	2027      	movs	r0, #39	@ 0x27
 8004008:	f004 f87b 	bl	8008102 <HAL_NVIC_EnableIRQ>
}
 800400c:	bf00      	nop
 800400e:	37d8      	adds	r7, #216	@ 0xd8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40004800 	.word	0x40004800
 8004018:	40021000 	.word	0x40021000
 800401c:	48000800 	.word	0x48000800

08004020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <NMI_Handler+0x4>

08004028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <HardFault_Handler+0x4>

08004030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <MemManage_Handler+0x4>

08004038 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <BusFault_Handler+0x4>

08004040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004044:	bf00      	nop
 8004046:	e7fd      	b.n	8004044 <UsageFault_Handler+0x4>

08004048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800405a:	f002 fdaf 	bl	8006bbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800405e:	f00b f825 	bl	800f0ac <xTaskGetSchedulerState>
 8004062:	4603      	mov	r3, r0
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004068:	f00b fc06 	bl	800f878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}

08004070 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004074:	4802      	ldr	r0, [pc, #8]	@ (8004080 <USART2_IRQHandler+0x10>)
 8004076:	f007 ff73 	bl	800bf60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20001260 	.word	0x20001260

08004084 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004088:	4802      	ldr	r0, [pc, #8]	@ (8004094 <USART3_IRQHandler+0x10>)
 800408a:	f007 ff69 	bl	800bf60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	200012e4 	.word	0x200012e4

08004098 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800409c:	4802      	ldr	r0, [pc, #8]	@ (80040a8 <UART4_IRQHandler+0x10>)
 800409e:	f007 ff5f 	bl	800bf60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200010d4 	.word	0x200010d4

080040ac <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80040b6:	4b19      	ldr	r3, [pc, #100]	@ (800411c <BSP_I2C1_Init+0x70>)
 80040b8:	4a19      	ldr	r2, [pc, #100]	@ (8004120 <BSP_I2C1_Init+0x74>)
 80040ba:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80040bc:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <BSP_I2C1_Init+0x78>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	4918      	ldr	r1, [pc, #96]	@ (8004124 <BSP_I2C1_Init+0x78>)
 80040c4:	600a      	str	r2, [r1, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d122      	bne.n	8004110 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80040ca:	4814      	ldr	r0, [pc, #80]	@ (800411c <BSP_I2C1_Init+0x70>)
 80040cc:	f004 fe54 	bl	8008d78 <HAL_I2C_GetState>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d11c      	bne.n	8004110 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80040d6:	4811      	ldr	r0, [pc, #68]	@ (800411c <BSP_I2C1_Init+0x70>)
 80040d8:	f000 f8f6 	bl	80042c8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d116      	bne.n	8004110 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80040e2:	480e      	ldr	r0, [pc, #56]	@ (800411c <BSP_I2C1_Init+0x70>)
 80040e4:	f000 f8ac 	bl	8004240 <MX_I2C1_Init>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80040ee:	f06f 0307 	mvn.w	r3, #7
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	e00c      	b.n	8004110 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040f6:	2100      	movs	r1, #0
 80040f8:	4808      	ldr	r0, [pc, #32]	@ (800411c <BSP_I2C1_Init+0x70>)
 80040fa:	f005 f8fd 	bl	80092f8 <HAL_I2CEx_ConfigAnalogFilter>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004104:	f06f 0307 	mvn.w	r3, #7
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	e001      	b.n	8004110 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800410c:	2300      	movs	r3, #0
 800410e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8004110:	687b      	ldr	r3, [r7, #4]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20001488 	.word	0x20001488
 8004120:	40005400 	.word	0x40005400
 8004124:	200014dc 	.word	0x200014dc

08004128 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8004132:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <BSP_I2C1_DeInit+0x48>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d014      	beq.n	8004164 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <BSP_I2C1_DeInit+0x48>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	4a0b      	ldr	r2, [pc, #44]	@ (8004170 <BSP_I2C1_DeInit+0x48>)
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <BSP_I2C1_DeInit+0x48>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800414c:	4809      	ldr	r0, [pc, #36]	@ (8004174 <BSP_I2C1_DeInit+0x4c>)
 800414e:	f000 f91b 	bl	8004388 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004152:	4808      	ldr	r0, [pc, #32]	@ (8004174 <BSP_I2C1_DeInit+0x4c>)
 8004154:	f004 fbb3 	bl	80088be <HAL_I2C_DeInit>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800415e:	f06f 0307 	mvn.w	r3, #7
 8004162:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004164:	687b      	ldr	r3, [r7, #4]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200014dc 	.word	0x200014dc
 8004174:	20001488 	.word	0x20001488

08004178 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	@ 0x28
 800417c:	af04      	add	r7, sp, #16
 800417e:	60ba      	str	r2, [r7, #8]
 8004180:	461a      	mov	r2, r3
 8004182:	4603      	mov	r3, r0
 8004184:	81fb      	strh	r3, [r7, #14]
 8004186:	460b      	mov	r3, r1
 8004188:	81bb      	strh	r3, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004192:	89ba      	ldrh	r2, [r7, #12]
 8004194:	89f9      	ldrh	r1, [r7, #14]
 8004196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800419a:	9302      	str	r3, [sp, #8]
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2301      	movs	r3, #1
 80041a6:	480c      	ldr	r0, [pc, #48]	@ (80041d8 <BSP_I2C1_WriteReg+0x60>)
 80041a8:	f004 fbb8 	bl	800891c <HAL_I2C_Mem_Write>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00c      	beq.n	80041cc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80041b2:	4809      	ldr	r0, [pc, #36]	@ (80041d8 <BSP_I2C1_WriteReg+0x60>)
 80041b4:	f004 fdee 	bl	8008d94 <HAL_I2C_GetError>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d103      	bne.n	80041c6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80041be:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e002      	b.n	80041cc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80041c6:	f06f 0303 	mvn.w	r3, #3
 80041ca:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80041cc:	697b      	ldr	r3, [r7, #20]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20001488 	.word	0x20001488

080041dc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	@ 0x28
 80041e0:	af04      	add	r7, sp, #16
 80041e2:	60ba      	str	r2, [r7, #8]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	81fb      	strh	r3, [r7, #14]
 80041ea:	460b      	mov	r3, r1
 80041ec:	81bb      	strh	r3, [r7, #12]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80041f6:	89ba      	ldrh	r2, [r7, #12]
 80041f8:	89f9      	ldrh	r1, [r7, #14]
 80041fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2301      	movs	r3, #1
 800420a:	480c      	ldr	r0, [pc, #48]	@ (800423c <BSP_I2C1_ReadReg+0x60>)
 800420c:	f004 fc9a 	bl	8008b44 <HAL_I2C_Mem_Read>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004216:	4809      	ldr	r0, [pc, #36]	@ (800423c <BSP_I2C1_ReadReg+0x60>)
 8004218:	f004 fdbc 	bl	8008d94 <HAL_I2C_GetError>
 800421c:	4603      	mov	r3, r0
 800421e:	2b04      	cmp	r3, #4
 8004220:	d103      	bne.n	800422a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004222:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e002      	b.n	8004230 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800422a:	f06f 0303 	mvn.w	r3, #3
 800422e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004230:	697b      	ldr	r3, [r7, #20]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20001488 	.word	0x20001488

08004240 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <MX_I2C1_Init+0x80>)
 8004250:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <MX_I2C1_Init+0x84>)
 8004256:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f004 fa8c 	bl	80087a0 <HAL_I2C_Init>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004292:	2100      	movs	r1, #0
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f005 f82f 	bl	80092f8 <HAL_I2CEx_ConfigAnalogFilter>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80042a4:	2100      	movs	r1, #0
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f005 f871 	bl	800938e <HAL_I2CEx_ConfigDigitalFilter>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40005400 	.word	0x40005400
 80042c4:	10909cec 	.word	0x10909cec

080042c8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b0ac      	sub	sp, #176	@ 0xb0
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	2288      	movs	r2, #136	@ 0x88
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f00c fa63 	bl	80107a4 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80042de:	2340      	movs	r3, #64	@ 0x40
 80042e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042e2:	2300      	movs	r3, #0
 80042e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	4618      	mov	r0, r3
 80042ec:	f005 ff00 	bl	800a0f0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f0:	4b23      	ldr	r3, [pc, #140]	@ (8004380 <I2C1_MspInit+0xb8>)
 80042f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f4:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <I2C1_MspInit+0xb8>)
 80042f6:	f043 0302 	orr.w	r3, r3, #2
 80042fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042fc:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <I2C1_MspInit+0xb8>)
 80042fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800430c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004310:	2312      	movs	r3, #18
 8004312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800431c:	2303      	movs	r3, #3
 800431e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004322:	2304      	movs	r3, #4
 8004324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004328:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800432c:	4619      	mov	r1, r3
 800432e:	4815      	ldr	r0, [pc, #84]	@ (8004384 <I2C1_MspInit+0xbc>)
 8004330:	f003 ff80 	bl	8008234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800433c:	2312      	movs	r3, #18
 800433e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004348:	2303      	movs	r3, #3
 800434a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800434e:	2304      	movs	r3, #4
 8004350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004354:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004358:	4619      	mov	r1, r3
 800435a:	480a      	ldr	r0, [pc, #40]	@ (8004384 <I2C1_MspInit+0xbc>)
 800435c:	f003 ff6a 	bl	8008234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <I2C1_MspInit+0xb8>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	4a06      	ldr	r2, [pc, #24]	@ (8004380 <I2C1_MspInit+0xb8>)
 8004366:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800436a:	6593      	str	r3, [r2, #88]	@ 0x58
 800436c:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <I2C1_MspInit+0xb8>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004378:	bf00      	nop
 800437a:	37b0      	adds	r7, #176	@ 0xb0
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	48000400 	.word	0x48000400

08004388 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004390:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <I2C1_MspDeInit+0x30>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	4a08      	ldr	r2, [pc, #32]	@ (80043b8 <I2C1_MspDeInit+0x30>)
 8004396:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800439a:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800439c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043a0:	4806      	ldr	r0, [pc, #24]	@ (80043bc <I2C1_MspDeInit+0x34>)
 80043a2:	f004 f8f1 	bl	8008588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80043a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043aa:	4804      	ldr	r0, [pc, #16]	@ (80043bc <I2C1_MspDeInit+0x34>)
 80043ac:	f004 f8ec 	bl	8008588 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	48000400 	.word	0x48000400

080043c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return 1;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <_kill>:

int _kill(int pid, int sig)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043da:	f00c fa53 	bl	8010884 <__errno>
 80043de:	4603      	mov	r3, r0
 80043e0:	2216      	movs	r2, #22
 80043e2:	601a      	str	r2, [r3, #0]
  return -1;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <_exit>:

void _exit (int status)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ffe7 	bl	80043d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <_exit+0x12>

08004406 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e00a      	b.n	800442e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004418:	f3af 8000 	nop.w
 800441c:	4601      	mov	r1, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	60ba      	str	r2, [r7, #8]
 8004424:	b2ca      	uxtb	r2, r1
 8004426:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	3301      	adds	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	dbf0      	blt.n	8004418 <_read+0x12>
  }

  return len;
 8004436:	687b      	ldr	r3, [r7, #4]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e009      	b.n	8004466 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	60ba      	str	r2, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3301      	adds	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	dbf1      	blt.n	8004452 <_write+0x12>
  }
  return len;
 800446e:	687b      	ldr	r3, [r7, #4]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_close>:

int _close(int file)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044a0:	605a      	str	r2, [r3, #4]
  return 0;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <_isatty>:

int _isatty(int file)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044b8:	2301      	movs	r3, #1
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044e8:	4a14      	ldr	r2, [pc, #80]	@ (800453c <_sbrk+0x5c>)
 80044ea:	4b15      	ldr	r3, [pc, #84]	@ (8004540 <_sbrk+0x60>)
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f4:	4b13      	ldr	r3, [pc, #76]	@ (8004544 <_sbrk+0x64>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044fc:	4b11      	ldr	r3, [pc, #68]	@ (8004544 <_sbrk+0x64>)
 80044fe:	4a12      	ldr	r2, [pc, #72]	@ (8004548 <_sbrk+0x68>)
 8004500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <_sbrk+0x64>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	429a      	cmp	r2, r3
 800450e:	d207      	bcs.n	8004520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004510:	f00c f9b8 	bl	8010884 <__errno>
 8004514:	4603      	mov	r3, r0
 8004516:	220c      	movs	r2, #12
 8004518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	e009      	b.n	8004534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004520:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <_sbrk+0x64>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004526:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <_sbrk+0x64>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	4a05      	ldr	r2, [pc, #20]	@ (8004544 <_sbrk+0x64>)
 8004530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004532:	68fb      	ldr	r3, [r7, #12]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20018000 	.word	0x20018000
 8004540:	00000400 	.word	0x00000400
 8004544:	200014e0 	.word	0x200014e0
 8004548:	20003fc8 	.word	0x20003fc8

0800454c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004550:	4b06      	ldr	r3, [pc, #24]	@ (800456c <SystemInit+0x20>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	4a05      	ldr	r2, [pc, #20]	@ (800456c <SystemInit+0x20>)
 8004558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800455c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
	    bl  SystemInit
 8004574:	f7ff ffea 	bl	800454c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004578:	480c      	ldr	r0, [pc, #48]	@ (80045ac <LoopForever+0x6>)
  ldr r1, =_edata
 800457a:	490d      	ldr	r1, [pc, #52]	@ (80045b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800457c:	4a0d      	ldr	r2, [pc, #52]	@ (80045b4 <LoopForever+0xe>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004580:	e002      	b.n	8004588 <LoopCopyDataInit>

08004582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004586:	3304      	adds	r3, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800458c:	d3f9      	bcc.n	8004582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458e:	4a0a      	ldr	r2, [pc, #40]	@ (80045b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004590:	4c0a      	ldr	r4, [pc, #40]	@ (80045bc <LoopForever+0x16>)
  movs r3, #0
 8004592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004594:	e001      	b.n	800459a <LoopFillZerobss>

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004598:	3204      	adds	r2, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800459e:	f00c f977 	bl	8010890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045a2:	f7fe f9d5 	bl	8002950 <main>

080045a6 <LoopForever>:

LoopForever:
    b LoopForever
 80045a6:	e7fe      	b.n	80045a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80045a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80045ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80045b4:	0801426c 	.word	0x0801426c
  ldr r2, =_sbss
 80045b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80045bc:	20003fc8 	.word	0x20003fc8

080045c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045c0:	e7fe      	b.n	80045c0 <ADC1_2_IRQHandler>
	...

080045c4 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e034      	b.n	8004646 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	7b1a      	ldrb	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a0e      	ldr	r2, [pc, #56]	@ (8004650 <HTS221_RegisterBusIO+0x8c>)
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <HTS221_RegisterBusIO+0x90>)
 800461e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4798      	blx	r3
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	e002      	b.n	8004646 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	08004a31 	.word	0x08004a31
 8004654:	08004a93 	.word	0x08004a93

08004658 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f97b 	bl	8004966 <HTS221_Initialize>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	e004      	b.n	8004686 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e015      	b.n	80046d0 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3320      	adds	r3, #32
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fadd 	bl	8004c74 <hts221_power_on_set>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295
 80046c4:	e004      	b.n	80046d0 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3320      	adds	r3, #32
 80046e6:	f107 020c 	add.w	r2, r7, #12
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fb85 	bl	8004dfc <hts221_hum_adc_point_0_get>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	e06b      	b.n	80047d6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f103 0220 	add.w	r2, r3, #32
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fad7 	bl	8004cc0 <hts221_hum_rh_point_0_get>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	e05b      	b.n	80047d6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f103 0220 	add.w	r2, r3, #32
 8004724:	f107 030c 	add.w	r3, r7, #12
 8004728:	3308      	adds	r3, #8
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f000 fb87 	bl	8004e40 <hts221_hum_adc_point_1_get>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
 800473c:	e04b      	b.n	80047d6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f103 0220 	add.w	r2, r3, #32
 8004744:	f107 030c 	add.w	r3, r7, #12
 8004748:	330c      	adds	r3, #12
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f000 fad5 	bl	8004cfc <hts221_hum_rh_point_1_get>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295
 800475c:	e03b      	b.n	80047d6 <HTS221_HUM_GetHumidity+0xfe>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 800475e:	2300      	movs	r3, #0
 8004760:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3320      	adds	r3, #32
 8004766:	f107 021c 	add.w	r2, r7, #28
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fa3d 	bl	8004bec <hts221_humidity_raw_get>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	e02b      	b.n	80047d6 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800477e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	eeb0 0a67 	vmov.f32	s0, s15
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f913 	bl	80049be <Linear_Interpolation>
 8004798:	eef0 7a40 	vmov.f32	s15, s0
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	edd3 7a00 	vldr	s15, [r3]
 80047a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b0:	d503      	bpl.n	80047ba <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80047e0 <HTS221_HUM_GetHumidity+0x108>
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	dd02      	ble.n	80047d4 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <HTS221_HUM_GetHumidity+0x10c>)
 80047d2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	42c80000 	.word	0x42c80000
 80047e4:	42c80000 	.word	0x42c80000

080047e8 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e015      	b.n	800482a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10b      	bne.n	8004820 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3320      	adds	r3, #32
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fa30 	bl	8004c74 <hts221_power_on_set>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	e004      	b.n	800482a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b088      	sub	sp, #32
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3320      	adds	r3, #32
 8004840:	f107 020c 	add.w	r2, r7, #12
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fb1c 	bl	8004e84 <hts221_temp_adc_point_0_get>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	e052      	b.n	80048fe <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f103 0220 	add.w	r2, r3, #32
 800485e:	f107 030c 	add.w	r3, r7, #12
 8004862:	3304      	adds	r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f000 fa66 	bl	8004d38 <hts221_temp_deg_point_0_get>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	e042      	b.n	80048fe <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f103 0220 	add.w	r2, r3, #32
 800487e:	f107 030c 	add.w	r3, r7, #12
 8004882:	3308      	adds	r3, #8
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 fb1e 	bl	8004ec8 <hts221_temp_adc_point_1_get>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	e032      	b.n	80048fe <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f103 0220 	add.w	r2, r3, #32
 800489e:	f107 030c 	add.w	r3, r7, #12
 80048a2:	330c      	adds	r3, #12
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fa77 	bl	8004d9a <hts221_temp_deg_point_1_get>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	e022      	b.n	80048fe <HTS221_TEMP_GetTemperature+0xcc>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 80048b8:	2300      	movs	r3, #0
 80048ba:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3320      	adds	r3, #32
 80048c0:	f107 021c 	add.w	r2, r7, #28
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f9b2 	bl	8004c30 <hts221_temperature_raw_get>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	e012      	b.n	80048fe <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80048d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	eeb0 0a67 	vmov.f32	s0, s15
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f866 	bl	80049be <Linear_Interpolation>
 80048f2:	eef0 7a40 	vmov.f32	s15, s0
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8004912:	edd7 7a00 	vldr	s15, [r7]
 8004916:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800491a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	d801      	bhi.n	8004928 <HTS221_SetOutputDataRate+0x22>
 8004924:	2301      	movs	r3, #1
 8004926:	e00b      	b.n	8004940 <HTS221_SetOutputDataRate+0x3a>
 8004928:	edd7 7a00 	vldr	s15, [r7]
 800492c:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8004930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d801      	bhi.n	800493e <HTS221_SetOutputDataRate+0x38>
 800493a:	2302      	movs	r3, #2
 800493c:	e000      	b.n	8004940 <HTS221_SetOutputDataRate+0x3a>
 800493e:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8004940:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3320      	adds	r3, #32
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f902 	bl	8004b54 <hts221_data_rate_set>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
 800495a:	e000      	b.n	800495e <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3320      	adds	r3, #32
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f000 f97d 	bl	8004c74 <hts221_power_on_set>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	e017      	b.n	80049b6 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3320      	adds	r3, #32
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f907 	bl	8004ba0 <hts221_block_data_update_set>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8004998:	f04f 33ff 	mov.w	r3, #4294967295
 800499c:	e00b      	b.n	80049b6 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800499e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ffaf 	bl	8004906 <HTS221_SetOutputDataRate>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	e000      	b.n	80049b6 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80049d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049da:	edd7 7a00 	vldr	s15, [r7]
 80049de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80049ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	ed93 6a00 	vldr	s12, [r3]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80049fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004a02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	edd3 7a00 	vldr	s15, [r3]
 8004a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a1e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a22:	eeb0 0a67 	vmov.f32	s0, s15
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	72fb      	strb	r3, [r7, #11]
 8004a40:	4613      	mov	r3, r2
 8004a42:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10e      	bne.n	8004a6e <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	695c      	ldr	r4, [r3, #20]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	7b1b      	ldrb	r3, [r3, #12]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
 8004a5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	4619      	mov	r1, r3
 8004a64:	893b      	ldrh	r3, [r7, #8]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	47a0      	blx	r4
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	e00d      	b.n	8004a8a <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	695c      	ldr	r4, [r3, #20]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	7b1b      	ldrb	r3, [r3, #12]
 8004a76:	4618      	mov	r0, r3
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	893b      	ldrh	r3, [r7, #8]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	47a0      	blx	r4
 8004a88:	4603      	mov	r3, r0
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd90      	pop	{r4, r7, pc}

08004a92 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	72fb      	strb	r3, [r7, #11]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10e      	bne.n	8004ad0 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	691c      	ldr	r4, [r3, #16]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	7b1b      	ldrb	r3, [r3, #12]
 8004aba:	4618      	mov	r0, r3
 8004abc:	7afb      	ldrb	r3, [r7, #11]
 8004abe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	893b      	ldrh	r3, [r7, #8]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	47a0      	blx	r4
 8004acc:	4603      	mov	r3, r0
 8004ace:	e00d      	b.n	8004aec <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	691c      	ldr	r4, [r3, #16]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	7b1b      	ldrb	r3, [r3, #12]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	7afb      	ldrb	r3, [r7, #11]
 8004adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	893b      	ldrh	r3, [r7, #8]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	47a0      	blx	r4
 8004aea:	4603      	mov	r3, r0
  }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd90      	pop	{r4, r7, pc}

08004af4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	461a      	mov	r2, r3
 8004b00:	460b      	mov	r3, r1
 8004b02:	72fb      	strb	r3, [r7, #11]
 8004b04:	4613      	mov	r3, r2
 8004b06:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685c      	ldr	r4, [r3, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68d8      	ldr	r0, [r3, #12]
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	7af9      	ldrb	r1, [r7, #11]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	47a0      	blx	r4
 8004b18:	6178      	str	r0, [r7, #20]

  return ret;
 8004b1a:	697b      	ldr	r3, [r7, #20]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}

08004b24 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	460b      	mov	r3, r1
 8004b32:	72fb      	strb	r3, [r7, #11]
 8004b34:	4613      	mov	r3, r2
 8004b36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681c      	ldr	r4, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68d8      	ldr	r0, [r3, #12]
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	7af9      	ldrb	r1, [r7, #11]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	47a0      	blx	r4
 8004b48:	6178      	str	r0, [r7, #20]

  return ret;
 8004b4a:	697b      	ldr	r3, [r7, #20]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd90      	pop	{r4, r7, pc}

08004b54 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004b60:	f107 0208 	add.w	r2, r7, #8
 8004b64:	2301      	movs	r3, #1
 8004b66:	2120      	movs	r1, #32
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ffc3 	bl	8004af4 <hts221_read_reg>
 8004b6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	7a3b      	ldrb	r3, [r7, #8]
 8004b80:	f362 0301 	bfi	r3, r2, #0, #2
 8004b84:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004b86:	f107 0208 	add.w	r2, r7, #8
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	2120      	movs	r1, #32
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ffc8 	bl	8004b24 <hts221_write_reg>
 8004b94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004bac:	f107 0208 	add.w	r2, r7, #8
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	2120      	movs	r1, #32
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ff9d 	bl	8004af4 <hts221_read_reg>
 8004bba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10f      	bne.n	8004be2 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	7a3b      	ldrb	r3, [r7, #8]
 8004bcc:	f362 0382 	bfi	r3, r2, #2, #1
 8004bd0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004bd2:	f107 0208 	add.w	r2, r7, #8
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	2120      	movs	r1, #32
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ffa2 	bl	8004b24 <hts221_write_reg>
 8004be0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8004bf6:	f107 0208 	add.w	r2, r7, #8
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	2128      	movs	r1, #40	@ 0x28
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff ff78 	bl	8004af4 <hts221_read_reg>
 8004c04:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004c06:	7a7b      	ldrb	r3, [r7, #9]
 8004c08:	b21a      	sxth	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	7a3a      	ldrb	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	b21a      	sxth	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c26:	68fb      	ldr	r3, [r7, #12]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004c3a:	f107 0208 	add.w	r2, r7, #8
 8004c3e:	2302      	movs	r3, #2
 8004c40:	212a      	movs	r1, #42	@ 0x2a
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff ff56 	bl	8004af4 <hts221_read_reg>
 8004c48:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004c4a:	7a7b      	ldrb	r3, [r7, #9]
 8004c4c:	b21a      	sxth	r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	7a3a      	ldrb	r2, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	b21a      	sxth	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c80:	f107 0208 	add.w	r2, r7, #8
 8004c84:	2301      	movs	r3, #1
 8004c86:	2120      	movs	r1, #32
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff33 	bl	8004af4 <hts221_read_reg>
 8004c8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	7a3b      	ldrb	r3, [r7, #8]
 8004ca0:	f362 13c7 	bfi	r3, r2, #7, #1
 8004ca4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ca6:	f107 0208 	add.w	r2, r7, #8
 8004caa:	2301      	movs	r3, #1
 8004cac:	2120      	movs	r1, #32
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff ff38 	bl	8004b24 <hts221_write_reg>
 8004cb4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8004cca:	f107 020b 	add.w	r2, r7, #11
 8004cce:	2301      	movs	r3, #1
 8004cd0:	2130      	movs	r1, #48	@ 0x30
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff0e 	bl	8004af4 <hts221_read_reg>
 8004cd8:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8004d06:	f107 020b 	add.w	r2, r7, #11
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	2131      	movs	r1, #49	@ 0x31
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fef0 	bl	8004af4 <hts221_read_reg>
 8004d14:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004d16:	7afb      	ldrb	r3, [r7, #11]
 8004d18:	ee07 3a90 	vmov	s15, r3
 8004d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8004d42:	f107 020f 	add.w	r2, r7, #15
 8004d46:	2301      	movs	r3, #1
 8004d48:	2132      	movs	r1, #50	@ 0x32
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fed2 	bl	8004af4 <hts221_read_reg>
 8004d50:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11b      	bne.n	8004d90 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004d58:	f107 0210 	add.w	r2, r7, #16
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	2135      	movs	r1, #53	@ 0x35
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fec7 	bl	8004af4 <hts221_read_reg>
 8004d66:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004d68:	7c3b      	ldrb	r3, [r7, #16]
 8004d6a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004d72:	7cfb      	ldrb	r3, [r7, #19]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	4413      	add	r3, r2
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d82:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004d90:	697b      	ldr	r3, [r7, #20]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004da4:	f107 020f 	add.w	r2, r7, #15
 8004da8:	2301      	movs	r3, #1
 8004daa:	2133      	movs	r1, #51	@ 0x33
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fea1 	bl	8004af4 <hts221_read_reg>
 8004db2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11b      	bne.n	8004df2 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004dba:	f107 0210 	add.w	r2, r7, #16
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	2135      	movs	r1, #53	@ 0x35
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fe96 	bl	8004af4 <hts221_read_reg>
 8004dc8:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8004dca:	7c3b      	ldrb	r3, [r7, #16]
 8004dcc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	4413      	add	r3, r2
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004de4:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004df2:	697b      	ldr	r3, [r7, #20]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8004e06:	f107 0208 	add.w	r2, r7, #8
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	2136      	movs	r1, #54	@ 0x36
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fe70 	bl	8004af4 <hts221_read_reg>
 8004e14:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004e16:	7a7b      	ldrb	r3, [r7, #9]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	7a3a      	ldrb	r2, [r7, #8]
 8004e1e:	4413      	add	r3, r2
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004e24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004e4a:	f107 0208 	add.w	r2, r7, #8
 8004e4e:	2302      	movs	r3, #2
 8004e50:	213a      	movs	r1, #58	@ 0x3a
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fe4e 	bl	8004af4 <hts221_read_reg>
 8004e58:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004e5a:	7a7b      	ldrb	r3, [r7, #9]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	7a3a      	ldrb	r2, [r7, #8]
 8004e62:	4413      	add	r3, r2
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004e68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8004e8e:	f107 0208 	add.w	r2, r7, #8
 8004e92:	2302      	movs	r3, #2
 8004e94:	213c      	movs	r1, #60	@ 0x3c
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff fe2c 	bl	8004af4 <hts221_read_reg>
 8004e9c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004e9e:	7a7b      	ldrb	r3, [r7, #9]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	7a3a      	ldrb	r2, [r7, #8]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004eac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8004ed2:	f107 0208 	add.w	r2, r7, #8
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	213e      	movs	r1, #62	@ 0x3e
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fe0a 	bl	8004af4 <hts221_read_reg>
 8004ee0:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004ee2:	7a7b      	ldrb	r3, [r7, #9]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	7a3a      	ldrb	r2, [r7, #8]
 8004eea:	4413      	add	r3, r2
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004ef0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e051      	b.n	8004fcc <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	7b1a      	ldrb	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699a      	ldr	r2, [r3, #24]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <LPS22HB_RegisterBusIO+0xcc>)
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <LPS22HB_RegisterBusIO+0xd0>)
 8004f6a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e020      	b.n	8004fcc <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4798      	blx	r3
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e016      	b.n	8004fcc <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d112      	bne.n	8004fcc <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8004fb4:	7afb      	ldrb	r3, [r7, #11]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2110      	movs	r1, #16
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f877 	bl	80050ae <LPS22HB_Write_Reg>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	08005197 	.word	0x08005197
 8004fdc:	0800521d 	.word	0x0800521d

08004fe0 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d108      	bne.n	8005004 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f876 	bl	80050e4 <LPS22HB_Initialize>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8005002:	e004      	b.n	800500e <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HB_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e014      	b.n	8005056 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f103 0220 	add.w	r2, r3, #32
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 f9c6 	bl	80053cc <lps22hb_data_rate_set>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e004      	b.n	8005056 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HB_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005068:	f107 030c 	add.w	r3, r7, #12
 800506c:	2204      	movs	r2, #4
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f00b fb97 	bl	80107a4 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3320      	adds	r3, #32
 800507a:	f107 020c 	add.w	r2, r7, #12
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f9c9 	bl	8005418 <lps22hb_pressure_raw_get>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800508c:	f04f 33ff 	mov.w	r3, #4294967295
 8005090:	e009      	b.n	80050a6 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f935 	bl	8005304 <lps22hb_from_lsb_to_hpa>
 800509a:	eef0 7a40 	vmov.f32	s15, s0
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	70fb      	strb	r3, [r7, #3]
 80050ba:	4613      	mov	r3, r2
 80050bc:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f103 0020 	add.w	r0, r3, #32
 80050c4:	1cba      	adds	r2, r7, #2
 80050c6:	78f9      	ldrb	r1, [r7, #3]
 80050c8:	2301      	movs	r3, #1
 80050ca:	f000 f902 	bl	80052d2 <lps22hb_write_reg>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295
 80050d8:	e000      	b.n	80050dc <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3320      	adds	r3, #32
 80050f0:	2101      	movs	r1, #1
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f9b9 	bl	800546a <lps22hb_low_power_set>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	e044      	b.n	800518e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3320      	adds	r3, #32
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f95e 	bl	80053cc <lps22hb_data_rate_set>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e038      	b.n	800518e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3320      	adds	r3, #32
 8005120:	2102      	movs	r1, #2
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f92c 	bl	8005380 <lps22hb_low_pass_filter_mode_set>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
 8005132:	e02c      	b.n	800518e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3320      	adds	r3, #32
 8005138:	2101      	movs	r1, #1
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f8fa 	bl	8005334 <lps22hb_block_data_update_set>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	e020      	b.n	800518e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3320      	adds	r3, #32
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f9ab 	bl	80054b6 <lps22hb_auto_add_inc_set>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00e      	beq.n	8005184 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8005166:	f04f 33ff 	mov.w	r3, #4294967295
 800516a:	e010      	b.n	800518e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3320      	adds	r3, #32
 8005170:	2101      	movs	r1, #1
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f99f 	bl	80054b6 <lps22hb_auto_add_inc_set>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e004      	b.n	800518e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2203      	movs	r2, #3
 8005188:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HB_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005196:	b590      	push	{r4, r7, lr}
 8005198:	b089      	sub	sp, #36	@ 0x24
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	461a      	mov	r2, r3
 80051a2:	460b      	mov	r3, r1
 80051a4:	72fb      	strb	r3, [r7, #11]
 80051a6:	4613      	mov	r3, r2
 80051a8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d121      	bne.n	80051fe <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	83fb      	strh	r3, [r7, #30]
 80051be:	e018      	b.n	80051f2 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	695c      	ldr	r4, [r3, #20]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	7b1b      	ldrb	r3, [r3, #12]
 80051c8:	4618      	mov	r0, r3
 80051ca:	7afb      	ldrb	r3, [r7, #11]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	8bfb      	ldrh	r3, [r7, #30]
 80051d0:	4413      	add	r3, r2
 80051d2:	b299      	uxth	r1, r3
 80051d4:	8bfb      	ldrh	r3, [r7, #30]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	441a      	add	r2, r3
 80051da:	2301      	movs	r3, #1
 80051dc:	47a0      	blx	r4
 80051de:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	e013      	b.n	8005214 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80051ec:	8bfb      	ldrh	r3, [r7, #30]
 80051ee:	3301      	adds	r3, #1
 80051f0:	83fb      	strh	r3, [r7, #30]
 80051f2:	8bfa      	ldrh	r2, [r7, #30]
 80051f4:	893b      	ldrh	r3, [r7, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d3e2      	bcc.n	80051c0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	e00a      	b.n	8005214 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	695c      	ldr	r4, [r3, #20]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	7b1b      	ldrb	r3, [r3, #12]
 8005206:	4618      	mov	r0, r3
 8005208:	7afb      	ldrb	r3, [r7, #11]
 800520a:	b299      	uxth	r1, r3
 800520c:	893b      	ldrh	r3, [r7, #8]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	47a0      	blx	r4
 8005212:	4603      	mov	r3, r0
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3724      	adds	r7, #36	@ 0x24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd90      	pop	{r4, r7, pc}

0800521c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b089      	sub	sp, #36	@ 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	461a      	mov	r2, r3
 8005228:	460b      	mov	r3, r1
 800522a:	72fb      	strb	r3, [r7, #11]
 800522c:	4613      	mov	r3, r2
 800522e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d121      	bne.n	8005284 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8005240:	2300      	movs	r3, #0
 8005242:	83fb      	strh	r3, [r7, #30]
 8005244:	e018      	b.n	8005278 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	691c      	ldr	r4, [r3, #16]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	7b1b      	ldrb	r3, [r3, #12]
 800524e:	4618      	mov	r0, r3
 8005250:	7afb      	ldrb	r3, [r7, #11]
 8005252:	b29a      	uxth	r2, r3
 8005254:	8bfb      	ldrh	r3, [r7, #30]
 8005256:	4413      	add	r3, r2
 8005258:	b299      	uxth	r1, r3
 800525a:	8bfb      	ldrh	r3, [r7, #30]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	441a      	add	r2, r3
 8005260:	2301      	movs	r3, #1
 8005262:	47a0      	blx	r4
 8005264:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	e013      	b.n	800529a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8005272:	8bfb      	ldrh	r3, [r7, #30]
 8005274:	3301      	adds	r3, #1
 8005276:	83fb      	strh	r3, [r7, #30]
 8005278:	8bfa      	ldrh	r2, [r7, #30]
 800527a:	893b      	ldrh	r3, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3e2      	bcc.n	8005246 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	e00a      	b.n	800529a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	691c      	ldr	r4, [r3, #16]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	7b1b      	ldrb	r3, [r3, #12]
 800528c:	4618      	mov	r0, r3
 800528e:	7afb      	ldrb	r3, [r7, #11]
 8005290:	b299      	uxth	r1, r3
 8005292:	893b      	ldrh	r3, [r7, #8]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	47a0      	blx	r4
 8005298:	4603      	mov	r3, r0
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3724      	adds	r7, #36	@ 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd90      	pop	{r4, r7, pc}

080052a2 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80052a2:	b590      	push	{r4, r7, lr}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	461a      	mov	r2, r3
 80052ae:	460b      	mov	r3, r1
 80052b0:	72fb      	strb	r3, [r7, #11]
 80052b2:	4613      	mov	r3, r2
 80052b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685c      	ldr	r4, [r3, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68d8      	ldr	r0, [r3, #12]
 80052be:	893b      	ldrh	r3, [r7, #8]
 80052c0:	7af9      	ldrb	r1, [r7, #11]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	47a0      	blx	r4
 80052c6:	6178      	str	r0, [r7, #20]

  return ret;
 80052c8:	697b      	ldr	r3, [r7, #20]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd90      	pop	{r4, r7, pc}

080052d2 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80052d2:	b590      	push	{r4, r7, lr}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	461a      	mov	r2, r3
 80052de:	460b      	mov	r3, r1
 80052e0:	72fb      	strb	r3, [r7, #11]
 80052e2:	4613      	mov	r3, r2
 80052e4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681c      	ldr	r4, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68d8      	ldr	r0, [r3, #12]
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	7af9      	ldrb	r1, [r7, #11]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	47a0      	blx	r4
 80052f6:	6178      	str	r0, [r7, #20]

  return ret;
 80052f8:	697b      	ldr	r3, [r7, #20]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}
	...

08005304 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005316:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005330 <lps22hb_from_lsb_to_hpa+0x2c>
 800531a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800531e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005322:	eeb0 0a67 	vmov.f32	s0, s15
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	49800000 	.word	0x49800000

08005334 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005340:	f107 0208 	add.w	r2, r7, #8
 8005344:	2301      	movs	r3, #1
 8005346:	2110      	movs	r1, #16
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ffaa 	bl	80052a2 <lps22hb_read_reg>
 800534e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	b2da      	uxtb	r2, r3
 800535e:	7a3b      	ldrb	r3, [r7, #8]
 8005360:	f362 0341 	bfi	r3, r2, #1, #1
 8005364:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005366:	f107 0208 	add.w	r2, r7, #8
 800536a:	2301      	movs	r3, #1
 800536c:	2110      	movs	r1, #16
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff ffaf 	bl	80052d2 <lps22hb_write_reg>
 8005374:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800538c:	f107 0208 	add.w	r2, r7, #8
 8005390:	2301      	movs	r3, #1
 8005392:	2110      	movs	r1, #16
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff84 	bl	80052a2 <lps22hb_read_reg>
 800539a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	7a3b      	ldrb	r3, [r7, #8]
 80053ac:	f362 0383 	bfi	r3, r2, #2, #2
 80053b0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053b2:	f107 0208 	add.w	r2, r7, #8
 80053b6:	2301      	movs	r3, #1
 80053b8:	2110      	movs	r1, #16
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ff89 	bl	80052d2 <lps22hb_write_reg>
 80053c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053d8:	f107 0208 	add.w	r2, r7, #8
 80053dc:	2301      	movs	r3, #1
 80053de:	2110      	movs	r1, #16
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ff5e 	bl	80052a2 <lps22hb_read_reg>
 80053e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10f      	bne.n	800540e <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	7a3b      	ldrb	r3, [r7, #8]
 80053f8:	f362 1306 	bfi	r3, r2, #4, #3
 80053fc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053fe:	f107 0208 	add.w	r2, r7, #8
 8005402:	2301      	movs	r3, #1
 8005404:	2110      	movs	r1, #16
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ff63 	bl	80052d2 <lps22hb_write_reg>
 800540c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8005422:	f107 0208 	add.w	r2, r7, #8
 8005426:	2303      	movs	r3, #3
 8005428:	2128      	movs	r1, #40	@ 0x28
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff ff39 	bl	80052a2 <lps22hb_read_reg>
 8005430:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005432:	7abb      	ldrb	r3, [r7, #10]
 8005434:	461a      	mov	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	7a7a      	ldrb	r2, [r7, #9]
 8005442:	441a      	add	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	7a3a      	ldrb	r2, [r7, #8]
 8005450:	441a      	add	r2, r3
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	601a      	str	r2, [r3, #0]

  return ret;
 8005460:	68fb      	ldr	r3, [r7, #12]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	460b      	mov	r3, r1
 8005474:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8005476:	f107 0208 	add.w	r2, r7, #8
 800547a:	2301      	movs	r3, #1
 800547c:	211a      	movs	r1, #26
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff ff0f 	bl	80052a2 <lps22hb_read_reg>
 8005484:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10f      	bne.n	80054ac <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	b2da      	uxtb	r2, r3
 8005494:	7a3b      	ldrb	r3, [r7, #8]
 8005496:	f362 0300 	bfi	r3, r2, #0, #1
 800549a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 800549c:	f107 0208 	add.w	r2, r7, #8
 80054a0:	2301      	movs	r3, #1
 80054a2:	211a      	movs	r1, #26
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff ff14 	bl	80052d2 <lps22hb_write_reg>
 80054aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	460b      	mov	r3, r1
 80054c0:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80054c2:	f107 0208 	add.w	r2, r7, #8
 80054c6:	2301      	movs	r3, #1
 80054c8:	2111      	movs	r1, #17
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fee9 	bl	80052a2 <lps22hb_read_reg>
 80054d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10f      	bne.n	80054f8 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	7a3b      	ldrb	r3, [r7, #8]
 80054e2:	f362 1304 	bfi	r3, r2, #4, #1
 80054e6:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80054e8:	f107 0208 	add.w	r2, r7, #8
 80054ec:	2301      	movs	r3, #1
 80054ee:	2111      	movs	r1, #17
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff feee 	bl	80052d2 <lps22hb_write_reg>
 80054f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e051      	b.n	80055c4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	7b1a      	ldrb	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 800555c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8005562:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e020      	b.n	80055c4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4798      	blx	r3
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 800558e:	f04f 33ff 	mov.w	r3, #4294967295
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e016      	b.n	80055c4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d112      	bne.n	80055c4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80055a8:	2301      	movs	r3, #1
 80055aa:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80055ac:	7afb      	ldrb	r3, [r7, #11]
 80055ae:	461a      	mov	r2, r3
 80055b0:	2123      	movs	r1, #35	@ 0x23
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f97b 	bl	80058ae <LSM303AGR_ACC_Write_Reg>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 80055be:	f04f 33ff 	mov.w	r3, #4294967295
 80055c2:	e000      	b.n	80055c6 <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	08005cc9 	.word	0x08005cc9
 80055d4:	08005d2b 	.word	0x08005d2b

080055d8 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3320      	adds	r3, #32
 80055e4:	2101      	movs	r1, #1
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fd1a 	bl	8006020 <lsm303agr_xl_block_data_update_set>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	e02c      	b.n	8005652 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3320      	adds	r3, #32
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fe5c 	bl	80062bc <lsm303agr_xl_fifo_mode_set>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	e020      	b.n	8005652 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2205      	movs	r2, #5
 8005614:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3320      	adds	r3, #32
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fc7a 	bl	8005f18 <lsm303agr_xl_data_rate_set>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	e010      	b.n	8005652 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3320      	adds	r3, #32
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fc94 	bl	8005f64 <lsm303agr_xl_full_scale_set>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	e004      	b.n	8005652 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM303AGR_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e014      	b.n	800569a <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f103 0220 	add.w	r2, r3, #32
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fc4a 	bl	8005f18 <lsm303agr_xl_data_rate_set>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	e004      	b.n	800569a <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM303AGR_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3320      	adds	r3, #32
 80056b4:	f107 020b 	add.w	r2, r7, #11
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fbf8 	bl	8005eb0 <lsm303agr_xl_operating_mode_get>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	e031      	b.n	8005730 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d01a      	beq.n	8005708 <LSM303AGR_ACC_GetSensitivity+0x66>
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	dc22      	bgt.n	800571c <LSM303AGR_ACC_GetSensitivity+0x7a>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d00a      	beq.n	80056f4 <LSM303AGR_ACC_GetSensitivity+0x52>
 80056de:	e01d      	b.n	800571c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa1e 	bl	8005b24 <LSM303AGR_ACC_GetSensitivityHR>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01a      	beq.n	8005724 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295
 80056f2:	e01d      	b.n	8005730 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa5a 	bl	8005bb0 <LSM303AGR_ACC_GetSensitivityNM>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d012      	beq.n	8005728 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	e013      	b.n	8005730 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa96 	bl	8005c3c <LSM303AGR_ACC_GetSensitivityLP>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8005716:	f04f 33ff 	mov.w	r3, #4294967295
 800571a:	e009      	b.n	8005730 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	60fb      	str	r3, [r7, #12]
      break;
 8005722:	e004      	b.n	800572e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005724:	bf00      	nop
 8005726:	e002      	b.n	800572e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005728:	bf00      	nop
 800572a:	e000      	b.n	800572e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800572c:	bf00      	nop
  }

  return ret;
 800572e:	68fb      	ldr	r3, [r7, #12]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8005742:	2301      	movs	r3, #1
 8005744:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3320      	adds	r3, #32
 800574e:	f107 020f 	add.w	r2, r7, #15
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fbab 	bl	8005eb0 <lsm303agr_xl_operating_mode_get>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
 8005764:	e04a      	b.n	80057fc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d00c      	beq.n	8005786 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 800576c:	2b02      	cmp	r3, #2
 800576e:	dc0e      	bgt.n	800578e <LSM303AGR_ACC_GetAxesRaw+0x56>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <LSM303AGR_ACC_GetAxesRaw+0x42>
 8005774:	2b01      	cmp	r3, #1
 8005776:	d003      	beq.n	8005780 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8005778:	e009      	b.n	800578e <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800577a:	2310      	movs	r3, #16
 800577c:	83fb      	strh	r3, [r7, #30]
      break;
 800577e:	e00a      	b.n	8005796 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8005780:	2340      	movs	r3, #64	@ 0x40
 8005782:	83fb      	strh	r3, [r7, #30]
      break;
 8005784:	e007      	b.n	8005796 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8005786:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800578a:	83fb      	strh	r3, [r7, #30]
      break;
 800578c:	e003      	b.n	8005796 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 800578e:	f04f 33ff 	mov.w	r3, #4294967295
 8005792:	61bb      	str	r3, [r7, #24]
      break;
 8005794:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d101      	bne.n	80057a2 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	e02c      	b.n	80057fc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3320      	adds	r3, #32
 80057a6:	f107 0210 	add.w	r2, r7, #16
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fc5d 	bl	800606c <lsm303agr_acceleration_raw_get>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	e01e      	b.n	80057fc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80057be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80057cc:	b21a      	sxth	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80057d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80057e0:	b21a      	sxth	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80057e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80057f4:	b21a      	sxth	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	809a      	strh	r2, [r3, #4]

  return ret;
 80057fa:	69bb      	ldr	r3, [r7, #24]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ff8c 	bl	8005738 <LSM303AGR_ACC_GetAxesRaw>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	e03c      	b.n	80058a6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff ff35 	bl	80056a2 <LSM303AGR_ACC_GetSensitivity>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	e030      	b.n	80058a6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005844:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005850:	edd7 7a03 	vldr	s15, [r7, #12]
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800585c:	ee17 2a90 	vmov	r2, s15
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005864:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005870:	edd7 7a03 	vldr	s15, [r7, #12]
 8005874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800587c:	ee17 2a90 	vmov	r2, s15
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005884:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005890:	edd7 7a03 	vldr	s15, [r7, #12]
 8005894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800589c:	ee17 2a90 	vmov	r2, s15
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
 80058ba:	4613      	mov	r3, r2
 80058bc:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f103 0020 	add.w	r0, r3, #32
 80058c4:	1cba      	adds	r2, r7, #2
 80058c6:	78f9      	ldrb	r1, [r7, #3]
 80058c8:	2301      	movs	r3, #1
 80058ca:	f000 fad9 	bl	8005e80 <lsm303agr_write_reg>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	e000      	b.n	80058dc <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e04b      	b.n	8005998 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	7b1a      	ldrb	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a1a      	ldr	r2, [pc, #104]	@ (80059a4 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 800593c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a19      	ldr	r2, [pc, #100]	@ (80059a8 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8005942:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e01e      	b.n	8005998 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4798      	blx	r3
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e014      	b.n	8005998 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3320      	adds	r3, #32
 8005984:	2101      	movs	r1, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fcbe 	bl	8006308 <lsm303agr_mag_i2c_interface_set>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	e000      	b.n	800599a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	08005d8d 	.word	0x08005d8d
 80059a8:	08005def 	.word	0x08005def

080059ac <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3320      	adds	r3, #32
 80059b8:	2101      	movs	r1, #1
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fbea 	bl	8006194 <lsm303agr_mag_block_data_update_set>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	e028      	b.n	8005a1e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3320      	adds	r3, #32
 80059d0:	2102      	movs	r1, #2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fb92 	bl	80060fc <lsm303agr_mag_operating_mode_set>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80059de:	f04f 33ff 	mov.w	r3, #4294967295
 80059e2:	e01c      	b.n	8005a1e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3320      	adds	r3, #32
 80059e8:	2103      	movs	r1, #3
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fbac 	bl	8006148 <lsm303agr_mag_data_rate_set>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	e010      	b.n	8005a1e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3320      	adds	r3, #32
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fc34 	bl	8006270 <lsm303agr_mag_self_test_set>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8005a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a12:	e004      	b.n	8005a1e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM303AGR_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e010      	b.n	8005a5e <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3320      	adds	r3, #32
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fb5a 	bl	80060fc <lsm303agr_mag_operating_mode_set>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	e004      	b.n	8005a5e <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM303AGR_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005a76:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3320      	adds	r3, #32
 8005a94:	f107 0210 	add.w	r2, r7, #16
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fba0 	bl	80061e0 <lsm303agr_magnetic_raw_get>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aaa:	e036      	b.n	8005b1a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005aac:	f107 030c 	add.w	r3, r7, #12
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff ffd7 	bl	8005a66 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005ab8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ad0:	ee17 2a90 	vmov	r2, s15
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005af0:	ee17 2a90 	vmov	r2, s15
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005af8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b10:	ee17 2a90 	vmov	r2, s15
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3320      	adds	r3, #32
 8005b36:	f107 020b 	add.w	r2, r7, #11
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fa37 	bl	8005fb0 <lsm303agr_xl_full_scale_get>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4c:	e023      	b.n	8005b96 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d81b      	bhi.n	8005b8c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005b54:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b75 	.word	0x08005b75
 8005b64:	08005b7d 	.word	0x08005b7d
 8005b68:	08005b85 	.word	0x08005b85
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba0 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005b70:	601a      	str	r2, [r3, #0]
      break;
 8005b72:	e00f      	b.n	8005b94 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4a0b      	ldr	r2, [pc, #44]	@ (8005ba4 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005b78:	601a      	str	r2, [r3, #0]
      break;
 8005b7a:	e00b      	b.n	8005b94 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005b80:	601a      	str	r2, [r3, #0]
      break;
 8005b82:	e007      	b.n	8005b94 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	4a09      	ldr	r2, [pc, #36]	@ (8005bac <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005b88:	601a      	str	r2, [r3, #0]
      break;
 8005b8a:	e003      	b.n	8005b94 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	60fb      	str	r3, [r7, #12]
      break;
 8005b92:	bf00      	nop
  }

  return ret;
 8005b94:	68fb      	ldr	r3, [r7, #12]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	3f7ae148 	.word	0x3f7ae148
 8005ba4:	3ff9999a 	.word	0x3ff9999a
 8005ba8:	4079999a 	.word	0x4079999a
 8005bac:	413b851f 	.word	0x413b851f

08005bb0 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3320      	adds	r3, #32
 8005bc2:	f107 020b 	add.w	r2, r7, #11
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f9f1 	bl	8005fb0 <lsm303agr_xl_full_scale_get>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	e023      	b.n	8005c22 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005bda:	7afb      	ldrb	r3, [r7, #11]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d81b      	bhi.n	8005c18 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005be0:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005bf9 	.word	0x08005bf9
 8005bec:	08005c01 	.word	0x08005c01
 8005bf0:	08005c09 	.word	0x08005c09
 8005bf4:	08005c11 	.word	0x08005c11
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8005c2c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005bfc:	601a      	str	r2, [r3, #0]
      break;
 8005bfe:	e00f      	b.n	8005c20 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	4a0b      	ldr	r2, [pc, #44]	@ (8005c30 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005c04:	601a      	str	r2, [r3, #0]
      break;
 8005c06:	e00b      	b.n	8005c20 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c34 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005c0c:	601a      	str	r2, [r3, #0]
      break;
 8005c0e:	e007      	b.n	8005c20 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4a09      	ldr	r2, [pc, #36]	@ (8005c38 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005c14:	601a      	str	r2, [r3, #0]
      break;
 8005c16:	e003      	b.n	8005c20 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005c18:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1c:	60fb      	str	r3, [r7, #12]
      break;
 8005c1e:	bf00      	nop
  }

  return ret;
 8005c20:	68fb      	ldr	r3, [r7, #12]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	4079999a 	.word	0x4079999a
 8005c30:	40fa3d71 	.word	0x40fa3d71
 8005c34:	417a147b 	.word	0x417a147b
 8005c38:	423b999a 	.word	0x423b999a

08005c3c <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3320      	adds	r3, #32
 8005c4e:	f107 020b 	add.w	r2, r7, #11
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f9ab 	bl	8005fb0 <lsm303agr_xl_full_scale_get>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	e023      	b.n	8005cae <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005c66:	7afb      	ldrb	r3, [r7, #11]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d81b      	bhi.n	8005ca4 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005c85 	.word	0x08005c85
 8005c78:	08005c8d 	.word	0x08005c8d
 8005c7c:	08005c95 	.word	0x08005c95
 8005c80:	08005c9d 	.word	0x08005c9d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb8 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005c88:	601a      	str	r2, [r3, #0]
      break;
 8005c8a:	e00f      	b.n	8005cac <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005cbc <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005c90:	601a      	str	r2, [r3, #0]
      break;
 8005c92:	e00b      	b.n	8005cac <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc0 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005c98:	601a      	str	r2, [r3, #0]
      break;
 8005c9a:	e007      	b.n	8005cac <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4a09      	ldr	r2, [pc, #36]	@ (8005cc4 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005ca0:	601a      	str	r2, [r3, #0]
      break;
 8005ca2:	e003      	b.n	8005cac <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca8:	60fb      	str	r3, [r7, #12]
      break;
 8005caa:	bf00      	nop
  }

  return ret;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	417a147b 	.word	0x417a147b
 8005cbc:	41fa147b 	.word	0x41fa147b
 8005cc0:	427a147b 	.word	0x427a147b
 8005cc4:	433b947b 	.word	0x433b947b

08005cc8 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	72fb      	strb	r3, [r7, #11]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10e      	bne.n	8005d06 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	695c      	ldr	r4, [r3, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	7b1b      	ldrb	r3, [r3, #12]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	893b      	ldrh	r3, [r7, #8]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	47a0      	blx	r4
 8005d02:	4603      	mov	r3, r0
 8005d04:	e00d      	b.n	8005d22 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	695c      	ldr	r4, [r3, #20]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	7b1b      	ldrb	r3, [r3, #12]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	893b      	ldrh	r3, [r7, #8]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	47a0      	blx	r4
 8005d20:	4603      	mov	r3, r0
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd90      	pop	{r4, r7, pc}

08005d2a <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d2a:	b590      	push	{r4, r7, lr}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	461a      	mov	r2, r3
 8005d36:	460b      	mov	r3, r1
 8005d38:	72fb      	strb	r3, [r7, #11]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10e      	bne.n	8005d68 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	691c      	ldr	r4, [r3, #16]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	7b1b      	ldrb	r3, [r3, #12]
 8005d52:	4618      	mov	r0, r3
 8005d54:	7afb      	ldrb	r3, [r7, #11]
 8005d56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	893b      	ldrh	r3, [r7, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	47a0      	blx	r4
 8005d64:	4603      	mov	r3, r0
 8005d66:	e00d      	b.n	8005d84 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	691c      	ldr	r4, [r3, #16]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	7b1b      	ldrb	r3, [r3, #12]
 8005d70:	4618      	mov	r0, r3
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	893b      	ldrh	r3, [r7, #8]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	47a0      	blx	r4
 8005d82:	4603      	mov	r3, r0
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd90      	pop	{r4, r7, pc}

08005d8c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	461a      	mov	r2, r3
 8005d98:	460b      	mov	r3, r1
 8005d9a:	72fb      	strb	r3, [r7, #11]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10e      	bne.n	8005dca <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	695c      	ldr	r4, [r3, #20]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	7b1b      	ldrb	r3, [r3, #12]
 8005db4:	4618      	mov	r0, r3
 8005db6:	7afb      	ldrb	r3, [r7, #11]
 8005db8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	893b      	ldrh	r3, [r7, #8]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	47a0      	blx	r4
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	e00d      	b.n	8005de6 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	695c      	ldr	r4, [r3, #20]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	7b1b      	ldrb	r3, [r3, #12]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	893b      	ldrh	r3, [r7, #8]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	47a0      	blx	r4
 8005de4:	4603      	mov	r3, r0
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}

08005dee <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005dee:	b590      	push	{r4, r7, lr}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	72fb      	strb	r3, [r7, #11]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10e      	bne.n	8005e2c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	691c      	ldr	r4, [r3, #16]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	7b1b      	ldrb	r3, [r3, #12]
 8005e16:	4618      	mov	r0, r3
 8005e18:	7afb      	ldrb	r3, [r7, #11]
 8005e1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4619      	mov	r1, r3
 8005e22:	893b      	ldrh	r3, [r7, #8]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	47a0      	blx	r4
 8005e28:	4603      	mov	r3, r0
 8005e2a:	e00d      	b.n	8005e48 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	691c      	ldr	r4, [r3, #16]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	7b1b      	ldrb	r3, [r3, #12]
 8005e34:	4618      	mov	r0, r3
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	4619      	mov	r1, r3
 8005e40:	893b      	ldrh	r3, [r7, #8]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	47a0      	blx	r4
 8005e46:	4603      	mov	r3, r0
  }
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd90      	pop	{r4, r7, pc}

08005e50 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	72fb      	strb	r3, [r7, #11]
 8005e60:	4613      	mov	r3, r2
 8005e62:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685c      	ldr	r4, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68d8      	ldr	r0, [r3, #12]
 8005e6c:	893b      	ldrh	r3, [r7, #8]
 8005e6e:	7af9      	ldrb	r1, [r7, #11]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	47a0      	blx	r4
 8005e74:	6178      	str	r0, [r7, #20]

  return ret;
 8005e76:	697b      	ldr	r3, [r7, #20]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd90      	pop	{r4, r7, pc}

08005e80 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	72fb      	strb	r3, [r7, #11]
 8005e90:	4613      	mov	r3, r2
 8005e92:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681c      	ldr	r4, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68d8      	ldr	r0, [r3, #12]
 8005e9c:	893b      	ldrh	r3, [r7, #8]
 8005e9e:	7af9      	ldrb	r1, [r7, #11]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	47a0      	blx	r4
 8005ea4:	6178      	str	r0, [r7, #20]

  return ret;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd90      	pop	{r4, r7, pc}

08005eb0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005eba:	f107 020c 	add.w	r2, r7, #12
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff ffc4 	bl	8005e50 <lsm303agr_read_reg>
 8005ec8:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d107      	bne.n	8005ee0 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005ed0:	f107 0210 	add.w	r2, r7, #16
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	2123      	movs	r1, #35	@ 0x23
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ffb9 	bl	8005e50 <lsm303agr_read_reg>
 8005ede:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8005ee0:	7b3b      	ldrb	r3, [r7, #12]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	e00c      	b.n	8005f0e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8005ef4:	7c3b      	ldrb	r3, [r7, #16]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e002      	b.n	8005f0e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005f0e:	697b      	ldr	r3, [r7, #20]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005f24:	f107 0208 	add.w	r2, r7, #8
 8005f28:	2301      	movs	r3, #1
 8005f2a:	2120      	movs	r1, #32
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff8f 	bl	8005e50 <lsm303agr_read_reg>
 8005f32:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	7a3b      	ldrb	r3, [r7, #8]
 8005f44:	f362 1307 	bfi	r3, r2, #4, #4
 8005f48:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005f4a:	f107 0208 	add.w	r2, r7, #8
 8005f4e:	2301      	movs	r3, #1
 8005f50:	2120      	movs	r1, #32
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff ff94 	bl	8005e80 <lsm303agr_write_reg>
 8005f58:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005f70:	f107 0208 	add.w	r2, r7, #8
 8005f74:	2301      	movs	r3, #1
 8005f76:	2123      	movs	r1, #35	@ 0x23
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ff69 	bl	8005e50 <lsm303agr_read_reg>
 8005f7e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	7a3b      	ldrb	r3, [r7, #8]
 8005f90:	f362 1305 	bfi	r3, r2, #4, #2
 8005f94:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005f96:	f107 0208 	add.w	r2, r7, #8
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	2123      	movs	r1, #35	@ 0x23
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ff6e 	bl	8005e80 <lsm303agr_write_reg>
 8005fa4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005fba:	f107 0208 	add.w	r2, r7, #8
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	2123      	movs	r1, #35	@ 0x23
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff ff44 	bl	8005e50 <lsm303agr_read_reg>
 8005fc8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8005fca:	7a3b      	ldrb	r3, [r7, #8]
 8005fcc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d81a      	bhi.n	800600c <lsm303agr_xl_full_scale_get+0x5c>
 8005fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <lsm303agr_xl_full_scale_get+0x2c>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005fed 	.word	0x08005fed
 8005fe0:	08005ff5 	.word	0x08005ff5
 8005fe4:	08005ffd 	.word	0x08005ffd
 8005fe8:	08006005 	.word	0x08006005
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
      break;
 8005ff2:	e00f      	b.n	8006014 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	701a      	strb	r2, [r3, #0]
      break;
 8005ffa:	e00b      	b.n	8006014 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2202      	movs	r2, #2
 8006000:	701a      	strb	r2, [r3, #0]
      break;
 8006002:	e007      	b.n	8006014 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2203      	movs	r2, #3
 8006008:	701a      	strb	r2, [r3, #0]
      break;
 800600a:	e003      	b.n	8006014 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2200      	movs	r2, #0
 8006010:	701a      	strb	r2, [r3, #0]
      break;
 8006012:	bf00      	nop
  }

  return ret;
 8006014:	68fb      	ldr	r3, [r7, #12]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop

08006020 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800602c:	f107 0208 	add.w	r2, r7, #8
 8006030:	2301      	movs	r3, #1
 8006032:	2123      	movs	r1, #35	@ 0x23
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ff0b 	bl	8005e50 <lsm303agr_read_reg>
 800603a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	7a3b      	ldrb	r3, [r7, #8]
 800604c:	f362 13c7 	bfi	r3, r2, #7, #1
 8006050:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006052:	f107 0208 	add.w	r2, r7, #8
 8006056:	2301      	movs	r3, #1
 8006058:	2123      	movs	r1, #35	@ 0x23
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ff10 	bl	8005e80 <lsm303agr_write_reg>
 8006060:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8006076:	f107 020c 	add.w	r2, r7, #12
 800607a:	2306      	movs	r3, #6
 800607c:	2128      	movs	r1, #40	@ 0x28
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fee6 	bl	8005e50 <lsm303agr_read_reg>
 8006084:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006086:	7b7b      	ldrb	r3, [r7, #13]
 8006088:	b21a      	sxth	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006094:	b29b      	uxth	r3, r3
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	b29b      	uxth	r3, r3
 800609a:	7b3a      	ldrb	r2, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	b29b      	uxth	r3, r3
 80060a0:	b21a      	sxth	r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	3302      	adds	r3, #2
 80060ac:	b212      	sxth	r2, r2
 80060ae:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	3302      	adds	r3, #2
 80060b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	b29b      	uxth	r3, r3
 80060be:	7bba      	ldrb	r2, [r7, #14]
 80060c0:	4413      	add	r3, r2
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	3302      	adds	r3, #2
 80060c8:	b212      	sxth	r2, r2
 80060ca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80060cc:	7c7a      	ldrb	r2, [r7, #17]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	b212      	sxth	r2, r2
 80060d4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	3304      	adds	r3, #4
 80060da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	7c3a      	ldrb	r2, [r7, #16]
 80060e6:	4413      	add	r3, r2
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	3304      	adds	r3, #4
 80060ee:	b212      	sxth	r2, r2
 80060f0:	801a      	strh	r2, [r3, #0]

  return ret;
 80060f2:	697b      	ldr	r3, [r7, #20]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006108:	f107 0208 	add.w	r2, r7, #8
 800610c:	2301      	movs	r3, #1
 800610e:	2160      	movs	r1, #96	@ 0x60
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fe9d 	bl	8005e50 <lsm303agr_read_reg>
 8006116:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	b2da      	uxtb	r2, r3
 8006126:	7a3b      	ldrb	r3, [r7, #8]
 8006128:	f362 0301 	bfi	r3, r2, #0, #2
 800612c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800612e:	f107 0208 	add.w	r2, r7, #8
 8006132:	2301      	movs	r3, #1
 8006134:	2160      	movs	r1, #96	@ 0x60
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff fea2 	bl	8005e80 <lsm303agr_write_reg>
 800613c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006154:	f107 0208 	add.w	r2, r7, #8
 8006158:	2301      	movs	r3, #1
 800615a:	2160      	movs	r1, #96	@ 0x60
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fe77 	bl	8005e50 <lsm303agr_read_reg>
 8006162:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	b2da      	uxtb	r2, r3
 8006172:	7a3b      	ldrb	r3, [r7, #8]
 8006174:	f362 0383 	bfi	r3, r2, #2, #2
 8006178:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800617a:	f107 0208 	add.w	r2, r7, #8
 800617e:	2301      	movs	r3, #1
 8006180:	2160      	movs	r1, #96	@ 0x60
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fe7c 	bl	8005e80 <lsm303agr_write_reg>
 8006188:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800618a:	68fb      	ldr	r3, [r7, #12]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80061a0:	f107 0208 	add.w	r2, r7, #8
 80061a4:	2301      	movs	r3, #1
 80061a6:	2162      	movs	r1, #98	@ 0x62
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fe51 	bl	8005e50 <lsm303agr_read_reg>
 80061ae:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	7a3b      	ldrb	r3, [r7, #8]
 80061c0:	f362 1304 	bfi	r3, r2, #4, #1
 80061c4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80061c6:	f107 0208 	add.w	r2, r7, #8
 80061ca:	2301      	movs	r3, #1
 80061cc:	2162      	movs	r1, #98	@ 0x62
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fe56 	bl	8005e80 <lsm303agr_write_reg>
 80061d4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80061ea:	f107 020c 	add.w	r2, r7, #12
 80061ee:	2306      	movs	r3, #6
 80061f0:	2168      	movs	r1, #104	@ 0x68
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff fe2c 	bl	8005e50 <lsm303agr_read_reg>
 80061f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80061fa:	7b7b      	ldrb	r3, [r7, #13]
 80061fc:	b21a      	sxth	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006208:	b29b      	uxth	r3, r3
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	b29b      	uxth	r3, r3
 800620e:	7b3a      	ldrb	r2, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	b29b      	uxth	r3, r3
 8006214:	b21a      	sxth	r2, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800621a:	7bfa      	ldrb	r2, [r7, #15]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	3302      	adds	r3, #2
 8006220:	b212      	sxth	r2, r2
 8006222:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	3302      	adds	r3, #2
 8006228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800622c:	b29b      	uxth	r3, r3
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	b29b      	uxth	r3, r3
 8006232:	7bba      	ldrb	r2, [r7, #14]
 8006234:	4413      	add	r3, r2
 8006236:	b29a      	uxth	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	3302      	adds	r3, #2
 800623c:	b212      	sxth	r2, r2
 800623e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006240:	7c7a      	ldrb	r2, [r7, #17]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	3304      	adds	r3, #4
 8006246:	b212      	sxth	r2, r2
 8006248:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	3304      	adds	r3, #4
 800624e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006252:	b29b      	uxth	r3, r3
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	b29b      	uxth	r3, r3
 8006258:	7c3a      	ldrb	r2, [r7, #16]
 800625a:	4413      	add	r3, r2
 800625c:	b29a      	uxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3304      	adds	r3, #4
 8006262:	b212      	sxth	r2, r2
 8006264:	801a      	strh	r2, [r3, #0]

  return ret;
 8006266:	697b      	ldr	r3, [r7, #20]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800627c:	f107 0208 	add.w	r2, r7, #8
 8006280:	2301      	movs	r3, #1
 8006282:	2162      	movs	r1, #98	@ 0x62
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fde3 	bl	8005e50 <lsm303agr_read_reg>
 800628a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	b2da      	uxtb	r2, r3
 800629a:	7a3b      	ldrb	r3, [r7, #8]
 800629c:	f362 0341 	bfi	r3, r2, #1, #1
 80062a0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80062a2:	f107 0208 	add.w	r2, r7, #8
 80062a6:	2301      	movs	r3, #1
 80062a8:	2162      	movs	r1, #98	@ 0x62
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff fde8 	bl	8005e80 <lsm303agr_write_reg>
 80062b0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80062c8:	f107 0208 	add.w	r2, r7, #8
 80062cc:	2301      	movs	r3, #1
 80062ce:	212e      	movs	r1, #46	@ 0x2e
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fdbd 	bl	8005e50 <lsm303agr_read_reg>
 80062d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10f      	bne.n	80062fe <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	7a3b      	ldrb	r3, [r7, #8]
 80062e8:	f362 1387 	bfi	r3, r2, #6, #2
 80062ec:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80062ee:	f107 0208 	add.w	r2, r7, #8
 80062f2:	2301      	movs	r3, #1
 80062f4:	212e      	movs	r1, #46	@ 0x2e
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fdc2 	bl	8005e80 <lsm303agr_write_reg>
 80062fc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80062fe:	68fb      	ldr	r3, [r7, #12]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006314:	f107 0208 	add.w	r2, r7, #8
 8006318:	2301      	movs	r3, #1
 800631a:	2162      	movs	r1, #98	@ 0x62
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff fd97 	bl	8005e50 <lsm303agr_read_reg>
 8006322:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10f      	bne.n	800634a <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	7a3b      	ldrb	r3, [r7, #8]
 8006334:	f362 1345 	bfi	r3, r2, #5, #1
 8006338:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800633a:	f107 0208 	add.w	r2, r7, #8
 800633e:	2301      	movs	r3, #1
 8006340:	2162      	movs	r1, #98	@ 0x62
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fd9c 	bl	8005e80 <lsm303agr_write_reg>
 8006348:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e051      	b.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	7b1a      	ldrb	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006420 <LSM6DSL_RegisterBusIO+0xcc>)
 80063ac:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006424 <LSM6DSL_RegisterBusIO+0xd0>)
 80063b2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e020      	b.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4798      	blx	r3
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e016      	b.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d112      	bne.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10d      	bne.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80063f8:	230c      	movs	r3, #12
 80063fa:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	461a      	mov	r2, r3
 8006400:	2112      	movs	r1, #18
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f968 	bl	80066d8 <LSM6DSL_Write_Reg>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	0800670f 	.word	0x0800670f
 8006424:	08006745 	.word	0x08006745

08006428 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3320      	adds	r3, #32
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fb18 	bl	8006a6c <lsm6dsl_auto_increment_set>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295
 8006446:	e054      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3320      	adds	r3, #32
 800644c:	2101      	movs	r1, #1
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fa9e 	bl	8006990 <lsm6dsl_block_data_update_set>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800645a:	f04f 33ff 	mov.w	r3, #4294967295
 800645e:	e048      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3320      	adds	r3, #32
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb26 	bl	8006ab8 <lsm6dsl_fifo_mode_set>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	e03c      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2204      	movs	r2, #4
 800647c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3320      	adds	r3, #32
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f9cd 	bl	8006826 <lsm6dsl_xl_data_rate_set>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295
 8006496:	e02c      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3320      	adds	r3, #32
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f99b 	bl	80067da <lsm6dsl_xl_full_scale_set>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295
 80064ae:	e020      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2204      	movs	r2, #4
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3320      	adds	r3, #32
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fa40 	bl	8006944 <lsm6dsl_gy_data_rate_set>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80064ca:	f04f 33ff 	mov.w	r3, #4294967295
 80064ce:	e010      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3320      	adds	r3, #32
 80064d4:	2106      	movs	r1, #6
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f9cb 	bl	8006872 <lsm6dsl_gy_full_scale_set>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	e004      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e014      	b.n	800653a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f103 0220 	add.w	r2, r3, #32
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f000 f981 	bl	8006826 <lsm6dsl_xl_data_rate_set>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	e004      	b.n	800653a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e014      	b.n	8006582 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0220 	add.w	r2, r3, #32
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f000 f9ec 	bl	8006944 <lsm6dsl_gy_data_rate_set>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006572:	f04f 33ff 	mov.w	r3, #4294967295
 8006576:	e004      	b.n	8006582 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3320      	adds	r3, #32
 800659e:	f107 020b 	add.w	r2, r7, #11
 80065a2:	4611      	mov	r1, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f98b 	bl	80068c0 <lsm6dsl_gy_full_scale_get>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80065b0:	f04f 33ff 	mov.w	r3, #4294967295
 80065b4:	e02d      	b.n	8006612 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	2b06      	cmp	r3, #6
 80065ba:	d825      	bhi.n	8006608 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80065bc:	a201      	add	r2, pc, #4	@ (adr r2, 80065c4 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065e1 	.word	0x080065e1
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	08006609 	.word	0x08006609
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	08006609 	.word	0x08006609
 80065dc:	08006601 	.word	0x08006601
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4a0e      	ldr	r2, [pc, #56]	@ (800661c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80065e4:	601a      	str	r2, [r3, #0]
      break;
 80065e6:	e013      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006620 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80065ec:	601a      	str	r2, [r3, #0]
      break;
 80065ee:	e00f      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006624 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80065f4:	601a      	str	r2, [r3, #0]
      break;
 80065f6:	e00b      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4a0b      	ldr	r2, [pc, #44]	@ (8006628 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80065fc:	601a      	str	r2, [r3, #0]
      break;
 80065fe:	e007      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	4a0a      	ldr	r2, [pc, #40]	@ (800662c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8006604:	601a      	str	r2, [r3, #0]
      break;
 8006606:	e003      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	60fb      	str	r3, [r7, #12]
      break;
 800660e:	bf00      	nop
  }

  return ret;
 8006610:	68fb      	ldr	r3, [r7, #12]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	408c0000 	.word	0x408c0000
 8006620:	410c0000 	.word	0x410c0000
 8006624:	418c0000 	.word	0x418c0000
 8006628:	420c0000 	.word	0x420c0000
 800662c:	428c0000 	.word	0x428c0000

08006630 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3320      	adds	r3, #32
 800663e:	f107 0210 	add.w	r2, r7, #16
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f000 f9c9 	bl	80069dc <lsm6dsl_angular_rate_raw_get>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	e03c      	b.n	80066d0 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006656:	f107 030c 	add.w	r3, r7, #12
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff ff95 	bl	800658c <LSM6DSL_GYRO_GetSensitivity>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8006668:	f04f 33ff 	mov.w	r3, #4294967295
 800666c:	e030      	b.n	80066d0 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800666e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667a:	edd7 7a03 	vldr	s15, [r7, #12]
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006686:	ee17 2a90 	vmov	r2, s15
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800668e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800669a:	edd7 7a03 	vldr	s15, [r7, #12]
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066a6:	ee17 2a90 	vmov	r2, s15
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80066ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c6:	ee17 2a90 	vmov	r2, s15
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
 80066e4:	4613      	mov	r3, r2
 80066e6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f103 0020 	add.w	r0, r3, #32
 80066ee:	1cba      	adds	r2, r7, #2
 80066f0:	78f9      	ldrb	r1, [r7, #3]
 80066f2:	2301      	movs	r3, #1
 80066f4:	f000 f859 	bl	80067aa <lsm6dsl_write_reg>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	e000      	b.n	8006706 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800670e:	b590      	push	{r4, r7, lr}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	461a      	mov	r2, r3
 800671a:	460b      	mov	r3, r1
 800671c:	72fb      	strb	r3, [r7, #11]
 800671e:	4613      	mov	r3, r2
 8006720:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	695c      	ldr	r4, [r3, #20]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	7b1b      	ldrb	r3, [r3, #12]
 800672e:	4618      	mov	r0, r3
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	b299      	uxth	r1, r3
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	47a0      	blx	r4
 800673a:	4603      	mov	r3, r0
}
 800673c:	4618      	mov	r0, r3
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd90      	pop	{r4, r7, pc}

08006744 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	461a      	mov	r2, r3
 8006750:	460b      	mov	r3, r1
 8006752:	72fb      	strb	r3, [r7, #11]
 8006754:	4613      	mov	r3, r2
 8006756:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	691c      	ldr	r4, [r3, #16]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	7b1b      	ldrb	r3, [r3, #12]
 8006764:	4618      	mov	r0, r3
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	b299      	uxth	r1, r3
 800676a:	893b      	ldrh	r3, [r7, #8]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	47a0      	blx	r4
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd90      	pop	{r4, r7, pc}

0800677a <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800677a:	b590      	push	{r4, r7, lr}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	461a      	mov	r2, r3
 8006786:	460b      	mov	r3, r1
 8006788:	72fb      	strb	r3, [r7, #11]
 800678a:	4613      	mov	r3, r2
 800678c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685c      	ldr	r4, [r3, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68d8      	ldr	r0, [r3, #12]
 8006796:	893b      	ldrh	r3, [r7, #8]
 8006798:	7af9      	ldrb	r1, [r7, #11]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	47a0      	blx	r4
 800679e:	6178      	str	r0, [r7, #20]

  return ret;
 80067a0:	697b      	ldr	r3, [r7, #20]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd90      	pop	{r4, r7, pc}

080067aa <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80067aa:	b590      	push	{r4, r7, lr}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	461a      	mov	r2, r3
 80067b6:	460b      	mov	r3, r1
 80067b8:	72fb      	strb	r3, [r7, #11]
 80067ba:	4613      	mov	r3, r2
 80067bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681c      	ldr	r4, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68d8      	ldr	r0, [r3, #12]
 80067c6:	893b      	ldrh	r3, [r7, #8]
 80067c8:	7af9      	ldrb	r1, [r7, #11]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	47a0      	blx	r4
 80067ce:	6178      	str	r0, [r7, #20]

  return ret;
 80067d0:	697b      	ldr	r3, [r7, #20]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd90      	pop	{r4, r7, pc}

080067da <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80067e6:	f107 0208 	add.w	r2, r7, #8
 80067ea:	2301      	movs	r3, #1
 80067ec:	2110      	movs	r1, #16
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff ffc3 	bl	800677a <lsm6dsl_read_reg>
 80067f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10f      	bne.n	800681c <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	b2da      	uxtb	r2, r3
 8006804:	7a3b      	ldrb	r3, [r7, #8]
 8006806:	f362 0383 	bfi	r3, r2, #2, #2
 800680a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800680c:	f107 0208 	add.w	r2, r7, #8
 8006810:	2301      	movs	r3, #1
 8006812:	2110      	movs	r1, #16
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ffc8 	bl	80067aa <lsm6dsl_write_reg>
 800681a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800681c:	68fb      	ldr	r3, [r7, #12]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006832:	f107 0208 	add.w	r2, r7, #8
 8006836:	2301      	movs	r3, #1
 8006838:	2110      	movs	r1, #16
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff ff9d 	bl	800677a <lsm6dsl_read_reg>
 8006840:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10f      	bne.n	8006868 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	b2da      	uxtb	r2, r3
 8006850:	7a3b      	ldrb	r3, [r7, #8]
 8006852:	f362 1307 	bfi	r3, r2, #4, #4
 8006856:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006858:	f107 0208 	add.w	r2, r7, #8
 800685c:	2301      	movs	r3, #1
 800685e:	2110      	movs	r1, #16
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ffa2 	bl	80067aa <lsm6dsl_write_reg>
 8006866:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800687e:	f107 0208 	add.w	r2, r7, #8
 8006882:	2301      	movs	r3, #1
 8006884:	2111      	movs	r1, #17
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff ff77 	bl	800677a <lsm6dsl_read_reg>
 800688c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10f      	bne.n	80068b4 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	b2da      	uxtb	r2, r3
 800689c:	7a3b      	ldrb	r3, [r7, #8]
 800689e:	f362 0343 	bfi	r3, r2, #1, #3
 80068a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80068a4:	f107 0208 	add.w	r2, r7, #8
 80068a8:	2301      	movs	r3, #1
 80068aa:	2111      	movs	r1, #17
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ff7c 	bl	80067aa <lsm6dsl_write_reg>
 80068b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068b4:	68fb      	ldr	r3, [r7, #12]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80068ca:	f107 0208 	add.w	r2, r7, #8
 80068ce:	2301      	movs	r3, #1
 80068d0:	2111      	movs	r1, #17
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff ff51 	bl	800677a <lsm6dsl_read_reg>
 80068d8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 80068da:	7a3b      	ldrb	r3, [r7, #8]
 80068dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b06      	cmp	r3, #6
 80068e4:	d824      	bhi.n	8006930 <lsm6dsl_gy_full_scale_get+0x70>
 80068e6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <lsm6dsl_gy_full_scale_get+0x2c>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006909 	.word	0x08006909
 80068f0:	08006911 	.word	0x08006911
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006931 	.word	0x08006931
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006931 	.word	0x08006931
 8006904:	08006929 	.word	0x08006929
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
      break;
 800690e:	e013      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
      break;
 8006916:	e00f      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2202      	movs	r2, #2
 800691c:	701a      	strb	r2, [r3, #0]
      break;
 800691e:	e00b      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2204      	movs	r2, #4
 8006924:	701a      	strb	r2, [r3, #0]
      break;
 8006926:	e007      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2206      	movs	r2, #6
 800692c:	701a      	strb	r2, [r3, #0]
      break;
 800692e:	e003      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2207      	movs	r2, #7
 8006934:	701a      	strb	r2, [r3, #0]
      break;
 8006936:	bf00      	nop
  }

  return ret;
 8006938:	68fb      	ldr	r3, [r7, #12]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop

08006944 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006950:	f107 0208 	add.w	r2, r7, #8
 8006954:	2301      	movs	r3, #1
 8006956:	2111      	movs	r1, #17
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff0e 	bl	800677a <lsm6dsl_read_reg>
 800695e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10f      	bne.n	8006986 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	b2da      	uxtb	r2, r3
 800696e:	7a3b      	ldrb	r3, [r7, #8]
 8006970:	f362 1307 	bfi	r3, r2, #4, #4
 8006974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006976:	f107 0208 	add.w	r2, r7, #8
 800697a:	2301      	movs	r3, #1
 800697c:	2111      	movs	r1, #17
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff ff13 	bl	80067aa <lsm6dsl_write_reg>
 8006984:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006986:	68fb      	ldr	r3, [r7, #12]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800699c:	f107 0208 	add.w	r2, r7, #8
 80069a0:	2301      	movs	r3, #1
 80069a2:	2112      	movs	r1, #18
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff fee8 	bl	800677a <lsm6dsl_read_reg>
 80069aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10f      	bne.n	80069d2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	7a3b      	ldrb	r3, [r7, #8]
 80069bc:	f362 1386 	bfi	r3, r2, #6, #1
 80069c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80069c2:	f107 0208 	add.w	r2, r7, #8
 80069c6:	2301      	movs	r3, #1
 80069c8:	2112      	movs	r1, #18
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff feed 	bl	80067aa <lsm6dsl_write_reg>
 80069d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80069e6:	f107 020c 	add.w	r2, r7, #12
 80069ea:	2306      	movs	r3, #6
 80069ec:	2122      	movs	r1, #34	@ 0x22
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff fec3 	bl	800677a <lsm6dsl_read_reg>
 80069f4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80069f6:	7b7b      	ldrb	r3, [r7, #13]
 80069f8:	b21a      	sxth	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	7b3a      	ldrb	r2, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	b21a      	sxth	r2, r3
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006a16:	7bfa      	ldrb	r2, [r7, #15]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	3302      	adds	r3, #2
 8006a1c:	b212      	sxth	r2, r2
 8006a1e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	3302      	adds	r3, #2
 8006a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	7bba      	ldrb	r2, [r7, #14]
 8006a30:	4413      	add	r3, r2
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	3302      	adds	r3, #2
 8006a38:	b212      	sxth	r2, r2
 8006a3a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006a3c:	7c7a      	ldrb	r2, [r7, #17]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	3304      	adds	r3, #4
 8006a42:	b212      	sxth	r2, r2
 8006a44:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	7c3a      	ldrb	r2, [r7, #16]
 8006a56:	4413      	add	r3, r2
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	b212      	sxth	r2, r2
 8006a60:	801a      	strh	r2, [r3, #0]

  return ret;
 8006a62:	697b      	ldr	r3, [r7, #20]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006a78:	f107 0208 	add.w	r2, r7, #8
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	2112      	movs	r1, #18
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fe7a 	bl	800677a <lsm6dsl_read_reg>
 8006a86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	7a3b      	ldrb	r3, [r7, #8]
 8006a98:	f362 0382 	bfi	r3, r2, #2, #1
 8006a9c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006a9e:	f107 0208 	add.w	r2, r7, #8
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	2112      	movs	r1, #18
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fe7f 	bl	80067aa <lsm6dsl_write_reg>
 8006aac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006ac4:	f107 0208 	add.w	r2, r7, #8
 8006ac8:	2301      	movs	r3, #1
 8006aca:	210a      	movs	r1, #10
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fe54 	bl	800677a <lsm6dsl_read_reg>
 8006ad2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10f      	bne.n	8006afa <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	7a3b      	ldrb	r3, [r7, #8]
 8006ae4:	f362 0302 	bfi	r3, r2, #0, #3
 8006ae8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006aea:	f107 0208 	add.w	r2, r7, #8
 8006aee:	2301      	movs	r3, #1
 8006af0:	210a      	movs	r1, #10
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fe59 	bl	80067aa <lsm6dsl_write_reg>
 8006af8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8006afa:	68fb      	ldr	r3, [r7, #12]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b40 <HAL_Init+0x3c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a0b      	ldr	r2, [pc, #44]	@ (8006b40 <HAL_Init+0x3c>)
 8006b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b1a:	2003      	movs	r0, #3
 8006b1c:	f001 faca 	bl	80080b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b20:	200f      	movs	r0, #15
 8006b22:	f000 f80f 	bl	8006b44 <HAL_InitTick>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	71fb      	strb	r3, [r7, #7]
 8006b30:	e001      	b.n	8006b36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b32:	f7fc fceb 	bl	800350c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b36:	79fb      	ldrb	r3, [r7, #7]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40022000 	.word	0x40022000

08006b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006b50:	4b17      	ldr	r3, [pc, #92]	@ (8006bb0 <HAL_InitTick+0x6c>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d023      	beq.n	8006ba0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006b58:	4b16      	ldr	r3, [pc, #88]	@ (8006bb4 <HAL_InitTick+0x70>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b14      	ldr	r3, [pc, #80]	@ (8006bb0 <HAL_InitTick+0x6c>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	4619      	mov	r1, r3
 8006b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 fad5 	bl	800811e <HAL_SYSTICK_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10f      	bne.n	8006b9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b0f      	cmp	r3, #15
 8006b7e:	d809      	bhi.n	8006b94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b80:	2200      	movs	r2, #0
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	f001 fa9f 	bl	80080ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb8 <HAL_InitTick+0x74>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e007      	b.n	8006ba4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e004      	b.n	8006ba4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
 8006b9e:	e001      	b.n	8006ba4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000008 	.word	0x20000008
 8006bb4:	20000000 	.word	0x20000000
 8006bb8:	20000004 	.word	0x20000004

08006bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <HAL_IncTick+0x20>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <HAL_IncTick+0x24>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4413      	add	r3, r2
 8006bcc:	4a04      	ldr	r2, [pc, #16]	@ (8006be0 <HAL_IncTick+0x24>)
 8006bce:	6013      	str	r3, [r2, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	20000008 	.word	0x20000008
 8006be0:	200014e4 	.word	0x200014e4

08006be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return uwTick;
 8006be8:	4b03      	ldr	r3, [pc, #12]	@ (8006bf8 <HAL_GetTick+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	200014e4 	.word	0x200014e4

08006bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c04:	f7ff ffee 	bl	8006be4 <HAL_GetTick>
 8006c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d005      	beq.n	8006c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <HAL_Delay+0x44>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c22:	bf00      	nop
 8006c24:	f7ff ffde 	bl	8006be4 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d8f7      	bhi.n	8006c24 <HAL_Delay+0x28>
  {
  }
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000008 	.word	0x20000008

08006c44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	609a      	str	r2, [r3, #8]
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	609a      	str	r2, [r3, #8]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3360      	adds	r3, #96	@ 0x60
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b08      	ldr	r3, [pc, #32]	@ (8006cf0 <LL_ADC_SetOffset+0x44>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	03fff000 	.word	0x03fff000

08006cf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3360      	adds	r3, #96	@ 0x60
 8006d02:	461a      	mov	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3360      	adds	r3, #96	@ 0x60
 8006d30:	461a      	mov	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3330      	adds	r3, #48	@ 0x30
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	4413      	add	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	211f      	movs	r1, #31
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	401a      	ands	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0e9b      	lsrs	r3, r3, #26
 8006d8e:	f003 011f 	and.w	r1, r3, #31
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b087      	sub	sp, #28
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3314      	adds	r3, #20
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	0e5b      	lsrs	r3, r3, #25
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	4413      	add	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	0d1b      	lsrs	r3, r3, #20
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	2107      	movs	r1, #7
 8006ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	0d1b      	lsrs	r3, r3, #20
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	fa01 f303 	lsl.w	r3, r1, r3
 8006df2:	431a      	orrs	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006df8:	bf00      	nop
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f003 0318 	and.w	r3, r3, #24
 8006e26:	4908      	ldr	r1, [pc, #32]	@ (8006e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006e28:	40d9      	lsrs	r1, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	400b      	ands	r3, r1
 8006e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	0007ffff 	.word	0x0007ffff

08006e4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006e5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6093      	str	r3, [r2, #8]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e84:	d101      	bne.n	8006e8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006ea8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006eac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ed4:	d101      	bne.n	8006eda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <LL_ADC_IsEnabled+0x18>
 8006efc:	2301      	movs	r3, #1
 8006efe:	e000      	b.n	8006f02 <LL_ADC_IsEnabled+0x1a>
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d101      	bne.n	8006f26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d101      	bne.n	8006f4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e136      	b.n	80071e4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fc fae9 	bl	800355c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ff67 	bl	8006e70 <LL_ADC_IsDeepPowerDownEnabled>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff ff4d 	bl	8006e4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff ff82 	bl	8006ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d115      	bne.n	8006fee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ff66 	bl	8006e98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fcc:	4b87      	ldr	r3, [pc, #540]	@ (80071ec <HAL_ADC_Init+0x290>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	099b      	lsrs	r3, r3, #6
 8006fd2:	4a87      	ldr	r2, [pc, #540]	@ (80071f0 <HAL_ADC_Init+0x294>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	3301      	adds	r3, #1
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006fe0:	e002      	b.n	8006fe8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f9      	bne.n	8006fe2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff64 	bl	8006ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007002:	f043 0210 	orr.w	r2, r3, #16
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	f043 0201 	orr.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff ff75 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 8007024:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 80cf 	bne.w	80071d2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 80cb 	bne.w	80071d2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007040:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007044:	f043 0202 	orr.w	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff ff49 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d115      	bne.n	8007088 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800705c:	4865      	ldr	r0, [pc, #404]	@ (80071f4 <HAL_ADC_Init+0x298>)
 800705e:	f7ff ff43 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007062:	4604      	mov	r4, r0
 8007064:	4864      	ldr	r0, [pc, #400]	@ (80071f8 <HAL_ADC_Init+0x29c>)
 8007066:	f7ff ff3f 	bl	8006ee8 <LL_ADC_IsEnabled>
 800706a:	4603      	mov	r3, r0
 800706c:	431c      	orrs	r4, r3
 800706e:	4863      	ldr	r0, [pc, #396]	@ (80071fc <HAL_ADC_Init+0x2a0>)
 8007070:	f7ff ff3a 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007074:	4603      	mov	r3, r0
 8007076:	4323      	orrs	r3, r4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d105      	bne.n	8007088 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4619      	mov	r1, r3
 8007082:	485f      	ldr	r0, [pc, #380]	@ (8007200 <HAL_ADC_Init+0x2a4>)
 8007084:	f7ff fdde 	bl	8006c44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7e5b      	ldrb	r3, [r3, #25]
 800708c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007092:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007098:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800709e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80070a8:	4313      	orrs	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d106      	bne.n	80070c4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ba:	3b01      	subs	r3, #1
 80070bc:	045b      	lsls	r3, r3, #17
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	4b47      	ldr	r3, [pc, #284]	@ (8007204 <HAL_ADC_Init+0x2a8>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6812      	ldr	r2, [r2, #0]
 80070ee:	69b9      	ldr	r1, [r7, #24]
 80070f0:	430b      	orrs	r3, r1
 80070f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff ff08 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 80070fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ff15 	bl	8006f34 <LL_ADC_INJ_IsConversionOngoing>
 800710a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d13d      	bne.n	800718e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d13a      	bne.n	800718e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800711c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007124:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007126:	4313      	orrs	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007134:	f023 0302 	bic.w	r3, r3, #2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	69b9      	ldr	r1, [r7, #24]
 800713e:	430b      	orrs	r3, r1
 8007140:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007148:	2b01      	cmp	r3, #1
 800714a:	d118      	bne.n	800717e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007156:	f023 0304 	bic.w	r3, r3, #4
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007162:	4311      	orrs	r1, r2
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007168:	4311      	orrs	r1, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800716e:	430a      	orrs	r2, r1
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	611a      	str	r2, [r3, #16]
 800717c:	e007      	b.n	800718e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0201 	bic.w	r2, r2, #1
 800718c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d10c      	bne.n	80071b0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719c:	f023 010f 	bic.w	r1, r3, #15
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	1e5a      	subs	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80071ae:	e007      	b.n	80071c0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 020f 	bic.w	r2, r2, #15
 80071be:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c4:	f023 0303 	bic.w	r3, r3, #3
 80071c8:	f043 0201 	orr.w	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80071d0:	e007      	b.n	80071e2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d6:	f043 0210 	orr.w	r2, r3, #16
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80071e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3724      	adds	r7, #36	@ 0x24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd90      	pop	{r4, r7, pc}
 80071ec:	20000000 	.word	0x20000000
 80071f0:	053e2d63 	.word	0x053e2d63
 80071f4:	50040000 	.word	0x50040000
 80071f8:	50040100 	.word	0x50040100
 80071fc:	50040200 	.word	0x50040200
 8007200:	50040300 	.word	0x50040300
 8007204:	fff0c007 	.word	0xfff0c007

08007208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b0b6      	sub	sp, #216	@ 0xd8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_ADC_ConfigChannel+0x22>
 8007226:	2302      	movs	r3, #2
 8007228:	e3c7      	b.n	80079ba <HAL_ADC_ConfigChannel+0x7b2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fe69 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 83a8 	bne.w	8007994 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d824      	bhi.n	8007296 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	3b02      	subs	r3, #2
 8007252:	2b03      	cmp	r3, #3
 8007254:	d81b      	bhi.n	800728e <HAL_ADC_ConfigChannel+0x86>
 8007256:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <HAL_ADC_ConfigChannel+0x54>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	0800726d 	.word	0x0800726d
 8007260:	08007275 	.word	0x08007275
 8007264:	0800727d 	.word	0x0800727d
 8007268:	08007285 	.word	0x08007285
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	220c      	movs	r2, #12
 8007270:	605a      	str	r2, [r3, #4]
          break;
 8007272:	e010      	b.n	8007296 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2212      	movs	r2, #18
 8007278:	605a      	str	r2, [r3, #4]
          break;
 800727a:	e00c      	b.n	8007296 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2218      	movs	r2, #24
 8007280:	605a      	str	r2, [r3, #4]
          break;
 8007282:	e008      	b.n	8007296 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800728a:	605a      	str	r2, [r3, #4]
          break;
 800728c:	e003      	b.n	8007296 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2206      	movs	r2, #6
 8007292:	605a      	str	r2, [r3, #4]
          break;
 8007294:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	6859      	ldr	r1, [r3, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f7ff fd57 	bl	8006d56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fe2e 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 80072b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff fe3a 	bl	8006f34 <LL_ADC_INJ_IsConversionOngoing>
 80072c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80072c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f040 81a6 	bne.w	800761a <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80072ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 81a1 	bne.w	800761a <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6818      	ldr	r0, [r3, #0]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	461a      	mov	r2, r3
 80072e6:	f7ff fd62 	bl	8006dae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695a      	ldr	r2, [r3, #20]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	08db      	lsrs	r3, r3, #3
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d00a      	beq.n	8007322 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6919      	ldr	r1, [r3, #16]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800731c:	f7ff fcc6 	bl	8006cac <LL_ADC_SetOffset>
 8007320:	e17b      	b.n	800761a <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff fce3 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 800732e:	4603      	mov	r3, r0
 8007330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <HAL_ADC_ConfigChannel+0x146>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fcd8 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 8007344:	4603      	mov	r3, r0
 8007346:	0e9b      	lsrs	r3, r3, #26
 8007348:	f003 021f 	and.w	r2, r3, #31
 800734c:	e01e      	b.n	800738c <HAL_ADC_ConfigChannel+0x184>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fccd 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 800735a:	4603      	mov	r3, r0
 800735c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007364:	fa93 f3a3 	rbit	r3, r3
 8007368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800736c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 800737c:	2320      	movs	r3, #32
 800737e:	e004      	b.n	800738a <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8007380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007384:	fab3 f383 	clz	r3, r3
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <HAL_ADC_ConfigChannel+0x19c>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	0e9b      	lsrs	r3, r3, #26
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	e018      	b.n	80073d6 <HAL_ADC_ConfigChannel+0x1ce>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073b0:	fa93 f3a3 	rbit	r3, r3
 80073b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80073b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80073c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80073c8:	2320      	movs	r3, #32
 80073ca:	e004      	b.n	80073d6 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80073cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073d0:	fab3 f383 	clz	r3, r3
 80073d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d106      	bne.n	80073e8 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fc9c 	bl	8006d20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2101      	movs	r1, #1
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff fc80 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <HAL_ADC_ConfigChannel+0x20c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fc75 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 800740a:	4603      	mov	r3, r0
 800740c:	0e9b      	lsrs	r3, r3, #26
 800740e:	f003 021f 	and.w	r2, r3, #31
 8007412:	e01e      	b.n	8007452 <HAL_ADC_ConfigChannel+0x24a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2101      	movs	r1, #1
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fc6a 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 8007420:	4603      	mov	r3, r0
 8007422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800742a:	fa93 f3a3 	rbit	r3, r3
 800742e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800743a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8007442:	2320      	movs	r3, #32
 8007444:	e004      	b.n	8007450 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8007446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800744a:	fab3 f383 	clz	r3, r3
 800744e:	b2db      	uxtb	r3, r3
 8007450:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <HAL_ADC_ConfigChannel+0x262>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	0e9b      	lsrs	r3, r3, #26
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	e018      	b.n	800749c <HAL_ADC_ConfigChannel+0x294>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007472:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007476:	fa93 f3a3 	rbit	r3, r3
 800747a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800747e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007486:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 800748e:	2320      	movs	r3, #32
 8007490:	e004      	b.n	800749c <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8007492:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007496:	fab3 f383 	clz	r3, r3
 800749a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800749c:	429a      	cmp	r2, r3
 800749e:	d106      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2200      	movs	r2, #0
 80074a6:	2101      	movs	r1, #1
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff fc39 	bl	8006d20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2102      	movs	r1, #2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fc1d 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <HAL_ADC_ConfigChannel+0x2d2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fc12 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 80074d0:	4603      	mov	r3, r0
 80074d2:	0e9b      	lsrs	r3, r3, #26
 80074d4:	f003 021f 	and.w	r2, r3, #31
 80074d8:	e01e      	b.n	8007518 <HAL_ADC_ConfigChannel+0x310>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2102      	movs	r1, #2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fc07 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074f0:	fa93 f3a3 	rbit	r3, r3
 80074f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80074f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007500:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8007508:	2320      	movs	r3, #32
 800750a:	e004      	b.n	8007516 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800750c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007510:	fab3 f383 	clz	r3, r3
 8007514:	b2db      	uxtb	r3, r3
 8007516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007520:	2b00      	cmp	r3, #0
 8007522:	d105      	bne.n	8007530 <HAL_ADC_ConfigChannel+0x328>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	0e9b      	lsrs	r3, r3, #26
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	e016      	b.n	800755e <HAL_ADC_ConfigChannel+0x356>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800753c:	fa93 f3a3 	rbit	r3, r3
 8007540:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007542:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007548:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8007550:	2320      	movs	r3, #32
 8007552:	e004      	b.n	800755e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8007554:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007558:	fab3 f383 	clz	r3, r3
 800755c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800755e:	429a      	cmp	r2, r3
 8007560:	d106      	bne.n	8007570 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	2102      	movs	r1, #2
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fbd8 	bl	8006d20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2103      	movs	r1, #3
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fbbc 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 800757c:	4603      	mov	r3, r0
 800757e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <HAL_ADC_ConfigChannel+0x394>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2103      	movs	r1, #3
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fbb1 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 8007592:	4603      	mov	r3, r0
 8007594:	0e9b      	lsrs	r3, r3, #26
 8007596:	f003 021f 	and.w	r2, r3, #31
 800759a:	e017      	b.n	80075cc <HAL_ADC_ConfigChannel+0x3c4>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2103      	movs	r1, #3
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fba6 	bl	8006cf4 <LL_ADC_GetOffsetChannel>
 80075a8:	4603      	mov	r3, r0
 80075aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075ae:	fa93 f3a3 	rbit	r3, r3
 80075b2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80075b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80075b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80075be:	2320      	movs	r3, #32
 80075c0:	e003      	b.n	80075ca <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80075c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075c4:	fab3 f383 	clz	r3, r3
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x3dc>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	0e9b      	lsrs	r3, r3, #26
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	e011      	b.n	8007608 <HAL_ADC_ConfigChannel+0x400>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075ec:	fa93 f3a3 	rbit	r3, r3
 80075f0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80075f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80075f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 80075fc:	2320      	movs	r3, #32
 80075fe:	e003      	b.n	8007608 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8007600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007602:	fab3 f383 	clz	r3, r3
 8007606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007608:	429a      	cmp	r2, r3
 800760a:	d106      	bne.n	800761a <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2200      	movs	r2, #0
 8007612:	2103      	movs	r1, #3
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fb83 	bl	8006d20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fc62 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	f040 8140 	bne.w	80078ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	6819      	ldr	r1, [r3, #0]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	461a      	mov	r2, r3
 800763a:	f7ff fbe3 	bl	8006e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	4a8f      	ldr	r2, [pc, #572]	@ (8007880 <HAL_ADC_ConfigChannel+0x678>)
 8007644:	4293      	cmp	r3, r2
 8007646:	f040 8131 	bne.w	80078ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <HAL_ADC_ConfigChannel+0x46a>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	0e9b      	lsrs	r3, r3, #26
 8007660:	3301      	adds	r3, #1
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	2b09      	cmp	r3, #9
 8007668:	bf94      	ite	ls
 800766a:	2301      	movls	r3, #1
 800766c:	2300      	movhi	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e019      	b.n	80076a6 <HAL_ADC_ConfigChannel+0x49e>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800767a:	fa93 f3a3 	rbit	r3, r3
 800767e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007682:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007684:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 800768a:	2320      	movs	r3, #32
 800768c:	e003      	b.n	8007696 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 800768e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007690:	fab3 f383 	clz	r3, r3
 8007694:	b2db      	uxtb	r3, r3
 8007696:	3301      	adds	r3, #1
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	2b09      	cmp	r3, #9
 800769e:	bf94      	ite	ls
 80076a0:	2301      	movls	r3, #1
 80076a2:	2300      	movhi	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d079      	beq.n	800779e <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d107      	bne.n	80076c6 <HAL_ADC_ConfigChannel+0x4be>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	0e9b      	lsrs	r3, r3, #26
 80076bc:	3301      	adds	r3, #1
 80076be:	069b      	lsls	r3, r3, #26
 80076c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80076c4:	e015      	b.n	80076f2 <HAL_ADC_ConfigChannel+0x4ea>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ce:	fa93 f3a3 	rbit	r3, r3
 80076d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80076d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80076d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80076de:	2320      	movs	r3, #32
 80076e0:	e003      	b.n	80076ea <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80076e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e4:	fab3 f383 	clz	r3, r3
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	3301      	adds	r3, #1
 80076ec:	069b      	lsls	r3, r3, #26
 80076ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <HAL_ADC_ConfigChannel+0x50a>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	0e9b      	lsrs	r3, r3, #26
 8007704:	3301      	adds	r3, #1
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	2101      	movs	r1, #1
 800770c:	fa01 f303 	lsl.w	r3, r1, r3
 8007710:	e017      	b.n	8007742 <HAL_ADC_ConfigChannel+0x53a>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800771a:	fa93 f3a3 	rbit	r3, r3
 800771e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007722:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 800772a:	2320      	movs	r3, #32
 800772c:	e003      	b.n	8007736 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 800772e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007730:	fab3 f383 	clz	r3, r3
 8007734:	b2db      	uxtb	r3, r3
 8007736:	3301      	adds	r3, #1
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	2101      	movs	r1, #1
 800773e:	fa01 f303 	lsl.w	r3, r1, r3
 8007742:	ea42 0103 	orr.w	r1, r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <HAL_ADC_ConfigChannel+0x560>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	0e9b      	lsrs	r3, r3, #26
 8007758:	3301      	adds	r3, #1
 800775a:	f003 021f 	and.w	r2, r3, #31
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	051b      	lsls	r3, r3, #20
 8007766:	e018      	b.n	800779a <HAL_ADC_ConfigChannel+0x592>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	fa93 f3a3 	rbit	r3, r3
 8007774:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800777a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007780:	2320      	movs	r3, #32
 8007782:	e003      	b.n	800778c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8007784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007786:	fab3 f383 	clz	r3, r3
 800778a:	b2db      	uxtb	r3, r3
 800778c:	3301      	adds	r3, #1
 800778e:	f003 021f 	and.w	r2, r3, #31
 8007792:	4613      	mov	r3, r2
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4413      	add	r3, r2
 8007798:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800779a:	430b      	orrs	r3, r1
 800779c:	e081      	b.n	80078a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d107      	bne.n	80077ba <HAL_ADC_ConfigChannel+0x5b2>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	0e9b      	lsrs	r3, r3, #26
 80077b0:	3301      	adds	r3, #1
 80077b2:	069b      	lsls	r3, r3, #26
 80077b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80077b8:	e015      	b.n	80077e6 <HAL_ADC_ConfigChannel+0x5de>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	fa93 f3a3 	rbit	r3, r3
 80077c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80077cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 80077d2:	2320      	movs	r3, #32
 80077d4:	e003      	b.n	80077de <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	fab3 f383 	clz	r3, r3
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	3301      	adds	r3, #1
 80077e0:	069b      	lsls	r3, r3, #26
 80077e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <HAL_ADC_ConfigChannel+0x5fe>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	0e9b      	lsrs	r3, r3, #26
 80077f8:	3301      	adds	r3, #1
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2101      	movs	r1, #1
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	e017      	b.n	8007836 <HAL_ADC_ConfigChannel+0x62e>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	fa93 f3a3 	rbit	r3, r3
 8007812:	61fb      	str	r3, [r7, #28]
  return result;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800781e:	2320      	movs	r3, #32
 8007820:	e003      	b.n	800782a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	fab3 f383 	clz	r3, r3
 8007828:	b2db      	uxtb	r3, r3
 800782a:	3301      	adds	r3, #1
 800782c:	f003 031f 	and.w	r3, r3, #31
 8007830:	2101      	movs	r1, #1
 8007832:	fa01 f303 	lsl.w	r3, r1, r3
 8007836:	ea42 0103 	orr.w	r1, r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10d      	bne.n	8007862 <HAL_ADC_ConfigChannel+0x65a>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	0e9b      	lsrs	r3, r3, #26
 800784c:	3301      	adds	r3, #1
 800784e:	f003 021f 	and.w	r2, r3, #31
 8007852:	4613      	mov	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4413      	add	r3, r2
 8007858:	3b1e      	subs	r3, #30
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007860:	e01e      	b.n	80078a0 <HAL_ADC_ConfigChannel+0x698>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	fa93 f3a3 	rbit	r3, r3
 800786e:	613b      	str	r3, [r7, #16]
  return result;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800787a:	2320      	movs	r3, #32
 800787c:	e006      	b.n	800788c <HAL_ADC_ConfigChannel+0x684>
 800787e:	bf00      	nop
 8007880:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	fab3 f383 	clz	r3, r3
 800788a:	b2db      	uxtb	r3, r3
 800788c:	3301      	adds	r3, #1
 800788e:	f003 021f 	and.w	r2, r3, #31
 8007892:	4613      	mov	r3, r2
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4413      	add	r3, r2
 8007898:	3b1e      	subs	r3, #30
 800789a:	051b      	lsls	r3, r3, #20
 800789c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078a0:	430b      	orrs	r3, r1
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	6892      	ldr	r2, [r2, #8]
 80078a6:	4619      	mov	r1, r3
 80078a8:	f7ff fa81 	bl	8006dae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b44      	ldr	r3, [pc, #272]	@ (80079c4 <HAL_ADC_ConfigChannel+0x7bc>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d07a      	beq.n	80079ae <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078b8:	4843      	ldr	r0, [pc, #268]	@ (80079c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80078ba:	f7ff f9e9 	bl	8006c90 <LL_ADC_GetCommonPathInternalCh>
 80078be:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a41      	ldr	r2, [pc, #260]	@ (80079cc <HAL_ADC_ConfigChannel+0x7c4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d12c      	bne.n	8007926 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80078cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d126      	bne.n	8007926 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a3c      	ldr	r2, [pc, #240]	@ (80079d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_ADC_ConfigChannel+0x6e4>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a3b      	ldr	r2, [pc, #236]	@ (80079d4 <HAL_ADC_ConfigChannel+0x7cc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d15d      	bne.n	80079a8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078f4:	4619      	mov	r1, r3
 80078f6:	4834      	ldr	r0, [pc, #208]	@ (80079c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80078f8:	f7ff f9b7 	bl	8006c6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80078fc:	4b36      	ldr	r3, [pc, #216]	@ (80079d8 <HAL_ADC_ConfigChannel+0x7d0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	099b      	lsrs	r3, r3, #6
 8007902:	4a36      	ldr	r2, [pc, #216]	@ (80079dc <HAL_ADC_ConfigChannel+0x7d4>)
 8007904:	fba2 2303 	umull	r2, r3, r2, r3
 8007908:	099b      	lsrs	r3, r3, #6
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	4613      	mov	r3, r2
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007916:	e002      	b.n	800791e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3b01      	subs	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f9      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007924:	e040      	b.n	80079a8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2d      	ldr	r2, [pc, #180]	@ (80079e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d118      	bne.n	8007962 <HAL_ADC_ConfigChannel+0x75a>
 8007930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d112      	bne.n	8007962 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a23      	ldr	r2, [pc, #140]	@ (80079d0 <HAL_ADC_ConfigChannel+0x7c8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <HAL_ADC_ConfigChannel+0x748>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a22      	ldr	r2, [pc, #136]	@ (80079d4 <HAL_ADC_ConfigChannel+0x7cc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d12d      	bne.n	80079ac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007954:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007958:	4619      	mov	r1, r3
 800795a:	481b      	ldr	r0, [pc, #108]	@ (80079c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800795c:	f7ff f985 	bl	8006c6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007960:	e024      	b.n	80079ac <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1f      	ldr	r2, [pc, #124]	@ (80079e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d120      	bne.n	80079ae <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800796c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d11a      	bne.n	80079ae <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a14      	ldr	r2, [pc, #80]	@ (80079d0 <HAL_ADC_ConfigChannel+0x7c8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d115      	bne.n	80079ae <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007986:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800798a:	4619      	mov	r1, r3
 800798c:	480e      	ldr	r0, [pc, #56]	@ (80079c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800798e:	f7ff f96c 	bl	8006c6a <LL_ADC_SetCommonPathInternalCh>
 8007992:	e00c      	b.n	80079ae <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80079a6:	e002      	b.n	80079ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80079a8:	bf00      	nop
 80079aa:	e000      	b.n	80079ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80079b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	37d8      	adds	r7, #216	@ 0xd8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	80080000 	.word	0x80080000
 80079c8:	50040300 	.word	0x50040300
 80079cc:	c7520000 	.word	0xc7520000
 80079d0:	50040000 	.word	0x50040000
 80079d4:	50040200 	.word	0x50040200
 80079d8:	20000000 	.word	0x20000000
 80079dc:	053e2d63 	.word	0x053e2d63
 80079e0:	cb840000 	.word	0xcb840000
 80079e4:	80000001 	.word	0x80000001

080079e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e0ed      	b.n	8007bd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d102      	bne.n	8007a0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fb fe12 	bl	8003630 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a1c:	f7ff f8e2 	bl	8006be4 <HAL_GetTick>
 8007a20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a22:	e012      	b.n	8007a4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a24:	f7ff f8de 	bl	8006be4 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b0a      	cmp	r3, #10
 8007a30:	d90b      	bls.n	8007a4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2205      	movs	r2, #5
 8007a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e0c5      	b.n	8007bd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0e5      	beq.n	8007a24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0202 	bic.w	r2, r2, #2
 8007a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a68:	f7ff f8bc 	bl	8006be4 <HAL_GetTick>
 8007a6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007a6e:	e012      	b.n	8007a96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a70:	f7ff f8b8 	bl	8006be4 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b0a      	cmp	r3, #10
 8007a7c:	d90b      	bls.n	8007a96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e09f      	b.n	8007bd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7e1b      	ldrb	r3, [r3, #24]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d108      	bne.n	8007abe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e007      	b.n	8007ace <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7e5b      	ldrb	r3, [r3, #25]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d108      	bne.n	8007ae8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e007      	b.n	8007af8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7e9b      	ldrb	r3, [r3, #26]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d108      	bne.n	8007b12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0220 	orr.w	r2, r2, #32
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e007      	b.n	8007b22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0220 	bic.w	r2, r2, #32
 8007b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7edb      	ldrb	r3, [r3, #27]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d108      	bne.n	8007b3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0210 	bic.w	r2, r2, #16
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e007      	b.n	8007b4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0210 	orr.w	r2, r2, #16
 8007b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7f1b      	ldrb	r3, [r3, #28]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d108      	bne.n	8007b66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0208 	orr.w	r2, r2, #8
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e007      	b.n	8007b76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0208 	bic.w	r2, r2, #8
 8007b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7f5b      	ldrb	r3, [r3, #29]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d108      	bne.n	8007b90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0204 	orr.w	r2, r2, #4
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	e007      	b.n	8007ba0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0204 	bic.w	r2, r2, #4
 8007b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	ea42 0103 	orr.w	r1, r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007be8:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <LL_EXTI_EnableIT_0_31+0x20>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	4904      	ldr	r1, [pc, #16]	@ (8007c00 <LL_EXTI_EnableIT_0_31+0x20>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	600b      	str	r3, [r1, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	40010400 	.word	0x40010400

08007c04 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <LL_EXTI_DisableIT_0_31+0x24>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	43db      	mvns	r3, r3
 8007c14:	4904      	ldr	r1, [pc, #16]	@ (8007c28 <LL_EXTI_DisableIT_0_31+0x24>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	600b      	str	r3, [r1, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010400 	.word	0x40010400

08007c2c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007c34:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <LL_EXTI_EnableEvent_0_31+0x20>)
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	4904      	ldr	r1, [pc, #16]	@ (8007c4c <LL_EXTI_EnableEvent_0_31+0x20>)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	604b      	str	r3, [r1, #4]

}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	40010400 	.word	0x40010400

08007c50 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007c58:	4b06      	ldr	r3, [pc, #24]	@ (8007c74 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	43db      	mvns	r3, r3
 8007c60:	4904      	ldr	r1, [pc, #16]	@ (8007c74 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	604b      	str	r3, [r1, #4]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40010400 	.word	0x40010400

08007c78 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007c80:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	4904      	ldr	r1, [pc, #16]	@ (8007c98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	608b      	str	r3, [r1, #8]

}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	40010400 	.word	0x40010400

08007c9c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007ca4:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	43db      	mvns	r3, r3
 8007cac:	4904      	ldr	r1, [pc, #16]	@ (8007cc0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	608b      	str	r3, [r1, #8]

}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40010400 	.word	0x40010400

08007cc4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	4904      	ldr	r1, [pc, #16]	@ (8007ce4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60cb      	str	r3, [r1, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	40010400 	.word	0x40010400

08007ce8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	4904      	ldr	r1, [pc, #16]	@ (8007d0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	60cb      	str	r3, [r1, #12]
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40010400 	.word	0x40010400

08007d10 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007d18:	4a04      	ldr	r2, [pc, #16]	@ (8007d2c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6153      	str	r3, [r2, #20]
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40010400 	.word	0x40010400

08007d30 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	77fb      	strb	r3, [r7, #31]
 8007d4a:	e0d1      	b.n	8007ef0 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d5a:	d102      	bne.n	8007d62 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e0c6      	b.n	8007ef0 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d115      	bne.n	8007d9a <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8007efc <HAL_COMP_Init+0x1cc>)
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d80:	4a5e      	ldr	r2, [pc, #376]	@ (8007efc <HAL_COMP_Init+0x1cc>)
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	6613      	str	r3, [r2, #96]	@ 0x60
 8007d88:	4b5c      	ldr	r3, [pc, #368]	@ (8007efc <HAL_COMP_Init+0x1cc>)
 8007d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7fb fc8f 	bl	80036b8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8007f00 <HAL_COMP_Init+0x1d0>)
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	6979      	ldr	r1, [r7, #20]
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de6:	d106      	bne.n	8007df6 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007de8:	4b46      	ldr	r3, [pc, #280]	@ (8007f04 <HAL_COMP_Init+0x1d4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a45      	ldr	r2, [pc, #276]	@ (8007f04 <HAL_COMP_Init+0x1d4>)
 8007dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	e005      	b.n	8007e02 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007df6:	4b43      	ldr	r3, [pc, #268]	@ (8007f04 <HAL_COMP_Init+0x1d4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a42      	ldr	r2, [pc, #264]	@ (8007f04 <HAL_COMP_Init+0x1d4>)
 8007dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e00:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d016      	beq.n	8007e3e <HAL_COMP_Init+0x10e>
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d113      	bne.n	8007e3e <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e16:	4b3c      	ldr	r3, [pc, #240]	@ (8007f08 <HAL_COMP_Init+0x1d8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	099b      	lsrs	r3, r3, #6
 8007e1c:	4a3b      	ldr	r2, [pc, #236]	@ (8007f0c <HAL_COMP_Init+0x1dc>)
 8007e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e22:	099b      	lsrs	r3, r3, #6
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007e30:	e002      	b.n	8007e38 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f9      	bne.n	8007e32 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a33      	ldr	r2, [pc, #204]	@ (8007f10 <HAL_COMP_Init+0x1e0>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d102      	bne.n	8007e4e <HAL_COMP_Init+0x11e>
 8007e48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007e4c:	e001      	b.n	8007e52 <HAL_COMP_Init+0x122>
 8007e4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007e52:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d037      	beq.n	8007ed0 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007e6c:	6938      	ldr	r0, [r7, #16]
 8007e6e:	f7ff ff03 	bl	8007c78 <LL_EXTI_EnableRisingTrig_0_31>
 8007e72:	e002      	b.n	8007e7a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007e74:	6938      	ldr	r0, [r7, #16]
 8007e76:	f7ff ff11 	bl	8007c9c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007e86:	6938      	ldr	r0, [r7, #16]
 8007e88:	f7ff ff1c 	bl	8007cc4 <LL_EXTI_EnableFallingTrig_0_31>
 8007e8c:	e002      	b.n	8007e94 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007e8e:	6938      	ldr	r0, [r7, #16]
 8007e90:	f7ff ff2a 	bl	8007ce8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007e94:	6938      	ldr	r0, [r7, #16]
 8007e96:	f7ff ff3b 	bl	8007d10 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007ea6:	6938      	ldr	r0, [r7, #16]
 8007ea8:	f7ff fec0 	bl	8007c2c <LL_EXTI_EnableEvent_0_31>
 8007eac:	e002      	b.n	8007eb4 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007eae:	6938      	ldr	r0, [r7, #16]
 8007eb0:	f7ff fece 	bl	8007c50 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007ec0:	6938      	ldr	r0, [r7, #16]
 8007ec2:	f7ff fe8d 	bl	8007be0 <LL_EXTI_EnableIT_0_31>
 8007ec6:	e009      	b.n	8007edc <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007ec8:	6938      	ldr	r0, [r7, #16]
 8007eca:	f7ff fe9b 	bl	8007c04 <LL_EXTI_DisableIT_0_31>
 8007ece:	e005      	b.n	8007edc <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007ed0:	6938      	ldr	r0, [r7, #16]
 8007ed2:	f7ff febd 	bl	8007c50 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007ed6:	6938      	ldr	r0, [r7, #16]
 8007ed8:	f7ff fe94 	bl	8007c04 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40021000 	.word	0x40021000
 8007f00:	ff207d03 	.word	0xff207d03
 8007f04:	40010204 	.word	0x40010204
 8007f08:	20000000 	.word	0x20000000
 8007f0c:	053e2d63 	.word	0x053e2d63
 8007f10:	40010200 	.word	0x40010200

08007f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f24:	4b0c      	ldr	r3, [pc, #48]	@ (8007f58 <__NVIC_SetPriorityGrouping+0x44>)
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007f30:	4013      	ands	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f46:	4a04      	ldr	r2, [pc, #16]	@ (8007f58 <__NVIC_SetPriorityGrouping+0x44>)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	60d3      	str	r3, [r2, #12]
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	e000ed00 	.word	0xe000ed00

08007f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f60:	4b04      	ldr	r3, [pc, #16]	@ (8007f74 <__NVIC_GetPriorityGrouping+0x18>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	0a1b      	lsrs	r3, r3, #8
 8007f66:	f003 0307 	and.w	r3, r3, #7
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	e000ed00 	.word	0xe000ed00

08007f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	db0b      	blt.n	8007fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	f003 021f 	and.w	r2, r3, #31
 8007f90:	4907      	ldr	r1, [pc, #28]	@ (8007fb0 <__NVIC_EnableIRQ+0x38>)
 8007f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	2001      	movs	r0, #1
 8007f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	e000e100 	.word	0xe000e100

08007fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	db0a      	blt.n	8007fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	490c      	ldr	r1, [pc, #48]	@ (8008000 <__NVIC_SetPriority+0x4c>)
 8007fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd2:	0112      	lsls	r2, r2, #4
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fdc:	e00a      	b.n	8007ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	4908      	ldr	r1, [pc, #32]	@ (8008004 <__NVIC_SetPriority+0x50>)
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	3b04      	subs	r3, #4
 8007fec:	0112      	lsls	r2, r2, #4
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	761a      	strb	r2, [r3, #24]
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	e000e100 	.word	0xe000e100
 8008004:	e000ed00 	.word	0xe000ed00

08008008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	@ 0x24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f1c3 0307 	rsb	r3, r3, #7
 8008022:	2b04      	cmp	r3, #4
 8008024:	bf28      	it	cs
 8008026:	2304      	movcs	r3, #4
 8008028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	3304      	adds	r3, #4
 800802e:	2b06      	cmp	r3, #6
 8008030:	d902      	bls.n	8008038 <NVIC_EncodePriority+0x30>
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	3b03      	subs	r3, #3
 8008036:	e000      	b.n	800803a <NVIC_EncodePriority+0x32>
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800803c:	f04f 32ff 	mov.w	r2, #4294967295
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	43da      	mvns	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	401a      	ands	r2, r3
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008050:	f04f 31ff 	mov.w	r1, #4294967295
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	43d9      	mvns	r1, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008060:	4313      	orrs	r3, r2
         );
}
 8008062:	4618      	mov	r0, r3
 8008064:	3724      	adds	r7, #36	@ 0x24
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3b01      	subs	r3, #1
 800807c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008080:	d301      	bcc.n	8008086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008082:	2301      	movs	r3, #1
 8008084:	e00f      	b.n	80080a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008086:	4a0a      	ldr	r2, [pc, #40]	@ (80080b0 <SysTick_Config+0x40>)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3b01      	subs	r3, #1
 800808c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800808e:	210f      	movs	r1, #15
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	f7ff ff8e 	bl	8007fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008098:	4b05      	ldr	r3, [pc, #20]	@ (80080b0 <SysTick_Config+0x40>)
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800809e:	4b04      	ldr	r3, [pc, #16]	@ (80080b0 <SysTick_Config+0x40>)
 80080a0:	2207      	movs	r2, #7
 80080a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	e000e010 	.word	0xe000e010

080080b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff ff29 	bl	8007f14 <__NVIC_SetPriorityGrouping>
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b086      	sub	sp, #24
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	4603      	mov	r3, r0
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80080dc:	f7ff ff3e 	bl	8007f5c <__NVIC_GetPriorityGrouping>
 80080e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	6978      	ldr	r0, [r7, #20]
 80080e8:	f7ff ff8e 	bl	8008008 <NVIC_EncodePriority>
 80080ec:	4602      	mov	r2, r0
 80080ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff ff5d 	bl	8007fb4 <__NVIC_SetPriority>
}
 80080fa:	bf00      	nop
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	4603      	mov	r3, r0
 800810a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800810c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff ff31 	bl	8007f78 <__NVIC_EnableIRQ>
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff ffa2 	bl	8008070 <SysTick_Config>
 800812c:	4603      	mov	r3, r0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d008      	beq.n	8008160 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e022      	b.n	80081a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 020e 	bic.w	r2, r2, #14
 800816e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008184:	f003 021c 	and.w	r2, r3, #28
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818c:	2101      	movs	r1, #1
 800818e:	fa01 f202 	lsl.w	r2, r1, r2
 8008192:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d005      	beq.n	80081d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	73fb      	strb	r3, [r7, #15]
 80081d4:	e029      	b.n	800822a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 020e 	bic.w	r2, r2, #14
 80081e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fa:	f003 021c 	and.w	r2, r3, #28
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008202:	2101      	movs	r1, #1
 8008204:	fa01 f202 	lsl.w	r2, r1, r2
 8008208:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
    }
  }
  return status;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008242:	e17f      	b.n	8008544 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	2101      	movs	r1, #1
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	fa01 f303 	lsl.w	r3, r1, r3
 8008250:	4013      	ands	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 8171 	beq.w	800853e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	2b01      	cmp	r3, #1
 8008266:	d005      	beq.n	8008274 <HAL_GPIO_Init+0x40>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d130      	bne.n	80082d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	2203      	movs	r2, #3
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	43db      	mvns	r3, r3
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4013      	ands	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082aa:	2201      	movs	r2, #1
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	43db      	mvns	r3, r3
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4013      	ands	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	091b      	lsrs	r3, r3, #4
 80082c0:	f003 0201 	and.w	r2, r3, #1
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d118      	bne.n	8008314 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80082e8:	2201      	movs	r2, #1
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	43db      	mvns	r3, r3
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	4013      	ands	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	08db      	lsrs	r3, r3, #3
 80082fe:	f003 0201 	and.w	r2, r3, #1
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	2b03      	cmp	r3, #3
 800831e:	d017      	beq.n	8008350 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	2203      	movs	r2, #3
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	43db      	mvns	r3, r3
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4013      	ands	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	4313      	orrs	r3, r2
 8008348:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d123      	bne.n	80083a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	08da      	lsrs	r2, r3, #3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3208      	adds	r2, #8
 8008364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008368:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	220f      	movs	r2, #15
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	43db      	mvns	r3, r3
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4013      	ands	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	08da      	lsrs	r2, r3, #3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3208      	adds	r2, #8
 800839e:	6939      	ldr	r1, [r7, #16]
 80083a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	2203      	movs	r2, #3
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	43db      	mvns	r3, r3
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4013      	ands	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f003 0203 	and.w	r2, r3, #3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 80ac 	beq.w	800853e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083e6:	4b5f      	ldr	r3, [pc, #380]	@ (8008564 <HAL_GPIO_Init+0x330>)
 80083e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ea:	4a5e      	ldr	r2, [pc, #376]	@ (8008564 <HAL_GPIO_Init+0x330>)
 80083ec:	f043 0301 	orr.w	r3, r3, #1
 80083f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80083f2:	4b5c      	ldr	r3, [pc, #368]	@ (8008564 <HAL_GPIO_Init+0x330>)
 80083f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	60bb      	str	r3, [r7, #8]
 80083fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80083fe:	4a5a      	ldr	r2, [pc, #360]	@ (8008568 <HAL_GPIO_Init+0x334>)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	089b      	lsrs	r3, r3, #2
 8008404:	3302      	adds	r3, #2
 8008406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	220f      	movs	r2, #15
 8008416:	fa02 f303 	lsl.w	r3, r2, r3
 800841a:	43db      	mvns	r3, r3
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	4013      	ands	r3, r2
 8008420:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008428:	d025      	beq.n	8008476 <HAL_GPIO_Init+0x242>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a4f      	ldr	r2, [pc, #316]	@ (800856c <HAL_GPIO_Init+0x338>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01f      	beq.n	8008472 <HAL_GPIO_Init+0x23e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a4e      	ldr	r2, [pc, #312]	@ (8008570 <HAL_GPIO_Init+0x33c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d019      	beq.n	800846e <HAL_GPIO_Init+0x23a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a4d      	ldr	r2, [pc, #308]	@ (8008574 <HAL_GPIO_Init+0x340>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <HAL_GPIO_Init+0x236>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a4c      	ldr	r2, [pc, #304]	@ (8008578 <HAL_GPIO_Init+0x344>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00d      	beq.n	8008466 <HAL_GPIO_Init+0x232>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a4b      	ldr	r2, [pc, #300]	@ (800857c <HAL_GPIO_Init+0x348>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d007      	beq.n	8008462 <HAL_GPIO_Init+0x22e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a4a      	ldr	r2, [pc, #296]	@ (8008580 <HAL_GPIO_Init+0x34c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d101      	bne.n	800845e <HAL_GPIO_Init+0x22a>
 800845a:	2306      	movs	r3, #6
 800845c:	e00c      	b.n	8008478 <HAL_GPIO_Init+0x244>
 800845e:	2307      	movs	r3, #7
 8008460:	e00a      	b.n	8008478 <HAL_GPIO_Init+0x244>
 8008462:	2305      	movs	r3, #5
 8008464:	e008      	b.n	8008478 <HAL_GPIO_Init+0x244>
 8008466:	2304      	movs	r3, #4
 8008468:	e006      	b.n	8008478 <HAL_GPIO_Init+0x244>
 800846a:	2303      	movs	r3, #3
 800846c:	e004      	b.n	8008478 <HAL_GPIO_Init+0x244>
 800846e:	2302      	movs	r3, #2
 8008470:	e002      	b.n	8008478 <HAL_GPIO_Init+0x244>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <HAL_GPIO_Init+0x244>
 8008476:	2300      	movs	r3, #0
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	f002 0203 	and.w	r2, r2, #3
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	4093      	lsls	r3, r2
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008488:	4937      	ldr	r1, [pc, #220]	@ (8008568 <HAL_GPIO_Init+0x334>)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	089b      	lsrs	r3, r3, #2
 800848e:	3302      	adds	r3, #2
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008496:	4b3b      	ldr	r3, [pc, #236]	@ (8008584 <HAL_GPIO_Init+0x350>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	43db      	mvns	r3, r3
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4013      	ands	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084ba:	4a32      	ldr	r2, [pc, #200]	@ (8008584 <HAL_GPIO_Init+0x350>)
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80084c0:	4b30      	ldr	r3, [pc, #192]	@ (8008584 <HAL_GPIO_Init+0x350>)
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	43db      	mvns	r3, r3
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4013      	ands	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80084e4:	4a27      	ldr	r2, [pc, #156]	@ (8008584 <HAL_GPIO_Init+0x350>)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80084ea:	4b26      	ldr	r3, [pc, #152]	@ (8008584 <HAL_GPIO_Init+0x350>)
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	43db      	mvns	r3, r3
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4013      	ands	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800850e:	4a1d      	ldr	r2, [pc, #116]	@ (8008584 <HAL_GPIO_Init+0x350>)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008514:	4b1b      	ldr	r3, [pc, #108]	@ (8008584 <HAL_GPIO_Init+0x350>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	43db      	mvns	r3, r3
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4013      	ands	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008538:	4a12      	ldr	r2, [pc, #72]	@ (8008584 <HAL_GPIO_Init+0x350>)
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	3301      	adds	r3, #1
 8008542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	fa22 f303 	lsr.w	r3, r2, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	f47f ae78 	bne.w	8008244 <HAL_GPIO_Init+0x10>
  }
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40021000 	.word	0x40021000
 8008568:	40010000 	.word	0x40010000
 800856c:	48000400 	.word	0x48000400
 8008570:	48000800 	.word	0x48000800
 8008574:	48000c00 	.word	0x48000c00
 8008578:	48001000 	.word	0x48001000
 800857c:	48001400 	.word	0x48001400
 8008580:	48001800 	.word	0x48001800
 8008584:	40010400 	.word	0x40010400

08008588 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008596:	e0cd      	b.n	8008734 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008598:	2201      	movs	r2, #1
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	fa02 f303 	lsl.w	r3, r2, r3
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	4013      	ands	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80c0 	beq.w	800872e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80085ae:	4a68      	ldr	r2, [pc, #416]	@ (8008750 <HAL_GPIO_DeInit+0x1c8>)
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	089b      	lsrs	r3, r3, #2
 80085b4:	3302      	adds	r3, #2
 80085b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	220f      	movs	r2, #15
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	4013      	ands	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80085d6:	d025      	beq.n	8008624 <HAL_GPIO_DeInit+0x9c>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a5e      	ldr	r2, [pc, #376]	@ (8008754 <HAL_GPIO_DeInit+0x1cc>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d01f      	beq.n	8008620 <HAL_GPIO_DeInit+0x98>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a5d      	ldr	r2, [pc, #372]	@ (8008758 <HAL_GPIO_DeInit+0x1d0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d019      	beq.n	800861c <HAL_GPIO_DeInit+0x94>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a5c      	ldr	r2, [pc, #368]	@ (800875c <HAL_GPIO_DeInit+0x1d4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <HAL_GPIO_DeInit+0x90>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a5b      	ldr	r2, [pc, #364]	@ (8008760 <HAL_GPIO_DeInit+0x1d8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00d      	beq.n	8008614 <HAL_GPIO_DeInit+0x8c>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a5a      	ldr	r2, [pc, #360]	@ (8008764 <HAL_GPIO_DeInit+0x1dc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d007      	beq.n	8008610 <HAL_GPIO_DeInit+0x88>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a59      	ldr	r2, [pc, #356]	@ (8008768 <HAL_GPIO_DeInit+0x1e0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d101      	bne.n	800860c <HAL_GPIO_DeInit+0x84>
 8008608:	2306      	movs	r3, #6
 800860a:	e00c      	b.n	8008626 <HAL_GPIO_DeInit+0x9e>
 800860c:	2307      	movs	r3, #7
 800860e:	e00a      	b.n	8008626 <HAL_GPIO_DeInit+0x9e>
 8008610:	2305      	movs	r3, #5
 8008612:	e008      	b.n	8008626 <HAL_GPIO_DeInit+0x9e>
 8008614:	2304      	movs	r3, #4
 8008616:	e006      	b.n	8008626 <HAL_GPIO_DeInit+0x9e>
 8008618:	2303      	movs	r3, #3
 800861a:	e004      	b.n	8008626 <HAL_GPIO_DeInit+0x9e>
 800861c:	2302      	movs	r3, #2
 800861e:	e002      	b.n	8008626 <HAL_GPIO_DeInit+0x9e>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <HAL_GPIO_DeInit+0x9e>
 8008624:	2300      	movs	r3, #0
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	f002 0203 	and.w	r2, r2, #3
 800862c:	0092      	lsls	r2, r2, #2
 800862e:	4093      	lsls	r3, r2
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	429a      	cmp	r2, r3
 8008634:	d132      	bne.n	800869c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008636:	4b4d      	ldr	r3, [pc, #308]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	43db      	mvns	r3, r3
 800863e:	494b      	ldr	r1, [pc, #300]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 8008640:	4013      	ands	r3, r2
 8008642:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008644:	4b49      	ldr	r3, [pc, #292]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	43db      	mvns	r3, r3
 800864c:	4947      	ldr	r1, [pc, #284]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 800864e:	4013      	ands	r3, r2
 8008650:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008652:	4b46      	ldr	r3, [pc, #280]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	43db      	mvns	r3, r3
 800865a:	4944      	ldr	r1, [pc, #272]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 800865c:	4013      	ands	r3, r2
 800865e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008660:	4b42      	ldr	r3, [pc, #264]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	43db      	mvns	r3, r3
 8008668:	4940      	ldr	r1, [pc, #256]	@ (800876c <HAL_GPIO_DeInit+0x1e4>)
 800866a:	4013      	ands	r3, r2
 800866c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f003 0303 	and.w	r3, r3, #3
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	220f      	movs	r2, #15
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800867e:	4a34      	ldr	r2, [pc, #208]	@ (8008750 <HAL_GPIO_DeInit+0x1c8>)
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	089b      	lsrs	r3, r3, #2
 8008684:	3302      	adds	r3, #2
 8008686:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	43da      	mvns	r2, r3
 800868e:	4830      	ldr	r0, [pc, #192]	@ (8008750 <HAL_GPIO_DeInit+0x1c8>)
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	089b      	lsrs	r3, r3, #2
 8008694:	400a      	ands	r2, r1
 8008696:	3302      	adds	r3, #2
 8008698:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	2103      	movs	r1, #3
 80086a6:	fa01 f303 	lsl.w	r3, r1, r3
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	08da      	lsrs	r2, r3, #3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3208      	adds	r2, #8
 80086b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	220f      	movs	r2, #15
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	43db      	mvns	r3, r3
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	08d2      	lsrs	r2, r2, #3
 80086d0:	4019      	ands	r1, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3208      	adds	r2, #8
 80086d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689a      	ldr	r2, [r3, #8]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	2103      	movs	r1, #3
 80086e4:	fa01 f303 	lsl.w	r3, r1, r3
 80086e8:	43db      	mvns	r3, r3
 80086ea:	401a      	ands	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	2101      	movs	r1, #1
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	401a      	ands	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	2103      	movs	r1, #3
 800870e:	fa01 f303 	lsl.w	r3, r1, r3
 8008712:	43db      	mvns	r3, r3
 8008714:	401a      	ands	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871e:	2101      	movs	r1, #1
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	fa01 f303 	lsl.w	r3, r1, r3
 8008726:	43db      	mvns	r3, r3
 8008728:	401a      	ands	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	3301      	adds	r3, #1
 8008732:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	fa22 f303 	lsr.w	r3, r2, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	f47f af2b 	bne.w	8008598 <HAL_GPIO_DeInit+0x10>
  }
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	40010000 	.word	0x40010000
 8008754:	48000400 	.word	0x48000400
 8008758:	48000800 	.word	0x48000800
 800875c:	48000c00 	.word	0x48000c00
 8008760:	48001000 	.word	0x48001000
 8008764:	48001400 	.word	0x48001400
 8008768:	48001800 	.word	0x48001800
 800876c:	40010400 	.word	0x40010400

08008770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	807b      	strh	r3, [r7, #2]
 800877c:	4613      	mov	r3, r2
 800877e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008780:	787b      	ldrb	r3, [r7, #1]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008786:	887a      	ldrh	r2, [r7, #2]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800878c:	e002      	b.n	8008794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800878e:	887a      	ldrh	r2, [r7, #2]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e081      	b.n	80088b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d106      	bne.n	80087cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7fa ffaa 	bl	8003720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2224      	movs	r2, #36	@ 0x24
 80087d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 0201 	bic.w	r2, r2, #1
 80087e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80087f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008800:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d107      	bne.n	800881a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008816:	609a      	str	r2, [r3, #8]
 8008818:	e006      	b.n	8008828 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008826:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d104      	bne.n	800883a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008838:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800884c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800885c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691a      	ldr	r2, [r3, #16]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	69d9      	ldr	r1, [r3, #28]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1a      	ldr	r2, [r3, #32]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0201 	orr.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e021      	b.n	8008914 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	@ 0x24
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7fa ff77 	bl	80037dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af02      	add	r7, sp, #8
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	4608      	mov	r0, r1
 8008926:	4611      	mov	r1, r2
 8008928:	461a      	mov	r2, r3
 800892a:	4603      	mov	r3, r0
 800892c:	817b      	strh	r3, [r7, #10]
 800892e:	460b      	mov	r3, r1
 8008930:	813b      	strh	r3, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b20      	cmp	r3, #32
 8008940:	f040 80f9 	bne.w	8008b36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <HAL_I2C_Mem_Write+0x34>
 800894a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	d105      	bne.n	800895c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008956:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e0ed      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_I2C_Mem_Write+0x4e>
 8008966:	2302      	movs	r3, #2
 8008968:	e0e6      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008972:	f7fe f937 	bl	8006be4 <HAL_GetTick>
 8008976:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2319      	movs	r3, #25
 800897e:	2201      	movs	r2, #1
 8008980:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fadd 	bl	8008f44 <I2C_WaitOnFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e0d1      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2221      	movs	r2, #33	@ 0x21
 8008998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2240      	movs	r2, #64	@ 0x40
 80089a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a3a      	ldr	r2, [r7, #32]
 80089ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80089b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089bc:	88f8      	ldrh	r0, [r7, #6]
 80089be:	893a      	ldrh	r2, [r7, #8]
 80089c0:	8979      	ldrh	r1, [r7, #10]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	4603      	mov	r3, r0
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 f9ed 	bl	8008dac <I2C_RequestMemoryWrite>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e0a9      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2bff      	cmp	r3, #255	@ 0xff
 80089ec:	d90e      	bls.n	8008a0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	22ff      	movs	r2, #255	@ 0xff
 80089f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	8979      	ldrh	r1, [r7, #10]
 80089fc:	2300      	movs	r3, #0
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fc45 	bl	8009294 <I2C_TransferConfig>
 8008a0a:	e00f      	b.n	8008a2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	8979      	ldrh	r1, [r7, #10]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fc34 	bl	8009294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fac7 	bl	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e07b      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d034      	beq.n	8008ae4 <HAL_I2C_Mem_Write+0x1c8>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d130      	bne.n	8008ae4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2180      	movs	r1, #128	@ 0x80
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fa59 	bl	8008f44 <I2C_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e04d      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2bff      	cmp	r3, #255	@ 0xff
 8008aa4:	d90e      	bls.n	8008ac4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	22ff      	movs	r2, #255	@ 0xff
 8008aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	8979      	ldrh	r1, [r7, #10]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fbe9 	bl	8009294 <I2C_TransferConfig>
 8008ac2:	e00f      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	8979      	ldrh	r1, [r7, #10]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fbd8 	bl	8009294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d19e      	bne.n	8008a2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 faa6 	bl	8009044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e01a      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2220      	movs	r2, #32
 8008b08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6859      	ldr	r1, [r3, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	4b0a      	ldr	r3, [pc, #40]	@ (8008b40 <HAL_I2C_Mem_Write+0x224>)
 8008b16:	400b      	ands	r3, r1
 8008b18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e000      	b.n	8008b38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008b36:	2302      	movs	r3, #2
  }
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	fe00e800 	.word	0xfe00e800

08008b44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	817b      	strh	r3, [r7, #10]
 8008b56:	460b      	mov	r3, r1
 8008b58:	813b      	strh	r3, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	f040 80fd 	bne.w	8008d66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_I2C_Mem_Read+0x34>
 8008b72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b7e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0f1      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_I2C_Mem_Read+0x4e>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e0ea      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b9a:	f7fe f823 	bl	8006be4 <HAL_GetTick>
 8008b9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	2319      	movs	r3, #25
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f9c9 	bl	8008f44 <I2C_WaitOnFlagUntilTimeout>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0d5      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2222      	movs	r2, #34	@ 0x22
 8008bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2240      	movs	r2, #64	@ 0x40
 8008bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a3a      	ldr	r2, [r7, #32]
 8008bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008be4:	88f8      	ldrh	r0, [r7, #6]
 8008be6:	893a      	ldrh	r2, [r7, #8]
 8008be8:	8979      	ldrh	r1, [r7, #10]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f92d 	bl	8008e54 <I2C_RequestMemoryRead>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0ad      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2bff      	cmp	r3, #255	@ 0xff
 8008c14:	d90e      	bls.n	8008c34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	22ff      	movs	r2, #255	@ 0xff
 8008c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	8979      	ldrh	r1, [r7, #10]
 8008c24:	4b52      	ldr	r3, [pc, #328]	@ (8008d70 <HAL_I2C_Mem_Read+0x22c>)
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 fb31 	bl	8009294 <I2C_TransferConfig>
 8008c32:	e00f      	b.n	8008c54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	8979      	ldrh	r1, [r7, #10]
 8008c46:	4b4a      	ldr	r3, [pc, #296]	@ (8008d70 <HAL_I2C_Mem_Read+0x22c>)
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fb20 	bl	8009294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2104      	movs	r1, #4
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f970 	bl	8008f44 <I2C_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e07c      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d034      	beq.n	8008d14 <HAL_I2C_Mem_Read+0x1d0>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d130      	bne.n	8008d14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2180      	movs	r1, #128	@ 0x80
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 f941 	bl	8008f44 <I2C_WaitOnFlagUntilTimeout>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e04d      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2bff      	cmp	r3, #255	@ 0xff
 8008cd4:	d90e      	bls.n	8008cf4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	22ff      	movs	r2, #255	@ 0xff
 8008cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	8979      	ldrh	r1, [r7, #10]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 fad1 	bl	8009294 <I2C_TransferConfig>
 8008cf2:	e00f      	b.n	8008d14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	8979      	ldrh	r1, [r7, #10]
 8008d06:	2300      	movs	r3, #0
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fac0 	bl	8009294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d19a      	bne.n	8008c54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 f98e 	bl	8009044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e01a      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2220      	movs	r2, #32
 8008d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6859      	ldr	r1, [r3, #4]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <HAL_I2C_Mem_Read+0x230>)
 8008d46:	400b      	ands	r3, r1
 8008d48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e000      	b.n	8008d68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d66:	2302      	movs	r3, #2
  }
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	80002400 	.word	0x80002400
 8008d74:	fe00e800 	.word	0xfe00e800

08008d78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d86:	b2db      	uxtb	r3, r3
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	4608      	mov	r0, r1
 8008db6:	4611      	mov	r1, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	4603      	mov	r3, r0
 8008dbc:	817b      	strh	r3, [r7, #10]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	813b      	strh	r3, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008dc6:	88fb      	ldrh	r3, [r7, #6]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	8979      	ldrh	r1, [r7, #10]
 8008dcc:	4b20      	ldr	r3, [pc, #128]	@ (8008e50 <I2C_RequestMemoryWrite+0xa4>)
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 fa5d 	bl	8009294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	69b9      	ldr	r1, [r7, #24]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 f8f0 	bl	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e02c      	b.n	8008e48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d105      	bne.n	8008e00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008df4:	893b      	ldrh	r3, [r7, #8]
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8008dfe:	e015      	b.n	8008e2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e00:	893b      	ldrh	r3, [r7, #8]
 8008e02:	0a1b      	lsrs	r3, r3, #8
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	69b9      	ldr	r1, [r7, #24]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f8d6 	bl	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e012      	b.n	8008e48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e22:	893b      	ldrh	r3, [r7, #8]
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2200      	movs	r2, #0
 8008e34:	2180      	movs	r1, #128	@ 0x80
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 f884 	bl	8008f44 <I2C_WaitOnFlagUntilTimeout>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	80002000 	.word	0x80002000

08008e54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	817b      	strh	r3, [r7, #10]
 8008e66:	460b      	mov	r3, r1
 8008e68:	813b      	strh	r3, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	8979      	ldrh	r1, [r7, #10]
 8008e74:	4b20      	ldr	r3, [pc, #128]	@ (8008ef8 <I2C_RequestMemoryRead+0xa4>)
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 fa0a 	bl	8009294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	69b9      	ldr	r1, [r7, #24]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 f89d 	bl	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e02c      	b.n	8008eee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e94:	88fb      	ldrh	r3, [r7, #6]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d105      	bne.n	8008ea6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e9a:	893b      	ldrh	r3, [r7, #8]
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ea4:	e015      	b.n	8008ed2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ea6:	893b      	ldrh	r3, [r7, #8]
 8008ea8:	0a1b      	lsrs	r3, r3, #8
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	69b9      	ldr	r1, [r7, #24]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f883 	bl	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e012      	b.n	8008eee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ec8:	893b      	ldrh	r3, [r7, #8]
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2140      	movs	r1, #64	@ 0x40
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 f831 	bl	8008f44 <I2C_WaitOnFlagUntilTimeout>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	80002000 	.word	0x80002000

08008efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d103      	bne.n	8008f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2200      	movs	r2, #0
 8008f18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d007      	beq.n	8008f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0201 	orr.w	r2, r2, #1
 8008f36:	619a      	str	r2, [r3, #24]
  }
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	4613      	mov	r3, r2
 8008f52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f54:	e022      	b.n	8008f9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d01e      	beq.n	8008f9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f5e:	f7fd fe41 	bl	8006be4 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d302      	bcc.n	8008f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d113      	bne.n	8008f9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f78:	f043 0220 	orr.w	r2, r3, #32
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e00f      	b.n	8008fbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	bf0c      	ite	eq
 8008fac:	2301      	moveq	r3, #1
 8008fae:	2300      	movne	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d0cd      	beq.n	8008f56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008fd0:	e02c      	b.n	800902c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 f870 	bl	80090bc <I2C_IsErrorOccurred>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e02a      	b.n	800903c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fec:	d01e      	beq.n	800902c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fee:	f7fd fdf9 	bl	8006be4 <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d302      	bcc.n	8009004 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d113      	bne.n	800902c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009008:	f043 0220 	orr.w	r2, r3, #32
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e007      	b.n	800903c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b02      	cmp	r3, #2
 8009038:	d1cb      	bne.n	8008fd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009050:	e028      	b.n	80090a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f830 	bl	80090bc <I2C_IsErrorOccurred>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e026      	b.n	80090b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009066:	f7fd fdbd 	bl	8006be4 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	429a      	cmp	r2, r3
 8009074:	d302      	bcc.n	800907c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d113      	bne.n	80090a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009080:	f043 0220 	orr.w	r2, r3, #32
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e007      	b.n	80090b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b20      	cmp	r3, #32
 80090b0:	d1cf      	bne.n	8009052 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	@ 0x28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	f003 0310 	and.w	r3, r3, #16
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d075      	beq.n	80091d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2210      	movs	r2, #16
 80090ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090f0:	e056      	b.n	80091a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f8:	d052      	beq.n	80091a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80090fa:	f7fd fd73 	bl	8006be4 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	429a      	cmp	r2, r3
 8009108:	d302      	bcc.n	8009110 <I2C_IsErrorOccurred+0x54>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d147      	bne.n	80091a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800911a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009122:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800912e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009132:	d12e      	bne.n	8009192 <I2C_IsErrorOccurred+0xd6>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800913a:	d02a      	beq.n	8009192 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800913c:	7cfb      	ldrb	r3, [r7, #19]
 800913e:	2b20      	cmp	r3, #32
 8009140:	d027      	beq.n	8009192 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009150:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009152:	f7fd fd47 	bl	8006be4 <HAL_GetTick>
 8009156:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009158:	e01b      	b.n	8009192 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800915a:	f7fd fd43 	bl	8006be4 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b19      	cmp	r3, #25
 8009166:	d914      	bls.n	8009192 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800916c:	f043 0220 	orr.w	r2, r3, #32
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2220      	movs	r2, #32
 8009178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b20      	cmp	r3, #32
 800919e:	d1dc      	bne.n	800915a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d003      	beq.n	80091b6 <I2C_IsErrorOccurred+0xfa>
 80091ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d09d      	beq.n	80090f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80091b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d103      	bne.n	80091c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2220      	movs	r2, #32
 80091c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	f043 0304 	orr.w	r3, r3, #4
 80091cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	f043 0308 	orr.w	r3, r3, #8
 800920e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	f043 0302 	orr.w	r3, r3, #2
 8009230:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800923a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009242:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009246:	2b00      	cmp	r3, #0
 8009248:	d01c      	beq.n	8009284 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7ff fe56 	bl	8008efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6859      	ldr	r1, [r3, #4]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b0d      	ldr	r3, [pc, #52]	@ (8009290 <I2C_IsErrorOccurred+0x1d4>)
 800925c:	400b      	ands	r3, r1
 800925e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	431a      	orrs	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009288:	4618      	mov	r0, r3
 800928a:	3728      	adds	r7, #40	@ 0x28
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	fe00e800 	.word	0xfe00e800

08009294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	607b      	str	r3, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	817b      	strh	r3, [r7, #10]
 80092a2:	4613      	mov	r3, r2
 80092a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80092a6:	897b      	ldrh	r3, [r7, #10]
 80092a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80092ac:	7a7b      	ldrb	r3, [r7, #9]
 80092ae:	041b      	lsls	r3, r3, #16
 80092b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80092b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	4313      	orrs	r3, r2
 80092be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	0d5b      	lsrs	r3, r3, #21
 80092ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80092d2:	4b08      	ldr	r3, [pc, #32]	@ (80092f4 <I2C_TransferConfig+0x60>)
 80092d4:	430b      	orrs	r3, r1
 80092d6:	43db      	mvns	r3, r3
 80092d8:	ea02 0103 	and.w	r1, r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80092e6:	bf00      	nop
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	03ff63ff 	.word	0x03ff63ff

080092f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b20      	cmp	r3, #32
 800930c:	d138      	bne.n	8009380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009318:	2302      	movs	r3, #2
 800931a:	e032      	b.n	8009382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2224      	movs	r2, #36	@ 0x24
 8009328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0201 	bic.w	r2, r2, #1
 800933a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800934a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6819      	ldr	r1, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 0201 	orr.w	r2, r2, #1
 800936a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009380:	2302      	movs	r3, #2
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800938e:	b480      	push	{r7}
 8009390:	b085      	sub	sp, #20
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d139      	bne.n	8009418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d101      	bne.n	80093b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80093ae:	2302      	movs	r3, #2
 80093b0:	e033      	b.n	800941a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2224      	movs	r2, #36	@ 0x24
 80093be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f022 0201 	bic.w	r2, r2, #1
 80093d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80093e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	e000      	b.n	800941a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009418:	2302      	movs	r3, #2
  }
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
	...

08009428 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009428:	b480      	push	{r7}
 800942a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800942c:	4b04      	ldr	r3, [pc, #16]	@ (8009440 <HAL_PWREx_GetVoltageRange+0x18>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8009434:	4618      	mov	r0, r3
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	40007000 	.word	0x40007000

08009444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009452:	d130      	bne.n	80094b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009454:	4b23      	ldr	r3, [pc, #140]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800945c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009460:	d038      	beq.n	80094d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009462:	4b20      	ldr	r3, [pc, #128]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800946a:	4a1e      	ldr	r2, [pc, #120]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800946c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009470:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009472:	4b1d      	ldr	r3, [pc, #116]	@ (80094e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2232      	movs	r2, #50	@ 0x32
 8009478:	fb02 f303 	mul.w	r3, r2, r3
 800947c:	4a1b      	ldr	r2, [pc, #108]	@ (80094ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800947e:	fba2 2303 	umull	r2, r3, r2, r3
 8009482:	0c9b      	lsrs	r3, r3, #18
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009488:	e002      	b.n	8009490 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3b01      	subs	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009490:	4b14      	ldr	r3, [pc, #80]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800949c:	d102      	bne.n	80094a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1f2      	bne.n	800948a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80094a4:	4b0f      	ldr	r3, [pc, #60]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094b0:	d110      	bne.n	80094d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e00f      	b.n	80094d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80094b6:	4b0b      	ldr	r3, [pc, #44]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80094be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094c2:	d007      	beq.n	80094d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80094c4:	4b07      	ldr	r3, [pc, #28]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80094cc:	4a05      	ldr	r2, [pc, #20]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80094d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40007000 	.word	0x40007000
 80094e8:	20000000 	.word	0x20000000
 80094ec:	431bde83 	.word	0x431bde83

080094f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e3ca      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009502:	4b97      	ldr	r3, [pc, #604]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f003 030c 	and.w	r3, r3, #12
 800950a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800950c:	4b94      	ldr	r3, [pc, #592]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80e4 	beq.w	80096ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <HAL_RCC_OscConfig+0x4a>
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b0c      	cmp	r3, #12
 800952e:	f040 808b 	bne.w	8009648 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b01      	cmp	r3, #1
 8009536:	f040 8087 	bne.w	8009648 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800953a:	4b89      	ldr	r3, [pc, #548]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <HAL_RCC_OscConfig+0x62>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e3a2      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1a      	ldr	r2, [r3, #32]
 8009556:	4b82      	ldr	r3, [pc, #520]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0308 	and.w	r3, r3, #8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d004      	beq.n	800956c <HAL_RCC_OscConfig+0x7c>
 8009562:	4b7f      	ldr	r3, [pc, #508]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800956a:	e005      	b.n	8009578 <HAL_RCC_OscConfig+0x88>
 800956c:	4b7c      	ldr	r3, [pc, #496]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800956e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009572:	091b      	lsrs	r3, r3, #4
 8009574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009578:	4293      	cmp	r3, r2
 800957a:	d223      	bcs.n	80095c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fd55 	bl	800a030 <RCC_SetFlashLatencyFromMSIRange>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e383      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009590:	4b73      	ldr	r3, [pc, #460]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a72      	ldr	r2, [pc, #456]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009596:	f043 0308 	orr.w	r3, r3, #8
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	4b70      	ldr	r3, [pc, #448]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	496d      	ldr	r1, [pc, #436]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095ae:	4b6c      	ldr	r3, [pc, #432]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	4968      	ldr	r1, [pc, #416]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	604b      	str	r3, [r1, #4]
 80095c2:	e025      	b.n	8009610 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80095c4:	4b66      	ldr	r3, [pc, #408]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a65      	ldr	r2, [pc, #404]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095ca:	f043 0308 	orr.w	r3, r3, #8
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	4b63      	ldr	r3, [pc, #396]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	4960      	ldr	r1, [pc, #384]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095e2:	4b5f      	ldr	r3, [pc, #380]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	495b      	ldr	r1, [pc, #364]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d109      	bne.n	8009610 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fd15 	bl	800a030 <RCC_SetFlashLatencyFromMSIRange>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e343      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009610:	f000 fc4a 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 8009614:	4602      	mov	r2, r0
 8009616:	4b52      	ldr	r3, [pc, #328]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	091b      	lsrs	r3, r3, #4
 800961c:	f003 030f 	and.w	r3, r3, #15
 8009620:	4950      	ldr	r1, [pc, #320]	@ (8009764 <HAL_RCC_OscConfig+0x274>)
 8009622:	5ccb      	ldrb	r3, [r1, r3]
 8009624:	f003 031f 	and.w	r3, r3, #31
 8009628:	fa22 f303 	lsr.w	r3, r2, r3
 800962c:	4a4e      	ldr	r2, [pc, #312]	@ (8009768 <HAL_RCC_OscConfig+0x278>)
 800962e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009630:	4b4e      	ldr	r3, [pc, #312]	@ (800976c <HAL_RCC_OscConfig+0x27c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f7fd fa85 	bl	8006b44 <HAL_InitTick>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d052      	beq.n	80096ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	e327      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d032      	beq.n	80096b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009650:	4b43      	ldr	r3, [pc, #268]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a42      	ldr	r2, [pc, #264]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800965c:	f7fd fac2 	bl	8006be4 <HAL_GetTick>
 8009660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009662:	e008      	b.n	8009676 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009664:	f7fd fabe 	bl	8006be4 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b02      	cmp	r3, #2
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e310      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009676:	4b3a      	ldr	r3, [pc, #232]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0f0      	beq.n	8009664 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009682:	4b37      	ldr	r3, [pc, #220]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a36      	ldr	r2, [pc, #216]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009688:	f043 0308 	orr.w	r3, r3, #8
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	4b34      	ldr	r3, [pc, #208]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	4931      	ldr	r1, [pc, #196]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800969c:	4313      	orrs	r3, r2
 800969e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096a0:	4b2f      	ldr	r3, [pc, #188]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	021b      	lsls	r3, r3, #8
 80096ae:	492c      	ldr	r1, [pc, #176]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	604b      	str	r3, [r1, #4]
 80096b4:	e01a      	b.n	80096ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80096b6:	4b2a      	ldr	r3, [pc, #168]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a29      	ldr	r2, [pc, #164]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80096bc:	f023 0301 	bic.w	r3, r3, #1
 80096c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80096c2:	f7fd fa8f 	bl	8006be4 <HAL_GetTick>
 80096c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80096c8:	e008      	b.n	80096dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80096ca:	f7fd fa8b 	bl	8006be4 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d901      	bls.n	80096dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e2dd      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80096dc:	4b20      	ldr	r3, [pc, #128]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f0      	bne.n	80096ca <HAL_RCC_OscConfig+0x1da>
 80096e8:	e000      	b.n	80096ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80096ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d074      	beq.n	80097e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	2b08      	cmp	r3, #8
 80096fc:	d005      	beq.n	800970a <HAL_RCC_OscConfig+0x21a>
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b0c      	cmp	r3, #12
 8009702:	d10e      	bne.n	8009722 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2b03      	cmp	r3, #3
 8009708:	d10b      	bne.n	8009722 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800970a:	4b15      	ldr	r3, [pc, #84]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d064      	beq.n	80097e0 <HAL_RCC_OscConfig+0x2f0>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d160      	bne.n	80097e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e2ba      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800972a:	d106      	bne.n	800973a <HAL_RCC_OscConfig+0x24a>
 800972c:	4b0c      	ldr	r3, [pc, #48]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a0b      	ldr	r2, [pc, #44]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	e026      	b.n	8009788 <HAL_RCC_OscConfig+0x298>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009742:	d115      	bne.n	8009770 <HAL_RCC_OscConfig+0x280>
 8009744:	4b06      	ldr	r3, [pc, #24]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a05      	ldr	r2, [pc, #20]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 800974a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	4b03      	ldr	r3, [pc, #12]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a02      	ldr	r2, [pc, #8]	@ (8009760 <HAL_RCC_OscConfig+0x270>)
 8009756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	e014      	b.n	8009788 <HAL_RCC_OscConfig+0x298>
 800975e:	bf00      	nop
 8009760:	40021000 	.word	0x40021000
 8009764:	08013e38 	.word	0x08013e38
 8009768:	20000000 	.word	0x20000000
 800976c:	20000004 	.word	0x20000004
 8009770:	4ba0      	ldr	r3, [pc, #640]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a9f      	ldr	r2, [pc, #636]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	4b9d      	ldr	r3, [pc, #628]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a9c      	ldr	r2, [pc, #624]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d013      	beq.n	80097b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009790:	f7fd fa28 	bl	8006be4 <HAL_GetTick>
 8009794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009798:	f7fd fa24 	bl	8006be4 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b64      	cmp	r3, #100	@ 0x64
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e276      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097aa:	4b92      	ldr	r3, [pc, #584]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f0      	beq.n	8009798 <HAL_RCC_OscConfig+0x2a8>
 80097b6:	e014      	b.n	80097e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b8:	f7fd fa14 	bl	8006be4 <HAL_GetTick>
 80097bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097be:	e008      	b.n	80097d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097c0:	f7fd fa10 	bl	8006be4 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b64      	cmp	r3, #100	@ 0x64
 80097cc:	d901      	bls.n	80097d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e262      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097d2:	4b88      	ldr	r3, [pc, #544]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1f0      	bne.n	80097c0 <HAL_RCC_OscConfig+0x2d0>
 80097de:	e000      	b.n	80097e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d060      	beq.n	80098b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d005      	beq.n	8009800 <HAL_RCC_OscConfig+0x310>
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	2b0c      	cmp	r3, #12
 80097f8:	d119      	bne.n	800982e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d116      	bne.n	800982e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009800:	4b7c      	ldr	r3, [pc, #496]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <HAL_RCC_OscConfig+0x328>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e23f      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009818:	4b76      	ldr	r3, [pc, #472]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	061b      	lsls	r3, r3, #24
 8009826:	4973      	ldr	r1, [pc, #460]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009828:	4313      	orrs	r3, r2
 800982a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800982c:	e040      	b.n	80098b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d023      	beq.n	800987e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009836:	4b6f      	ldr	r3, [pc, #444]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a6e      	ldr	r2, [pc, #440]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800983c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009842:	f7fd f9cf 	bl	8006be4 <HAL_GetTick>
 8009846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009848:	e008      	b.n	800985c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800984a:	f7fd f9cb 	bl	8006be4 <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	2b02      	cmp	r3, #2
 8009856:	d901      	bls.n	800985c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e21d      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800985c:	4b65      	ldr	r3, [pc, #404]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0f0      	beq.n	800984a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009868:	4b62      	ldr	r3, [pc, #392]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	061b      	lsls	r3, r3, #24
 8009876:	495f      	ldr	r1, [pc, #380]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009878:	4313      	orrs	r3, r2
 800987a:	604b      	str	r3, [r1, #4]
 800987c:	e018      	b.n	80098b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800987e:	4b5d      	ldr	r3, [pc, #372]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a5c      	ldr	r2, [pc, #368]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988a:	f7fd f9ab 	bl	8006be4 <HAL_GetTick>
 800988e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009890:	e008      	b.n	80098a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009892:	f7fd f9a7 	bl	8006be4 <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	2b02      	cmp	r3, #2
 800989e:	d901      	bls.n	80098a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e1f9      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80098a4:	4b53      	ldr	r3, [pc, #332]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1f0      	bne.n	8009892 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0308 	and.w	r3, r3, #8
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d03c      	beq.n	8009936 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d01c      	beq.n	80098fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098c4:	4b4b      	ldr	r3, [pc, #300]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80098c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098ca:	4a4a      	ldr	r2, [pc, #296]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80098cc:	f043 0301 	orr.w	r3, r3, #1
 80098d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d4:	f7fd f986 	bl	8006be4 <HAL_GetTick>
 80098d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098da:	e008      	b.n	80098ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098dc:	f7fd f982 	bl	8006be4 <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d901      	bls.n	80098ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e1d4      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098ee:	4b41      	ldr	r3, [pc, #260]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80098f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0ef      	beq.n	80098dc <HAL_RCC_OscConfig+0x3ec>
 80098fc:	e01b      	b.n	8009936 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098fe:	4b3d      	ldr	r3, [pc, #244]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009904:	4a3b      	ldr	r2, [pc, #236]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009906:	f023 0301 	bic.w	r3, r3, #1
 800990a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990e:	f7fd f969 	bl	8006be4 <HAL_GetTick>
 8009912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009914:	e008      	b.n	8009928 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009916:	f7fd f965 	bl	8006be4 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	2b02      	cmp	r3, #2
 8009922:	d901      	bls.n	8009928 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e1b7      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009928:	4b32      	ldr	r3, [pc, #200]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800992a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1ef      	bne.n	8009916 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 80a6 	beq.w	8009a90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009944:	2300      	movs	r3, #0
 8009946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009948:	4b2a      	ldr	r3, [pc, #168]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800994a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10d      	bne.n	8009970 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009954:	4b27      	ldr	r3, [pc, #156]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009958:	4a26      	ldr	r2, [pc, #152]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 800995a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009960:	4b24      	ldr	r3, [pc, #144]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 8009962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009968:	60bb      	str	r3, [r7, #8]
 800996a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800996c:	2301      	movs	r3, #1
 800996e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009970:	4b21      	ldr	r3, [pc, #132]	@ (80099f8 <HAL_RCC_OscConfig+0x508>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009978:	2b00      	cmp	r3, #0
 800997a:	d118      	bne.n	80099ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800997c:	4b1e      	ldr	r3, [pc, #120]	@ (80099f8 <HAL_RCC_OscConfig+0x508>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a1d      	ldr	r2, [pc, #116]	@ (80099f8 <HAL_RCC_OscConfig+0x508>)
 8009982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009988:	f7fd f92c 	bl	8006be4 <HAL_GetTick>
 800998c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800998e:	e008      	b.n	80099a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009990:	f7fd f928 	bl	8006be4 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d901      	bls.n	80099a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e17a      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099a2:	4b15      	ldr	r3, [pc, #84]	@ (80099f8 <HAL_RCC_OscConfig+0x508>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0f0      	beq.n	8009990 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d108      	bne.n	80099c8 <HAL_RCC_OscConfig+0x4d8>
 80099b6:	4b0f      	ldr	r3, [pc, #60]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80099b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099bc:	4a0d      	ldr	r2, [pc, #52]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80099be:	f043 0301 	orr.w	r3, r3, #1
 80099c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099c6:	e029      	b.n	8009a1c <HAL_RCC_OscConfig+0x52c>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	2b05      	cmp	r3, #5
 80099ce:	d115      	bne.n	80099fc <HAL_RCC_OscConfig+0x50c>
 80099d0:	4b08      	ldr	r3, [pc, #32]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80099d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d6:	4a07      	ldr	r2, [pc, #28]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80099d8:	f043 0304 	orr.w	r3, r3, #4
 80099dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099e0:	4b04      	ldr	r3, [pc, #16]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80099e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e6:	4a03      	ldr	r2, [pc, #12]	@ (80099f4 <HAL_RCC_OscConfig+0x504>)
 80099e8:	f043 0301 	orr.w	r3, r3, #1
 80099ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099f0:	e014      	b.n	8009a1c <HAL_RCC_OscConfig+0x52c>
 80099f2:	bf00      	nop
 80099f4:	40021000 	.word	0x40021000
 80099f8:	40007000 	.word	0x40007000
 80099fc:	4b9c      	ldr	r3, [pc, #624]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 80099fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a02:	4a9b      	ldr	r2, [pc, #620]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009a04:	f023 0301 	bic.w	r3, r3, #1
 8009a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009a0c:	4b98      	ldr	r3, [pc, #608]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a12:	4a97      	ldr	r2, [pc, #604]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009a14:	f023 0304 	bic.w	r3, r3, #4
 8009a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d016      	beq.n	8009a52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a24:	f7fd f8de 	bl	8006be4 <HAL_GetTick>
 8009a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a2a:	e00a      	b.n	8009a42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a2c:	f7fd f8da 	bl	8006be4 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e12a      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a42:	4b8b      	ldr	r3, [pc, #556]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0ed      	beq.n	8009a2c <HAL_RCC_OscConfig+0x53c>
 8009a50:	e015      	b.n	8009a7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a52:	f7fd f8c7 	bl	8006be4 <HAL_GetTick>
 8009a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a58:	e00a      	b.n	8009a70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a5a:	f7fd f8c3 	bl	8006be4 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d901      	bls.n	8009a70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e113      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a70:	4b7f      	ldr	r3, [pc, #508]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1ed      	bne.n	8009a5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a7e:	7ffb      	ldrb	r3, [r7, #31]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d105      	bne.n	8009a90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a84:	4b7a      	ldr	r3, [pc, #488]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a88:	4a79      	ldr	r2, [pc, #484]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a8e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 80fe 	beq.w	8009c96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	f040 80d0 	bne.w	8009c44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009aa4:	4b72      	ldr	r3, [pc, #456]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f003 0203 	and.w	r2, r3, #3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d130      	bne.n	8009b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d127      	bne.n	8009b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d11f      	bne.n	8009b1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009ae4:	2a07      	cmp	r2, #7
 8009ae6:	bf14      	ite	ne
 8009ae8:	2201      	movne	r2, #1
 8009aea:	2200      	moveq	r2, #0
 8009aec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d113      	bne.n	8009b1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009afc:	085b      	lsrs	r3, r3, #1
 8009afe:	3b01      	subs	r3, #1
 8009b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d109      	bne.n	8009b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b10:	085b      	lsrs	r3, r3, #1
 8009b12:	3b01      	subs	r3, #1
 8009b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d06e      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	2b0c      	cmp	r3, #12
 8009b1e:	d069      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009b20:	4b53      	ldr	r3, [pc, #332]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009b2c:	4b50      	ldr	r3, [pc, #320]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e0ad      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a4b      	ldr	r2, [pc, #300]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009b48:	f7fd f84c 	bl	8006be4 <HAL_GetTick>
 8009b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b4e:	e008      	b.n	8009b62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b50:	f7fd f848 	bl	8006be4 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d901      	bls.n	8009b62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e09a      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b62:	4b43      	ldr	r3, [pc, #268]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1f0      	bne.n	8009b50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b6e:	4b40      	ldr	r3, [pc, #256]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	4b40      	ldr	r3, [pc, #256]	@ (8009c74 <HAL_RCC_OscConfig+0x784>)
 8009b74:	4013      	ands	r3, r2
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b7e:	3a01      	subs	r2, #1
 8009b80:	0112      	lsls	r2, r2, #4
 8009b82:	4311      	orrs	r1, r2
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009b88:	0212      	lsls	r2, r2, #8
 8009b8a:	4311      	orrs	r1, r2
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009b90:	0852      	lsrs	r2, r2, #1
 8009b92:	3a01      	subs	r2, #1
 8009b94:	0552      	lsls	r2, r2, #21
 8009b96:	4311      	orrs	r1, r2
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009b9c:	0852      	lsrs	r2, r2, #1
 8009b9e:	3a01      	subs	r2, #1
 8009ba0:	0652      	lsls	r2, r2, #25
 8009ba2:	4311      	orrs	r1, r2
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009ba8:	0912      	lsrs	r2, r2, #4
 8009baa:	0452      	lsls	r2, r2, #17
 8009bac:	430a      	orrs	r2, r1
 8009bae:	4930      	ldr	r1, [pc, #192]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009bcc:	f7fd f80a 	bl	8006be4 <HAL_GetTick>
 8009bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bd4:	f7fd f806 	bl	8006be4 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e058      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009be6:	4b22      	ldr	r3, [pc, #136]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0f0      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009bf2:	e050      	b.n	8009c96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e04f      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d148      	bne.n	8009c96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009c04:	4b1a      	ldr	r3, [pc, #104]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a19      	ldr	r2, [pc, #100]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009c0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009c10:	4b17      	ldr	r3, [pc, #92]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	4a16      	ldr	r2, [pc, #88]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c1c:	f7fc ffe2 	bl	8006be4 <HAL_GetTick>
 8009c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c22:	e008      	b.n	8009c36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c24:	f7fc ffde 	bl	8006be4 <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d901      	bls.n	8009c36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e030      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c36:	4b0e      	ldr	r3, [pc, #56]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0f0      	beq.n	8009c24 <HAL_RCC_OscConfig+0x734>
 8009c42:	e028      	b.n	8009c96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b0c      	cmp	r3, #12
 8009c48:	d023      	beq.n	8009c92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c4a:	4b09      	ldr	r3, [pc, #36]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a08      	ldr	r2, [pc, #32]	@ (8009c70 <HAL_RCC_OscConfig+0x780>)
 8009c50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c56:	f7fc ffc5 	bl	8006be4 <HAL_GetTick>
 8009c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c5c:	e00c      	b.n	8009c78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c5e:	f7fc ffc1 	bl	8006be4 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d905      	bls.n	8009c78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e013      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
 8009c70:	40021000 	.word	0x40021000
 8009c74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c78:	4b09      	ldr	r3, [pc, #36]	@ (8009ca0 <HAL_RCC_OscConfig+0x7b0>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1ec      	bne.n	8009c5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009c84:	4b06      	ldr	r3, [pc, #24]	@ (8009ca0 <HAL_RCC_OscConfig+0x7b0>)
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	4905      	ldr	r1, [pc, #20]	@ (8009ca0 <HAL_RCC_OscConfig+0x7b0>)
 8009c8a:	4b06      	ldr	r3, [pc, #24]	@ (8009ca4 <HAL_RCC_OscConfig+0x7b4>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	60cb      	str	r3, [r1, #12]
 8009c90:	e001      	b.n	8009c96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e000      	b.n	8009c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3720      	adds	r7, #32
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	40021000 	.word	0x40021000
 8009ca4:	feeefffc 	.word	0xfeeefffc

08009ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e0e7      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cbc:	4b75      	ldr	r3, [pc, #468]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d910      	bls.n	8009cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cca:	4b72      	ldr	r3, [pc, #456]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f023 0207 	bic.w	r2, r3, #7
 8009cd2:	4970      	ldr	r1, [pc, #448]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cda:	4b6e      	ldr	r3, [pc, #440]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d001      	beq.n	8009cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0cf      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d010      	beq.n	8009d1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	4b66      	ldr	r3, [pc, #408]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d908      	bls.n	8009d1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d08:	4b63      	ldr	r3, [pc, #396]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	4960      	ldr	r1, [pc, #384]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d04c      	beq.n	8009dc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d107      	bne.n	8009d3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d121      	bne.n	8009d7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e0a6      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d107      	bne.n	8009d56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d46:	4b54      	ldr	r3, [pc, #336]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d115      	bne.n	8009d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e09a      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d107      	bne.n	8009d6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d109      	bne.n	8009d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e08e      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d101      	bne.n	8009d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e086      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d7e:	4b46      	ldr	r3, [pc, #280]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f023 0203 	bic.w	r2, r3, #3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	4943      	ldr	r1, [pc, #268]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d90:	f7fc ff28 	bl	8006be4 <HAL_GetTick>
 8009d94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d96:	e00a      	b.n	8009dae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d98:	f7fc ff24 	bl	8006be4 <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d901      	bls.n	8009dae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e06e      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dae:	4b3a      	ldr	r3, [pc, #232]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f003 020c 	and.w	r2, r3, #12
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d1eb      	bne.n	8009d98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d010      	beq.n	8009dee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	4b31      	ldr	r3, [pc, #196]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d208      	bcs.n	8009dee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	492b      	ldr	r1, [pc, #172]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dee:	4b29      	ldr	r3, [pc, #164]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d210      	bcs.n	8009e1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dfc:	4b25      	ldr	r3, [pc, #148]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f023 0207 	bic.w	r2, r3, #7
 8009e04:	4923      	ldr	r1, [pc, #140]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e0c:	4b21      	ldr	r3, [pc, #132]	@ (8009e94 <HAL_RCC_ClockConfig+0x1ec>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0307 	and.w	r3, r3, #7
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d001      	beq.n	8009e1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e036      	b.n	8009e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d008      	beq.n	8009e3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	4918      	ldr	r1, [pc, #96]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e48:	4b13      	ldr	r3, [pc, #76]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	4910      	ldr	r1, [pc, #64]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009e5c:	f000 f824 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 8009e60:	4602      	mov	r2, r0
 8009e62:	4b0d      	ldr	r3, [pc, #52]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f0>)
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	091b      	lsrs	r3, r3, #4
 8009e68:	f003 030f 	and.w	r3, r3, #15
 8009e6c:	490b      	ldr	r1, [pc, #44]	@ (8009e9c <HAL_RCC_ClockConfig+0x1f4>)
 8009e6e:	5ccb      	ldrb	r3, [r1, r3]
 8009e70:	f003 031f 	and.w	r3, r3, #31
 8009e74:	fa22 f303 	lsr.w	r3, r2, r3
 8009e78:	4a09      	ldr	r2, [pc, #36]	@ (8009ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8009e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009e7c:	4b09      	ldr	r3, [pc, #36]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fc fe5f 	bl	8006b44 <HAL_InitTick>
 8009e86:	4603      	mov	r3, r0
 8009e88:	72fb      	strb	r3, [r7, #11]

  return status;
 8009e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	40022000 	.word	0x40022000
 8009e98:	40021000 	.word	0x40021000
 8009e9c:	08013e38 	.word	0x08013e38
 8009ea0:	20000000 	.word	0x20000000
 8009ea4:	20000004 	.word	0x20000004

08009ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b089      	sub	sp, #36	@ 0x24
 8009eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f003 030c 	and.w	r3, r3, #12
 8009ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <HAL_RCC_GetSysClockFreq+0x34>
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b0c      	cmp	r3, #12
 8009ed4:	d121      	bne.n	8009f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d11e      	bne.n	8009f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009edc:	4b34      	ldr	r3, [pc, #208]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d107      	bne.n	8009ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009ee8:	4b31      	ldr	r3, [pc, #196]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	61fb      	str	r3, [r7, #28]
 8009ef6:	e005      	b.n	8009f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	091b      	lsrs	r3, r3, #4
 8009efe:	f003 030f 	and.w	r3, r3, #15
 8009f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009f04:	4a2b      	ldr	r2, [pc, #172]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10d      	bne.n	8009f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009f18:	e00a      	b.n	8009f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d102      	bne.n	8009f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009f20:	4b25      	ldr	r3, [pc, #148]	@ (8009fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009f22:	61bb      	str	r3, [r7, #24]
 8009f24:	e004      	b.n	8009f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d101      	bne.n	8009f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009f2c:	4b23      	ldr	r3, [pc, #140]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8009f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2b0c      	cmp	r3, #12
 8009f34:	d134      	bne.n	8009fa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f36:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d003      	beq.n	8009f4e <HAL_RCC_GetSysClockFreq+0xa6>
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d003      	beq.n	8009f54 <HAL_RCC_GetSysClockFreq+0xac>
 8009f4c:	e005      	b.n	8009f5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009f50:	617b      	str	r3, [r7, #20]
      break;
 8009f52:	e005      	b.n	8009f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009f54:	4b19      	ldr	r3, [pc, #100]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8009f56:	617b      	str	r3, [r7, #20]
      break;
 8009f58:	e002      	b.n	8009f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	617b      	str	r3, [r7, #20]
      break;
 8009f5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f60:	4b13      	ldr	r3, [pc, #76]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	091b      	lsrs	r3, r3, #4
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009f6e:	4b10      	ldr	r3, [pc, #64]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	fb03 f202 	mul.w	r2, r3, r2
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f86:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	0e5b      	lsrs	r3, r3, #25
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	3301      	adds	r3, #1
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009fa0:	69bb      	ldr	r3, [r7, #24]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3724      	adds	r7, #36	@ 0x24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40021000 	.word	0x40021000
 8009fb4:	08013e50 	.word	0x08013e50
 8009fb8:	00f42400 	.word	0x00f42400
 8009fbc:	007a1200 	.word	0x007a1200

08009fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fc4:	4b03      	ldr	r3, [pc, #12]	@ (8009fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000000 	.word	0x20000000

08009fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009fdc:	f7ff fff0 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	4b06      	ldr	r3, [pc, #24]	@ (8009ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	0a1b      	lsrs	r3, r3, #8
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	4904      	ldr	r1, [pc, #16]	@ (800a000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009fee:	5ccb      	ldrb	r3, [r1, r3]
 8009ff0:	f003 031f 	and.w	r3, r3, #31
 8009ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	40021000 	.word	0x40021000
 800a000:	08013e48 	.word	0x08013e48

0800a004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a008:	f7ff ffda 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 800a00c:	4602      	mov	r2, r0
 800a00e:	4b06      	ldr	r3, [pc, #24]	@ (800a028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	0adb      	lsrs	r3, r3, #11
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	4904      	ldr	r1, [pc, #16]	@ (800a02c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a01a:	5ccb      	ldrb	r3, [r1, r3]
 800a01c:	f003 031f 	and.w	r3, r3, #31
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a024:	4618      	mov	r0, r3
 800a026:	bd80      	pop	{r7, pc}
 800a028:	40021000 	.word	0x40021000
 800a02c:	08013e48 	.word	0x08013e48

0800a030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a038:	2300      	movs	r3, #0
 800a03a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a03c:	4b2a      	ldr	r3, [pc, #168]	@ (800a0e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a03e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a048:	f7ff f9ee 	bl	8009428 <HAL_PWREx_GetVoltageRange>
 800a04c:	6178      	str	r0, [r7, #20]
 800a04e:	e014      	b.n	800a07a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a050:	4b25      	ldr	r3, [pc, #148]	@ (800a0e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a054:	4a24      	ldr	r2, [pc, #144]	@ (800a0e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a05a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a05c:	4b22      	ldr	r3, [pc, #136]	@ (800a0e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a068:	f7ff f9de 	bl	8009428 <HAL_PWREx_GetVoltageRange>
 800a06c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a06e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a072:	4a1d      	ldr	r2, [pc, #116]	@ (800a0e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a078:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a080:	d10b      	bne.n	800a09a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b80      	cmp	r3, #128	@ 0x80
 800a086:	d919      	bls.n	800a0bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2ba0      	cmp	r3, #160	@ 0xa0
 800a08c:	d902      	bls.n	800a094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a08e:	2302      	movs	r3, #2
 800a090:	613b      	str	r3, [r7, #16]
 800a092:	e013      	b.n	800a0bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a094:	2301      	movs	r3, #1
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	e010      	b.n	800a0bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b80      	cmp	r3, #128	@ 0x80
 800a09e:	d902      	bls.n	800a0a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	613b      	str	r3, [r7, #16]
 800a0a4:	e00a      	b.n	800a0bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b80      	cmp	r3, #128	@ 0x80
 800a0aa:	d102      	bne.n	800a0b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	613b      	str	r3, [r7, #16]
 800a0b0:	e004      	b.n	800a0bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b70      	cmp	r3, #112	@ 0x70
 800a0b6:	d101      	bne.n	800a0bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a0ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f023 0207 	bic.w	r2, r3, #7
 800a0c4:	4909      	ldr	r1, [pc, #36]	@ (800a0ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a0cc:	4b07      	ldr	r3, [pc, #28]	@ (800a0ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0307 	and.w	r3, r3, #7
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d001      	beq.n	800a0de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40021000 	.word	0x40021000
 800a0ec:	40022000 	.word	0x40022000

0800a0f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d041      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a110:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a114:	d02a      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a116:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a11a:	d824      	bhi.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a11c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a120:	d008      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a122:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a126:	d81e      	bhi.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a12c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a130:	d010      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a132:	e018      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a134:	4b86      	ldr	r3, [pc, #536]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	4a85      	ldr	r2, [pc, #532]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a13a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a13e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a140:	e015      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3304      	adds	r3, #4
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fabb 	bl	800a6c4 <RCCEx_PLLSAI1_Config>
 800a14e:	4603      	mov	r3, r0
 800a150:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a152:	e00c      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3320      	adds	r3, #32
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fba6 	bl	800a8ac <RCCEx_PLLSAI2_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a164:	e003      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	74fb      	strb	r3, [r7, #19]
      break;
 800a16a:	e000      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a16c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a16e:	7cfb      	ldrb	r3, [r7, #19]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10b      	bne.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a174:	4b76      	ldr	r3, [pc, #472]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a17a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a182:	4973      	ldr	r1, [pc, #460]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a184:	4313      	orrs	r3, r2
 800a186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a18a:	e001      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a18c:	7cfb      	ldrb	r3, [r7, #19]
 800a18e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d041      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1a4:	d02a      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a1a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1aa:	d824      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a1ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1b0:	d008      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a1b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1b6:	d81e      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00a      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a1bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1c0:	d010      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a1c2:	e018      	b.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a1c4:	4b62      	ldr	r3, [pc, #392]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	4a61      	ldr	r2, [pc, #388]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1d0:	e015      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fa73 	bl	800a6c4 <RCCEx_PLLSAI1_Config>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1e2:	e00c      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3320      	adds	r3, #32
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fb5e 	bl	800a8ac <RCCEx_PLLSAI2_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1f4:	e003      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	74fb      	strb	r3, [r7, #19]
      break;
 800a1fa:	e000      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a1fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1fe:	7cfb      	ldrb	r3, [r7, #19]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a204:	4b52      	ldr	r3, [pc, #328]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a20a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a212:	494f      	ldr	r1, [pc, #316]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a214:	4313      	orrs	r3, r2
 800a216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a21a:	e001      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21c:	7cfb      	ldrb	r3, [r7, #19]
 800a21e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 80a0 	beq.w	800a36e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a22e:	2300      	movs	r3, #0
 800a230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a232:	4b47      	ldr	r3, [pc, #284]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a242:	2300      	movs	r3, #0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00d      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a248:	4b41      	ldr	r3, [pc, #260]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a24a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a24c:	4a40      	ldr	r2, [pc, #256]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a24e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a252:	6593      	str	r3, [r2, #88]	@ 0x58
 800a254:	4b3e      	ldr	r3, [pc, #248]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a25c:	60bb      	str	r3, [r7, #8]
 800a25e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a260:	2301      	movs	r3, #1
 800a262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a264:	4b3b      	ldr	r3, [pc, #236]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a3a      	ldr	r2, [pc, #232]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a26a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a26e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a270:	f7fc fcb8 	bl	8006be4 <HAL_GetTick>
 800a274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a276:	e009      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a278:	f7fc fcb4 	bl	8006be4 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b02      	cmp	r3, #2
 800a284:	d902      	bls.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	74fb      	strb	r3, [r7, #19]
        break;
 800a28a:	e005      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a28c:	4b31      	ldr	r3, [pc, #196]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0ef      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a298:	7cfb      	ldrb	r3, [r7, #19]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d15c      	bne.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a29e:	4b2c      	ldr	r3, [pc, #176]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01f      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d019      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a2bc:	4b24      	ldr	r3, [pc, #144]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2c8:	4b21      	ldr	r3, [pc, #132]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ce:	4a20      	ldr	r2, [pc, #128]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2d8:	4b1d      	ldr	r3, [pc, #116]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2de:	4a1c      	ldr	r2, [pc, #112]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a2e8:	4a19      	ldr	r2, [pc, #100]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d016      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2fa:	f7fc fc73 	bl	8006be4 <HAL_GetTick>
 800a2fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a300:	e00b      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a302:	f7fc fc6f 	bl	8006be4 <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a310:	4293      	cmp	r3, r2
 800a312:	d902      	bls.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	74fb      	strb	r3, [r7, #19]
            break;
 800a318:	e006      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a31a:	4b0d      	ldr	r3, [pc, #52]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0ec      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a328:	7cfb      	ldrb	r3, [r7, #19]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10c      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a32e:	4b08      	ldr	r3, [pc, #32]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a33e:	4904      	ldr	r1, [pc, #16]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a340:	4313      	orrs	r3, r2
 800a342:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a346:	e009      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a348:	7cfb      	ldrb	r3, [r7, #19]
 800a34a:	74bb      	strb	r3, [r7, #18]
 800a34c:	e006      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a34e:	bf00      	nop
 800a350:	40021000 	.word	0x40021000
 800a354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a358:	7cfb      	ldrb	r3, [r7, #19]
 800a35a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a35c:	7c7b      	ldrb	r3, [r7, #17]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d105      	bne.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a362:	4b9e      	ldr	r3, [pc, #632]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a366:	4a9d      	ldr	r2, [pc, #628]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a36c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a37a:	4b98      	ldr	r3, [pc, #608]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a380:	f023 0203 	bic.w	r2, r3, #3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a388:	4994      	ldr	r1, [pc, #592]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00a      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a39c:	4b8f      	ldr	r3, [pc, #572]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3a2:	f023 020c 	bic.w	r2, r3, #12
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3aa:	498c      	ldr	r1, [pc, #560]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0304 	and.w	r3, r3, #4
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00a      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a3be:	4b87      	ldr	r3, [pc, #540]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3cc:	4983      	ldr	r1, [pc, #524]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0308 	and.w	r3, r3, #8
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00a      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a3e0:	4b7e      	ldr	r3, [pc, #504]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ee:	497b      	ldr	r1, [pc, #492]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00a      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a402:	4b76      	ldr	r3, [pc, #472]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a410:	4972      	ldr	r1, [pc, #456]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a412:	4313      	orrs	r3, r2
 800a414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00a      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a424:	4b6d      	ldr	r3, [pc, #436]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a42a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a432:	496a      	ldr	r1, [pc, #424]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a434:	4313      	orrs	r3, r2
 800a436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00a      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a446:	4b65      	ldr	r3, [pc, #404]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a44c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a454:	4961      	ldr	r1, [pc, #388]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a456:	4313      	orrs	r3, r2
 800a458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00a      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a468:	4b5c      	ldr	r3, [pc, #368]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a46e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a476:	4959      	ldr	r1, [pc, #356]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a48a:	4b54      	ldr	r3, [pc, #336]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a490:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a498:	4950      	ldr	r1, [pc, #320]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a4ac:	4b4b      	ldr	r3, [pc, #300]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ba:	4948      	ldr	r1, [pc, #288]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a4ce:	4b43      	ldr	r3, [pc, #268]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4dc:	493f      	ldr	r1, [pc, #252]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d028      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4f0:	4b3a      	ldr	r3, [pc, #232]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4fe:	4937      	ldr	r1, [pc, #220]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a500:	4313      	orrs	r3, r2
 800a502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a50a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a50e:	d106      	bne.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a510:	4b32      	ldr	r3, [pc, #200]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	4a31      	ldr	r2, [pc, #196]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a51a:	60d3      	str	r3, [r2, #12]
 800a51c:	e011      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a522:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a526:	d10c      	bne.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3304      	adds	r3, #4
 800a52c:	2101      	movs	r1, #1
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f8c8 	bl	800a6c4 <RCCEx_PLLSAI1_Config>
 800a534:	4603      	mov	r3, r0
 800a536:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a538:	7cfb      	ldrb	r3, [r7, #19]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a53e:	7cfb      	ldrb	r3, [r7, #19]
 800a540:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d028      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a54e:	4b23      	ldr	r3, [pc, #140]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a554:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a55c:	491f      	ldr	r1, [pc, #124]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a56c:	d106      	bne.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a56e:	4b1b      	ldr	r3, [pc, #108]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	4a1a      	ldr	r2, [pc, #104]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a574:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a578:	60d3      	str	r3, [r2, #12]
 800a57a:	e011      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a580:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a584:	d10c      	bne.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3304      	adds	r3, #4
 800a58a:	2101      	movs	r1, #1
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 f899 	bl	800a6c4 <RCCEx_PLLSAI1_Config>
 800a592:	4603      	mov	r3, r0
 800a594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a596:	7cfb      	ldrb	r3, [r7, #19]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a59c:	7cfb      	ldrb	r3, [r7, #19]
 800a59e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d02b      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ba:	4908      	ldr	r1, [pc, #32]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ca:	d109      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5cc:	4b03      	ldr	r3, [pc, #12]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	4a02      	ldr	r2, [pc, #8]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5d6:	60d3      	str	r3, [r2, #12]
 800a5d8:	e014      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a5da:	bf00      	nop
 800a5dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a5e8:	d10c      	bne.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 f867 	bl	800a6c4 <RCCEx_PLLSAI1_Config>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a5fa:	7cfb      	ldrb	r3, [r7, #19]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a600:	7cfb      	ldrb	r3, [r7, #19]
 800a602:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d02f      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a610:	4b2b      	ldr	r3, [pc, #172]	@ (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a616:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a61e:	4928      	ldr	r1, [pc, #160]	@ (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a620:	4313      	orrs	r3, r2
 800a622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a62a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a62e:	d10d      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	2102      	movs	r1, #2
 800a636:	4618      	mov	r0, r3
 800a638:	f000 f844 	bl	800a6c4 <RCCEx_PLLSAI1_Config>
 800a63c:	4603      	mov	r3, r0
 800a63e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a640:	7cfb      	ldrb	r3, [r7, #19]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d014      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a646:	7cfb      	ldrb	r3, [r7, #19]
 800a648:	74bb      	strb	r3, [r7, #18]
 800a64a:	e011      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a654:	d10c      	bne.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3320      	adds	r3, #32
 800a65a:	2102      	movs	r1, #2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 f925 	bl	800a8ac <RCCEx_PLLSAI2_Config>
 800a662:	4603      	mov	r3, r0
 800a664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a666:	7cfb      	ldrb	r3, [r7, #19]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a66c:	7cfb      	ldrb	r3, [r7, #19]
 800a66e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a67c:	4b10      	ldr	r3, [pc, #64]	@ (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a682:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a68a:	490d      	ldr	r1, [pc, #52]	@ (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a69e:	4b08      	ldr	r3, [pc, #32]	@ (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ae:	4904      	ldr	r1, [pc, #16]	@ (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a6b6:	7cbb      	ldrb	r3, [r7, #18]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40021000 	.word	0x40021000

0800a6c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a6d2:	4b75      	ldr	r3, [pc, #468]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d018      	beq.n	800a710 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a6de:	4b72      	ldr	r3, [pc, #456]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f003 0203 	and.w	r2, r3, #3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d10d      	bne.n	800a70a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
       ||
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d009      	beq.n	800a70a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a6f6:	4b6c      	ldr	r3, [pc, #432]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	091b      	lsrs	r3, r3, #4
 800a6fc:	f003 0307 	and.w	r3, r3, #7
 800a700:	1c5a      	adds	r2, r3, #1
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
       ||
 800a706:	429a      	cmp	r2, r3
 800a708:	d047      	beq.n	800a79a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	73fb      	strb	r3, [r7, #15]
 800a70e:	e044      	b.n	800a79a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d018      	beq.n	800a74a <RCCEx_PLLSAI1_Config+0x86>
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d825      	bhi.n	800a768 <RCCEx_PLLSAI1_Config+0xa4>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d002      	beq.n	800a726 <RCCEx_PLLSAI1_Config+0x62>
 800a720:	2b02      	cmp	r3, #2
 800a722:	d009      	beq.n	800a738 <RCCEx_PLLSAI1_Config+0x74>
 800a724:	e020      	b.n	800a768 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a726:	4b60      	ldr	r3, [pc, #384]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d11d      	bne.n	800a76e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a736:	e01a      	b.n	800a76e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a738:	4b5b      	ldr	r3, [pc, #364]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a740:	2b00      	cmp	r3, #0
 800a742:	d116      	bne.n	800a772 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a748:	e013      	b.n	800a772 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a74a:	4b57      	ldr	r3, [pc, #348]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10f      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a756:	4b54      	ldr	r3, [pc, #336]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d109      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a766:	e006      	b.n	800a776 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	73fb      	strb	r3, [r7, #15]
      break;
 800a76c:	e004      	b.n	800a778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a76e:	bf00      	nop
 800a770:	e002      	b.n	800a778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a772:	bf00      	nop
 800a774:	e000      	b.n	800a778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a776:	bf00      	nop
    }

    if(status == HAL_OK)
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10d      	bne.n	800a79a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a77e:	4b4a      	ldr	r3, [pc, #296]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6819      	ldr	r1, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	3b01      	subs	r3, #1
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	430b      	orrs	r3, r1
 800a794:	4944      	ldr	r1, [pc, #272]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a796:	4313      	orrs	r3, r2
 800a798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d17d      	bne.n	800a89c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a7a0:	4b41      	ldr	r3, [pc, #260]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a40      	ldr	r2, [pc, #256]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7ac:	f7fc fa1a 	bl	8006be4 <HAL_GetTick>
 800a7b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a7b2:	e009      	b.n	800a7c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7b4:	f7fc fa16 	bl	8006be4 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d902      	bls.n	800a7c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	73fb      	strb	r3, [r7, #15]
        break;
 800a7c6:	e005      	b.n	800a7d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a7c8:	4b37      	ldr	r3, [pc, #220]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1ef      	bne.n	800a7b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d160      	bne.n	800a89c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d111      	bne.n	800a804 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a7e0:	4b31      	ldr	r3, [pc, #196]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a7e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	6892      	ldr	r2, [r2, #8]
 800a7f0:	0211      	lsls	r1, r2, #8
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	68d2      	ldr	r2, [r2, #12]
 800a7f6:	0912      	lsrs	r2, r2, #4
 800a7f8:	0452      	lsls	r2, r2, #17
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	492a      	ldr	r1, [pc, #168]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7fe:	4313      	orrs	r3, r2
 800a800:	610b      	str	r3, [r1, #16]
 800a802:	e027      	b.n	800a854 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d112      	bne.n	800a830 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a80a:	4b27      	ldr	r3, [pc, #156]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800a812:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6892      	ldr	r2, [r2, #8]
 800a81a:	0211      	lsls	r1, r2, #8
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	6912      	ldr	r2, [r2, #16]
 800a820:	0852      	lsrs	r2, r2, #1
 800a822:	3a01      	subs	r2, #1
 800a824:	0552      	lsls	r2, r2, #21
 800a826:	430a      	orrs	r2, r1
 800a828:	491f      	ldr	r1, [pc, #124]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	610b      	str	r3, [r1, #16]
 800a82e:	e011      	b.n	800a854 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a830:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a838:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	6892      	ldr	r2, [r2, #8]
 800a840:	0211      	lsls	r1, r2, #8
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	6952      	ldr	r2, [r2, #20]
 800a846:	0852      	lsrs	r2, r2, #1
 800a848:	3a01      	subs	r2, #1
 800a84a:	0652      	lsls	r2, r2, #25
 800a84c:	430a      	orrs	r2, r1
 800a84e:	4916      	ldr	r1, [pc, #88]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a850:	4313      	orrs	r3, r2
 800a852:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a854:	4b14      	ldr	r3, [pc, #80]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a13      	ldr	r2, [pc, #76]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a85a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a85e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a860:	f7fc f9c0 	bl	8006be4 <HAL_GetTick>
 800a864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a866:	e009      	b.n	800a87c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a868:	f7fc f9bc 	bl	8006be4 <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b02      	cmp	r3, #2
 800a874:	d902      	bls.n	800a87c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	73fb      	strb	r3, [r7, #15]
          break;
 800a87a:	e005      	b.n	800a888 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a87c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0ef      	beq.n	800a868 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d106      	bne.n	800a89c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a88e:	4b06      	ldr	r3, [pc, #24]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	4904      	ldr	r1, [pc, #16]	@ (800a8a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40021000 	.word	0x40021000

0800a8ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a8ba:	4b6a      	ldr	r3, [pc, #424]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d018      	beq.n	800a8f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a8c6:	4b67      	ldr	r3, [pc, #412]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f003 0203 	and.w	r2, r3, #3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d10d      	bne.n	800a8f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
       ||
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a8de:	4b61      	ldr	r3, [pc, #388]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	091b      	lsrs	r3, r3, #4
 800a8e4:	f003 0307 	and.w	r3, r3, #7
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
       ||
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d047      	beq.n	800a982 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	73fb      	strb	r3, [r7, #15]
 800a8f6:	e044      	b.n	800a982 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d018      	beq.n	800a932 <RCCEx_PLLSAI2_Config+0x86>
 800a900:	2b03      	cmp	r3, #3
 800a902:	d825      	bhi.n	800a950 <RCCEx_PLLSAI2_Config+0xa4>
 800a904:	2b01      	cmp	r3, #1
 800a906:	d002      	beq.n	800a90e <RCCEx_PLLSAI2_Config+0x62>
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d009      	beq.n	800a920 <RCCEx_PLLSAI2_Config+0x74>
 800a90c:	e020      	b.n	800a950 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a90e:	4b55      	ldr	r3, [pc, #340]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d11d      	bne.n	800a956 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a91e:	e01a      	b.n	800a956 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a920:	4b50      	ldr	r3, [pc, #320]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d116      	bne.n	800a95a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a930:	e013      	b.n	800a95a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a932:	4b4c      	ldr	r3, [pc, #304]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10f      	bne.n	800a95e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a93e:	4b49      	ldr	r3, [pc, #292]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a946:	2b00      	cmp	r3, #0
 800a948:	d109      	bne.n	800a95e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a94e:	e006      	b.n	800a95e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	73fb      	strb	r3, [r7, #15]
      break;
 800a954:	e004      	b.n	800a960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a956:	bf00      	nop
 800a958:	e002      	b.n	800a960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a95a:	bf00      	nop
 800a95c:	e000      	b.n	800a960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a95e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10d      	bne.n	800a982 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a966:	4b3f      	ldr	r3, [pc, #252]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	3b01      	subs	r3, #1
 800a978:	011b      	lsls	r3, r3, #4
 800a97a:	430b      	orrs	r3, r1
 800a97c:	4939      	ldr	r1, [pc, #228]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d167      	bne.n	800aa58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a988:	4b36      	ldr	r3, [pc, #216]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a35      	ldr	r2, [pc, #212]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a98e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a994:	f7fc f926 	bl	8006be4 <HAL_GetTick>
 800a998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a99a:	e009      	b.n	800a9b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a99c:	f7fc f922 	bl	8006be4 <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d902      	bls.n	800a9b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	73fb      	strb	r3, [r7, #15]
        break;
 800a9ae:	e005      	b.n	800a9bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a9b0:	4b2c      	ldr	r3, [pc, #176]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1ef      	bne.n	800a99c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d14a      	bne.n	800aa58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d111      	bne.n	800a9ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a9c8:	4b26      	ldr	r3, [pc, #152]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a9d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	6892      	ldr	r2, [r2, #8]
 800a9d8:	0211      	lsls	r1, r2, #8
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	68d2      	ldr	r2, [r2, #12]
 800a9de:	0912      	lsrs	r2, r2, #4
 800a9e0:	0452      	lsls	r2, r2, #17
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	491f      	ldr	r1, [pc, #124]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	614b      	str	r3, [r1, #20]
 800a9ea:	e011      	b.n	800aa10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a9ec:	4b1d      	ldr	r3, [pc, #116]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a9f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6892      	ldr	r2, [r2, #8]
 800a9fc:	0211      	lsls	r1, r2, #8
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	6912      	ldr	r2, [r2, #16]
 800aa02:	0852      	lsrs	r2, r2, #1
 800aa04:	3a01      	subs	r2, #1
 800aa06:	0652      	lsls	r2, r2, #25
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	4916      	ldr	r1, [pc, #88]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800aa10:	4b14      	ldr	r3, [pc, #80]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a13      	ldr	r2, [pc, #76]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa1c:	f7fc f8e2 	bl	8006be4 <HAL_GetTick>
 800aa20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800aa22:	e009      	b.n	800aa38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800aa24:	f7fc f8de 	bl	8006be4 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d902      	bls.n	800aa38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	73fb      	strb	r3, [r7, #15]
          break;
 800aa36:	e005      	b.n	800aa44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800aa38:	4b0a      	ldr	r3, [pc, #40]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0ef      	beq.n	800aa24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800aa4a:	4b06      	ldr	r3, [pc, #24]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa4c:	695a      	ldr	r2, [r3, #20]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	4904      	ldr	r1, [pc, #16]	@ (800aa64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	40021000 	.word	0x40021000

0800aa68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e095      	b.n	800aba6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d108      	bne.n	800aa94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa8a:	d009      	beq.n	800aaa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	61da      	str	r2, [r3, #28]
 800aa92:	e005      	b.n	800aaa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7f8 feb2 	bl	8003824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aad6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aae0:	d902      	bls.n	800aae8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	e002      	b.n	800aaee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800aaf6:	d007      	beq.n	800ab08 <HAL_SPI_Init+0xa0>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ab00:	d002      	beq.n	800ab08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab36:	431a      	orrs	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab40:	431a      	orrs	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab4a:	ea42 0103 	orr.w	r1, r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	0c1b      	lsrs	r3, r3, #16
 800ab64:	f003 0204 	and.w	r2, r3, #4
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	f003 0310 	and.w	r3, r3, #16
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab76:	f003 0308 	and.w	r3, r3, #8
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ab84:	ea42 0103 	orr.w	r1, r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d102      	bne.n	800abcc <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	73fb      	strb	r3, [r7, #15]
 800abca:	e061      	b.n	800ac90 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d106      	bne.n	800abe6 <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7f8 fecf 	bl	8003984 <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2202      	movs	r2, #2
 800abea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0220 	bic.w	r2, r2, #32
 800abfc:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f240 129f 	movw	r2, #415	@ 0x19f
 800ac06:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0e:	f023 0102 	bic.w	r1, r3, #2
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d112      	bne.n	800ac4c <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 800ac26:	4b1d      	ldr	r3, [pc, #116]	@ (800ac9c <HAL_SWPMI_Init+0xec>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a1d      	ldr	r2, [pc, #116]	@ (800aca0 <HAL_SWPMI_Init+0xf0>)
 800ac2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac30:	0d1b      	lsrs	r3, r3, #20
 800ac32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ac36:	fb02 f303 	mul.w	r3, r2, r3
 800ac3a:	3396      	adds	r3, #150	@ 0x96
 800ac3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ac3e:	e002      	b.n	800ac46 <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1f9      	bne.n	800ac40 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	6892      	ldr	r2, [r2, #8]
 800ac54:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f023 010f 	bic.w	r1, r3, #15
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68da      	ldr	r2, [r3, #12]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	639a      	str	r2, [r3, #56]	@ 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f042 0220 	orr.w	r2, r2, #32
 800ac8e:	601a      	str	r2, [r3, #0]
  }

  return status;
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000000 	.word	0x20000000
 800aca0:	431bde83 	.word	0x431bde83

0800aca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e049      	b.n	800ad4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f8 fefe 	bl	8003acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3304      	adds	r3, #4
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f000 fb1a 	bl	800b31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e049      	b.n	800adf8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f841 	bl	800ae00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2202      	movs	r2, #2
 800ad82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	4619      	mov	r1, r3
 800ad90:	4610      	mov	r0, r2
 800ad92:	f000 fac3 	bl	800b31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e097      	b.n	800af58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d106      	bne.n	800ae42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f8 fe01 	bl	8003a44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2202      	movs	r2, #2
 800ae46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	6812      	ldr	r2, [r2, #0]
 800ae54:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ae58:	f023 0307 	bic.w	r3, r3, #7
 800ae5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f000 fa57 	bl	800b31c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae96:	f023 0303 	bic.w	r3, r3, #3
 800ae9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	021b      	lsls	r3, r3, #8
 800aea6:	4313      	orrs	r3, r2
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800aeb4:	f023 030c 	bic.w	r3, r3, #12
 800aeb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aec0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68da      	ldr	r2, [r3, #12]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	021b      	lsls	r3, r3, #8
 800aed0:	4313      	orrs	r3, r2
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	011a      	lsls	r2, r3, #4
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	031b      	lsls	r3, r3, #12
 800aee4:	4313      	orrs	r3, r2
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800aef2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800aefa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	4313      	orrs	r3, r2
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e0ff      	b.n	800b17e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b14      	cmp	r3, #20
 800af8a:	f200 80f0 	bhi.w	800b16e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af8e:	a201      	add	r2, pc, #4	@ (adr r2, 800af94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af94:	0800afe9 	.word	0x0800afe9
 800af98:	0800b16f 	.word	0x0800b16f
 800af9c:	0800b16f 	.word	0x0800b16f
 800afa0:	0800b16f 	.word	0x0800b16f
 800afa4:	0800b029 	.word	0x0800b029
 800afa8:	0800b16f 	.word	0x0800b16f
 800afac:	0800b16f 	.word	0x0800b16f
 800afb0:	0800b16f 	.word	0x0800b16f
 800afb4:	0800b06b 	.word	0x0800b06b
 800afb8:	0800b16f 	.word	0x0800b16f
 800afbc:	0800b16f 	.word	0x0800b16f
 800afc0:	0800b16f 	.word	0x0800b16f
 800afc4:	0800b0ab 	.word	0x0800b0ab
 800afc8:	0800b16f 	.word	0x0800b16f
 800afcc:	0800b16f 	.word	0x0800b16f
 800afd0:	0800b16f 	.word	0x0800b16f
 800afd4:	0800b0ed 	.word	0x0800b0ed
 800afd8:	0800b16f 	.word	0x0800b16f
 800afdc:	0800b16f 	.word	0x0800b16f
 800afe0:	0800b16f 	.word	0x0800b16f
 800afe4:	0800b12d 	.word	0x0800b12d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fa2e 	bl	800b450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	699a      	ldr	r2, [r3, #24]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f042 0208 	orr.w	r2, r2, #8
 800b002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	699a      	ldr	r2, [r3, #24]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0204 	bic.w	r2, r2, #4
 800b012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6999      	ldr	r1, [r3, #24]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	619a      	str	r2, [r3, #24]
      break;
 800b026:	e0a5      	b.n	800b174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fa9e 	bl	800b570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699a      	ldr	r2, [r3, #24]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699a      	ldr	r2, [r3, #24]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6999      	ldr	r1, [r3, #24]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	021a      	lsls	r2, r3, #8
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	619a      	str	r2, [r3, #24]
      break;
 800b068:	e084      	b.n	800b174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	4618      	mov	r0, r3
 800b072:	f000 fb07 	bl	800b684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	69da      	ldr	r2, [r3, #28]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f042 0208 	orr.w	r2, r2, #8
 800b084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	69da      	ldr	r2, [r3, #28]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f022 0204 	bic.w	r2, r2, #4
 800b094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	69d9      	ldr	r1, [r3, #28]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	691a      	ldr	r2, [r3, #16]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	61da      	str	r2, [r3, #28]
      break;
 800b0a8:	e064      	b.n	800b174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fb6f 	bl	800b794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	69da      	ldr	r2, [r3, #28]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	69da      	ldr	r2, [r3, #28]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69d9      	ldr	r1, [r3, #28]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	021a      	lsls	r2, r3, #8
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	61da      	str	r2, [r3, #28]
      break;
 800b0ea:	e043      	b.n	800b174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68b9      	ldr	r1, [r7, #8]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fbb8 	bl	800b868 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f042 0208 	orr.w	r2, r2, #8
 800b106:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 0204 	bic.w	r2, r2, #4
 800b116:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	691a      	ldr	r2, [r3, #16]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b12a:	e023      	b.n	800b174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68b9      	ldr	r1, [r7, #8]
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fbfc 	bl	800b930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b146:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b156:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	021a      	lsls	r2, r3, #8
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	430a      	orrs	r2, r1
 800b16a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b16c:	e002      	b.n	800b174 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	75fb      	strb	r3, [r7, #23]
      break;
 800b172:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop

0800b188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e0b6      	b.n	800b312 <HAL_TIM_ConfigClockSource+0x18a>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b1c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1e0:	d03e      	beq.n	800b260 <HAL_TIM_ConfigClockSource+0xd8>
 800b1e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1e6:	f200 8087 	bhi.w	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b1ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1ee:	f000 8086 	beq.w	800b2fe <HAL_TIM_ConfigClockSource+0x176>
 800b1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1f6:	d87f      	bhi.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b1f8:	2b70      	cmp	r3, #112	@ 0x70
 800b1fa:	d01a      	beq.n	800b232 <HAL_TIM_ConfigClockSource+0xaa>
 800b1fc:	2b70      	cmp	r3, #112	@ 0x70
 800b1fe:	d87b      	bhi.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b200:	2b60      	cmp	r3, #96	@ 0x60
 800b202:	d050      	beq.n	800b2a6 <HAL_TIM_ConfigClockSource+0x11e>
 800b204:	2b60      	cmp	r3, #96	@ 0x60
 800b206:	d877      	bhi.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b208:	2b50      	cmp	r3, #80	@ 0x50
 800b20a:	d03c      	beq.n	800b286 <HAL_TIM_ConfigClockSource+0xfe>
 800b20c:	2b50      	cmp	r3, #80	@ 0x50
 800b20e:	d873      	bhi.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b210:	2b40      	cmp	r3, #64	@ 0x40
 800b212:	d058      	beq.n	800b2c6 <HAL_TIM_ConfigClockSource+0x13e>
 800b214:	2b40      	cmp	r3, #64	@ 0x40
 800b216:	d86f      	bhi.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b218:	2b30      	cmp	r3, #48	@ 0x30
 800b21a:	d064      	beq.n	800b2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800b21c:	2b30      	cmp	r3, #48	@ 0x30
 800b21e:	d86b      	bhi.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b220:	2b20      	cmp	r3, #32
 800b222:	d060      	beq.n	800b2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800b224:	2b20      	cmp	r3, #32
 800b226:	d867      	bhi.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d05c      	beq.n	800b2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800b22c:	2b10      	cmp	r3, #16
 800b22e:	d05a      	beq.n	800b2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800b230:	e062      	b.n	800b2f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b242:	f000 fc55 	bl	800baf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	609a      	str	r2, [r3, #8]
      break;
 800b25e:	e04f      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b270:	f000 fc3e 	bl	800baf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689a      	ldr	r2, [r3, #8]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b282:	609a      	str	r2, [r3, #8]
      break;
 800b284:	e03c      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b292:	461a      	mov	r2, r3
 800b294:	f000 fbb2 	bl	800b9fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2150      	movs	r1, #80	@ 0x50
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fc0b 	bl	800baba <TIM_ITRx_SetConfig>
      break;
 800b2a4:	e02c      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	f000 fbd1 	bl	800ba5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2160      	movs	r1, #96	@ 0x60
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 fbfb 	bl	800baba <TIM_ITRx_SetConfig>
      break;
 800b2c4:	e01c      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f000 fb92 	bl	800b9fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2140      	movs	r1, #64	@ 0x40
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 fbeb 	bl	800baba <TIM_ITRx_SetConfig>
      break;
 800b2e4:	e00c      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f000 fbe2 	bl	800baba <TIM_ITRx_SetConfig>
      break;
 800b2f6:	e003      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b2fc:	e000      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b2fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a40      	ldr	r2, [pc, #256]	@ (800b430 <TIM_Base_SetConfig+0x114>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d013      	beq.n	800b35c <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b33a:	d00f      	beq.n	800b35c <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a3d      	ldr	r2, [pc, #244]	@ (800b434 <TIM_Base_SetConfig+0x118>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d00b      	beq.n	800b35c <TIM_Base_SetConfig+0x40>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a3c      	ldr	r2, [pc, #240]	@ (800b438 <TIM_Base_SetConfig+0x11c>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d007      	beq.n	800b35c <TIM_Base_SetConfig+0x40>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a3b      	ldr	r2, [pc, #236]	@ (800b43c <TIM_Base_SetConfig+0x120>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d003      	beq.n	800b35c <TIM_Base_SetConfig+0x40>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a3a      	ldr	r2, [pc, #232]	@ (800b440 <TIM_Base_SetConfig+0x124>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d108      	bne.n	800b36e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a2f      	ldr	r2, [pc, #188]	@ (800b430 <TIM_Base_SetConfig+0x114>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d01f      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b37c:	d01b      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a2c      	ldr	r2, [pc, #176]	@ (800b434 <TIM_Base_SetConfig+0x118>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d017      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a2b      	ldr	r2, [pc, #172]	@ (800b438 <TIM_Base_SetConfig+0x11c>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d013      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a2a      	ldr	r2, [pc, #168]	@ (800b43c <TIM_Base_SetConfig+0x120>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00f      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a29      	ldr	r2, [pc, #164]	@ (800b440 <TIM_Base_SetConfig+0x124>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00b      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a28      	ldr	r2, [pc, #160]	@ (800b444 <TIM_Base_SetConfig+0x128>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d007      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a27      	ldr	r2, [pc, #156]	@ (800b448 <TIM_Base_SetConfig+0x12c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d003      	beq.n	800b3b6 <TIM_Base_SetConfig+0x9a>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a26      	ldr	r2, [pc, #152]	@ (800b44c <TIM_Base_SetConfig+0x130>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d108      	bne.n	800b3c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a10      	ldr	r2, [pc, #64]	@ (800b430 <TIM_Base_SetConfig+0x114>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d00f      	beq.n	800b414 <TIM_Base_SetConfig+0xf8>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a12      	ldr	r2, [pc, #72]	@ (800b440 <TIM_Base_SetConfig+0x124>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d00b      	beq.n	800b414 <TIM_Base_SetConfig+0xf8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a11      	ldr	r2, [pc, #68]	@ (800b444 <TIM_Base_SetConfig+0x128>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d007      	beq.n	800b414 <TIM_Base_SetConfig+0xf8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a10      	ldr	r2, [pc, #64]	@ (800b448 <TIM_Base_SetConfig+0x12c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d003      	beq.n	800b414 <TIM_Base_SetConfig+0xf8>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a0f      	ldr	r2, [pc, #60]	@ (800b44c <TIM_Base_SetConfig+0x130>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d103      	bne.n	800b41c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	691a      	ldr	r2, [r3, #16]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	615a      	str	r2, [r3, #20]
}
 800b422:	bf00      	nop
 800b424:	3714      	adds	r7, #20
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	40012c00 	.word	0x40012c00
 800b434:	40000400 	.word	0x40000400
 800b438:	40000800 	.word	0x40000800
 800b43c:	40000c00 	.word	0x40000c00
 800b440:	40013400 	.word	0x40013400
 800b444:	40014000 	.word	0x40014000
 800b448:	40014400 	.word	0x40014400
 800b44c:	40014800 	.word	0x40014800

0800b450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b450:	b480      	push	{r7}
 800b452:	b087      	sub	sp, #28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	f023 0201 	bic.w	r2, r3, #1
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b47e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f023 0303 	bic.w	r3, r3, #3
 800b48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4313      	orrs	r3, r2
 800b494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f023 0302 	bic.w	r3, r3, #2
 800b49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a2c      	ldr	r2, [pc, #176]	@ (800b55c <TIM_OC1_SetConfig+0x10c>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00f      	beq.n	800b4d0 <TIM_OC1_SetConfig+0x80>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a2b      	ldr	r2, [pc, #172]	@ (800b560 <TIM_OC1_SetConfig+0x110>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00b      	beq.n	800b4d0 <TIM_OC1_SetConfig+0x80>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b564 <TIM_OC1_SetConfig+0x114>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d007      	beq.n	800b4d0 <TIM_OC1_SetConfig+0x80>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a29      	ldr	r2, [pc, #164]	@ (800b568 <TIM_OC1_SetConfig+0x118>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d003      	beq.n	800b4d0 <TIM_OC1_SetConfig+0x80>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a28      	ldr	r2, [pc, #160]	@ (800b56c <TIM_OC1_SetConfig+0x11c>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d10c      	bne.n	800b4ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f023 0308 	bic.w	r3, r3, #8
 800b4d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	697a      	ldr	r2, [r7, #20]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f023 0304 	bic.w	r3, r3, #4
 800b4e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b55c <TIM_OC1_SetConfig+0x10c>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d00f      	beq.n	800b512 <TIM_OC1_SetConfig+0xc2>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a1a      	ldr	r2, [pc, #104]	@ (800b560 <TIM_OC1_SetConfig+0x110>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d00b      	beq.n	800b512 <TIM_OC1_SetConfig+0xc2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a19      	ldr	r2, [pc, #100]	@ (800b564 <TIM_OC1_SetConfig+0x114>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d007      	beq.n	800b512 <TIM_OC1_SetConfig+0xc2>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a18      	ldr	r2, [pc, #96]	@ (800b568 <TIM_OC1_SetConfig+0x118>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d003      	beq.n	800b512 <TIM_OC1_SetConfig+0xc2>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a17      	ldr	r2, [pc, #92]	@ (800b56c <TIM_OC1_SetConfig+0x11c>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d111      	bne.n	800b536 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4313      	orrs	r3, r2
 800b52a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	621a      	str	r2, [r3, #32]
}
 800b550:	bf00      	nop
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	40012c00 	.word	0x40012c00
 800b560:	40013400 	.word	0x40013400
 800b564:	40014000 	.word	0x40014000
 800b568:	40014400 	.word	0x40014400
 800b56c:	40014800 	.word	0x40014800

0800b570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	f023 0210 	bic.w	r2, r3, #16
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b59e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	021b      	lsls	r3, r3, #8
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f023 0320 	bic.w	r3, r3, #32
 800b5be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a28      	ldr	r2, [pc, #160]	@ (800b670 <TIM_OC2_SetConfig+0x100>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_OC2_SetConfig+0x6c>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a27      	ldr	r2, [pc, #156]	@ (800b674 <TIM_OC2_SetConfig+0x104>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d10d      	bne.n	800b5f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	011b      	lsls	r3, r3, #4
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a1d      	ldr	r2, [pc, #116]	@ (800b670 <TIM_OC2_SetConfig+0x100>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00f      	beq.n	800b620 <TIM_OC2_SetConfig+0xb0>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a1c      	ldr	r2, [pc, #112]	@ (800b674 <TIM_OC2_SetConfig+0x104>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d00b      	beq.n	800b620 <TIM_OC2_SetConfig+0xb0>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a1b      	ldr	r2, [pc, #108]	@ (800b678 <TIM_OC2_SetConfig+0x108>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d007      	beq.n	800b620 <TIM_OC2_SetConfig+0xb0>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a1a      	ldr	r2, [pc, #104]	@ (800b67c <TIM_OC2_SetConfig+0x10c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d003      	beq.n	800b620 <TIM_OC2_SetConfig+0xb0>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a19      	ldr	r2, [pc, #100]	@ (800b680 <TIM_OC2_SetConfig+0x110>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d113      	bne.n	800b648 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b62e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	4313      	orrs	r3, r2
 800b63a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	4313      	orrs	r3, r2
 800b646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	40012c00 	.word	0x40012c00
 800b674:	40013400 	.word	0x40013400
 800b678:	40014000 	.word	0x40014000
 800b67c:	40014400 	.word	0x40014400
 800b680:	40014800 	.word	0x40014800

0800b684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f023 0303 	bic.w	r3, r3, #3
 800b6be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b6d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	021b      	lsls	r3, r3, #8
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a27      	ldr	r2, [pc, #156]	@ (800b780 <TIM_OC3_SetConfig+0xfc>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d003      	beq.n	800b6ee <TIM_OC3_SetConfig+0x6a>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a26      	ldr	r2, [pc, #152]	@ (800b784 <TIM_OC3_SetConfig+0x100>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d10d      	bne.n	800b70a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a1c      	ldr	r2, [pc, #112]	@ (800b780 <TIM_OC3_SetConfig+0xfc>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d00f      	beq.n	800b732 <TIM_OC3_SetConfig+0xae>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a1b      	ldr	r2, [pc, #108]	@ (800b784 <TIM_OC3_SetConfig+0x100>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00b      	beq.n	800b732 <TIM_OC3_SetConfig+0xae>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a1a      	ldr	r2, [pc, #104]	@ (800b788 <TIM_OC3_SetConfig+0x104>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d007      	beq.n	800b732 <TIM_OC3_SetConfig+0xae>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a19      	ldr	r2, [pc, #100]	@ (800b78c <TIM_OC3_SetConfig+0x108>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d003      	beq.n	800b732 <TIM_OC3_SetConfig+0xae>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a18      	ldr	r2, [pc, #96]	@ (800b790 <TIM_OC3_SetConfig+0x10c>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d113      	bne.n	800b75a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	011b      	lsls	r3, r3, #4
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	4313      	orrs	r3, r2
 800b758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	621a      	str	r2, [r3, #32]
}
 800b774:	bf00      	nop
 800b776:	371c      	adds	r7, #28
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	40012c00 	.word	0x40012c00
 800b784:	40013400 	.word	0x40013400
 800b788:	40014000 	.word	0x40014000
 800b78c:	40014400 	.word	0x40014400
 800b790:	40014800 	.word	0x40014800

0800b794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b794:	b480      	push	{r7}
 800b796:	b087      	sub	sp, #28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	021b      	lsls	r3, r3, #8
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	031b      	lsls	r3, r3, #12
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a18      	ldr	r2, [pc, #96]	@ (800b854 <TIM_OC4_SetConfig+0xc0>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d00f      	beq.n	800b818 <TIM_OC4_SetConfig+0x84>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a17      	ldr	r2, [pc, #92]	@ (800b858 <TIM_OC4_SetConfig+0xc4>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d00b      	beq.n	800b818 <TIM_OC4_SetConfig+0x84>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a16      	ldr	r2, [pc, #88]	@ (800b85c <TIM_OC4_SetConfig+0xc8>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d007      	beq.n	800b818 <TIM_OC4_SetConfig+0x84>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a15      	ldr	r2, [pc, #84]	@ (800b860 <TIM_OC4_SetConfig+0xcc>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d003      	beq.n	800b818 <TIM_OC4_SetConfig+0x84>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a14      	ldr	r2, [pc, #80]	@ (800b864 <TIM_OC4_SetConfig+0xd0>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d109      	bne.n	800b82c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b81e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	019b      	lsls	r3, r3, #6
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4313      	orrs	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	621a      	str	r2, [r3, #32]
}
 800b846:	bf00      	nop
 800b848:	371c      	adds	r7, #28
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	40012c00 	.word	0x40012c00
 800b858:	40013400 	.word	0x40013400
 800b85c:	40014000 	.word	0x40014000
 800b860:	40014400 	.word	0x40014400
 800b864:	40014800 	.word	0x40014800

0800b868 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b8ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	041b      	lsls	r3, r3, #16
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a17      	ldr	r2, [pc, #92]	@ (800b91c <TIM_OC5_SetConfig+0xb4>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d00f      	beq.n	800b8e2 <TIM_OC5_SetConfig+0x7a>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a16      	ldr	r2, [pc, #88]	@ (800b920 <TIM_OC5_SetConfig+0xb8>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00b      	beq.n	800b8e2 <TIM_OC5_SetConfig+0x7a>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a15      	ldr	r2, [pc, #84]	@ (800b924 <TIM_OC5_SetConfig+0xbc>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d007      	beq.n	800b8e2 <TIM_OC5_SetConfig+0x7a>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a14      	ldr	r2, [pc, #80]	@ (800b928 <TIM_OC5_SetConfig+0xc0>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d003      	beq.n	800b8e2 <TIM_OC5_SetConfig+0x7a>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a13      	ldr	r2, [pc, #76]	@ (800b92c <TIM_OC5_SetConfig+0xc4>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d109      	bne.n	800b8f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	021b      	lsls	r3, r3, #8
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	621a      	str	r2, [r3, #32]
}
 800b910:	bf00      	nop
 800b912:	371c      	adds	r7, #28
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	40012c00 	.word	0x40012c00
 800b920:	40013400 	.word	0x40013400
 800b924:	40014000 	.word	0x40014000
 800b928:	40014400 	.word	0x40014400
 800b92c:	40014800 	.word	0x40014800

0800b930 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b930:	b480      	push	{r7}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b95e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	021b      	lsls	r3, r3, #8
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	051b      	lsls	r3, r3, #20
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	4313      	orrs	r3, r2
 800b982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a18      	ldr	r2, [pc, #96]	@ (800b9e8 <TIM_OC6_SetConfig+0xb8>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d00f      	beq.n	800b9ac <TIM_OC6_SetConfig+0x7c>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a17      	ldr	r2, [pc, #92]	@ (800b9ec <TIM_OC6_SetConfig+0xbc>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00b      	beq.n	800b9ac <TIM_OC6_SetConfig+0x7c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a16      	ldr	r2, [pc, #88]	@ (800b9f0 <TIM_OC6_SetConfig+0xc0>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d007      	beq.n	800b9ac <TIM_OC6_SetConfig+0x7c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a15      	ldr	r2, [pc, #84]	@ (800b9f4 <TIM_OC6_SetConfig+0xc4>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d003      	beq.n	800b9ac <TIM_OC6_SetConfig+0x7c>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a14      	ldr	r2, [pc, #80]	@ (800b9f8 <TIM_OC6_SetConfig+0xc8>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d109      	bne.n	800b9c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b9b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	029b      	lsls	r3, r3, #10
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	621a      	str	r2, [r3, #32]
}
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	40012c00 	.word	0x40012c00
 800b9ec:	40013400 	.word	0x40013400
 800b9f0:	40014000 	.word	0x40014000
 800b9f4:	40014400 	.word	0x40014400
 800b9f8:	40014800 	.word	0x40014800

0800b9fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	f023 0201 	bic.w	r2, r3, #1
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ba26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	011b      	lsls	r3, r3, #4
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f023 030a 	bic.w	r3, r3, #10
 800ba38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	621a      	str	r2, [r3, #32]
}
 800ba4e:	bf00      	nop
 800ba50:	371c      	adds	r7, #28
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b087      	sub	sp, #28
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	60b9      	str	r1, [r7, #8]
 800ba64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f023 0210 	bic.w	r2, r3, #16
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
 800ba7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ba84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	031b      	lsls	r3, r3, #12
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ba96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	621a      	str	r2, [r3, #32]
}
 800baae:	bf00      	nop
 800bab0:	371c      	adds	r7, #28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800baba:	b480      	push	{r7}
 800babc:	b085      	sub	sp, #20
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f043 0307 	orr.w	r3, r3, #7
 800badc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	609a      	str	r2, [r3, #8]
}
 800bae4:	bf00      	nop
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	021a      	lsls	r2, r3, #8
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	431a      	orrs	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	609a      	str	r2, [r3, #8]
}
 800bb24:	bf00      	nop
 800bb26:	371c      	adds	r7, #28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d101      	bne.n	800bb48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb44:	2302      	movs	r3, #2
 800bb46:	e068      	b.n	800bc1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2202      	movs	r2, #2
 800bb54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a2e      	ldr	r2, [pc, #184]	@ (800bc28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d004      	beq.n	800bb7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a2d      	ldr	r2, [pc, #180]	@ (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d108      	bne.n	800bb8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bb82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a1e      	ldr	r2, [pc, #120]	@ (800bc28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d01d      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbba:	d018      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a1b      	ldr	r2, [pc, #108]	@ (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d013      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a1a      	ldr	r2, [pc, #104]	@ (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d00e      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a18      	ldr	r2, [pc, #96]	@ (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d009      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a13      	ldr	r2, [pc, #76]	@ (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d004      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a14      	ldr	r2, [pc, #80]	@ (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d10c      	bne.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	40012c00 	.word	0x40012c00
 800bc2c:	40013400 	.word	0x40013400
 800bc30:	40000400 	.word	0x40000400
 800bc34:	40000800 	.word	0x40000800
 800bc38:	40000c00 	.word	0x40000c00
 800bc3c:	40014000 	.word	0x40014000

0800bc40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d101      	bne.n	800bc5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e065      	b.n	800bd28 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	695b      	ldr	r3, [r3, #20]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	041b      	lsls	r3, r3, #16
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a16      	ldr	r2, [pc, #88]	@ (800bd34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d004      	beq.n	800bcea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a14      	ldr	r2, [pc, #80]	@ (800bd38 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d115      	bne.n	800bd16 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf4:	051b      	lsls	r3, r3, #20
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	40012c00 	.word	0x40012c00
 800bd38:	40013400 	.word	0x40013400

0800bd3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e040      	b.n	800bdd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d106      	bne.n	800bd64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7f7 ff8c 	bl	8003c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2224      	movs	r2, #36	@ 0x24
 800bd68:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f022 0201 	bic.w	r2, r2, #1
 800bd78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fbe8 	bl	800c550 <UART_SetConfig>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d101      	bne.n	800bd8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e022      	b.n	800bdd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d002      	beq.n	800bd98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fe94 	bl	800cac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bda6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689a      	ldr	r2, [r3, #8]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bdb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 ff1b 	bl	800cc04 <UART_CheckIdleState>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b08b      	sub	sp, #44	@ 0x2c
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d156      	bne.n	800be9c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <HAL_UART_Transmit_IT+0x22>
 800bdf4:	88fb      	ldrh	r3, [r7, #6]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e04f      	b.n	800be9e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800be04:	2b01      	cmp	r3, #1
 800be06:	d101      	bne.n	800be0c <HAL_UART_Transmit_IT+0x34>
 800be08:	2302      	movs	r3, #2
 800be0a:	e048      	b.n	800be9e <HAL_UART_Transmit_IT+0xc6>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->pTxBuffPtr  = pData;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	88fa      	ldrh	r2, [r7, #6]
 800be1e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	88fa      	ldrh	r2, [r7, #6]
 800be26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	669a      	str	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2221      	movs	r2, #33	@ 0x21
 800be3c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be46:	d107      	bne.n	800be58 <HAL_UART_Transmit_IT+0x80>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d103      	bne.n	800be58 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4a16      	ldr	r2, [pc, #88]	@ (800beac <HAL_UART_Transmit_IT+0xd4>)
 800be54:	669a      	str	r2, [r3, #104]	@ 0x68
 800be56:	e002      	b.n	800be5e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	4a15      	ldr	r2, [pc, #84]	@ (800beb0 <HAL_UART_Transmit_IT+0xd8>)
 800be5c:	669a      	str	r2, [r3, #104]	@ 0x68
    }

    __HAL_UNLOCK(huart);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	613b      	str	r3, [r7, #16]
   return(result);
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be84:	623b      	str	r3, [r7, #32]
 800be86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	69f9      	ldr	r1, [r7, #28]
 800be8a:	6a3a      	ldr	r2, [r7, #32]
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	61bb      	str	r3, [r7, #24]
   return(result);
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e6      	bne.n	800be66 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	e000      	b.n	800be9e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800be9c:	2302      	movs	r3, #2
  }
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	372c      	adds	r7, #44	@ 0x2c
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	0800d15d 	.word	0x0800d15d
 800beb0:	0800d0a7 	.word	0x0800d0a7

0800beb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	@ 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	4613      	mov	r3, r2
 800bec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bec6:	2b20      	cmp	r3, #32
 800bec8:	d142      	bne.n	800bf50 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <HAL_UART_Receive_IT+0x22>
 800bed0:	88fb      	ldrh	r3, [r7, #6]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e03b      	b.n	800bf52 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d101      	bne.n	800bee8 <HAL_UART_Receive_IT+0x34>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e034      	b.n	800bf52 <HAL_UART_Receive_IT+0x9e>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a18      	ldr	r2, [pc, #96]	@ (800bf5c <HAL_UART_Receive_IT+0xa8>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d01f      	beq.n	800bf40 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d018      	beq.n	800bf40 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf22:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2c:	623b      	str	r3, [r7, #32]
 800bf2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	69f9      	ldr	r1, [r7, #28]
 800bf32:	6a3a      	ldr	r2, [r7, #32]
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e6      	bne.n	800bf0e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bf40:	88fb      	ldrh	r3, [r7, #6]
 800bf42:	461a      	mov	r2, r3
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f000 ff6a 	bl	800ce20 <UART_Start_Receive_IT>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	e000      	b.n	800bf52 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800bf50:	2302      	movs	r3, #2
  }
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3728      	adds	r7, #40	@ 0x28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	40008000 	.word	0x40008000

0800bf60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b0ba      	sub	sp, #232	@ 0xe8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bf8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bf8e:	4013      	ands	r3, r2
 800bf90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bf94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d115      	bne.n	800bfc8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bf9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa0:	f003 0320 	and.w	r3, r3, #32
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00f      	beq.n	800bfc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bfa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfac:	f003 0320 	and.w	r3, r3, #32
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d009      	beq.n	800bfc8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 82a6 	beq.w	800c50a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	4798      	blx	r3
      }
      return;
 800bfc6:	e2a0      	b.n	800c50a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800bfc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 8117 	beq.w	800c200 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bfd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d106      	bne.n	800bfec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bfde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bfe2:	4b85      	ldr	r3, [pc, #532]	@ (800c1f8 <HAL_UART_IRQHandler+0x298>)
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 810a 	beq.w	800c200 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d011      	beq.n	800c01c <HAL_UART_IRQHandler+0xbc>
 800bff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00b      	beq.n	800c01c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2201      	movs	r2, #1
 800c00a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c012:	f043 0201 	orr.w	r2, r3, #1
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c020:	f003 0302 	and.w	r3, r3, #2
 800c024:	2b00      	cmp	r3, #0
 800c026:	d011      	beq.n	800c04c <HAL_UART_IRQHandler+0xec>
 800c028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00b      	beq.n	800c04c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2202      	movs	r2, #2
 800c03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c042:	f043 0204 	orr.w	r2, r3, #4
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c050:	f003 0304 	and.w	r3, r3, #4
 800c054:	2b00      	cmp	r3, #0
 800c056:	d011      	beq.n	800c07c <HAL_UART_IRQHandler+0x11c>
 800c058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00b      	beq.n	800c07c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2204      	movs	r2, #4
 800c06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c072:	f043 0202 	orr.w	r2, r3, #2
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c080:	f003 0308 	and.w	r3, r3, #8
 800c084:	2b00      	cmp	r3, #0
 800c086:	d017      	beq.n	800c0b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c08c:	f003 0320 	and.w	r3, r3, #32
 800c090:	2b00      	cmp	r3, #0
 800c092:	d105      	bne.n	800c0a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c098:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00b      	beq.n	800c0b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2208      	movs	r2, #8
 800c0a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0ae:	f043 0208 	orr.w	r2, r3, #8
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d012      	beq.n	800c0ea <HAL_UART_IRQHandler+0x18a>
 800c0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00c      	beq.n	800c0ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e0:	f043 0220 	orr.w	r2, r3, #32
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 820c 	beq.w	800c50e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0fa:	f003 0320 	and.w	r3, r3, #32
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00d      	beq.n	800c11e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c106:	f003 0320 	and.w	r3, r3, #32
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d007      	beq.n	800c11e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c124:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c132:	2b40      	cmp	r3, #64	@ 0x40
 800c134:	d005      	beq.n	800c142 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c13a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d04f      	beq.n	800c1e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 ff36 	bl	800cfb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c152:	2b40      	cmp	r3, #64	@ 0x40
 800c154:	d141      	bne.n	800c1da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3308      	adds	r3, #8
 800c15c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c16c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3308      	adds	r3, #8
 800c17e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c182:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c18e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c192:	e841 2300 	strex	r3, r2, [r1]
 800c196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c19a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1d9      	bne.n	800c156 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d013      	beq.n	800c1d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ae:	4a13      	ldr	r2, [pc, #76]	@ (800c1fc <HAL_UART_IRQHandler+0x29c>)
 800c1b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fb fffb 	bl	80081b2 <HAL_DMA_Abort_IT>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d017      	beq.n	800c1f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d0:	e00f      	b.n	800c1f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f9a6 	bl	800c524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d8:	e00b      	b.n	800c1f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f9a2 	bl	800c524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e0:	e007      	b.n	800c1f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f99e 	bl	800c524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
    return;
 800c1f0:	e18d      	b.n	800c50e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1f2:	bf00      	nop
    return;
 800c1f4:	e18b      	b.n	800c50e <HAL_UART_IRQHandler+0x5ae>
 800c1f6:	bf00      	nop
 800c1f8:	04000120 	.word	0x04000120
 800c1fc:	0800d07b 	.word	0x0800d07b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c204:	2b01      	cmp	r3, #1
 800c206:	f040 8146 	bne.w	800c496 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c20e:	f003 0310 	and.w	r3, r3, #16
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 813f 	beq.w	800c496 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c21c:	f003 0310 	and.w	r3, r3, #16
 800c220:	2b00      	cmp	r3, #0
 800c222:	f000 8138 	beq.w	800c496 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2210      	movs	r2, #16
 800c22c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c238:	2b40      	cmp	r3, #64	@ 0x40
 800c23a:	f040 80b4 	bne.w	800c3a6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c24a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 815f 	beq.w	800c512 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c25a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c25e:	429a      	cmp	r2, r3
 800c260:	f080 8157 	bcs.w	800c512 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c26a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f003 0320 	and.w	r3, r3, #32
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f040 8085 	bne.w	800c38a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c288:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c294:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c29c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c2aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c2ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c2b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c2c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1da      	bne.n	800c280 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	3308      	adds	r3, #8
 800c2d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2d4:	e853 3f00 	ldrex	r3, [r3]
 800c2d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c2da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2dc:	f023 0301 	bic.w	r3, r3, #1
 800c2e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c2ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c2f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c2f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c2fa:	e841 2300 	strex	r3, r2, [r1]
 800c2fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1e1      	bne.n	800c2ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3308      	adds	r3, #8
 800c30c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c310:	e853 3f00 	ldrex	r3, [r3]
 800c314:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c31c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3308      	adds	r3, #8
 800c326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c32a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c32c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c330:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e3      	bne.n	800c306 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c35a:	f023 0310 	bic.w	r3, r3, #16
 800c35e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c36c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c36e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c372:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c37a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e4      	bne.n	800c34a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c384:	4618      	mov	r0, r3
 800c386:	f7fb fed6 	bl	8008136 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c396:	b29b      	uxth	r3, r3
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f8ca 	bl	800c538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3a4:	e0b5      	b.n	800c512 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 80a7 	beq.w	800c516 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c3c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 80a2 	beq.w	800c516 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3da:	e853 3f00 	ldrex	r3, [r3]
 800c3de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c3f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3fc:	e841 2300 	strex	r3, r2, [r1]
 800c400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e4      	bne.n	800c3d2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3308      	adds	r3, #8
 800c40e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	623b      	str	r3, [r7, #32]
   return(result);
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	f023 0301 	bic.w	r3, r3, #1
 800c41e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3308      	adds	r3, #8
 800c428:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c42c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c434:	e841 2300 	strex	r3, r2, [r1]
 800c438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1e3      	bne.n	800c408 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2220      	movs	r2, #32
 800c444:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	665a      	str	r2, [r3, #100]	@ 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	e853 3f00 	ldrex	r3, [r3]
 800c45e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f023 0310 	bic.w	r3, r3, #16
 800c466:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	69b9      	ldr	r1, [r7, #24]
 800c47a:	69fa      	ldr	r2, [r7, #28]
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	617b      	str	r3, [r7, #20]
   return(result);
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e4      	bne.n	800c452 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f852 	bl	800c538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c494:	e03f      	b.n	800c516 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c49a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00e      	beq.n	800c4c0 <HAL_UART_IRQHandler+0x560>
 800c4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d008      	beq.n	800c4c0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c4b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f001 f839 	bl	800d530 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4be:	e02d      	b.n	800c51c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00e      	beq.n	800c4ea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d008      	beq.n	800c4ea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d01c      	beq.n	800c51a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	4798      	blx	r3
    }
    return;
 800c4e8:	e017      	b.n	800c51a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d012      	beq.n	800c51c <HAL_UART_IRQHandler+0x5bc>
 800c4f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00c      	beq.n	800c51c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fe8a 	bl	800d21c <UART_EndTransmit_IT>
    return;
 800c508:	e008      	b.n	800c51c <HAL_UART_IRQHandler+0x5bc>
      return;
 800c50a:	bf00      	nop
 800c50c:	e006      	b.n	800c51c <HAL_UART_IRQHandler+0x5bc>
    return;
 800c50e:	bf00      	nop
 800c510:	e004      	b.n	800c51c <HAL_UART_IRQHandler+0x5bc>
      return;
 800c512:	bf00      	nop
 800c514:	e002      	b.n	800c51c <HAL_UART_IRQHandler+0x5bc>
      return;
 800c516:	bf00      	nop
 800c518:	e000      	b.n	800c51c <HAL_UART_IRQHandler+0x5bc>
    return;
 800c51a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c51c:	37e8      	adds	r7, #232	@ 0xe8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop

0800c524 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c554:	b08a      	sub	sp, #40	@ 0x28
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	431a      	orrs	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	431a      	orrs	r2, r3
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	69db      	ldr	r3, [r3, #28]
 800c574:	4313      	orrs	r3, r2
 800c576:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	4ba4      	ldr	r3, [pc, #656]	@ (800c810 <UART_SetConfig+0x2c0>)
 800c580:	4013      	ands	r3, r2
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	6812      	ldr	r2, [r2, #0]
 800c586:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c588:	430b      	orrs	r3, r1
 800c58a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	68da      	ldr	r2, [r3, #12]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a99      	ldr	r2, [pc, #612]	@ (800c814 <UART_SetConfig+0x2c4>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d004      	beq.n	800c5bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a90      	ldr	r2, [pc, #576]	@ (800c818 <UART_SetConfig+0x2c8>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d126      	bne.n	800c628 <UART_SetConfig+0xd8>
 800c5da:	4b90      	ldr	r3, [pc, #576]	@ (800c81c <UART_SetConfig+0x2cc>)
 800c5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5e0:	f003 0303 	and.w	r3, r3, #3
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d81b      	bhi.n	800c620 <UART_SetConfig+0xd0>
 800c5e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f0 <UART_SetConfig+0xa0>)
 800c5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ee:	bf00      	nop
 800c5f0:	0800c601 	.word	0x0800c601
 800c5f4:	0800c611 	.word	0x0800c611
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c619 	.word	0x0800c619
 800c600:	2301      	movs	r3, #1
 800c602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c606:	e116      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c608:	2302      	movs	r3, #2
 800c60a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c60e:	e112      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c610:	2304      	movs	r3, #4
 800c612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c616:	e10e      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c618:	2308      	movs	r3, #8
 800c61a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c61e:	e10a      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c620:	2310      	movs	r3, #16
 800c622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c626:	e106      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a7c      	ldr	r2, [pc, #496]	@ (800c820 <UART_SetConfig+0x2d0>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d138      	bne.n	800c6a4 <UART_SetConfig+0x154>
 800c632:	4b7a      	ldr	r3, [pc, #488]	@ (800c81c <UART_SetConfig+0x2cc>)
 800c634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c638:	f003 030c 	and.w	r3, r3, #12
 800c63c:	2b0c      	cmp	r3, #12
 800c63e:	d82d      	bhi.n	800c69c <UART_SetConfig+0x14c>
 800c640:	a201      	add	r2, pc, #4	@ (adr r2, 800c648 <UART_SetConfig+0xf8>)
 800c642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c646:	bf00      	nop
 800c648:	0800c67d 	.word	0x0800c67d
 800c64c:	0800c69d 	.word	0x0800c69d
 800c650:	0800c69d 	.word	0x0800c69d
 800c654:	0800c69d 	.word	0x0800c69d
 800c658:	0800c68d 	.word	0x0800c68d
 800c65c:	0800c69d 	.word	0x0800c69d
 800c660:	0800c69d 	.word	0x0800c69d
 800c664:	0800c69d 	.word	0x0800c69d
 800c668:	0800c685 	.word	0x0800c685
 800c66c:	0800c69d 	.word	0x0800c69d
 800c670:	0800c69d 	.word	0x0800c69d
 800c674:	0800c69d 	.word	0x0800c69d
 800c678:	0800c695 	.word	0x0800c695
 800c67c:	2300      	movs	r3, #0
 800c67e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c682:	e0d8      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c684:	2302      	movs	r3, #2
 800c686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c68a:	e0d4      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c68c:	2304      	movs	r3, #4
 800c68e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c692:	e0d0      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c694:	2308      	movs	r3, #8
 800c696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c69a:	e0cc      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c69c:	2310      	movs	r3, #16
 800c69e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c6a2:	e0c8      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a5e      	ldr	r2, [pc, #376]	@ (800c824 <UART_SetConfig+0x2d4>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d125      	bne.n	800c6fa <UART_SetConfig+0x1aa>
 800c6ae:	4b5b      	ldr	r3, [pc, #364]	@ (800c81c <UART_SetConfig+0x2cc>)
 800c6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c6b8:	2b30      	cmp	r3, #48	@ 0x30
 800c6ba:	d016      	beq.n	800c6ea <UART_SetConfig+0x19a>
 800c6bc:	2b30      	cmp	r3, #48	@ 0x30
 800c6be:	d818      	bhi.n	800c6f2 <UART_SetConfig+0x1a2>
 800c6c0:	2b20      	cmp	r3, #32
 800c6c2:	d00a      	beq.n	800c6da <UART_SetConfig+0x18a>
 800c6c4:	2b20      	cmp	r3, #32
 800c6c6:	d814      	bhi.n	800c6f2 <UART_SetConfig+0x1a2>
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <UART_SetConfig+0x182>
 800c6cc:	2b10      	cmp	r3, #16
 800c6ce:	d008      	beq.n	800c6e2 <UART_SetConfig+0x192>
 800c6d0:	e00f      	b.n	800c6f2 <UART_SetConfig+0x1a2>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c6d8:	e0ad      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c6da:	2302      	movs	r3, #2
 800c6dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c6e0:	e0a9      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c6e2:	2304      	movs	r3, #4
 800c6e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c6e8:	e0a5      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c6ea:	2308      	movs	r3, #8
 800c6ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c6f0:	e0a1      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c6f2:	2310      	movs	r3, #16
 800c6f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c6f8:	e09d      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a4a      	ldr	r2, [pc, #296]	@ (800c828 <UART_SetConfig+0x2d8>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d125      	bne.n	800c750 <UART_SetConfig+0x200>
 800c704:	4b45      	ldr	r3, [pc, #276]	@ (800c81c <UART_SetConfig+0x2cc>)
 800c706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c70a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c70e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c710:	d016      	beq.n	800c740 <UART_SetConfig+0x1f0>
 800c712:	2bc0      	cmp	r3, #192	@ 0xc0
 800c714:	d818      	bhi.n	800c748 <UART_SetConfig+0x1f8>
 800c716:	2b80      	cmp	r3, #128	@ 0x80
 800c718:	d00a      	beq.n	800c730 <UART_SetConfig+0x1e0>
 800c71a:	2b80      	cmp	r3, #128	@ 0x80
 800c71c:	d814      	bhi.n	800c748 <UART_SetConfig+0x1f8>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <UART_SetConfig+0x1d8>
 800c722:	2b40      	cmp	r3, #64	@ 0x40
 800c724:	d008      	beq.n	800c738 <UART_SetConfig+0x1e8>
 800c726:	e00f      	b.n	800c748 <UART_SetConfig+0x1f8>
 800c728:	2300      	movs	r3, #0
 800c72a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c72e:	e082      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c730:	2302      	movs	r3, #2
 800c732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c736:	e07e      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c73e:	e07a      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c746:	e076      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c74e:	e072      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a35      	ldr	r2, [pc, #212]	@ (800c82c <UART_SetConfig+0x2dc>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d12a      	bne.n	800c7b0 <UART_SetConfig+0x260>
 800c75a:	4b30      	ldr	r3, [pc, #192]	@ (800c81c <UART_SetConfig+0x2cc>)
 800c75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c768:	d01a      	beq.n	800c7a0 <UART_SetConfig+0x250>
 800c76a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c76e:	d81b      	bhi.n	800c7a8 <UART_SetConfig+0x258>
 800c770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c774:	d00c      	beq.n	800c790 <UART_SetConfig+0x240>
 800c776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c77a:	d815      	bhi.n	800c7a8 <UART_SetConfig+0x258>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <UART_SetConfig+0x238>
 800c780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c784:	d008      	beq.n	800c798 <UART_SetConfig+0x248>
 800c786:	e00f      	b.n	800c7a8 <UART_SetConfig+0x258>
 800c788:	2300      	movs	r3, #0
 800c78a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c78e:	e052      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c790:	2302      	movs	r3, #2
 800c792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c796:	e04e      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c798:	2304      	movs	r3, #4
 800c79a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c79e:	e04a      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c7a0:	2308      	movs	r3, #8
 800c7a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7a6:	e046      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c7a8:	2310      	movs	r3, #16
 800c7aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7ae:	e042      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a17      	ldr	r2, [pc, #92]	@ (800c814 <UART_SetConfig+0x2c4>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d13a      	bne.n	800c830 <UART_SetConfig+0x2e0>
 800c7ba:	4b18      	ldr	r3, [pc, #96]	@ (800c81c <UART_SetConfig+0x2cc>)
 800c7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c7c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7c8:	d01a      	beq.n	800c800 <UART_SetConfig+0x2b0>
 800c7ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7ce:	d81b      	bhi.n	800c808 <UART_SetConfig+0x2b8>
 800c7d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7d4:	d00c      	beq.n	800c7f0 <UART_SetConfig+0x2a0>
 800c7d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7da:	d815      	bhi.n	800c808 <UART_SetConfig+0x2b8>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <UART_SetConfig+0x298>
 800c7e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7e4:	d008      	beq.n	800c7f8 <UART_SetConfig+0x2a8>
 800c7e6:	e00f      	b.n	800c808 <UART_SetConfig+0x2b8>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7ee:	e022      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7f6:	e01e      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c7f8:	2304      	movs	r3, #4
 800c7fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7fe:	e01a      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c800:	2308      	movs	r3, #8
 800c802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c806:	e016      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c808:	2310      	movs	r3, #16
 800c80a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c80e:	e012      	b.n	800c836 <UART_SetConfig+0x2e6>
 800c810:	efff69f3 	.word	0xefff69f3
 800c814:	40008000 	.word	0x40008000
 800c818:	40013800 	.word	0x40013800
 800c81c:	40021000 	.word	0x40021000
 800c820:	40004400 	.word	0x40004400
 800c824:	40004800 	.word	0x40004800
 800c828:	40004c00 	.word	0x40004c00
 800c82c:	40005000 	.word	0x40005000
 800c830:	2310      	movs	r3, #16
 800c832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a9f      	ldr	r2, [pc, #636]	@ (800cab8 <UART_SetConfig+0x568>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d17a      	bne.n	800c936 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c840:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c844:	2b08      	cmp	r3, #8
 800c846:	d824      	bhi.n	800c892 <UART_SetConfig+0x342>
 800c848:	a201      	add	r2, pc, #4	@ (adr r2, 800c850 <UART_SetConfig+0x300>)
 800c84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84e:	bf00      	nop
 800c850:	0800c875 	.word	0x0800c875
 800c854:	0800c893 	.word	0x0800c893
 800c858:	0800c87d 	.word	0x0800c87d
 800c85c:	0800c893 	.word	0x0800c893
 800c860:	0800c883 	.word	0x0800c883
 800c864:	0800c893 	.word	0x0800c893
 800c868:	0800c893 	.word	0x0800c893
 800c86c:	0800c893 	.word	0x0800c893
 800c870:	0800c88b 	.word	0x0800c88b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c874:	f7fd fbb0 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 800c878:	61f8      	str	r0, [r7, #28]
        break;
 800c87a:	e010      	b.n	800c89e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c87c:	4b8f      	ldr	r3, [pc, #572]	@ (800cabc <UART_SetConfig+0x56c>)
 800c87e:	61fb      	str	r3, [r7, #28]
        break;
 800c880:	e00d      	b.n	800c89e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c882:	f7fd fb11 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 800c886:	61f8      	str	r0, [r7, #28]
        break;
 800c888:	e009      	b.n	800c89e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c88a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c88e:	61fb      	str	r3, [r7, #28]
        break;
 800c890:	e005      	b.n	800c89e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c89c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 80fb 	beq.w	800ca9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	4413      	add	r3, r2
 800c8b0:	69fa      	ldr	r2, [r7, #28]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d305      	bcc.n	800c8c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c8bc:	69fa      	ldr	r2, [r7, #28]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d903      	bls.n	800c8ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c8c8:	e0e8      	b.n	800ca9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	4615      	mov	r5, r2
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	022b      	lsls	r3, r5, #8
 800c8dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c8e0:	0222      	lsls	r2, r4, #8
 800c8e2:	68f9      	ldr	r1, [r7, #12]
 800c8e4:	6849      	ldr	r1, [r1, #4]
 800c8e6:	0849      	lsrs	r1, r1, #1
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	4688      	mov	r8, r1
 800c8ec:	4681      	mov	r9, r0
 800c8ee:	eb12 0a08 	adds.w	sl, r2, r8
 800c8f2:	eb43 0b09 	adc.w	fp, r3, r9
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	603b      	str	r3, [r7, #0]
 800c8fe:	607a      	str	r2, [r7, #4]
 800c900:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c904:	4650      	mov	r0, sl
 800c906:	4659      	mov	r1, fp
 800c908:	f7f4 f9ce 	bl	8000ca8 <__aeabi_uldivmod>
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4613      	mov	r3, r2
 800c912:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c91a:	d308      	bcc.n	800c92e <UART_SetConfig+0x3de>
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c922:	d204      	bcs.n	800c92e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	60da      	str	r2, [r3, #12]
 800c92c:	e0b6      	b.n	800ca9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c934:	e0b2      	b.n	800ca9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	69db      	ldr	r3, [r3, #28]
 800c93a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c93e:	d15e      	bne.n	800c9fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800c940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c944:	2b08      	cmp	r3, #8
 800c946:	d828      	bhi.n	800c99a <UART_SetConfig+0x44a>
 800c948:	a201      	add	r2, pc, #4	@ (adr r2, 800c950 <UART_SetConfig+0x400>)
 800c94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94e:	bf00      	nop
 800c950:	0800c975 	.word	0x0800c975
 800c954:	0800c97d 	.word	0x0800c97d
 800c958:	0800c985 	.word	0x0800c985
 800c95c:	0800c99b 	.word	0x0800c99b
 800c960:	0800c98b 	.word	0x0800c98b
 800c964:	0800c99b 	.word	0x0800c99b
 800c968:	0800c99b 	.word	0x0800c99b
 800c96c:	0800c99b 	.word	0x0800c99b
 800c970:	0800c993 	.word	0x0800c993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c974:	f7fd fb30 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 800c978:	61f8      	str	r0, [r7, #28]
        break;
 800c97a:	e014      	b.n	800c9a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c97c:	f7fd fb42 	bl	800a004 <HAL_RCC_GetPCLK2Freq>
 800c980:	61f8      	str	r0, [r7, #28]
        break;
 800c982:	e010      	b.n	800c9a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c984:	4b4d      	ldr	r3, [pc, #308]	@ (800cabc <UART_SetConfig+0x56c>)
 800c986:	61fb      	str	r3, [r7, #28]
        break;
 800c988:	e00d      	b.n	800c9a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c98a:	f7fd fa8d 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 800c98e:	61f8      	str	r0, [r7, #28]
        break;
 800c990:	e009      	b.n	800c9a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c996:	61fb      	str	r3, [r7, #28]
        break;
 800c998:	e005      	b.n	800c9a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c9a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d077      	beq.n	800ca9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	005a      	lsls	r2, r3, #1
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	085b      	lsrs	r3, r3, #1
 800c9b6:	441a      	add	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b0f      	cmp	r3, #15
 800c9c6:	d916      	bls.n	800c9f6 <UART_SetConfig+0x4a6>
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9ce:	d212      	bcs.n	800c9f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	f023 030f 	bic.w	r3, r3, #15
 800c9d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	085b      	lsrs	r3, r3, #1
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	f003 0307 	and.w	r3, r3, #7
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	8afb      	ldrh	r3, [r7, #22]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	8afa      	ldrh	r2, [r7, #22]
 800c9f2:	60da      	str	r2, [r3, #12]
 800c9f4:	e052      	b.n	800ca9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c9fc:	e04e      	b.n	800ca9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ca02:	2b08      	cmp	r3, #8
 800ca04:	d827      	bhi.n	800ca56 <UART_SetConfig+0x506>
 800ca06:	a201      	add	r2, pc, #4	@ (adr r2, 800ca0c <UART_SetConfig+0x4bc>)
 800ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0c:	0800ca31 	.word	0x0800ca31
 800ca10:	0800ca39 	.word	0x0800ca39
 800ca14:	0800ca41 	.word	0x0800ca41
 800ca18:	0800ca57 	.word	0x0800ca57
 800ca1c:	0800ca47 	.word	0x0800ca47
 800ca20:	0800ca57 	.word	0x0800ca57
 800ca24:	0800ca57 	.word	0x0800ca57
 800ca28:	0800ca57 	.word	0x0800ca57
 800ca2c:	0800ca4f 	.word	0x0800ca4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca30:	f7fd fad2 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 800ca34:	61f8      	str	r0, [r7, #28]
        break;
 800ca36:	e014      	b.n	800ca62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca38:	f7fd fae4 	bl	800a004 <HAL_RCC_GetPCLK2Freq>
 800ca3c:	61f8      	str	r0, [r7, #28]
        break;
 800ca3e:	e010      	b.n	800ca62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca40:	4b1e      	ldr	r3, [pc, #120]	@ (800cabc <UART_SetConfig+0x56c>)
 800ca42:	61fb      	str	r3, [r7, #28]
        break;
 800ca44:	e00d      	b.n	800ca62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca46:	f7fd fa2f 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 800ca4a:	61f8      	str	r0, [r7, #28]
        break;
 800ca4c:	e009      	b.n	800ca62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca52:	61fb      	str	r3, [r7, #28]
        break;
 800ca54:	e005      	b.n	800ca62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ca56:	2300      	movs	r3, #0
 800ca58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ca60:	bf00      	nop
    }

    if (pclk != 0U)
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d019      	beq.n	800ca9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	085a      	lsrs	r2, r3, #1
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	441a      	add	r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	2b0f      	cmp	r3, #15
 800ca80:	d909      	bls.n	800ca96 <UART_SetConfig+0x546>
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca88:	d205      	bcs.n	800ca96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	b29a      	uxth	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60da      	str	r2, [r3, #12]
 800ca94:	e002      	b.n	800ca9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 800caa8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800caac:	4618      	mov	r0, r3
 800caae:	3728      	adds	r7, #40	@ 0x28
 800cab0:	46bd      	mov	sp, r7
 800cab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cab6:	bf00      	nop
 800cab8:	40008000 	.word	0x40008000
 800cabc:	00f42400 	.word	0x00f42400

0800cac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00a      	beq.n	800caea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	430a      	orrs	r2, r1
 800cae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00a      	beq.n	800cb0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb10:	f003 0304 	and.w	r3, r3, #4
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00a      	beq.n	800cb2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	430a      	orrs	r2, r1
 800cb2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb32:	f003 0308 	and.w	r3, r3, #8
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00a      	beq.n	800cb50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	430a      	orrs	r2, r1
 800cb4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb54:	f003 0310 	and.w	r3, r3, #16
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00a      	beq.n	800cb72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	430a      	orrs	r2, r1
 800cb70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb76:	f003 0320 	and.w	r3, r3, #32
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	430a      	orrs	r2, r1
 800cb92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d01a      	beq.n	800cbd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbbe:	d10a      	bne.n	800cbd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00a      	beq.n	800cbf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	430a      	orrs	r2, r1
 800cbf6:	605a      	str	r2, [r3, #4]
  }
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b086      	sub	sp, #24
 800cc08:	af02      	add	r7, sp, #8
 800cc0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc14:	f7f9 ffe6 	bl	8006be4 <HAL_GetTick>
 800cc18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0308 	and.w	r3, r3, #8
 800cc24:	2b08      	cmp	r3, #8
 800cc26:	d10e      	bne.n	800cc46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f82d 	bl	800cc96 <UART_WaitOnFlagUntilTimeout>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e023      	b.n	800cc8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0304 	and.w	r3, r3, #4
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d10e      	bne.n	800cc72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f817 	bl	800cc96 <UART_WaitOnFlagUntilTimeout>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	e00d      	b.n	800cc8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2220      	movs	r2, #32
 800cc76:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2220      	movs	r2, #32
 800cc7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b09c      	sub	sp, #112	@ 0x70
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	603b      	str	r3, [r7, #0]
 800cca2:	4613      	mov	r3, r2
 800cca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cca6:	e0a5      	b.n	800cdf4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccae:	f000 80a1 	beq.w	800cdf4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccb2:	f7f9 ff97 	bl	8006be4 <HAL_GetTick>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d302      	bcc.n	800ccc8 <UART_WaitOnFlagUntilTimeout+0x32>
 800ccc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d13e      	bne.n	800cd46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd0:	e853 3f00 	ldrex	r3, [r3]
 800ccd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ccd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccd8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ccdc:	667b      	str	r3, [r7, #100]	@ 0x64
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cce8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ccec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ccee:	e841 2300 	strex	r3, r2, [r1]
 800ccf2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ccf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1e6      	bne.n	800ccc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3308      	adds	r3, #8
 800cd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd04:	e853 3f00 	ldrex	r3, [r3]
 800cd08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0c:	f023 0301 	bic.w	r3, r3, #1
 800cd10:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3308      	adds	r3, #8
 800cd18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cd1a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cd1c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cd20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd22:	e841 2300 	strex	r3, r2, [r1]
 800cd26:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cd28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1e5      	bne.n	800ccfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2220      	movs	r2, #32
 800cd32:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2220      	movs	r2, #32
 800cd38:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 800cd42:	2303      	movs	r3, #3
 800cd44:	e067      	b.n	800ce16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 0304 	and.w	r3, r3, #4
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d04f      	beq.n	800cdf4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd62:	d147      	bne.n	800cdf4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd76:	e853 3f00 	ldrex	r3, [r3]
 800cd7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800cd82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	461a      	mov	r2, r3
 800cd8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd94:	e841 2300 	strex	r3, r2, [r1]
 800cd98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1e6      	bne.n	800cd6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3308      	adds	r3, #8
 800cda6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	e853 3f00 	ldrex	r3, [r3]
 800cdae:	613b      	str	r3, [r7, #16]
   return(result);
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f023 0301 	bic.w	r3, r3, #1
 800cdb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cdc0:	623a      	str	r2, [r7, #32]
 800cdc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc4:	69f9      	ldr	r1, [r7, #28]
 800cdc6:	6a3a      	ldr	r2, [r7, #32]
 800cdc8:	e841 2300 	strex	r3, r2, [r1]
 800cdcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1e5      	bne.n	800cda0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2220      	movs	r2, #32
 800cdd8:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2220      	movs	r2, #32
 800cdde:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2220      	movs	r2, #32
 800cde4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e010      	b.n	800ce16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	69da      	ldr	r2, [r3, #28]
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	bf0c      	ite	eq
 800ce04:	2301      	moveq	r3, #1
 800ce06:	2300      	movne	r3, #0
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	f43f af4a 	beq.w	800cca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3770      	adds	r7, #112	@ 0x70
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b097      	sub	sp, #92	@ 0x5c
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	88fa      	ldrh	r2, [r7, #6]
 800ce38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	88fa      	ldrh	r2, [r7, #6]
 800ce40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2200      	movs	r2, #0
 800ce48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce52:	d10e      	bne.n	800ce72 <UART_Start_Receive_IT+0x52>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d105      	bne.n	800ce68 <UART_Start_Receive_IT+0x48>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ce62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce66:	e02d      	b.n	800cec4 <UART_Start_Receive_IT+0xa4>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	22ff      	movs	r2, #255	@ 0xff
 800ce6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce70:	e028      	b.n	800cec4 <UART_Start_Receive_IT+0xa4>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10d      	bne.n	800ce96 <UART_Start_Receive_IT+0x76>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d104      	bne.n	800ce8c <UART_Start_Receive_IT+0x6c>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	22ff      	movs	r2, #255	@ 0xff
 800ce86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce8a:	e01b      	b.n	800cec4 <UART_Start_Receive_IT+0xa4>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	227f      	movs	r2, #127	@ 0x7f
 800ce90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce94:	e016      	b.n	800cec4 <UART_Start_Receive_IT+0xa4>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce9e:	d10d      	bne.n	800cebc <UART_Start_Receive_IT+0x9c>
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d104      	bne.n	800ceb2 <UART_Start_Receive_IT+0x92>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	227f      	movs	r2, #127	@ 0x7f
 800ceac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ceb0:	e008      	b.n	800cec4 <UART_Start_Receive_IT+0xa4>
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	223f      	movs	r2, #63	@ 0x3f
 800ceb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ceba:	e003      	b.n	800cec4 <UART_Start_Receive_IT+0xa4>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2222      	movs	r2, #34	@ 0x22
 800ced0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3308      	adds	r3, #8
 800ced8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee4:	f043 0301 	orr.w	r3, r3, #1
 800cee8:	657b      	str	r3, [r7, #84]	@ 0x54
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3308      	adds	r3, #8
 800cef0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cef2:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cef4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cefa:	e841 2300 	strex	r3, r2, [r1]
 800cefe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cf00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1e5      	bne.n	800ced2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf0e:	d107      	bne.n	800cf20 <UART_Start_Receive_IT+0x100>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	691b      	ldr	r3, [r3, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d103      	bne.n	800cf20 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	4a24      	ldr	r2, [pc, #144]	@ (800cfac <UART_Start_Receive_IT+0x18c>)
 800cf1c:	665a      	str	r2, [r3, #100]	@ 0x64
 800cf1e:	e002      	b.n	800cf26 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4a23      	ldr	r2, [pc, #140]	@ (800cfb0 <UART_Start_Receive_IT+0x190>)
 800cf24:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  __HAL_UNLOCK(huart);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d019      	beq.n	800cf6a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3e:	e853 3f00 	ldrex	r3, [r3]
 800cf42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf46:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cf4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	461a      	mov	r2, r3
 800cf52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf54:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf56:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf5c:	e841 2300 	strex	r3, r2, [r1]
 800cf60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1e6      	bne.n	800cf36 <UART_Start_Receive_IT+0x116>
 800cf68:	e018      	b.n	800cf9c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	e853 3f00 	ldrex	r3, [r3]
 800cf76:	613b      	str	r3, [r7, #16]
   return(result);
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f043 0320 	orr.w	r3, r3, #32
 800cf7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	461a      	mov	r2, r3
 800cf86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf88:	623b      	str	r3, [r7, #32]
 800cf8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8c:	69f9      	ldr	r1, [r7, #28]
 800cf8e:	6a3a      	ldr	r2, [r7, #32]
 800cf90:	e841 2300 	strex	r3, r2, [r1]
 800cf94:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1e6      	bne.n	800cf6a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	375c      	adds	r7, #92	@ 0x5c
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	0800d3d1 	.word	0x0800d3d1
 800cfb0:	0800d271 	.word	0x0800d271

0800cfb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b095      	sub	sp, #84	@ 0x54
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc4:	e853 3f00 	ldrex	r3, [r3]
 800cfc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfda:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cfe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cfe2:	e841 2300 	strex	r3, r2, [r1]
 800cfe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1e6      	bne.n	800cfbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	3308      	adds	r3, #8
 800cff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	e853 3f00 	ldrex	r3, [r3]
 800cffc:	61fb      	str	r3, [r7, #28]
   return(result);
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	f023 0301 	bic.w	r3, r3, #1
 800d004:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	3308      	adds	r3, #8
 800d00c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d00e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d010:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d016:	e841 2300 	strex	r3, r2, [r1]
 800d01a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1e5      	bne.n	800cfee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d026:	2b01      	cmp	r3, #1
 800d028:	d118      	bne.n	800d05c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	e853 3f00 	ldrex	r3, [r3]
 800d036:	60bb      	str	r3, [r7, #8]
   return(result);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	f023 0310 	bic.w	r3, r3, #16
 800d03e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	461a      	mov	r2, r3
 800d046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d048:	61bb      	str	r3, [r7, #24]
 800d04a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	6979      	ldr	r1, [r7, #20]
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	e841 2300 	strex	r3, r2, [r1]
 800d054:	613b      	str	r3, [r7, #16]
   return(result);
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e6      	bne.n	800d02a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2220      	movs	r2, #32
 800d060:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	665a      	str	r2, [r3, #100]	@ 0x64
}
 800d06e:	bf00      	nop
 800d070:	3754      	adds	r7, #84	@ 0x54
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b084      	sub	sp, #16
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f7ff fa43 	bl	800c524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d0a6:	b480      	push	{r7}
 800d0a8:	b08f      	sub	sp, #60	@ 0x3c
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0b2:	2b21      	cmp	r3, #33	@ 0x21
 800d0b4:	d14c      	bne.n	800d150 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d132      	bne.n	800d128 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	e853 3f00 	ldrex	r3, [r3]
 800d0ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0e8:	e841 2300 	strex	r3, r2, [r1]
 800d0ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1e6      	bne.n	800d0c2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	e853 3f00 	ldrex	r3, [r3]
 800d100:	60bb      	str	r3, [r7, #8]
   return(result);
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d108:	633b      	str	r3, [r7, #48]	@ 0x30
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d112:	61bb      	str	r3, [r7, #24]
 800d114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d116:	6979      	ldr	r1, [r7, #20]
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	e841 2300 	strex	r3, r2, [r1]
 800d11e:	613b      	str	r3, [r7, #16]
   return(result);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1e6      	bne.n	800d0f4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d126:	e013      	b.n	800d150 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d12c:	781a      	ldrb	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d144:	b29b      	uxth	r3, r3
 800d146:	3b01      	subs	r3, #1
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d150:	bf00      	nop
 800d152:	373c      	adds	r7, #60	@ 0x3c
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b091      	sub	sp, #68	@ 0x44
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d168:	2b21      	cmp	r3, #33	@ 0x21
 800d16a:	d151      	bne.n	800d210 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d172:	b29b      	uxth	r3, r3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d132      	bne.n	800d1de <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	623b      	str	r3, [r7, #32]
   return(result);
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d18c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d196:	633b      	str	r3, [r7, #48]	@ 0x30
 800d198:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d19c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d19e:	e841 2300 	strex	r3, r2, [r1]
 800d1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1e6      	bne.n	800d178 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1be:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c8:	61fb      	str	r3, [r7, #28]
 800d1ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	69b9      	ldr	r1, [r7, #24]
 800d1ce:	69fa      	ldr	r2, [r7, #28]
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	617b      	str	r3, [r7, #20]
   return(result);
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e6      	bne.n	800d1aa <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d1dc:	e018      	b.n	800d210 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d1e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1e6:	881a      	ldrh	r2, [r3, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1f0:	b292      	uxth	r2, r2
 800d1f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1f8:	1c9a      	adds	r2, r3, #2
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d204:	b29b      	uxth	r3, r3
 800d206:	3b01      	subs	r3, #1
 800d208:	b29a      	uxth	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d210:	bf00      	nop
 800d212:	3744      	adds	r7, #68	@ 0x44
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b088      	sub	sp, #32
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	60bb      	str	r3, [r7, #8]
   return(result);
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d238:	61fb      	str	r3, [r7, #28]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	61bb      	str	r3, [r7, #24]
 800d244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d246:	6979      	ldr	r1, [r7, #20]
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	613b      	str	r3, [r7, #16]
   return(result);
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e6      	bne.n	800d224 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2220      	movs	r2, #32
 800d25a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7f3 ff2c 	bl	80010c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d268:	bf00      	nop
 800d26a:	3720      	adds	r7, #32
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b096      	sub	sp, #88	@ 0x58
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d27e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d286:	2b22      	cmp	r3, #34	@ 0x22
 800d288:	f040 8094 	bne.w	800d3b4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d292:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d296:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800d29a:	b2d9      	uxtb	r1, r3
 800d29c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2a6:	400a      	ands	r2, r1
 800d2a8:	b2d2      	uxtb	r2, r2
 800d2aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d179      	bne.n	800d3c8 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2dc:	e853 3f00 	ldrex	r3, [r3]
 800d2e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d2f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2fa:	e841 2300 	strex	r3, r2, [r1]
 800d2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1e6      	bne.n	800d2d4 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3308      	adds	r3, #8
 800d30c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	e853 3f00 	ldrex	r3, [r3]
 800d314:	623b      	str	r3, [r7, #32]
   return(result);
 800d316:	6a3b      	ldr	r3, [r7, #32]
 800d318:	f023 0301 	bic.w	r3, r3, #1
 800d31c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3308      	adds	r3, #8
 800d324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d326:	633a      	str	r2, [r7, #48]	@ 0x30
 800d328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d32c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d32e:	e841 2300 	strex	r3, r2, [r1]
 800d332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e5      	bne.n	800d306 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2220      	movs	r2, #32
 800d33e:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d12e      	bne.n	800d3ac <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	e853 3f00 	ldrex	r3, [r3]
 800d360:	60fb      	str	r3, [r7, #12]
   return(result);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f023 0310 	bic.w	r3, r3, #16
 800d368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	461a      	mov	r2, r3
 800d370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d372:	61fb      	str	r3, [r7, #28]
 800d374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d376:	69b9      	ldr	r1, [r7, #24]
 800d378:	69fa      	ldr	r2, [r7, #28]
 800d37a:	e841 2300 	strex	r3, r2, [r1]
 800d37e:	617b      	str	r3, [r7, #20]
   return(result);
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1e6      	bne.n	800d354 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	69db      	ldr	r3, [r3, #28]
 800d38c:	f003 0310 	and.w	r3, r3, #16
 800d390:	2b10      	cmp	r3, #16
 800d392:	d103      	bne.n	800d39c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2210      	movs	r2, #16
 800d39a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff f8c7 	bl	800c538 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3aa:	e00d      	b.n	800d3c8 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7f3 febd 	bl	800112c <HAL_UART_RxCpltCallback>
}
 800d3b2:	e009      	b.n	800d3c8 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	8b1b      	ldrh	r3, [r3, #24]
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f042 0208 	orr.w	r2, r2, #8
 800d3c4:	b292      	uxth	r2, r2
 800d3c6:	831a      	strh	r2, [r3, #24]
}
 800d3c8:	bf00      	nop
 800d3ca:	3758      	adds	r7, #88	@ 0x58
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b096      	sub	sp, #88	@ 0x58
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3de:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d3e6:	2b22      	cmp	r3, #34	@ 0x22
 800d3e8:	f040 8094 	bne.w	800d514 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d3f2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3fa:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d3fc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800d400:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d404:	4013      	ands	r3, r2
 800d406:	b29a      	uxth	r2, r3
 800d408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d40a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d410:	1c9a      	adds	r2, r3, #2
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	3b01      	subs	r3, #1
 800d420:	b29a      	uxth	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d42e:	b29b      	uxth	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d179      	bne.n	800d528 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d43c:	e853 3f00 	ldrex	r3, [r3]
 800d440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	461a      	mov	r2, r3
 800d450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d452:	643b      	str	r3, [r7, #64]	@ 0x40
 800d454:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e6      	bne.n	800d434 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3308      	adds	r3, #8
 800d46c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	61fb      	str	r3, [r7, #28]
   return(result);
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	f023 0301 	bic.w	r3, r3, #1
 800d47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d488:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d48c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e5      	bne.n	800d466 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2220      	movs	r2, #32
 800d49e:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d12e      	bne.n	800d50c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	e853 3f00 	ldrex	r3, [r3]
 800d4c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	f023 0310 	bic.w	r3, r3, #16
 800d4c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4d2:	61bb      	str	r3, [r7, #24]
 800d4d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d6:	6979      	ldr	r1, [r7, #20]
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	e841 2300 	strex	r3, r2, [r1]
 800d4de:	613b      	str	r3, [r7, #16]
   return(result);
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1e6      	bne.n	800d4b4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	f003 0310 	and.w	r3, r3, #16
 800d4f0:	2b10      	cmp	r3, #16
 800d4f2:	d103      	bne.n	800d4fc <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2210      	movs	r2, #16
 800d4fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff f817 	bl	800c538 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d50a:	e00d      	b.n	800d528 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7f3 fe0d 	bl	800112c <HAL_UART_RxCpltCallback>
}
 800d512:	e009      	b.n	800d528 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	8b1b      	ldrh	r3, [r3, #24]
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f042 0208 	orr.w	r2, r2, #8
 800d524:	b292      	uxth	r2, r2
 800d526:	831a      	strh	r2, [r3, #24]
}
 800d528:	bf00      	nop
 800d52a:	3758      	adds	r7, #88	@ 0x58
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d538:	bf00      	nop
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d54e:	2300      	movs	r3, #0
 800d550:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d556:	2b84      	cmp	r3, #132	@ 0x84
 800d558:	d005      	beq.n	800d566 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d55a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	4413      	add	r3, r2
 800d562:	3303      	adds	r3, #3
 800d564:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d566:	68fb      	ldr	r3, [r7, #12]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d578:	f001 f97e 	bl	800e878 <vTaskStartScheduler>
  
  return osOK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	bd80      	pop	{r7, pc}

0800d582 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d582:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d584:	b089      	sub	sp, #36	@ 0x24
 800d586:	af04      	add	r7, sp, #16
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d020      	beq.n	800d5d6 <osThreadCreate+0x54>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d01c      	beq.n	800d5d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685c      	ldr	r4, [r3, #4]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	691e      	ldr	r6, [r3, #16]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff ffc8 	bl	800d544 <makeFreeRtosPriority>
 800d5b4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	695b      	ldr	r3, [r3, #20]
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5be:	9202      	str	r2, [sp, #8]
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	9100      	str	r1, [sp, #0]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	4632      	mov	r2, r6
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 ff06 	bl	800e3dc <xTaskCreateStatic>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	e01c      	b.n	800d610 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685c      	ldr	r4, [r3, #4]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5e2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff ffaa 	bl	800d544 <makeFreeRtosPriority>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	f107 030c 	add.w	r3, r7, #12
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	9200      	str	r2, [sp, #0]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	4632      	mov	r2, r6
 800d5fe:	4629      	mov	r1, r5
 800d600:	4620      	mov	r0, r4
 800d602:	f000 ff4b 	bl	800e49c <xTaskCreate>
 800d606:	4603      	mov	r3, r0
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d001      	beq.n	800d610 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d60c:	2300      	movs	r3, #0
 800d60e:	e000      	b.n	800d612 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d610:	68fb      	ldr	r3, [r7, #12]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d61a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d001      	beq.n	800d630 <osDelay+0x16>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	e000      	b.n	800d632 <osDelay+0x18>
 800d630:	2301      	movs	r3, #1
 800d632:	4618      	mov	r0, r3
 800d634:	f001 f8ea 	bl	800e80c <vTaskDelay>
  
  return osOK;
 800d638:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d642:	b480      	push	{r7}
 800d644:	b083      	sub	sp, #12
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f103 0208 	add.w	r2, r3, #8
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f04f 32ff 	mov.w	r2, #4294967295
 800d65a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f103 0208 	add.w	r2, r3, #8
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f103 0208 	add.w	r2, r3, #8
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d676:	bf00      	nop
 800d678:	370c      	adds	r7, #12
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr

0800d682 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d682:	b480      	push	{r7}
 800d684:	b083      	sub	sp, #12
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d690:	bf00      	nop
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d69c:	b480      	push	{r7}
 800d69e:	b085      	sub	sp, #20
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	689a      	ldr	r2, [r3, #8]
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	1c5a      	adds	r2, r3, #1
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	601a      	str	r2, [r3, #0]
}
 800d6d8:	bf00      	nop
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fa:	d103      	bne.n	800d704 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	60fb      	str	r3, [r7, #12]
 800d702:	e00c      	b.n	800d71e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3308      	adds	r3, #8
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	e002      	b.n	800d712 <vListInsert+0x2e>
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	60fb      	str	r3, [r7, #12]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d2f6      	bcs.n	800d70c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	685a      	ldr	r2, [r3, #4]
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	683a      	ldr	r2, [r7, #0]
 800d72c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	1c5a      	adds	r2, r3, #1
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	601a      	str	r2, [r3, #0]
}
 800d74a:	bf00      	nop
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d756:	b480      	push	{r7}
 800d758:	b085      	sub	sp, #20
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	691b      	ldr	r3, [r3, #16]
 800d762:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	6892      	ldr	r2, [r2, #8]
 800d76c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	6852      	ldr	r2, [r2, #4]
 800d776:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d103      	bne.n	800d78a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	689a      	ldr	r2, [r3, #8]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	1e5a      	subs	r2, r3, #1
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
	...

0800d7ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10b      	bne.n	800d7d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	e7fd      	b.n	800d7d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d7d8:	f001 ffbe 	bl	800f758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7e4:	68f9      	ldr	r1, [r7, #12]
 800d7e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d7e8:	fb01 f303 	mul.w	r3, r1, r3
 800d7ec:	441a      	add	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d808:	3b01      	subs	r3, #1
 800d80a:	68f9      	ldr	r1, [r7, #12]
 800d80c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d80e:	fb01 f303 	mul.w	r3, r1, r3
 800d812:	441a      	add	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	22ff      	movs	r2, #255	@ 0xff
 800d81c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	22ff      	movs	r2, #255	@ 0xff
 800d824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d114      	bne.n	800d858 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d01a      	beq.n	800d86c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3310      	adds	r3, #16
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 fa76 	bl	800ed2c <xTaskRemoveFromEventList>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d012      	beq.n	800d86c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d846:	4b0d      	ldr	r3, [pc, #52]	@ (800d87c <xQueueGenericReset+0xd0>)
 800d848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	e009      	b.n	800d86c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	3310      	adds	r3, #16
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7ff fef0 	bl	800d642 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	3324      	adds	r3, #36	@ 0x24
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff feeb 	bl	800d642 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d86c:	f001 ffa6 	bl	800f7bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d870:	2301      	movs	r3, #1
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	e000ed04 	.word	0xe000ed04

0800d880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08e      	sub	sp, #56	@ 0x38
 800d884:	af02      	add	r7, sp, #8
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10b      	bne.n	800d8ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	e7fd      	b.n	800d8a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d10b      	bne.n	800d8ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8c4:	bf00      	nop
 800d8c6:	bf00      	nop
 800d8c8:	e7fd      	b.n	800d8c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <xQueueGenericCreateStatic+0x56>
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d001      	beq.n	800d8da <xQueueGenericCreateStatic+0x5a>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e000      	b.n	800d8dc <xQueueGenericCreateStatic+0x5c>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10b      	bne.n	800d8f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	623b      	str	r3, [r7, #32]
}
 800d8f2:	bf00      	nop
 800d8f4:	bf00      	nop
 800d8f6:	e7fd      	b.n	800d8f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d102      	bne.n	800d904 <xQueueGenericCreateStatic+0x84>
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d101      	bne.n	800d908 <xQueueGenericCreateStatic+0x88>
 800d904:	2301      	movs	r3, #1
 800d906:	e000      	b.n	800d90a <xQueueGenericCreateStatic+0x8a>
 800d908:	2300      	movs	r3, #0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d10b      	bne.n	800d926 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	61fb      	str	r3, [r7, #28]
}
 800d920:	bf00      	nop
 800d922:	bf00      	nop
 800d924:	e7fd      	b.n	800d922 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d926:	2348      	movs	r3, #72	@ 0x48
 800d928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b48      	cmp	r3, #72	@ 0x48
 800d92e:	d00b      	beq.n	800d948 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	61bb      	str	r3, [r7, #24]
}
 800d942:	bf00      	nop
 800d944:	bf00      	nop
 800d946:	e7fd      	b.n	800d944 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d948:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00d      	beq.n	800d970 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d95c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	4613      	mov	r3, r2
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f000 f840 	bl	800d9f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d972:	4618      	mov	r0, r3
 800d974:	3730      	adds	r7, #48	@ 0x30
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b08a      	sub	sp, #40	@ 0x28
 800d97e:	af02      	add	r7, sp, #8
 800d980:	60f8      	str	r0, [r7, #12]
 800d982:	60b9      	str	r1, [r7, #8]
 800d984:	4613      	mov	r3, r2
 800d986:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10b      	bne.n	800d9a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	613b      	str	r3, [r7, #16]
}
 800d9a0:	bf00      	nop
 800d9a2:	bf00      	nop
 800d9a4:	e7fd      	b.n	800d9a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	fb02 f303 	mul.w	r3, r2, r3
 800d9ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	3348      	adds	r3, #72	@ 0x48
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f001 fff1 	bl	800f99c <pvPortMalloc>
 800d9ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d011      	beq.n	800d9e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	3348      	adds	r3, #72	@ 0x48
 800d9ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d9d4:	79fa      	ldrb	r2, [r7, #7]
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	697a      	ldr	r2, [r7, #20]
 800d9de:	68b9      	ldr	r1, [r7, #8]
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f000 f805 	bl	800d9f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d9e6:	69bb      	ldr	r3, [r7, #24]
	}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3720      	adds	r7, #32
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
 800d9fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d103      	bne.n	800da0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	69ba      	ldr	r2, [r7, #24]
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	e002      	b.n	800da12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	68ba      	ldr	r2, [r7, #8]
 800da1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da1e:	2101      	movs	r1, #1
 800da20:	69b8      	ldr	r0, [r7, #24]
 800da22:	f7ff fec3 	bl	800d7ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800da26:	bf00      	nop
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
	...

0800da30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b08e      	sub	sp, #56	@ 0x38
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800da3e:	2300      	movs	r3, #0
 800da40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10b      	bne.n	800da64 <xQueueGenericSend+0x34>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da5e:	bf00      	nop
 800da60:	bf00      	nop
 800da62:	e7fd      	b.n	800da60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d103      	bne.n	800da72 <xQueueGenericSend+0x42>
 800da6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <xQueueGenericSend+0x46>
 800da72:	2301      	movs	r3, #1
 800da74:	e000      	b.n	800da78 <xQueueGenericSend+0x48>
 800da76:	2300      	movs	r3, #0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10b      	bne.n	800da94 <xQueueGenericSend+0x64>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da8e:	bf00      	nop
 800da90:	bf00      	nop
 800da92:	e7fd      	b.n	800da90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b02      	cmp	r3, #2
 800da98:	d103      	bne.n	800daa2 <xQueueGenericSend+0x72>
 800da9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d101      	bne.n	800daa6 <xQueueGenericSend+0x76>
 800daa2:	2301      	movs	r3, #1
 800daa4:	e000      	b.n	800daa8 <xQueueGenericSend+0x78>
 800daa6:	2300      	movs	r3, #0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10b      	bne.n	800dac4 <xQueueGenericSend+0x94>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	623b      	str	r3, [r7, #32]
}
 800dabe:	bf00      	nop
 800dac0:	bf00      	nop
 800dac2:	e7fd      	b.n	800dac0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dac4:	f001 faf2 	bl	800f0ac <xTaskGetSchedulerState>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <xQueueGenericSend+0xa4>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d101      	bne.n	800dad8 <xQueueGenericSend+0xa8>
 800dad4:	2301      	movs	r3, #1
 800dad6:	e000      	b.n	800dada <xQueueGenericSend+0xaa>
 800dad8:	2300      	movs	r3, #0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10b      	bne.n	800daf6 <xQueueGenericSend+0xc6>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	61fb      	str	r3, [r7, #28]
}
 800daf0:	bf00      	nop
 800daf2:	bf00      	nop
 800daf4:	e7fd      	b.n	800daf2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800daf6:	f001 fe2f 	bl	800f758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db02:	429a      	cmp	r2, r3
 800db04:	d302      	bcc.n	800db0c <xQueueGenericSend+0xdc>
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d129      	bne.n	800db60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	68b9      	ldr	r1, [r7, #8]
 800db10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db12:	f000 fb29 	bl	800e168 <prvCopyDataToQueue>
 800db16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d010      	beq.n	800db42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db22:	3324      	adds	r3, #36	@ 0x24
 800db24:	4618      	mov	r0, r3
 800db26:	f001 f901 	bl	800ed2c <xTaskRemoveFromEventList>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d013      	beq.n	800db58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db30:	4b3f      	ldr	r3, [pc, #252]	@ (800dc30 <xQueueGenericSend+0x200>)
 800db32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	e00a      	b.n	800db58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800db42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db44:	2b00      	cmp	r3, #0
 800db46:	d007      	beq.n	800db58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800db48:	4b39      	ldr	r3, [pc, #228]	@ (800dc30 <xQueueGenericSend+0x200>)
 800db4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db4e:	601a      	str	r2, [r3, #0]
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db58:	f001 fe30 	bl	800f7bc <vPortExitCritical>
				return pdPASS;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e063      	b.n	800dc28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d103      	bne.n	800db6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db66:	f001 fe29 	bl	800f7bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db6a:	2300      	movs	r3, #0
 800db6c:	e05c      	b.n	800dc28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db70:	2b00      	cmp	r3, #0
 800db72:	d106      	bne.n	800db82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db74:	f107 0314 	add.w	r3, r7, #20
 800db78:	4618      	mov	r0, r3
 800db7a:	f001 f93b 	bl	800edf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db7e:	2301      	movs	r3, #1
 800db80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db82:	f001 fe1b 	bl	800f7bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db86:	f000 fed9 	bl	800e93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db8a:	f001 fde5 	bl	800f758 <vPortEnterCritical>
 800db8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db94:	b25b      	sxtb	r3, r3
 800db96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9a:	d103      	bne.n	800dba4 <xQueueGenericSend+0x174>
 800db9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbaa:	b25b      	sxtb	r3, r3
 800dbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb0:	d103      	bne.n	800dbba <xQueueGenericSend+0x18a>
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbba:	f001 fdff 	bl	800f7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbbe:	1d3a      	adds	r2, r7, #4
 800dbc0:	f107 0314 	add.w	r3, r7, #20
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f001 f92a 	bl	800ee20 <xTaskCheckForTimeOut>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d124      	bne.n	800dc1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dbd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbd4:	f000 fbc0 	bl	800e358 <prvIsQueueFull>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d018      	beq.n	800dc10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe0:	3310      	adds	r3, #16
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f001 f87a 	bl	800ece0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dbec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbee:	f000 fb4b 	bl	800e288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dbf2:	f000 feb1 	bl	800e958 <xTaskResumeAll>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f47f af7c 	bne.w	800daf6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800dc30 <xQueueGenericSend+0x200>)
 800dc00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	e772      	b.n	800daf6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc12:	f000 fb39 	bl	800e288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc16:	f000 fe9f 	bl	800e958 <xTaskResumeAll>
 800dc1a:	e76c      	b.n	800daf6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc1e:	f000 fb33 	bl	800e288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc22:	f000 fe99 	bl	800e958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3738      	adds	r7, #56	@ 0x38
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	e000ed04 	.word	0xe000ed04

0800dc34 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08e      	sub	sp, #56	@ 0x38
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10b      	bne.n	800dc60 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800dc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	623b      	str	r3, [r7, #32]
}
 800dc5a:	bf00      	nop
 800dc5c:	bf00      	nop
 800dc5e:	e7fd      	b.n	800dc5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00b      	beq.n	800dc80 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	61fb      	str	r3, [r7, #28]
}
 800dc7a:	bf00      	nop
 800dc7c:	bf00      	nop
 800dc7e:	e7fd      	b.n	800dc7c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d103      	bne.n	800dc90 <xQueueGiveFromISR+0x5c>
 800dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <xQueueGiveFromISR+0x60>
 800dc90:	2301      	movs	r3, #1
 800dc92:	e000      	b.n	800dc96 <xQueueGiveFromISR+0x62>
 800dc94:	2300      	movs	r3, #0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10b      	bne.n	800dcb2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	61bb      	str	r3, [r7, #24]
}
 800dcac:	bf00      	nop
 800dcae:	bf00      	nop
 800dcb0:	e7fd      	b.n	800dcae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcb2:	f001 fe31 	bl	800f918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dcb6:	f3ef 8211 	mrs	r2, BASEPRI
 800dcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	617a      	str	r2, [r7, #20]
 800dccc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dcce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dcd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d22b      	bcs.n	800dd3a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dcf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfc:	d112      	bne.n	800dd24 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d016      	beq.n	800dd34 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd08:	3324      	adds	r3, #36	@ 0x24
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f001 f80e 	bl	800ed2c <xTaskRemoveFromEventList>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00e      	beq.n	800dd34 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d00b      	beq.n	800dd34 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	e007      	b.n	800dd34 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd28:	3301      	adds	r3, #1
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	b25a      	sxtb	r2, r3
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dd34:	2301      	movs	r3, #1
 800dd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd38:	e001      	b.n	800dd3e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd40:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3738      	adds	r7, #56	@ 0x38
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08c      	sub	sp, #48	@ 0x30
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd60:	2300      	movs	r3, #0
 800dd62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10b      	bne.n	800dd86 <xQueueReceive+0x32>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	623b      	str	r3, [r7, #32]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d103      	bne.n	800dd94 <xQueueReceive+0x40>
 800dd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d101      	bne.n	800dd98 <xQueueReceive+0x44>
 800dd94:	2301      	movs	r3, #1
 800dd96:	e000      	b.n	800dd9a <xQueueReceive+0x46>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10b      	bne.n	800ddb6 <xQueueReceive+0x62>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	61fb      	str	r3, [r7, #28]
}
 800ddb0:	bf00      	nop
 800ddb2:	bf00      	nop
 800ddb4:	e7fd      	b.n	800ddb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddb6:	f001 f979 	bl	800f0ac <xTaskGetSchedulerState>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d102      	bne.n	800ddc6 <xQueueReceive+0x72>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <xQueueReceive+0x76>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e000      	b.n	800ddcc <xQueueReceive+0x78>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10b      	bne.n	800dde8 <xQueueReceive+0x94>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	61bb      	str	r3, [r7, #24]
}
 800dde2:	bf00      	nop
 800dde4:	bf00      	nop
 800dde6:	e7fd      	b.n	800dde4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dde8:	f001 fcb6 	bl	800f758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddf0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d01f      	beq.n	800de38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ddf8:	68b9      	ldr	r1, [r7, #8]
 800ddfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddfc:	f000 fa1e 	bl	800e23c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de02:	1e5a      	subs	r2, r3, #1
 800de04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00f      	beq.n	800de30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de12:	3310      	adds	r3, #16
 800de14:	4618      	mov	r0, r3
 800de16:	f000 ff89 	bl	800ed2c <xTaskRemoveFromEventList>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d007      	beq.n	800de30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de20:	4b3c      	ldr	r3, [pc, #240]	@ (800df14 <xQueueReceive+0x1c0>)
 800de22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de30:	f001 fcc4 	bl	800f7bc <vPortExitCritical>
				return pdPASS;
 800de34:	2301      	movs	r3, #1
 800de36:	e069      	b.n	800df0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d103      	bne.n	800de46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de3e:	f001 fcbd 	bl	800f7bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de42:	2300      	movs	r3, #0
 800de44:	e062      	b.n	800df0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d106      	bne.n	800de5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de4c:	f107 0310 	add.w	r3, r7, #16
 800de50:	4618      	mov	r0, r3
 800de52:	f000 ffcf 	bl	800edf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de56:	2301      	movs	r3, #1
 800de58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de5a:	f001 fcaf 	bl	800f7bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de5e:	f000 fd6d 	bl	800e93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de62:	f001 fc79 	bl	800f758 <vPortEnterCritical>
 800de66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de6c:	b25b      	sxtb	r3, r3
 800de6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de72:	d103      	bne.n	800de7c <xQueueReceive+0x128>
 800de74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de76:	2200      	movs	r2, #0
 800de78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de82:	b25b      	sxtb	r3, r3
 800de84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de88:	d103      	bne.n	800de92 <xQueueReceive+0x13e>
 800de8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de92:	f001 fc93 	bl	800f7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de96:	1d3a      	adds	r2, r7, #4
 800de98:	f107 0310 	add.w	r3, r7, #16
 800de9c:	4611      	mov	r1, r2
 800de9e:	4618      	mov	r0, r3
 800dea0:	f000 ffbe 	bl	800ee20 <xTaskCheckForTimeOut>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d123      	bne.n	800def2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800deaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800deac:	f000 fa3e 	bl	800e32c <prvIsQueueEmpty>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d017      	beq.n	800dee6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800deb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb8:	3324      	adds	r3, #36	@ 0x24
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	4611      	mov	r1, r2
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 ff0e 	bl	800ece0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dec6:	f000 f9df 	bl	800e288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800deca:	f000 fd45 	bl	800e958 <xTaskResumeAll>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d189      	bne.n	800dde8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ded4:	4b0f      	ldr	r3, [pc, #60]	@ (800df14 <xQueueReceive+0x1c0>)
 800ded6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	f3bf 8f6f 	isb	sy
 800dee4:	e780      	b.n	800dde8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dee8:	f000 f9ce 	bl	800e288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800deec:	f000 fd34 	bl	800e958 <xTaskResumeAll>
 800def0:	e77a      	b.n	800dde8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800def2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800def4:	f000 f9c8 	bl	800e288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800def8:	f000 fd2e 	bl	800e958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800defc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800defe:	f000 fa15 	bl	800e32c <prvIsQueueEmpty>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	f43f af6f 	beq.w	800dde8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3730      	adds	r7, #48	@ 0x30
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	e000ed04 	.word	0xe000ed04

0800df18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08e      	sub	sp, #56	@ 0x38
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800df22:	2300      	movs	r3, #0
 800df24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800df2a:	2300      	movs	r3, #0
 800df2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10b      	bne.n	800df4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	623b      	str	r3, [r7, #32]
}
 800df46:	bf00      	nop
 800df48:	bf00      	nop
 800df4a:	e7fd      	b.n	800df48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00b      	beq.n	800df6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	61fb      	str	r3, [r7, #28]
}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	e7fd      	b.n	800df68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df6c:	f001 f89e 	bl	800f0ac <xTaskGetSchedulerState>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d102      	bne.n	800df7c <xQueueSemaphoreTake+0x64>
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d101      	bne.n	800df80 <xQueueSemaphoreTake+0x68>
 800df7c:	2301      	movs	r3, #1
 800df7e:	e000      	b.n	800df82 <xQueueSemaphoreTake+0x6a>
 800df80:	2300      	movs	r3, #0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10b      	bne.n	800df9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800df86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df8a:	f383 8811 	msr	BASEPRI, r3
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	61bb      	str	r3, [r7, #24]
}
 800df98:	bf00      	nop
 800df9a:	bf00      	nop
 800df9c:	e7fd      	b.n	800df9a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df9e:	f001 fbdb 	bl	800f758 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfa6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d024      	beq.n	800dff8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb0:	1e5a      	subs	r2, r3, #1
 800dfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d104      	bne.n	800dfc8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dfbe:	f001 fa21 	bl	800f404 <pvTaskIncrementMutexHeldCount>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00f      	beq.n	800dff0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd2:	3310      	adds	r3, #16
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 fea9 	bl	800ed2c <xTaskRemoveFromEventList>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d007      	beq.n	800dff0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dfe0:	4b54      	ldr	r3, [pc, #336]	@ (800e134 <xQueueSemaphoreTake+0x21c>)
 800dfe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dff0:	f001 fbe4 	bl	800f7bc <vPortExitCritical>
				return pdPASS;
 800dff4:	2301      	movs	r3, #1
 800dff6:	e098      	b.n	800e12a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d112      	bne.n	800e024 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00b      	beq.n	800e01c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	617b      	str	r3, [r7, #20]
}
 800e016:	bf00      	nop
 800e018:	bf00      	nop
 800e01a:	e7fd      	b.n	800e018 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e01c:	f001 fbce 	bl	800f7bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e020:	2300      	movs	r3, #0
 800e022:	e082      	b.n	800e12a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e02a:	f107 030c 	add.w	r3, r7, #12
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 fee0 	bl	800edf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e034:	2301      	movs	r3, #1
 800e036:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e038:	f001 fbc0 	bl	800f7bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e03c:	f000 fc7e 	bl	800e93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e040:	f001 fb8a 	bl	800f758 <vPortEnterCritical>
 800e044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e046:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e04a:	b25b      	sxtb	r3, r3
 800e04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e050:	d103      	bne.n	800e05a <xQueueSemaphoreTake+0x142>
 800e052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e054:	2200      	movs	r2, #0
 800e056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e060:	b25b      	sxtb	r3, r3
 800e062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e066:	d103      	bne.n	800e070 <xQueueSemaphoreTake+0x158>
 800e068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e070:	f001 fba4 	bl	800f7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e074:	463a      	mov	r2, r7
 800e076:	f107 030c 	add.w	r3, r7, #12
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 fecf 	bl	800ee20 <xTaskCheckForTimeOut>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d132      	bne.n	800e0ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e088:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e08a:	f000 f94f 	bl	800e32c <prvIsQueueEmpty>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d026      	beq.n	800e0e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d109      	bne.n	800e0b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e09c:	f001 fb5c 	bl	800f758 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f001 f81f 	bl	800f0e8 <xTaskPriorityInherit>
 800e0aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e0ac:	f001 fb86 	bl	800f7bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b2:	3324      	adds	r3, #36	@ 0x24
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f000 fe11 	bl	800ece0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0c0:	f000 f8e2 	bl	800e288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0c4:	f000 fc48 	bl	800e958 <xTaskResumeAll>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f47f af67 	bne.w	800df9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e0d0:	4b18      	ldr	r3, [pc, #96]	@ (800e134 <xQueueSemaphoreTake+0x21c>)
 800e0d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0d6:	601a      	str	r2, [r3, #0]
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	e75d      	b.n	800df9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e0e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0e4:	f000 f8d0 	bl	800e288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0e8:	f000 fc36 	bl	800e958 <xTaskResumeAll>
 800e0ec:	e757      	b.n	800df9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e0ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0f0:	f000 f8ca 	bl	800e288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0f4:	f000 fc30 	bl	800e958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0fa:	f000 f917 	bl	800e32c <prvIsQueueEmpty>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	f43f af4c 	beq.w	800df9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00d      	beq.n	800e128 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e10c:	f001 fb24 	bl	800f758 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e112:	f000 f811 	bl	800e138 <prvGetDisinheritPriorityAfterTimeout>
 800e116:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e11e:	4618      	mov	r0, r3
 800e120:	f001 f8e0 	bl	800f2e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e124:	f001 fb4a 	bl	800f7bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e128:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3738      	adds	r7, #56	@ 0x38
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	e000ed04 	.word	0xe000ed04

0800e138 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e144:	2b00      	cmp	r3, #0
 800e146:	d006      	beq.n	800e156 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f1c3 0307 	rsb	r3, r3, #7
 800e152:	60fb      	str	r3, [r7, #12]
 800e154:	e001      	b.n	800e15a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e156:	2300      	movs	r3, #0
 800e158:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e15a:	68fb      	ldr	r3, [r7, #12]
	}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e174:	2300      	movs	r3, #0
 800e176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e17c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10d      	bne.n	800e1a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d14d      	bne.n	800e22a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	4618      	mov	r0, r3
 800e194:	f001 f81e 	bl	800f1d4 <xTaskPriorityDisinherit>
 800e198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2200      	movs	r2, #0
 800e19e:	609a      	str	r2, [r3, #8]
 800e1a0:	e043      	b.n	800e22a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d119      	bne.n	800e1dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6858      	ldr	r0, [r3, #4]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	68b9      	ldr	r1, [r7, #8]
 800e1b4:	f002 fb93 	bl	80108de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	685a      	ldr	r2, [r3, #4]
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c0:	441a      	add	r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	685a      	ldr	r2, [r3, #4]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d32b      	bcc.n	800e22a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	605a      	str	r2, [r3, #4]
 800e1da:	e026      	b.n	800e22a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	68d8      	ldr	r0, [r3, #12]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	68b9      	ldr	r1, [r7, #8]
 800e1e8:	f002 fb79 	bl	80108de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	68da      	ldr	r2, [r3, #12]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1f4:	425b      	negs	r3, r3
 800e1f6:	441a      	add	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	68da      	ldr	r2, [r3, #12]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	d207      	bcs.n	800e218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	689a      	ldr	r2, [r3, #8]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e210:	425b      	negs	r3, r3
 800e212:	441a      	add	r2, r3
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	d105      	bne.n	800e22a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3b01      	subs	r3, #1
 800e228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e232:	697b      	ldr	r3, [r7, #20]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d018      	beq.n	800e280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	68da      	ldr	r2, [r3, #12]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e256:	441a      	add	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	429a      	cmp	r2, r3
 800e266:	d303      	bcc.n	800e270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68d9      	ldr	r1, [r3, #12]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e278:	461a      	mov	r2, r3
 800e27a:	6838      	ldr	r0, [r7, #0]
 800e27c:	f002 fb2f 	bl	80108de <memcpy>
	}
}
 800e280:	bf00      	nop
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e290:	f001 fa62 	bl	800f758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e29a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e29c:	e011      	b.n	800e2c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d012      	beq.n	800e2cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3324      	adds	r3, #36	@ 0x24
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f000 fd3e 	bl	800ed2c <xTaskRemoveFromEventList>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e2b6:	f000 fe17 	bl	800eee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	dce9      	bgt.n	800e29e <prvUnlockQueue+0x16>
 800e2ca:	e000      	b.n	800e2ce <prvUnlockQueue+0x46>
					break;
 800e2cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	22ff      	movs	r2, #255	@ 0xff
 800e2d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e2d6:	f001 fa71 	bl	800f7bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e2da:	f001 fa3d 	bl	800f758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2e6:	e011      	b.n	800e30c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d012      	beq.n	800e316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	3310      	adds	r3, #16
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 fd19 	bl	800ed2c <xTaskRemoveFromEventList>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e300:	f000 fdf2 	bl	800eee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e304:	7bbb      	ldrb	r3, [r7, #14]
 800e306:	3b01      	subs	r3, #1
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e310:	2b00      	cmp	r3, #0
 800e312:	dce9      	bgt.n	800e2e8 <prvUnlockQueue+0x60>
 800e314:	e000      	b.n	800e318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	22ff      	movs	r2, #255	@ 0xff
 800e31c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e320:	f001 fa4c 	bl	800f7bc <vPortExitCritical>
}
 800e324:	bf00      	nop
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e334:	f001 fa10 	bl	800f758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d102      	bne.n	800e346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e340:	2301      	movs	r3, #1
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	e001      	b.n	800e34a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e346:	2300      	movs	r3, #0
 800e348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e34a:	f001 fa37 	bl	800f7bc <vPortExitCritical>

	return xReturn;
 800e34e:	68fb      	ldr	r3, [r7, #12]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e360:	f001 f9fa 	bl	800f758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d102      	bne.n	800e376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e370:	2301      	movs	r3, #1
 800e372:	60fb      	str	r3, [r7, #12]
 800e374:	e001      	b.n	800e37a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e376:	2300      	movs	r3, #0
 800e378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e37a:	f001 fa1f 	bl	800f7bc <vPortExitCritical>

	return xReturn;
 800e37e:	68fb      	ldr	r3, [r7, #12]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e392:	2300      	movs	r3, #0
 800e394:	60fb      	str	r3, [r7, #12]
 800e396:	e014      	b.n	800e3c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e398:	4a0f      	ldr	r2, [pc, #60]	@ (800e3d8 <vQueueAddToRegistry+0x50>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10b      	bne.n	800e3bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e3a4:	490c      	ldr	r1, [pc, #48]	@ (800e3d8 <vQueueAddToRegistry+0x50>)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	683a      	ldr	r2, [r7, #0]
 800e3aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e3ae:	4a0a      	ldr	r2, [pc, #40]	@ (800e3d8 <vQueueAddToRegistry+0x50>)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	4413      	add	r3, r2
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e3ba:	e006      	b.n	800e3ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	60fb      	str	r3, [r7, #12]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b07      	cmp	r3, #7
 800e3c6:	d9e7      	bls.n	800e398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e3c8:	bf00      	nop
 800e3ca:	bf00      	nop
 800e3cc:	3714      	adds	r7, #20
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	200014e8 	.word	0x200014e8

0800e3dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08e      	sub	sp, #56	@ 0x38
 800e3e0:	af04      	add	r7, sp, #16
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
 800e3e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10b      	bne.n	800e408 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	623b      	str	r3, [r7, #32]
}
 800e402:	bf00      	nop
 800e404:	bf00      	nop
 800e406:	e7fd      	b.n	800e404 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10b      	bne.n	800e426 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	61fb      	str	r3, [r7, #28]
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	e7fd      	b.n	800e422 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e426:	2354      	movs	r3, #84	@ 0x54
 800e428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	2b54      	cmp	r3, #84	@ 0x54
 800e42e:	d00b      	beq.n	800e448 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	61bb      	str	r3, [r7, #24]
}
 800e442:	bf00      	nop
 800e444:	bf00      	nop
 800e446:	e7fd      	b.n	800e444 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e448:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d01e      	beq.n	800e48e <xTaskCreateStatic+0xb2>
 800e450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e452:	2b00      	cmp	r3, #0
 800e454:	d01b      	beq.n	800e48e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e458:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e45e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	2202      	movs	r2, #2
 800e464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e468:	2300      	movs	r3, #0
 800e46a:	9303      	str	r3, [sp, #12]
 800e46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e46e:	9302      	str	r3, [sp, #8]
 800e470:	f107 0314 	add.w	r3, r7, #20
 800e474:	9301      	str	r3, [sp, #4]
 800e476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	68b9      	ldr	r1, [r7, #8]
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f000 f850 	bl	800e526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e486:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e488:	f000 f8d6 	bl	800e638 <prvAddNewTaskToReadyList>
 800e48c:	e001      	b.n	800e492 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e492:	697b      	ldr	r3, [r7, #20]
	}
 800e494:	4618      	mov	r0, r3
 800e496:	3728      	adds	r7, #40	@ 0x28
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08c      	sub	sp, #48	@ 0x30
 800e4a0:	af04      	add	r7, sp, #16
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	603b      	str	r3, [r7, #0]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4ac:	88fb      	ldrh	r3, [r7, #6]
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f001 fa73 	bl	800f99c <pvPortMalloc>
 800e4b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00e      	beq.n	800e4dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4be:	2054      	movs	r0, #84	@ 0x54
 800e4c0:	f001 fa6c 	bl	800f99c <pvPortMalloc>
 800e4c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d003      	beq.n	800e4d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	697a      	ldr	r2, [r7, #20]
 800e4d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4d2:	e005      	b.n	800e4e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e4d4:	6978      	ldr	r0, [r7, #20]
 800e4d6:	f001 fb2f 	bl	800fb38 <vPortFree>
 800e4da:	e001      	b.n	800e4e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d017      	beq.n	800e516 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e4ee:	88fa      	ldrh	r2, [r7, #6]
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9303      	str	r3, [sp, #12]
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	9302      	str	r3, [sp, #8]
 800e4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fa:	9301      	str	r3, [sp, #4]
 800e4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	68b9      	ldr	r1, [r7, #8]
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f000 f80e 	bl	800e526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e50a:	69f8      	ldr	r0, [r7, #28]
 800e50c:	f000 f894 	bl	800e638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e510:	2301      	movs	r3, #1
 800e512:	61bb      	str	r3, [r7, #24]
 800e514:	e002      	b.n	800e51c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e516:	f04f 33ff 	mov.w	r3, #4294967295
 800e51a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e51c:	69bb      	ldr	r3, [r7, #24]
	}
 800e51e:	4618      	mov	r0, r3
 800e520:	3720      	adds	r7, #32
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b088      	sub	sp, #32
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	60f8      	str	r0, [r7, #12]
 800e52e:	60b9      	str	r1, [r7, #8]
 800e530:	607a      	str	r2, [r7, #4]
 800e532:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e53e:	3b01      	subs	r3, #1
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	f023 0307 	bic.w	r3, r3, #7
 800e54c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	f003 0307 	and.w	r3, r3, #7
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00b      	beq.n	800e570 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	617b      	str	r3, [r7, #20]
}
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	e7fd      	b.n	800e56c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d01f      	beq.n	800e5b6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e576:	2300      	movs	r3, #0
 800e578:	61fb      	str	r3, [r7, #28]
 800e57a:	e012      	b.n	800e5a2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	4413      	add	r3, r2
 800e582:	7819      	ldrb	r1, [r3, #0]
 800e584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	4413      	add	r3, r2
 800e58a:	3334      	adds	r3, #52	@ 0x34
 800e58c:	460a      	mov	r2, r1
 800e58e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	4413      	add	r3, r2
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d006      	beq.n	800e5aa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	61fb      	str	r3, [r7, #28]
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	2b0f      	cmp	r3, #15
 800e5a6:	d9e9      	bls.n	800e57c <prvInitialiseNewTask+0x56>
 800e5a8:	e000      	b.n	800e5ac <prvInitialiseNewTask+0x86>
			{
				break;
 800e5aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e5b4:	e003      	b.n	800e5be <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c0:	2b06      	cmp	r3, #6
 800e5c2:	d901      	bls.n	800e5c8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e5c4:	2306      	movs	r3, #6
 800e5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5d2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff f84f 	bl	800d682 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e6:	3318      	adds	r3, #24
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff f84a 	bl	800d682 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f6:	f1c3 0207 	rsb	r2, r3, #7
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e602:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e606:	2200      	movs	r2, #0
 800e608:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	68f9      	ldr	r1, [r7, #12]
 800e616:	69b8      	ldr	r0, [r7, #24]
 800e618:	f000 ff6e 	bl	800f4f8 <pxPortInitialiseStack>
 800e61c:	4602      	mov	r2, r0
 800e61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e620:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e62c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e62e:	bf00      	nop
 800e630:	3720      	adds	r7, #32
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
	...

0800e638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e640:	f001 f88a 	bl	800f758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e644:	4b2a      	ldr	r3, [pc, #168]	@ (800e6f0 <prvAddNewTaskToReadyList+0xb8>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	3301      	adds	r3, #1
 800e64a:	4a29      	ldr	r2, [pc, #164]	@ (800e6f0 <prvAddNewTaskToReadyList+0xb8>)
 800e64c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e64e:	4b29      	ldr	r3, [pc, #164]	@ (800e6f4 <prvAddNewTaskToReadyList+0xbc>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d109      	bne.n	800e66a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e656:	4a27      	ldr	r2, [pc, #156]	@ (800e6f4 <prvAddNewTaskToReadyList+0xbc>)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e65c:	4b24      	ldr	r3, [pc, #144]	@ (800e6f0 <prvAddNewTaskToReadyList+0xb8>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d110      	bne.n	800e686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e664:	f000 fc64 	bl	800ef30 <prvInitialiseTaskLists>
 800e668:	e00d      	b.n	800e686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e66a:	4b23      	ldr	r3, [pc, #140]	@ (800e6f8 <prvAddNewTaskToReadyList+0xc0>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d109      	bne.n	800e686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e672:	4b20      	ldr	r3, [pc, #128]	@ (800e6f4 <prvAddNewTaskToReadyList+0xbc>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d802      	bhi.n	800e686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e680:	4a1c      	ldr	r2, [pc, #112]	@ (800e6f4 <prvAddNewTaskToReadyList+0xbc>)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e686:	4b1d      	ldr	r3, [pc, #116]	@ (800e6fc <prvAddNewTaskToReadyList+0xc4>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3301      	adds	r3, #1
 800e68c:	4a1b      	ldr	r2, [pc, #108]	@ (800e6fc <prvAddNewTaskToReadyList+0xc4>)
 800e68e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e694:	2201      	movs	r2, #1
 800e696:	409a      	lsls	r2, r3
 800e698:	4b19      	ldr	r3, [pc, #100]	@ (800e700 <prvAddNewTaskToReadyList+0xc8>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4313      	orrs	r3, r2
 800e69e:	4a18      	ldr	r2, [pc, #96]	@ (800e700 <prvAddNewTaskToReadyList+0xc8>)
 800e6a0:	6013      	str	r3, [r2, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4a15      	ldr	r2, [pc, #84]	@ (800e704 <prvAddNewTaskToReadyList+0xcc>)
 800e6b0:	441a      	add	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	f7fe ffef 	bl	800d69c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e6be:	f001 f87d 	bl	800f7bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e6f8 <prvAddNewTaskToReadyList+0xc0>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00e      	beq.n	800e6e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e6ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e6f4 <prvAddNewTaskToReadyList+0xbc>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d207      	bcs.n	800e6e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e708 <prvAddNewTaskToReadyList+0xd0>)
 800e6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6e8:	bf00      	nop
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	20001628 	.word	0x20001628
 800e6f4:	20001528 	.word	0x20001528
 800e6f8:	20001634 	.word	0x20001634
 800e6fc:	20001644 	.word	0x20001644
 800e700:	20001630 	.word	0x20001630
 800e704:	2000152c 	.word	0x2000152c
 800e708:	e000ed04 	.word	0xe000ed04

0800e70c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08a      	sub	sp, #40	@ 0x28
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e716:	2300      	movs	r3, #0
 800e718:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10b      	bne.n	800e738 <vTaskDelayUntil+0x2c>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	617b      	str	r3, [r7, #20]
}
 800e732:	bf00      	nop
 800e734:	bf00      	nop
 800e736:	e7fd      	b.n	800e734 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10b      	bne.n	800e756 <vTaskDelayUntil+0x4a>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	613b      	str	r3, [r7, #16]
}
 800e750:	bf00      	nop
 800e752:	bf00      	nop
 800e754:	e7fd      	b.n	800e752 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800e756:	4b2a      	ldr	r3, [pc, #168]	@ (800e800 <vTaskDelayUntil+0xf4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00b      	beq.n	800e776 <vTaskDelayUntil+0x6a>
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	60fb      	str	r3, [r7, #12]
}
 800e770:	bf00      	nop
 800e772:	bf00      	nop
 800e774:	e7fd      	b.n	800e772 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800e776:	f000 f8e1 	bl	800e93c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e77a:	4b22      	ldr	r3, [pc, #136]	@ (800e804 <vTaskDelayUntil+0xf8>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	683a      	ldr	r2, [r7, #0]
 800e786:	4413      	add	r3, r2
 800e788:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6a3a      	ldr	r2, [r7, #32]
 800e790:	429a      	cmp	r2, r3
 800e792:	d20b      	bcs.n	800e7ac <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	69fa      	ldr	r2, [r7, #28]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d211      	bcs.n	800e7c2 <vTaskDelayUntil+0xb6>
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d90d      	bls.n	800e7c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7aa:	e00a      	b.n	800e7c2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	69fa      	ldr	r2, [r7, #28]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d303      	bcc.n	800e7be <vTaskDelayUntil+0xb2>
 800e7b6:	69fa      	ldr	r2, [r7, #28]
 800e7b8:	6a3b      	ldr	r3, [r7, #32]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d901      	bls.n	800e7c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	69fa      	ldr	r2, [r7, #28]
 800e7c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d006      	beq.n	800e7dc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e7ce:	69fa      	ldr	r2, [r7, #28]
 800e7d0:	6a3b      	ldr	r3, [r7, #32]
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 fe28 	bl	800f42c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e7dc:	f000 f8bc 	bl	800e958 <xTaskResumeAll>
 800e7e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d107      	bne.n	800e7f8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800e7e8:	4b07      	ldr	r3, [pc, #28]	@ (800e808 <vTaskDelayUntil+0xfc>)
 800e7ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7f8:	bf00      	nop
 800e7fa:	3728      	adds	r7, #40	@ 0x28
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	20001650 	.word	0x20001650
 800e804:	2000162c 	.word	0x2000162c
 800e808:	e000ed04 	.word	0xe000ed04

0800e80c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e814:	2300      	movs	r3, #0
 800e816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d018      	beq.n	800e850 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e81e:	4b14      	ldr	r3, [pc, #80]	@ (800e870 <vTaskDelay+0x64>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00b      	beq.n	800e83e <vTaskDelay+0x32>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	60bb      	str	r3, [r7, #8]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e83e:	f000 f87d 	bl	800e93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e842:	2100      	movs	r1, #0
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f000 fdf1 	bl	800f42c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e84a:	f000 f885 	bl	800e958 <xTaskResumeAll>
 800e84e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d107      	bne.n	800e866 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e856:	4b07      	ldr	r3, [pc, #28]	@ (800e874 <vTaskDelay+0x68>)
 800e858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e866:	bf00      	nop
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20001650 	.word	0x20001650
 800e874:	e000ed04 	.word	0xe000ed04

0800e878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08a      	sub	sp, #40	@ 0x28
 800e87c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e882:	2300      	movs	r3, #0
 800e884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e886:	463a      	mov	r2, r7
 800e888:	1d39      	adds	r1, r7, #4
 800e88a:	f107 0308 	add.w	r3, r7, #8
 800e88e:	4618      	mov	r0, r3
 800e890:	f7f4 f844 	bl	800291c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	68ba      	ldr	r2, [r7, #8]
 800e89a:	9202      	str	r2, [sp, #8]
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	460a      	mov	r2, r1
 800e8a6:	491f      	ldr	r1, [pc, #124]	@ (800e924 <vTaskStartScheduler+0xac>)
 800e8a8:	481f      	ldr	r0, [pc, #124]	@ (800e928 <vTaskStartScheduler+0xb0>)
 800e8aa:	f7ff fd97 	bl	800e3dc <xTaskCreateStatic>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	4a1e      	ldr	r2, [pc, #120]	@ (800e92c <vTaskStartScheduler+0xb4>)
 800e8b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e8b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e92c <vTaskStartScheduler+0xb4>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d002      	beq.n	800e8c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	e001      	b.n	800e8c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d116      	bne.n	800e8fa <vTaskStartScheduler+0x82>
	__asm volatile
 800e8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d0:	f383 8811 	msr	BASEPRI, r3
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	613b      	str	r3, [r7, #16]
}
 800e8de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e8e0:	4b13      	ldr	r3, [pc, #76]	@ (800e930 <vTaskStartScheduler+0xb8>)
 800e8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e8e8:	4b12      	ldr	r3, [pc, #72]	@ (800e934 <vTaskStartScheduler+0xbc>)
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e8ee:	4b12      	ldr	r3, [pc, #72]	@ (800e938 <vTaskStartScheduler+0xc0>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e8f4:	f000 fe8c 	bl	800f610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e8f8:	e00f      	b.n	800e91a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e900:	d10b      	bne.n	800e91a <vTaskStartScheduler+0xa2>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	60fb      	str	r3, [r7, #12]
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop
 800e918:	e7fd      	b.n	800e916 <vTaskStartScheduler+0x9e>
}
 800e91a:	bf00      	nop
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	08013d24 	.word	0x08013d24
 800e928:	0800ef01 	.word	0x0800ef01
 800e92c:	2000164c 	.word	0x2000164c
 800e930:	20001648 	.word	0x20001648
 800e934:	20001634 	.word	0x20001634
 800e938:	2000162c 	.word	0x2000162c

0800e93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e93c:	b480      	push	{r7}
 800e93e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e940:	4b04      	ldr	r3, [pc, #16]	@ (800e954 <vTaskSuspendAll+0x18>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	3301      	adds	r3, #1
 800e946:	4a03      	ldr	r2, [pc, #12]	@ (800e954 <vTaskSuspendAll+0x18>)
 800e948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e94a:	bf00      	nop
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	20001650 	.word	0x20001650

0800e958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e95e:	2300      	movs	r3, #0
 800e960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e962:	2300      	movs	r3, #0
 800e964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e966:	4b42      	ldr	r3, [pc, #264]	@ (800ea70 <xTaskResumeAll+0x118>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10b      	bne.n	800e986 <xTaskResumeAll+0x2e>
	__asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	603b      	str	r3, [r7, #0]
}
 800e980:	bf00      	nop
 800e982:	bf00      	nop
 800e984:	e7fd      	b.n	800e982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e986:	f000 fee7 	bl	800f758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e98a:	4b39      	ldr	r3, [pc, #228]	@ (800ea70 <xTaskResumeAll+0x118>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3b01      	subs	r3, #1
 800e990:	4a37      	ldr	r2, [pc, #220]	@ (800ea70 <xTaskResumeAll+0x118>)
 800e992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e994:	4b36      	ldr	r3, [pc, #216]	@ (800ea70 <xTaskResumeAll+0x118>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d161      	bne.n	800ea60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e99c:	4b35      	ldr	r3, [pc, #212]	@ (800ea74 <xTaskResumeAll+0x11c>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d05d      	beq.n	800ea60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9a4:	e02e      	b.n	800ea04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9a6:	4b34      	ldr	r3, [pc, #208]	@ (800ea78 <xTaskResumeAll+0x120>)
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3318      	adds	r3, #24
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fe fecf 	bl	800d756 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3304      	adds	r3, #4
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe feca 	bl	800d756 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	409a      	lsls	r2, r3
 800e9ca:	4b2c      	ldr	r3, [pc, #176]	@ (800ea7c <xTaskResumeAll+0x124>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	4a2a      	ldr	r2, [pc, #168]	@ (800ea7c <xTaskResumeAll+0x124>)
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d8:	4613      	mov	r3, r2
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	4413      	add	r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4a27      	ldr	r2, [pc, #156]	@ (800ea80 <xTaskResumeAll+0x128>)
 800e9e2:	441a      	add	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	f7fe fe56 	bl	800d69c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9f4:	4b23      	ldr	r3, [pc, #140]	@ (800ea84 <xTaskResumeAll+0x12c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d302      	bcc.n	800ea04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e9fe:	4b22      	ldr	r3, [pc, #136]	@ (800ea88 <xTaskResumeAll+0x130>)
 800ea00:	2201      	movs	r2, #1
 800ea02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea04:	4b1c      	ldr	r3, [pc, #112]	@ (800ea78 <xTaskResumeAll+0x120>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1cc      	bne.n	800e9a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ea12:	f000 fb2b 	bl	800f06c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ea16:	4b1d      	ldr	r3, [pc, #116]	@ (800ea8c <xTaskResumeAll+0x134>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d010      	beq.n	800ea44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ea22:	f000 f847 	bl	800eab4 <xTaskIncrementTick>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ea2c:	4b16      	ldr	r3, [pc, #88]	@ (800ea88 <xTaskResumeAll+0x130>)
 800ea2e:	2201      	movs	r2, #1
 800ea30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3b01      	subs	r3, #1
 800ea36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1f1      	bne.n	800ea22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ea3e:	4b13      	ldr	r3, [pc, #76]	@ (800ea8c <xTaskResumeAll+0x134>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ea44:	4b10      	ldr	r3, [pc, #64]	@ (800ea88 <xTaskResumeAll+0x130>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d009      	beq.n	800ea60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ea50:	4b0f      	ldr	r3, [pc, #60]	@ (800ea90 <xTaskResumeAll+0x138>)
 800ea52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea56:	601a      	str	r2, [r3, #0]
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea60:	f000 feac 	bl	800f7bc <vPortExitCritical>

	return xAlreadyYielded;
 800ea64:	68bb      	ldr	r3, [r7, #8]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20001650 	.word	0x20001650
 800ea74:	20001628 	.word	0x20001628
 800ea78:	200015e8 	.word	0x200015e8
 800ea7c:	20001630 	.word	0x20001630
 800ea80:	2000152c 	.word	0x2000152c
 800ea84:	20001528 	.word	0x20001528
 800ea88:	2000163c 	.word	0x2000163c
 800ea8c:	20001638 	.word	0x20001638
 800ea90:	e000ed04 	.word	0xe000ed04

0800ea94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ea9a:	4b05      	ldr	r3, [pc, #20]	@ (800eab0 <xTaskGetTickCount+0x1c>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eaa0:	687b      	ldr	r3, [r7, #4]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	370c      	adds	r7, #12
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	2000162c 	.word	0x2000162c

0800eab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eaba:	2300      	movs	r3, #0
 800eabc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eabe:	4b4f      	ldr	r3, [pc, #316]	@ (800ebfc <xTaskIncrementTick+0x148>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f040 808f 	bne.w	800ebe6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eac8:	4b4d      	ldr	r3, [pc, #308]	@ (800ec00 <xTaskIncrementTick+0x14c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3301      	adds	r3, #1
 800eace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ead0:	4a4b      	ldr	r2, [pc, #300]	@ (800ec00 <xTaskIncrementTick+0x14c>)
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d121      	bne.n	800eb20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800eadc:	4b49      	ldr	r3, [pc, #292]	@ (800ec04 <xTaskIncrementTick+0x150>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00b      	beq.n	800eafe <xTaskIncrementTick+0x4a>
	__asm volatile
 800eae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaea:	f383 8811 	msr	BASEPRI, r3
 800eaee:	f3bf 8f6f 	isb	sy
 800eaf2:	f3bf 8f4f 	dsb	sy
 800eaf6:	603b      	str	r3, [r7, #0]
}
 800eaf8:	bf00      	nop
 800eafa:	bf00      	nop
 800eafc:	e7fd      	b.n	800eafa <xTaskIncrementTick+0x46>
 800eafe:	4b41      	ldr	r3, [pc, #260]	@ (800ec04 <xTaskIncrementTick+0x150>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	60fb      	str	r3, [r7, #12]
 800eb04:	4b40      	ldr	r3, [pc, #256]	@ (800ec08 <xTaskIncrementTick+0x154>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a3e      	ldr	r2, [pc, #248]	@ (800ec04 <xTaskIncrementTick+0x150>)
 800eb0a:	6013      	str	r3, [r2, #0]
 800eb0c:	4a3e      	ldr	r2, [pc, #248]	@ (800ec08 <xTaskIncrementTick+0x154>)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6013      	str	r3, [r2, #0]
 800eb12:	4b3e      	ldr	r3, [pc, #248]	@ (800ec0c <xTaskIncrementTick+0x158>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	3301      	adds	r3, #1
 800eb18:	4a3c      	ldr	r2, [pc, #240]	@ (800ec0c <xTaskIncrementTick+0x158>)
 800eb1a:	6013      	str	r3, [r2, #0]
 800eb1c:	f000 faa6 	bl	800f06c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eb20:	4b3b      	ldr	r3, [pc, #236]	@ (800ec10 <xTaskIncrementTick+0x15c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d348      	bcc.n	800ebbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb2a:	4b36      	ldr	r3, [pc, #216]	@ (800ec04 <xTaskIncrementTick+0x150>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d104      	bne.n	800eb3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb34:	4b36      	ldr	r3, [pc, #216]	@ (800ec10 <xTaskIncrementTick+0x15c>)
 800eb36:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3a:	601a      	str	r2, [r3, #0]
					break;
 800eb3c:	e03e      	b.n	800ebbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb3e:	4b31      	ldr	r3, [pc, #196]	@ (800ec04 <xTaskIncrementTick+0x150>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d203      	bcs.n	800eb5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eb56:	4a2e      	ldr	r2, [pc, #184]	@ (800ec10 <xTaskIncrementTick+0x15c>)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eb5c:	e02e      	b.n	800ebbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	3304      	adds	r3, #4
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fdf7 	bl	800d756 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d004      	beq.n	800eb7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	3318      	adds	r3, #24
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fe fdee 	bl	800d756 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7e:	2201      	movs	r2, #1
 800eb80:	409a      	lsls	r2, r3
 800eb82:	4b24      	ldr	r3, [pc, #144]	@ (800ec14 <xTaskIncrementTick+0x160>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	4a22      	ldr	r2, [pc, #136]	@ (800ec14 <xTaskIncrementTick+0x160>)
 800eb8a:	6013      	str	r3, [r2, #0]
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4a1f      	ldr	r2, [pc, #124]	@ (800ec18 <xTaskIncrementTick+0x164>)
 800eb9a:	441a      	add	r2, r3
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	3304      	adds	r3, #4
 800eba0:	4619      	mov	r1, r3
 800eba2:	4610      	mov	r0, r2
 800eba4:	f7fe fd7a 	bl	800d69c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebac:	4b1b      	ldr	r3, [pc, #108]	@ (800ec1c <xTaskIncrementTick+0x168>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d3b9      	bcc.n	800eb2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebba:	e7b6      	b.n	800eb2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ebbc:	4b17      	ldr	r3, [pc, #92]	@ (800ec1c <xTaskIncrementTick+0x168>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebc2:	4915      	ldr	r1, [pc, #84]	@ (800ec18 <xTaskIncrementTick+0x164>)
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	4413      	add	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	440b      	add	r3, r1
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d901      	bls.n	800ebd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ebd8:	4b11      	ldr	r3, [pc, #68]	@ (800ec20 <xTaskIncrementTick+0x16c>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d007      	beq.n	800ebf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	617b      	str	r3, [r7, #20]
 800ebe4:	e004      	b.n	800ebf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ebe6:	4b0f      	ldr	r3, [pc, #60]	@ (800ec24 <xTaskIncrementTick+0x170>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	3301      	adds	r3, #1
 800ebec:	4a0d      	ldr	r2, [pc, #52]	@ (800ec24 <xTaskIncrementTick+0x170>)
 800ebee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ebf0:	697b      	ldr	r3, [r7, #20]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20001650 	.word	0x20001650
 800ec00:	2000162c 	.word	0x2000162c
 800ec04:	200015e0 	.word	0x200015e0
 800ec08:	200015e4 	.word	0x200015e4
 800ec0c:	20001640 	.word	0x20001640
 800ec10:	20001648 	.word	0x20001648
 800ec14:	20001630 	.word	0x20001630
 800ec18:	2000152c 	.word	0x2000152c
 800ec1c:	20001528 	.word	0x20001528
 800ec20:	2000163c 	.word	0x2000163c
 800ec24:	20001638 	.word	0x20001638

0800ec28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b087      	sub	sp, #28
 800ec2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ec2e:	4b27      	ldr	r3, [pc, #156]	@ (800eccc <vTaskSwitchContext+0xa4>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ec36:	4b26      	ldr	r3, [pc, #152]	@ (800ecd0 <vTaskSwitchContext+0xa8>)
 800ec38:	2201      	movs	r2, #1
 800ec3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ec3c:	e040      	b.n	800ecc0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ec3e:	4b24      	ldr	r3, [pc, #144]	@ (800ecd0 <vTaskSwitchContext+0xa8>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec44:	4b23      	ldr	r3, [pc, #140]	@ (800ecd4 <vTaskSwitchContext+0xac>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	fab3 f383 	clz	r3, r3
 800ec50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ec52:	7afb      	ldrb	r3, [r7, #11]
 800ec54:	f1c3 031f 	rsb	r3, r3, #31
 800ec58:	617b      	str	r3, [r7, #20]
 800ec5a:	491f      	ldr	r1, [pc, #124]	@ (800ecd8 <vTaskSwitchContext+0xb0>)
 800ec5c:	697a      	ldr	r2, [r7, #20]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4413      	add	r3, r2
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	440b      	add	r3, r1
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10b      	bne.n	800ec86 <vTaskSwitchContext+0x5e>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	607b      	str	r3, [r7, #4]
}
 800ec80:	bf00      	nop
 800ec82:	bf00      	nop
 800ec84:	e7fd      	b.n	800ec82 <vTaskSwitchContext+0x5a>
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	4413      	add	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	4a11      	ldr	r2, [pc, #68]	@ (800ecd8 <vTaskSwitchContext+0xb0>)
 800ec92:	4413      	add	r3, r2
 800ec94:	613b      	str	r3, [r7, #16]
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	685a      	ldr	r2, [r3, #4]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	605a      	str	r2, [r3, #4]
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	3308      	adds	r3, #8
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d104      	bne.n	800ecb6 <vTaskSwitchContext+0x8e>
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	685a      	ldr	r2, [r3, #4]
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	605a      	str	r2, [r3, #4]
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	4a07      	ldr	r2, [pc, #28]	@ (800ecdc <vTaskSwitchContext+0xb4>)
 800ecbe:	6013      	str	r3, [r2, #0]
}
 800ecc0:	bf00      	nop
 800ecc2:	371c      	adds	r7, #28
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr
 800eccc:	20001650 	.word	0x20001650
 800ecd0:	2000163c 	.word	0x2000163c
 800ecd4:	20001630 	.word	0x20001630
 800ecd8:	2000152c 	.word	0x2000152c
 800ecdc:	20001528 	.word	0x20001528

0800ece0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10b      	bne.n	800ed08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ecf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	60fb      	str	r3, [r7, #12]
}
 800ed02:	bf00      	nop
 800ed04:	bf00      	nop
 800ed06:	e7fd      	b.n	800ed04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed08:	4b07      	ldr	r3, [pc, #28]	@ (800ed28 <vTaskPlaceOnEventList+0x48>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	3318      	adds	r3, #24
 800ed0e:	4619      	mov	r1, r3
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7fe fce7 	bl	800d6e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ed16:	2101      	movs	r1, #1
 800ed18:	6838      	ldr	r0, [r7, #0]
 800ed1a:	f000 fb87 	bl	800f42c <prvAddCurrentTaskToDelayedList>
}
 800ed1e:	bf00      	nop
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20001528 	.word	0x20001528

0800ed2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10b      	bne.n	800ed5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	60fb      	str	r3, [r7, #12]
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	e7fd      	b.n	800ed56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	3318      	adds	r3, #24
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fe fcf9 	bl	800d756 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed64:	4b1d      	ldr	r3, [pc, #116]	@ (800eddc <xTaskRemoveFromEventList+0xb0>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d11c      	bne.n	800eda6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fe fcf0 	bl	800d756 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	409a      	lsls	r2, r3
 800ed7e:	4b18      	ldr	r3, [pc, #96]	@ (800ede0 <xTaskRemoveFromEventList+0xb4>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	4a16      	ldr	r2, [pc, #88]	@ (800ede0 <xTaskRemoveFromEventList+0xb4>)
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4413      	add	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4a13      	ldr	r2, [pc, #76]	@ (800ede4 <xTaskRemoveFromEventList+0xb8>)
 800ed96:	441a      	add	r2, r3
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4610      	mov	r0, r2
 800eda0:	f7fe fc7c 	bl	800d69c <vListInsertEnd>
 800eda4:	e005      	b.n	800edb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	3318      	adds	r3, #24
 800edaa:	4619      	mov	r1, r3
 800edac:	480e      	ldr	r0, [pc, #56]	@ (800ede8 <xTaskRemoveFromEventList+0xbc>)
 800edae:	f7fe fc75 	bl	800d69c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb6:	4b0d      	ldr	r3, [pc, #52]	@ (800edec <xTaskRemoveFromEventList+0xc0>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d905      	bls.n	800edcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800edc0:	2301      	movs	r3, #1
 800edc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800edc4:	4b0a      	ldr	r3, [pc, #40]	@ (800edf0 <xTaskRemoveFromEventList+0xc4>)
 800edc6:	2201      	movs	r2, #1
 800edc8:	601a      	str	r2, [r3, #0]
 800edca:	e001      	b.n	800edd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800edcc:	2300      	movs	r3, #0
 800edce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800edd0:	697b      	ldr	r3, [r7, #20]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20001650 	.word	0x20001650
 800ede0:	20001630 	.word	0x20001630
 800ede4:	2000152c 	.word	0x2000152c
 800ede8:	200015e8 	.word	0x200015e8
 800edec:	20001528 	.word	0x20001528
 800edf0:	2000163c 	.word	0x2000163c

0800edf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800edfc:	4b06      	ldr	r3, [pc, #24]	@ (800ee18 <vTaskInternalSetTimeOutState+0x24>)
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ee04:	4b05      	ldr	r3, [pc, #20]	@ (800ee1c <vTaskInternalSetTimeOutState+0x28>)
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	605a      	str	r2, [r3, #4]
}
 800ee0c:	bf00      	nop
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	20001640 	.word	0x20001640
 800ee1c:	2000162c 	.word	0x2000162c

0800ee20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10b      	bne.n	800ee48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	613b      	str	r3, [r7, #16]
}
 800ee42:	bf00      	nop
 800ee44:	bf00      	nop
 800ee46:	e7fd      	b.n	800ee44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10b      	bne.n	800ee66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	60fb      	str	r3, [r7, #12]
}
 800ee60:	bf00      	nop
 800ee62:	bf00      	nop
 800ee64:	e7fd      	b.n	800ee62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ee66:	f000 fc77 	bl	800f758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee6a:	4b1d      	ldr	r3, [pc, #116]	@ (800eee0 <xTaskCheckForTimeOut+0xc0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	69ba      	ldr	r2, [r7, #24]
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee82:	d102      	bne.n	800ee8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee84:	2300      	movs	r3, #0
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	e023      	b.n	800eed2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4b15      	ldr	r3, [pc, #84]	@ (800eee4 <xTaskCheckForTimeOut+0xc4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d007      	beq.n	800eea6 <xTaskCheckForTimeOut+0x86>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d302      	bcc.n	800eea6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eea0:	2301      	movs	r3, #1
 800eea2:	61fb      	str	r3, [r7, #28]
 800eea4:	e015      	b.n	800eed2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	697a      	ldr	r2, [r7, #20]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d20b      	bcs.n	800eec8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	1ad2      	subs	r2, r2, r3
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff ff99 	bl	800edf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eec2:	2300      	movs	r3, #0
 800eec4:	61fb      	str	r3, [r7, #28]
 800eec6:	e004      	b.n	800eed2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2200      	movs	r2, #0
 800eecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eece:	2301      	movs	r3, #1
 800eed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eed2:	f000 fc73 	bl	800f7bc <vPortExitCritical>

	return xReturn;
 800eed6:	69fb      	ldr	r3, [r7, #28]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3720      	adds	r7, #32
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	2000162c 	.word	0x2000162c
 800eee4:	20001640 	.word	0x20001640

0800eee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eee8:	b480      	push	{r7}
 800eeea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eeec:	4b03      	ldr	r3, [pc, #12]	@ (800eefc <vTaskMissedYield+0x14>)
 800eeee:	2201      	movs	r2, #1
 800eef0:	601a      	str	r2, [r3, #0]
}
 800eef2:	bf00      	nop
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	2000163c 	.word	0x2000163c

0800ef00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ef08:	f000 f852 	bl	800efb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ef0c:	4b06      	ldr	r3, [pc, #24]	@ (800ef28 <prvIdleTask+0x28>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d9f9      	bls.n	800ef08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ef14:	4b05      	ldr	r3, [pc, #20]	@ (800ef2c <prvIdleTask+0x2c>)
 800ef16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ef24:	e7f0      	b.n	800ef08 <prvIdleTask+0x8>
 800ef26:	bf00      	nop
 800ef28:	2000152c 	.word	0x2000152c
 800ef2c:	e000ed04 	.word	0xe000ed04

0800ef30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef36:	2300      	movs	r3, #0
 800ef38:	607b      	str	r3, [r7, #4]
 800ef3a:	e00c      	b.n	800ef56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	4413      	add	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4a12      	ldr	r2, [pc, #72]	@ (800ef90 <prvInitialiseTaskLists+0x60>)
 800ef48:	4413      	add	r3, r2
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fb79 	bl	800d642 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3301      	adds	r3, #1
 800ef54:	607b      	str	r3, [r7, #4]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b06      	cmp	r3, #6
 800ef5a:	d9ef      	bls.n	800ef3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef5c:	480d      	ldr	r0, [pc, #52]	@ (800ef94 <prvInitialiseTaskLists+0x64>)
 800ef5e:	f7fe fb70 	bl	800d642 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef62:	480d      	ldr	r0, [pc, #52]	@ (800ef98 <prvInitialiseTaskLists+0x68>)
 800ef64:	f7fe fb6d 	bl	800d642 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef68:	480c      	ldr	r0, [pc, #48]	@ (800ef9c <prvInitialiseTaskLists+0x6c>)
 800ef6a:	f7fe fb6a 	bl	800d642 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef6e:	480c      	ldr	r0, [pc, #48]	@ (800efa0 <prvInitialiseTaskLists+0x70>)
 800ef70:	f7fe fb67 	bl	800d642 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef74:	480b      	ldr	r0, [pc, #44]	@ (800efa4 <prvInitialiseTaskLists+0x74>)
 800ef76:	f7fe fb64 	bl	800d642 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef7a:	4b0b      	ldr	r3, [pc, #44]	@ (800efa8 <prvInitialiseTaskLists+0x78>)
 800ef7c:	4a05      	ldr	r2, [pc, #20]	@ (800ef94 <prvInitialiseTaskLists+0x64>)
 800ef7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef80:	4b0a      	ldr	r3, [pc, #40]	@ (800efac <prvInitialiseTaskLists+0x7c>)
 800ef82:	4a05      	ldr	r2, [pc, #20]	@ (800ef98 <prvInitialiseTaskLists+0x68>)
 800ef84:	601a      	str	r2, [r3, #0]
}
 800ef86:	bf00      	nop
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	2000152c 	.word	0x2000152c
 800ef94:	200015b8 	.word	0x200015b8
 800ef98:	200015cc 	.word	0x200015cc
 800ef9c:	200015e8 	.word	0x200015e8
 800efa0:	200015fc 	.word	0x200015fc
 800efa4:	20001614 	.word	0x20001614
 800efa8:	200015e0 	.word	0x200015e0
 800efac:	200015e4 	.word	0x200015e4

0800efb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efb6:	e019      	b.n	800efec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800efb8:	f000 fbce 	bl	800f758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efbc:	4b10      	ldr	r3, [pc, #64]	@ (800f000 <prvCheckTasksWaitingTermination+0x50>)
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	3304      	adds	r3, #4
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fe fbc4 	bl	800d756 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800efce:	4b0d      	ldr	r3, [pc, #52]	@ (800f004 <prvCheckTasksWaitingTermination+0x54>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	3b01      	subs	r3, #1
 800efd4:	4a0b      	ldr	r2, [pc, #44]	@ (800f004 <prvCheckTasksWaitingTermination+0x54>)
 800efd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800efd8:	4b0b      	ldr	r3, [pc, #44]	@ (800f008 <prvCheckTasksWaitingTermination+0x58>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	3b01      	subs	r3, #1
 800efde:	4a0a      	ldr	r2, [pc, #40]	@ (800f008 <prvCheckTasksWaitingTermination+0x58>)
 800efe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800efe2:	f000 fbeb 	bl	800f7bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 f810 	bl	800f00c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efec:	4b06      	ldr	r3, [pc, #24]	@ (800f008 <prvCheckTasksWaitingTermination+0x58>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1e1      	bne.n	800efb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	200015fc 	.word	0x200015fc
 800f004:	20001628 	.word	0x20001628
 800f008:	20001610 	.word	0x20001610

0800f00c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d108      	bne.n	800f030 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f022:	4618      	mov	r0, r3
 800f024:	f000 fd88 	bl	800fb38 <vPortFree>
				vPortFree( pxTCB );
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fd85 	bl	800fb38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f02e:	e019      	b.n	800f064 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f036:	2b01      	cmp	r3, #1
 800f038:	d103      	bne.n	800f042 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fd7c 	bl	800fb38 <vPortFree>
	}
 800f040:	e010      	b.n	800f064 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f048:	2b02      	cmp	r3, #2
 800f04a:	d00b      	beq.n	800f064 <prvDeleteTCB+0x58>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	60fb      	str	r3, [r7, #12]
}
 800f05e:	bf00      	nop
 800f060:	bf00      	nop
 800f062:	e7fd      	b.n	800f060 <prvDeleteTCB+0x54>
	}
 800f064:	bf00      	nop
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f072:	4b0c      	ldr	r3, [pc, #48]	@ (800f0a4 <prvResetNextTaskUnblockTime+0x38>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d104      	bne.n	800f086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f07c:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295
 800f082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f084:	e008      	b.n	800f098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f086:	4b07      	ldr	r3, [pc, #28]	@ (800f0a4 <prvResetNextTaskUnblockTime+0x38>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	4a04      	ldr	r2, [pc, #16]	@ (800f0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f096:	6013      	str	r3, [r2, #0]
}
 800f098:	bf00      	nop
 800f09a:	370c      	adds	r7, #12
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr
 800f0a4:	200015e0 	.word	0x200015e0
 800f0a8:	20001648 	.word	0x20001648

0800f0ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e0 <xTaskGetSchedulerState+0x34>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d102      	bne.n	800f0c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	607b      	str	r3, [r7, #4]
 800f0be:	e008      	b.n	800f0d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0c0:	4b08      	ldr	r3, [pc, #32]	@ (800f0e4 <xTaskGetSchedulerState+0x38>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d102      	bne.n	800f0ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	607b      	str	r3, [r7, #4]
 800f0cc:	e001      	b.n	800f0d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0d2:	687b      	ldr	r3, [r7, #4]
	}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	20001634 	.word	0x20001634
 800f0e4:	20001650 	.word	0x20001650

0800f0e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d05e      	beq.n	800f1bc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f102:	4b31      	ldr	r3, [pc, #196]	@ (800f1c8 <xTaskPriorityInherit+0xe0>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f108:	429a      	cmp	r2, r3
 800f10a:	d24e      	bcs.n	800f1aa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	2b00      	cmp	r3, #0
 800f112:	db06      	blt.n	800f122 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f114:	4b2c      	ldr	r3, [pc, #176]	@ (800f1c8 <xTaskPriorityInherit+0xe0>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f11a:	f1c3 0207 	rsb	r2, r3, #7
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	6959      	ldr	r1, [r3, #20]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f12a:	4613      	mov	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	4a26      	ldr	r2, [pc, #152]	@ (800f1cc <xTaskPriorityInherit+0xe4>)
 800f134:	4413      	add	r3, r2
 800f136:	4299      	cmp	r1, r3
 800f138:	d12f      	bne.n	800f19a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	3304      	adds	r3, #4
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fe fb09 	bl	800d756 <uxListRemove>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10a      	bne.n	800f160 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f14e:	2201      	movs	r2, #1
 800f150:	fa02 f303 	lsl.w	r3, r2, r3
 800f154:	43da      	mvns	r2, r3
 800f156:	4b1e      	ldr	r3, [pc, #120]	@ (800f1d0 <xTaskPriorityInherit+0xe8>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4013      	ands	r3, r2
 800f15c:	4a1c      	ldr	r2, [pc, #112]	@ (800f1d0 <xTaskPriorityInherit+0xe8>)
 800f15e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f160:	4b19      	ldr	r3, [pc, #100]	@ (800f1c8 <xTaskPriorityInherit+0xe0>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f16e:	2201      	movs	r2, #1
 800f170:	409a      	lsls	r2, r3
 800f172:	4b17      	ldr	r3, [pc, #92]	@ (800f1d0 <xTaskPriorityInherit+0xe8>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4313      	orrs	r3, r2
 800f178:	4a15      	ldr	r2, [pc, #84]	@ (800f1d0 <xTaskPriorityInherit+0xe8>)
 800f17a:	6013      	str	r3, [r2, #0]
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f180:	4613      	mov	r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	4413      	add	r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4a10      	ldr	r2, [pc, #64]	@ (800f1cc <xTaskPriorityInherit+0xe4>)
 800f18a:	441a      	add	r2, r3
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	3304      	adds	r3, #4
 800f190:	4619      	mov	r1, r3
 800f192:	4610      	mov	r0, r2
 800f194:	f7fe fa82 	bl	800d69c <vListInsertEnd>
 800f198:	e004      	b.n	800f1a4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f19a:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c8 <xTaskPriorityInherit+0xe0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	60fb      	str	r3, [r7, #12]
 800f1a8:	e008      	b.n	800f1bc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1ae:	4b06      	ldr	r3, [pc, #24]	@ (800f1c8 <xTaskPriorityInherit+0xe0>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d201      	bcs.n	800f1bc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
	}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	20001528 	.word	0x20001528
 800f1cc:	2000152c 	.word	0x2000152c
 800f1d0:	20001630 	.word	0x20001630

0800f1d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d070      	beq.n	800f2cc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f1ea:	4b3b      	ldr	r3, [pc, #236]	@ (800f2d8 <xTaskPriorityDisinherit+0x104>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	693a      	ldr	r2, [r7, #16]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d00b      	beq.n	800f20c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	60fb      	str	r3, [r7, #12]
}
 800f206:	bf00      	nop
 800f208:	bf00      	nop
 800f20a:	e7fd      	b.n	800f208 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f210:	2b00      	cmp	r3, #0
 800f212:	d10b      	bne.n	800f22c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	60bb      	str	r3, [r7, #8]
}
 800f226:	bf00      	nop
 800f228:	bf00      	nop
 800f22a:	e7fd      	b.n	800f228 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f230:	1e5a      	subs	r2, r3, #1
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f23e:	429a      	cmp	r2, r3
 800f240:	d044      	beq.n	800f2cc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f246:	2b00      	cmp	r3, #0
 800f248:	d140      	bne.n	800f2cc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	3304      	adds	r3, #4
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fe fa81 	bl	800d756 <uxListRemove>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d115      	bne.n	800f286 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f25e:	491f      	ldr	r1, [pc, #124]	@ (800f2dc <xTaskPriorityDisinherit+0x108>)
 800f260:	4613      	mov	r3, r2
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	440b      	add	r3, r1
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10a      	bne.n	800f286 <xTaskPriorityDisinherit+0xb2>
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f274:	2201      	movs	r2, #1
 800f276:	fa02 f303 	lsl.w	r3, r2, r3
 800f27a:	43da      	mvns	r2, r3
 800f27c:	4b18      	ldr	r3, [pc, #96]	@ (800f2e0 <xTaskPriorityDisinherit+0x10c>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4013      	ands	r3, r2
 800f282:	4a17      	ldr	r2, [pc, #92]	@ (800f2e0 <xTaskPriorityDisinherit+0x10c>)
 800f284:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f292:	f1c3 0207 	rsb	r2, r3, #7
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f29e:	2201      	movs	r2, #1
 800f2a0:	409a      	lsls	r2, r3
 800f2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f2e0 <xTaskPriorityDisinherit+0x10c>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	4a0d      	ldr	r2, [pc, #52]	@ (800f2e0 <xTaskPriorityDisinherit+0x10c>)
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	4413      	add	r3, r2
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	4a08      	ldr	r2, [pc, #32]	@ (800f2dc <xTaskPriorityDisinherit+0x108>)
 800f2ba:	441a      	add	r2, r3
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	4610      	mov	r0, r2
 800f2c4:	f7fe f9ea 	bl	800d69c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f2cc:	697b      	ldr	r3, [r7, #20]
	}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20001528 	.word	0x20001528
 800f2dc:	2000152c 	.word	0x2000152c
 800f2e0:	20001630 	.word	0x20001630

0800f2e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d079      	beq.n	800f3f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10b      	bne.n	800f31c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	60fb      	str	r3, [r7, #12]
}
 800f316:	bf00      	nop
 800f318:	bf00      	nop
 800f31a:	e7fd      	b.n	800f318 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f320:	683a      	ldr	r2, [r7, #0]
 800f322:	429a      	cmp	r2, r3
 800f324:	d902      	bls.n	800f32c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	61fb      	str	r3, [r7, #28]
 800f32a:	e002      	b.n	800f332 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f330:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f336:	69fa      	ldr	r2, [r7, #28]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d059      	beq.n	800f3f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f340:	697a      	ldr	r2, [r7, #20]
 800f342:	429a      	cmp	r2, r3
 800f344:	d154      	bne.n	800f3f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f346:	4b2c      	ldr	r3, [pc, #176]	@ (800f3f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	69ba      	ldr	r2, [r7, #24]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d10b      	bne.n	800f368 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	60bb      	str	r3, [r7, #8]
}
 800f362:	bf00      	nop
 800f364:	bf00      	nop
 800f366:	e7fd      	b.n	800f364 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f36c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	69fa      	ldr	r2, [r7, #28]
 800f372:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	699b      	ldr	r3, [r3, #24]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	db04      	blt.n	800f386 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	f1c3 0207 	rsb	r2, r3, #7
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	6959      	ldr	r1, [r3, #20]
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	4613      	mov	r3, r2
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	4413      	add	r3, r2
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	4a19      	ldr	r2, [pc, #100]	@ (800f3fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f396:	4413      	add	r3, r2
 800f398:	4299      	cmp	r1, r3
 800f39a:	d129      	bne.n	800f3f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	3304      	adds	r3, #4
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fe f9d8 	bl	800d756 <uxListRemove>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10a      	bne.n	800f3c2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b6:	43da      	mvns	r2, r3
 800f3b8:	4b11      	ldr	r3, [pc, #68]	@ (800f400 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4013      	ands	r3, r2
 800f3be:	4a10      	ldr	r2, [pc, #64]	@ (800f400 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f3c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	409a      	lsls	r2, r3
 800f3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f400 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	4a0b      	ldr	r2, [pc, #44]	@ (800f400 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f3d2:	6013      	str	r3, [r2, #0]
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d8:	4613      	mov	r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	4413      	add	r3, r2
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	4a06      	ldr	r2, [pc, #24]	@ (800f3fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f3e2:	441a      	add	r2, r3
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	3304      	adds	r3, #4
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	4610      	mov	r0, r2
 800f3ec:	f7fe f956 	bl	800d69c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3f0:	bf00      	nop
 800f3f2:	3720      	adds	r7, #32
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	20001528 	.word	0x20001528
 800f3fc:	2000152c 	.word	0x2000152c
 800f400:	20001630 	.word	0x20001630

0800f404 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f404:	b480      	push	{r7}
 800f406:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f408:	4b07      	ldr	r3, [pc, #28]	@ (800f428 <pvTaskIncrementMutexHeldCount+0x24>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d004      	beq.n	800f41a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f410:	4b05      	ldr	r3, [pc, #20]	@ (800f428 <pvTaskIncrementMutexHeldCount+0x24>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f416:	3201      	adds	r2, #1
 800f418:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f41a:	4b03      	ldr	r3, [pc, #12]	@ (800f428 <pvTaskIncrementMutexHeldCount+0x24>)
 800f41c:	681b      	ldr	r3, [r3, #0]
	}
 800f41e:	4618      	mov	r0, r3
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	20001528 	.word	0x20001528

0800f42c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f436:	4b29      	ldr	r3, [pc, #164]	@ (800f4dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f43c:	4b28      	ldr	r3, [pc, #160]	@ (800f4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3304      	adds	r3, #4
 800f442:	4618      	mov	r0, r3
 800f444:	f7fe f987 	bl	800d756 <uxListRemove>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d10b      	bne.n	800f466 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f44e:	4b24      	ldr	r3, [pc, #144]	@ (800f4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f454:	2201      	movs	r2, #1
 800f456:	fa02 f303 	lsl.w	r3, r2, r3
 800f45a:	43da      	mvns	r2, r3
 800f45c:	4b21      	ldr	r3, [pc, #132]	@ (800f4e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4013      	ands	r3, r2
 800f462:	4a20      	ldr	r2, [pc, #128]	@ (800f4e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f464:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f46c:	d10a      	bne.n	800f484 <prvAddCurrentTaskToDelayedList+0x58>
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d007      	beq.n	800f484 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f474:	4b1a      	ldr	r3, [pc, #104]	@ (800f4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	3304      	adds	r3, #4
 800f47a:	4619      	mov	r1, r3
 800f47c:	481a      	ldr	r0, [pc, #104]	@ (800f4e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f47e:	f7fe f90d 	bl	800d69c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f482:	e026      	b.n	800f4d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4413      	add	r3, r2
 800f48a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f48c:	4b14      	ldr	r3, [pc, #80]	@ (800f4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d209      	bcs.n	800f4b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f49c:	4b13      	ldr	r3, [pc, #76]	@ (800f4ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	4b0f      	ldr	r3, [pc, #60]	@ (800f4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	f7fe f91b 	bl	800d6e4 <vListInsert>
}
 800f4ae:	e010      	b.n	800f4d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3304      	adds	r3, #4
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	4610      	mov	r0, r2
 800f4be:	f7fe f911 	bl	800d6e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f4f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	68ba      	ldr	r2, [r7, #8]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d202      	bcs.n	800f4d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f4cc:	4a09      	ldr	r2, [pc, #36]	@ (800f4f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	6013      	str	r3, [r2, #0]
}
 800f4d2:	bf00      	nop
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	2000162c 	.word	0x2000162c
 800f4e0:	20001528 	.word	0x20001528
 800f4e4:	20001630 	.word	0x20001630
 800f4e8:	20001614 	.word	0x20001614
 800f4ec:	200015e4 	.word	0x200015e4
 800f4f0:	200015e0 	.word	0x200015e0
 800f4f4:	20001648 	.word	0x20001648

0800f4f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	3b04      	subs	r3, #4
 800f508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3b04      	subs	r3, #4
 800f516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f023 0201 	bic.w	r2, r3, #1
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	3b04      	subs	r3, #4
 800f526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f528:	4a0c      	ldr	r2, [pc, #48]	@ (800f55c <pxPortInitialiseStack+0x64>)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3b14      	subs	r3, #20
 800f532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3b04      	subs	r3, #4
 800f53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f06f 0202 	mvn.w	r2, #2
 800f546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3b20      	subs	r3, #32
 800f54c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f54e:	68fb      	ldr	r3, [r7, #12]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3714      	adds	r7, #20
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	0800f561 	.word	0x0800f561

0800f560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f56a:	4b13      	ldr	r3, [pc, #76]	@ (800f5b8 <prvTaskExitError+0x58>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f572:	d00b      	beq.n	800f58c <prvTaskExitError+0x2c>
	__asm volatile
 800f574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f578:	f383 8811 	msr	BASEPRI, r3
 800f57c:	f3bf 8f6f 	isb	sy
 800f580:	f3bf 8f4f 	dsb	sy
 800f584:	60fb      	str	r3, [r7, #12]
}
 800f586:	bf00      	nop
 800f588:	bf00      	nop
 800f58a:	e7fd      	b.n	800f588 <prvTaskExitError+0x28>
	__asm volatile
 800f58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f590:	f383 8811 	msr	BASEPRI, r3
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	60bb      	str	r3, [r7, #8]
}
 800f59e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5a0:	bf00      	nop
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d0fc      	beq.n	800f5a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5a8:	bf00      	nop
 800f5aa:	bf00      	nop
 800f5ac:	3714      	adds	r7, #20
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	2000000c 	.word	0x2000000c
 800f5bc:	00000000 	.word	0x00000000

0800f5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5c0:	4b07      	ldr	r3, [pc, #28]	@ (800f5e0 <pxCurrentTCBConst2>)
 800f5c2:	6819      	ldr	r1, [r3, #0]
 800f5c4:	6808      	ldr	r0, [r1, #0]
 800f5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ca:	f380 8809 	msr	PSP, r0
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f04f 0000 	mov.w	r0, #0
 800f5d6:	f380 8811 	msr	BASEPRI, r0
 800f5da:	4770      	bx	lr
 800f5dc:	f3af 8000 	nop.w

0800f5e0 <pxCurrentTCBConst2>:
 800f5e0:	20001528 	.word	0x20001528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5e4:	bf00      	nop
 800f5e6:	bf00      	nop

0800f5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5e8:	4808      	ldr	r0, [pc, #32]	@ (800f60c <prvPortStartFirstTask+0x24>)
 800f5ea:	6800      	ldr	r0, [r0, #0]
 800f5ec:	6800      	ldr	r0, [r0, #0]
 800f5ee:	f380 8808 	msr	MSP, r0
 800f5f2:	f04f 0000 	mov.w	r0, #0
 800f5f6:	f380 8814 	msr	CONTROL, r0
 800f5fa:	b662      	cpsie	i
 800f5fc:	b661      	cpsie	f
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	df00      	svc	0
 800f608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f60a:	bf00      	nop
 800f60c:	e000ed08 	.word	0xe000ed08

0800f610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f616:	4b47      	ldr	r3, [pc, #284]	@ (800f734 <xPortStartScheduler+0x124>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a47      	ldr	r2, [pc, #284]	@ (800f738 <xPortStartScheduler+0x128>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d10b      	bne.n	800f638 <xPortStartScheduler+0x28>
	__asm volatile
 800f620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f624:	f383 8811 	msr	BASEPRI, r3
 800f628:	f3bf 8f6f 	isb	sy
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	613b      	str	r3, [r7, #16]
}
 800f632:	bf00      	nop
 800f634:	bf00      	nop
 800f636:	e7fd      	b.n	800f634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f638:	4b3e      	ldr	r3, [pc, #248]	@ (800f734 <xPortStartScheduler+0x124>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a3f      	ldr	r2, [pc, #252]	@ (800f73c <xPortStartScheduler+0x12c>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d10b      	bne.n	800f65a <xPortStartScheduler+0x4a>
	__asm volatile
 800f642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f646:	f383 8811 	msr	BASEPRI, r3
 800f64a:	f3bf 8f6f 	isb	sy
 800f64e:	f3bf 8f4f 	dsb	sy
 800f652:	60fb      	str	r3, [r7, #12]
}
 800f654:	bf00      	nop
 800f656:	bf00      	nop
 800f658:	e7fd      	b.n	800f656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f65a:	4b39      	ldr	r3, [pc, #228]	@ (800f740 <xPortStartScheduler+0x130>)
 800f65c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	b2db      	uxtb	r3, r3
 800f664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	22ff      	movs	r2, #255	@ 0xff
 800f66a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	b2db      	uxtb	r3, r3
 800f672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f674:	78fb      	ldrb	r3, [r7, #3]
 800f676:	b2db      	uxtb	r3, r3
 800f678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f67c:	b2da      	uxtb	r2, r3
 800f67e:	4b31      	ldr	r3, [pc, #196]	@ (800f744 <xPortStartScheduler+0x134>)
 800f680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f682:	4b31      	ldr	r3, [pc, #196]	@ (800f748 <xPortStartScheduler+0x138>)
 800f684:	2207      	movs	r2, #7
 800f686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f688:	e009      	b.n	800f69e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f68a:	4b2f      	ldr	r3, [pc, #188]	@ (800f748 <xPortStartScheduler+0x138>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	3b01      	subs	r3, #1
 800f690:	4a2d      	ldr	r2, [pc, #180]	@ (800f748 <xPortStartScheduler+0x138>)
 800f692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f694:	78fb      	ldrb	r3, [r7, #3]
 800f696:	b2db      	uxtb	r3, r3
 800f698:	005b      	lsls	r3, r3, #1
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f69e:	78fb      	ldrb	r3, [r7, #3]
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6a6:	2b80      	cmp	r3, #128	@ 0x80
 800f6a8:	d0ef      	beq.n	800f68a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6aa:	4b27      	ldr	r3, [pc, #156]	@ (800f748 <xPortStartScheduler+0x138>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f1c3 0307 	rsb	r3, r3, #7
 800f6b2:	2b04      	cmp	r3, #4
 800f6b4:	d00b      	beq.n	800f6ce <xPortStartScheduler+0xbe>
	__asm volatile
 800f6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ba:	f383 8811 	msr	BASEPRI, r3
 800f6be:	f3bf 8f6f 	isb	sy
 800f6c2:	f3bf 8f4f 	dsb	sy
 800f6c6:	60bb      	str	r3, [r7, #8]
}
 800f6c8:	bf00      	nop
 800f6ca:	bf00      	nop
 800f6cc:	e7fd      	b.n	800f6ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800f748 <xPortStartScheduler+0x138>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	021b      	lsls	r3, r3, #8
 800f6d4:	4a1c      	ldr	r2, [pc, #112]	@ (800f748 <xPortStartScheduler+0x138>)
 800f6d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6d8:	4b1b      	ldr	r3, [pc, #108]	@ (800f748 <xPortStartScheduler+0x138>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f6e0:	4a19      	ldr	r2, [pc, #100]	@ (800f748 <xPortStartScheduler+0x138>)
 800f6e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	b2da      	uxtb	r2, r3
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6ec:	4b17      	ldr	r3, [pc, #92]	@ (800f74c <xPortStartScheduler+0x13c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a16      	ldr	r2, [pc, #88]	@ (800f74c <xPortStartScheduler+0x13c>)
 800f6f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f6f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6f8:	4b14      	ldr	r3, [pc, #80]	@ (800f74c <xPortStartScheduler+0x13c>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a13      	ldr	r2, [pc, #76]	@ (800f74c <xPortStartScheduler+0x13c>)
 800f6fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f704:	f000 f8da 	bl	800f8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f708:	4b11      	ldr	r3, [pc, #68]	@ (800f750 <xPortStartScheduler+0x140>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f70e:	f000 f8f9 	bl	800f904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f712:	4b10      	ldr	r3, [pc, #64]	@ (800f754 <xPortStartScheduler+0x144>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a0f      	ldr	r2, [pc, #60]	@ (800f754 <xPortStartScheduler+0x144>)
 800f718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f71c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f71e:	f7ff ff63 	bl	800f5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f722:	f7ff fa81 	bl	800ec28 <vTaskSwitchContext>
	prvTaskExitError();
 800f726:	f7ff ff1b 	bl	800f560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	e000ed00 	.word	0xe000ed00
 800f738:	410fc271 	.word	0x410fc271
 800f73c:	410fc270 	.word	0x410fc270
 800f740:	e000e400 	.word	0xe000e400
 800f744:	20001654 	.word	0x20001654
 800f748:	20001658 	.word	0x20001658
 800f74c:	e000ed20 	.word	0xe000ed20
 800f750:	2000000c 	.word	0x2000000c
 800f754:	e000ef34 	.word	0xe000ef34

0800f758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
	__asm volatile
 800f75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	607b      	str	r3, [r7, #4]
}
 800f770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f772:	4b10      	ldr	r3, [pc, #64]	@ (800f7b4 <vPortEnterCritical+0x5c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	3301      	adds	r3, #1
 800f778:	4a0e      	ldr	r2, [pc, #56]	@ (800f7b4 <vPortEnterCritical+0x5c>)
 800f77a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f77c:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b4 <vPortEnterCritical+0x5c>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b01      	cmp	r3, #1
 800f782:	d110      	bne.n	800f7a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f784:	4b0c      	ldr	r3, [pc, #48]	@ (800f7b8 <vPortEnterCritical+0x60>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00b      	beq.n	800f7a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f792:	f383 8811 	msr	BASEPRI, r3
 800f796:	f3bf 8f6f 	isb	sy
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	603b      	str	r3, [r7, #0]
}
 800f7a0:	bf00      	nop
 800f7a2:	bf00      	nop
 800f7a4:	e7fd      	b.n	800f7a2 <vPortEnterCritical+0x4a>
	}
}
 800f7a6:	bf00      	nop
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	2000000c 	.word	0x2000000c
 800f7b8:	e000ed04 	.word	0xe000ed04

0800f7bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f7c2:	4b12      	ldr	r3, [pc, #72]	@ (800f80c <vPortExitCritical+0x50>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d10b      	bne.n	800f7e2 <vPortExitCritical+0x26>
	__asm volatile
 800f7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	607b      	str	r3, [r7, #4]
}
 800f7dc:	bf00      	nop
 800f7de:	bf00      	nop
 800f7e0:	e7fd      	b.n	800f7de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f80c <vPortExitCritical+0x50>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	4a08      	ldr	r2, [pc, #32]	@ (800f80c <vPortExitCritical+0x50>)
 800f7ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f7ec:	4b07      	ldr	r3, [pc, #28]	@ (800f80c <vPortExitCritical+0x50>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d105      	bne.n	800f800 <vPortExitCritical+0x44>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	f383 8811 	msr	BASEPRI, r3
}
 800f7fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	2000000c 	.word	0x2000000c

0800f810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f810:	f3ef 8009 	mrs	r0, PSP
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	4b15      	ldr	r3, [pc, #84]	@ (800f870 <pxCurrentTCBConst>)
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	f01e 0f10 	tst.w	lr, #16
 800f820:	bf08      	it	eq
 800f822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82a:	6010      	str	r0, [r2, #0]
 800f82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f834:	f380 8811 	msr	BASEPRI, r0
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f7ff f9f2 	bl	800ec28 <vTaskSwitchContext>
 800f844:	f04f 0000 	mov.w	r0, #0
 800f848:	f380 8811 	msr	BASEPRI, r0
 800f84c:	bc09      	pop	{r0, r3}
 800f84e:	6819      	ldr	r1, [r3, #0]
 800f850:	6808      	ldr	r0, [r1, #0]
 800f852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f856:	f01e 0f10 	tst.w	lr, #16
 800f85a:	bf08      	it	eq
 800f85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f860:	f380 8809 	msr	PSP, r0
 800f864:	f3bf 8f6f 	isb	sy
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	f3af 8000 	nop.w

0800f870 <pxCurrentTCBConst>:
 800f870:	20001528 	.word	0x20001528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f874:	bf00      	nop
 800f876:	bf00      	nop

0800f878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
	__asm volatile
 800f87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	607b      	str	r3, [r7, #4]
}
 800f890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f892:	f7ff f90f 	bl	800eab4 <xTaskIncrementTick>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d003      	beq.n	800f8a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f89c:	4b06      	ldr	r3, [pc, #24]	@ (800f8b8 <xPortSysTickHandler+0x40>)
 800f89e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	f383 8811 	msr	BASEPRI, r3
}
 800f8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f8b0:	bf00      	nop
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	e000ed04 	.word	0xe000ed04

0800f8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f8bc:	b480      	push	{r7}
 800f8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f8f0 <vPortSetupTimerInterrupt+0x34>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f8f4 <vPortSetupTimerInterrupt+0x38>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f8f8 <vPortSetupTimerInterrupt+0x3c>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a0a      	ldr	r2, [pc, #40]	@ (800f8fc <vPortSetupTimerInterrupt+0x40>)
 800f8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8d6:	099b      	lsrs	r3, r3, #6
 800f8d8:	4a09      	ldr	r2, [pc, #36]	@ (800f900 <vPortSetupTimerInterrupt+0x44>)
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f8de:	4b04      	ldr	r3, [pc, #16]	@ (800f8f0 <vPortSetupTimerInterrupt+0x34>)
 800f8e0:	2207      	movs	r2, #7
 800f8e2:	601a      	str	r2, [r3, #0]
}
 800f8e4:	bf00      	nop
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	e000e010 	.word	0xe000e010
 800f8f4:	e000e018 	.word	0xe000e018
 800f8f8:	20000000 	.word	0x20000000
 800f8fc:	10624dd3 	.word	0x10624dd3
 800f900:	e000e014 	.word	0xe000e014

0800f904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f914 <vPortEnableVFP+0x10>
 800f908:	6801      	ldr	r1, [r0, #0]
 800f90a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f90e:	6001      	str	r1, [r0, #0]
 800f910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f912:	bf00      	nop
 800f914:	e000ed88 	.word	0xe000ed88

0800f918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f918:	b480      	push	{r7}
 800f91a:	b085      	sub	sp, #20
 800f91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f91e:	f3ef 8305 	mrs	r3, IPSR
 800f922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2b0f      	cmp	r3, #15
 800f928:	d915      	bls.n	800f956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f92a:	4a18      	ldr	r2, [pc, #96]	@ (800f98c <vPortValidateInterruptPriority+0x74>)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	4413      	add	r3, r2
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f934:	4b16      	ldr	r3, [pc, #88]	@ (800f990 <vPortValidateInterruptPriority+0x78>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	7afa      	ldrb	r2, [r7, #11]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d20b      	bcs.n	800f956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f942:	f383 8811 	msr	BASEPRI, r3
 800f946:	f3bf 8f6f 	isb	sy
 800f94a:	f3bf 8f4f 	dsb	sy
 800f94e:	607b      	str	r3, [r7, #4]
}
 800f950:	bf00      	nop
 800f952:	bf00      	nop
 800f954:	e7fd      	b.n	800f952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f956:	4b0f      	ldr	r3, [pc, #60]	@ (800f994 <vPortValidateInterruptPriority+0x7c>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f95e:	4b0e      	ldr	r3, [pc, #56]	@ (800f998 <vPortValidateInterruptPriority+0x80>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	429a      	cmp	r2, r3
 800f964:	d90b      	bls.n	800f97e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f96a:	f383 8811 	msr	BASEPRI, r3
 800f96e:	f3bf 8f6f 	isb	sy
 800f972:	f3bf 8f4f 	dsb	sy
 800f976:	603b      	str	r3, [r7, #0]
}
 800f978:	bf00      	nop
 800f97a:	bf00      	nop
 800f97c:	e7fd      	b.n	800f97a <vPortValidateInterruptPriority+0x62>
	}
 800f97e:	bf00      	nop
 800f980:	3714      	adds	r7, #20
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	e000e3f0 	.word	0xe000e3f0
 800f990:	20001654 	.word	0x20001654
 800f994:	e000ed0c 	.word	0xe000ed0c
 800f998:	20001658 	.word	0x20001658

0800f99c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b08a      	sub	sp, #40	@ 0x28
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f9a8:	f7fe ffc8 	bl	800e93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f9ac:	4b5c      	ldr	r3, [pc, #368]	@ (800fb20 <pvPortMalloc+0x184>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d101      	bne.n	800f9b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f9b4:	f000 f924 	bl	800fc00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f9b8:	4b5a      	ldr	r3, [pc, #360]	@ (800fb24 <pvPortMalloc+0x188>)
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4013      	ands	r3, r2
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f040 8095 	bne.w	800faf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d01e      	beq.n	800fa0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f9cc:	2208      	movs	r2, #8
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f003 0307 	and.w	r3, r3, #7
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d015      	beq.n	800fa0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f023 0307 	bic.w	r3, r3, #7
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f003 0307 	and.w	r3, r3, #7
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00b      	beq.n	800fa0a <pvPortMalloc+0x6e>
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	617b      	str	r3, [r7, #20]
}
 800fa04:	bf00      	nop
 800fa06:	bf00      	nop
 800fa08:	e7fd      	b.n	800fa06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d06f      	beq.n	800faf0 <pvPortMalloc+0x154>
 800fa10:	4b45      	ldr	r3, [pc, #276]	@ (800fb28 <pvPortMalloc+0x18c>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d86a      	bhi.n	800faf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa1a:	4b44      	ldr	r3, [pc, #272]	@ (800fb2c <pvPortMalloc+0x190>)
 800fa1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa1e:	4b43      	ldr	r3, [pc, #268]	@ (800fb2c <pvPortMalloc+0x190>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa24:	e004      	b.n	800fa30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d903      	bls.n	800fa42 <pvPortMalloc+0xa6>
 800fa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d1f1      	bne.n	800fa26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa42:	4b37      	ldr	r3, [pc, #220]	@ (800fb20 <pvPortMalloc+0x184>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d051      	beq.n	800faf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa4c:	6a3b      	ldr	r3, [r7, #32]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2208      	movs	r2, #8
 800fa52:	4413      	add	r3, r2
 800fa54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	6a3b      	ldr	r3, [r7, #32]
 800fa5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa60:	685a      	ldr	r2, [r3, #4]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	1ad2      	subs	r2, r2, r3
 800fa66:	2308      	movs	r3, #8
 800fa68:	005b      	lsls	r3, r3, #1
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d920      	bls.n	800fab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4413      	add	r3, r2
 800fa74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	f003 0307 	and.w	r3, r3, #7
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00b      	beq.n	800fa98 <pvPortMalloc+0xfc>
	__asm volatile
 800fa80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	613b      	str	r3, [r7, #16]
}
 800fa92:	bf00      	nop
 800fa94:	bf00      	nop
 800fa96:	e7fd      	b.n	800fa94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9a:	685a      	ldr	r2, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	1ad2      	subs	r2, r2, r3
 800faa0:	69bb      	ldr	r3, [r7, #24]
 800faa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800faa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800faaa:	69b8      	ldr	r0, [r7, #24]
 800faac:	f000 f90a 	bl	800fcc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fab0:	4b1d      	ldr	r3, [pc, #116]	@ (800fb28 <pvPortMalloc+0x18c>)
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	4a1b      	ldr	r2, [pc, #108]	@ (800fb28 <pvPortMalloc+0x18c>)
 800fabc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fabe:	4b1a      	ldr	r3, [pc, #104]	@ (800fb28 <pvPortMalloc+0x18c>)
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	4b1b      	ldr	r3, [pc, #108]	@ (800fb30 <pvPortMalloc+0x194>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d203      	bcs.n	800fad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800faca:	4b17      	ldr	r3, [pc, #92]	@ (800fb28 <pvPortMalloc+0x18c>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a18      	ldr	r2, [pc, #96]	@ (800fb30 <pvPortMalloc+0x194>)
 800fad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad4:	685a      	ldr	r2, [r3, #4]
 800fad6:	4b13      	ldr	r3, [pc, #76]	@ (800fb24 <pvPortMalloc+0x188>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	431a      	orrs	r2, r3
 800fadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae2:	2200      	movs	r2, #0
 800fae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fae6:	4b13      	ldr	r3, [pc, #76]	@ (800fb34 <pvPortMalloc+0x198>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	3301      	adds	r3, #1
 800faec:	4a11      	ldr	r2, [pc, #68]	@ (800fb34 <pvPortMalloc+0x198>)
 800faee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800faf0:	f7fe ff32 	bl	800e958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	f003 0307 	and.w	r3, r3, #7
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00b      	beq.n	800fb16 <pvPortMalloc+0x17a>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	60fb      	str	r3, [r7, #12]
}
 800fb10:	bf00      	nop
 800fb12:	bf00      	nop
 800fb14:	e7fd      	b.n	800fb12 <pvPortMalloc+0x176>
	return pvReturn;
 800fb16:	69fb      	ldr	r3, [r7, #28]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3728      	adds	r7, #40	@ 0x28
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	20003e64 	.word	0x20003e64
 800fb24:	20003e78 	.word	0x20003e78
 800fb28:	20003e68 	.word	0x20003e68
 800fb2c:	20003e5c 	.word	0x20003e5c
 800fb30:	20003e6c 	.word	0x20003e6c
 800fb34:	20003e70 	.word	0x20003e70

0800fb38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b086      	sub	sp, #24
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d04f      	beq.n	800fbea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb4a:	2308      	movs	r3, #8
 800fb4c:	425b      	negs	r3, r3
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	4413      	add	r3, r2
 800fb52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	4b25      	ldr	r3, [pc, #148]	@ (800fbf4 <vPortFree+0xbc>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4013      	ands	r3, r2
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d10b      	bne.n	800fb7e <vPortFree+0x46>
	__asm volatile
 800fb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	60fb      	str	r3, [r7, #12]
}
 800fb78:	bf00      	nop
 800fb7a:	bf00      	nop
 800fb7c:	e7fd      	b.n	800fb7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00b      	beq.n	800fb9e <vPortFree+0x66>
	__asm volatile
 800fb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb8a:	f383 8811 	msr	BASEPRI, r3
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	60bb      	str	r3, [r7, #8]
}
 800fb98:	bf00      	nop
 800fb9a:	bf00      	nop
 800fb9c:	e7fd      	b.n	800fb9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	4b14      	ldr	r3, [pc, #80]	@ (800fbf4 <vPortFree+0xbc>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4013      	ands	r3, r2
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d01e      	beq.n	800fbea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d11a      	bne.n	800fbea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf4 <vPortFree+0xbc>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	43db      	mvns	r3, r3
 800fbbe:	401a      	ands	r2, r3
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fbc4:	f7fe feba 	bl	800e93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	685a      	ldr	r2, [r3, #4]
 800fbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800fbf8 <vPortFree+0xc0>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	4a09      	ldr	r2, [pc, #36]	@ (800fbf8 <vPortFree+0xc0>)
 800fbd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fbd6:	6938      	ldr	r0, [r7, #16]
 800fbd8:	f000 f874 	bl	800fcc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fbdc:	4b07      	ldr	r3, [pc, #28]	@ (800fbfc <vPortFree+0xc4>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	4a06      	ldr	r2, [pc, #24]	@ (800fbfc <vPortFree+0xc4>)
 800fbe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fbe6:	f7fe feb7 	bl	800e958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fbea:	bf00      	nop
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	20003e78 	.word	0x20003e78
 800fbf8:	20003e68 	.word	0x20003e68
 800fbfc:	20003e74 	.word	0x20003e74

0800fc00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc00:	b480      	push	{r7}
 800fc02:	b085      	sub	sp, #20
 800fc04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc06:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800fc0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc0c:	4b27      	ldr	r3, [pc, #156]	@ (800fcac <prvHeapInit+0xac>)
 800fc0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f003 0307 	and.w	r3, r3, #7
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00c      	beq.n	800fc34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	3307      	adds	r3, #7
 800fc1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f023 0307 	bic.w	r3, r3, #7
 800fc26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	4a1f      	ldr	r2, [pc, #124]	@ (800fcac <prvHeapInit+0xac>)
 800fc30:	4413      	add	r3, r2
 800fc32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc38:	4a1d      	ldr	r2, [pc, #116]	@ (800fcb0 <prvHeapInit+0xb0>)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc3e:	4b1c      	ldr	r3, [pc, #112]	@ (800fcb0 <prvHeapInit+0xb0>)
 800fc40:	2200      	movs	r2, #0
 800fc42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	4413      	add	r3, r2
 800fc4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc4c:	2208      	movs	r2, #8
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	1a9b      	subs	r3, r3, r2
 800fc52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f023 0307 	bic.w	r3, r3, #7
 800fc5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4a15      	ldr	r2, [pc, #84]	@ (800fcb4 <prvHeapInit+0xb4>)
 800fc60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc62:	4b14      	ldr	r3, [pc, #80]	@ (800fcb4 <prvHeapInit+0xb4>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2200      	movs	r2, #0
 800fc68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc6a:	4b12      	ldr	r3, [pc, #72]	@ (800fcb4 <prvHeapInit+0xb4>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	1ad2      	subs	r2, r2, r3
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc80:	4b0c      	ldr	r3, [pc, #48]	@ (800fcb4 <prvHeapInit+0xb4>)
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	4a0a      	ldr	r2, [pc, #40]	@ (800fcb8 <prvHeapInit+0xb8>)
 800fc8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	4a09      	ldr	r2, [pc, #36]	@ (800fcbc <prvHeapInit+0xbc>)
 800fc96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc98:	4b09      	ldr	r3, [pc, #36]	@ (800fcc0 <prvHeapInit+0xc0>)
 800fc9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fc9e:	601a      	str	r2, [r3, #0]
}
 800fca0:	bf00      	nop
 800fca2:	3714      	adds	r7, #20
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	2000165c 	.word	0x2000165c
 800fcb0:	20003e5c 	.word	0x20003e5c
 800fcb4:	20003e64 	.word	0x20003e64
 800fcb8:	20003e6c 	.word	0x20003e6c
 800fcbc:	20003e68 	.word	0x20003e68
 800fcc0:	20003e78 	.word	0x20003e78

0800fcc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fccc:	4b28      	ldr	r3, [pc, #160]	@ (800fd70 <prvInsertBlockIntoFreeList+0xac>)
 800fcce:	60fb      	str	r3, [r7, #12]
 800fcd0:	e002      	b.n	800fcd8 <prvInsertBlockIntoFreeList+0x14>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d8f7      	bhi.n	800fcd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	4413      	add	r3, r2
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d108      	bne.n	800fd06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	685a      	ldr	r2, [r3, #4]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	441a      	add	r2, r3
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	68ba      	ldr	r2, [r7, #8]
 800fd10:	441a      	add	r2, r3
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d118      	bne.n	800fd4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	4b15      	ldr	r3, [pc, #84]	@ (800fd74 <prvInsertBlockIntoFreeList+0xb0>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d00d      	beq.n	800fd42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	685a      	ldr	r2, [r3, #4]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	441a      	add	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	601a      	str	r2, [r3, #0]
 800fd40:	e008      	b.n	800fd54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd42:	4b0c      	ldr	r3, [pc, #48]	@ (800fd74 <prvInsertBlockIntoFreeList+0xb0>)
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	601a      	str	r2, [r3, #0]
 800fd4a:	e003      	b.n	800fd54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d002      	beq.n	800fd62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd62:	bf00      	nop
 800fd64:	3714      	adds	r7, #20
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	20003e5c 	.word	0x20003e5c
 800fd74:	20003e64 	.word	0x20003e64

0800fd78 <malloc>:
 800fd78:	4b02      	ldr	r3, [pc, #8]	@ (800fd84 <malloc+0xc>)
 800fd7a:	4601      	mov	r1, r0
 800fd7c:	6818      	ldr	r0, [r3, #0]
 800fd7e:	f000 b82d 	b.w	800fddc <_malloc_r>
 800fd82:	bf00      	nop
 800fd84:	2000001c 	.word	0x2000001c

0800fd88 <free>:
 800fd88:	4b02      	ldr	r3, [pc, #8]	@ (800fd94 <free+0xc>)
 800fd8a:	4601      	mov	r1, r0
 800fd8c:	6818      	ldr	r0, [r3, #0]
 800fd8e:	f000 bdbb 	b.w	8010908 <_free_r>
 800fd92:	bf00      	nop
 800fd94:	2000001c 	.word	0x2000001c

0800fd98 <sbrk_aligned>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	4e0f      	ldr	r6, [pc, #60]	@ (800fdd8 <sbrk_aligned+0x40>)
 800fd9c:	460c      	mov	r4, r1
 800fd9e:	6831      	ldr	r1, [r6, #0]
 800fda0:	4605      	mov	r5, r0
 800fda2:	b911      	cbnz	r1, 800fdaa <sbrk_aligned+0x12>
 800fda4:	f000 fd4c 	bl	8010840 <_sbrk_r>
 800fda8:	6030      	str	r0, [r6, #0]
 800fdaa:	4621      	mov	r1, r4
 800fdac:	4628      	mov	r0, r5
 800fdae:	f000 fd47 	bl	8010840 <_sbrk_r>
 800fdb2:	1c43      	adds	r3, r0, #1
 800fdb4:	d103      	bne.n	800fdbe <sbrk_aligned+0x26>
 800fdb6:	f04f 34ff 	mov.w	r4, #4294967295
 800fdba:	4620      	mov	r0, r4
 800fdbc:	bd70      	pop	{r4, r5, r6, pc}
 800fdbe:	1cc4      	adds	r4, r0, #3
 800fdc0:	f024 0403 	bic.w	r4, r4, #3
 800fdc4:	42a0      	cmp	r0, r4
 800fdc6:	d0f8      	beq.n	800fdba <sbrk_aligned+0x22>
 800fdc8:	1a21      	subs	r1, r4, r0
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f000 fd38 	bl	8010840 <_sbrk_r>
 800fdd0:	3001      	adds	r0, #1
 800fdd2:	d1f2      	bne.n	800fdba <sbrk_aligned+0x22>
 800fdd4:	e7ef      	b.n	800fdb6 <sbrk_aligned+0x1e>
 800fdd6:	bf00      	nop
 800fdd8:	20003e7c 	.word	0x20003e7c

0800fddc <_malloc_r>:
 800fddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fde0:	1ccd      	adds	r5, r1, #3
 800fde2:	f025 0503 	bic.w	r5, r5, #3
 800fde6:	3508      	adds	r5, #8
 800fde8:	2d0c      	cmp	r5, #12
 800fdea:	bf38      	it	cc
 800fdec:	250c      	movcc	r5, #12
 800fdee:	2d00      	cmp	r5, #0
 800fdf0:	4606      	mov	r6, r0
 800fdf2:	db01      	blt.n	800fdf8 <_malloc_r+0x1c>
 800fdf4:	42a9      	cmp	r1, r5
 800fdf6:	d904      	bls.n	800fe02 <_malloc_r+0x26>
 800fdf8:	230c      	movs	r3, #12
 800fdfa:	6033      	str	r3, [r6, #0]
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fed8 <_malloc_r+0xfc>
 800fe06:	f000 f869 	bl	800fedc <__malloc_lock>
 800fe0a:	f8d8 3000 	ldr.w	r3, [r8]
 800fe0e:	461c      	mov	r4, r3
 800fe10:	bb44      	cbnz	r4, 800fe64 <_malloc_r+0x88>
 800fe12:	4629      	mov	r1, r5
 800fe14:	4630      	mov	r0, r6
 800fe16:	f7ff ffbf 	bl	800fd98 <sbrk_aligned>
 800fe1a:	1c43      	adds	r3, r0, #1
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	d158      	bne.n	800fed2 <_malloc_r+0xf6>
 800fe20:	f8d8 4000 	ldr.w	r4, [r8]
 800fe24:	4627      	mov	r7, r4
 800fe26:	2f00      	cmp	r7, #0
 800fe28:	d143      	bne.n	800feb2 <_malloc_r+0xd6>
 800fe2a:	2c00      	cmp	r4, #0
 800fe2c:	d04b      	beq.n	800fec6 <_malloc_r+0xea>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	4639      	mov	r1, r7
 800fe32:	4630      	mov	r0, r6
 800fe34:	eb04 0903 	add.w	r9, r4, r3
 800fe38:	f000 fd02 	bl	8010840 <_sbrk_r>
 800fe3c:	4581      	cmp	r9, r0
 800fe3e:	d142      	bne.n	800fec6 <_malloc_r+0xea>
 800fe40:	6821      	ldr	r1, [r4, #0]
 800fe42:	1a6d      	subs	r5, r5, r1
 800fe44:	4629      	mov	r1, r5
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7ff ffa6 	bl	800fd98 <sbrk_aligned>
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	d03a      	beq.n	800fec6 <_malloc_r+0xea>
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	442b      	add	r3, r5
 800fe54:	6023      	str	r3, [r4, #0]
 800fe56:	f8d8 3000 	ldr.w	r3, [r8]
 800fe5a:	685a      	ldr	r2, [r3, #4]
 800fe5c:	bb62      	cbnz	r2, 800feb8 <_malloc_r+0xdc>
 800fe5e:	f8c8 7000 	str.w	r7, [r8]
 800fe62:	e00f      	b.n	800fe84 <_malloc_r+0xa8>
 800fe64:	6822      	ldr	r2, [r4, #0]
 800fe66:	1b52      	subs	r2, r2, r5
 800fe68:	d420      	bmi.n	800feac <_malloc_r+0xd0>
 800fe6a:	2a0b      	cmp	r2, #11
 800fe6c:	d917      	bls.n	800fe9e <_malloc_r+0xc2>
 800fe6e:	1961      	adds	r1, r4, r5
 800fe70:	42a3      	cmp	r3, r4
 800fe72:	6025      	str	r5, [r4, #0]
 800fe74:	bf18      	it	ne
 800fe76:	6059      	strne	r1, [r3, #4]
 800fe78:	6863      	ldr	r3, [r4, #4]
 800fe7a:	bf08      	it	eq
 800fe7c:	f8c8 1000 	streq.w	r1, [r8]
 800fe80:	5162      	str	r2, [r4, r5]
 800fe82:	604b      	str	r3, [r1, #4]
 800fe84:	4630      	mov	r0, r6
 800fe86:	f000 f82f 	bl	800fee8 <__malloc_unlock>
 800fe8a:	f104 000b 	add.w	r0, r4, #11
 800fe8e:	1d23      	adds	r3, r4, #4
 800fe90:	f020 0007 	bic.w	r0, r0, #7
 800fe94:	1ac2      	subs	r2, r0, r3
 800fe96:	bf1c      	itt	ne
 800fe98:	1a1b      	subne	r3, r3, r0
 800fe9a:	50a3      	strne	r3, [r4, r2]
 800fe9c:	e7af      	b.n	800fdfe <_malloc_r+0x22>
 800fe9e:	6862      	ldr	r2, [r4, #4]
 800fea0:	42a3      	cmp	r3, r4
 800fea2:	bf0c      	ite	eq
 800fea4:	f8c8 2000 	streq.w	r2, [r8]
 800fea8:	605a      	strne	r2, [r3, #4]
 800feaa:	e7eb      	b.n	800fe84 <_malloc_r+0xa8>
 800feac:	4623      	mov	r3, r4
 800feae:	6864      	ldr	r4, [r4, #4]
 800feb0:	e7ae      	b.n	800fe10 <_malloc_r+0x34>
 800feb2:	463c      	mov	r4, r7
 800feb4:	687f      	ldr	r7, [r7, #4]
 800feb6:	e7b6      	b.n	800fe26 <_malloc_r+0x4a>
 800feb8:	461a      	mov	r2, r3
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	42a3      	cmp	r3, r4
 800febe:	d1fb      	bne.n	800feb8 <_malloc_r+0xdc>
 800fec0:	2300      	movs	r3, #0
 800fec2:	6053      	str	r3, [r2, #4]
 800fec4:	e7de      	b.n	800fe84 <_malloc_r+0xa8>
 800fec6:	230c      	movs	r3, #12
 800fec8:	6033      	str	r3, [r6, #0]
 800feca:	4630      	mov	r0, r6
 800fecc:	f000 f80c 	bl	800fee8 <__malloc_unlock>
 800fed0:	e794      	b.n	800fdfc <_malloc_r+0x20>
 800fed2:	6005      	str	r5, [r0, #0]
 800fed4:	e7d6      	b.n	800fe84 <_malloc_r+0xa8>
 800fed6:	bf00      	nop
 800fed8:	20003e80 	.word	0x20003e80

0800fedc <__malloc_lock>:
 800fedc:	4801      	ldr	r0, [pc, #4]	@ (800fee4 <__malloc_lock+0x8>)
 800fede:	f000 bcfc 	b.w	80108da <__retarget_lock_acquire_recursive>
 800fee2:	bf00      	nop
 800fee4:	20003fc4 	.word	0x20003fc4

0800fee8 <__malloc_unlock>:
 800fee8:	4801      	ldr	r0, [pc, #4]	@ (800fef0 <__malloc_unlock+0x8>)
 800feea:	f000 bcf7 	b.w	80108dc <__retarget_lock_release_recursive>
 800feee:	bf00      	nop
 800fef0:	20003fc4 	.word	0x20003fc4

0800fef4 <_scanf_float>:
 800fef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	b087      	sub	sp, #28
 800fefa:	4617      	mov	r7, r2
 800fefc:	9303      	str	r3, [sp, #12]
 800fefe:	688b      	ldr	r3, [r1, #8]
 800ff00:	1e5a      	subs	r2, r3, #1
 800ff02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ff06:	bf81      	itttt	hi
 800ff08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ff0c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ff10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ff14:	608b      	strhi	r3, [r1, #8]
 800ff16:	680b      	ldr	r3, [r1, #0]
 800ff18:	460a      	mov	r2, r1
 800ff1a:	f04f 0500 	mov.w	r5, #0
 800ff1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ff22:	f842 3b1c 	str.w	r3, [r2], #28
 800ff26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ff2a:	4680      	mov	r8, r0
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	bf98      	it	ls
 800ff30:	f04f 0b00 	movls.w	fp, #0
 800ff34:	9201      	str	r2, [sp, #4]
 800ff36:	4616      	mov	r6, r2
 800ff38:	46aa      	mov	sl, r5
 800ff3a:	46a9      	mov	r9, r5
 800ff3c:	9502      	str	r5, [sp, #8]
 800ff3e:	68a2      	ldr	r2, [r4, #8]
 800ff40:	b152      	cbz	r2, 800ff58 <_scanf_float+0x64>
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	2b4e      	cmp	r3, #78	@ 0x4e
 800ff48:	d864      	bhi.n	8010014 <_scanf_float+0x120>
 800ff4a:	2b40      	cmp	r3, #64	@ 0x40
 800ff4c:	d83c      	bhi.n	800ffc8 <_scanf_float+0xd4>
 800ff4e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ff52:	b2c8      	uxtb	r0, r1
 800ff54:	280e      	cmp	r0, #14
 800ff56:	d93a      	bls.n	800ffce <_scanf_float+0xda>
 800ff58:	f1b9 0f00 	cmp.w	r9, #0
 800ff5c:	d003      	beq.n	800ff66 <_scanf_float+0x72>
 800ff5e:	6823      	ldr	r3, [r4, #0]
 800ff60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff6a:	f1ba 0f01 	cmp.w	sl, #1
 800ff6e:	f200 8117 	bhi.w	80101a0 <_scanf_float+0x2ac>
 800ff72:	9b01      	ldr	r3, [sp, #4]
 800ff74:	429e      	cmp	r6, r3
 800ff76:	f200 8108 	bhi.w	801018a <_scanf_float+0x296>
 800ff7a:	2001      	movs	r0, #1
 800ff7c:	b007      	add	sp, #28
 800ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff82:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ff86:	2a0d      	cmp	r2, #13
 800ff88:	d8e6      	bhi.n	800ff58 <_scanf_float+0x64>
 800ff8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ff90 <_scanf_float+0x9c>)
 800ff8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ff90:	080100d7 	.word	0x080100d7
 800ff94:	0800ff59 	.word	0x0800ff59
 800ff98:	0800ff59 	.word	0x0800ff59
 800ff9c:	0800ff59 	.word	0x0800ff59
 800ffa0:	08010137 	.word	0x08010137
 800ffa4:	0801010f 	.word	0x0801010f
 800ffa8:	0800ff59 	.word	0x0800ff59
 800ffac:	0800ff59 	.word	0x0800ff59
 800ffb0:	080100e5 	.word	0x080100e5
 800ffb4:	0800ff59 	.word	0x0800ff59
 800ffb8:	0800ff59 	.word	0x0800ff59
 800ffbc:	0800ff59 	.word	0x0800ff59
 800ffc0:	0800ff59 	.word	0x0800ff59
 800ffc4:	0801009d 	.word	0x0801009d
 800ffc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ffcc:	e7db      	b.n	800ff86 <_scanf_float+0x92>
 800ffce:	290e      	cmp	r1, #14
 800ffd0:	d8c2      	bhi.n	800ff58 <_scanf_float+0x64>
 800ffd2:	a001      	add	r0, pc, #4	@ (adr r0, 800ffd8 <_scanf_float+0xe4>)
 800ffd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ffd8:	0801008d 	.word	0x0801008d
 800ffdc:	0800ff59 	.word	0x0800ff59
 800ffe0:	0801008d 	.word	0x0801008d
 800ffe4:	08010123 	.word	0x08010123
 800ffe8:	0800ff59 	.word	0x0800ff59
 800ffec:	08010035 	.word	0x08010035
 800fff0:	08010073 	.word	0x08010073
 800fff4:	08010073 	.word	0x08010073
 800fff8:	08010073 	.word	0x08010073
 800fffc:	08010073 	.word	0x08010073
 8010000:	08010073 	.word	0x08010073
 8010004:	08010073 	.word	0x08010073
 8010008:	08010073 	.word	0x08010073
 801000c:	08010073 	.word	0x08010073
 8010010:	08010073 	.word	0x08010073
 8010014:	2b6e      	cmp	r3, #110	@ 0x6e
 8010016:	d809      	bhi.n	801002c <_scanf_float+0x138>
 8010018:	2b60      	cmp	r3, #96	@ 0x60
 801001a:	d8b2      	bhi.n	800ff82 <_scanf_float+0x8e>
 801001c:	2b54      	cmp	r3, #84	@ 0x54
 801001e:	d07b      	beq.n	8010118 <_scanf_float+0x224>
 8010020:	2b59      	cmp	r3, #89	@ 0x59
 8010022:	d199      	bne.n	800ff58 <_scanf_float+0x64>
 8010024:	2d07      	cmp	r5, #7
 8010026:	d197      	bne.n	800ff58 <_scanf_float+0x64>
 8010028:	2508      	movs	r5, #8
 801002a:	e02c      	b.n	8010086 <_scanf_float+0x192>
 801002c:	2b74      	cmp	r3, #116	@ 0x74
 801002e:	d073      	beq.n	8010118 <_scanf_float+0x224>
 8010030:	2b79      	cmp	r3, #121	@ 0x79
 8010032:	e7f6      	b.n	8010022 <_scanf_float+0x12e>
 8010034:	6821      	ldr	r1, [r4, #0]
 8010036:	05c8      	lsls	r0, r1, #23
 8010038:	d51b      	bpl.n	8010072 <_scanf_float+0x17e>
 801003a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801003e:	6021      	str	r1, [r4, #0]
 8010040:	f109 0901 	add.w	r9, r9, #1
 8010044:	f1bb 0f00 	cmp.w	fp, #0
 8010048:	d003      	beq.n	8010052 <_scanf_float+0x15e>
 801004a:	3201      	adds	r2, #1
 801004c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010050:	60a2      	str	r2, [r4, #8]
 8010052:	68a3      	ldr	r3, [r4, #8]
 8010054:	3b01      	subs	r3, #1
 8010056:	60a3      	str	r3, [r4, #8]
 8010058:	6923      	ldr	r3, [r4, #16]
 801005a:	3301      	adds	r3, #1
 801005c:	6123      	str	r3, [r4, #16]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	3b01      	subs	r3, #1
 8010062:	2b00      	cmp	r3, #0
 8010064:	607b      	str	r3, [r7, #4]
 8010066:	f340 8087 	ble.w	8010178 <_scanf_float+0x284>
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	3301      	adds	r3, #1
 801006e:	603b      	str	r3, [r7, #0]
 8010070:	e765      	b.n	800ff3e <_scanf_float+0x4a>
 8010072:	eb1a 0105 	adds.w	r1, sl, r5
 8010076:	f47f af6f 	bne.w	800ff58 <_scanf_float+0x64>
 801007a:	6822      	ldr	r2, [r4, #0]
 801007c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010080:	6022      	str	r2, [r4, #0]
 8010082:	460d      	mov	r5, r1
 8010084:	468a      	mov	sl, r1
 8010086:	f806 3b01 	strb.w	r3, [r6], #1
 801008a:	e7e2      	b.n	8010052 <_scanf_float+0x15e>
 801008c:	6822      	ldr	r2, [r4, #0]
 801008e:	0610      	lsls	r0, r2, #24
 8010090:	f57f af62 	bpl.w	800ff58 <_scanf_float+0x64>
 8010094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010098:	6022      	str	r2, [r4, #0]
 801009a:	e7f4      	b.n	8010086 <_scanf_float+0x192>
 801009c:	f1ba 0f00 	cmp.w	sl, #0
 80100a0:	d10e      	bne.n	80100c0 <_scanf_float+0x1cc>
 80100a2:	f1b9 0f00 	cmp.w	r9, #0
 80100a6:	d10e      	bne.n	80100c6 <_scanf_float+0x1d2>
 80100a8:	6822      	ldr	r2, [r4, #0]
 80100aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80100ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80100b2:	d108      	bne.n	80100c6 <_scanf_float+0x1d2>
 80100b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80100b8:	6022      	str	r2, [r4, #0]
 80100ba:	f04f 0a01 	mov.w	sl, #1
 80100be:	e7e2      	b.n	8010086 <_scanf_float+0x192>
 80100c0:	f1ba 0f02 	cmp.w	sl, #2
 80100c4:	d055      	beq.n	8010172 <_scanf_float+0x27e>
 80100c6:	2d01      	cmp	r5, #1
 80100c8:	d002      	beq.n	80100d0 <_scanf_float+0x1dc>
 80100ca:	2d04      	cmp	r5, #4
 80100cc:	f47f af44 	bne.w	800ff58 <_scanf_float+0x64>
 80100d0:	3501      	adds	r5, #1
 80100d2:	b2ed      	uxtb	r5, r5
 80100d4:	e7d7      	b.n	8010086 <_scanf_float+0x192>
 80100d6:	f1ba 0f01 	cmp.w	sl, #1
 80100da:	f47f af3d 	bne.w	800ff58 <_scanf_float+0x64>
 80100de:	f04f 0a02 	mov.w	sl, #2
 80100e2:	e7d0      	b.n	8010086 <_scanf_float+0x192>
 80100e4:	b97d      	cbnz	r5, 8010106 <_scanf_float+0x212>
 80100e6:	f1b9 0f00 	cmp.w	r9, #0
 80100ea:	f47f af38 	bne.w	800ff5e <_scanf_float+0x6a>
 80100ee:	6822      	ldr	r2, [r4, #0]
 80100f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80100f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80100f8:	f040 8108 	bne.w	801030c <_scanf_float+0x418>
 80100fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010100:	6022      	str	r2, [r4, #0]
 8010102:	2501      	movs	r5, #1
 8010104:	e7bf      	b.n	8010086 <_scanf_float+0x192>
 8010106:	2d03      	cmp	r5, #3
 8010108:	d0e2      	beq.n	80100d0 <_scanf_float+0x1dc>
 801010a:	2d05      	cmp	r5, #5
 801010c:	e7de      	b.n	80100cc <_scanf_float+0x1d8>
 801010e:	2d02      	cmp	r5, #2
 8010110:	f47f af22 	bne.w	800ff58 <_scanf_float+0x64>
 8010114:	2503      	movs	r5, #3
 8010116:	e7b6      	b.n	8010086 <_scanf_float+0x192>
 8010118:	2d06      	cmp	r5, #6
 801011a:	f47f af1d 	bne.w	800ff58 <_scanf_float+0x64>
 801011e:	2507      	movs	r5, #7
 8010120:	e7b1      	b.n	8010086 <_scanf_float+0x192>
 8010122:	6822      	ldr	r2, [r4, #0]
 8010124:	0591      	lsls	r1, r2, #22
 8010126:	f57f af17 	bpl.w	800ff58 <_scanf_float+0x64>
 801012a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801012e:	6022      	str	r2, [r4, #0]
 8010130:	f8cd 9008 	str.w	r9, [sp, #8]
 8010134:	e7a7      	b.n	8010086 <_scanf_float+0x192>
 8010136:	6822      	ldr	r2, [r4, #0]
 8010138:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801013c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010140:	d006      	beq.n	8010150 <_scanf_float+0x25c>
 8010142:	0550      	lsls	r0, r2, #21
 8010144:	f57f af08 	bpl.w	800ff58 <_scanf_float+0x64>
 8010148:	f1b9 0f00 	cmp.w	r9, #0
 801014c:	f000 80de 	beq.w	801030c <_scanf_float+0x418>
 8010150:	0591      	lsls	r1, r2, #22
 8010152:	bf58      	it	pl
 8010154:	9902      	ldrpl	r1, [sp, #8]
 8010156:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801015a:	bf58      	it	pl
 801015c:	eba9 0101 	subpl.w	r1, r9, r1
 8010160:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010164:	bf58      	it	pl
 8010166:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801016a:	6022      	str	r2, [r4, #0]
 801016c:	f04f 0900 	mov.w	r9, #0
 8010170:	e789      	b.n	8010086 <_scanf_float+0x192>
 8010172:	f04f 0a03 	mov.w	sl, #3
 8010176:	e786      	b.n	8010086 <_scanf_float+0x192>
 8010178:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801017c:	4639      	mov	r1, r7
 801017e:	4640      	mov	r0, r8
 8010180:	4798      	blx	r3
 8010182:	2800      	cmp	r0, #0
 8010184:	f43f aedb 	beq.w	800ff3e <_scanf_float+0x4a>
 8010188:	e6e6      	b.n	800ff58 <_scanf_float+0x64>
 801018a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801018e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010192:	463a      	mov	r2, r7
 8010194:	4640      	mov	r0, r8
 8010196:	4798      	blx	r3
 8010198:	6923      	ldr	r3, [r4, #16]
 801019a:	3b01      	subs	r3, #1
 801019c:	6123      	str	r3, [r4, #16]
 801019e:	e6e8      	b.n	800ff72 <_scanf_float+0x7e>
 80101a0:	1e6b      	subs	r3, r5, #1
 80101a2:	2b06      	cmp	r3, #6
 80101a4:	d824      	bhi.n	80101f0 <_scanf_float+0x2fc>
 80101a6:	2d02      	cmp	r5, #2
 80101a8:	d836      	bhi.n	8010218 <_scanf_float+0x324>
 80101aa:	9b01      	ldr	r3, [sp, #4]
 80101ac:	429e      	cmp	r6, r3
 80101ae:	f67f aee4 	bls.w	800ff7a <_scanf_float+0x86>
 80101b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80101b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80101ba:	463a      	mov	r2, r7
 80101bc:	4640      	mov	r0, r8
 80101be:	4798      	blx	r3
 80101c0:	6923      	ldr	r3, [r4, #16]
 80101c2:	3b01      	subs	r3, #1
 80101c4:	6123      	str	r3, [r4, #16]
 80101c6:	e7f0      	b.n	80101aa <_scanf_float+0x2b6>
 80101c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80101cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80101d0:	463a      	mov	r2, r7
 80101d2:	4640      	mov	r0, r8
 80101d4:	4798      	blx	r3
 80101d6:	6923      	ldr	r3, [r4, #16]
 80101d8:	3b01      	subs	r3, #1
 80101da:	6123      	str	r3, [r4, #16]
 80101dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101e0:	fa5f fa8a 	uxtb.w	sl, sl
 80101e4:	f1ba 0f02 	cmp.w	sl, #2
 80101e8:	d1ee      	bne.n	80101c8 <_scanf_float+0x2d4>
 80101ea:	3d03      	subs	r5, #3
 80101ec:	b2ed      	uxtb	r5, r5
 80101ee:	1b76      	subs	r6, r6, r5
 80101f0:	6823      	ldr	r3, [r4, #0]
 80101f2:	05da      	lsls	r2, r3, #23
 80101f4:	d530      	bpl.n	8010258 <_scanf_float+0x364>
 80101f6:	055b      	lsls	r3, r3, #21
 80101f8:	d511      	bpl.n	801021e <_scanf_float+0x32a>
 80101fa:	9b01      	ldr	r3, [sp, #4]
 80101fc:	429e      	cmp	r6, r3
 80101fe:	f67f aebc 	bls.w	800ff7a <_scanf_float+0x86>
 8010202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801020a:	463a      	mov	r2, r7
 801020c:	4640      	mov	r0, r8
 801020e:	4798      	blx	r3
 8010210:	6923      	ldr	r3, [r4, #16]
 8010212:	3b01      	subs	r3, #1
 8010214:	6123      	str	r3, [r4, #16]
 8010216:	e7f0      	b.n	80101fa <_scanf_float+0x306>
 8010218:	46aa      	mov	sl, r5
 801021a:	46b3      	mov	fp, r6
 801021c:	e7de      	b.n	80101dc <_scanf_float+0x2e8>
 801021e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010222:	6923      	ldr	r3, [r4, #16]
 8010224:	2965      	cmp	r1, #101	@ 0x65
 8010226:	f103 33ff 	add.w	r3, r3, #4294967295
 801022a:	f106 35ff 	add.w	r5, r6, #4294967295
 801022e:	6123      	str	r3, [r4, #16]
 8010230:	d00c      	beq.n	801024c <_scanf_float+0x358>
 8010232:	2945      	cmp	r1, #69	@ 0x45
 8010234:	d00a      	beq.n	801024c <_scanf_float+0x358>
 8010236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801023a:	463a      	mov	r2, r7
 801023c:	4640      	mov	r0, r8
 801023e:	4798      	blx	r3
 8010240:	6923      	ldr	r3, [r4, #16]
 8010242:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010246:	3b01      	subs	r3, #1
 8010248:	1eb5      	subs	r5, r6, #2
 801024a:	6123      	str	r3, [r4, #16]
 801024c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010250:	463a      	mov	r2, r7
 8010252:	4640      	mov	r0, r8
 8010254:	4798      	blx	r3
 8010256:	462e      	mov	r6, r5
 8010258:	6822      	ldr	r2, [r4, #0]
 801025a:	f012 0210 	ands.w	r2, r2, #16
 801025e:	d001      	beq.n	8010264 <_scanf_float+0x370>
 8010260:	2000      	movs	r0, #0
 8010262:	e68b      	b.n	800ff7c <_scanf_float+0x88>
 8010264:	7032      	strb	r2, [r6, #0]
 8010266:	6823      	ldr	r3, [r4, #0]
 8010268:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801026c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010270:	d11c      	bne.n	80102ac <_scanf_float+0x3b8>
 8010272:	9b02      	ldr	r3, [sp, #8]
 8010274:	454b      	cmp	r3, r9
 8010276:	eba3 0209 	sub.w	r2, r3, r9
 801027a:	d123      	bne.n	80102c4 <_scanf_float+0x3d0>
 801027c:	9901      	ldr	r1, [sp, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	4640      	mov	r0, r8
 8010282:	f001 f98d 	bl	80115a0 <_strtod_r>
 8010286:	9b03      	ldr	r3, [sp, #12]
 8010288:	6821      	ldr	r1, [r4, #0]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f011 0f02 	tst.w	r1, #2
 8010290:	ec57 6b10 	vmov	r6, r7, d0
 8010294:	f103 0204 	add.w	r2, r3, #4
 8010298:	d01f      	beq.n	80102da <_scanf_float+0x3e6>
 801029a:	9903      	ldr	r1, [sp, #12]
 801029c:	600a      	str	r2, [r1, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	e9c3 6700 	strd	r6, r7, [r3]
 80102a4:	68e3      	ldr	r3, [r4, #12]
 80102a6:	3301      	adds	r3, #1
 80102a8:	60e3      	str	r3, [r4, #12]
 80102aa:	e7d9      	b.n	8010260 <_scanf_float+0x36c>
 80102ac:	9b04      	ldr	r3, [sp, #16]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d0e4      	beq.n	801027c <_scanf_float+0x388>
 80102b2:	9905      	ldr	r1, [sp, #20]
 80102b4:	230a      	movs	r3, #10
 80102b6:	3101      	adds	r1, #1
 80102b8:	4640      	mov	r0, r8
 80102ba:	f001 f9f1 	bl	80116a0 <_strtol_r>
 80102be:	9b04      	ldr	r3, [sp, #16]
 80102c0:	9e05      	ldr	r6, [sp, #20]
 80102c2:	1ac2      	subs	r2, r0, r3
 80102c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80102c8:	429e      	cmp	r6, r3
 80102ca:	bf28      	it	cs
 80102cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80102d0:	4910      	ldr	r1, [pc, #64]	@ (8010314 <_scanf_float+0x420>)
 80102d2:	4630      	mov	r0, r6
 80102d4:	f000 f942 	bl	801055c <siprintf>
 80102d8:	e7d0      	b.n	801027c <_scanf_float+0x388>
 80102da:	f011 0f04 	tst.w	r1, #4
 80102de:	9903      	ldr	r1, [sp, #12]
 80102e0:	600a      	str	r2, [r1, #0]
 80102e2:	d1dc      	bne.n	801029e <_scanf_float+0x3aa>
 80102e4:	681d      	ldr	r5, [r3, #0]
 80102e6:	4632      	mov	r2, r6
 80102e8:	463b      	mov	r3, r7
 80102ea:	4630      	mov	r0, r6
 80102ec:	4639      	mov	r1, r7
 80102ee:	f7f0 fc2d 	bl	8000b4c <__aeabi_dcmpun>
 80102f2:	b128      	cbz	r0, 8010300 <_scanf_float+0x40c>
 80102f4:	4808      	ldr	r0, [pc, #32]	@ (8010318 <_scanf_float+0x424>)
 80102f6:	f000 fb01 	bl	80108fc <nanf>
 80102fa:	ed85 0a00 	vstr	s0, [r5]
 80102fe:	e7d1      	b.n	80102a4 <_scanf_float+0x3b0>
 8010300:	4630      	mov	r0, r6
 8010302:	4639      	mov	r1, r7
 8010304:	f7f0 fc80 	bl	8000c08 <__aeabi_d2f>
 8010308:	6028      	str	r0, [r5, #0]
 801030a:	e7cb      	b.n	80102a4 <_scanf_float+0x3b0>
 801030c:	f04f 0900 	mov.w	r9, #0
 8010310:	e629      	b.n	800ff66 <_scanf_float+0x72>
 8010312:	bf00      	nop
 8010314:	08013e80 	.word	0x08013e80
 8010318:	0801425b 	.word	0x0801425b

0801031c <std>:
 801031c:	2300      	movs	r3, #0
 801031e:	b510      	push	{r4, lr}
 8010320:	4604      	mov	r4, r0
 8010322:	e9c0 3300 	strd	r3, r3, [r0]
 8010326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801032a:	6083      	str	r3, [r0, #8]
 801032c:	8181      	strh	r1, [r0, #12]
 801032e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010330:	81c2      	strh	r2, [r0, #14]
 8010332:	6183      	str	r3, [r0, #24]
 8010334:	4619      	mov	r1, r3
 8010336:	2208      	movs	r2, #8
 8010338:	305c      	adds	r0, #92	@ 0x5c
 801033a:	f000 fa33 	bl	80107a4 <memset>
 801033e:	4b0d      	ldr	r3, [pc, #52]	@ (8010374 <std+0x58>)
 8010340:	6263      	str	r3, [r4, #36]	@ 0x24
 8010342:	4b0d      	ldr	r3, [pc, #52]	@ (8010378 <std+0x5c>)
 8010344:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010346:	4b0d      	ldr	r3, [pc, #52]	@ (801037c <std+0x60>)
 8010348:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801034a:	4b0d      	ldr	r3, [pc, #52]	@ (8010380 <std+0x64>)
 801034c:	6323      	str	r3, [r4, #48]	@ 0x30
 801034e:	4b0d      	ldr	r3, [pc, #52]	@ (8010384 <std+0x68>)
 8010350:	6224      	str	r4, [r4, #32]
 8010352:	429c      	cmp	r4, r3
 8010354:	d006      	beq.n	8010364 <std+0x48>
 8010356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801035a:	4294      	cmp	r4, r2
 801035c:	d002      	beq.n	8010364 <std+0x48>
 801035e:	33d0      	adds	r3, #208	@ 0xd0
 8010360:	429c      	cmp	r4, r3
 8010362:	d105      	bne.n	8010370 <std+0x54>
 8010364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801036c:	f000 bab4 	b.w	80108d8 <__retarget_lock_init_recursive>
 8010370:	bd10      	pop	{r4, pc}
 8010372:	bf00      	nop
 8010374:	080105f1 	.word	0x080105f1
 8010378:	08010617 	.word	0x08010617
 801037c:	0801064f 	.word	0x0801064f
 8010380:	08010673 	.word	0x08010673
 8010384:	20003e84 	.word	0x20003e84

08010388 <stdio_exit_handler>:
 8010388:	4a02      	ldr	r2, [pc, #8]	@ (8010394 <stdio_exit_handler+0xc>)
 801038a:	4903      	ldr	r1, [pc, #12]	@ (8010398 <stdio_exit_handler+0x10>)
 801038c:	4803      	ldr	r0, [pc, #12]	@ (801039c <stdio_exit_handler+0x14>)
 801038e:	f000 b869 	b.w	8010464 <_fwalk_sglue>
 8010392:	bf00      	nop
 8010394:	20000010 	.word	0x20000010
 8010398:	080123ad 	.word	0x080123ad
 801039c:	20000020 	.word	0x20000020

080103a0 <cleanup_stdio>:
 80103a0:	6841      	ldr	r1, [r0, #4]
 80103a2:	4b0c      	ldr	r3, [pc, #48]	@ (80103d4 <cleanup_stdio+0x34>)
 80103a4:	4299      	cmp	r1, r3
 80103a6:	b510      	push	{r4, lr}
 80103a8:	4604      	mov	r4, r0
 80103aa:	d001      	beq.n	80103b0 <cleanup_stdio+0x10>
 80103ac:	f001 fffe 	bl	80123ac <_fflush_r>
 80103b0:	68a1      	ldr	r1, [r4, #8]
 80103b2:	4b09      	ldr	r3, [pc, #36]	@ (80103d8 <cleanup_stdio+0x38>)
 80103b4:	4299      	cmp	r1, r3
 80103b6:	d002      	beq.n	80103be <cleanup_stdio+0x1e>
 80103b8:	4620      	mov	r0, r4
 80103ba:	f001 fff7 	bl	80123ac <_fflush_r>
 80103be:	68e1      	ldr	r1, [r4, #12]
 80103c0:	4b06      	ldr	r3, [pc, #24]	@ (80103dc <cleanup_stdio+0x3c>)
 80103c2:	4299      	cmp	r1, r3
 80103c4:	d004      	beq.n	80103d0 <cleanup_stdio+0x30>
 80103c6:	4620      	mov	r0, r4
 80103c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103cc:	f001 bfee 	b.w	80123ac <_fflush_r>
 80103d0:	bd10      	pop	{r4, pc}
 80103d2:	bf00      	nop
 80103d4:	20003e84 	.word	0x20003e84
 80103d8:	20003eec 	.word	0x20003eec
 80103dc:	20003f54 	.word	0x20003f54

080103e0 <global_stdio_init.part.0>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	4b0b      	ldr	r3, [pc, #44]	@ (8010410 <global_stdio_init.part.0+0x30>)
 80103e4:	4c0b      	ldr	r4, [pc, #44]	@ (8010414 <global_stdio_init.part.0+0x34>)
 80103e6:	4a0c      	ldr	r2, [pc, #48]	@ (8010418 <global_stdio_init.part.0+0x38>)
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	4620      	mov	r0, r4
 80103ec:	2200      	movs	r2, #0
 80103ee:	2104      	movs	r1, #4
 80103f0:	f7ff ff94 	bl	801031c <std>
 80103f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80103f8:	2201      	movs	r2, #1
 80103fa:	2109      	movs	r1, #9
 80103fc:	f7ff ff8e 	bl	801031c <std>
 8010400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010404:	2202      	movs	r2, #2
 8010406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801040a:	2112      	movs	r1, #18
 801040c:	f7ff bf86 	b.w	801031c <std>
 8010410:	20003fbc 	.word	0x20003fbc
 8010414:	20003e84 	.word	0x20003e84
 8010418:	08010389 	.word	0x08010389

0801041c <__sfp_lock_acquire>:
 801041c:	4801      	ldr	r0, [pc, #4]	@ (8010424 <__sfp_lock_acquire+0x8>)
 801041e:	f000 ba5c 	b.w	80108da <__retarget_lock_acquire_recursive>
 8010422:	bf00      	nop
 8010424:	20003fc5 	.word	0x20003fc5

08010428 <__sfp_lock_release>:
 8010428:	4801      	ldr	r0, [pc, #4]	@ (8010430 <__sfp_lock_release+0x8>)
 801042a:	f000 ba57 	b.w	80108dc <__retarget_lock_release_recursive>
 801042e:	bf00      	nop
 8010430:	20003fc5 	.word	0x20003fc5

08010434 <__sinit>:
 8010434:	b510      	push	{r4, lr}
 8010436:	4604      	mov	r4, r0
 8010438:	f7ff fff0 	bl	801041c <__sfp_lock_acquire>
 801043c:	6a23      	ldr	r3, [r4, #32]
 801043e:	b11b      	cbz	r3, 8010448 <__sinit+0x14>
 8010440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010444:	f7ff bff0 	b.w	8010428 <__sfp_lock_release>
 8010448:	4b04      	ldr	r3, [pc, #16]	@ (801045c <__sinit+0x28>)
 801044a:	6223      	str	r3, [r4, #32]
 801044c:	4b04      	ldr	r3, [pc, #16]	@ (8010460 <__sinit+0x2c>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1f5      	bne.n	8010440 <__sinit+0xc>
 8010454:	f7ff ffc4 	bl	80103e0 <global_stdio_init.part.0>
 8010458:	e7f2      	b.n	8010440 <__sinit+0xc>
 801045a:	bf00      	nop
 801045c:	080103a1 	.word	0x080103a1
 8010460:	20003fbc 	.word	0x20003fbc

08010464 <_fwalk_sglue>:
 8010464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010468:	4607      	mov	r7, r0
 801046a:	4688      	mov	r8, r1
 801046c:	4614      	mov	r4, r2
 801046e:	2600      	movs	r6, #0
 8010470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010474:	f1b9 0901 	subs.w	r9, r9, #1
 8010478:	d505      	bpl.n	8010486 <_fwalk_sglue+0x22>
 801047a:	6824      	ldr	r4, [r4, #0]
 801047c:	2c00      	cmp	r4, #0
 801047e:	d1f7      	bne.n	8010470 <_fwalk_sglue+0xc>
 8010480:	4630      	mov	r0, r6
 8010482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010486:	89ab      	ldrh	r3, [r5, #12]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d907      	bls.n	801049c <_fwalk_sglue+0x38>
 801048c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010490:	3301      	adds	r3, #1
 8010492:	d003      	beq.n	801049c <_fwalk_sglue+0x38>
 8010494:	4629      	mov	r1, r5
 8010496:	4638      	mov	r0, r7
 8010498:	47c0      	blx	r8
 801049a:	4306      	orrs	r6, r0
 801049c:	3568      	adds	r5, #104	@ 0x68
 801049e:	e7e9      	b.n	8010474 <_fwalk_sglue+0x10>

080104a0 <_puts_r>:
 80104a0:	6a03      	ldr	r3, [r0, #32]
 80104a2:	b570      	push	{r4, r5, r6, lr}
 80104a4:	6884      	ldr	r4, [r0, #8]
 80104a6:	4605      	mov	r5, r0
 80104a8:	460e      	mov	r6, r1
 80104aa:	b90b      	cbnz	r3, 80104b0 <_puts_r+0x10>
 80104ac:	f7ff ffc2 	bl	8010434 <__sinit>
 80104b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104b2:	07db      	lsls	r3, r3, #31
 80104b4:	d405      	bmi.n	80104c2 <_puts_r+0x22>
 80104b6:	89a3      	ldrh	r3, [r4, #12]
 80104b8:	0598      	lsls	r0, r3, #22
 80104ba:	d402      	bmi.n	80104c2 <_puts_r+0x22>
 80104bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104be:	f000 fa0c 	bl	80108da <__retarget_lock_acquire_recursive>
 80104c2:	89a3      	ldrh	r3, [r4, #12]
 80104c4:	0719      	lsls	r1, r3, #28
 80104c6:	d502      	bpl.n	80104ce <_puts_r+0x2e>
 80104c8:	6923      	ldr	r3, [r4, #16]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d135      	bne.n	801053a <_puts_r+0x9a>
 80104ce:	4621      	mov	r1, r4
 80104d0:	4628      	mov	r0, r5
 80104d2:	f000 f911 	bl	80106f8 <__swsetup_r>
 80104d6:	b380      	cbz	r0, 801053a <_puts_r+0x9a>
 80104d8:	f04f 35ff 	mov.w	r5, #4294967295
 80104dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104de:	07da      	lsls	r2, r3, #31
 80104e0:	d405      	bmi.n	80104ee <_puts_r+0x4e>
 80104e2:	89a3      	ldrh	r3, [r4, #12]
 80104e4:	059b      	lsls	r3, r3, #22
 80104e6:	d402      	bmi.n	80104ee <_puts_r+0x4e>
 80104e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104ea:	f000 f9f7 	bl	80108dc <__retarget_lock_release_recursive>
 80104ee:	4628      	mov	r0, r5
 80104f0:	bd70      	pop	{r4, r5, r6, pc}
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	da04      	bge.n	8010500 <_puts_r+0x60>
 80104f6:	69a2      	ldr	r2, [r4, #24]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	dc17      	bgt.n	801052c <_puts_r+0x8c>
 80104fc:	290a      	cmp	r1, #10
 80104fe:	d015      	beq.n	801052c <_puts_r+0x8c>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	6022      	str	r2, [r4, #0]
 8010506:	7019      	strb	r1, [r3, #0]
 8010508:	68a3      	ldr	r3, [r4, #8]
 801050a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801050e:	3b01      	subs	r3, #1
 8010510:	60a3      	str	r3, [r4, #8]
 8010512:	2900      	cmp	r1, #0
 8010514:	d1ed      	bne.n	80104f2 <_puts_r+0x52>
 8010516:	2b00      	cmp	r3, #0
 8010518:	da11      	bge.n	801053e <_puts_r+0x9e>
 801051a:	4622      	mov	r2, r4
 801051c:	210a      	movs	r1, #10
 801051e:	4628      	mov	r0, r5
 8010520:	f000 f8ab 	bl	801067a <__swbuf_r>
 8010524:	3001      	adds	r0, #1
 8010526:	d0d7      	beq.n	80104d8 <_puts_r+0x38>
 8010528:	250a      	movs	r5, #10
 801052a:	e7d7      	b.n	80104dc <_puts_r+0x3c>
 801052c:	4622      	mov	r2, r4
 801052e:	4628      	mov	r0, r5
 8010530:	f000 f8a3 	bl	801067a <__swbuf_r>
 8010534:	3001      	adds	r0, #1
 8010536:	d1e7      	bne.n	8010508 <_puts_r+0x68>
 8010538:	e7ce      	b.n	80104d8 <_puts_r+0x38>
 801053a:	3e01      	subs	r6, #1
 801053c:	e7e4      	b.n	8010508 <_puts_r+0x68>
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	6022      	str	r2, [r4, #0]
 8010544:	220a      	movs	r2, #10
 8010546:	701a      	strb	r2, [r3, #0]
 8010548:	e7ee      	b.n	8010528 <_puts_r+0x88>
	...

0801054c <puts>:
 801054c:	4b02      	ldr	r3, [pc, #8]	@ (8010558 <puts+0xc>)
 801054e:	4601      	mov	r1, r0
 8010550:	6818      	ldr	r0, [r3, #0]
 8010552:	f7ff bfa5 	b.w	80104a0 <_puts_r>
 8010556:	bf00      	nop
 8010558:	2000001c 	.word	0x2000001c

0801055c <siprintf>:
 801055c:	b40e      	push	{r1, r2, r3}
 801055e:	b500      	push	{lr}
 8010560:	b09c      	sub	sp, #112	@ 0x70
 8010562:	ab1d      	add	r3, sp, #116	@ 0x74
 8010564:	9002      	str	r0, [sp, #8]
 8010566:	9006      	str	r0, [sp, #24]
 8010568:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801056c:	4809      	ldr	r0, [pc, #36]	@ (8010594 <siprintf+0x38>)
 801056e:	9107      	str	r1, [sp, #28]
 8010570:	9104      	str	r1, [sp, #16]
 8010572:	4909      	ldr	r1, [pc, #36]	@ (8010598 <siprintf+0x3c>)
 8010574:	f853 2b04 	ldr.w	r2, [r3], #4
 8010578:	9105      	str	r1, [sp, #20]
 801057a:	6800      	ldr	r0, [r0, #0]
 801057c:	9301      	str	r3, [sp, #4]
 801057e:	a902      	add	r1, sp, #8
 8010580:	f001 f8ec 	bl	801175c <_svfiprintf_r>
 8010584:	9b02      	ldr	r3, [sp, #8]
 8010586:	2200      	movs	r2, #0
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	b01c      	add	sp, #112	@ 0x70
 801058c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010590:	b003      	add	sp, #12
 8010592:	4770      	bx	lr
 8010594:	2000001c 	.word	0x2000001c
 8010598:	ffff0208 	.word	0xffff0208

0801059c <siscanf>:
 801059c:	b40e      	push	{r1, r2, r3}
 801059e:	b530      	push	{r4, r5, lr}
 80105a0:	b09c      	sub	sp, #112	@ 0x70
 80105a2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80105a4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80105a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80105ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80105b0:	9002      	str	r0, [sp, #8]
 80105b2:	9006      	str	r0, [sp, #24]
 80105b4:	f7ef fe16 	bl	80001e4 <strlen>
 80105b8:	4b0b      	ldr	r3, [pc, #44]	@ (80105e8 <siscanf+0x4c>)
 80105ba:	9003      	str	r0, [sp, #12]
 80105bc:	9007      	str	r0, [sp, #28]
 80105be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105c0:	480a      	ldr	r0, [pc, #40]	@ (80105ec <siscanf+0x50>)
 80105c2:	9401      	str	r4, [sp, #4]
 80105c4:	2300      	movs	r3, #0
 80105c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80105ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80105ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80105d2:	462a      	mov	r2, r5
 80105d4:	4623      	mov	r3, r4
 80105d6:	a902      	add	r1, sp, #8
 80105d8:	6800      	ldr	r0, [r0, #0]
 80105da:	f001 fa13 	bl	8011a04 <__ssvfiscanf_r>
 80105de:	b01c      	add	sp, #112	@ 0x70
 80105e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105e4:	b003      	add	sp, #12
 80105e6:	4770      	bx	lr
 80105e8:	08010613 	.word	0x08010613
 80105ec:	2000001c 	.word	0x2000001c

080105f0 <__sread>:
 80105f0:	b510      	push	{r4, lr}
 80105f2:	460c      	mov	r4, r1
 80105f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105f8:	f000 f910 	bl	801081c <_read_r>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	bfab      	itete	ge
 8010600:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010602:	89a3      	ldrhlt	r3, [r4, #12]
 8010604:	181b      	addge	r3, r3, r0
 8010606:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801060a:	bfac      	ite	ge
 801060c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801060e:	81a3      	strhlt	r3, [r4, #12]
 8010610:	bd10      	pop	{r4, pc}

08010612 <__seofread>:
 8010612:	2000      	movs	r0, #0
 8010614:	4770      	bx	lr

08010616 <__swrite>:
 8010616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061a:	461f      	mov	r7, r3
 801061c:	898b      	ldrh	r3, [r1, #12]
 801061e:	05db      	lsls	r3, r3, #23
 8010620:	4605      	mov	r5, r0
 8010622:	460c      	mov	r4, r1
 8010624:	4616      	mov	r6, r2
 8010626:	d505      	bpl.n	8010634 <__swrite+0x1e>
 8010628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801062c:	2302      	movs	r3, #2
 801062e:	2200      	movs	r2, #0
 8010630:	f000 f8e2 	bl	80107f8 <_lseek_r>
 8010634:	89a3      	ldrh	r3, [r4, #12]
 8010636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801063a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801063e:	81a3      	strh	r3, [r4, #12]
 8010640:	4632      	mov	r2, r6
 8010642:	463b      	mov	r3, r7
 8010644:	4628      	mov	r0, r5
 8010646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801064a:	f000 b909 	b.w	8010860 <_write_r>

0801064e <__sseek>:
 801064e:	b510      	push	{r4, lr}
 8010650:	460c      	mov	r4, r1
 8010652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010656:	f000 f8cf 	bl	80107f8 <_lseek_r>
 801065a:	1c43      	adds	r3, r0, #1
 801065c:	89a3      	ldrh	r3, [r4, #12]
 801065e:	bf15      	itete	ne
 8010660:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010662:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010666:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801066a:	81a3      	strheq	r3, [r4, #12]
 801066c:	bf18      	it	ne
 801066e:	81a3      	strhne	r3, [r4, #12]
 8010670:	bd10      	pop	{r4, pc}

08010672 <__sclose>:
 8010672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010676:	f000 b8af 	b.w	80107d8 <_close_r>

0801067a <__swbuf_r>:
 801067a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067c:	460e      	mov	r6, r1
 801067e:	4614      	mov	r4, r2
 8010680:	4605      	mov	r5, r0
 8010682:	b118      	cbz	r0, 801068c <__swbuf_r+0x12>
 8010684:	6a03      	ldr	r3, [r0, #32]
 8010686:	b90b      	cbnz	r3, 801068c <__swbuf_r+0x12>
 8010688:	f7ff fed4 	bl	8010434 <__sinit>
 801068c:	69a3      	ldr	r3, [r4, #24]
 801068e:	60a3      	str	r3, [r4, #8]
 8010690:	89a3      	ldrh	r3, [r4, #12]
 8010692:	071a      	lsls	r2, r3, #28
 8010694:	d501      	bpl.n	801069a <__swbuf_r+0x20>
 8010696:	6923      	ldr	r3, [r4, #16]
 8010698:	b943      	cbnz	r3, 80106ac <__swbuf_r+0x32>
 801069a:	4621      	mov	r1, r4
 801069c:	4628      	mov	r0, r5
 801069e:	f000 f82b 	bl	80106f8 <__swsetup_r>
 80106a2:	b118      	cbz	r0, 80106ac <__swbuf_r+0x32>
 80106a4:	f04f 37ff 	mov.w	r7, #4294967295
 80106a8:	4638      	mov	r0, r7
 80106aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	6922      	ldr	r2, [r4, #16]
 80106b0:	1a98      	subs	r0, r3, r2
 80106b2:	6963      	ldr	r3, [r4, #20]
 80106b4:	b2f6      	uxtb	r6, r6
 80106b6:	4283      	cmp	r3, r0
 80106b8:	4637      	mov	r7, r6
 80106ba:	dc05      	bgt.n	80106c8 <__swbuf_r+0x4e>
 80106bc:	4621      	mov	r1, r4
 80106be:	4628      	mov	r0, r5
 80106c0:	f001 fe74 	bl	80123ac <_fflush_r>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	d1ed      	bne.n	80106a4 <__swbuf_r+0x2a>
 80106c8:	68a3      	ldr	r3, [r4, #8]
 80106ca:	3b01      	subs	r3, #1
 80106cc:	60a3      	str	r3, [r4, #8]
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	1c5a      	adds	r2, r3, #1
 80106d2:	6022      	str	r2, [r4, #0]
 80106d4:	701e      	strb	r6, [r3, #0]
 80106d6:	6962      	ldr	r2, [r4, #20]
 80106d8:	1c43      	adds	r3, r0, #1
 80106da:	429a      	cmp	r2, r3
 80106dc:	d004      	beq.n	80106e8 <__swbuf_r+0x6e>
 80106de:	89a3      	ldrh	r3, [r4, #12]
 80106e0:	07db      	lsls	r3, r3, #31
 80106e2:	d5e1      	bpl.n	80106a8 <__swbuf_r+0x2e>
 80106e4:	2e0a      	cmp	r6, #10
 80106e6:	d1df      	bne.n	80106a8 <__swbuf_r+0x2e>
 80106e8:	4621      	mov	r1, r4
 80106ea:	4628      	mov	r0, r5
 80106ec:	f001 fe5e 	bl	80123ac <_fflush_r>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	d0d9      	beq.n	80106a8 <__swbuf_r+0x2e>
 80106f4:	e7d6      	b.n	80106a4 <__swbuf_r+0x2a>
	...

080106f8 <__swsetup_r>:
 80106f8:	b538      	push	{r3, r4, r5, lr}
 80106fa:	4b29      	ldr	r3, [pc, #164]	@ (80107a0 <__swsetup_r+0xa8>)
 80106fc:	4605      	mov	r5, r0
 80106fe:	6818      	ldr	r0, [r3, #0]
 8010700:	460c      	mov	r4, r1
 8010702:	b118      	cbz	r0, 801070c <__swsetup_r+0x14>
 8010704:	6a03      	ldr	r3, [r0, #32]
 8010706:	b90b      	cbnz	r3, 801070c <__swsetup_r+0x14>
 8010708:	f7ff fe94 	bl	8010434 <__sinit>
 801070c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010710:	0719      	lsls	r1, r3, #28
 8010712:	d422      	bmi.n	801075a <__swsetup_r+0x62>
 8010714:	06da      	lsls	r2, r3, #27
 8010716:	d407      	bmi.n	8010728 <__swsetup_r+0x30>
 8010718:	2209      	movs	r2, #9
 801071a:	602a      	str	r2, [r5, #0]
 801071c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010720:	81a3      	strh	r3, [r4, #12]
 8010722:	f04f 30ff 	mov.w	r0, #4294967295
 8010726:	e033      	b.n	8010790 <__swsetup_r+0x98>
 8010728:	0758      	lsls	r0, r3, #29
 801072a:	d512      	bpl.n	8010752 <__swsetup_r+0x5a>
 801072c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801072e:	b141      	cbz	r1, 8010742 <__swsetup_r+0x4a>
 8010730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010734:	4299      	cmp	r1, r3
 8010736:	d002      	beq.n	801073e <__swsetup_r+0x46>
 8010738:	4628      	mov	r0, r5
 801073a:	f000 f8e5 	bl	8010908 <_free_r>
 801073e:	2300      	movs	r3, #0
 8010740:	6363      	str	r3, [r4, #52]	@ 0x34
 8010742:	89a3      	ldrh	r3, [r4, #12]
 8010744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010748:	81a3      	strh	r3, [r4, #12]
 801074a:	2300      	movs	r3, #0
 801074c:	6063      	str	r3, [r4, #4]
 801074e:	6923      	ldr	r3, [r4, #16]
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	89a3      	ldrh	r3, [r4, #12]
 8010754:	f043 0308 	orr.w	r3, r3, #8
 8010758:	81a3      	strh	r3, [r4, #12]
 801075a:	6923      	ldr	r3, [r4, #16]
 801075c:	b94b      	cbnz	r3, 8010772 <__swsetup_r+0x7a>
 801075e:	89a3      	ldrh	r3, [r4, #12]
 8010760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010768:	d003      	beq.n	8010772 <__swsetup_r+0x7a>
 801076a:	4621      	mov	r1, r4
 801076c:	4628      	mov	r0, r5
 801076e:	f001 fe6b 	bl	8012448 <__smakebuf_r>
 8010772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010776:	f013 0201 	ands.w	r2, r3, #1
 801077a:	d00a      	beq.n	8010792 <__swsetup_r+0x9a>
 801077c:	2200      	movs	r2, #0
 801077e:	60a2      	str	r2, [r4, #8]
 8010780:	6962      	ldr	r2, [r4, #20]
 8010782:	4252      	negs	r2, r2
 8010784:	61a2      	str	r2, [r4, #24]
 8010786:	6922      	ldr	r2, [r4, #16]
 8010788:	b942      	cbnz	r2, 801079c <__swsetup_r+0xa4>
 801078a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801078e:	d1c5      	bne.n	801071c <__swsetup_r+0x24>
 8010790:	bd38      	pop	{r3, r4, r5, pc}
 8010792:	0799      	lsls	r1, r3, #30
 8010794:	bf58      	it	pl
 8010796:	6962      	ldrpl	r2, [r4, #20]
 8010798:	60a2      	str	r2, [r4, #8]
 801079a:	e7f4      	b.n	8010786 <__swsetup_r+0x8e>
 801079c:	2000      	movs	r0, #0
 801079e:	e7f7      	b.n	8010790 <__swsetup_r+0x98>
 80107a0:	2000001c 	.word	0x2000001c

080107a4 <memset>:
 80107a4:	4402      	add	r2, r0
 80107a6:	4603      	mov	r3, r0
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d100      	bne.n	80107ae <memset+0xa>
 80107ac:	4770      	bx	lr
 80107ae:	f803 1b01 	strb.w	r1, [r3], #1
 80107b2:	e7f9      	b.n	80107a8 <memset+0x4>

080107b4 <strncmp>:
 80107b4:	b510      	push	{r4, lr}
 80107b6:	b16a      	cbz	r2, 80107d4 <strncmp+0x20>
 80107b8:	3901      	subs	r1, #1
 80107ba:	1884      	adds	r4, r0, r2
 80107bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d103      	bne.n	80107d0 <strncmp+0x1c>
 80107c8:	42a0      	cmp	r0, r4
 80107ca:	d001      	beq.n	80107d0 <strncmp+0x1c>
 80107cc:	2a00      	cmp	r2, #0
 80107ce:	d1f5      	bne.n	80107bc <strncmp+0x8>
 80107d0:	1ad0      	subs	r0, r2, r3
 80107d2:	bd10      	pop	{r4, pc}
 80107d4:	4610      	mov	r0, r2
 80107d6:	e7fc      	b.n	80107d2 <strncmp+0x1e>

080107d8 <_close_r>:
 80107d8:	b538      	push	{r3, r4, r5, lr}
 80107da:	4d06      	ldr	r5, [pc, #24]	@ (80107f4 <_close_r+0x1c>)
 80107dc:	2300      	movs	r3, #0
 80107de:	4604      	mov	r4, r0
 80107e0:	4608      	mov	r0, r1
 80107e2:	602b      	str	r3, [r5, #0]
 80107e4:	f7f3 fe48 	bl	8004478 <_close>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	d102      	bne.n	80107f2 <_close_r+0x1a>
 80107ec:	682b      	ldr	r3, [r5, #0]
 80107ee:	b103      	cbz	r3, 80107f2 <_close_r+0x1a>
 80107f0:	6023      	str	r3, [r4, #0]
 80107f2:	bd38      	pop	{r3, r4, r5, pc}
 80107f4:	20003fc0 	.word	0x20003fc0

080107f8 <_lseek_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d07      	ldr	r5, [pc, #28]	@ (8010818 <_lseek_r+0x20>)
 80107fc:	4604      	mov	r4, r0
 80107fe:	4608      	mov	r0, r1
 8010800:	4611      	mov	r1, r2
 8010802:	2200      	movs	r2, #0
 8010804:	602a      	str	r2, [r5, #0]
 8010806:	461a      	mov	r2, r3
 8010808:	f7f3 fe5d 	bl	80044c6 <_lseek>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d102      	bne.n	8010816 <_lseek_r+0x1e>
 8010810:	682b      	ldr	r3, [r5, #0]
 8010812:	b103      	cbz	r3, 8010816 <_lseek_r+0x1e>
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	20003fc0 	.word	0x20003fc0

0801081c <_read_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d07      	ldr	r5, [pc, #28]	@ (801083c <_read_r+0x20>)
 8010820:	4604      	mov	r4, r0
 8010822:	4608      	mov	r0, r1
 8010824:	4611      	mov	r1, r2
 8010826:	2200      	movs	r2, #0
 8010828:	602a      	str	r2, [r5, #0]
 801082a:	461a      	mov	r2, r3
 801082c:	f7f3 fdeb 	bl	8004406 <_read>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_read_r+0x1e>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	b103      	cbz	r3, 801083a <_read_r+0x1e>
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	20003fc0 	.word	0x20003fc0

08010840 <_sbrk_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	4d06      	ldr	r5, [pc, #24]	@ (801085c <_sbrk_r+0x1c>)
 8010844:	2300      	movs	r3, #0
 8010846:	4604      	mov	r4, r0
 8010848:	4608      	mov	r0, r1
 801084a:	602b      	str	r3, [r5, #0]
 801084c:	f7f3 fe48 	bl	80044e0 <_sbrk>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d102      	bne.n	801085a <_sbrk_r+0x1a>
 8010854:	682b      	ldr	r3, [r5, #0]
 8010856:	b103      	cbz	r3, 801085a <_sbrk_r+0x1a>
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	20003fc0 	.word	0x20003fc0

08010860 <_write_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	@ (8010880 <_write_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f7f3 fde6 	bl	8004440 <_write>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_write_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_write_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	20003fc0 	.word	0x20003fc0

08010884 <__errno>:
 8010884:	4b01      	ldr	r3, [pc, #4]	@ (801088c <__errno+0x8>)
 8010886:	6818      	ldr	r0, [r3, #0]
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	2000001c 	.word	0x2000001c

08010890 <__libc_init_array>:
 8010890:	b570      	push	{r4, r5, r6, lr}
 8010892:	4d0d      	ldr	r5, [pc, #52]	@ (80108c8 <__libc_init_array+0x38>)
 8010894:	4c0d      	ldr	r4, [pc, #52]	@ (80108cc <__libc_init_array+0x3c>)
 8010896:	1b64      	subs	r4, r4, r5
 8010898:	10a4      	asrs	r4, r4, #2
 801089a:	2600      	movs	r6, #0
 801089c:	42a6      	cmp	r6, r4
 801089e:	d109      	bne.n	80108b4 <__libc_init_array+0x24>
 80108a0:	4d0b      	ldr	r5, [pc, #44]	@ (80108d0 <__libc_init_array+0x40>)
 80108a2:	4c0c      	ldr	r4, [pc, #48]	@ (80108d4 <__libc_init_array+0x44>)
 80108a4:	f003 f9c4 	bl	8013c30 <_init>
 80108a8:	1b64      	subs	r4, r4, r5
 80108aa:	10a4      	asrs	r4, r4, #2
 80108ac:	2600      	movs	r6, #0
 80108ae:	42a6      	cmp	r6, r4
 80108b0:	d105      	bne.n	80108be <__libc_init_array+0x2e>
 80108b2:	bd70      	pop	{r4, r5, r6, pc}
 80108b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80108b8:	4798      	blx	r3
 80108ba:	3601      	adds	r6, #1
 80108bc:	e7ee      	b.n	801089c <__libc_init_array+0xc>
 80108be:	f855 3b04 	ldr.w	r3, [r5], #4
 80108c2:	4798      	blx	r3
 80108c4:	3601      	adds	r6, #1
 80108c6:	e7f2      	b.n	80108ae <__libc_init_array+0x1e>
 80108c8:	08014264 	.word	0x08014264
 80108cc:	08014264 	.word	0x08014264
 80108d0:	08014264 	.word	0x08014264
 80108d4:	08014268 	.word	0x08014268

080108d8 <__retarget_lock_init_recursive>:
 80108d8:	4770      	bx	lr

080108da <__retarget_lock_acquire_recursive>:
 80108da:	4770      	bx	lr

080108dc <__retarget_lock_release_recursive>:
 80108dc:	4770      	bx	lr

080108de <memcpy>:
 80108de:	440a      	add	r2, r1
 80108e0:	4291      	cmp	r1, r2
 80108e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80108e6:	d100      	bne.n	80108ea <memcpy+0xc>
 80108e8:	4770      	bx	lr
 80108ea:	b510      	push	{r4, lr}
 80108ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108f4:	4291      	cmp	r1, r2
 80108f6:	d1f9      	bne.n	80108ec <memcpy+0xe>
 80108f8:	bd10      	pop	{r4, pc}
	...

080108fc <nanf>:
 80108fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010904 <nanf+0x8>
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	7fc00000 	.word	0x7fc00000

08010908 <_free_r>:
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	4605      	mov	r5, r0
 801090c:	2900      	cmp	r1, #0
 801090e:	d041      	beq.n	8010994 <_free_r+0x8c>
 8010910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010914:	1f0c      	subs	r4, r1, #4
 8010916:	2b00      	cmp	r3, #0
 8010918:	bfb8      	it	lt
 801091a:	18e4      	addlt	r4, r4, r3
 801091c:	f7ff fade 	bl	800fedc <__malloc_lock>
 8010920:	4a1d      	ldr	r2, [pc, #116]	@ (8010998 <_free_r+0x90>)
 8010922:	6813      	ldr	r3, [r2, #0]
 8010924:	b933      	cbnz	r3, 8010934 <_free_r+0x2c>
 8010926:	6063      	str	r3, [r4, #4]
 8010928:	6014      	str	r4, [r2, #0]
 801092a:	4628      	mov	r0, r5
 801092c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010930:	f7ff bada 	b.w	800fee8 <__malloc_unlock>
 8010934:	42a3      	cmp	r3, r4
 8010936:	d908      	bls.n	801094a <_free_r+0x42>
 8010938:	6820      	ldr	r0, [r4, #0]
 801093a:	1821      	adds	r1, r4, r0
 801093c:	428b      	cmp	r3, r1
 801093e:	bf01      	itttt	eq
 8010940:	6819      	ldreq	r1, [r3, #0]
 8010942:	685b      	ldreq	r3, [r3, #4]
 8010944:	1809      	addeq	r1, r1, r0
 8010946:	6021      	streq	r1, [r4, #0]
 8010948:	e7ed      	b.n	8010926 <_free_r+0x1e>
 801094a:	461a      	mov	r2, r3
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	b10b      	cbz	r3, 8010954 <_free_r+0x4c>
 8010950:	42a3      	cmp	r3, r4
 8010952:	d9fa      	bls.n	801094a <_free_r+0x42>
 8010954:	6811      	ldr	r1, [r2, #0]
 8010956:	1850      	adds	r0, r2, r1
 8010958:	42a0      	cmp	r0, r4
 801095a:	d10b      	bne.n	8010974 <_free_r+0x6c>
 801095c:	6820      	ldr	r0, [r4, #0]
 801095e:	4401      	add	r1, r0
 8010960:	1850      	adds	r0, r2, r1
 8010962:	4283      	cmp	r3, r0
 8010964:	6011      	str	r1, [r2, #0]
 8010966:	d1e0      	bne.n	801092a <_free_r+0x22>
 8010968:	6818      	ldr	r0, [r3, #0]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	6053      	str	r3, [r2, #4]
 801096e:	4408      	add	r0, r1
 8010970:	6010      	str	r0, [r2, #0]
 8010972:	e7da      	b.n	801092a <_free_r+0x22>
 8010974:	d902      	bls.n	801097c <_free_r+0x74>
 8010976:	230c      	movs	r3, #12
 8010978:	602b      	str	r3, [r5, #0]
 801097a:	e7d6      	b.n	801092a <_free_r+0x22>
 801097c:	6820      	ldr	r0, [r4, #0]
 801097e:	1821      	adds	r1, r4, r0
 8010980:	428b      	cmp	r3, r1
 8010982:	bf04      	itt	eq
 8010984:	6819      	ldreq	r1, [r3, #0]
 8010986:	685b      	ldreq	r3, [r3, #4]
 8010988:	6063      	str	r3, [r4, #4]
 801098a:	bf04      	itt	eq
 801098c:	1809      	addeq	r1, r1, r0
 801098e:	6021      	streq	r1, [r4, #0]
 8010990:	6054      	str	r4, [r2, #4]
 8010992:	e7ca      	b.n	801092a <_free_r+0x22>
 8010994:	bd38      	pop	{r3, r4, r5, pc}
 8010996:	bf00      	nop
 8010998:	20003e80 	.word	0x20003e80

0801099c <sulp>:
 801099c:	b570      	push	{r4, r5, r6, lr}
 801099e:	4604      	mov	r4, r0
 80109a0:	460d      	mov	r5, r1
 80109a2:	ec45 4b10 	vmov	d0, r4, r5
 80109a6:	4616      	mov	r6, r2
 80109a8:	f002 fd02 	bl	80133b0 <__ulp>
 80109ac:	ec51 0b10 	vmov	r0, r1, d0
 80109b0:	b17e      	cbz	r6, 80109d2 <sulp+0x36>
 80109b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80109b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	dd09      	ble.n	80109d2 <sulp+0x36>
 80109be:	051b      	lsls	r3, r3, #20
 80109c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80109c4:	2400      	movs	r4, #0
 80109c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80109ca:	4622      	mov	r2, r4
 80109cc:	462b      	mov	r3, r5
 80109ce:	f7ef fe23 	bl	8000618 <__aeabi_dmul>
 80109d2:	ec41 0b10 	vmov	d0, r0, r1
 80109d6:	bd70      	pop	{r4, r5, r6, pc}

080109d8 <_strtod_l>:
 80109d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109dc:	b09f      	sub	sp, #124	@ 0x7c
 80109de:	460c      	mov	r4, r1
 80109e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80109e2:	2200      	movs	r2, #0
 80109e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80109e6:	9005      	str	r0, [sp, #20]
 80109e8:	f04f 0a00 	mov.w	sl, #0
 80109ec:	f04f 0b00 	mov.w	fp, #0
 80109f0:	460a      	mov	r2, r1
 80109f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80109f4:	7811      	ldrb	r1, [r2, #0]
 80109f6:	292b      	cmp	r1, #43	@ 0x2b
 80109f8:	d04a      	beq.n	8010a90 <_strtod_l+0xb8>
 80109fa:	d838      	bhi.n	8010a6e <_strtod_l+0x96>
 80109fc:	290d      	cmp	r1, #13
 80109fe:	d832      	bhi.n	8010a66 <_strtod_l+0x8e>
 8010a00:	2908      	cmp	r1, #8
 8010a02:	d832      	bhi.n	8010a6a <_strtod_l+0x92>
 8010a04:	2900      	cmp	r1, #0
 8010a06:	d03b      	beq.n	8010a80 <_strtod_l+0xa8>
 8010a08:	2200      	movs	r2, #0
 8010a0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010a0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010a0e:	782a      	ldrb	r2, [r5, #0]
 8010a10:	2a30      	cmp	r2, #48	@ 0x30
 8010a12:	f040 80b3 	bne.w	8010b7c <_strtod_l+0x1a4>
 8010a16:	786a      	ldrb	r2, [r5, #1]
 8010a18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010a1c:	2a58      	cmp	r2, #88	@ 0x58
 8010a1e:	d16e      	bne.n	8010afe <_strtod_l+0x126>
 8010a20:	9302      	str	r3, [sp, #8]
 8010a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a24:	9301      	str	r3, [sp, #4]
 8010a26:	ab1a      	add	r3, sp, #104	@ 0x68
 8010a28:	9300      	str	r3, [sp, #0]
 8010a2a:	4a8e      	ldr	r2, [pc, #568]	@ (8010c64 <_strtod_l+0x28c>)
 8010a2c:	9805      	ldr	r0, [sp, #20]
 8010a2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010a30:	a919      	add	r1, sp, #100	@ 0x64
 8010a32:	f001 fe65 	bl	8012700 <__gethex>
 8010a36:	f010 060f 	ands.w	r6, r0, #15
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	d005      	beq.n	8010a4a <_strtod_l+0x72>
 8010a3e:	2e06      	cmp	r6, #6
 8010a40:	d128      	bne.n	8010a94 <_strtod_l+0xbc>
 8010a42:	3501      	adds	r5, #1
 8010a44:	2300      	movs	r3, #0
 8010a46:	9519      	str	r5, [sp, #100]	@ 0x64
 8010a48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f040 858e 	bne.w	801156e <_strtod_l+0xb96>
 8010a52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a54:	b1cb      	cbz	r3, 8010a8a <_strtod_l+0xb2>
 8010a56:	4652      	mov	r2, sl
 8010a58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010a5c:	ec43 2b10 	vmov	d0, r2, r3
 8010a60:	b01f      	add	sp, #124	@ 0x7c
 8010a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a66:	2920      	cmp	r1, #32
 8010a68:	d1ce      	bne.n	8010a08 <_strtod_l+0x30>
 8010a6a:	3201      	adds	r2, #1
 8010a6c:	e7c1      	b.n	80109f2 <_strtod_l+0x1a>
 8010a6e:	292d      	cmp	r1, #45	@ 0x2d
 8010a70:	d1ca      	bne.n	8010a08 <_strtod_l+0x30>
 8010a72:	2101      	movs	r1, #1
 8010a74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010a76:	1c51      	adds	r1, r2, #1
 8010a78:	9119      	str	r1, [sp, #100]	@ 0x64
 8010a7a:	7852      	ldrb	r2, [r2, #1]
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	d1c5      	bne.n	8010a0c <_strtod_l+0x34>
 8010a80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010a82:	9419      	str	r4, [sp, #100]	@ 0x64
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f040 8570 	bne.w	801156a <_strtod_l+0xb92>
 8010a8a:	4652      	mov	r2, sl
 8010a8c:	465b      	mov	r3, fp
 8010a8e:	e7e5      	b.n	8010a5c <_strtod_l+0x84>
 8010a90:	2100      	movs	r1, #0
 8010a92:	e7ef      	b.n	8010a74 <_strtod_l+0x9c>
 8010a94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010a96:	b13a      	cbz	r2, 8010aa8 <_strtod_l+0xd0>
 8010a98:	2135      	movs	r1, #53	@ 0x35
 8010a9a:	a81c      	add	r0, sp, #112	@ 0x70
 8010a9c:	f002 fd82 	bl	80135a4 <__copybits>
 8010aa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010aa2:	9805      	ldr	r0, [sp, #20]
 8010aa4:	f002 f950 	bl	8012d48 <_Bfree>
 8010aa8:	3e01      	subs	r6, #1
 8010aaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010aac:	2e04      	cmp	r6, #4
 8010aae:	d806      	bhi.n	8010abe <_strtod_l+0xe6>
 8010ab0:	e8df f006 	tbb	[pc, r6]
 8010ab4:	201d0314 	.word	0x201d0314
 8010ab8:	14          	.byte	0x14
 8010ab9:	00          	.byte	0x00
 8010aba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010abe:	05e1      	lsls	r1, r4, #23
 8010ac0:	bf48      	it	mi
 8010ac2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010ac6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010aca:	0d1b      	lsrs	r3, r3, #20
 8010acc:	051b      	lsls	r3, r3, #20
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1bb      	bne.n	8010a4a <_strtod_l+0x72>
 8010ad2:	f7ff fed7 	bl	8010884 <__errno>
 8010ad6:	2322      	movs	r3, #34	@ 0x22
 8010ad8:	6003      	str	r3, [r0, #0]
 8010ada:	e7b6      	b.n	8010a4a <_strtod_l+0x72>
 8010adc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010ae0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010ae4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010ae8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010aec:	e7e7      	b.n	8010abe <_strtod_l+0xe6>
 8010aee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010c6c <_strtod_l+0x294>
 8010af2:	e7e4      	b.n	8010abe <_strtod_l+0xe6>
 8010af4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010af8:	f04f 3aff 	mov.w	sl, #4294967295
 8010afc:	e7df      	b.n	8010abe <_strtod_l+0xe6>
 8010afe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b00:	1c5a      	adds	r2, r3, #1
 8010b02:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b04:	785b      	ldrb	r3, [r3, #1]
 8010b06:	2b30      	cmp	r3, #48	@ 0x30
 8010b08:	d0f9      	beq.n	8010afe <_strtod_l+0x126>
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d09d      	beq.n	8010a4a <_strtod_l+0x72>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b14:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b16:	2300      	movs	r3, #0
 8010b18:	9308      	str	r3, [sp, #32]
 8010b1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b1c:	461f      	mov	r7, r3
 8010b1e:	220a      	movs	r2, #10
 8010b20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010b22:	7805      	ldrb	r5, [r0, #0]
 8010b24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010b28:	b2d9      	uxtb	r1, r3
 8010b2a:	2909      	cmp	r1, #9
 8010b2c:	d928      	bls.n	8010b80 <_strtod_l+0x1a8>
 8010b2e:	494e      	ldr	r1, [pc, #312]	@ (8010c68 <_strtod_l+0x290>)
 8010b30:	2201      	movs	r2, #1
 8010b32:	f7ff fe3f 	bl	80107b4 <strncmp>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d032      	beq.n	8010ba0 <_strtod_l+0x1c8>
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	462a      	mov	r2, r5
 8010b3e:	4681      	mov	r9, r0
 8010b40:	463d      	mov	r5, r7
 8010b42:	4603      	mov	r3, r0
 8010b44:	2a65      	cmp	r2, #101	@ 0x65
 8010b46:	d001      	beq.n	8010b4c <_strtod_l+0x174>
 8010b48:	2a45      	cmp	r2, #69	@ 0x45
 8010b4a:	d114      	bne.n	8010b76 <_strtod_l+0x19e>
 8010b4c:	b91d      	cbnz	r5, 8010b56 <_strtod_l+0x17e>
 8010b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b50:	4302      	orrs	r2, r0
 8010b52:	d095      	beq.n	8010a80 <_strtod_l+0xa8>
 8010b54:	2500      	movs	r5, #0
 8010b56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010b58:	1c62      	adds	r2, r4, #1
 8010b5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b5c:	7862      	ldrb	r2, [r4, #1]
 8010b5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8010b60:	d077      	beq.n	8010c52 <_strtod_l+0x27a>
 8010b62:	2a2d      	cmp	r2, #45	@ 0x2d
 8010b64:	d07b      	beq.n	8010c5e <_strtod_l+0x286>
 8010b66:	f04f 0c00 	mov.w	ip, #0
 8010b6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010b6e:	2909      	cmp	r1, #9
 8010b70:	f240 8082 	bls.w	8010c78 <_strtod_l+0x2a0>
 8010b74:	9419      	str	r4, [sp, #100]	@ 0x64
 8010b76:	f04f 0800 	mov.w	r8, #0
 8010b7a:	e0a2      	b.n	8010cc2 <_strtod_l+0x2ea>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	e7c7      	b.n	8010b10 <_strtod_l+0x138>
 8010b80:	2f08      	cmp	r7, #8
 8010b82:	bfd5      	itete	le
 8010b84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010b86:	9908      	ldrgt	r1, [sp, #32]
 8010b88:	fb02 3301 	mlale	r3, r2, r1, r3
 8010b8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010b90:	f100 0001 	add.w	r0, r0, #1
 8010b94:	bfd4      	ite	le
 8010b96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010b98:	9308      	strgt	r3, [sp, #32]
 8010b9a:	3701      	adds	r7, #1
 8010b9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8010b9e:	e7bf      	b.n	8010b20 <_strtod_l+0x148>
 8010ba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ba2:	1c5a      	adds	r2, r3, #1
 8010ba4:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ba6:	785a      	ldrb	r2, [r3, #1]
 8010ba8:	b37f      	cbz	r7, 8010c0a <_strtod_l+0x232>
 8010baa:	4681      	mov	r9, r0
 8010bac:	463d      	mov	r5, r7
 8010bae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010bb2:	2b09      	cmp	r3, #9
 8010bb4:	d912      	bls.n	8010bdc <_strtod_l+0x204>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e7c4      	b.n	8010b44 <_strtod_l+0x16c>
 8010bba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bbc:	1c5a      	adds	r2, r3, #1
 8010bbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8010bc0:	785a      	ldrb	r2, [r3, #1]
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	2a30      	cmp	r2, #48	@ 0x30
 8010bc6:	d0f8      	beq.n	8010bba <_strtod_l+0x1e2>
 8010bc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010bcc:	2b08      	cmp	r3, #8
 8010bce:	f200 84d3 	bhi.w	8011578 <_strtod_l+0xba0>
 8010bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8010bd6:	4681      	mov	r9, r0
 8010bd8:	2000      	movs	r0, #0
 8010bda:	4605      	mov	r5, r0
 8010bdc:	3a30      	subs	r2, #48	@ 0x30
 8010bde:	f100 0301 	add.w	r3, r0, #1
 8010be2:	d02a      	beq.n	8010c3a <_strtod_l+0x262>
 8010be4:	4499      	add	r9, r3
 8010be6:	eb00 0c05 	add.w	ip, r0, r5
 8010bea:	462b      	mov	r3, r5
 8010bec:	210a      	movs	r1, #10
 8010bee:	4563      	cmp	r3, ip
 8010bf0:	d10d      	bne.n	8010c0e <_strtod_l+0x236>
 8010bf2:	1c69      	adds	r1, r5, #1
 8010bf4:	4401      	add	r1, r0
 8010bf6:	4428      	add	r0, r5
 8010bf8:	2808      	cmp	r0, #8
 8010bfa:	dc16      	bgt.n	8010c2a <_strtod_l+0x252>
 8010bfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010bfe:	230a      	movs	r3, #10
 8010c00:	fb03 2300 	mla	r3, r3, r0, r2
 8010c04:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c06:	2300      	movs	r3, #0
 8010c08:	e018      	b.n	8010c3c <_strtod_l+0x264>
 8010c0a:	4638      	mov	r0, r7
 8010c0c:	e7da      	b.n	8010bc4 <_strtod_l+0x1ec>
 8010c0e:	2b08      	cmp	r3, #8
 8010c10:	f103 0301 	add.w	r3, r3, #1
 8010c14:	dc03      	bgt.n	8010c1e <_strtod_l+0x246>
 8010c16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010c18:	434e      	muls	r6, r1
 8010c1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8010c1c:	e7e7      	b.n	8010bee <_strtod_l+0x216>
 8010c1e:	2b10      	cmp	r3, #16
 8010c20:	bfde      	ittt	le
 8010c22:	9e08      	ldrle	r6, [sp, #32]
 8010c24:	434e      	mulle	r6, r1
 8010c26:	9608      	strle	r6, [sp, #32]
 8010c28:	e7e1      	b.n	8010bee <_strtod_l+0x216>
 8010c2a:	280f      	cmp	r0, #15
 8010c2c:	dceb      	bgt.n	8010c06 <_strtod_l+0x22e>
 8010c2e:	9808      	ldr	r0, [sp, #32]
 8010c30:	230a      	movs	r3, #10
 8010c32:	fb03 2300 	mla	r3, r3, r0, r2
 8010c36:	9308      	str	r3, [sp, #32]
 8010c38:	e7e5      	b.n	8010c06 <_strtod_l+0x22e>
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c3e:	1c50      	adds	r0, r2, #1
 8010c40:	9019      	str	r0, [sp, #100]	@ 0x64
 8010c42:	7852      	ldrb	r2, [r2, #1]
 8010c44:	4618      	mov	r0, r3
 8010c46:	460d      	mov	r5, r1
 8010c48:	e7b1      	b.n	8010bae <_strtod_l+0x1d6>
 8010c4a:	f04f 0900 	mov.w	r9, #0
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e77d      	b.n	8010b4e <_strtod_l+0x176>
 8010c52:	f04f 0c00 	mov.w	ip, #0
 8010c56:	1ca2      	adds	r2, r4, #2
 8010c58:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c5a:	78a2      	ldrb	r2, [r4, #2]
 8010c5c:	e785      	b.n	8010b6a <_strtod_l+0x192>
 8010c5e:	f04f 0c01 	mov.w	ip, #1
 8010c62:	e7f8      	b.n	8010c56 <_strtod_l+0x27e>
 8010c64:	08013ea8 	.word	0x08013ea8
 8010c68:	08013e85 	.word	0x08013e85
 8010c6c:	7ff00000 	.word	0x7ff00000
 8010c70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c72:	1c51      	adds	r1, r2, #1
 8010c74:	9119      	str	r1, [sp, #100]	@ 0x64
 8010c76:	7852      	ldrb	r2, [r2, #1]
 8010c78:	2a30      	cmp	r2, #48	@ 0x30
 8010c7a:	d0f9      	beq.n	8010c70 <_strtod_l+0x298>
 8010c7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010c80:	2908      	cmp	r1, #8
 8010c82:	f63f af78 	bhi.w	8010b76 <_strtod_l+0x19e>
 8010c86:	3a30      	subs	r2, #48	@ 0x30
 8010c88:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010c8e:	f04f 080a 	mov.w	r8, #10
 8010c92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c94:	1c56      	adds	r6, r2, #1
 8010c96:	9619      	str	r6, [sp, #100]	@ 0x64
 8010c98:	7852      	ldrb	r2, [r2, #1]
 8010c9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010c9e:	f1be 0f09 	cmp.w	lr, #9
 8010ca2:	d939      	bls.n	8010d18 <_strtod_l+0x340>
 8010ca4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010ca6:	1a76      	subs	r6, r6, r1
 8010ca8:	2e08      	cmp	r6, #8
 8010caa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010cae:	dc03      	bgt.n	8010cb8 <_strtod_l+0x2e0>
 8010cb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010cb2:	4588      	cmp	r8, r1
 8010cb4:	bfa8      	it	ge
 8010cb6:	4688      	movge	r8, r1
 8010cb8:	f1bc 0f00 	cmp.w	ip, #0
 8010cbc:	d001      	beq.n	8010cc2 <_strtod_l+0x2ea>
 8010cbe:	f1c8 0800 	rsb	r8, r8, #0
 8010cc2:	2d00      	cmp	r5, #0
 8010cc4:	d14e      	bne.n	8010d64 <_strtod_l+0x38c>
 8010cc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010cc8:	4308      	orrs	r0, r1
 8010cca:	f47f aebe 	bne.w	8010a4a <_strtod_l+0x72>
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f47f aed6 	bne.w	8010a80 <_strtod_l+0xa8>
 8010cd4:	2a69      	cmp	r2, #105	@ 0x69
 8010cd6:	d028      	beq.n	8010d2a <_strtod_l+0x352>
 8010cd8:	dc25      	bgt.n	8010d26 <_strtod_l+0x34e>
 8010cda:	2a49      	cmp	r2, #73	@ 0x49
 8010cdc:	d025      	beq.n	8010d2a <_strtod_l+0x352>
 8010cde:	2a4e      	cmp	r2, #78	@ 0x4e
 8010ce0:	f47f aece 	bne.w	8010a80 <_strtod_l+0xa8>
 8010ce4:	499b      	ldr	r1, [pc, #620]	@ (8010f54 <_strtod_l+0x57c>)
 8010ce6:	a819      	add	r0, sp, #100	@ 0x64
 8010ce8:	f001 ff2c 	bl	8012b44 <__match>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	f43f aec7 	beq.w	8010a80 <_strtod_l+0xa8>
 8010cf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	2b28      	cmp	r3, #40	@ 0x28
 8010cf8:	d12e      	bne.n	8010d58 <_strtod_l+0x380>
 8010cfa:	4997      	ldr	r1, [pc, #604]	@ (8010f58 <_strtod_l+0x580>)
 8010cfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8010cfe:	a819      	add	r0, sp, #100	@ 0x64
 8010d00:	f001 ff34 	bl	8012b6c <__hexnan>
 8010d04:	2805      	cmp	r0, #5
 8010d06:	d127      	bne.n	8010d58 <_strtod_l+0x380>
 8010d08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010d0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010d12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010d16:	e698      	b.n	8010a4a <_strtod_l+0x72>
 8010d18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010d1a:	fb08 2101 	mla	r1, r8, r1, r2
 8010d1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010d22:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d24:	e7b5      	b.n	8010c92 <_strtod_l+0x2ba>
 8010d26:	2a6e      	cmp	r2, #110	@ 0x6e
 8010d28:	e7da      	b.n	8010ce0 <_strtod_l+0x308>
 8010d2a:	498c      	ldr	r1, [pc, #560]	@ (8010f5c <_strtod_l+0x584>)
 8010d2c:	a819      	add	r0, sp, #100	@ 0x64
 8010d2e:	f001 ff09 	bl	8012b44 <__match>
 8010d32:	2800      	cmp	r0, #0
 8010d34:	f43f aea4 	beq.w	8010a80 <_strtod_l+0xa8>
 8010d38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d3a:	4989      	ldr	r1, [pc, #548]	@ (8010f60 <_strtod_l+0x588>)
 8010d3c:	3b01      	subs	r3, #1
 8010d3e:	a819      	add	r0, sp, #100	@ 0x64
 8010d40:	9319      	str	r3, [sp, #100]	@ 0x64
 8010d42:	f001 feff 	bl	8012b44 <__match>
 8010d46:	b910      	cbnz	r0, 8010d4e <_strtod_l+0x376>
 8010d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8010d4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010f70 <_strtod_l+0x598>
 8010d52:	f04f 0a00 	mov.w	sl, #0
 8010d56:	e678      	b.n	8010a4a <_strtod_l+0x72>
 8010d58:	4882      	ldr	r0, [pc, #520]	@ (8010f64 <_strtod_l+0x58c>)
 8010d5a:	f001 fc61 	bl	8012620 <nan>
 8010d5e:	ec5b ab10 	vmov	sl, fp, d0
 8010d62:	e672      	b.n	8010a4a <_strtod_l+0x72>
 8010d64:	eba8 0309 	sub.w	r3, r8, r9
 8010d68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d6c:	2f00      	cmp	r7, #0
 8010d6e:	bf08      	it	eq
 8010d70:	462f      	moveq	r7, r5
 8010d72:	2d10      	cmp	r5, #16
 8010d74:	462c      	mov	r4, r5
 8010d76:	bfa8      	it	ge
 8010d78:	2410      	movge	r4, #16
 8010d7a:	f7ef fbd3 	bl	8000524 <__aeabi_ui2d>
 8010d7e:	2d09      	cmp	r5, #9
 8010d80:	4682      	mov	sl, r0
 8010d82:	468b      	mov	fp, r1
 8010d84:	dc13      	bgt.n	8010dae <_strtod_l+0x3d6>
 8010d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	f43f ae5e 	beq.w	8010a4a <_strtod_l+0x72>
 8010d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d90:	dd78      	ble.n	8010e84 <_strtod_l+0x4ac>
 8010d92:	2b16      	cmp	r3, #22
 8010d94:	dc5f      	bgt.n	8010e56 <_strtod_l+0x47e>
 8010d96:	4974      	ldr	r1, [pc, #464]	@ (8010f68 <_strtod_l+0x590>)
 8010d98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010da0:	4652      	mov	r2, sl
 8010da2:	465b      	mov	r3, fp
 8010da4:	f7ef fc38 	bl	8000618 <__aeabi_dmul>
 8010da8:	4682      	mov	sl, r0
 8010daa:	468b      	mov	fp, r1
 8010dac:	e64d      	b.n	8010a4a <_strtod_l+0x72>
 8010dae:	4b6e      	ldr	r3, [pc, #440]	@ (8010f68 <_strtod_l+0x590>)
 8010db0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010db4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010db8:	f7ef fc2e 	bl	8000618 <__aeabi_dmul>
 8010dbc:	4682      	mov	sl, r0
 8010dbe:	9808      	ldr	r0, [sp, #32]
 8010dc0:	468b      	mov	fp, r1
 8010dc2:	f7ef fbaf 	bl	8000524 <__aeabi_ui2d>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	4650      	mov	r0, sl
 8010dcc:	4659      	mov	r1, fp
 8010dce:	f7ef fa6d 	bl	80002ac <__adddf3>
 8010dd2:	2d0f      	cmp	r5, #15
 8010dd4:	4682      	mov	sl, r0
 8010dd6:	468b      	mov	fp, r1
 8010dd8:	ddd5      	ble.n	8010d86 <_strtod_l+0x3ae>
 8010dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ddc:	1b2c      	subs	r4, r5, r4
 8010dde:	441c      	add	r4, r3
 8010de0:	2c00      	cmp	r4, #0
 8010de2:	f340 8096 	ble.w	8010f12 <_strtod_l+0x53a>
 8010de6:	f014 030f 	ands.w	r3, r4, #15
 8010dea:	d00a      	beq.n	8010e02 <_strtod_l+0x42a>
 8010dec:	495e      	ldr	r1, [pc, #376]	@ (8010f68 <_strtod_l+0x590>)
 8010dee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010df2:	4652      	mov	r2, sl
 8010df4:	465b      	mov	r3, fp
 8010df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dfa:	f7ef fc0d 	bl	8000618 <__aeabi_dmul>
 8010dfe:	4682      	mov	sl, r0
 8010e00:	468b      	mov	fp, r1
 8010e02:	f034 040f 	bics.w	r4, r4, #15
 8010e06:	d073      	beq.n	8010ef0 <_strtod_l+0x518>
 8010e08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010e0c:	dd48      	ble.n	8010ea0 <_strtod_l+0x4c8>
 8010e0e:	2400      	movs	r4, #0
 8010e10:	46a0      	mov	r8, r4
 8010e12:	940a      	str	r4, [sp, #40]	@ 0x28
 8010e14:	46a1      	mov	r9, r4
 8010e16:	9a05      	ldr	r2, [sp, #20]
 8010e18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010f70 <_strtod_l+0x598>
 8010e1c:	2322      	movs	r3, #34	@ 0x22
 8010e1e:	6013      	str	r3, [r2, #0]
 8010e20:	f04f 0a00 	mov.w	sl, #0
 8010e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	f43f ae0f 	beq.w	8010a4a <_strtod_l+0x72>
 8010e2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010e2e:	9805      	ldr	r0, [sp, #20]
 8010e30:	f001 ff8a 	bl	8012d48 <_Bfree>
 8010e34:	9805      	ldr	r0, [sp, #20]
 8010e36:	4649      	mov	r1, r9
 8010e38:	f001 ff86 	bl	8012d48 <_Bfree>
 8010e3c:	9805      	ldr	r0, [sp, #20]
 8010e3e:	4641      	mov	r1, r8
 8010e40:	f001 ff82 	bl	8012d48 <_Bfree>
 8010e44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010e46:	9805      	ldr	r0, [sp, #20]
 8010e48:	f001 ff7e 	bl	8012d48 <_Bfree>
 8010e4c:	9805      	ldr	r0, [sp, #20]
 8010e4e:	4621      	mov	r1, r4
 8010e50:	f001 ff7a 	bl	8012d48 <_Bfree>
 8010e54:	e5f9      	b.n	8010a4a <_strtod_l+0x72>
 8010e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	dbbc      	blt.n	8010dda <_strtod_l+0x402>
 8010e60:	4c41      	ldr	r4, [pc, #260]	@ (8010f68 <_strtod_l+0x590>)
 8010e62:	f1c5 050f 	rsb	r5, r5, #15
 8010e66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010e6a:	4652      	mov	r2, sl
 8010e6c:	465b      	mov	r3, fp
 8010e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e72:	f7ef fbd1 	bl	8000618 <__aeabi_dmul>
 8010e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e78:	1b5d      	subs	r5, r3, r5
 8010e7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010e7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010e82:	e78f      	b.n	8010da4 <_strtod_l+0x3cc>
 8010e84:	3316      	adds	r3, #22
 8010e86:	dba8      	blt.n	8010dda <_strtod_l+0x402>
 8010e88:	4b37      	ldr	r3, [pc, #220]	@ (8010f68 <_strtod_l+0x590>)
 8010e8a:	eba9 0808 	sub.w	r8, r9, r8
 8010e8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010e92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010e96:	4650      	mov	r0, sl
 8010e98:	4659      	mov	r1, fp
 8010e9a:	f7ef fce7 	bl	800086c <__aeabi_ddiv>
 8010e9e:	e783      	b.n	8010da8 <_strtod_l+0x3d0>
 8010ea0:	4b32      	ldr	r3, [pc, #200]	@ (8010f6c <_strtod_l+0x594>)
 8010ea2:	9308      	str	r3, [sp, #32]
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	1124      	asrs	r4, r4, #4
 8010ea8:	4650      	mov	r0, sl
 8010eaa:	4659      	mov	r1, fp
 8010eac:	461e      	mov	r6, r3
 8010eae:	2c01      	cmp	r4, #1
 8010eb0:	dc21      	bgt.n	8010ef6 <_strtod_l+0x51e>
 8010eb2:	b10b      	cbz	r3, 8010eb8 <_strtod_l+0x4e0>
 8010eb4:	4682      	mov	sl, r0
 8010eb6:	468b      	mov	fp, r1
 8010eb8:	492c      	ldr	r1, [pc, #176]	@ (8010f6c <_strtod_l+0x594>)
 8010eba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010ebe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010ec2:	4652      	mov	r2, sl
 8010ec4:	465b      	mov	r3, fp
 8010ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eca:	f7ef fba5 	bl	8000618 <__aeabi_dmul>
 8010ece:	4b28      	ldr	r3, [pc, #160]	@ (8010f70 <_strtod_l+0x598>)
 8010ed0:	460a      	mov	r2, r1
 8010ed2:	400b      	ands	r3, r1
 8010ed4:	4927      	ldr	r1, [pc, #156]	@ (8010f74 <_strtod_l+0x59c>)
 8010ed6:	428b      	cmp	r3, r1
 8010ed8:	4682      	mov	sl, r0
 8010eda:	d898      	bhi.n	8010e0e <_strtod_l+0x436>
 8010edc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010ee0:	428b      	cmp	r3, r1
 8010ee2:	bf86      	itte	hi
 8010ee4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010f78 <_strtod_l+0x5a0>
 8010ee8:	f04f 3aff 	movhi.w	sl, #4294967295
 8010eec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	9308      	str	r3, [sp, #32]
 8010ef4:	e07a      	b.n	8010fec <_strtod_l+0x614>
 8010ef6:	07e2      	lsls	r2, r4, #31
 8010ef8:	d505      	bpl.n	8010f06 <_strtod_l+0x52e>
 8010efa:	9b08      	ldr	r3, [sp, #32]
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	f7ef fb8a 	bl	8000618 <__aeabi_dmul>
 8010f04:	2301      	movs	r3, #1
 8010f06:	9a08      	ldr	r2, [sp, #32]
 8010f08:	3208      	adds	r2, #8
 8010f0a:	3601      	adds	r6, #1
 8010f0c:	1064      	asrs	r4, r4, #1
 8010f0e:	9208      	str	r2, [sp, #32]
 8010f10:	e7cd      	b.n	8010eae <_strtod_l+0x4d6>
 8010f12:	d0ed      	beq.n	8010ef0 <_strtod_l+0x518>
 8010f14:	4264      	negs	r4, r4
 8010f16:	f014 020f 	ands.w	r2, r4, #15
 8010f1a:	d00a      	beq.n	8010f32 <_strtod_l+0x55a>
 8010f1c:	4b12      	ldr	r3, [pc, #72]	@ (8010f68 <_strtod_l+0x590>)
 8010f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f22:	4650      	mov	r0, sl
 8010f24:	4659      	mov	r1, fp
 8010f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2a:	f7ef fc9f 	bl	800086c <__aeabi_ddiv>
 8010f2e:	4682      	mov	sl, r0
 8010f30:	468b      	mov	fp, r1
 8010f32:	1124      	asrs	r4, r4, #4
 8010f34:	d0dc      	beq.n	8010ef0 <_strtod_l+0x518>
 8010f36:	2c1f      	cmp	r4, #31
 8010f38:	dd20      	ble.n	8010f7c <_strtod_l+0x5a4>
 8010f3a:	2400      	movs	r4, #0
 8010f3c:	46a0      	mov	r8, r4
 8010f3e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010f40:	46a1      	mov	r9, r4
 8010f42:	9a05      	ldr	r2, [sp, #20]
 8010f44:	2322      	movs	r3, #34	@ 0x22
 8010f46:	f04f 0a00 	mov.w	sl, #0
 8010f4a:	f04f 0b00 	mov.w	fp, #0
 8010f4e:	6013      	str	r3, [r2, #0]
 8010f50:	e768      	b.n	8010e24 <_strtod_l+0x44c>
 8010f52:	bf00      	nop
 8010f54:	08013e90 	.word	0x08013e90
 8010f58:	08013e94 	.word	0x08013e94
 8010f5c:	08013e87 	.word	0x08013e87
 8010f60:	08013e8a 	.word	0x08013e8a
 8010f64:	0801425b 	.word	0x0801425b
 8010f68:	08014158 	.word	0x08014158
 8010f6c:	08014130 	.word	0x08014130
 8010f70:	7ff00000 	.word	0x7ff00000
 8010f74:	7ca00000 	.word	0x7ca00000
 8010f78:	7fefffff 	.word	0x7fefffff
 8010f7c:	f014 0310 	ands.w	r3, r4, #16
 8010f80:	bf18      	it	ne
 8010f82:	236a      	movne	r3, #106	@ 0x6a
 8010f84:	4ea9      	ldr	r6, [pc, #676]	@ (801122c <_strtod_l+0x854>)
 8010f86:	9308      	str	r3, [sp, #32]
 8010f88:	4650      	mov	r0, sl
 8010f8a:	4659      	mov	r1, fp
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	07e2      	lsls	r2, r4, #31
 8010f90:	d504      	bpl.n	8010f9c <_strtod_l+0x5c4>
 8010f92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f96:	f7ef fb3f 	bl	8000618 <__aeabi_dmul>
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	1064      	asrs	r4, r4, #1
 8010f9e:	f106 0608 	add.w	r6, r6, #8
 8010fa2:	d1f4      	bne.n	8010f8e <_strtod_l+0x5b6>
 8010fa4:	b10b      	cbz	r3, 8010faa <_strtod_l+0x5d2>
 8010fa6:	4682      	mov	sl, r0
 8010fa8:	468b      	mov	fp, r1
 8010faa:	9b08      	ldr	r3, [sp, #32]
 8010fac:	b1b3      	cbz	r3, 8010fdc <_strtod_l+0x604>
 8010fae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010fb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	4659      	mov	r1, fp
 8010fba:	dd0f      	ble.n	8010fdc <_strtod_l+0x604>
 8010fbc:	2b1f      	cmp	r3, #31
 8010fbe:	dd55      	ble.n	801106c <_strtod_l+0x694>
 8010fc0:	2b34      	cmp	r3, #52	@ 0x34
 8010fc2:	bfde      	ittt	le
 8010fc4:	f04f 33ff 	movle.w	r3, #4294967295
 8010fc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010fcc:	4093      	lslle	r3, r2
 8010fce:	f04f 0a00 	mov.w	sl, #0
 8010fd2:	bfcc      	ite	gt
 8010fd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010fd8:	ea03 0b01 	andle.w	fp, r3, r1
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2300      	movs	r3, #0
 8010fe0:	4650      	mov	r0, sl
 8010fe2:	4659      	mov	r1, fp
 8010fe4:	f7ef fd80 	bl	8000ae8 <__aeabi_dcmpeq>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d1a6      	bne.n	8010f3a <_strtod_l+0x562>
 8010fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010ff2:	9805      	ldr	r0, [sp, #20]
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	463a      	mov	r2, r7
 8010ff8:	f001 ff0e 	bl	8012e18 <__s2b>
 8010ffc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010ffe:	2800      	cmp	r0, #0
 8011000:	f43f af05 	beq.w	8010e0e <_strtod_l+0x436>
 8011004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011006:	2a00      	cmp	r2, #0
 8011008:	eba9 0308 	sub.w	r3, r9, r8
 801100c:	bfa8      	it	ge
 801100e:	2300      	movge	r3, #0
 8011010:	9312      	str	r3, [sp, #72]	@ 0x48
 8011012:	2400      	movs	r4, #0
 8011014:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011018:	9316      	str	r3, [sp, #88]	@ 0x58
 801101a:	46a0      	mov	r8, r4
 801101c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801101e:	9805      	ldr	r0, [sp, #20]
 8011020:	6859      	ldr	r1, [r3, #4]
 8011022:	f001 fe51 	bl	8012cc8 <_Balloc>
 8011026:	4681      	mov	r9, r0
 8011028:	2800      	cmp	r0, #0
 801102a:	f43f aef4 	beq.w	8010e16 <_strtod_l+0x43e>
 801102e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011030:	691a      	ldr	r2, [r3, #16]
 8011032:	3202      	adds	r2, #2
 8011034:	f103 010c 	add.w	r1, r3, #12
 8011038:	0092      	lsls	r2, r2, #2
 801103a:	300c      	adds	r0, #12
 801103c:	f7ff fc4f 	bl	80108de <memcpy>
 8011040:	ec4b ab10 	vmov	d0, sl, fp
 8011044:	9805      	ldr	r0, [sp, #20]
 8011046:	aa1c      	add	r2, sp, #112	@ 0x70
 8011048:	a91b      	add	r1, sp, #108	@ 0x6c
 801104a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801104e:	f002 fa1f 	bl	8013490 <__d2b>
 8011052:	901a      	str	r0, [sp, #104]	@ 0x68
 8011054:	2800      	cmp	r0, #0
 8011056:	f43f aede 	beq.w	8010e16 <_strtod_l+0x43e>
 801105a:	9805      	ldr	r0, [sp, #20]
 801105c:	2101      	movs	r1, #1
 801105e:	f001 ff71 	bl	8012f44 <__i2b>
 8011062:	4680      	mov	r8, r0
 8011064:	b948      	cbnz	r0, 801107a <_strtod_l+0x6a2>
 8011066:	f04f 0800 	mov.w	r8, #0
 801106a:	e6d4      	b.n	8010e16 <_strtod_l+0x43e>
 801106c:	f04f 32ff 	mov.w	r2, #4294967295
 8011070:	fa02 f303 	lsl.w	r3, r2, r3
 8011074:	ea03 0a0a 	and.w	sl, r3, sl
 8011078:	e7b0      	b.n	8010fdc <_strtod_l+0x604>
 801107a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801107c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801107e:	2d00      	cmp	r5, #0
 8011080:	bfab      	itete	ge
 8011082:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011084:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011086:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011088:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801108a:	bfac      	ite	ge
 801108c:	18ef      	addge	r7, r5, r3
 801108e:	1b5e      	sublt	r6, r3, r5
 8011090:	9b08      	ldr	r3, [sp, #32]
 8011092:	1aed      	subs	r5, r5, r3
 8011094:	4415      	add	r5, r2
 8011096:	4b66      	ldr	r3, [pc, #408]	@ (8011230 <_strtod_l+0x858>)
 8011098:	3d01      	subs	r5, #1
 801109a:	429d      	cmp	r5, r3
 801109c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80110a0:	da50      	bge.n	8011144 <_strtod_l+0x76c>
 80110a2:	1b5b      	subs	r3, r3, r5
 80110a4:	2b1f      	cmp	r3, #31
 80110a6:	eba2 0203 	sub.w	r2, r2, r3
 80110aa:	f04f 0101 	mov.w	r1, #1
 80110ae:	dc3d      	bgt.n	801112c <_strtod_l+0x754>
 80110b0:	fa01 f303 	lsl.w	r3, r1, r3
 80110b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80110b6:	2300      	movs	r3, #0
 80110b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80110ba:	18bd      	adds	r5, r7, r2
 80110bc:	9b08      	ldr	r3, [sp, #32]
 80110be:	42af      	cmp	r7, r5
 80110c0:	4416      	add	r6, r2
 80110c2:	441e      	add	r6, r3
 80110c4:	463b      	mov	r3, r7
 80110c6:	bfa8      	it	ge
 80110c8:	462b      	movge	r3, r5
 80110ca:	42b3      	cmp	r3, r6
 80110cc:	bfa8      	it	ge
 80110ce:	4633      	movge	r3, r6
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	bfc2      	ittt	gt
 80110d4:	1aed      	subgt	r5, r5, r3
 80110d6:	1af6      	subgt	r6, r6, r3
 80110d8:	1aff      	subgt	r7, r7, r3
 80110da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80110dc:	2b00      	cmp	r3, #0
 80110de:	dd16      	ble.n	801110e <_strtod_l+0x736>
 80110e0:	4641      	mov	r1, r8
 80110e2:	9805      	ldr	r0, [sp, #20]
 80110e4:	461a      	mov	r2, r3
 80110e6:	f001 ffed 	bl	80130c4 <__pow5mult>
 80110ea:	4680      	mov	r8, r0
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d0ba      	beq.n	8011066 <_strtod_l+0x68e>
 80110f0:	4601      	mov	r1, r0
 80110f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80110f4:	9805      	ldr	r0, [sp, #20]
 80110f6:	f001 ff3b 	bl	8012f70 <__multiply>
 80110fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f43f ae8a 	beq.w	8010e16 <_strtod_l+0x43e>
 8011102:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011104:	9805      	ldr	r0, [sp, #20]
 8011106:	f001 fe1f 	bl	8012d48 <_Bfree>
 801110a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801110c:	931a      	str	r3, [sp, #104]	@ 0x68
 801110e:	2d00      	cmp	r5, #0
 8011110:	dc1d      	bgt.n	801114e <_strtod_l+0x776>
 8011112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011114:	2b00      	cmp	r3, #0
 8011116:	dd23      	ble.n	8011160 <_strtod_l+0x788>
 8011118:	4649      	mov	r1, r9
 801111a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801111c:	9805      	ldr	r0, [sp, #20]
 801111e:	f001 ffd1 	bl	80130c4 <__pow5mult>
 8011122:	4681      	mov	r9, r0
 8011124:	b9e0      	cbnz	r0, 8011160 <_strtod_l+0x788>
 8011126:	f04f 0900 	mov.w	r9, #0
 801112a:	e674      	b.n	8010e16 <_strtod_l+0x43e>
 801112c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011130:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011134:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011138:	35e2      	adds	r5, #226	@ 0xe2
 801113a:	fa01 f305 	lsl.w	r3, r1, r5
 801113e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011140:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011142:	e7ba      	b.n	80110ba <_strtod_l+0x6e2>
 8011144:	2300      	movs	r3, #0
 8011146:	9310      	str	r3, [sp, #64]	@ 0x40
 8011148:	2301      	movs	r3, #1
 801114a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801114c:	e7b5      	b.n	80110ba <_strtod_l+0x6e2>
 801114e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011150:	9805      	ldr	r0, [sp, #20]
 8011152:	462a      	mov	r2, r5
 8011154:	f002 f810 	bl	8013178 <__lshift>
 8011158:	901a      	str	r0, [sp, #104]	@ 0x68
 801115a:	2800      	cmp	r0, #0
 801115c:	d1d9      	bne.n	8011112 <_strtod_l+0x73a>
 801115e:	e65a      	b.n	8010e16 <_strtod_l+0x43e>
 8011160:	2e00      	cmp	r6, #0
 8011162:	dd07      	ble.n	8011174 <_strtod_l+0x79c>
 8011164:	4649      	mov	r1, r9
 8011166:	9805      	ldr	r0, [sp, #20]
 8011168:	4632      	mov	r2, r6
 801116a:	f002 f805 	bl	8013178 <__lshift>
 801116e:	4681      	mov	r9, r0
 8011170:	2800      	cmp	r0, #0
 8011172:	d0d8      	beq.n	8011126 <_strtod_l+0x74e>
 8011174:	2f00      	cmp	r7, #0
 8011176:	dd08      	ble.n	801118a <_strtod_l+0x7b2>
 8011178:	4641      	mov	r1, r8
 801117a:	9805      	ldr	r0, [sp, #20]
 801117c:	463a      	mov	r2, r7
 801117e:	f001 fffb 	bl	8013178 <__lshift>
 8011182:	4680      	mov	r8, r0
 8011184:	2800      	cmp	r0, #0
 8011186:	f43f ae46 	beq.w	8010e16 <_strtod_l+0x43e>
 801118a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801118c:	9805      	ldr	r0, [sp, #20]
 801118e:	464a      	mov	r2, r9
 8011190:	f002 f87a 	bl	8013288 <__mdiff>
 8011194:	4604      	mov	r4, r0
 8011196:	2800      	cmp	r0, #0
 8011198:	f43f ae3d 	beq.w	8010e16 <_strtod_l+0x43e>
 801119c:	68c3      	ldr	r3, [r0, #12]
 801119e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80111a0:	2300      	movs	r3, #0
 80111a2:	60c3      	str	r3, [r0, #12]
 80111a4:	4641      	mov	r1, r8
 80111a6:	f002 f853 	bl	8013250 <__mcmp>
 80111aa:	2800      	cmp	r0, #0
 80111ac:	da46      	bge.n	801123c <_strtod_l+0x864>
 80111ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111b0:	ea53 030a 	orrs.w	r3, r3, sl
 80111b4:	d16c      	bne.n	8011290 <_strtod_l+0x8b8>
 80111b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d168      	bne.n	8011290 <_strtod_l+0x8b8>
 80111be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80111c2:	0d1b      	lsrs	r3, r3, #20
 80111c4:	051b      	lsls	r3, r3, #20
 80111c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80111ca:	d961      	bls.n	8011290 <_strtod_l+0x8b8>
 80111cc:	6963      	ldr	r3, [r4, #20]
 80111ce:	b913      	cbnz	r3, 80111d6 <_strtod_l+0x7fe>
 80111d0:	6923      	ldr	r3, [r4, #16]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	dd5c      	ble.n	8011290 <_strtod_l+0x8b8>
 80111d6:	4621      	mov	r1, r4
 80111d8:	2201      	movs	r2, #1
 80111da:	9805      	ldr	r0, [sp, #20]
 80111dc:	f001 ffcc 	bl	8013178 <__lshift>
 80111e0:	4641      	mov	r1, r8
 80111e2:	4604      	mov	r4, r0
 80111e4:	f002 f834 	bl	8013250 <__mcmp>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	dd51      	ble.n	8011290 <_strtod_l+0x8b8>
 80111ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80111f0:	9a08      	ldr	r2, [sp, #32]
 80111f2:	0d1b      	lsrs	r3, r3, #20
 80111f4:	051b      	lsls	r3, r3, #20
 80111f6:	2a00      	cmp	r2, #0
 80111f8:	d06b      	beq.n	80112d2 <_strtod_l+0x8fa>
 80111fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80111fe:	d868      	bhi.n	80112d2 <_strtod_l+0x8fa>
 8011200:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011204:	f67f ae9d 	bls.w	8010f42 <_strtod_l+0x56a>
 8011208:	4b0a      	ldr	r3, [pc, #40]	@ (8011234 <_strtod_l+0x85c>)
 801120a:	4650      	mov	r0, sl
 801120c:	4659      	mov	r1, fp
 801120e:	2200      	movs	r2, #0
 8011210:	f7ef fa02 	bl	8000618 <__aeabi_dmul>
 8011214:	4b08      	ldr	r3, [pc, #32]	@ (8011238 <_strtod_l+0x860>)
 8011216:	400b      	ands	r3, r1
 8011218:	4682      	mov	sl, r0
 801121a:	468b      	mov	fp, r1
 801121c:	2b00      	cmp	r3, #0
 801121e:	f47f ae05 	bne.w	8010e2c <_strtod_l+0x454>
 8011222:	9a05      	ldr	r2, [sp, #20]
 8011224:	2322      	movs	r3, #34	@ 0x22
 8011226:	6013      	str	r3, [r2, #0]
 8011228:	e600      	b.n	8010e2c <_strtod_l+0x454>
 801122a:	bf00      	nop
 801122c:	08013ec0 	.word	0x08013ec0
 8011230:	fffffc02 	.word	0xfffffc02
 8011234:	39500000 	.word	0x39500000
 8011238:	7ff00000 	.word	0x7ff00000
 801123c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011240:	d165      	bne.n	801130e <_strtod_l+0x936>
 8011242:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011244:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011248:	b35a      	cbz	r2, 80112a2 <_strtod_l+0x8ca>
 801124a:	4a9f      	ldr	r2, [pc, #636]	@ (80114c8 <_strtod_l+0xaf0>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d12b      	bne.n	80112a8 <_strtod_l+0x8d0>
 8011250:	9b08      	ldr	r3, [sp, #32]
 8011252:	4651      	mov	r1, sl
 8011254:	b303      	cbz	r3, 8011298 <_strtod_l+0x8c0>
 8011256:	4b9d      	ldr	r3, [pc, #628]	@ (80114cc <_strtod_l+0xaf4>)
 8011258:	465a      	mov	r2, fp
 801125a:	4013      	ands	r3, r2
 801125c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011260:	f04f 32ff 	mov.w	r2, #4294967295
 8011264:	d81b      	bhi.n	801129e <_strtod_l+0x8c6>
 8011266:	0d1b      	lsrs	r3, r3, #20
 8011268:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801126c:	fa02 f303 	lsl.w	r3, r2, r3
 8011270:	4299      	cmp	r1, r3
 8011272:	d119      	bne.n	80112a8 <_strtod_l+0x8d0>
 8011274:	4b96      	ldr	r3, [pc, #600]	@ (80114d0 <_strtod_l+0xaf8>)
 8011276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011278:	429a      	cmp	r2, r3
 801127a:	d102      	bne.n	8011282 <_strtod_l+0x8aa>
 801127c:	3101      	adds	r1, #1
 801127e:	f43f adca 	beq.w	8010e16 <_strtod_l+0x43e>
 8011282:	4b92      	ldr	r3, [pc, #584]	@ (80114cc <_strtod_l+0xaf4>)
 8011284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011286:	401a      	ands	r2, r3
 8011288:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801128c:	f04f 0a00 	mov.w	sl, #0
 8011290:	9b08      	ldr	r3, [sp, #32]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d1b8      	bne.n	8011208 <_strtod_l+0x830>
 8011296:	e5c9      	b.n	8010e2c <_strtod_l+0x454>
 8011298:	f04f 33ff 	mov.w	r3, #4294967295
 801129c:	e7e8      	b.n	8011270 <_strtod_l+0x898>
 801129e:	4613      	mov	r3, r2
 80112a0:	e7e6      	b.n	8011270 <_strtod_l+0x898>
 80112a2:	ea53 030a 	orrs.w	r3, r3, sl
 80112a6:	d0a1      	beq.n	80111ec <_strtod_l+0x814>
 80112a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80112aa:	b1db      	cbz	r3, 80112e4 <_strtod_l+0x90c>
 80112ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112ae:	4213      	tst	r3, r2
 80112b0:	d0ee      	beq.n	8011290 <_strtod_l+0x8b8>
 80112b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112b4:	9a08      	ldr	r2, [sp, #32]
 80112b6:	4650      	mov	r0, sl
 80112b8:	4659      	mov	r1, fp
 80112ba:	b1bb      	cbz	r3, 80112ec <_strtod_l+0x914>
 80112bc:	f7ff fb6e 	bl	801099c <sulp>
 80112c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80112c4:	ec53 2b10 	vmov	r2, r3, d0
 80112c8:	f7ee fff0 	bl	80002ac <__adddf3>
 80112cc:	4682      	mov	sl, r0
 80112ce:	468b      	mov	fp, r1
 80112d0:	e7de      	b.n	8011290 <_strtod_l+0x8b8>
 80112d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80112d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80112da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80112de:	f04f 3aff 	mov.w	sl, #4294967295
 80112e2:	e7d5      	b.n	8011290 <_strtod_l+0x8b8>
 80112e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80112e6:	ea13 0f0a 	tst.w	r3, sl
 80112ea:	e7e1      	b.n	80112b0 <_strtod_l+0x8d8>
 80112ec:	f7ff fb56 	bl	801099c <sulp>
 80112f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80112f4:	ec53 2b10 	vmov	r2, r3, d0
 80112f8:	f7ee ffd6 	bl	80002a8 <__aeabi_dsub>
 80112fc:	2200      	movs	r2, #0
 80112fe:	2300      	movs	r3, #0
 8011300:	4682      	mov	sl, r0
 8011302:	468b      	mov	fp, r1
 8011304:	f7ef fbf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011308:	2800      	cmp	r0, #0
 801130a:	d0c1      	beq.n	8011290 <_strtod_l+0x8b8>
 801130c:	e619      	b.n	8010f42 <_strtod_l+0x56a>
 801130e:	4641      	mov	r1, r8
 8011310:	4620      	mov	r0, r4
 8011312:	f002 f915 	bl	8013540 <__ratio>
 8011316:	ec57 6b10 	vmov	r6, r7, d0
 801131a:	2200      	movs	r2, #0
 801131c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011320:	4630      	mov	r0, r6
 8011322:	4639      	mov	r1, r7
 8011324:	f7ef fbf4 	bl	8000b10 <__aeabi_dcmple>
 8011328:	2800      	cmp	r0, #0
 801132a:	d06f      	beq.n	801140c <_strtod_l+0xa34>
 801132c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801132e:	2b00      	cmp	r3, #0
 8011330:	d17a      	bne.n	8011428 <_strtod_l+0xa50>
 8011332:	f1ba 0f00 	cmp.w	sl, #0
 8011336:	d158      	bne.n	80113ea <_strtod_l+0xa12>
 8011338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801133a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801133e:	2b00      	cmp	r3, #0
 8011340:	d15a      	bne.n	80113f8 <_strtod_l+0xa20>
 8011342:	4b64      	ldr	r3, [pc, #400]	@ (80114d4 <_strtod_l+0xafc>)
 8011344:	2200      	movs	r2, #0
 8011346:	4630      	mov	r0, r6
 8011348:	4639      	mov	r1, r7
 801134a:	f7ef fbd7 	bl	8000afc <__aeabi_dcmplt>
 801134e:	2800      	cmp	r0, #0
 8011350:	d159      	bne.n	8011406 <_strtod_l+0xa2e>
 8011352:	4630      	mov	r0, r6
 8011354:	4639      	mov	r1, r7
 8011356:	4b60      	ldr	r3, [pc, #384]	@ (80114d8 <_strtod_l+0xb00>)
 8011358:	2200      	movs	r2, #0
 801135a:	f7ef f95d 	bl	8000618 <__aeabi_dmul>
 801135e:	4606      	mov	r6, r0
 8011360:	460f      	mov	r7, r1
 8011362:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011366:	9606      	str	r6, [sp, #24]
 8011368:	9307      	str	r3, [sp, #28]
 801136a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801136e:	4d57      	ldr	r5, [pc, #348]	@ (80114cc <_strtod_l+0xaf4>)
 8011370:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011376:	401d      	ands	r5, r3
 8011378:	4b58      	ldr	r3, [pc, #352]	@ (80114dc <_strtod_l+0xb04>)
 801137a:	429d      	cmp	r5, r3
 801137c:	f040 80b2 	bne.w	80114e4 <_strtod_l+0xb0c>
 8011380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011382:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011386:	ec4b ab10 	vmov	d0, sl, fp
 801138a:	f002 f811 	bl	80133b0 <__ulp>
 801138e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011392:	ec51 0b10 	vmov	r0, r1, d0
 8011396:	f7ef f93f 	bl	8000618 <__aeabi_dmul>
 801139a:	4652      	mov	r2, sl
 801139c:	465b      	mov	r3, fp
 801139e:	f7ee ff85 	bl	80002ac <__adddf3>
 80113a2:	460b      	mov	r3, r1
 80113a4:	4949      	ldr	r1, [pc, #292]	@ (80114cc <_strtod_l+0xaf4>)
 80113a6:	4a4e      	ldr	r2, [pc, #312]	@ (80114e0 <_strtod_l+0xb08>)
 80113a8:	4019      	ands	r1, r3
 80113aa:	4291      	cmp	r1, r2
 80113ac:	4682      	mov	sl, r0
 80113ae:	d942      	bls.n	8011436 <_strtod_l+0xa5e>
 80113b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80113b2:	4b47      	ldr	r3, [pc, #284]	@ (80114d0 <_strtod_l+0xaf8>)
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d103      	bne.n	80113c0 <_strtod_l+0x9e8>
 80113b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113ba:	3301      	adds	r3, #1
 80113bc:	f43f ad2b 	beq.w	8010e16 <_strtod_l+0x43e>
 80113c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80114d0 <_strtod_l+0xaf8>
 80113c4:	f04f 3aff 	mov.w	sl, #4294967295
 80113c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80113ca:	9805      	ldr	r0, [sp, #20]
 80113cc:	f001 fcbc 	bl	8012d48 <_Bfree>
 80113d0:	9805      	ldr	r0, [sp, #20]
 80113d2:	4649      	mov	r1, r9
 80113d4:	f001 fcb8 	bl	8012d48 <_Bfree>
 80113d8:	9805      	ldr	r0, [sp, #20]
 80113da:	4641      	mov	r1, r8
 80113dc:	f001 fcb4 	bl	8012d48 <_Bfree>
 80113e0:	9805      	ldr	r0, [sp, #20]
 80113e2:	4621      	mov	r1, r4
 80113e4:	f001 fcb0 	bl	8012d48 <_Bfree>
 80113e8:	e618      	b.n	801101c <_strtod_l+0x644>
 80113ea:	f1ba 0f01 	cmp.w	sl, #1
 80113ee:	d103      	bne.n	80113f8 <_strtod_l+0xa20>
 80113f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f43f ada5 	beq.w	8010f42 <_strtod_l+0x56a>
 80113f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80114a8 <_strtod_l+0xad0>
 80113fc:	4f35      	ldr	r7, [pc, #212]	@ (80114d4 <_strtod_l+0xafc>)
 80113fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011402:	2600      	movs	r6, #0
 8011404:	e7b1      	b.n	801136a <_strtod_l+0x992>
 8011406:	4f34      	ldr	r7, [pc, #208]	@ (80114d8 <_strtod_l+0xb00>)
 8011408:	2600      	movs	r6, #0
 801140a:	e7aa      	b.n	8011362 <_strtod_l+0x98a>
 801140c:	4b32      	ldr	r3, [pc, #200]	@ (80114d8 <_strtod_l+0xb00>)
 801140e:	4630      	mov	r0, r6
 8011410:	4639      	mov	r1, r7
 8011412:	2200      	movs	r2, #0
 8011414:	f7ef f900 	bl	8000618 <__aeabi_dmul>
 8011418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801141a:	4606      	mov	r6, r0
 801141c:	460f      	mov	r7, r1
 801141e:	2b00      	cmp	r3, #0
 8011420:	d09f      	beq.n	8011362 <_strtod_l+0x98a>
 8011422:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011426:	e7a0      	b.n	801136a <_strtod_l+0x992>
 8011428:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80114b0 <_strtod_l+0xad8>
 801142c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011430:	ec57 6b17 	vmov	r6, r7, d7
 8011434:	e799      	b.n	801136a <_strtod_l+0x992>
 8011436:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801143a:	9b08      	ldr	r3, [sp, #32]
 801143c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011440:	2b00      	cmp	r3, #0
 8011442:	d1c1      	bne.n	80113c8 <_strtod_l+0x9f0>
 8011444:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011448:	0d1b      	lsrs	r3, r3, #20
 801144a:	051b      	lsls	r3, r3, #20
 801144c:	429d      	cmp	r5, r3
 801144e:	d1bb      	bne.n	80113c8 <_strtod_l+0x9f0>
 8011450:	4630      	mov	r0, r6
 8011452:	4639      	mov	r1, r7
 8011454:	f7ef fc40 	bl	8000cd8 <__aeabi_d2lz>
 8011458:	f7ef f8b0 	bl	80005bc <__aeabi_l2d>
 801145c:	4602      	mov	r2, r0
 801145e:	460b      	mov	r3, r1
 8011460:	4630      	mov	r0, r6
 8011462:	4639      	mov	r1, r7
 8011464:	f7ee ff20 	bl	80002a8 <__aeabi_dsub>
 8011468:	460b      	mov	r3, r1
 801146a:	4602      	mov	r2, r0
 801146c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011470:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011476:	ea46 060a 	orr.w	r6, r6, sl
 801147a:	431e      	orrs	r6, r3
 801147c:	d06f      	beq.n	801155e <_strtod_l+0xb86>
 801147e:	a30e      	add	r3, pc, #56	@ (adr r3, 80114b8 <_strtod_l+0xae0>)
 8011480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011484:	f7ef fb3a 	bl	8000afc <__aeabi_dcmplt>
 8011488:	2800      	cmp	r0, #0
 801148a:	f47f accf 	bne.w	8010e2c <_strtod_l+0x454>
 801148e:	a30c      	add	r3, pc, #48	@ (adr r3, 80114c0 <_strtod_l+0xae8>)
 8011490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011498:	f7ef fb4e 	bl	8000b38 <__aeabi_dcmpgt>
 801149c:	2800      	cmp	r0, #0
 801149e:	d093      	beq.n	80113c8 <_strtod_l+0x9f0>
 80114a0:	e4c4      	b.n	8010e2c <_strtod_l+0x454>
 80114a2:	bf00      	nop
 80114a4:	f3af 8000 	nop.w
 80114a8:	00000000 	.word	0x00000000
 80114ac:	bff00000 	.word	0xbff00000
 80114b0:	00000000 	.word	0x00000000
 80114b4:	3ff00000 	.word	0x3ff00000
 80114b8:	94a03595 	.word	0x94a03595
 80114bc:	3fdfffff 	.word	0x3fdfffff
 80114c0:	35afe535 	.word	0x35afe535
 80114c4:	3fe00000 	.word	0x3fe00000
 80114c8:	000fffff 	.word	0x000fffff
 80114cc:	7ff00000 	.word	0x7ff00000
 80114d0:	7fefffff 	.word	0x7fefffff
 80114d4:	3ff00000 	.word	0x3ff00000
 80114d8:	3fe00000 	.word	0x3fe00000
 80114dc:	7fe00000 	.word	0x7fe00000
 80114e0:	7c9fffff 	.word	0x7c9fffff
 80114e4:	9b08      	ldr	r3, [sp, #32]
 80114e6:	b323      	cbz	r3, 8011532 <_strtod_l+0xb5a>
 80114e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80114ec:	d821      	bhi.n	8011532 <_strtod_l+0xb5a>
 80114ee:	a328      	add	r3, pc, #160	@ (adr r3, 8011590 <_strtod_l+0xbb8>)
 80114f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f4:	4630      	mov	r0, r6
 80114f6:	4639      	mov	r1, r7
 80114f8:	f7ef fb0a 	bl	8000b10 <__aeabi_dcmple>
 80114fc:	b1a0      	cbz	r0, 8011528 <_strtod_l+0xb50>
 80114fe:	4639      	mov	r1, r7
 8011500:	4630      	mov	r0, r6
 8011502:	f7ef fb61 	bl	8000bc8 <__aeabi_d2uiz>
 8011506:	2801      	cmp	r0, #1
 8011508:	bf38      	it	cc
 801150a:	2001      	movcc	r0, #1
 801150c:	f7ef f80a 	bl	8000524 <__aeabi_ui2d>
 8011510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011512:	4606      	mov	r6, r0
 8011514:	460f      	mov	r7, r1
 8011516:	b9fb      	cbnz	r3, 8011558 <_strtod_l+0xb80>
 8011518:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801151c:	9014      	str	r0, [sp, #80]	@ 0x50
 801151e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011520:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011524:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011528:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801152a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801152e:	1b5b      	subs	r3, r3, r5
 8011530:	9311      	str	r3, [sp, #68]	@ 0x44
 8011532:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011536:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801153a:	f001 ff39 	bl	80133b0 <__ulp>
 801153e:	4650      	mov	r0, sl
 8011540:	ec53 2b10 	vmov	r2, r3, d0
 8011544:	4659      	mov	r1, fp
 8011546:	f7ef f867 	bl	8000618 <__aeabi_dmul>
 801154a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801154e:	f7ee fead 	bl	80002ac <__adddf3>
 8011552:	4682      	mov	sl, r0
 8011554:	468b      	mov	fp, r1
 8011556:	e770      	b.n	801143a <_strtod_l+0xa62>
 8011558:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801155c:	e7e0      	b.n	8011520 <_strtod_l+0xb48>
 801155e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011598 <_strtod_l+0xbc0>)
 8011560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011564:	f7ef faca 	bl	8000afc <__aeabi_dcmplt>
 8011568:	e798      	b.n	801149c <_strtod_l+0xac4>
 801156a:	2300      	movs	r3, #0
 801156c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801156e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011572:	6013      	str	r3, [r2, #0]
 8011574:	f7ff ba6d 	b.w	8010a52 <_strtod_l+0x7a>
 8011578:	2a65      	cmp	r2, #101	@ 0x65
 801157a:	f43f ab66 	beq.w	8010c4a <_strtod_l+0x272>
 801157e:	2a45      	cmp	r2, #69	@ 0x45
 8011580:	f43f ab63 	beq.w	8010c4a <_strtod_l+0x272>
 8011584:	2301      	movs	r3, #1
 8011586:	f7ff bb9e 	b.w	8010cc6 <_strtod_l+0x2ee>
 801158a:	bf00      	nop
 801158c:	f3af 8000 	nop.w
 8011590:	ffc00000 	.word	0xffc00000
 8011594:	41dfffff 	.word	0x41dfffff
 8011598:	94a03595 	.word	0x94a03595
 801159c:	3fcfffff 	.word	0x3fcfffff

080115a0 <_strtod_r>:
 80115a0:	4b01      	ldr	r3, [pc, #4]	@ (80115a8 <_strtod_r+0x8>)
 80115a2:	f7ff ba19 	b.w	80109d8 <_strtod_l>
 80115a6:	bf00      	nop
 80115a8:	2000006c 	.word	0x2000006c

080115ac <_strtol_l.constprop.0>:
 80115ac:	2b24      	cmp	r3, #36	@ 0x24
 80115ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115b2:	4686      	mov	lr, r0
 80115b4:	4690      	mov	r8, r2
 80115b6:	d801      	bhi.n	80115bc <_strtol_l.constprop.0+0x10>
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d106      	bne.n	80115ca <_strtol_l.constprop.0+0x1e>
 80115bc:	f7ff f962 	bl	8010884 <__errno>
 80115c0:	2316      	movs	r3, #22
 80115c2:	6003      	str	r3, [r0, #0]
 80115c4:	2000      	movs	r0, #0
 80115c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ca:	4834      	ldr	r0, [pc, #208]	@ (801169c <_strtol_l.constprop.0+0xf0>)
 80115cc:	460d      	mov	r5, r1
 80115ce:	462a      	mov	r2, r5
 80115d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115d4:	5d06      	ldrb	r6, [r0, r4]
 80115d6:	f016 0608 	ands.w	r6, r6, #8
 80115da:	d1f8      	bne.n	80115ce <_strtol_l.constprop.0+0x22>
 80115dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80115de:	d12d      	bne.n	801163c <_strtol_l.constprop.0+0x90>
 80115e0:	782c      	ldrb	r4, [r5, #0]
 80115e2:	2601      	movs	r6, #1
 80115e4:	1c95      	adds	r5, r2, #2
 80115e6:	f033 0210 	bics.w	r2, r3, #16
 80115ea:	d109      	bne.n	8011600 <_strtol_l.constprop.0+0x54>
 80115ec:	2c30      	cmp	r4, #48	@ 0x30
 80115ee:	d12a      	bne.n	8011646 <_strtol_l.constprop.0+0x9a>
 80115f0:	782a      	ldrb	r2, [r5, #0]
 80115f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80115f6:	2a58      	cmp	r2, #88	@ 0x58
 80115f8:	d125      	bne.n	8011646 <_strtol_l.constprop.0+0x9a>
 80115fa:	786c      	ldrb	r4, [r5, #1]
 80115fc:	2310      	movs	r3, #16
 80115fe:	3502      	adds	r5, #2
 8011600:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011604:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011608:	2200      	movs	r2, #0
 801160a:	fbbc f9f3 	udiv	r9, ip, r3
 801160e:	4610      	mov	r0, r2
 8011610:	fb03 ca19 	mls	sl, r3, r9, ip
 8011614:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011618:	2f09      	cmp	r7, #9
 801161a:	d81b      	bhi.n	8011654 <_strtol_l.constprop.0+0xa8>
 801161c:	463c      	mov	r4, r7
 801161e:	42a3      	cmp	r3, r4
 8011620:	dd27      	ble.n	8011672 <_strtol_l.constprop.0+0xc6>
 8011622:	1c57      	adds	r7, r2, #1
 8011624:	d007      	beq.n	8011636 <_strtol_l.constprop.0+0x8a>
 8011626:	4581      	cmp	r9, r0
 8011628:	d320      	bcc.n	801166c <_strtol_l.constprop.0+0xc0>
 801162a:	d101      	bne.n	8011630 <_strtol_l.constprop.0+0x84>
 801162c:	45a2      	cmp	sl, r4
 801162e:	db1d      	blt.n	801166c <_strtol_l.constprop.0+0xc0>
 8011630:	fb00 4003 	mla	r0, r0, r3, r4
 8011634:	2201      	movs	r2, #1
 8011636:	f815 4b01 	ldrb.w	r4, [r5], #1
 801163a:	e7eb      	b.n	8011614 <_strtol_l.constprop.0+0x68>
 801163c:	2c2b      	cmp	r4, #43	@ 0x2b
 801163e:	bf04      	itt	eq
 8011640:	782c      	ldrbeq	r4, [r5, #0]
 8011642:	1c95      	addeq	r5, r2, #2
 8011644:	e7cf      	b.n	80115e6 <_strtol_l.constprop.0+0x3a>
 8011646:	2b00      	cmp	r3, #0
 8011648:	d1da      	bne.n	8011600 <_strtol_l.constprop.0+0x54>
 801164a:	2c30      	cmp	r4, #48	@ 0x30
 801164c:	bf0c      	ite	eq
 801164e:	2308      	moveq	r3, #8
 8011650:	230a      	movne	r3, #10
 8011652:	e7d5      	b.n	8011600 <_strtol_l.constprop.0+0x54>
 8011654:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011658:	2f19      	cmp	r7, #25
 801165a:	d801      	bhi.n	8011660 <_strtol_l.constprop.0+0xb4>
 801165c:	3c37      	subs	r4, #55	@ 0x37
 801165e:	e7de      	b.n	801161e <_strtol_l.constprop.0+0x72>
 8011660:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011664:	2f19      	cmp	r7, #25
 8011666:	d804      	bhi.n	8011672 <_strtol_l.constprop.0+0xc6>
 8011668:	3c57      	subs	r4, #87	@ 0x57
 801166a:	e7d8      	b.n	801161e <_strtol_l.constprop.0+0x72>
 801166c:	f04f 32ff 	mov.w	r2, #4294967295
 8011670:	e7e1      	b.n	8011636 <_strtol_l.constprop.0+0x8a>
 8011672:	1c53      	adds	r3, r2, #1
 8011674:	d108      	bne.n	8011688 <_strtol_l.constprop.0+0xdc>
 8011676:	2322      	movs	r3, #34	@ 0x22
 8011678:	f8ce 3000 	str.w	r3, [lr]
 801167c:	4660      	mov	r0, ip
 801167e:	f1b8 0f00 	cmp.w	r8, #0
 8011682:	d0a0      	beq.n	80115c6 <_strtol_l.constprop.0+0x1a>
 8011684:	1e69      	subs	r1, r5, #1
 8011686:	e006      	b.n	8011696 <_strtol_l.constprop.0+0xea>
 8011688:	b106      	cbz	r6, 801168c <_strtol_l.constprop.0+0xe0>
 801168a:	4240      	negs	r0, r0
 801168c:	f1b8 0f00 	cmp.w	r8, #0
 8011690:	d099      	beq.n	80115c6 <_strtol_l.constprop.0+0x1a>
 8011692:	2a00      	cmp	r2, #0
 8011694:	d1f6      	bne.n	8011684 <_strtol_l.constprop.0+0xd8>
 8011696:	f8c8 1000 	str.w	r1, [r8]
 801169a:	e794      	b.n	80115c6 <_strtol_l.constprop.0+0x1a>
 801169c:	08013ee9 	.word	0x08013ee9

080116a0 <_strtol_r>:
 80116a0:	f7ff bf84 	b.w	80115ac <_strtol_l.constprop.0>

080116a4 <__ssputs_r>:
 80116a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116a8:	688e      	ldr	r6, [r1, #8]
 80116aa:	461f      	mov	r7, r3
 80116ac:	42be      	cmp	r6, r7
 80116ae:	680b      	ldr	r3, [r1, #0]
 80116b0:	4682      	mov	sl, r0
 80116b2:	460c      	mov	r4, r1
 80116b4:	4690      	mov	r8, r2
 80116b6:	d82d      	bhi.n	8011714 <__ssputs_r+0x70>
 80116b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80116bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80116c0:	d026      	beq.n	8011710 <__ssputs_r+0x6c>
 80116c2:	6965      	ldr	r5, [r4, #20]
 80116c4:	6909      	ldr	r1, [r1, #16]
 80116c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116ca:	eba3 0901 	sub.w	r9, r3, r1
 80116ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116d2:	1c7b      	adds	r3, r7, #1
 80116d4:	444b      	add	r3, r9
 80116d6:	106d      	asrs	r5, r5, #1
 80116d8:	429d      	cmp	r5, r3
 80116da:	bf38      	it	cc
 80116dc:	461d      	movcc	r5, r3
 80116de:	0553      	lsls	r3, r2, #21
 80116e0:	d527      	bpl.n	8011732 <__ssputs_r+0x8e>
 80116e2:	4629      	mov	r1, r5
 80116e4:	f7fe fb7a 	bl	800fddc <_malloc_r>
 80116e8:	4606      	mov	r6, r0
 80116ea:	b360      	cbz	r0, 8011746 <__ssputs_r+0xa2>
 80116ec:	6921      	ldr	r1, [r4, #16]
 80116ee:	464a      	mov	r2, r9
 80116f0:	f7ff f8f5 	bl	80108de <memcpy>
 80116f4:	89a3      	ldrh	r3, [r4, #12]
 80116f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80116fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116fe:	81a3      	strh	r3, [r4, #12]
 8011700:	6126      	str	r6, [r4, #16]
 8011702:	6165      	str	r5, [r4, #20]
 8011704:	444e      	add	r6, r9
 8011706:	eba5 0509 	sub.w	r5, r5, r9
 801170a:	6026      	str	r6, [r4, #0]
 801170c:	60a5      	str	r5, [r4, #8]
 801170e:	463e      	mov	r6, r7
 8011710:	42be      	cmp	r6, r7
 8011712:	d900      	bls.n	8011716 <__ssputs_r+0x72>
 8011714:	463e      	mov	r6, r7
 8011716:	6820      	ldr	r0, [r4, #0]
 8011718:	4632      	mov	r2, r6
 801171a:	4641      	mov	r1, r8
 801171c:	f000 ff43 	bl	80125a6 <memmove>
 8011720:	68a3      	ldr	r3, [r4, #8]
 8011722:	1b9b      	subs	r3, r3, r6
 8011724:	60a3      	str	r3, [r4, #8]
 8011726:	6823      	ldr	r3, [r4, #0]
 8011728:	4433      	add	r3, r6
 801172a:	6023      	str	r3, [r4, #0]
 801172c:	2000      	movs	r0, #0
 801172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011732:	462a      	mov	r2, r5
 8011734:	f001 ff7a 	bl	801362c <_realloc_r>
 8011738:	4606      	mov	r6, r0
 801173a:	2800      	cmp	r0, #0
 801173c:	d1e0      	bne.n	8011700 <__ssputs_r+0x5c>
 801173e:	6921      	ldr	r1, [r4, #16]
 8011740:	4650      	mov	r0, sl
 8011742:	f7ff f8e1 	bl	8010908 <_free_r>
 8011746:	230c      	movs	r3, #12
 8011748:	f8ca 3000 	str.w	r3, [sl]
 801174c:	89a3      	ldrh	r3, [r4, #12]
 801174e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011752:	81a3      	strh	r3, [r4, #12]
 8011754:	f04f 30ff 	mov.w	r0, #4294967295
 8011758:	e7e9      	b.n	801172e <__ssputs_r+0x8a>
	...

0801175c <_svfiprintf_r>:
 801175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011760:	4698      	mov	r8, r3
 8011762:	898b      	ldrh	r3, [r1, #12]
 8011764:	061b      	lsls	r3, r3, #24
 8011766:	b09d      	sub	sp, #116	@ 0x74
 8011768:	4607      	mov	r7, r0
 801176a:	460d      	mov	r5, r1
 801176c:	4614      	mov	r4, r2
 801176e:	d510      	bpl.n	8011792 <_svfiprintf_r+0x36>
 8011770:	690b      	ldr	r3, [r1, #16]
 8011772:	b973      	cbnz	r3, 8011792 <_svfiprintf_r+0x36>
 8011774:	2140      	movs	r1, #64	@ 0x40
 8011776:	f7fe fb31 	bl	800fddc <_malloc_r>
 801177a:	6028      	str	r0, [r5, #0]
 801177c:	6128      	str	r0, [r5, #16]
 801177e:	b930      	cbnz	r0, 801178e <_svfiprintf_r+0x32>
 8011780:	230c      	movs	r3, #12
 8011782:	603b      	str	r3, [r7, #0]
 8011784:	f04f 30ff 	mov.w	r0, #4294967295
 8011788:	b01d      	add	sp, #116	@ 0x74
 801178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178e:	2340      	movs	r3, #64	@ 0x40
 8011790:	616b      	str	r3, [r5, #20]
 8011792:	2300      	movs	r3, #0
 8011794:	9309      	str	r3, [sp, #36]	@ 0x24
 8011796:	2320      	movs	r3, #32
 8011798:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801179c:	f8cd 800c 	str.w	r8, [sp, #12]
 80117a0:	2330      	movs	r3, #48	@ 0x30
 80117a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011940 <_svfiprintf_r+0x1e4>
 80117a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117aa:	f04f 0901 	mov.w	r9, #1
 80117ae:	4623      	mov	r3, r4
 80117b0:	469a      	mov	sl, r3
 80117b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117b6:	b10a      	cbz	r2, 80117bc <_svfiprintf_r+0x60>
 80117b8:	2a25      	cmp	r2, #37	@ 0x25
 80117ba:	d1f9      	bne.n	80117b0 <_svfiprintf_r+0x54>
 80117bc:	ebba 0b04 	subs.w	fp, sl, r4
 80117c0:	d00b      	beq.n	80117da <_svfiprintf_r+0x7e>
 80117c2:	465b      	mov	r3, fp
 80117c4:	4622      	mov	r2, r4
 80117c6:	4629      	mov	r1, r5
 80117c8:	4638      	mov	r0, r7
 80117ca:	f7ff ff6b 	bl	80116a4 <__ssputs_r>
 80117ce:	3001      	adds	r0, #1
 80117d0:	f000 80a7 	beq.w	8011922 <_svfiprintf_r+0x1c6>
 80117d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117d6:	445a      	add	r2, fp
 80117d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80117da:	f89a 3000 	ldrb.w	r3, [sl]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	f000 809f 	beq.w	8011922 <_svfiprintf_r+0x1c6>
 80117e4:	2300      	movs	r3, #0
 80117e6:	f04f 32ff 	mov.w	r2, #4294967295
 80117ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117ee:	f10a 0a01 	add.w	sl, sl, #1
 80117f2:	9304      	str	r3, [sp, #16]
 80117f4:	9307      	str	r3, [sp, #28]
 80117f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80117fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80117fc:	4654      	mov	r4, sl
 80117fe:	2205      	movs	r2, #5
 8011800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011804:	484e      	ldr	r0, [pc, #312]	@ (8011940 <_svfiprintf_r+0x1e4>)
 8011806:	f7ee fcfb 	bl	8000200 <memchr>
 801180a:	9a04      	ldr	r2, [sp, #16]
 801180c:	b9d8      	cbnz	r0, 8011846 <_svfiprintf_r+0xea>
 801180e:	06d0      	lsls	r0, r2, #27
 8011810:	bf44      	itt	mi
 8011812:	2320      	movmi	r3, #32
 8011814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011818:	0711      	lsls	r1, r2, #28
 801181a:	bf44      	itt	mi
 801181c:	232b      	movmi	r3, #43	@ 0x2b
 801181e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011822:	f89a 3000 	ldrb.w	r3, [sl]
 8011826:	2b2a      	cmp	r3, #42	@ 0x2a
 8011828:	d015      	beq.n	8011856 <_svfiprintf_r+0xfa>
 801182a:	9a07      	ldr	r2, [sp, #28]
 801182c:	4654      	mov	r4, sl
 801182e:	2000      	movs	r0, #0
 8011830:	f04f 0c0a 	mov.w	ip, #10
 8011834:	4621      	mov	r1, r4
 8011836:	f811 3b01 	ldrb.w	r3, [r1], #1
 801183a:	3b30      	subs	r3, #48	@ 0x30
 801183c:	2b09      	cmp	r3, #9
 801183e:	d94b      	bls.n	80118d8 <_svfiprintf_r+0x17c>
 8011840:	b1b0      	cbz	r0, 8011870 <_svfiprintf_r+0x114>
 8011842:	9207      	str	r2, [sp, #28]
 8011844:	e014      	b.n	8011870 <_svfiprintf_r+0x114>
 8011846:	eba0 0308 	sub.w	r3, r0, r8
 801184a:	fa09 f303 	lsl.w	r3, r9, r3
 801184e:	4313      	orrs	r3, r2
 8011850:	9304      	str	r3, [sp, #16]
 8011852:	46a2      	mov	sl, r4
 8011854:	e7d2      	b.n	80117fc <_svfiprintf_r+0xa0>
 8011856:	9b03      	ldr	r3, [sp, #12]
 8011858:	1d19      	adds	r1, r3, #4
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	9103      	str	r1, [sp, #12]
 801185e:	2b00      	cmp	r3, #0
 8011860:	bfbb      	ittet	lt
 8011862:	425b      	neglt	r3, r3
 8011864:	f042 0202 	orrlt.w	r2, r2, #2
 8011868:	9307      	strge	r3, [sp, #28]
 801186a:	9307      	strlt	r3, [sp, #28]
 801186c:	bfb8      	it	lt
 801186e:	9204      	strlt	r2, [sp, #16]
 8011870:	7823      	ldrb	r3, [r4, #0]
 8011872:	2b2e      	cmp	r3, #46	@ 0x2e
 8011874:	d10a      	bne.n	801188c <_svfiprintf_r+0x130>
 8011876:	7863      	ldrb	r3, [r4, #1]
 8011878:	2b2a      	cmp	r3, #42	@ 0x2a
 801187a:	d132      	bne.n	80118e2 <_svfiprintf_r+0x186>
 801187c:	9b03      	ldr	r3, [sp, #12]
 801187e:	1d1a      	adds	r2, r3, #4
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	9203      	str	r2, [sp, #12]
 8011884:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011888:	3402      	adds	r4, #2
 801188a:	9305      	str	r3, [sp, #20]
 801188c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011950 <_svfiprintf_r+0x1f4>
 8011890:	7821      	ldrb	r1, [r4, #0]
 8011892:	2203      	movs	r2, #3
 8011894:	4650      	mov	r0, sl
 8011896:	f7ee fcb3 	bl	8000200 <memchr>
 801189a:	b138      	cbz	r0, 80118ac <_svfiprintf_r+0x150>
 801189c:	9b04      	ldr	r3, [sp, #16]
 801189e:	eba0 000a 	sub.w	r0, r0, sl
 80118a2:	2240      	movs	r2, #64	@ 0x40
 80118a4:	4082      	lsls	r2, r0
 80118a6:	4313      	orrs	r3, r2
 80118a8:	3401      	adds	r4, #1
 80118aa:	9304      	str	r3, [sp, #16]
 80118ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118b0:	4824      	ldr	r0, [pc, #144]	@ (8011944 <_svfiprintf_r+0x1e8>)
 80118b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118b6:	2206      	movs	r2, #6
 80118b8:	f7ee fca2 	bl	8000200 <memchr>
 80118bc:	2800      	cmp	r0, #0
 80118be:	d036      	beq.n	801192e <_svfiprintf_r+0x1d2>
 80118c0:	4b21      	ldr	r3, [pc, #132]	@ (8011948 <_svfiprintf_r+0x1ec>)
 80118c2:	bb1b      	cbnz	r3, 801190c <_svfiprintf_r+0x1b0>
 80118c4:	9b03      	ldr	r3, [sp, #12]
 80118c6:	3307      	adds	r3, #7
 80118c8:	f023 0307 	bic.w	r3, r3, #7
 80118cc:	3308      	adds	r3, #8
 80118ce:	9303      	str	r3, [sp, #12]
 80118d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118d2:	4433      	add	r3, r6
 80118d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80118d6:	e76a      	b.n	80117ae <_svfiprintf_r+0x52>
 80118d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80118dc:	460c      	mov	r4, r1
 80118de:	2001      	movs	r0, #1
 80118e0:	e7a8      	b.n	8011834 <_svfiprintf_r+0xd8>
 80118e2:	2300      	movs	r3, #0
 80118e4:	3401      	adds	r4, #1
 80118e6:	9305      	str	r3, [sp, #20]
 80118e8:	4619      	mov	r1, r3
 80118ea:	f04f 0c0a 	mov.w	ip, #10
 80118ee:	4620      	mov	r0, r4
 80118f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118f4:	3a30      	subs	r2, #48	@ 0x30
 80118f6:	2a09      	cmp	r2, #9
 80118f8:	d903      	bls.n	8011902 <_svfiprintf_r+0x1a6>
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d0c6      	beq.n	801188c <_svfiprintf_r+0x130>
 80118fe:	9105      	str	r1, [sp, #20]
 8011900:	e7c4      	b.n	801188c <_svfiprintf_r+0x130>
 8011902:	fb0c 2101 	mla	r1, ip, r1, r2
 8011906:	4604      	mov	r4, r0
 8011908:	2301      	movs	r3, #1
 801190a:	e7f0      	b.n	80118ee <_svfiprintf_r+0x192>
 801190c:	ab03      	add	r3, sp, #12
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	462a      	mov	r2, r5
 8011912:	4b0e      	ldr	r3, [pc, #56]	@ (801194c <_svfiprintf_r+0x1f0>)
 8011914:	a904      	add	r1, sp, #16
 8011916:	4638      	mov	r0, r7
 8011918:	f3af 8000 	nop.w
 801191c:	1c42      	adds	r2, r0, #1
 801191e:	4606      	mov	r6, r0
 8011920:	d1d6      	bne.n	80118d0 <_svfiprintf_r+0x174>
 8011922:	89ab      	ldrh	r3, [r5, #12]
 8011924:	065b      	lsls	r3, r3, #25
 8011926:	f53f af2d 	bmi.w	8011784 <_svfiprintf_r+0x28>
 801192a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801192c:	e72c      	b.n	8011788 <_svfiprintf_r+0x2c>
 801192e:	ab03      	add	r3, sp, #12
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	462a      	mov	r2, r5
 8011934:	4b05      	ldr	r3, [pc, #20]	@ (801194c <_svfiprintf_r+0x1f0>)
 8011936:	a904      	add	r1, sp, #16
 8011938:	4638      	mov	r0, r7
 801193a:	f000 fa45 	bl	8011dc8 <_printf_i>
 801193e:	e7ed      	b.n	801191c <_svfiprintf_r+0x1c0>
 8011940:	08013fe9 	.word	0x08013fe9
 8011944:	08013ff3 	.word	0x08013ff3
 8011948:	00000000 	.word	0x00000000
 801194c:	080116a5 	.word	0x080116a5
 8011950:	08013fef 	.word	0x08013fef

08011954 <_sungetc_r>:
 8011954:	b538      	push	{r3, r4, r5, lr}
 8011956:	1c4b      	adds	r3, r1, #1
 8011958:	4614      	mov	r4, r2
 801195a:	d103      	bne.n	8011964 <_sungetc_r+0x10>
 801195c:	f04f 35ff 	mov.w	r5, #4294967295
 8011960:	4628      	mov	r0, r5
 8011962:	bd38      	pop	{r3, r4, r5, pc}
 8011964:	8993      	ldrh	r3, [r2, #12]
 8011966:	f023 0320 	bic.w	r3, r3, #32
 801196a:	8193      	strh	r3, [r2, #12]
 801196c:	6853      	ldr	r3, [r2, #4]
 801196e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011970:	b2cd      	uxtb	r5, r1
 8011972:	b18a      	cbz	r2, 8011998 <_sungetc_r+0x44>
 8011974:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011976:	429a      	cmp	r2, r3
 8011978:	dd08      	ble.n	801198c <_sungetc_r+0x38>
 801197a:	6823      	ldr	r3, [r4, #0]
 801197c:	1e5a      	subs	r2, r3, #1
 801197e:	6022      	str	r2, [r4, #0]
 8011980:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011984:	6863      	ldr	r3, [r4, #4]
 8011986:	3301      	adds	r3, #1
 8011988:	6063      	str	r3, [r4, #4]
 801198a:	e7e9      	b.n	8011960 <_sungetc_r+0xc>
 801198c:	4621      	mov	r1, r4
 801198e:	f000 fdd0 	bl	8012532 <__submore>
 8011992:	2800      	cmp	r0, #0
 8011994:	d0f1      	beq.n	801197a <_sungetc_r+0x26>
 8011996:	e7e1      	b.n	801195c <_sungetc_r+0x8>
 8011998:	6921      	ldr	r1, [r4, #16]
 801199a:	6822      	ldr	r2, [r4, #0]
 801199c:	b141      	cbz	r1, 80119b0 <_sungetc_r+0x5c>
 801199e:	4291      	cmp	r1, r2
 80119a0:	d206      	bcs.n	80119b0 <_sungetc_r+0x5c>
 80119a2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80119a6:	42a9      	cmp	r1, r5
 80119a8:	d102      	bne.n	80119b0 <_sungetc_r+0x5c>
 80119aa:	3a01      	subs	r2, #1
 80119ac:	6022      	str	r2, [r4, #0]
 80119ae:	e7ea      	b.n	8011986 <_sungetc_r+0x32>
 80119b0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80119b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80119ba:	2303      	movs	r3, #3
 80119bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80119be:	4623      	mov	r3, r4
 80119c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80119c4:	6023      	str	r3, [r4, #0]
 80119c6:	2301      	movs	r3, #1
 80119c8:	e7de      	b.n	8011988 <_sungetc_r+0x34>

080119ca <__ssrefill_r>:
 80119ca:	b510      	push	{r4, lr}
 80119cc:	460c      	mov	r4, r1
 80119ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80119d0:	b169      	cbz	r1, 80119ee <__ssrefill_r+0x24>
 80119d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119d6:	4299      	cmp	r1, r3
 80119d8:	d001      	beq.n	80119de <__ssrefill_r+0x14>
 80119da:	f7fe ff95 	bl	8010908 <_free_r>
 80119de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80119e0:	6063      	str	r3, [r4, #4]
 80119e2:	2000      	movs	r0, #0
 80119e4:	6360      	str	r0, [r4, #52]	@ 0x34
 80119e6:	b113      	cbz	r3, 80119ee <__ssrefill_r+0x24>
 80119e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80119ea:	6023      	str	r3, [r4, #0]
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	6923      	ldr	r3, [r4, #16]
 80119f0:	6023      	str	r3, [r4, #0]
 80119f2:	2300      	movs	r3, #0
 80119f4:	6063      	str	r3, [r4, #4]
 80119f6:	89a3      	ldrh	r3, [r4, #12]
 80119f8:	f043 0320 	orr.w	r3, r3, #32
 80119fc:	81a3      	strh	r3, [r4, #12]
 80119fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011a02:	e7f3      	b.n	80119ec <__ssrefill_r+0x22>

08011a04 <__ssvfiscanf_r>:
 8011a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a08:	460c      	mov	r4, r1
 8011a0a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011a0e:	2100      	movs	r1, #0
 8011a10:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011a14:	49a5      	ldr	r1, [pc, #660]	@ (8011cac <__ssvfiscanf_r+0x2a8>)
 8011a16:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011a18:	f10d 0804 	add.w	r8, sp, #4
 8011a1c:	49a4      	ldr	r1, [pc, #656]	@ (8011cb0 <__ssvfiscanf_r+0x2ac>)
 8011a1e:	4fa5      	ldr	r7, [pc, #660]	@ (8011cb4 <__ssvfiscanf_r+0x2b0>)
 8011a20:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011a24:	4606      	mov	r6, r0
 8011a26:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011a28:	9300      	str	r3, [sp, #0]
 8011a2a:	7813      	ldrb	r3, [r2, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f000 8158 	beq.w	8011ce2 <__ssvfiscanf_r+0x2de>
 8011a32:	5cf9      	ldrb	r1, [r7, r3]
 8011a34:	f011 0108 	ands.w	r1, r1, #8
 8011a38:	f102 0501 	add.w	r5, r2, #1
 8011a3c:	d019      	beq.n	8011a72 <__ssvfiscanf_r+0x6e>
 8011a3e:	6863      	ldr	r3, [r4, #4]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dd0f      	ble.n	8011a64 <__ssvfiscanf_r+0x60>
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	781a      	ldrb	r2, [r3, #0]
 8011a48:	5cba      	ldrb	r2, [r7, r2]
 8011a4a:	0712      	lsls	r2, r2, #28
 8011a4c:	d401      	bmi.n	8011a52 <__ssvfiscanf_r+0x4e>
 8011a4e:	462a      	mov	r2, r5
 8011a50:	e7eb      	b.n	8011a2a <__ssvfiscanf_r+0x26>
 8011a52:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011a54:	3201      	adds	r2, #1
 8011a56:	9245      	str	r2, [sp, #276]	@ 0x114
 8011a58:	6862      	ldr	r2, [r4, #4]
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	3a01      	subs	r2, #1
 8011a5e:	6062      	str	r2, [r4, #4]
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	e7ec      	b.n	8011a3e <__ssvfiscanf_r+0x3a>
 8011a64:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011a66:	4621      	mov	r1, r4
 8011a68:	4630      	mov	r0, r6
 8011a6a:	4798      	blx	r3
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d0e9      	beq.n	8011a44 <__ssvfiscanf_r+0x40>
 8011a70:	e7ed      	b.n	8011a4e <__ssvfiscanf_r+0x4a>
 8011a72:	2b25      	cmp	r3, #37	@ 0x25
 8011a74:	d012      	beq.n	8011a9c <__ssvfiscanf_r+0x98>
 8011a76:	4699      	mov	r9, r3
 8011a78:	6863      	ldr	r3, [r4, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	f340 8093 	ble.w	8011ba6 <__ssvfiscanf_r+0x1a2>
 8011a80:	6822      	ldr	r2, [r4, #0]
 8011a82:	7813      	ldrb	r3, [r2, #0]
 8011a84:	454b      	cmp	r3, r9
 8011a86:	f040 812c 	bne.w	8011ce2 <__ssvfiscanf_r+0x2de>
 8011a8a:	6863      	ldr	r3, [r4, #4]
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	6063      	str	r3, [r4, #4]
 8011a90:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011a92:	3201      	adds	r2, #1
 8011a94:	3301      	adds	r3, #1
 8011a96:	6022      	str	r2, [r4, #0]
 8011a98:	9345      	str	r3, [sp, #276]	@ 0x114
 8011a9a:	e7d8      	b.n	8011a4e <__ssvfiscanf_r+0x4a>
 8011a9c:	9141      	str	r1, [sp, #260]	@ 0x104
 8011a9e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011aa0:	7853      	ldrb	r3, [r2, #1]
 8011aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011aa4:	bf02      	ittt	eq
 8011aa6:	2310      	moveq	r3, #16
 8011aa8:	1c95      	addeq	r5, r2, #2
 8011aaa:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011aac:	220a      	movs	r2, #10
 8011aae:	46a9      	mov	r9, r5
 8011ab0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011ab4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011ab8:	2b09      	cmp	r3, #9
 8011aba:	d91e      	bls.n	8011afa <__ssvfiscanf_r+0xf6>
 8011abc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011cb8 <__ssvfiscanf_r+0x2b4>
 8011ac0:	2203      	movs	r2, #3
 8011ac2:	4650      	mov	r0, sl
 8011ac4:	f7ee fb9c 	bl	8000200 <memchr>
 8011ac8:	b138      	cbz	r0, 8011ada <__ssvfiscanf_r+0xd6>
 8011aca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011acc:	eba0 000a 	sub.w	r0, r0, sl
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	4083      	lsls	r3, r0
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	9341      	str	r3, [sp, #260]	@ 0x104
 8011ad8:	464d      	mov	r5, r9
 8011ada:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011ade:	2b78      	cmp	r3, #120	@ 0x78
 8011ae0:	d806      	bhi.n	8011af0 <__ssvfiscanf_r+0xec>
 8011ae2:	2b57      	cmp	r3, #87	@ 0x57
 8011ae4:	d810      	bhi.n	8011b08 <__ssvfiscanf_r+0x104>
 8011ae6:	2b25      	cmp	r3, #37	@ 0x25
 8011ae8:	d0c5      	beq.n	8011a76 <__ssvfiscanf_r+0x72>
 8011aea:	d857      	bhi.n	8011b9c <__ssvfiscanf_r+0x198>
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d065      	beq.n	8011bbc <__ssvfiscanf_r+0x1b8>
 8011af0:	2303      	movs	r3, #3
 8011af2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011af4:	230a      	movs	r3, #10
 8011af6:	9342      	str	r3, [sp, #264]	@ 0x108
 8011af8:	e078      	b.n	8011bec <__ssvfiscanf_r+0x1e8>
 8011afa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011afc:	fb02 1103 	mla	r1, r2, r3, r1
 8011b00:	3930      	subs	r1, #48	@ 0x30
 8011b02:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011b04:	464d      	mov	r5, r9
 8011b06:	e7d2      	b.n	8011aae <__ssvfiscanf_r+0xaa>
 8011b08:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011b0c:	2a20      	cmp	r2, #32
 8011b0e:	d8ef      	bhi.n	8011af0 <__ssvfiscanf_r+0xec>
 8011b10:	a101      	add	r1, pc, #4	@ (adr r1, 8011b18 <__ssvfiscanf_r+0x114>)
 8011b12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011b16:	bf00      	nop
 8011b18:	08011bcb 	.word	0x08011bcb
 8011b1c:	08011af1 	.word	0x08011af1
 8011b20:	08011af1 	.word	0x08011af1
 8011b24:	08011c25 	.word	0x08011c25
 8011b28:	08011af1 	.word	0x08011af1
 8011b2c:	08011af1 	.word	0x08011af1
 8011b30:	08011af1 	.word	0x08011af1
 8011b34:	08011af1 	.word	0x08011af1
 8011b38:	08011af1 	.word	0x08011af1
 8011b3c:	08011af1 	.word	0x08011af1
 8011b40:	08011af1 	.word	0x08011af1
 8011b44:	08011c3b 	.word	0x08011c3b
 8011b48:	08011c21 	.word	0x08011c21
 8011b4c:	08011ba3 	.word	0x08011ba3
 8011b50:	08011ba3 	.word	0x08011ba3
 8011b54:	08011ba3 	.word	0x08011ba3
 8011b58:	08011af1 	.word	0x08011af1
 8011b5c:	08011bdd 	.word	0x08011bdd
 8011b60:	08011af1 	.word	0x08011af1
 8011b64:	08011af1 	.word	0x08011af1
 8011b68:	08011af1 	.word	0x08011af1
 8011b6c:	08011af1 	.word	0x08011af1
 8011b70:	08011c4b 	.word	0x08011c4b
 8011b74:	08011be5 	.word	0x08011be5
 8011b78:	08011bc3 	.word	0x08011bc3
 8011b7c:	08011af1 	.word	0x08011af1
 8011b80:	08011af1 	.word	0x08011af1
 8011b84:	08011c47 	.word	0x08011c47
 8011b88:	08011af1 	.word	0x08011af1
 8011b8c:	08011c21 	.word	0x08011c21
 8011b90:	08011af1 	.word	0x08011af1
 8011b94:	08011af1 	.word	0x08011af1
 8011b98:	08011bcb 	.word	0x08011bcb
 8011b9c:	3b45      	subs	r3, #69	@ 0x45
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	d8a6      	bhi.n	8011af0 <__ssvfiscanf_r+0xec>
 8011ba2:	2305      	movs	r3, #5
 8011ba4:	e021      	b.n	8011bea <__ssvfiscanf_r+0x1e6>
 8011ba6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ba8:	4621      	mov	r1, r4
 8011baa:	4630      	mov	r0, r6
 8011bac:	4798      	blx	r3
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	f43f af66 	beq.w	8011a80 <__ssvfiscanf_r+0x7c>
 8011bb4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	f040 808b 	bne.w	8011cd2 <__ssvfiscanf_r+0x2ce>
 8011bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc0:	e08b      	b.n	8011cda <__ssvfiscanf_r+0x2d6>
 8011bc2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011bc4:	f042 0220 	orr.w	r2, r2, #32
 8011bc8:	9241      	str	r2, [sp, #260]	@ 0x104
 8011bca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011bd0:	9241      	str	r2, [sp, #260]	@ 0x104
 8011bd2:	2210      	movs	r2, #16
 8011bd4:	2b6e      	cmp	r3, #110	@ 0x6e
 8011bd6:	9242      	str	r2, [sp, #264]	@ 0x108
 8011bd8:	d902      	bls.n	8011be0 <__ssvfiscanf_r+0x1dc>
 8011bda:	e005      	b.n	8011be8 <__ssvfiscanf_r+0x1e4>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	9342      	str	r3, [sp, #264]	@ 0x108
 8011be0:	2303      	movs	r3, #3
 8011be2:	e002      	b.n	8011bea <__ssvfiscanf_r+0x1e6>
 8011be4:	2308      	movs	r3, #8
 8011be6:	9342      	str	r3, [sp, #264]	@ 0x108
 8011be8:	2304      	movs	r3, #4
 8011bea:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011bec:	6863      	ldr	r3, [r4, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	dd39      	ble.n	8011c66 <__ssvfiscanf_r+0x262>
 8011bf2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011bf4:	0659      	lsls	r1, r3, #25
 8011bf6:	d404      	bmi.n	8011c02 <__ssvfiscanf_r+0x1fe>
 8011bf8:	6823      	ldr	r3, [r4, #0]
 8011bfa:	781a      	ldrb	r2, [r3, #0]
 8011bfc:	5cba      	ldrb	r2, [r7, r2]
 8011bfe:	0712      	lsls	r2, r2, #28
 8011c00:	d438      	bmi.n	8011c74 <__ssvfiscanf_r+0x270>
 8011c02:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	dc47      	bgt.n	8011c98 <__ssvfiscanf_r+0x294>
 8011c08:	466b      	mov	r3, sp
 8011c0a:	4622      	mov	r2, r4
 8011c0c:	a941      	add	r1, sp, #260	@ 0x104
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f000 f9fa 	bl	8012008 <_scanf_chars>
 8011c14:	2801      	cmp	r0, #1
 8011c16:	d064      	beq.n	8011ce2 <__ssvfiscanf_r+0x2de>
 8011c18:	2802      	cmp	r0, #2
 8011c1a:	f47f af18 	bne.w	8011a4e <__ssvfiscanf_r+0x4a>
 8011c1e:	e7c9      	b.n	8011bb4 <__ssvfiscanf_r+0x1b0>
 8011c20:	220a      	movs	r2, #10
 8011c22:	e7d7      	b.n	8011bd4 <__ssvfiscanf_r+0x1d0>
 8011c24:	4629      	mov	r1, r5
 8011c26:	4640      	mov	r0, r8
 8011c28:	f000 fc4a 	bl	80124c0 <__sccl>
 8011c2c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c32:	9341      	str	r3, [sp, #260]	@ 0x104
 8011c34:	4605      	mov	r5, r0
 8011c36:	2301      	movs	r3, #1
 8011c38:	e7d7      	b.n	8011bea <__ssvfiscanf_r+0x1e6>
 8011c3a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c40:	9341      	str	r3, [sp, #260]	@ 0x104
 8011c42:	2300      	movs	r3, #0
 8011c44:	e7d1      	b.n	8011bea <__ssvfiscanf_r+0x1e6>
 8011c46:	2302      	movs	r3, #2
 8011c48:	e7cf      	b.n	8011bea <__ssvfiscanf_r+0x1e6>
 8011c4a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011c4c:	06c3      	lsls	r3, r0, #27
 8011c4e:	f53f aefe 	bmi.w	8011a4e <__ssvfiscanf_r+0x4a>
 8011c52:	9b00      	ldr	r3, [sp, #0]
 8011c54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011c56:	1d19      	adds	r1, r3, #4
 8011c58:	9100      	str	r1, [sp, #0]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	07c0      	lsls	r0, r0, #31
 8011c5e:	bf4c      	ite	mi
 8011c60:	801a      	strhmi	r2, [r3, #0]
 8011c62:	601a      	strpl	r2, [r3, #0]
 8011c64:	e6f3      	b.n	8011a4e <__ssvfiscanf_r+0x4a>
 8011c66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c68:	4621      	mov	r1, r4
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	4798      	blx	r3
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d0bf      	beq.n	8011bf2 <__ssvfiscanf_r+0x1ee>
 8011c72:	e79f      	b.n	8011bb4 <__ssvfiscanf_r+0x1b0>
 8011c74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011c76:	3201      	adds	r2, #1
 8011c78:	9245      	str	r2, [sp, #276]	@ 0x114
 8011c7a:	6862      	ldr	r2, [r4, #4]
 8011c7c:	3a01      	subs	r2, #1
 8011c7e:	2a00      	cmp	r2, #0
 8011c80:	6062      	str	r2, [r4, #4]
 8011c82:	dd02      	ble.n	8011c8a <__ssvfiscanf_r+0x286>
 8011c84:	3301      	adds	r3, #1
 8011c86:	6023      	str	r3, [r4, #0]
 8011c88:	e7b6      	b.n	8011bf8 <__ssvfiscanf_r+0x1f4>
 8011c8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	4630      	mov	r0, r6
 8011c90:	4798      	blx	r3
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d0b0      	beq.n	8011bf8 <__ssvfiscanf_r+0x1f4>
 8011c96:	e78d      	b.n	8011bb4 <__ssvfiscanf_r+0x1b0>
 8011c98:	2b04      	cmp	r3, #4
 8011c9a:	dc0f      	bgt.n	8011cbc <__ssvfiscanf_r+0x2b8>
 8011c9c:	466b      	mov	r3, sp
 8011c9e:	4622      	mov	r2, r4
 8011ca0:	a941      	add	r1, sp, #260	@ 0x104
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f000 fa0a 	bl	80120bc <_scanf_i>
 8011ca8:	e7b4      	b.n	8011c14 <__ssvfiscanf_r+0x210>
 8011caa:	bf00      	nop
 8011cac:	08011955 	.word	0x08011955
 8011cb0:	080119cb 	.word	0x080119cb
 8011cb4:	08013ee9 	.word	0x08013ee9
 8011cb8:	08013fef 	.word	0x08013fef
 8011cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8011ce8 <__ssvfiscanf_r+0x2e4>)
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f43f aec5 	beq.w	8011a4e <__ssvfiscanf_r+0x4a>
 8011cc4:	466b      	mov	r3, sp
 8011cc6:	4622      	mov	r2, r4
 8011cc8:	a941      	add	r1, sp, #260	@ 0x104
 8011cca:	4630      	mov	r0, r6
 8011ccc:	f7fe f912 	bl	800fef4 <_scanf_float>
 8011cd0:	e7a0      	b.n	8011c14 <__ssvfiscanf_r+0x210>
 8011cd2:	89a3      	ldrh	r3, [r4, #12]
 8011cd4:	065b      	lsls	r3, r3, #25
 8011cd6:	f53f af71 	bmi.w	8011bbc <__ssvfiscanf_r+0x1b8>
 8011cda:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011ce4:	e7f9      	b.n	8011cda <__ssvfiscanf_r+0x2d6>
 8011ce6:	bf00      	nop
 8011ce8:	0800fef5 	.word	0x0800fef5

08011cec <_printf_common>:
 8011cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cf0:	4616      	mov	r6, r2
 8011cf2:	4698      	mov	r8, r3
 8011cf4:	688a      	ldr	r2, [r1, #8]
 8011cf6:	690b      	ldr	r3, [r1, #16]
 8011cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	bfb8      	it	lt
 8011d00:	4613      	movlt	r3, r2
 8011d02:	6033      	str	r3, [r6, #0]
 8011d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011d08:	4607      	mov	r7, r0
 8011d0a:	460c      	mov	r4, r1
 8011d0c:	b10a      	cbz	r2, 8011d12 <_printf_common+0x26>
 8011d0e:	3301      	adds	r3, #1
 8011d10:	6033      	str	r3, [r6, #0]
 8011d12:	6823      	ldr	r3, [r4, #0]
 8011d14:	0699      	lsls	r1, r3, #26
 8011d16:	bf42      	ittt	mi
 8011d18:	6833      	ldrmi	r3, [r6, #0]
 8011d1a:	3302      	addmi	r3, #2
 8011d1c:	6033      	strmi	r3, [r6, #0]
 8011d1e:	6825      	ldr	r5, [r4, #0]
 8011d20:	f015 0506 	ands.w	r5, r5, #6
 8011d24:	d106      	bne.n	8011d34 <_printf_common+0x48>
 8011d26:	f104 0a19 	add.w	sl, r4, #25
 8011d2a:	68e3      	ldr	r3, [r4, #12]
 8011d2c:	6832      	ldr	r2, [r6, #0]
 8011d2e:	1a9b      	subs	r3, r3, r2
 8011d30:	42ab      	cmp	r3, r5
 8011d32:	dc26      	bgt.n	8011d82 <_printf_common+0x96>
 8011d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011d38:	6822      	ldr	r2, [r4, #0]
 8011d3a:	3b00      	subs	r3, #0
 8011d3c:	bf18      	it	ne
 8011d3e:	2301      	movne	r3, #1
 8011d40:	0692      	lsls	r2, r2, #26
 8011d42:	d42b      	bmi.n	8011d9c <_printf_common+0xb0>
 8011d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011d48:	4641      	mov	r1, r8
 8011d4a:	4638      	mov	r0, r7
 8011d4c:	47c8      	blx	r9
 8011d4e:	3001      	adds	r0, #1
 8011d50:	d01e      	beq.n	8011d90 <_printf_common+0xa4>
 8011d52:	6823      	ldr	r3, [r4, #0]
 8011d54:	6922      	ldr	r2, [r4, #16]
 8011d56:	f003 0306 	and.w	r3, r3, #6
 8011d5a:	2b04      	cmp	r3, #4
 8011d5c:	bf02      	ittt	eq
 8011d5e:	68e5      	ldreq	r5, [r4, #12]
 8011d60:	6833      	ldreq	r3, [r6, #0]
 8011d62:	1aed      	subeq	r5, r5, r3
 8011d64:	68a3      	ldr	r3, [r4, #8]
 8011d66:	bf0c      	ite	eq
 8011d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d6c:	2500      	movne	r5, #0
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	bfc4      	itt	gt
 8011d72:	1a9b      	subgt	r3, r3, r2
 8011d74:	18ed      	addgt	r5, r5, r3
 8011d76:	2600      	movs	r6, #0
 8011d78:	341a      	adds	r4, #26
 8011d7a:	42b5      	cmp	r5, r6
 8011d7c:	d11a      	bne.n	8011db4 <_printf_common+0xc8>
 8011d7e:	2000      	movs	r0, #0
 8011d80:	e008      	b.n	8011d94 <_printf_common+0xa8>
 8011d82:	2301      	movs	r3, #1
 8011d84:	4652      	mov	r2, sl
 8011d86:	4641      	mov	r1, r8
 8011d88:	4638      	mov	r0, r7
 8011d8a:	47c8      	blx	r9
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	d103      	bne.n	8011d98 <_printf_common+0xac>
 8011d90:	f04f 30ff 	mov.w	r0, #4294967295
 8011d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d98:	3501      	adds	r5, #1
 8011d9a:	e7c6      	b.n	8011d2a <_printf_common+0x3e>
 8011d9c:	18e1      	adds	r1, r4, r3
 8011d9e:	1c5a      	adds	r2, r3, #1
 8011da0:	2030      	movs	r0, #48	@ 0x30
 8011da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011da6:	4422      	add	r2, r4
 8011da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011db0:	3302      	adds	r3, #2
 8011db2:	e7c7      	b.n	8011d44 <_printf_common+0x58>
 8011db4:	2301      	movs	r3, #1
 8011db6:	4622      	mov	r2, r4
 8011db8:	4641      	mov	r1, r8
 8011dba:	4638      	mov	r0, r7
 8011dbc:	47c8      	blx	r9
 8011dbe:	3001      	adds	r0, #1
 8011dc0:	d0e6      	beq.n	8011d90 <_printf_common+0xa4>
 8011dc2:	3601      	adds	r6, #1
 8011dc4:	e7d9      	b.n	8011d7a <_printf_common+0x8e>
	...

08011dc8 <_printf_i>:
 8011dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dcc:	7e0f      	ldrb	r7, [r1, #24]
 8011dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011dd0:	2f78      	cmp	r7, #120	@ 0x78
 8011dd2:	4691      	mov	r9, r2
 8011dd4:	4680      	mov	r8, r0
 8011dd6:	460c      	mov	r4, r1
 8011dd8:	469a      	mov	sl, r3
 8011dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011dde:	d807      	bhi.n	8011df0 <_printf_i+0x28>
 8011de0:	2f62      	cmp	r7, #98	@ 0x62
 8011de2:	d80a      	bhi.n	8011dfa <_printf_i+0x32>
 8011de4:	2f00      	cmp	r7, #0
 8011de6:	f000 80d2 	beq.w	8011f8e <_printf_i+0x1c6>
 8011dea:	2f58      	cmp	r7, #88	@ 0x58
 8011dec:	f000 80b9 	beq.w	8011f62 <_printf_i+0x19a>
 8011df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011df8:	e03a      	b.n	8011e70 <_printf_i+0xa8>
 8011dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011dfe:	2b15      	cmp	r3, #21
 8011e00:	d8f6      	bhi.n	8011df0 <_printf_i+0x28>
 8011e02:	a101      	add	r1, pc, #4	@ (adr r1, 8011e08 <_printf_i+0x40>)
 8011e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e08:	08011e61 	.word	0x08011e61
 8011e0c:	08011e75 	.word	0x08011e75
 8011e10:	08011df1 	.word	0x08011df1
 8011e14:	08011df1 	.word	0x08011df1
 8011e18:	08011df1 	.word	0x08011df1
 8011e1c:	08011df1 	.word	0x08011df1
 8011e20:	08011e75 	.word	0x08011e75
 8011e24:	08011df1 	.word	0x08011df1
 8011e28:	08011df1 	.word	0x08011df1
 8011e2c:	08011df1 	.word	0x08011df1
 8011e30:	08011df1 	.word	0x08011df1
 8011e34:	08011f75 	.word	0x08011f75
 8011e38:	08011e9f 	.word	0x08011e9f
 8011e3c:	08011f2f 	.word	0x08011f2f
 8011e40:	08011df1 	.word	0x08011df1
 8011e44:	08011df1 	.word	0x08011df1
 8011e48:	08011f97 	.word	0x08011f97
 8011e4c:	08011df1 	.word	0x08011df1
 8011e50:	08011e9f 	.word	0x08011e9f
 8011e54:	08011df1 	.word	0x08011df1
 8011e58:	08011df1 	.word	0x08011df1
 8011e5c:	08011f37 	.word	0x08011f37
 8011e60:	6833      	ldr	r3, [r6, #0]
 8011e62:	1d1a      	adds	r2, r3, #4
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	6032      	str	r2, [r6, #0]
 8011e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011e70:	2301      	movs	r3, #1
 8011e72:	e09d      	b.n	8011fb0 <_printf_i+0x1e8>
 8011e74:	6833      	ldr	r3, [r6, #0]
 8011e76:	6820      	ldr	r0, [r4, #0]
 8011e78:	1d19      	adds	r1, r3, #4
 8011e7a:	6031      	str	r1, [r6, #0]
 8011e7c:	0606      	lsls	r6, r0, #24
 8011e7e:	d501      	bpl.n	8011e84 <_printf_i+0xbc>
 8011e80:	681d      	ldr	r5, [r3, #0]
 8011e82:	e003      	b.n	8011e8c <_printf_i+0xc4>
 8011e84:	0645      	lsls	r5, r0, #25
 8011e86:	d5fb      	bpl.n	8011e80 <_printf_i+0xb8>
 8011e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011e8c:	2d00      	cmp	r5, #0
 8011e8e:	da03      	bge.n	8011e98 <_printf_i+0xd0>
 8011e90:	232d      	movs	r3, #45	@ 0x2d
 8011e92:	426d      	negs	r5, r5
 8011e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e98:	4859      	ldr	r0, [pc, #356]	@ (8012000 <_printf_i+0x238>)
 8011e9a:	230a      	movs	r3, #10
 8011e9c:	e011      	b.n	8011ec2 <_printf_i+0xfa>
 8011e9e:	6821      	ldr	r1, [r4, #0]
 8011ea0:	6833      	ldr	r3, [r6, #0]
 8011ea2:	0608      	lsls	r0, r1, #24
 8011ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8011ea8:	d402      	bmi.n	8011eb0 <_printf_i+0xe8>
 8011eaa:	0649      	lsls	r1, r1, #25
 8011eac:	bf48      	it	mi
 8011eae:	b2ad      	uxthmi	r5, r5
 8011eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8011eb2:	4853      	ldr	r0, [pc, #332]	@ (8012000 <_printf_i+0x238>)
 8011eb4:	6033      	str	r3, [r6, #0]
 8011eb6:	bf14      	ite	ne
 8011eb8:	230a      	movne	r3, #10
 8011eba:	2308      	moveq	r3, #8
 8011ebc:	2100      	movs	r1, #0
 8011ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011ec2:	6866      	ldr	r6, [r4, #4]
 8011ec4:	60a6      	str	r6, [r4, #8]
 8011ec6:	2e00      	cmp	r6, #0
 8011ec8:	bfa2      	ittt	ge
 8011eca:	6821      	ldrge	r1, [r4, #0]
 8011ecc:	f021 0104 	bicge.w	r1, r1, #4
 8011ed0:	6021      	strge	r1, [r4, #0]
 8011ed2:	b90d      	cbnz	r5, 8011ed8 <_printf_i+0x110>
 8011ed4:	2e00      	cmp	r6, #0
 8011ed6:	d04b      	beq.n	8011f70 <_printf_i+0x1a8>
 8011ed8:	4616      	mov	r6, r2
 8011eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8011ede:	fb03 5711 	mls	r7, r3, r1, r5
 8011ee2:	5dc7      	ldrb	r7, [r0, r7]
 8011ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ee8:	462f      	mov	r7, r5
 8011eea:	42bb      	cmp	r3, r7
 8011eec:	460d      	mov	r5, r1
 8011eee:	d9f4      	bls.n	8011eda <_printf_i+0x112>
 8011ef0:	2b08      	cmp	r3, #8
 8011ef2:	d10b      	bne.n	8011f0c <_printf_i+0x144>
 8011ef4:	6823      	ldr	r3, [r4, #0]
 8011ef6:	07df      	lsls	r7, r3, #31
 8011ef8:	d508      	bpl.n	8011f0c <_printf_i+0x144>
 8011efa:	6923      	ldr	r3, [r4, #16]
 8011efc:	6861      	ldr	r1, [r4, #4]
 8011efe:	4299      	cmp	r1, r3
 8011f00:	bfde      	ittt	le
 8011f02:	2330      	movle	r3, #48	@ 0x30
 8011f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f0c:	1b92      	subs	r2, r2, r6
 8011f0e:	6122      	str	r2, [r4, #16]
 8011f10:	f8cd a000 	str.w	sl, [sp]
 8011f14:	464b      	mov	r3, r9
 8011f16:	aa03      	add	r2, sp, #12
 8011f18:	4621      	mov	r1, r4
 8011f1a:	4640      	mov	r0, r8
 8011f1c:	f7ff fee6 	bl	8011cec <_printf_common>
 8011f20:	3001      	adds	r0, #1
 8011f22:	d14a      	bne.n	8011fba <_printf_i+0x1f2>
 8011f24:	f04f 30ff 	mov.w	r0, #4294967295
 8011f28:	b004      	add	sp, #16
 8011f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	f043 0320 	orr.w	r3, r3, #32
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	4833      	ldr	r0, [pc, #204]	@ (8012004 <_printf_i+0x23c>)
 8011f38:	2778      	movs	r7, #120	@ 0x78
 8011f3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	6831      	ldr	r1, [r6, #0]
 8011f42:	061f      	lsls	r7, r3, #24
 8011f44:	f851 5b04 	ldr.w	r5, [r1], #4
 8011f48:	d402      	bmi.n	8011f50 <_printf_i+0x188>
 8011f4a:	065f      	lsls	r7, r3, #25
 8011f4c:	bf48      	it	mi
 8011f4e:	b2ad      	uxthmi	r5, r5
 8011f50:	6031      	str	r1, [r6, #0]
 8011f52:	07d9      	lsls	r1, r3, #31
 8011f54:	bf44      	itt	mi
 8011f56:	f043 0320 	orrmi.w	r3, r3, #32
 8011f5a:	6023      	strmi	r3, [r4, #0]
 8011f5c:	b11d      	cbz	r5, 8011f66 <_printf_i+0x19e>
 8011f5e:	2310      	movs	r3, #16
 8011f60:	e7ac      	b.n	8011ebc <_printf_i+0xf4>
 8011f62:	4827      	ldr	r0, [pc, #156]	@ (8012000 <_printf_i+0x238>)
 8011f64:	e7e9      	b.n	8011f3a <_printf_i+0x172>
 8011f66:	6823      	ldr	r3, [r4, #0]
 8011f68:	f023 0320 	bic.w	r3, r3, #32
 8011f6c:	6023      	str	r3, [r4, #0]
 8011f6e:	e7f6      	b.n	8011f5e <_printf_i+0x196>
 8011f70:	4616      	mov	r6, r2
 8011f72:	e7bd      	b.n	8011ef0 <_printf_i+0x128>
 8011f74:	6833      	ldr	r3, [r6, #0]
 8011f76:	6825      	ldr	r5, [r4, #0]
 8011f78:	6961      	ldr	r1, [r4, #20]
 8011f7a:	1d18      	adds	r0, r3, #4
 8011f7c:	6030      	str	r0, [r6, #0]
 8011f7e:	062e      	lsls	r6, r5, #24
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	d501      	bpl.n	8011f88 <_printf_i+0x1c0>
 8011f84:	6019      	str	r1, [r3, #0]
 8011f86:	e002      	b.n	8011f8e <_printf_i+0x1c6>
 8011f88:	0668      	lsls	r0, r5, #25
 8011f8a:	d5fb      	bpl.n	8011f84 <_printf_i+0x1bc>
 8011f8c:	8019      	strh	r1, [r3, #0]
 8011f8e:	2300      	movs	r3, #0
 8011f90:	6123      	str	r3, [r4, #16]
 8011f92:	4616      	mov	r6, r2
 8011f94:	e7bc      	b.n	8011f10 <_printf_i+0x148>
 8011f96:	6833      	ldr	r3, [r6, #0]
 8011f98:	1d1a      	adds	r2, r3, #4
 8011f9a:	6032      	str	r2, [r6, #0]
 8011f9c:	681e      	ldr	r6, [r3, #0]
 8011f9e:	6862      	ldr	r2, [r4, #4]
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f7ee f92c 	bl	8000200 <memchr>
 8011fa8:	b108      	cbz	r0, 8011fae <_printf_i+0x1e6>
 8011faa:	1b80      	subs	r0, r0, r6
 8011fac:	6060      	str	r0, [r4, #4]
 8011fae:	6863      	ldr	r3, [r4, #4]
 8011fb0:	6123      	str	r3, [r4, #16]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fb8:	e7aa      	b.n	8011f10 <_printf_i+0x148>
 8011fba:	6923      	ldr	r3, [r4, #16]
 8011fbc:	4632      	mov	r2, r6
 8011fbe:	4649      	mov	r1, r9
 8011fc0:	4640      	mov	r0, r8
 8011fc2:	47d0      	blx	sl
 8011fc4:	3001      	adds	r0, #1
 8011fc6:	d0ad      	beq.n	8011f24 <_printf_i+0x15c>
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	079b      	lsls	r3, r3, #30
 8011fcc:	d413      	bmi.n	8011ff6 <_printf_i+0x22e>
 8011fce:	68e0      	ldr	r0, [r4, #12]
 8011fd0:	9b03      	ldr	r3, [sp, #12]
 8011fd2:	4298      	cmp	r0, r3
 8011fd4:	bfb8      	it	lt
 8011fd6:	4618      	movlt	r0, r3
 8011fd8:	e7a6      	b.n	8011f28 <_printf_i+0x160>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	4632      	mov	r2, r6
 8011fde:	4649      	mov	r1, r9
 8011fe0:	4640      	mov	r0, r8
 8011fe2:	47d0      	blx	sl
 8011fe4:	3001      	adds	r0, #1
 8011fe6:	d09d      	beq.n	8011f24 <_printf_i+0x15c>
 8011fe8:	3501      	adds	r5, #1
 8011fea:	68e3      	ldr	r3, [r4, #12]
 8011fec:	9903      	ldr	r1, [sp, #12]
 8011fee:	1a5b      	subs	r3, r3, r1
 8011ff0:	42ab      	cmp	r3, r5
 8011ff2:	dcf2      	bgt.n	8011fda <_printf_i+0x212>
 8011ff4:	e7eb      	b.n	8011fce <_printf_i+0x206>
 8011ff6:	2500      	movs	r5, #0
 8011ff8:	f104 0619 	add.w	r6, r4, #25
 8011ffc:	e7f5      	b.n	8011fea <_printf_i+0x222>
 8011ffe:	bf00      	nop
 8012000:	08013ffa 	.word	0x08013ffa
 8012004:	0801400b 	.word	0x0801400b

08012008 <_scanf_chars>:
 8012008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801200c:	4615      	mov	r5, r2
 801200e:	688a      	ldr	r2, [r1, #8]
 8012010:	4680      	mov	r8, r0
 8012012:	460c      	mov	r4, r1
 8012014:	b932      	cbnz	r2, 8012024 <_scanf_chars+0x1c>
 8012016:	698a      	ldr	r2, [r1, #24]
 8012018:	2a00      	cmp	r2, #0
 801201a:	bf14      	ite	ne
 801201c:	f04f 32ff 	movne.w	r2, #4294967295
 8012020:	2201      	moveq	r2, #1
 8012022:	608a      	str	r2, [r1, #8]
 8012024:	6822      	ldr	r2, [r4, #0]
 8012026:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80120b8 <_scanf_chars+0xb0>
 801202a:	06d1      	lsls	r1, r2, #27
 801202c:	bf5f      	itttt	pl
 801202e:	681a      	ldrpl	r2, [r3, #0]
 8012030:	1d11      	addpl	r1, r2, #4
 8012032:	6019      	strpl	r1, [r3, #0]
 8012034:	6816      	ldrpl	r6, [r2, #0]
 8012036:	2700      	movs	r7, #0
 8012038:	69a0      	ldr	r0, [r4, #24]
 801203a:	b188      	cbz	r0, 8012060 <_scanf_chars+0x58>
 801203c:	2801      	cmp	r0, #1
 801203e:	d107      	bne.n	8012050 <_scanf_chars+0x48>
 8012040:	682b      	ldr	r3, [r5, #0]
 8012042:	781a      	ldrb	r2, [r3, #0]
 8012044:	6963      	ldr	r3, [r4, #20]
 8012046:	5c9b      	ldrb	r3, [r3, r2]
 8012048:	b953      	cbnz	r3, 8012060 <_scanf_chars+0x58>
 801204a:	2f00      	cmp	r7, #0
 801204c:	d031      	beq.n	80120b2 <_scanf_chars+0xaa>
 801204e:	e022      	b.n	8012096 <_scanf_chars+0x8e>
 8012050:	2802      	cmp	r0, #2
 8012052:	d120      	bne.n	8012096 <_scanf_chars+0x8e>
 8012054:	682b      	ldr	r3, [r5, #0]
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	f819 3003 	ldrb.w	r3, [r9, r3]
 801205c:	071b      	lsls	r3, r3, #28
 801205e:	d41a      	bmi.n	8012096 <_scanf_chars+0x8e>
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	06da      	lsls	r2, r3, #27
 8012064:	bf5e      	ittt	pl
 8012066:	682b      	ldrpl	r3, [r5, #0]
 8012068:	781b      	ldrbpl	r3, [r3, #0]
 801206a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801206e:	682a      	ldr	r2, [r5, #0]
 8012070:	686b      	ldr	r3, [r5, #4]
 8012072:	3201      	adds	r2, #1
 8012074:	602a      	str	r2, [r5, #0]
 8012076:	68a2      	ldr	r2, [r4, #8]
 8012078:	3b01      	subs	r3, #1
 801207a:	3a01      	subs	r2, #1
 801207c:	606b      	str	r3, [r5, #4]
 801207e:	3701      	adds	r7, #1
 8012080:	60a2      	str	r2, [r4, #8]
 8012082:	b142      	cbz	r2, 8012096 <_scanf_chars+0x8e>
 8012084:	2b00      	cmp	r3, #0
 8012086:	dcd7      	bgt.n	8012038 <_scanf_chars+0x30>
 8012088:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801208c:	4629      	mov	r1, r5
 801208e:	4640      	mov	r0, r8
 8012090:	4798      	blx	r3
 8012092:	2800      	cmp	r0, #0
 8012094:	d0d0      	beq.n	8012038 <_scanf_chars+0x30>
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	f013 0310 	ands.w	r3, r3, #16
 801209c:	d105      	bne.n	80120aa <_scanf_chars+0xa2>
 801209e:	68e2      	ldr	r2, [r4, #12]
 80120a0:	3201      	adds	r2, #1
 80120a2:	60e2      	str	r2, [r4, #12]
 80120a4:	69a2      	ldr	r2, [r4, #24]
 80120a6:	b102      	cbz	r2, 80120aa <_scanf_chars+0xa2>
 80120a8:	7033      	strb	r3, [r6, #0]
 80120aa:	6923      	ldr	r3, [r4, #16]
 80120ac:	443b      	add	r3, r7
 80120ae:	6123      	str	r3, [r4, #16]
 80120b0:	2000      	movs	r0, #0
 80120b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120b6:	bf00      	nop
 80120b8:	08013ee9 	.word	0x08013ee9

080120bc <_scanf_i>:
 80120bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c0:	4698      	mov	r8, r3
 80120c2:	4b74      	ldr	r3, [pc, #464]	@ (8012294 <_scanf_i+0x1d8>)
 80120c4:	460c      	mov	r4, r1
 80120c6:	4682      	mov	sl, r0
 80120c8:	4616      	mov	r6, r2
 80120ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80120ce:	b087      	sub	sp, #28
 80120d0:	ab03      	add	r3, sp, #12
 80120d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80120d6:	4b70      	ldr	r3, [pc, #448]	@ (8012298 <_scanf_i+0x1dc>)
 80120d8:	69a1      	ldr	r1, [r4, #24]
 80120da:	4a70      	ldr	r2, [pc, #448]	@ (801229c <_scanf_i+0x1e0>)
 80120dc:	2903      	cmp	r1, #3
 80120de:	bf08      	it	eq
 80120e0:	461a      	moveq	r2, r3
 80120e2:	68a3      	ldr	r3, [r4, #8]
 80120e4:	9201      	str	r2, [sp, #4]
 80120e6:	1e5a      	subs	r2, r3, #1
 80120e8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80120ec:	bf88      	it	hi
 80120ee:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80120f2:	4627      	mov	r7, r4
 80120f4:	bf82      	ittt	hi
 80120f6:	eb03 0905 	addhi.w	r9, r3, r5
 80120fa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80120fe:	60a3      	strhi	r3, [r4, #8]
 8012100:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012104:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012108:	bf98      	it	ls
 801210a:	f04f 0900 	movls.w	r9, #0
 801210e:	6023      	str	r3, [r4, #0]
 8012110:	463d      	mov	r5, r7
 8012112:	f04f 0b00 	mov.w	fp, #0
 8012116:	6831      	ldr	r1, [r6, #0]
 8012118:	ab03      	add	r3, sp, #12
 801211a:	7809      	ldrb	r1, [r1, #0]
 801211c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012120:	2202      	movs	r2, #2
 8012122:	f7ee f86d 	bl	8000200 <memchr>
 8012126:	b328      	cbz	r0, 8012174 <_scanf_i+0xb8>
 8012128:	f1bb 0f01 	cmp.w	fp, #1
 801212c:	d159      	bne.n	80121e2 <_scanf_i+0x126>
 801212e:	6862      	ldr	r2, [r4, #4]
 8012130:	b92a      	cbnz	r2, 801213e <_scanf_i+0x82>
 8012132:	6822      	ldr	r2, [r4, #0]
 8012134:	2108      	movs	r1, #8
 8012136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801213a:	6061      	str	r1, [r4, #4]
 801213c:	6022      	str	r2, [r4, #0]
 801213e:	6822      	ldr	r2, [r4, #0]
 8012140:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012144:	6022      	str	r2, [r4, #0]
 8012146:	68a2      	ldr	r2, [r4, #8]
 8012148:	1e51      	subs	r1, r2, #1
 801214a:	60a1      	str	r1, [r4, #8]
 801214c:	b192      	cbz	r2, 8012174 <_scanf_i+0xb8>
 801214e:	6832      	ldr	r2, [r6, #0]
 8012150:	1c51      	adds	r1, r2, #1
 8012152:	6031      	str	r1, [r6, #0]
 8012154:	7812      	ldrb	r2, [r2, #0]
 8012156:	f805 2b01 	strb.w	r2, [r5], #1
 801215a:	6872      	ldr	r2, [r6, #4]
 801215c:	3a01      	subs	r2, #1
 801215e:	2a00      	cmp	r2, #0
 8012160:	6072      	str	r2, [r6, #4]
 8012162:	dc07      	bgt.n	8012174 <_scanf_i+0xb8>
 8012164:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012168:	4631      	mov	r1, r6
 801216a:	4650      	mov	r0, sl
 801216c:	4790      	blx	r2
 801216e:	2800      	cmp	r0, #0
 8012170:	f040 8085 	bne.w	801227e <_scanf_i+0x1c2>
 8012174:	f10b 0b01 	add.w	fp, fp, #1
 8012178:	f1bb 0f03 	cmp.w	fp, #3
 801217c:	d1cb      	bne.n	8012116 <_scanf_i+0x5a>
 801217e:	6863      	ldr	r3, [r4, #4]
 8012180:	b90b      	cbnz	r3, 8012186 <_scanf_i+0xca>
 8012182:	230a      	movs	r3, #10
 8012184:	6063      	str	r3, [r4, #4]
 8012186:	6863      	ldr	r3, [r4, #4]
 8012188:	4945      	ldr	r1, [pc, #276]	@ (80122a0 <_scanf_i+0x1e4>)
 801218a:	6960      	ldr	r0, [r4, #20]
 801218c:	1ac9      	subs	r1, r1, r3
 801218e:	f000 f997 	bl	80124c0 <__sccl>
 8012192:	f04f 0b00 	mov.w	fp, #0
 8012196:	68a3      	ldr	r3, [r4, #8]
 8012198:	6822      	ldr	r2, [r4, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d03d      	beq.n	801221a <_scanf_i+0x15e>
 801219e:	6831      	ldr	r1, [r6, #0]
 80121a0:	6960      	ldr	r0, [r4, #20]
 80121a2:	f891 c000 	ldrb.w	ip, [r1]
 80121a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d035      	beq.n	801221a <_scanf_i+0x15e>
 80121ae:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80121b2:	d124      	bne.n	80121fe <_scanf_i+0x142>
 80121b4:	0510      	lsls	r0, r2, #20
 80121b6:	d522      	bpl.n	80121fe <_scanf_i+0x142>
 80121b8:	f10b 0b01 	add.w	fp, fp, #1
 80121bc:	f1b9 0f00 	cmp.w	r9, #0
 80121c0:	d003      	beq.n	80121ca <_scanf_i+0x10e>
 80121c2:	3301      	adds	r3, #1
 80121c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80121c8:	60a3      	str	r3, [r4, #8]
 80121ca:	6873      	ldr	r3, [r6, #4]
 80121cc:	3b01      	subs	r3, #1
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	6073      	str	r3, [r6, #4]
 80121d2:	dd1b      	ble.n	801220c <_scanf_i+0x150>
 80121d4:	6833      	ldr	r3, [r6, #0]
 80121d6:	3301      	adds	r3, #1
 80121d8:	6033      	str	r3, [r6, #0]
 80121da:	68a3      	ldr	r3, [r4, #8]
 80121dc:	3b01      	subs	r3, #1
 80121de:	60a3      	str	r3, [r4, #8]
 80121e0:	e7d9      	b.n	8012196 <_scanf_i+0xda>
 80121e2:	f1bb 0f02 	cmp.w	fp, #2
 80121e6:	d1ae      	bne.n	8012146 <_scanf_i+0x8a>
 80121e8:	6822      	ldr	r2, [r4, #0]
 80121ea:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80121ee:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80121f2:	d1bf      	bne.n	8012174 <_scanf_i+0xb8>
 80121f4:	2110      	movs	r1, #16
 80121f6:	6061      	str	r1, [r4, #4]
 80121f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80121fc:	e7a2      	b.n	8012144 <_scanf_i+0x88>
 80121fe:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012202:	6022      	str	r2, [r4, #0]
 8012204:	780b      	ldrb	r3, [r1, #0]
 8012206:	f805 3b01 	strb.w	r3, [r5], #1
 801220a:	e7de      	b.n	80121ca <_scanf_i+0x10e>
 801220c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012210:	4631      	mov	r1, r6
 8012212:	4650      	mov	r0, sl
 8012214:	4798      	blx	r3
 8012216:	2800      	cmp	r0, #0
 8012218:	d0df      	beq.n	80121da <_scanf_i+0x11e>
 801221a:	6823      	ldr	r3, [r4, #0]
 801221c:	05d9      	lsls	r1, r3, #23
 801221e:	d50d      	bpl.n	801223c <_scanf_i+0x180>
 8012220:	42bd      	cmp	r5, r7
 8012222:	d909      	bls.n	8012238 <_scanf_i+0x17c>
 8012224:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012228:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801222c:	4632      	mov	r2, r6
 801222e:	4650      	mov	r0, sl
 8012230:	4798      	blx	r3
 8012232:	f105 39ff 	add.w	r9, r5, #4294967295
 8012236:	464d      	mov	r5, r9
 8012238:	42bd      	cmp	r5, r7
 801223a:	d028      	beq.n	801228e <_scanf_i+0x1d2>
 801223c:	6822      	ldr	r2, [r4, #0]
 801223e:	f012 0210 	ands.w	r2, r2, #16
 8012242:	d113      	bne.n	801226c <_scanf_i+0x1b0>
 8012244:	702a      	strb	r2, [r5, #0]
 8012246:	6863      	ldr	r3, [r4, #4]
 8012248:	9e01      	ldr	r6, [sp, #4]
 801224a:	4639      	mov	r1, r7
 801224c:	4650      	mov	r0, sl
 801224e:	47b0      	blx	r6
 8012250:	f8d8 3000 	ldr.w	r3, [r8]
 8012254:	6821      	ldr	r1, [r4, #0]
 8012256:	1d1a      	adds	r2, r3, #4
 8012258:	f8c8 2000 	str.w	r2, [r8]
 801225c:	f011 0f20 	tst.w	r1, #32
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	d00f      	beq.n	8012284 <_scanf_i+0x1c8>
 8012264:	6018      	str	r0, [r3, #0]
 8012266:	68e3      	ldr	r3, [r4, #12]
 8012268:	3301      	adds	r3, #1
 801226a:	60e3      	str	r3, [r4, #12]
 801226c:	6923      	ldr	r3, [r4, #16]
 801226e:	1bed      	subs	r5, r5, r7
 8012270:	445d      	add	r5, fp
 8012272:	442b      	add	r3, r5
 8012274:	6123      	str	r3, [r4, #16]
 8012276:	2000      	movs	r0, #0
 8012278:	b007      	add	sp, #28
 801227a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801227e:	f04f 0b00 	mov.w	fp, #0
 8012282:	e7ca      	b.n	801221a <_scanf_i+0x15e>
 8012284:	07ca      	lsls	r2, r1, #31
 8012286:	bf4c      	ite	mi
 8012288:	8018      	strhmi	r0, [r3, #0]
 801228a:	6018      	strpl	r0, [r3, #0]
 801228c:	e7eb      	b.n	8012266 <_scanf_i+0x1aa>
 801228e:	2001      	movs	r0, #1
 8012290:	e7f2      	b.n	8012278 <_scanf_i+0x1bc>
 8012292:	bf00      	nop
 8012294:	08013d2c 	.word	0x08013d2c
 8012298:	080116a1 	.word	0x080116a1
 801229c:	08013765 	.word	0x08013765
 80122a0:	0801402c 	.word	0x0801402c

080122a4 <__sflush_r>:
 80122a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ac:	0716      	lsls	r6, r2, #28
 80122ae:	4605      	mov	r5, r0
 80122b0:	460c      	mov	r4, r1
 80122b2:	d454      	bmi.n	801235e <__sflush_r+0xba>
 80122b4:	684b      	ldr	r3, [r1, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	dc02      	bgt.n	80122c0 <__sflush_r+0x1c>
 80122ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dd48      	ble.n	8012352 <__sflush_r+0xae>
 80122c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122c2:	2e00      	cmp	r6, #0
 80122c4:	d045      	beq.n	8012352 <__sflush_r+0xae>
 80122c6:	2300      	movs	r3, #0
 80122c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80122cc:	682f      	ldr	r7, [r5, #0]
 80122ce:	6a21      	ldr	r1, [r4, #32]
 80122d0:	602b      	str	r3, [r5, #0]
 80122d2:	d030      	beq.n	8012336 <__sflush_r+0x92>
 80122d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80122d6:	89a3      	ldrh	r3, [r4, #12]
 80122d8:	0759      	lsls	r1, r3, #29
 80122da:	d505      	bpl.n	80122e8 <__sflush_r+0x44>
 80122dc:	6863      	ldr	r3, [r4, #4]
 80122de:	1ad2      	subs	r2, r2, r3
 80122e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80122e2:	b10b      	cbz	r3, 80122e8 <__sflush_r+0x44>
 80122e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122e6:	1ad2      	subs	r2, r2, r3
 80122e8:	2300      	movs	r3, #0
 80122ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122ec:	6a21      	ldr	r1, [r4, #32]
 80122ee:	4628      	mov	r0, r5
 80122f0:	47b0      	blx	r6
 80122f2:	1c43      	adds	r3, r0, #1
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	d106      	bne.n	8012306 <__sflush_r+0x62>
 80122f8:	6829      	ldr	r1, [r5, #0]
 80122fa:	291d      	cmp	r1, #29
 80122fc:	d82b      	bhi.n	8012356 <__sflush_r+0xb2>
 80122fe:	4a2a      	ldr	r2, [pc, #168]	@ (80123a8 <__sflush_r+0x104>)
 8012300:	410a      	asrs	r2, r1
 8012302:	07d6      	lsls	r6, r2, #31
 8012304:	d427      	bmi.n	8012356 <__sflush_r+0xb2>
 8012306:	2200      	movs	r2, #0
 8012308:	6062      	str	r2, [r4, #4]
 801230a:	04d9      	lsls	r1, r3, #19
 801230c:	6922      	ldr	r2, [r4, #16]
 801230e:	6022      	str	r2, [r4, #0]
 8012310:	d504      	bpl.n	801231c <__sflush_r+0x78>
 8012312:	1c42      	adds	r2, r0, #1
 8012314:	d101      	bne.n	801231a <__sflush_r+0x76>
 8012316:	682b      	ldr	r3, [r5, #0]
 8012318:	b903      	cbnz	r3, 801231c <__sflush_r+0x78>
 801231a:	6560      	str	r0, [r4, #84]	@ 0x54
 801231c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801231e:	602f      	str	r7, [r5, #0]
 8012320:	b1b9      	cbz	r1, 8012352 <__sflush_r+0xae>
 8012322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012326:	4299      	cmp	r1, r3
 8012328:	d002      	beq.n	8012330 <__sflush_r+0x8c>
 801232a:	4628      	mov	r0, r5
 801232c:	f7fe faec 	bl	8010908 <_free_r>
 8012330:	2300      	movs	r3, #0
 8012332:	6363      	str	r3, [r4, #52]	@ 0x34
 8012334:	e00d      	b.n	8012352 <__sflush_r+0xae>
 8012336:	2301      	movs	r3, #1
 8012338:	4628      	mov	r0, r5
 801233a:	47b0      	blx	r6
 801233c:	4602      	mov	r2, r0
 801233e:	1c50      	adds	r0, r2, #1
 8012340:	d1c9      	bne.n	80122d6 <__sflush_r+0x32>
 8012342:	682b      	ldr	r3, [r5, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d0c6      	beq.n	80122d6 <__sflush_r+0x32>
 8012348:	2b1d      	cmp	r3, #29
 801234a:	d001      	beq.n	8012350 <__sflush_r+0xac>
 801234c:	2b16      	cmp	r3, #22
 801234e:	d11e      	bne.n	801238e <__sflush_r+0xea>
 8012350:	602f      	str	r7, [r5, #0]
 8012352:	2000      	movs	r0, #0
 8012354:	e022      	b.n	801239c <__sflush_r+0xf8>
 8012356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801235a:	b21b      	sxth	r3, r3
 801235c:	e01b      	b.n	8012396 <__sflush_r+0xf2>
 801235e:	690f      	ldr	r7, [r1, #16]
 8012360:	2f00      	cmp	r7, #0
 8012362:	d0f6      	beq.n	8012352 <__sflush_r+0xae>
 8012364:	0793      	lsls	r3, r2, #30
 8012366:	680e      	ldr	r6, [r1, #0]
 8012368:	bf08      	it	eq
 801236a:	694b      	ldreq	r3, [r1, #20]
 801236c:	600f      	str	r7, [r1, #0]
 801236e:	bf18      	it	ne
 8012370:	2300      	movne	r3, #0
 8012372:	eba6 0807 	sub.w	r8, r6, r7
 8012376:	608b      	str	r3, [r1, #8]
 8012378:	f1b8 0f00 	cmp.w	r8, #0
 801237c:	dde9      	ble.n	8012352 <__sflush_r+0xae>
 801237e:	6a21      	ldr	r1, [r4, #32]
 8012380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012382:	4643      	mov	r3, r8
 8012384:	463a      	mov	r2, r7
 8012386:	4628      	mov	r0, r5
 8012388:	47b0      	blx	r6
 801238a:	2800      	cmp	r0, #0
 801238c:	dc08      	bgt.n	80123a0 <__sflush_r+0xfc>
 801238e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012396:	81a3      	strh	r3, [r4, #12]
 8012398:	f04f 30ff 	mov.w	r0, #4294967295
 801239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123a0:	4407      	add	r7, r0
 80123a2:	eba8 0800 	sub.w	r8, r8, r0
 80123a6:	e7e7      	b.n	8012378 <__sflush_r+0xd4>
 80123a8:	dfbffffe 	.word	0xdfbffffe

080123ac <_fflush_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	690b      	ldr	r3, [r1, #16]
 80123b0:	4605      	mov	r5, r0
 80123b2:	460c      	mov	r4, r1
 80123b4:	b913      	cbnz	r3, 80123bc <_fflush_r+0x10>
 80123b6:	2500      	movs	r5, #0
 80123b8:	4628      	mov	r0, r5
 80123ba:	bd38      	pop	{r3, r4, r5, pc}
 80123bc:	b118      	cbz	r0, 80123c6 <_fflush_r+0x1a>
 80123be:	6a03      	ldr	r3, [r0, #32]
 80123c0:	b90b      	cbnz	r3, 80123c6 <_fflush_r+0x1a>
 80123c2:	f7fe f837 	bl	8010434 <__sinit>
 80123c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d0f3      	beq.n	80123b6 <_fflush_r+0xa>
 80123ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80123d0:	07d0      	lsls	r0, r2, #31
 80123d2:	d404      	bmi.n	80123de <_fflush_r+0x32>
 80123d4:	0599      	lsls	r1, r3, #22
 80123d6:	d402      	bmi.n	80123de <_fflush_r+0x32>
 80123d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123da:	f7fe fa7e 	bl	80108da <__retarget_lock_acquire_recursive>
 80123de:	4628      	mov	r0, r5
 80123e0:	4621      	mov	r1, r4
 80123e2:	f7ff ff5f 	bl	80122a4 <__sflush_r>
 80123e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123e8:	07da      	lsls	r2, r3, #31
 80123ea:	4605      	mov	r5, r0
 80123ec:	d4e4      	bmi.n	80123b8 <_fflush_r+0xc>
 80123ee:	89a3      	ldrh	r3, [r4, #12]
 80123f0:	059b      	lsls	r3, r3, #22
 80123f2:	d4e1      	bmi.n	80123b8 <_fflush_r+0xc>
 80123f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123f6:	f7fe fa71 	bl	80108dc <__retarget_lock_release_recursive>
 80123fa:	e7dd      	b.n	80123b8 <_fflush_r+0xc>

080123fc <__swhatbuf_r>:
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	460c      	mov	r4, r1
 8012400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012404:	2900      	cmp	r1, #0
 8012406:	b096      	sub	sp, #88	@ 0x58
 8012408:	4615      	mov	r5, r2
 801240a:	461e      	mov	r6, r3
 801240c:	da0d      	bge.n	801242a <__swhatbuf_r+0x2e>
 801240e:	89a3      	ldrh	r3, [r4, #12]
 8012410:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012414:	f04f 0100 	mov.w	r1, #0
 8012418:	bf14      	ite	ne
 801241a:	2340      	movne	r3, #64	@ 0x40
 801241c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012420:	2000      	movs	r0, #0
 8012422:	6031      	str	r1, [r6, #0]
 8012424:	602b      	str	r3, [r5, #0]
 8012426:	b016      	add	sp, #88	@ 0x58
 8012428:	bd70      	pop	{r4, r5, r6, pc}
 801242a:	466a      	mov	r2, sp
 801242c:	f000 f8d6 	bl	80125dc <_fstat_r>
 8012430:	2800      	cmp	r0, #0
 8012432:	dbec      	blt.n	801240e <__swhatbuf_r+0x12>
 8012434:	9901      	ldr	r1, [sp, #4]
 8012436:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801243a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801243e:	4259      	negs	r1, r3
 8012440:	4159      	adcs	r1, r3
 8012442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012446:	e7eb      	b.n	8012420 <__swhatbuf_r+0x24>

08012448 <__smakebuf_r>:
 8012448:	898b      	ldrh	r3, [r1, #12]
 801244a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801244c:	079d      	lsls	r5, r3, #30
 801244e:	4606      	mov	r6, r0
 8012450:	460c      	mov	r4, r1
 8012452:	d507      	bpl.n	8012464 <__smakebuf_r+0x1c>
 8012454:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012458:	6023      	str	r3, [r4, #0]
 801245a:	6123      	str	r3, [r4, #16]
 801245c:	2301      	movs	r3, #1
 801245e:	6163      	str	r3, [r4, #20]
 8012460:	b003      	add	sp, #12
 8012462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012464:	ab01      	add	r3, sp, #4
 8012466:	466a      	mov	r2, sp
 8012468:	f7ff ffc8 	bl	80123fc <__swhatbuf_r>
 801246c:	9f00      	ldr	r7, [sp, #0]
 801246e:	4605      	mov	r5, r0
 8012470:	4639      	mov	r1, r7
 8012472:	4630      	mov	r0, r6
 8012474:	f7fd fcb2 	bl	800fddc <_malloc_r>
 8012478:	b948      	cbnz	r0, 801248e <__smakebuf_r+0x46>
 801247a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801247e:	059a      	lsls	r2, r3, #22
 8012480:	d4ee      	bmi.n	8012460 <__smakebuf_r+0x18>
 8012482:	f023 0303 	bic.w	r3, r3, #3
 8012486:	f043 0302 	orr.w	r3, r3, #2
 801248a:	81a3      	strh	r3, [r4, #12]
 801248c:	e7e2      	b.n	8012454 <__smakebuf_r+0xc>
 801248e:	89a3      	ldrh	r3, [r4, #12]
 8012490:	6020      	str	r0, [r4, #0]
 8012492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012496:	81a3      	strh	r3, [r4, #12]
 8012498:	9b01      	ldr	r3, [sp, #4]
 801249a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801249e:	b15b      	cbz	r3, 80124b8 <__smakebuf_r+0x70>
 80124a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124a4:	4630      	mov	r0, r6
 80124a6:	f000 f8ab 	bl	8012600 <_isatty_r>
 80124aa:	b128      	cbz	r0, 80124b8 <__smakebuf_r+0x70>
 80124ac:	89a3      	ldrh	r3, [r4, #12]
 80124ae:	f023 0303 	bic.w	r3, r3, #3
 80124b2:	f043 0301 	orr.w	r3, r3, #1
 80124b6:	81a3      	strh	r3, [r4, #12]
 80124b8:	89a3      	ldrh	r3, [r4, #12]
 80124ba:	431d      	orrs	r5, r3
 80124bc:	81a5      	strh	r5, [r4, #12]
 80124be:	e7cf      	b.n	8012460 <__smakebuf_r+0x18>

080124c0 <__sccl>:
 80124c0:	b570      	push	{r4, r5, r6, lr}
 80124c2:	780b      	ldrb	r3, [r1, #0]
 80124c4:	4604      	mov	r4, r0
 80124c6:	2b5e      	cmp	r3, #94	@ 0x5e
 80124c8:	bf0b      	itete	eq
 80124ca:	784b      	ldrbeq	r3, [r1, #1]
 80124cc:	1c4a      	addne	r2, r1, #1
 80124ce:	1c8a      	addeq	r2, r1, #2
 80124d0:	2100      	movne	r1, #0
 80124d2:	bf08      	it	eq
 80124d4:	2101      	moveq	r1, #1
 80124d6:	3801      	subs	r0, #1
 80124d8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80124dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80124e0:	42a8      	cmp	r0, r5
 80124e2:	d1fb      	bne.n	80124dc <__sccl+0x1c>
 80124e4:	b90b      	cbnz	r3, 80124ea <__sccl+0x2a>
 80124e6:	1e50      	subs	r0, r2, #1
 80124e8:	bd70      	pop	{r4, r5, r6, pc}
 80124ea:	f081 0101 	eor.w	r1, r1, #1
 80124ee:	54e1      	strb	r1, [r4, r3]
 80124f0:	4610      	mov	r0, r2
 80124f2:	4602      	mov	r2, r0
 80124f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80124f8:	2d2d      	cmp	r5, #45	@ 0x2d
 80124fa:	d005      	beq.n	8012508 <__sccl+0x48>
 80124fc:	2d5d      	cmp	r5, #93	@ 0x5d
 80124fe:	d016      	beq.n	801252e <__sccl+0x6e>
 8012500:	2d00      	cmp	r5, #0
 8012502:	d0f1      	beq.n	80124e8 <__sccl+0x28>
 8012504:	462b      	mov	r3, r5
 8012506:	e7f2      	b.n	80124ee <__sccl+0x2e>
 8012508:	7846      	ldrb	r6, [r0, #1]
 801250a:	2e5d      	cmp	r6, #93	@ 0x5d
 801250c:	d0fa      	beq.n	8012504 <__sccl+0x44>
 801250e:	42b3      	cmp	r3, r6
 8012510:	dcf8      	bgt.n	8012504 <__sccl+0x44>
 8012512:	3002      	adds	r0, #2
 8012514:	461a      	mov	r2, r3
 8012516:	3201      	adds	r2, #1
 8012518:	4296      	cmp	r6, r2
 801251a:	54a1      	strb	r1, [r4, r2]
 801251c:	dcfb      	bgt.n	8012516 <__sccl+0x56>
 801251e:	1af2      	subs	r2, r6, r3
 8012520:	3a01      	subs	r2, #1
 8012522:	1c5d      	adds	r5, r3, #1
 8012524:	42b3      	cmp	r3, r6
 8012526:	bfa8      	it	ge
 8012528:	2200      	movge	r2, #0
 801252a:	18ab      	adds	r3, r5, r2
 801252c:	e7e1      	b.n	80124f2 <__sccl+0x32>
 801252e:	4610      	mov	r0, r2
 8012530:	e7da      	b.n	80124e8 <__sccl+0x28>

08012532 <__submore>:
 8012532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012536:	460c      	mov	r4, r1
 8012538:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801253a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801253e:	4299      	cmp	r1, r3
 8012540:	d11d      	bne.n	801257e <__submore+0x4c>
 8012542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012546:	f7fd fc49 	bl	800fddc <_malloc_r>
 801254a:	b918      	cbnz	r0, 8012554 <__submore+0x22>
 801254c:	f04f 30ff 	mov.w	r0, #4294967295
 8012550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012558:	63a3      	str	r3, [r4, #56]	@ 0x38
 801255a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801255e:	6360      	str	r0, [r4, #52]	@ 0x34
 8012560:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012564:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012568:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801256c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012570:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012574:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012578:	6020      	str	r0, [r4, #0]
 801257a:	2000      	movs	r0, #0
 801257c:	e7e8      	b.n	8012550 <__submore+0x1e>
 801257e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012580:	0077      	lsls	r7, r6, #1
 8012582:	463a      	mov	r2, r7
 8012584:	f001 f852 	bl	801362c <_realloc_r>
 8012588:	4605      	mov	r5, r0
 801258a:	2800      	cmp	r0, #0
 801258c:	d0de      	beq.n	801254c <__submore+0x1a>
 801258e:	eb00 0806 	add.w	r8, r0, r6
 8012592:	4601      	mov	r1, r0
 8012594:	4632      	mov	r2, r6
 8012596:	4640      	mov	r0, r8
 8012598:	f7fe f9a1 	bl	80108de <memcpy>
 801259c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80125a0:	f8c4 8000 	str.w	r8, [r4]
 80125a4:	e7e9      	b.n	801257a <__submore+0x48>

080125a6 <memmove>:
 80125a6:	4288      	cmp	r0, r1
 80125a8:	b510      	push	{r4, lr}
 80125aa:	eb01 0402 	add.w	r4, r1, r2
 80125ae:	d902      	bls.n	80125b6 <memmove+0x10>
 80125b0:	4284      	cmp	r4, r0
 80125b2:	4623      	mov	r3, r4
 80125b4:	d807      	bhi.n	80125c6 <memmove+0x20>
 80125b6:	1e43      	subs	r3, r0, #1
 80125b8:	42a1      	cmp	r1, r4
 80125ba:	d008      	beq.n	80125ce <memmove+0x28>
 80125bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125c4:	e7f8      	b.n	80125b8 <memmove+0x12>
 80125c6:	4402      	add	r2, r0
 80125c8:	4601      	mov	r1, r0
 80125ca:	428a      	cmp	r2, r1
 80125cc:	d100      	bne.n	80125d0 <memmove+0x2a>
 80125ce:	bd10      	pop	{r4, pc}
 80125d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125d8:	e7f7      	b.n	80125ca <memmove+0x24>
	...

080125dc <_fstat_r>:
 80125dc:	b538      	push	{r3, r4, r5, lr}
 80125de:	4d07      	ldr	r5, [pc, #28]	@ (80125fc <_fstat_r+0x20>)
 80125e0:	2300      	movs	r3, #0
 80125e2:	4604      	mov	r4, r0
 80125e4:	4608      	mov	r0, r1
 80125e6:	4611      	mov	r1, r2
 80125e8:	602b      	str	r3, [r5, #0]
 80125ea:	f7f1 ff51 	bl	8004490 <_fstat>
 80125ee:	1c43      	adds	r3, r0, #1
 80125f0:	d102      	bne.n	80125f8 <_fstat_r+0x1c>
 80125f2:	682b      	ldr	r3, [r5, #0]
 80125f4:	b103      	cbz	r3, 80125f8 <_fstat_r+0x1c>
 80125f6:	6023      	str	r3, [r4, #0]
 80125f8:	bd38      	pop	{r3, r4, r5, pc}
 80125fa:	bf00      	nop
 80125fc:	20003fc0 	.word	0x20003fc0

08012600 <_isatty_r>:
 8012600:	b538      	push	{r3, r4, r5, lr}
 8012602:	4d06      	ldr	r5, [pc, #24]	@ (801261c <_isatty_r+0x1c>)
 8012604:	2300      	movs	r3, #0
 8012606:	4604      	mov	r4, r0
 8012608:	4608      	mov	r0, r1
 801260a:	602b      	str	r3, [r5, #0]
 801260c:	f7f1 ff50 	bl	80044b0 <_isatty>
 8012610:	1c43      	adds	r3, r0, #1
 8012612:	d102      	bne.n	801261a <_isatty_r+0x1a>
 8012614:	682b      	ldr	r3, [r5, #0]
 8012616:	b103      	cbz	r3, 801261a <_isatty_r+0x1a>
 8012618:	6023      	str	r3, [r4, #0]
 801261a:	bd38      	pop	{r3, r4, r5, pc}
 801261c:	20003fc0 	.word	0x20003fc0

08012620 <nan>:
 8012620:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012628 <nan+0x8>
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop
 8012628:	00000000 	.word	0x00000000
 801262c:	7ff80000 	.word	0x7ff80000

08012630 <rshift>:
 8012630:	6903      	ldr	r3, [r0, #16]
 8012632:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012636:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801263a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801263e:	f100 0414 	add.w	r4, r0, #20
 8012642:	dd45      	ble.n	80126d0 <rshift+0xa0>
 8012644:	f011 011f 	ands.w	r1, r1, #31
 8012648:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801264c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012650:	d10c      	bne.n	801266c <rshift+0x3c>
 8012652:	f100 0710 	add.w	r7, r0, #16
 8012656:	4629      	mov	r1, r5
 8012658:	42b1      	cmp	r1, r6
 801265a:	d334      	bcc.n	80126c6 <rshift+0x96>
 801265c:	1a9b      	subs	r3, r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	1eea      	subs	r2, r5, #3
 8012662:	4296      	cmp	r6, r2
 8012664:	bf38      	it	cc
 8012666:	2300      	movcc	r3, #0
 8012668:	4423      	add	r3, r4
 801266a:	e015      	b.n	8012698 <rshift+0x68>
 801266c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012670:	f1c1 0820 	rsb	r8, r1, #32
 8012674:	40cf      	lsrs	r7, r1
 8012676:	f105 0e04 	add.w	lr, r5, #4
 801267a:	46a1      	mov	r9, r4
 801267c:	4576      	cmp	r6, lr
 801267e:	46f4      	mov	ip, lr
 8012680:	d815      	bhi.n	80126ae <rshift+0x7e>
 8012682:	1a9a      	subs	r2, r3, r2
 8012684:	0092      	lsls	r2, r2, #2
 8012686:	3a04      	subs	r2, #4
 8012688:	3501      	adds	r5, #1
 801268a:	42ae      	cmp	r6, r5
 801268c:	bf38      	it	cc
 801268e:	2200      	movcc	r2, #0
 8012690:	18a3      	adds	r3, r4, r2
 8012692:	50a7      	str	r7, [r4, r2]
 8012694:	b107      	cbz	r7, 8012698 <rshift+0x68>
 8012696:	3304      	adds	r3, #4
 8012698:	1b1a      	subs	r2, r3, r4
 801269a:	42a3      	cmp	r3, r4
 801269c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80126a0:	bf08      	it	eq
 80126a2:	2300      	moveq	r3, #0
 80126a4:	6102      	str	r2, [r0, #16]
 80126a6:	bf08      	it	eq
 80126a8:	6143      	streq	r3, [r0, #20]
 80126aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126ae:	f8dc c000 	ldr.w	ip, [ip]
 80126b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80126b6:	ea4c 0707 	orr.w	r7, ip, r7
 80126ba:	f849 7b04 	str.w	r7, [r9], #4
 80126be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80126c2:	40cf      	lsrs	r7, r1
 80126c4:	e7da      	b.n	801267c <rshift+0x4c>
 80126c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80126ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80126ce:	e7c3      	b.n	8012658 <rshift+0x28>
 80126d0:	4623      	mov	r3, r4
 80126d2:	e7e1      	b.n	8012698 <rshift+0x68>

080126d4 <__hexdig_fun>:
 80126d4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80126d8:	2b09      	cmp	r3, #9
 80126da:	d802      	bhi.n	80126e2 <__hexdig_fun+0xe>
 80126dc:	3820      	subs	r0, #32
 80126de:	b2c0      	uxtb	r0, r0
 80126e0:	4770      	bx	lr
 80126e2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80126e6:	2b05      	cmp	r3, #5
 80126e8:	d801      	bhi.n	80126ee <__hexdig_fun+0x1a>
 80126ea:	3847      	subs	r0, #71	@ 0x47
 80126ec:	e7f7      	b.n	80126de <__hexdig_fun+0xa>
 80126ee:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80126f2:	2b05      	cmp	r3, #5
 80126f4:	d801      	bhi.n	80126fa <__hexdig_fun+0x26>
 80126f6:	3827      	subs	r0, #39	@ 0x27
 80126f8:	e7f1      	b.n	80126de <__hexdig_fun+0xa>
 80126fa:	2000      	movs	r0, #0
 80126fc:	4770      	bx	lr
	...

08012700 <__gethex>:
 8012700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012704:	b085      	sub	sp, #20
 8012706:	468a      	mov	sl, r1
 8012708:	9302      	str	r3, [sp, #8]
 801270a:	680b      	ldr	r3, [r1, #0]
 801270c:	9001      	str	r0, [sp, #4]
 801270e:	4690      	mov	r8, r2
 8012710:	1c9c      	adds	r4, r3, #2
 8012712:	46a1      	mov	r9, r4
 8012714:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012718:	2830      	cmp	r0, #48	@ 0x30
 801271a:	d0fa      	beq.n	8012712 <__gethex+0x12>
 801271c:	eba9 0303 	sub.w	r3, r9, r3
 8012720:	f1a3 0b02 	sub.w	fp, r3, #2
 8012724:	f7ff ffd6 	bl	80126d4 <__hexdig_fun>
 8012728:	4605      	mov	r5, r0
 801272a:	2800      	cmp	r0, #0
 801272c:	d168      	bne.n	8012800 <__gethex+0x100>
 801272e:	49a0      	ldr	r1, [pc, #640]	@ (80129b0 <__gethex+0x2b0>)
 8012730:	2201      	movs	r2, #1
 8012732:	4648      	mov	r0, r9
 8012734:	f7fe f83e 	bl	80107b4 <strncmp>
 8012738:	4607      	mov	r7, r0
 801273a:	2800      	cmp	r0, #0
 801273c:	d167      	bne.n	801280e <__gethex+0x10e>
 801273e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012742:	4626      	mov	r6, r4
 8012744:	f7ff ffc6 	bl	80126d4 <__hexdig_fun>
 8012748:	2800      	cmp	r0, #0
 801274a:	d062      	beq.n	8012812 <__gethex+0x112>
 801274c:	4623      	mov	r3, r4
 801274e:	7818      	ldrb	r0, [r3, #0]
 8012750:	2830      	cmp	r0, #48	@ 0x30
 8012752:	4699      	mov	r9, r3
 8012754:	f103 0301 	add.w	r3, r3, #1
 8012758:	d0f9      	beq.n	801274e <__gethex+0x4e>
 801275a:	f7ff ffbb 	bl	80126d4 <__hexdig_fun>
 801275e:	fab0 f580 	clz	r5, r0
 8012762:	096d      	lsrs	r5, r5, #5
 8012764:	f04f 0b01 	mov.w	fp, #1
 8012768:	464a      	mov	r2, r9
 801276a:	4616      	mov	r6, r2
 801276c:	3201      	adds	r2, #1
 801276e:	7830      	ldrb	r0, [r6, #0]
 8012770:	f7ff ffb0 	bl	80126d4 <__hexdig_fun>
 8012774:	2800      	cmp	r0, #0
 8012776:	d1f8      	bne.n	801276a <__gethex+0x6a>
 8012778:	498d      	ldr	r1, [pc, #564]	@ (80129b0 <__gethex+0x2b0>)
 801277a:	2201      	movs	r2, #1
 801277c:	4630      	mov	r0, r6
 801277e:	f7fe f819 	bl	80107b4 <strncmp>
 8012782:	2800      	cmp	r0, #0
 8012784:	d13f      	bne.n	8012806 <__gethex+0x106>
 8012786:	b944      	cbnz	r4, 801279a <__gethex+0x9a>
 8012788:	1c74      	adds	r4, r6, #1
 801278a:	4622      	mov	r2, r4
 801278c:	4616      	mov	r6, r2
 801278e:	3201      	adds	r2, #1
 8012790:	7830      	ldrb	r0, [r6, #0]
 8012792:	f7ff ff9f 	bl	80126d4 <__hexdig_fun>
 8012796:	2800      	cmp	r0, #0
 8012798:	d1f8      	bne.n	801278c <__gethex+0x8c>
 801279a:	1ba4      	subs	r4, r4, r6
 801279c:	00a7      	lsls	r7, r4, #2
 801279e:	7833      	ldrb	r3, [r6, #0]
 80127a0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80127a4:	2b50      	cmp	r3, #80	@ 0x50
 80127a6:	d13e      	bne.n	8012826 <__gethex+0x126>
 80127a8:	7873      	ldrb	r3, [r6, #1]
 80127aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80127ac:	d033      	beq.n	8012816 <__gethex+0x116>
 80127ae:	2b2d      	cmp	r3, #45	@ 0x2d
 80127b0:	d034      	beq.n	801281c <__gethex+0x11c>
 80127b2:	1c71      	adds	r1, r6, #1
 80127b4:	2400      	movs	r4, #0
 80127b6:	7808      	ldrb	r0, [r1, #0]
 80127b8:	f7ff ff8c 	bl	80126d4 <__hexdig_fun>
 80127bc:	1e43      	subs	r3, r0, #1
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	2b18      	cmp	r3, #24
 80127c2:	d830      	bhi.n	8012826 <__gethex+0x126>
 80127c4:	f1a0 0210 	sub.w	r2, r0, #16
 80127c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80127cc:	f7ff ff82 	bl	80126d4 <__hexdig_fun>
 80127d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80127d4:	fa5f fc8c 	uxtb.w	ip, ip
 80127d8:	f1bc 0f18 	cmp.w	ip, #24
 80127dc:	f04f 030a 	mov.w	r3, #10
 80127e0:	d91e      	bls.n	8012820 <__gethex+0x120>
 80127e2:	b104      	cbz	r4, 80127e6 <__gethex+0xe6>
 80127e4:	4252      	negs	r2, r2
 80127e6:	4417      	add	r7, r2
 80127e8:	f8ca 1000 	str.w	r1, [sl]
 80127ec:	b1ed      	cbz	r5, 801282a <__gethex+0x12a>
 80127ee:	f1bb 0f00 	cmp.w	fp, #0
 80127f2:	bf0c      	ite	eq
 80127f4:	2506      	moveq	r5, #6
 80127f6:	2500      	movne	r5, #0
 80127f8:	4628      	mov	r0, r5
 80127fa:	b005      	add	sp, #20
 80127fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012800:	2500      	movs	r5, #0
 8012802:	462c      	mov	r4, r5
 8012804:	e7b0      	b.n	8012768 <__gethex+0x68>
 8012806:	2c00      	cmp	r4, #0
 8012808:	d1c7      	bne.n	801279a <__gethex+0x9a>
 801280a:	4627      	mov	r7, r4
 801280c:	e7c7      	b.n	801279e <__gethex+0x9e>
 801280e:	464e      	mov	r6, r9
 8012810:	462f      	mov	r7, r5
 8012812:	2501      	movs	r5, #1
 8012814:	e7c3      	b.n	801279e <__gethex+0x9e>
 8012816:	2400      	movs	r4, #0
 8012818:	1cb1      	adds	r1, r6, #2
 801281a:	e7cc      	b.n	80127b6 <__gethex+0xb6>
 801281c:	2401      	movs	r4, #1
 801281e:	e7fb      	b.n	8012818 <__gethex+0x118>
 8012820:	fb03 0002 	mla	r0, r3, r2, r0
 8012824:	e7ce      	b.n	80127c4 <__gethex+0xc4>
 8012826:	4631      	mov	r1, r6
 8012828:	e7de      	b.n	80127e8 <__gethex+0xe8>
 801282a:	eba6 0309 	sub.w	r3, r6, r9
 801282e:	3b01      	subs	r3, #1
 8012830:	4629      	mov	r1, r5
 8012832:	2b07      	cmp	r3, #7
 8012834:	dc0a      	bgt.n	801284c <__gethex+0x14c>
 8012836:	9801      	ldr	r0, [sp, #4]
 8012838:	f000 fa46 	bl	8012cc8 <_Balloc>
 801283c:	4604      	mov	r4, r0
 801283e:	b940      	cbnz	r0, 8012852 <__gethex+0x152>
 8012840:	4b5c      	ldr	r3, [pc, #368]	@ (80129b4 <__gethex+0x2b4>)
 8012842:	4602      	mov	r2, r0
 8012844:	21e4      	movs	r1, #228	@ 0xe4
 8012846:	485c      	ldr	r0, [pc, #368]	@ (80129b8 <__gethex+0x2b8>)
 8012848:	f000 ff9c 	bl	8013784 <__assert_func>
 801284c:	3101      	adds	r1, #1
 801284e:	105b      	asrs	r3, r3, #1
 8012850:	e7ef      	b.n	8012832 <__gethex+0x132>
 8012852:	f100 0a14 	add.w	sl, r0, #20
 8012856:	2300      	movs	r3, #0
 8012858:	4655      	mov	r5, sl
 801285a:	469b      	mov	fp, r3
 801285c:	45b1      	cmp	r9, r6
 801285e:	d337      	bcc.n	80128d0 <__gethex+0x1d0>
 8012860:	f845 bb04 	str.w	fp, [r5], #4
 8012864:	eba5 050a 	sub.w	r5, r5, sl
 8012868:	10ad      	asrs	r5, r5, #2
 801286a:	6125      	str	r5, [r4, #16]
 801286c:	4658      	mov	r0, fp
 801286e:	f000 fb1d 	bl	8012eac <__hi0bits>
 8012872:	016d      	lsls	r5, r5, #5
 8012874:	f8d8 6000 	ldr.w	r6, [r8]
 8012878:	1a2d      	subs	r5, r5, r0
 801287a:	42b5      	cmp	r5, r6
 801287c:	dd54      	ble.n	8012928 <__gethex+0x228>
 801287e:	1bad      	subs	r5, r5, r6
 8012880:	4629      	mov	r1, r5
 8012882:	4620      	mov	r0, r4
 8012884:	f000 feb1 	bl	80135ea <__any_on>
 8012888:	4681      	mov	r9, r0
 801288a:	b178      	cbz	r0, 80128ac <__gethex+0x1ac>
 801288c:	1e6b      	subs	r3, r5, #1
 801288e:	1159      	asrs	r1, r3, #5
 8012890:	f003 021f 	and.w	r2, r3, #31
 8012894:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012898:	f04f 0901 	mov.w	r9, #1
 801289c:	fa09 f202 	lsl.w	r2, r9, r2
 80128a0:	420a      	tst	r2, r1
 80128a2:	d003      	beq.n	80128ac <__gethex+0x1ac>
 80128a4:	454b      	cmp	r3, r9
 80128a6:	dc36      	bgt.n	8012916 <__gethex+0x216>
 80128a8:	f04f 0902 	mov.w	r9, #2
 80128ac:	4629      	mov	r1, r5
 80128ae:	4620      	mov	r0, r4
 80128b0:	f7ff febe 	bl	8012630 <rshift>
 80128b4:	442f      	add	r7, r5
 80128b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80128ba:	42bb      	cmp	r3, r7
 80128bc:	da42      	bge.n	8012944 <__gethex+0x244>
 80128be:	9801      	ldr	r0, [sp, #4]
 80128c0:	4621      	mov	r1, r4
 80128c2:	f000 fa41 	bl	8012d48 <_Bfree>
 80128c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128c8:	2300      	movs	r3, #0
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	25a3      	movs	r5, #163	@ 0xa3
 80128ce:	e793      	b.n	80127f8 <__gethex+0xf8>
 80128d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80128d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80128d6:	d012      	beq.n	80128fe <__gethex+0x1fe>
 80128d8:	2b20      	cmp	r3, #32
 80128da:	d104      	bne.n	80128e6 <__gethex+0x1e6>
 80128dc:	f845 bb04 	str.w	fp, [r5], #4
 80128e0:	f04f 0b00 	mov.w	fp, #0
 80128e4:	465b      	mov	r3, fp
 80128e6:	7830      	ldrb	r0, [r6, #0]
 80128e8:	9303      	str	r3, [sp, #12]
 80128ea:	f7ff fef3 	bl	80126d4 <__hexdig_fun>
 80128ee:	9b03      	ldr	r3, [sp, #12]
 80128f0:	f000 000f 	and.w	r0, r0, #15
 80128f4:	4098      	lsls	r0, r3
 80128f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80128fa:	3304      	adds	r3, #4
 80128fc:	e7ae      	b.n	801285c <__gethex+0x15c>
 80128fe:	45b1      	cmp	r9, r6
 8012900:	d8ea      	bhi.n	80128d8 <__gethex+0x1d8>
 8012902:	492b      	ldr	r1, [pc, #172]	@ (80129b0 <__gethex+0x2b0>)
 8012904:	9303      	str	r3, [sp, #12]
 8012906:	2201      	movs	r2, #1
 8012908:	4630      	mov	r0, r6
 801290a:	f7fd ff53 	bl	80107b4 <strncmp>
 801290e:	9b03      	ldr	r3, [sp, #12]
 8012910:	2800      	cmp	r0, #0
 8012912:	d1e1      	bne.n	80128d8 <__gethex+0x1d8>
 8012914:	e7a2      	b.n	801285c <__gethex+0x15c>
 8012916:	1ea9      	subs	r1, r5, #2
 8012918:	4620      	mov	r0, r4
 801291a:	f000 fe66 	bl	80135ea <__any_on>
 801291e:	2800      	cmp	r0, #0
 8012920:	d0c2      	beq.n	80128a8 <__gethex+0x1a8>
 8012922:	f04f 0903 	mov.w	r9, #3
 8012926:	e7c1      	b.n	80128ac <__gethex+0x1ac>
 8012928:	da09      	bge.n	801293e <__gethex+0x23e>
 801292a:	1b75      	subs	r5, r6, r5
 801292c:	4621      	mov	r1, r4
 801292e:	9801      	ldr	r0, [sp, #4]
 8012930:	462a      	mov	r2, r5
 8012932:	f000 fc21 	bl	8013178 <__lshift>
 8012936:	1b7f      	subs	r7, r7, r5
 8012938:	4604      	mov	r4, r0
 801293a:	f100 0a14 	add.w	sl, r0, #20
 801293e:	f04f 0900 	mov.w	r9, #0
 8012942:	e7b8      	b.n	80128b6 <__gethex+0x1b6>
 8012944:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012948:	42bd      	cmp	r5, r7
 801294a:	dd6f      	ble.n	8012a2c <__gethex+0x32c>
 801294c:	1bed      	subs	r5, r5, r7
 801294e:	42ae      	cmp	r6, r5
 8012950:	dc34      	bgt.n	80129bc <__gethex+0x2bc>
 8012952:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012956:	2b02      	cmp	r3, #2
 8012958:	d022      	beq.n	80129a0 <__gethex+0x2a0>
 801295a:	2b03      	cmp	r3, #3
 801295c:	d024      	beq.n	80129a8 <__gethex+0x2a8>
 801295e:	2b01      	cmp	r3, #1
 8012960:	d115      	bne.n	801298e <__gethex+0x28e>
 8012962:	42ae      	cmp	r6, r5
 8012964:	d113      	bne.n	801298e <__gethex+0x28e>
 8012966:	2e01      	cmp	r6, #1
 8012968:	d10b      	bne.n	8012982 <__gethex+0x282>
 801296a:	9a02      	ldr	r2, [sp, #8]
 801296c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012970:	6013      	str	r3, [r2, #0]
 8012972:	2301      	movs	r3, #1
 8012974:	6123      	str	r3, [r4, #16]
 8012976:	f8ca 3000 	str.w	r3, [sl]
 801297a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801297c:	2562      	movs	r5, #98	@ 0x62
 801297e:	601c      	str	r4, [r3, #0]
 8012980:	e73a      	b.n	80127f8 <__gethex+0xf8>
 8012982:	1e71      	subs	r1, r6, #1
 8012984:	4620      	mov	r0, r4
 8012986:	f000 fe30 	bl	80135ea <__any_on>
 801298a:	2800      	cmp	r0, #0
 801298c:	d1ed      	bne.n	801296a <__gethex+0x26a>
 801298e:	9801      	ldr	r0, [sp, #4]
 8012990:	4621      	mov	r1, r4
 8012992:	f000 f9d9 	bl	8012d48 <_Bfree>
 8012996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012998:	2300      	movs	r3, #0
 801299a:	6013      	str	r3, [r2, #0]
 801299c:	2550      	movs	r5, #80	@ 0x50
 801299e:	e72b      	b.n	80127f8 <__gethex+0xf8>
 80129a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d1f3      	bne.n	801298e <__gethex+0x28e>
 80129a6:	e7e0      	b.n	801296a <__gethex+0x26a>
 80129a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d1dd      	bne.n	801296a <__gethex+0x26a>
 80129ae:	e7ee      	b.n	801298e <__gethex+0x28e>
 80129b0:	08013e85 	.word	0x08013e85
 80129b4:	0801403f 	.word	0x0801403f
 80129b8:	08014050 	.word	0x08014050
 80129bc:	1e6f      	subs	r7, r5, #1
 80129be:	f1b9 0f00 	cmp.w	r9, #0
 80129c2:	d130      	bne.n	8012a26 <__gethex+0x326>
 80129c4:	b127      	cbz	r7, 80129d0 <__gethex+0x2d0>
 80129c6:	4639      	mov	r1, r7
 80129c8:	4620      	mov	r0, r4
 80129ca:	f000 fe0e 	bl	80135ea <__any_on>
 80129ce:	4681      	mov	r9, r0
 80129d0:	117a      	asrs	r2, r7, #5
 80129d2:	2301      	movs	r3, #1
 80129d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80129d8:	f007 071f 	and.w	r7, r7, #31
 80129dc:	40bb      	lsls	r3, r7
 80129de:	4213      	tst	r3, r2
 80129e0:	4629      	mov	r1, r5
 80129e2:	4620      	mov	r0, r4
 80129e4:	bf18      	it	ne
 80129e6:	f049 0902 	orrne.w	r9, r9, #2
 80129ea:	f7ff fe21 	bl	8012630 <rshift>
 80129ee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80129f2:	1b76      	subs	r6, r6, r5
 80129f4:	2502      	movs	r5, #2
 80129f6:	f1b9 0f00 	cmp.w	r9, #0
 80129fa:	d047      	beq.n	8012a8c <__gethex+0x38c>
 80129fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a00:	2b02      	cmp	r3, #2
 8012a02:	d015      	beq.n	8012a30 <__gethex+0x330>
 8012a04:	2b03      	cmp	r3, #3
 8012a06:	d017      	beq.n	8012a38 <__gethex+0x338>
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d109      	bne.n	8012a20 <__gethex+0x320>
 8012a0c:	f019 0f02 	tst.w	r9, #2
 8012a10:	d006      	beq.n	8012a20 <__gethex+0x320>
 8012a12:	f8da 3000 	ldr.w	r3, [sl]
 8012a16:	ea49 0903 	orr.w	r9, r9, r3
 8012a1a:	f019 0f01 	tst.w	r9, #1
 8012a1e:	d10e      	bne.n	8012a3e <__gethex+0x33e>
 8012a20:	f045 0510 	orr.w	r5, r5, #16
 8012a24:	e032      	b.n	8012a8c <__gethex+0x38c>
 8012a26:	f04f 0901 	mov.w	r9, #1
 8012a2a:	e7d1      	b.n	80129d0 <__gethex+0x2d0>
 8012a2c:	2501      	movs	r5, #1
 8012a2e:	e7e2      	b.n	80129f6 <__gethex+0x2f6>
 8012a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a32:	f1c3 0301 	rsb	r3, r3, #1
 8012a36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d0f0      	beq.n	8012a20 <__gethex+0x320>
 8012a3e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012a42:	f104 0314 	add.w	r3, r4, #20
 8012a46:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012a4a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012a4e:	f04f 0c00 	mov.w	ip, #0
 8012a52:	4618      	mov	r0, r3
 8012a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a58:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012a5c:	d01b      	beq.n	8012a96 <__gethex+0x396>
 8012a5e:	3201      	adds	r2, #1
 8012a60:	6002      	str	r2, [r0, #0]
 8012a62:	2d02      	cmp	r5, #2
 8012a64:	f104 0314 	add.w	r3, r4, #20
 8012a68:	d13c      	bne.n	8012ae4 <__gethex+0x3e4>
 8012a6a:	f8d8 2000 	ldr.w	r2, [r8]
 8012a6e:	3a01      	subs	r2, #1
 8012a70:	42b2      	cmp	r2, r6
 8012a72:	d109      	bne.n	8012a88 <__gethex+0x388>
 8012a74:	1171      	asrs	r1, r6, #5
 8012a76:	2201      	movs	r2, #1
 8012a78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a7c:	f006 061f 	and.w	r6, r6, #31
 8012a80:	fa02 f606 	lsl.w	r6, r2, r6
 8012a84:	421e      	tst	r6, r3
 8012a86:	d13a      	bne.n	8012afe <__gethex+0x3fe>
 8012a88:	f045 0520 	orr.w	r5, r5, #32
 8012a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a8e:	601c      	str	r4, [r3, #0]
 8012a90:	9b02      	ldr	r3, [sp, #8]
 8012a92:	601f      	str	r7, [r3, #0]
 8012a94:	e6b0      	b.n	80127f8 <__gethex+0xf8>
 8012a96:	4299      	cmp	r1, r3
 8012a98:	f843 cc04 	str.w	ip, [r3, #-4]
 8012a9c:	d8d9      	bhi.n	8012a52 <__gethex+0x352>
 8012a9e:	68a3      	ldr	r3, [r4, #8]
 8012aa0:	459b      	cmp	fp, r3
 8012aa2:	db17      	blt.n	8012ad4 <__gethex+0x3d4>
 8012aa4:	6861      	ldr	r1, [r4, #4]
 8012aa6:	9801      	ldr	r0, [sp, #4]
 8012aa8:	3101      	adds	r1, #1
 8012aaa:	f000 f90d 	bl	8012cc8 <_Balloc>
 8012aae:	4681      	mov	r9, r0
 8012ab0:	b918      	cbnz	r0, 8012aba <__gethex+0x3ba>
 8012ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8012b1c <__gethex+0x41c>)
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	2184      	movs	r1, #132	@ 0x84
 8012ab8:	e6c5      	b.n	8012846 <__gethex+0x146>
 8012aba:	6922      	ldr	r2, [r4, #16]
 8012abc:	3202      	adds	r2, #2
 8012abe:	f104 010c 	add.w	r1, r4, #12
 8012ac2:	0092      	lsls	r2, r2, #2
 8012ac4:	300c      	adds	r0, #12
 8012ac6:	f7fd ff0a 	bl	80108de <memcpy>
 8012aca:	4621      	mov	r1, r4
 8012acc:	9801      	ldr	r0, [sp, #4]
 8012ace:	f000 f93b 	bl	8012d48 <_Bfree>
 8012ad2:	464c      	mov	r4, r9
 8012ad4:	6923      	ldr	r3, [r4, #16]
 8012ad6:	1c5a      	adds	r2, r3, #1
 8012ad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012adc:	6122      	str	r2, [r4, #16]
 8012ade:	2201      	movs	r2, #1
 8012ae0:	615a      	str	r2, [r3, #20]
 8012ae2:	e7be      	b.n	8012a62 <__gethex+0x362>
 8012ae4:	6922      	ldr	r2, [r4, #16]
 8012ae6:	455a      	cmp	r2, fp
 8012ae8:	dd0b      	ble.n	8012b02 <__gethex+0x402>
 8012aea:	2101      	movs	r1, #1
 8012aec:	4620      	mov	r0, r4
 8012aee:	f7ff fd9f 	bl	8012630 <rshift>
 8012af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012af6:	3701      	adds	r7, #1
 8012af8:	42bb      	cmp	r3, r7
 8012afa:	f6ff aee0 	blt.w	80128be <__gethex+0x1be>
 8012afe:	2501      	movs	r5, #1
 8012b00:	e7c2      	b.n	8012a88 <__gethex+0x388>
 8012b02:	f016 061f 	ands.w	r6, r6, #31
 8012b06:	d0fa      	beq.n	8012afe <__gethex+0x3fe>
 8012b08:	4453      	add	r3, sl
 8012b0a:	f1c6 0620 	rsb	r6, r6, #32
 8012b0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b12:	f000 f9cb 	bl	8012eac <__hi0bits>
 8012b16:	42b0      	cmp	r0, r6
 8012b18:	dbe7      	blt.n	8012aea <__gethex+0x3ea>
 8012b1a:	e7f0      	b.n	8012afe <__gethex+0x3fe>
 8012b1c:	0801403f 	.word	0x0801403f

08012b20 <L_shift>:
 8012b20:	f1c2 0208 	rsb	r2, r2, #8
 8012b24:	0092      	lsls	r2, r2, #2
 8012b26:	b570      	push	{r4, r5, r6, lr}
 8012b28:	f1c2 0620 	rsb	r6, r2, #32
 8012b2c:	6843      	ldr	r3, [r0, #4]
 8012b2e:	6804      	ldr	r4, [r0, #0]
 8012b30:	fa03 f506 	lsl.w	r5, r3, r6
 8012b34:	432c      	orrs	r4, r5
 8012b36:	40d3      	lsrs	r3, r2
 8012b38:	6004      	str	r4, [r0, #0]
 8012b3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8012b3e:	4288      	cmp	r0, r1
 8012b40:	d3f4      	bcc.n	8012b2c <L_shift+0xc>
 8012b42:	bd70      	pop	{r4, r5, r6, pc}

08012b44 <__match>:
 8012b44:	b530      	push	{r4, r5, lr}
 8012b46:	6803      	ldr	r3, [r0, #0]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b4e:	b914      	cbnz	r4, 8012b56 <__match+0x12>
 8012b50:	6003      	str	r3, [r0, #0]
 8012b52:	2001      	movs	r0, #1
 8012b54:	bd30      	pop	{r4, r5, pc}
 8012b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b5a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012b5e:	2d19      	cmp	r5, #25
 8012b60:	bf98      	it	ls
 8012b62:	3220      	addls	r2, #32
 8012b64:	42a2      	cmp	r2, r4
 8012b66:	d0f0      	beq.n	8012b4a <__match+0x6>
 8012b68:	2000      	movs	r0, #0
 8012b6a:	e7f3      	b.n	8012b54 <__match+0x10>

08012b6c <__hexnan>:
 8012b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b70:	680b      	ldr	r3, [r1, #0]
 8012b72:	6801      	ldr	r1, [r0, #0]
 8012b74:	115e      	asrs	r6, r3, #5
 8012b76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b7a:	f013 031f 	ands.w	r3, r3, #31
 8012b7e:	b087      	sub	sp, #28
 8012b80:	bf18      	it	ne
 8012b82:	3604      	addne	r6, #4
 8012b84:	2500      	movs	r5, #0
 8012b86:	1f37      	subs	r7, r6, #4
 8012b88:	4682      	mov	sl, r0
 8012b8a:	4690      	mov	r8, r2
 8012b8c:	9301      	str	r3, [sp, #4]
 8012b8e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012b92:	46b9      	mov	r9, r7
 8012b94:	463c      	mov	r4, r7
 8012b96:	9502      	str	r5, [sp, #8]
 8012b98:	46ab      	mov	fp, r5
 8012b9a:	784a      	ldrb	r2, [r1, #1]
 8012b9c:	1c4b      	adds	r3, r1, #1
 8012b9e:	9303      	str	r3, [sp, #12]
 8012ba0:	b342      	cbz	r2, 8012bf4 <__hexnan+0x88>
 8012ba2:	4610      	mov	r0, r2
 8012ba4:	9105      	str	r1, [sp, #20]
 8012ba6:	9204      	str	r2, [sp, #16]
 8012ba8:	f7ff fd94 	bl	80126d4 <__hexdig_fun>
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d151      	bne.n	8012c54 <__hexnan+0xe8>
 8012bb0:	9a04      	ldr	r2, [sp, #16]
 8012bb2:	9905      	ldr	r1, [sp, #20]
 8012bb4:	2a20      	cmp	r2, #32
 8012bb6:	d818      	bhi.n	8012bea <__hexnan+0x7e>
 8012bb8:	9b02      	ldr	r3, [sp, #8]
 8012bba:	459b      	cmp	fp, r3
 8012bbc:	dd13      	ble.n	8012be6 <__hexnan+0x7a>
 8012bbe:	454c      	cmp	r4, r9
 8012bc0:	d206      	bcs.n	8012bd0 <__hexnan+0x64>
 8012bc2:	2d07      	cmp	r5, #7
 8012bc4:	dc04      	bgt.n	8012bd0 <__hexnan+0x64>
 8012bc6:	462a      	mov	r2, r5
 8012bc8:	4649      	mov	r1, r9
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f7ff ffa8 	bl	8012b20 <L_shift>
 8012bd0:	4544      	cmp	r4, r8
 8012bd2:	d952      	bls.n	8012c7a <__hexnan+0x10e>
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	f1a4 0904 	sub.w	r9, r4, #4
 8012bda:	f844 3c04 	str.w	r3, [r4, #-4]
 8012bde:	f8cd b008 	str.w	fp, [sp, #8]
 8012be2:	464c      	mov	r4, r9
 8012be4:	461d      	mov	r5, r3
 8012be6:	9903      	ldr	r1, [sp, #12]
 8012be8:	e7d7      	b.n	8012b9a <__hexnan+0x2e>
 8012bea:	2a29      	cmp	r2, #41	@ 0x29
 8012bec:	d157      	bne.n	8012c9e <__hexnan+0x132>
 8012bee:	3102      	adds	r1, #2
 8012bf0:	f8ca 1000 	str.w	r1, [sl]
 8012bf4:	f1bb 0f00 	cmp.w	fp, #0
 8012bf8:	d051      	beq.n	8012c9e <__hexnan+0x132>
 8012bfa:	454c      	cmp	r4, r9
 8012bfc:	d206      	bcs.n	8012c0c <__hexnan+0xa0>
 8012bfe:	2d07      	cmp	r5, #7
 8012c00:	dc04      	bgt.n	8012c0c <__hexnan+0xa0>
 8012c02:	462a      	mov	r2, r5
 8012c04:	4649      	mov	r1, r9
 8012c06:	4620      	mov	r0, r4
 8012c08:	f7ff ff8a 	bl	8012b20 <L_shift>
 8012c0c:	4544      	cmp	r4, r8
 8012c0e:	d936      	bls.n	8012c7e <__hexnan+0x112>
 8012c10:	f1a8 0204 	sub.w	r2, r8, #4
 8012c14:	4623      	mov	r3, r4
 8012c16:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c1a:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c1e:	429f      	cmp	r7, r3
 8012c20:	d2f9      	bcs.n	8012c16 <__hexnan+0xaa>
 8012c22:	1b3b      	subs	r3, r7, r4
 8012c24:	f023 0303 	bic.w	r3, r3, #3
 8012c28:	3304      	adds	r3, #4
 8012c2a:	3401      	adds	r4, #1
 8012c2c:	3e03      	subs	r6, #3
 8012c2e:	42b4      	cmp	r4, r6
 8012c30:	bf88      	it	hi
 8012c32:	2304      	movhi	r3, #4
 8012c34:	4443      	add	r3, r8
 8012c36:	2200      	movs	r2, #0
 8012c38:	f843 2b04 	str.w	r2, [r3], #4
 8012c3c:	429f      	cmp	r7, r3
 8012c3e:	d2fb      	bcs.n	8012c38 <__hexnan+0xcc>
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	b91b      	cbnz	r3, 8012c4c <__hexnan+0xe0>
 8012c44:	4547      	cmp	r7, r8
 8012c46:	d128      	bne.n	8012c9a <__hexnan+0x12e>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	603b      	str	r3, [r7, #0]
 8012c4c:	2005      	movs	r0, #5
 8012c4e:	b007      	add	sp, #28
 8012c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c54:	3501      	adds	r5, #1
 8012c56:	2d08      	cmp	r5, #8
 8012c58:	f10b 0b01 	add.w	fp, fp, #1
 8012c5c:	dd06      	ble.n	8012c6c <__hexnan+0x100>
 8012c5e:	4544      	cmp	r4, r8
 8012c60:	d9c1      	bls.n	8012be6 <__hexnan+0x7a>
 8012c62:	2300      	movs	r3, #0
 8012c64:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c68:	2501      	movs	r5, #1
 8012c6a:	3c04      	subs	r4, #4
 8012c6c:	6822      	ldr	r2, [r4, #0]
 8012c6e:	f000 000f 	and.w	r0, r0, #15
 8012c72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012c76:	6020      	str	r0, [r4, #0]
 8012c78:	e7b5      	b.n	8012be6 <__hexnan+0x7a>
 8012c7a:	2508      	movs	r5, #8
 8012c7c:	e7b3      	b.n	8012be6 <__hexnan+0x7a>
 8012c7e:	9b01      	ldr	r3, [sp, #4]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d0dd      	beq.n	8012c40 <__hexnan+0xd4>
 8012c84:	f1c3 0320 	rsb	r3, r3, #32
 8012c88:	f04f 32ff 	mov.w	r2, #4294967295
 8012c8c:	40da      	lsrs	r2, r3
 8012c8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012c92:	4013      	ands	r3, r2
 8012c94:	f846 3c04 	str.w	r3, [r6, #-4]
 8012c98:	e7d2      	b.n	8012c40 <__hexnan+0xd4>
 8012c9a:	3f04      	subs	r7, #4
 8012c9c:	e7d0      	b.n	8012c40 <__hexnan+0xd4>
 8012c9e:	2004      	movs	r0, #4
 8012ca0:	e7d5      	b.n	8012c4e <__hexnan+0xe2>

08012ca2 <__ascii_mbtowc>:
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	b901      	cbnz	r1, 8012ca8 <__ascii_mbtowc+0x6>
 8012ca6:	a901      	add	r1, sp, #4
 8012ca8:	b142      	cbz	r2, 8012cbc <__ascii_mbtowc+0x1a>
 8012caa:	b14b      	cbz	r3, 8012cc0 <__ascii_mbtowc+0x1e>
 8012cac:	7813      	ldrb	r3, [r2, #0]
 8012cae:	600b      	str	r3, [r1, #0]
 8012cb0:	7812      	ldrb	r2, [r2, #0]
 8012cb2:	1e10      	subs	r0, r2, #0
 8012cb4:	bf18      	it	ne
 8012cb6:	2001      	movne	r0, #1
 8012cb8:	b002      	add	sp, #8
 8012cba:	4770      	bx	lr
 8012cbc:	4610      	mov	r0, r2
 8012cbe:	e7fb      	b.n	8012cb8 <__ascii_mbtowc+0x16>
 8012cc0:	f06f 0001 	mvn.w	r0, #1
 8012cc4:	e7f8      	b.n	8012cb8 <__ascii_mbtowc+0x16>
	...

08012cc8 <_Balloc>:
 8012cc8:	b570      	push	{r4, r5, r6, lr}
 8012cca:	69c6      	ldr	r6, [r0, #28]
 8012ccc:	4604      	mov	r4, r0
 8012cce:	460d      	mov	r5, r1
 8012cd0:	b976      	cbnz	r6, 8012cf0 <_Balloc+0x28>
 8012cd2:	2010      	movs	r0, #16
 8012cd4:	f7fd f850 	bl	800fd78 <malloc>
 8012cd8:	4602      	mov	r2, r0
 8012cda:	61e0      	str	r0, [r4, #28]
 8012cdc:	b920      	cbnz	r0, 8012ce8 <_Balloc+0x20>
 8012cde:	4b18      	ldr	r3, [pc, #96]	@ (8012d40 <_Balloc+0x78>)
 8012ce0:	4818      	ldr	r0, [pc, #96]	@ (8012d44 <_Balloc+0x7c>)
 8012ce2:	216b      	movs	r1, #107	@ 0x6b
 8012ce4:	f000 fd4e 	bl	8013784 <__assert_func>
 8012ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cec:	6006      	str	r6, [r0, #0]
 8012cee:	60c6      	str	r6, [r0, #12]
 8012cf0:	69e6      	ldr	r6, [r4, #28]
 8012cf2:	68f3      	ldr	r3, [r6, #12]
 8012cf4:	b183      	cbz	r3, 8012d18 <_Balloc+0x50>
 8012cf6:	69e3      	ldr	r3, [r4, #28]
 8012cf8:	68db      	ldr	r3, [r3, #12]
 8012cfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cfe:	b9b8      	cbnz	r0, 8012d30 <_Balloc+0x68>
 8012d00:	2101      	movs	r1, #1
 8012d02:	fa01 f605 	lsl.w	r6, r1, r5
 8012d06:	1d72      	adds	r2, r6, #5
 8012d08:	0092      	lsls	r2, r2, #2
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	f000 fd58 	bl	80137c0 <_calloc_r>
 8012d10:	b160      	cbz	r0, 8012d2c <_Balloc+0x64>
 8012d12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d16:	e00e      	b.n	8012d36 <_Balloc+0x6e>
 8012d18:	2221      	movs	r2, #33	@ 0x21
 8012d1a:	2104      	movs	r1, #4
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 fd4f 	bl	80137c0 <_calloc_r>
 8012d22:	69e3      	ldr	r3, [r4, #28]
 8012d24:	60f0      	str	r0, [r6, #12]
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d1e4      	bne.n	8012cf6 <_Balloc+0x2e>
 8012d2c:	2000      	movs	r0, #0
 8012d2e:	bd70      	pop	{r4, r5, r6, pc}
 8012d30:	6802      	ldr	r2, [r0, #0]
 8012d32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d36:	2300      	movs	r3, #0
 8012d38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d3c:	e7f7      	b.n	8012d2e <_Balloc+0x66>
 8012d3e:	bf00      	nop
 8012d40:	080140b0 	.word	0x080140b0
 8012d44:	080140c7 	.word	0x080140c7

08012d48 <_Bfree>:
 8012d48:	b570      	push	{r4, r5, r6, lr}
 8012d4a:	69c6      	ldr	r6, [r0, #28]
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	460c      	mov	r4, r1
 8012d50:	b976      	cbnz	r6, 8012d70 <_Bfree+0x28>
 8012d52:	2010      	movs	r0, #16
 8012d54:	f7fd f810 	bl	800fd78 <malloc>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	61e8      	str	r0, [r5, #28]
 8012d5c:	b920      	cbnz	r0, 8012d68 <_Bfree+0x20>
 8012d5e:	4b09      	ldr	r3, [pc, #36]	@ (8012d84 <_Bfree+0x3c>)
 8012d60:	4809      	ldr	r0, [pc, #36]	@ (8012d88 <_Bfree+0x40>)
 8012d62:	218f      	movs	r1, #143	@ 0x8f
 8012d64:	f000 fd0e 	bl	8013784 <__assert_func>
 8012d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d6c:	6006      	str	r6, [r0, #0]
 8012d6e:	60c6      	str	r6, [r0, #12]
 8012d70:	b13c      	cbz	r4, 8012d82 <_Bfree+0x3a>
 8012d72:	69eb      	ldr	r3, [r5, #28]
 8012d74:	6862      	ldr	r2, [r4, #4]
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d7c:	6021      	str	r1, [r4, #0]
 8012d7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d82:	bd70      	pop	{r4, r5, r6, pc}
 8012d84:	080140b0 	.word	0x080140b0
 8012d88:	080140c7 	.word	0x080140c7

08012d8c <__multadd>:
 8012d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d90:	690d      	ldr	r5, [r1, #16]
 8012d92:	4607      	mov	r7, r0
 8012d94:	460c      	mov	r4, r1
 8012d96:	461e      	mov	r6, r3
 8012d98:	f101 0c14 	add.w	ip, r1, #20
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	f8dc 3000 	ldr.w	r3, [ip]
 8012da2:	b299      	uxth	r1, r3
 8012da4:	fb02 6101 	mla	r1, r2, r1, r6
 8012da8:	0c1e      	lsrs	r6, r3, #16
 8012daa:	0c0b      	lsrs	r3, r1, #16
 8012dac:	fb02 3306 	mla	r3, r2, r6, r3
 8012db0:	b289      	uxth	r1, r1
 8012db2:	3001      	adds	r0, #1
 8012db4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012db8:	4285      	cmp	r5, r0
 8012dba:	f84c 1b04 	str.w	r1, [ip], #4
 8012dbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012dc2:	dcec      	bgt.n	8012d9e <__multadd+0x12>
 8012dc4:	b30e      	cbz	r6, 8012e0a <__multadd+0x7e>
 8012dc6:	68a3      	ldr	r3, [r4, #8]
 8012dc8:	42ab      	cmp	r3, r5
 8012dca:	dc19      	bgt.n	8012e00 <__multadd+0x74>
 8012dcc:	6861      	ldr	r1, [r4, #4]
 8012dce:	4638      	mov	r0, r7
 8012dd0:	3101      	adds	r1, #1
 8012dd2:	f7ff ff79 	bl	8012cc8 <_Balloc>
 8012dd6:	4680      	mov	r8, r0
 8012dd8:	b928      	cbnz	r0, 8012de6 <__multadd+0x5a>
 8012dda:	4602      	mov	r2, r0
 8012ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8012e10 <__multadd+0x84>)
 8012dde:	480d      	ldr	r0, [pc, #52]	@ (8012e14 <__multadd+0x88>)
 8012de0:	21ba      	movs	r1, #186	@ 0xba
 8012de2:	f000 fccf 	bl	8013784 <__assert_func>
 8012de6:	6922      	ldr	r2, [r4, #16]
 8012de8:	3202      	adds	r2, #2
 8012dea:	f104 010c 	add.w	r1, r4, #12
 8012dee:	0092      	lsls	r2, r2, #2
 8012df0:	300c      	adds	r0, #12
 8012df2:	f7fd fd74 	bl	80108de <memcpy>
 8012df6:	4621      	mov	r1, r4
 8012df8:	4638      	mov	r0, r7
 8012dfa:	f7ff ffa5 	bl	8012d48 <_Bfree>
 8012dfe:	4644      	mov	r4, r8
 8012e00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e04:	3501      	adds	r5, #1
 8012e06:	615e      	str	r6, [r3, #20]
 8012e08:	6125      	str	r5, [r4, #16]
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e10:	0801403f 	.word	0x0801403f
 8012e14:	080140c7 	.word	0x080140c7

08012e18 <__s2b>:
 8012e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e1c:	460c      	mov	r4, r1
 8012e1e:	4615      	mov	r5, r2
 8012e20:	461f      	mov	r7, r3
 8012e22:	2209      	movs	r2, #9
 8012e24:	3308      	adds	r3, #8
 8012e26:	4606      	mov	r6, r0
 8012e28:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	2201      	movs	r2, #1
 8012e30:	429a      	cmp	r2, r3
 8012e32:	db09      	blt.n	8012e48 <__s2b+0x30>
 8012e34:	4630      	mov	r0, r6
 8012e36:	f7ff ff47 	bl	8012cc8 <_Balloc>
 8012e3a:	b940      	cbnz	r0, 8012e4e <__s2b+0x36>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	4b19      	ldr	r3, [pc, #100]	@ (8012ea4 <__s2b+0x8c>)
 8012e40:	4819      	ldr	r0, [pc, #100]	@ (8012ea8 <__s2b+0x90>)
 8012e42:	21d3      	movs	r1, #211	@ 0xd3
 8012e44:	f000 fc9e 	bl	8013784 <__assert_func>
 8012e48:	0052      	lsls	r2, r2, #1
 8012e4a:	3101      	adds	r1, #1
 8012e4c:	e7f0      	b.n	8012e30 <__s2b+0x18>
 8012e4e:	9b08      	ldr	r3, [sp, #32]
 8012e50:	6143      	str	r3, [r0, #20]
 8012e52:	2d09      	cmp	r5, #9
 8012e54:	f04f 0301 	mov.w	r3, #1
 8012e58:	6103      	str	r3, [r0, #16]
 8012e5a:	dd16      	ble.n	8012e8a <__s2b+0x72>
 8012e5c:	f104 0909 	add.w	r9, r4, #9
 8012e60:	46c8      	mov	r8, r9
 8012e62:	442c      	add	r4, r5
 8012e64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e68:	4601      	mov	r1, r0
 8012e6a:	3b30      	subs	r3, #48	@ 0x30
 8012e6c:	220a      	movs	r2, #10
 8012e6e:	4630      	mov	r0, r6
 8012e70:	f7ff ff8c 	bl	8012d8c <__multadd>
 8012e74:	45a0      	cmp	r8, r4
 8012e76:	d1f5      	bne.n	8012e64 <__s2b+0x4c>
 8012e78:	f1a5 0408 	sub.w	r4, r5, #8
 8012e7c:	444c      	add	r4, r9
 8012e7e:	1b2d      	subs	r5, r5, r4
 8012e80:	1963      	adds	r3, r4, r5
 8012e82:	42bb      	cmp	r3, r7
 8012e84:	db04      	blt.n	8012e90 <__s2b+0x78>
 8012e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e8a:	340a      	adds	r4, #10
 8012e8c:	2509      	movs	r5, #9
 8012e8e:	e7f6      	b.n	8012e7e <__s2b+0x66>
 8012e90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e94:	4601      	mov	r1, r0
 8012e96:	3b30      	subs	r3, #48	@ 0x30
 8012e98:	220a      	movs	r2, #10
 8012e9a:	4630      	mov	r0, r6
 8012e9c:	f7ff ff76 	bl	8012d8c <__multadd>
 8012ea0:	e7ee      	b.n	8012e80 <__s2b+0x68>
 8012ea2:	bf00      	nop
 8012ea4:	0801403f 	.word	0x0801403f
 8012ea8:	080140c7 	.word	0x080140c7

08012eac <__hi0bits>:
 8012eac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	bf36      	itet	cc
 8012eb4:	0403      	lslcc	r3, r0, #16
 8012eb6:	2000      	movcs	r0, #0
 8012eb8:	2010      	movcc	r0, #16
 8012eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012ebe:	bf3c      	itt	cc
 8012ec0:	021b      	lslcc	r3, r3, #8
 8012ec2:	3008      	addcc	r0, #8
 8012ec4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ec8:	bf3c      	itt	cc
 8012eca:	011b      	lslcc	r3, r3, #4
 8012ecc:	3004      	addcc	r0, #4
 8012ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ed2:	bf3c      	itt	cc
 8012ed4:	009b      	lslcc	r3, r3, #2
 8012ed6:	3002      	addcc	r0, #2
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	db05      	blt.n	8012ee8 <__hi0bits+0x3c>
 8012edc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012ee0:	f100 0001 	add.w	r0, r0, #1
 8012ee4:	bf08      	it	eq
 8012ee6:	2020      	moveq	r0, #32
 8012ee8:	4770      	bx	lr

08012eea <__lo0bits>:
 8012eea:	6803      	ldr	r3, [r0, #0]
 8012eec:	4602      	mov	r2, r0
 8012eee:	f013 0007 	ands.w	r0, r3, #7
 8012ef2:	d00b      	beq.n	8012f0c <__lo0bits+0x22>
 8012ef4:	07d9      	lsls	r1, r3, #31
 8012ef6:	d421      	bmi.n	8012f3c <__lo0bits+0x52>
 8012ef8:	0798      	lsls	r0, r3, #30
 8012efa:	bf49      	itett	mi
 8012efc:	085b      	lsrmi	r3, r3, #1
 8012efe:	089b      	lsrpl	r3, r3, #2
 8012f00:	2001      	movmi	r0, #1
 8012f02:	6013      	strmi	r3, [r2, #0]
 8012f04:	bf5c      	itt	pl
 8012f06:	6013      	strpl	r3, [r2, #0]
 8012f08:	2002      	movpl	r0, #2
 8012f0a:	4770      	bx	lr
 8012f0c:	b299      	uxth	r1, r3
 8012f0e:	b909      	cbnz	r1, 8012f14 <__lo0bits+0x2a>
 8012f10:	0c1b      	lsrs	r3, r3, #16
 8012f12:	2010      	movs	r0, #16
 8012f14:	b2d9      	uxtb	r1, r3
 8012f16:	b909      	cbnz	r1, 8012f1c <__lo0bits+0x32>
 8012f18:	3008      	adds	r0, #8
 8012f1a:	0a1b      	lsrs	r3, r3, #8
 8012f1c:	0719      	lsls	r1, r3, #28
 8012f1e:	bf04      	itt	eq
 8012f20:	091b      	lsreq	r3, r3, #4
 8012f22:	3004      	addeq	r0, #4
 8012f24:	0799      	lsls	r1, r3, #30
 8012f26:	bf04      	itt	eq
 8012f28:	089b      	lsreq	r3, r3, #2
 8012f2a:	3002      	addeq	r0, #2
 8012f2c:	07d9      	lsls	r1, r3, #31
 8012f2e:	d403      	bmi.n	8012f38 <__lo0bits+0x4e>
 8012f30:	085b      	lsrs	r3, r3, #1
 8012f32:	f100 0001 	add.w	r0, r0, #1
 8012f36:	d003      	beq.n	8012f40 <__lo0bits+0x56>
 8012f38:	6013      	str	r3, [r2, #0]
 8012f3a:	4770      	bx	lr
 8012f3c:	2000      	movs	r0, #0
 8012f3e:	4770      	bx	lr
 8012f40:	2020      	movs	r0, #32
 8012f42:	4770      	bx	lr

08012f44 <__i2b>:
 8012f44:	b510      	push	{r4, lr}
 8012f46:	460c      	mov	r4, r1
 8012f48:	2101      	movs	r1, #1
 8012f4a:	f7ff febd 	bl	8012cc8 <_Balloc>
 8012f4e:	4602      	mov	r2, r0
 8012f50:	b928      	cbnz	r0, 8012f5e <__i2b+0x1a>
 8012f52:	4b05      	ldr	r3, [pc, #20]	@ (8012f68 <__i2b+0x24>)
 8012f54:	4805      	ldr	r0, [pc, #20]	@ (8012f6c <__i2b+0x28>)
 8012f56:	f240 1145 	movw	r1, #325	@ 0x145
 8012f5a:	f000 fc13 	bl	8013784 <__assert_func>
 8012f5e:	2301      	movs	r3, #1
 8012f60:	6144      	str	r4, [r0, #20]
 8012f62:	6103      	str	r3, [r0, #16]
 8012f64:	bd10      	pop	{r4, pc}
 8012f66:	bf00      	nop
 8012f68:	0801403f 	.word	0x0801403f
 8012f6c:	080140c7 	.word	0x080140c7

08012f70 <__multiply>:
 8012f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f74:	4614      	mov	r4, r2
 8012f76:	690a      	ldr	r2, [r1, #16]
 8012f78:	6923      	ldr	r3, [r4, #16]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	bfa8      	it	ge
 8012f7e:	4623      	movge	r3, r4
 8012f80:	460f      	mov	r7, r1
 8012f82:	bfa4      	itt	ge
 8012f84:	460c      	movge	r4, r1
 8012f86:	461f      	movge	r7, r3
 8012f88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012f8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012f90:	68a3      	ldr	r3, [r4, #8]
 8012f92:	6861      	ldr	r1, [r4, #4]
 8012f94:	eb0a 0609 	add.w	r6, sl, r9
 8012f98:	42b3      	cmp	r3, r6
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	bfb8      	it	lt
 8012f9e:	3101      	addlt	r1, #1
 8012fa0:	f7ff fe92 	bl	8012cc8 <_Balloc>
 8012fa4:	b930      	cbnz	r0, 8012fb4 <__multiply+0x44>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	4b44      	ldr	r3, [pc, #272]	@ (80130bc <__multiply+0x14c>)
 8012faa:	4845      	ldr	r0, [pc, #276]	@ (80130c0 <__multiply+0x150>)
 8012fac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012fb0:	f000 fbe8 	bl	8013784 <__assert_func>
 8012fb4:	f100 0514 	add.w	r5, r0, #20
 8012fb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fbc:	462b      	mov	r3, r5
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	4543      	cmp	r3, r8
 8012fc2:	d321      	bcc.n	8013008 <__multiply+0x98>
 8012fc4:	f107 0114 	add.w	r1, r7, #20
 8012fc8:	f104 0214 	add.w	r2, r4, #20
 8012fcc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012fd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012fd4:	9302      	str	r3, [sp, #8]
 8012fd6:	1b13      	subs	r3, r2, r4
 8012fd8:	3b15      	subs	r3, #21
 8012fda:	f023 0303 	bic.w	r3, r3, #3
 8012fde:	3304      	adds	r3, #4
 8012fe0:	f104 0715 	add.w	r7, r4, #21
 8012fe4:	42ba      	cmp	r2, r7
 8012fe6:	bf38      	it	cc
 8012fe8:	2304      	movcc	r3, #4
 8012fea:	9301      	str	r3, [sp, #4]
 8012fec:	9b02      	ldr	r3, [sp, #8]
 8012fee:	9103      	str	r1, [sp, #12]
 8012ff0:	428b      	cmp	r3, r1
 8012ff2:	d80c      	bhi.n	801300e <__multiply+0x9e>
 8012ff4:	2e00      	cmp	r6, #0
 8012ff6:	dd03      	ble.n	8013000 <__multiply+0x90>
 8012ff8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d05b      	beq.n	80130b8 <__multiply+0x148>
 8013000:	6106      	str	r6, [r0, #16]
 8013002:	b005      	add	sp, #20
 8013004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013008:	f843 2b04 	str.w	r2, [r3], #4
 801300c:	e7d8      	b.n	8012fc0 <__multiply+0x50>
 801300e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013012:	f1ba 0f00 	cmp.w	sl, #0
 8013016:	d024      	beq.n	8013062 <__multiply+0xf2>
 8013018:	f104 0e14 	add.w	lr, r4, #20
 801301c:	46a9      	mov	r9, r5
 801301e:	f04f 0c00 	mov.w	ip, #0
 8013022:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013026:	f8d9 3000 	ldr.w	r3, [r9]
 801302a:	fa1f fb87 	uxth.w	fp, r7
 801302e:	b29b      	uxth	r3, r3
 8013030:	fb0a 330b 	mla	r3, sl, fp, r3
 8013034:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013038:	f8d9 7000 	ldr.w	r7, [r9]
 801303c:	4463      	add	r3, ip
 801303e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013042:	fb0a c70b 	mla	r7, sl, fp, ip
 8013046:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801304a:	b29b      	uxth	r3, r3
 801304c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013050:	4572      	cmp	r2, lr
 8013052:	f849 3b04 	str.w	r3, [r9], #4
 8013056:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801305a:	d8e2      	bhi.n	8013022 <__multiply+0xb2>
 801305c:	9b01      	ldr	r3, [sp, #4]
 801305e:	f845 c003 	str.w	ip, [r5, r3]
 8013062:	9b03      	ldr	r3, [sp, #12]
 8013064:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013068:	3104      	adds	r1, #4
 801306a:	f1b9 0f00 	cmp.w	r9, #0
 801306e:	d021      	beq.n	80130b4 <__multiply+0x144>
 8013070:	682b      	ldr	r3, [r5, #0]
 8013072:	f104 0c14 	add.w	ip, r4, #20
 8013076:	46ae      	mov	lr, r5
 8013078:	f04f 0a00 	mov.w	sl, #0
 801307c:	f8bc b000 	ldrh.w	fp, [ip]
 8013080:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013084:	fb09 770b 	mla	r7, r9, fp, r7
 8013088:	4457      	add	r7, sl
 801308a:	b29b      	uxth	r3, r3
 801308c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013090:	f84e 3b04 	str.w	r3, [lr], #4
 8013094:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013098:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801309c:	f8be 3000 	ldrh.w	r3, [lr]
 80130a0:	fb09 330a 	mla	r3, r9, sl, r3
 80130a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80130a8:	4562      	cmp	r2, ip
 80130aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130ae:	d8e5      	bhi.n	801307c <__multiply+0x10c>
 80130b0:	9f01      	ldr	r7, [sp, #4]
 80130b2:	51eb      	str	r3, [r5, r7]
 80130b4:	3504      	adds	r5, #4
 80130b6:	e799      	b.n	8012fec <__multiply+0x7c>
 80130b8:	3e01      	subs	r6, #1
 80130ba:	e79b      	b.n	8012ff4 <__multiply+0x84>
 80130bc:	0801403f 	.word	0x0801403f
 80130c0:	080140c7 	.word	0x080140c7

080130c4 <__pow5mult>:
 80130c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130c8:	4615      	mov	r5, r2
 80130ca:	f012 0203 	ands.w	r2, r2, #3
 80130ce:	4607      	mov	r7, r0
 80130d0:	460e      	mov	r6, r1
 80130d2:	d007      	beq.n	80130e4 <__pow5mult+0x20>
 80130d4:	4c25      	ldr	r4, [pc, #148]	@ (801316c <__pow5mult+0xa8>)
 80130d6:	3a01      	subs	r2, #1
 80130d8:	2300      	movs	r3, #0
 80130da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130de:	f7ff fe55 	bl	8012d8c <__multadd>
 80130e2:	4606      	mov	r6, r0
 80130e4:	10ad      	asrs	r5, r5, #2
 80130e6:	d03d      	beq.n	8013164 <__pow5mult+0xa0>
 80130e8:	69fc      	ldr	r4, [r7, #28]
 80130ea:	b97c      	cbnz	r4, 801310c <__pow5mult+0x48>
 80130ec:	2010      	movs	r0, #16
 80130ee:	f7fc fe43 	bl	800fd78 <malloc>
 80130f2:	4602      	mov	r2, r0
 80130f4:	61f8      	str	r0, [r7, #28]
 80130f6:	b928      	cbnz	r0, 8013104 <__pow5mult+0x40>
 80130f8:	4b1d      	ldr	r3, [pc, #116]	@ (8013170 <__pow5mult+0xac>)
 80130fa:	481e      	ldr	r0, [pc, #120]	@ (8013174 <__pow5mult+0xb0>)
 80130fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013100:	f000 fb40 	bl	8013784 <__assert_func>
 8013104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013108:	6004      	str	r4, [r0, #0]
 801310a:	60c4      	str	r4, [r0, #12]
 801310c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013114:	b94c      	cbnz	r4, 801312a <__pow5mult+0x66>
 8013116:	f240 2171 	movw	r1, #625	@ 0x271
 801311a:	4638      	mov	r0, r7
 801311c:	f7ff ff12 	bl	8012f44 <__i2b>
 8013120:	2300      	movs	r3, #0
 8013122:	f8c8 0008 	str.w	r0, [r8, #8]
 8013126:	4604      	mov	r4, r0
 8013128:	6003      	str	r3, [r0, #0]
 801312a:	f04f 0900 	mov.w	r9, #0
 801312e:	07eb      	lsls	r3, r5, #31
 8013130:	d50a      	bpl.n	8013148 <__pow5mult+0x84>
 8013132:	4631      	mov	r1, r6
 8013134:	4622      	mov	r2, r4
 8013136:	4638      	mov	r0, r7
 8013138:	f7ff ff1a 	bl	8012f70 <__multiply>
 801313c:	4631      	mov	r1, r6
 801313e:	4680      	mov	r8, r0
 8013140:	4638      	mov	r0, r7
 8013142:	f7ff fe01 	bl	8012d48 <_Bfree>
 8013146:	4646      	mov	r6, r8
 8013148:	106d      	asrs	r5, r5, #1
 801314a:	d00b      	beq.n	8013164 <__pow5mult+0xa0>
 801314c:	6820      	ldr	r0, [r4, #0]
 801314e:	b938      	cbnz	r0, 8013160 <__pow5mult+0x9c>
 8013150:	4622      	mov	r2, r4
 8013152:	4621      	mov	r1, r4
 8013154:	4638      	mov	r0, r7
 8013156:	f7ff ff0b 	bl	8012f70 <__multiply>
 801315a:	6020      	str	r0, [r4, #0]
 801315c:	f8c0 9000 	str.w	r9, [r0]
 8013160:	4604      	mov	r4, r0
 8013162:	e7e4      	b.n	801312e <__pow5mult+0x6a>
 8013164:	4630      	mov	r0, r6
 8013166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801316a:	bf00      	nop
 801316c:	08014120 	.word	0x08014120
 8013170:	080140b0 	.word	0x080140b0
 8013174:	080140c7 	.word	0x080140c7

08013178 <__lshift>:
 8013178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801317c:	460c      	mov	r4, r1
 801317e:	6849      	ldr	r1, [r1, #4]
 8013180:	6923      	ldr	r3, [r4, #16]
 8013182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013186:	68a3      	ldr	r3, [r4, #8]
 8013188:	4607      	mov	r7, r0
 801318a:	4691      	mov	r9, r2
 801318c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013190:	f108 0601 	add.w	r6, r8, #1
 8013194:	42b3      	cmp	r3, r6
 8013196:	db0b      	blt.n	80131b0 <__lshift+0x38>
 8013198:	4638      	mov	r0, r7
 801319a:	f7ff fd95 	bl	8012cc8 <_Balloc>
 801319e:	4605      	mov	r5, r0
 80131a0:	b948      	cbnz	r0, 80131b6 <__lshift+0x3e>
 80131a2:	4602      	mov	r2, r0
 80131a4:	4b28      	ldr	r3, [pc, #160]	@ (8013248 <__lshift+0xd0>)
 80131a6:	4829      	ldr	r0, [pc, #164]	@ (801324c <__lshift+0xd4>)
 80131a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80131ac:	f000 faea 	bl	8013784 <__assert_func>
 80131b0:	3101      	adds	r1, #1
 80131b2:	005b      	lsls	r3, r3, #1
 80131b4:	e7ee      	b.n	8013194 <__lshift+0x1c>
 80131b6:	2300      	movs	r3, #0
 80131b8:	f100 0114 	add.w	r1, r0, #20
 80131bc:	f100 0210 	add.w	r2, r0, #16
 80131c0:	4618      	mov	r0, r3
 80131c2:	4553      	cmp	r3, sl
 80131c4:	db33      	blt.n	801322e <__lshift+0xb6>
 80131c6:	6920      	ldr	r0, [r4, #16]
 80131c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131cc:	f104 0314 	add.w	r3, r4, #20
 80131d0:	f019 091f 	ands.w	r9, r9, #31
 80131d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131dc:	d02b      	beq.n	8013236 <__lshift+0xbe>
 80131de:	f1c9 0e20 	rsb	lr, r9, #32
 80131e2:	468a      	mov	sl, r1
 80131e4:	2200      	movs	r2, #0
 80131e6:	6818      	ldr	r0, [r3, #0]
 80131e8:	fa00 f009 	lsl.w	r0, r0, r9
 80131ec:	4310      	orrs	r0, r2
 80131ee:	f84a 0b04 	str.w	r0, [sl], #4
 80131f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80131f6:	459c      	cmp	ip, r3
 80131f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80131fc:	d8f3      	bhi.n	80131e6 <__lshift+0x6e>
 80131fe:	ebac 0304 	sub.w	r3, ip, r4
 8013202:	3b15      	subs	r3, #21
 8013204:	f023 0303 	bic.w	r3, r3, #3
 8013208:	3304      	adds	r3, #4
 801320a:	f104 0015 	add.w	r0, r4, #21
 801320e:	4584      	cmp	ip, r0
 8013210:	bf38      	it	cc
 8013212:	2304      	movcc	r3, #4
 8013214:	50ca      	str	r2, [r1, r3]
 8013216:	b10a      	cbz	r2, 801321c <__lshift+0xa4>
 8013218:	f108 0602 	add.w	r6, r8, #2
 801321c:	3e01      	subs	r6, #1
 801321e:	4638      	mov	r0, r7
 8013220:	612e      	str	r6, [r5, #16]
 8013222:	4621      	mov	r1, r4
 8013224:	f7ff fd90 	bl	8012d48 <_Bfree>
 8013228:	4628      	mov	r0, r5
 801322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801322e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013232:	3301      	adds	r3, #1
 8013234:	e7c5      	b.n	80131c2 <__lshift+0x4a>
 8013236:	3904      	subs	r1, #4
 8013238:	f853 2b04 	ldr.w	r2, [r3], #4
 801323c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013240:	459c      	cmp	ip, r3
 8013242:	d8f9      	bhi.n	8013238 <__lshift+0xc0>
 8013244:	e7ea      	b.n	801321c <__lshift+0xa4>
 8013246:	bf00      	nop
 8013248:	0801403f 	.word	0x0801403f
 801324c:	080140c7 	.word	0x080140c7

08013250 <__mcmp>:
 8013250:	690a      	ldr	r2, [r1, #16]
 8013252:	4603      	mov	r3, r0
 8013254:	6900      	ldr	r0, [r0, #16]
 8013256:	1a80      	subs	r0, r0, r2
 8013258:	b530      	push	{r4, r5, lr}
 801325a:	d10e      	bne.n	801327a <__mcmp+0x2a>
 801325c:	3314      	adds	r3, #20
 801325e:	3114      	adds	r1, #20
 8013260:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013264:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013268:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801326c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013270:	4295      	cmp	r5, r2
 8013272:	d003      	beq.n	801327c <__mcmp+0x2c>
 8013274:	d205      	bcs.n	8013282 <__mcmp+0x32>
 8013276:	f04f 30ff 	mov.w	r0, #4294967295
 801327a:	bd30      	pop	{r4, r5, pc}
 801327c:	42a3      	cmp	r3, r4
 801327e:	d3f3      	bcc.n	8013268 <__mcmp+0x18>
 8013280:	e7fb      	b.n	801327a <__mcmp+0x2a>
 8013282:	2001      	movs	r0, #1
 8013284:	e7f9      	b.n	801327a <__mcmp+0x2a>
	...

08013288 <__mdiff>:
 8013288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801328c:	4689      	mov	r9, r1
 801328e:	4606      	mov	r6, r0
 8013290:	4611      	mov	r1, r2
 8013292:	4648      	mov	r0, r9
 8013294:	4614      	mov	r4, r2
 8013296:	f7ff ffdb 	bl	8013250 <__mcmp>
 801329a:	1e05      	subs	r5, r0, #0
 801329c:	d112      	bne.n	80132c4 <__mdiff+0x3c>
 801329e:	4629      	mov	r1, r5
 80132a0:	4630      	mov	r0, r6
 80132a2:	f7ff fd11 	bl	8012cc8 <_Balloc>
 80132a6:	4602      	mov	r2, r0
 80132a8:	b928      	cbnz	r0, 80132b6 <__mdiff+0x2e>
 80132aa:	4b3f      	ldr	r3, [pc, #252]	@ (80133a8 <__mdiff+0x120>)
 80132ac:	f240 2137 	movw	r1, #567	@ 0x237
 80132b0:	483e      	ldr	r0, [pc, #248]	@ (80133ac <__mdiff+0x124>)
 80132b2:	f000 fa67 	bl	8013784 <__assert_func>
 80132b6:	2301      	movs	r3, #1
 80132b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132bc:	4610      	mov	r0, r2
 80132be:	b003      	add	sp, #12
 80132c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c4:	bfbc      	itt	lt
 80132c6:	464b      	movlt	r3, r9
 80132c8:	46a1      	movlt	r9, r4
 80132ca:	4630      	mov	r0, r6
 80132cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80132d0:	bfba      	itte	lt
 80132d2:	461c      	movlt	r4, r3
 80132d4:	2501      	movlt	r5, #1
 80132d6:	2500      	movge	r5, #0
 80132d8:	f7ff fcf6 	bl	8012cc8 <_Balloc>
 80132dc:	4602      	mov	r2, r0
 80132de:	b918      	cbnz	r0, 80132e8 <__mdiff+0x60>
 80132e0:	4b31      	ldr	r3, [pc, #196]	@ (80133a8 <__mdiff+0x120>)
 80132e2:	f240 2145 	movw	r1, #581	@ 0x245
 80132e6:	e7e3      	b.n	80132b0 <__mdiff+0x28>
 80132e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80132ec:	6926      	ldr	r6, [r4, #16]
 80132ee:	60c5      	str	r5, [r0, #12]
 80132f0:	f109 0310 	add.w	r3, r9, #16
 80132f4:	f109 0514 	add.w	r5, r9, #20
 80132f8:	f104 0e14 	add.w	lr, r4, #20
 80132fc:	f100 0b14 	add.w	fp, r0, #20
 8013300:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013304:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013308:	9301      	str	r3, [sp, #4]
 801330a:	46d9      	mov	r9, fp
 801330c:	f04f 0c00 	mov.w	ip, #0
 8013310:	9b01      	ldr	r3, [sp, #4]
 8013312:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013316:	f853 af04 	ldr.w	sl, [r3, #4]!
 801331a:	9301      	str	r3, [sp, #4]
 801331c:	fa1f f38a 	uxth.w	r3, sl
 8013320:	4619      	mov	r1, r3
 8013322:	b283      	uxth	r3, r0
 8013324:	1acb      	subs	r3, r1, r3
 8013326:	0c00      	lsrs	r0, r0, #16
 8013328:	4463      	add	r3, ip
 801332a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801332e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013332:	b29b      	uxth	r3, r3
 8013334:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013338:	4576      	cmp	r6, lr
 801333a:	f849 3b04 	str.w	r3, [r9], #4
 801333e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013342:	d8e5      	bhi.n	8013310 <__mdiff+0x88>
 8013344:	1b33      	subs	r3, r6, r4
 8013346:	3b15      	subs	r3, #21
 8013348:	f023 0303 	bic.w	r3, r3, #3
 801334c:	3415      	adds	r4, #21
 801334e:	3304      	adds	r3, #4
 8013350:	42a6      	cmp	r6, r4
 8013352:	bf38      	it	cc
 8013354:	2304      	movcc	r3, #4
 8013356:	441d      	add	r5, r3
 8013358:	445b      	add	r3, fp
 801335a:	461e      	mov	r6, r3
 801335c:	462c      	mov	r4, r5
 801335e:	4544      	cmp	r4, r8
 8013360:	d30e      	bcc.n	8013380 <__mdiff+0xf8>
 8013362:	f108 0103 	add.w	r1, r8, #3
 8013366:	1b49      	subs	r1, r1, r5
 8013368:	f021 0103 	bic.w	r1, r1, #3
 801336c:	3d03      	subs	r5, #3
 801336e:	45a8      	cmp	r8, r5
 8013370:	bf38      	it	cc
 8013372:	2100      	movcc	r1, #0
 8013374:	440b      	add	r3, r1
 8013376:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801337a:	b191      	cbz	r1, 80133a2 <__mdiff+0x11a>
 801337c:	6117      	str	r7, [r2, #16]
 801337e:	e79d      	b.n	80132bc <__mdiff+0x34>
 8013380:	f854 1b04 	ldr.w	r1, [r4], #4
 8013384:	46e6      	mov	lr, ip
 8013386:	0c08      	lsrs	r0, r1, #16
 8013388:	fa1c fc81 	uxtah	ip, ip, r1
 801338c:	4471      	add	r1, lr
 801338e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013392:	b289      	uxth	r1, r1
 8013394:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013398:	f846 1b04 	str.w	r1, [r6], #4
 801339c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80133a0:	e7dd      	b.n	801335e <__mdiff+0xd6>
 80133a2:	3f01      	subs	r7, #1
 80133a4:	e7e7      	b.n	8013376 <__mdiff+0xee>
 80133a6:	bf00      	nop
 80133a8:	0801403f 	.word	0x0801403f
 80133ac:	080140c7 	.word	0x080140c7

080133b0 <__ulp>:
 80133b0:	b082      	sub	sp, #8
 80133b2:	ed8d 0b00 	vstr	d0, [sp]
 80133b6:	9a01      	ldr	r2, [sp, #4]
 80133b8:	4b0f      	ldr	r3, [pc, #60]	@ (80133f8 <__ulp+0x48>)
 80133ba:	4013      	ands	r3, r2
 80133bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	dc08      	bgt.n	80133d6 <__ulp+0x26>
 80133c4:	425b      	negs	r3, r3
 80133c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80133ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80133ce:	da04      	bge.n	80133da <__ulp+0x2a>
 80133d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80133d4:	4113      	asrs	r3, r2
 80133d6:	2200      	movs	r2, #0
 80133d8:	e008      	b.n	80133ec <__ulp+0x3c>
 80133da:	f1a2 0314 	sub.w	r3, r2, #20
 80133de:	2b1e      	cmp	r3, #30
 80133e0:	bfda      	itte	le
 80133e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80133e6:	40da      	lsrle	r2, r3
 80133e8:	2201      	movgt	r2, #1
 80133ea:	2300      	movs	r3, #0
 80133ec:	4619      	mov	r1, r3
 80133ee:	4610      	mov	r0, r2
 80133f0:	ec41 0b10 	vmov	d0, r0, r1
 80133f4:	b002      	add	sp, #8
 80133f6:	4770      	bx	lr
 80133f8:	7ff00000 	.word	0x7ff00000

080133fc <__b2d>:
 80133fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013400:	6906      	ldr	r6, [r0, #16]
 8013402:	f100 0814 	add.w	r8, r0, #20
 8013406:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801340a:	1f37      	subs	r7, r6, #4
 801340c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013410:	4610      	mov	r0, r2
 8013412:	f7ff fd4b 	bl	8012eac <__hi0bits>
 8013416:	f1c0 0320 	rsb	r3, r0, #32
 801341a:	280a      	cmp	r0, #10
 801341c:	600b      	str	r3, [r1, #0]
 801341e:	491b      	ldr	r1, [pc, #108]	@ (801348c <__b2d+0x90>)
 8013420:	dc15      	bgt.n	801344e <__b2d+0x52>
 8013422:	f1c0 0c0b 	rsb	ip, r0, #11
 8013426:	fa22 f30c 	lsr.w	r3, r2, ip
 801342a:	45b8      	cmp	r8, r7
 801342c:	ea43 0501 	orr.w	r5, r3, r1
 8013430:	bf34      	ite	cc
 8013432:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013436:	2300      	movcs	r3, #0
 8013438:	3015      	adds	r0, #21
 801343a:	fa02 f000 	lsl.w	r0, r2, r0
 801343e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013442:	4303      	orrs	r3, r0
 8013444:	461c      	mov	r4, r3
 8013446:	ec45 4b10 	vmov	d0, r4, r5
 801344a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801344e:	45b8      	cmp	r8, r7
 8013450:	bf3a      	itte	cc
 8013452:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013456:	f1a6 0708 	subcc.w	r7, r6, #8
 801345a:	2300      	movcs	r3, #0
 801345c:	380b      	subs	r0, #11
 801345e:	d012      	beq.n	8013486 <__b2d+0x8a>
 8013460:	f1c0 0120 	rsb	r1, r0, #32
 8013464:	fa23 f401 	lsr.w	r4, r3, r1
 8013468:	4082      	lsls	r2, r0
 801346a:	4322      	orrs	r2, r4
 801346c:	4547      	cmp	r7, r8
 801346e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013472:	bf8c      	ite	hi
 8013474:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013478:	2200      	movls	r2, #0
 801347a:	4083      	lsls	r3, r0
 801347c:	40ca      	lsrs	r2, r1
 801347e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013482:	4313      	orrs	r3, r2
 8013484:	e7de      	b.n	8013444 <__b2d+0x48>
 8013486:	ea42 0501 	orr.w	r5, r2, r1
 801348a:	e7db      	b.n	8013444 <__b2d+0x48>
 801348c:	3ff00000 	.word	0x3ff00000

08013490 <__d2b>:
 8013490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013494:	460f      	mov	r7, r1
 8013496:	2101      	movs	r1, #1
 8013498:	ec59 8b10 	vmov	r8, r9, d0
 801349c:	4616      	mov	r6, r2
 801349e:	f7ff fc13 	bl	8012cc8 <_Balloc>
 80134a2:	4604      	mov	r4, r0
 80134a4:	b930      	cbnz	r0, 80134b4 <__d2b+0x24>
 80134a6:	4602      	mov	r2, r0
 80134a8:	4b23      	ldr	r3, [pc, #140]	@ (8013538 <__d2b+0xa8>)
 80134aa:	4824      	ldr	r0, [pc, #144]	@ (801353c <__d2b+0xac>)
 80134ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80134b0:	f000 f968 	bl	8013784 <__assert_func>
 80134b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80134b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80134bc:	b10d      	cbz	r5, 80134c2 <__d2b+0x32>
 80134be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80134c2:	9301      	str	r3, [sp, #4]
 80134c4:	f1b8 0300 	subs.w	r3, r8, #0
 80134c8:	d023      	beq.n	8013512 <__d2b+0x82>
 80134ca:	4668      	mov	r0, sp
 80134cc:	9300      	str	r3, [sp, #0]
 80134ce:	f7ff fd0c 	bl	8012eea <__lo0bits>
 80134d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80134d6:	b1d0      	cbz	r0, 801350e <__d2b+0x7e>
 80134d8:	f1c0 0320 	rsb	r3, r0, #32
 80134dc:	fa02 f303 	lsl.w	r3, r2, r3
 80134e0:	430b      	orrs	r3, r1
 80134e2:	40c2      	lsrs	r2, r0
 80134e4:	6163      	str	r3, [r4, #20]
 80134e6:	9201      	str	r2, [sp, #4]
 80134e8:	9b01      	ldr	r3, [sp, #4]
 80134ea:	61a3      	str	r3, [r4, #24]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	bf0c      	ite	eq
 80134f0:	2201      	moveq	r2, #1
 80134f2:	2202      	movne	r2, #2
 80134f4:	6122      	str	r2, [r4, #16]
 80134f6:	b1a5      	cbz	r5, 8013522 <__d2b+0x92>
 80134f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80134fc:	4405      	add	r5, r0
 80134fe:	603d      	str	r5, [r7, #0]
 8013500:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013504:	6030      	str	r0, [r6, #0]
 8013506:	4620      	mov	r0, r4
 8013508:	b003      	add	sp, #12
 801350a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801350e:	6161      	str	r1, [r4, #20]
 8013510:	e7ea      	b.n	80134e8 <__d2b+0x58>
 8013512:	a801      	add	r0, sp, #4
 8013514:	f7ff fce9 	bl	8012eea <__lo0bits>
 8013518:	9b01      	ldr	r3, [sp, #4]
 801351a:	6163      	str	r3, [r4, #20]
 801351c:	3020      	adds	r0, #32
 801351e:	2201      	movs	r2, #1
 8013520:	e7e8      	b.n	80134f4 <__d2b+0x64>
 8013522:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013526:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801352a:	6038      	str	r0, [r7, #0]
 801352c:	6918      	ldr	r0, [r3, #16]
 801352e:	f7ff fcbd 	bl	8012eac <__hi0bits>
 8013532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013536:	e7e5      	b.n	8013504 <__d2b+0x74>
 8013538:	0801403f 	.word	0x0801403f
 801353c:	080140c7 	.word	0x080140c7

08013540 <__ratio>:
 8013540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013544:	b085      	sub	sp, #20
 8013546:	e9cd 1000 	strd	r1, r0, [sp]
 801354a:	a902      	add	r1, sp, #8
 801354c:	f7ff ff56 	bl	80133fc <__b2d>
 8013550:	9800      	ldr	r0, [sp, #0]
 8013552:	a903      	add	r1, sp, #12
 8013554:	ec55 4b10 	vmov	r4, r5, d0
 8013558:	f7ff ff50 	bl	80133fc <__b2d>
 801355c:	9b01      	ldr	r3, [sp, #4]
 801355e:	6919      	ldr	r1, [r3, #16]
 8013560:	9b00      	ldr	r3, [sp, #0]
 8013562:	691b      	ldr	r3, [r3, #16]
 8013564:	1ac9      	subs	r1, r1, r3
 8013566:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801356a:	1a9b      	subs	r3, r3, r2
 801356c:	ec5b ab10 	vmov	sl, fp, d0
 8013570:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013574:	2b00      	cmp	r3, #0
 8013576:	bfce      	itee	gt
 8013578:	462a      	movgt	r2, r5
 801357a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801357e:	465a      	movle	r2, fp
 8013580:	462f      	mov	r7, r5
 8013582:	46d9      	mov	r9, fp
 8013584:	bfcc      	ite	gt
 8013586:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801358a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801358e:	464b      	mov	r3, r9
 8013590:	4652      	mov	r2, sl
 8013592:	4620      	mov	r0, r4
 8013594:	4639      	mov	r1, r7
 8013596:	f7ed f969 	bl	800086c <__aeabi_ddiv>
 801359a:	ec41 0b10 	vmov	d0, r0, r1
 801359e:	b005      	add	sp, #20
 80135a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135a4 <__copybits>:
 80135a4:	3901      	subs	r1, #1
 80135a6:	b570      	push	{r4, r5, r6, lr}
 80135a8:	1149      	asrs	r1, r1, #5
 80135aa:	6914      	ldr	r4, [r2, #16]
 80135ac:	3101      	adds	r1, #1
 80135ae:	f102 0314 	add.w	r3, r2, #20
 80135b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80135b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135ba:	1f05      	subs	r5, r0, #4
 80135bc:	42a3      	cmp	r3, r4
 80135be:	d30c      	bcc.n	80135da <__copybits+0x36>
 80135c0:	1aa3      	subs	r3, r4, r2
 80135c2:	3b11      	subs	r3, #17
 80135c4:	f023 0303 	bic.w	r3, r3, #3
 80135c8:	3211      	adds	r2, #17
 80135ca:	42a2      	cmp	r2, r4
 80135cc:	bf88      	it	hi
 80135ce:	2300      	movhi	r3, #0
 80135d0:	4418      	add	r0, r3
 80135d2:	2300      	movs	r3, #0
 80135d4:	4288      	cmp	r0, r1
 80135d6:	d305      	bcc.n	80135e4 <__copybits+0x40>
 80135d8:	bd70      	pop	{r4, r5, r6, pc}
 80135da:	f853 6b04 	ldr.w	r6, [r3], #4
 80135de:	f845 6f04 	str.w	r6, [r5, #4]!
 80135e2:	e7eb      	b.n	80135bc <__copybits+0x18>
 80135e4:	f840 3b04 	str.w	r3, [r0], #4
 80135e8:	e7f4      	b.n	80135d4 <__copybits+0x30>

080135ea <__any_on>:
 80135ea:	f100 0214 	add.w	r2, r0, #20
 80135ee:	6900      	ldr	r0, [r0, #16]
 80135f0:	114b      	asrs	r3, r1, #5
 80135f2:	4298      	cmp	r0, r3
 80135f4:	b510      	push	{r4, lr}
 80135f6:	db11      	blt.n	801361c <__any_on+0x32>
 80135f8:	dd0a      	ble.n	8013610 <__any_on+0x26>
 80135fa:	f011 011f 	ands.w	r1, r1, #31
 80135fe:	d007      	beq.n	8013610 <__any_on+0x26>
 8013600:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013604:	fa24 f001 	lsr.w	r0, r4, r1
 8013608:	fa00 f101 	lsl.w	r1, r0, r1
 801360c:	428c      	cmp	r4, r1
 801360e:	d10b      	bne.n	8013628 <__any_on+0x3e>
 8013610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013614:	4293      	cmp	r3, r2
 8013616:	d803      	bhi.n	8013620 <__any_on+0x36>
 8013618:	2000      	movs	r0, #0
 801361a:	bd10      	pop	{r4, pc}
 801361c:	4603      	mov	r3, r0
 801361e:	e7f7      	b.n	8013610 <__any_on+0x26>
 8013620:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013624:	2900      	cmp	r1, #0
 8013626:	d0f5      	beq.n	8013614 <__any_on+0x2a>
 8013628:	2001      	movs	r0, #1
 801362a:	e7f6      	b.n	801361a <__any_on+0x30>

0801362c <_realloc_r>:
 801362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013630:	4680      	mov	r8, r0
 8013632:	4615      	mov	r5, r2
 8013634:	460c      	mov	r4, r1
 8013636:	b921      	cbnz	r1, 8013642 <_realloc_r+0x16>
 8013638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801363c:	4611      	mov	r1, r2
 801363e:	f7fc bbcd 	b.w	800fddc <_malloc_r>
 8013642:	b92a      	cbnz	r2, 8013650 <_realloc_r+0x24>
 8013644:	f7fd f960 	bl	8010908 <_free_r>
 8013648:	2400      	movs	r4, #0
 801364a:	4620      	mov	r0, r4
 801364c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013650:	f000 f8ca 	bl	80137e8 <_malloc_usable_size_r>
 8013654:	4285      	cmp	r5, r0
 8013656:	4606      	mov	r6, r0
 8013658:	d802      	bhi.n	8013660 <_realloc_r+0x34>
 801365a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801365e:	d8f4      	bhi.n	801364a <_realloc_r+0x1e>
 8013660:	4629      	mov	r1, r5
 8013662:	4640      	mov	r0, r8
 8013664:	f7fc fbba 	bl	800fddc <_malloc_r>
 8013668:	4607      	mov	r7, r0
 801366a:	2800      	cmp	r0, #0
 801366c:	d0ec      	beq.n	8013648 <_realloc_r+0x1c>
 801366e:	42b5      	cmp	r5, r6
 8013670:	462a      	mov	r2, r5
 8013672:	4621      	mov	r1, r4
 8013674:	bf28      	it	cs
 8013676:	4632      	movcs	r2, r6
 8013678:	f7fd f931 	bl	80108de <memcpy>
 801367c:	4621      	mov	r1, r4
 801367e:	4640      	mov	r0, r8
 8013680:	f7fd f942 	bl	8010908 <_free_r>
 8013684:	463c      	mov	r4, r7
 8013686:	e7e0      	b.n	801364a <_realloc_r+0x1e>

08013688 <_strtoul_l.constprop.0>:
 8013688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801368c:	4e34      	ldr	r6, [pc, #208]	@ (8013760 <_strtoul_l.constprop.0+0xd8>)
 801368e:	4686      	mov	lr, r0
 8013690:	460d      	mov	r5, r1
 8013692:	4628      	mov	r0, r5
 8013694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013698:	5d37      	ldrb	r7, [r6, r4]
 801369a:	f017 0708 	ands.w	r7, r7, #8
 801369e:	d1f8      	bne.n	8013692 <_strtoul_l.constprop.0+0xa>
 80136a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80136a2:	d12f      	bne.n	8013704 <_strtoul_l.constprop.0+0x7c>
 80136a4:	782c      	ldrb	r4, [r5, #0]
 80136a6:	2701      	movs	r7, #1
 80136a8:	1c85      	adds	r5, r0, #2
 80136aa:	f033 0010 	bics.w	r0, r3, #16
 80136ae:	d109      	bne.n	80136c4 <_strtoul_l.constprop.0+0x3c>
 80136b0:	2c30      	cmp	r4, #48	@ 0x30
 80136b2:	d12c      	bne.n	801370e <_strtoul_l.constprop.0+0x86>
 80136b4:	7828      	ldrb	r0, [r5, #0]
 80136b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80136ba:	2858      	cmp	r0, #88	@ 0x58
 80136bc:	d127      	bne.n	801370e <_strtoul_l.constprop.0+0x86>
 80136be:	786c      	ldrb	r4, [r5, #1]
 80136c0:	2310      	movs	r3, #16
 80136c2:	3502      	adds	r5, #2
 80136c4:	f04f 38ff 	mov.w	r8, #4294967295
 80136c8:	2600      	movs	r6, #0
 80136ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80136ce:	fb03 f908 	mul.w	r9, r3, r8
 80136d2:	ea6f 0909 	mvn.w	r9, r9
 80136d6:	4630      	mov	r0, r6
 80136d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80136dc:	f1bc 0f09 	cmp.w	ip, #9
 80136e0:	d81c      	bhi.n	801371c <_strtoul_l.constprop.0+0x94>
 80136e2:	4664      	mov	r4, ip
 80136e4:	42a3      	cmp	r3, r4
 80136e6:	dd2a      	ble.n	801373e <_strtoul_l.constprop.0+0xb6>
 80136e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80136ec:	d007      	beq.n	80136fe <_strtoul_l.constprop.0+0x76>
 80136ee:	4580      	cmp	r8, r0
 80136f0:	d322      	bcc.n	8013738 <_strtoul_l.constprop.0+0xb0>
 80136f2:	d101      	bne.n	80136f8 <_strtoul_l.constprop.0+0x70>
 80136f4:	45a1      	cmp	r9, r4
 80136f6:	db1f      	blt.n	8013738 <_strtoul_l.constprop.0+0xb0>
 80136f8:	fb00 4003 	mla	r0, r0, r3, r4
 80136fc:	2601      	movs	r6, #1
 80136fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013702:	e7e9      	b.n	80136d8 <_strtoul_l.constprop.0+0x50>
 8013704:	2c2b      	cmp	r4, #43	@ 0x2b
 8013706:	bf04      	itt	eq
 8013708:	782c      	ldrbeq	r4, [r5, #0]
 801370a:	1c85      	addeq	r5, r0, #2
 801370c:	e7cd      	b.n	80136aa <_strtoul_l.constprop.0+0x22>
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1d8      	bne.n	80136c4 <_strtoul_l.constprop.0+0x3c>
 8013712:	2c30      	cmp	r4, #48	@ 0x30
 8013714:	bf0c      	ite	eq
 8013716:	2308      	moveq	r3, #8
 8013718:	230a      	movne	r3, #10
 801371a:	e7d3      	b.n	80136c4 <_strtoul_l.constprop.0+0x3c>
 801371c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013720:	f1bc 0f19 	cmp.w	ip, #25
 8013724:	d801      	bhi.n	801372a <_strtoul_l.constprop.0+0xa2>
 8013726:	3c37      	subs	r4, #55	@ 0x37
 8013728:	e7dc      	b.n	80136e4 <_strtoul_l.constprop.0+0x5c>
 801372a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801372e:	f1bc 0f19 	cmp.w	ip, #25
 8013732:	d804      	bhi.n	801373e <_strtoul_l.constprop.0+0xb6>
 8013734:	3c57      	subs	r4, #87	@ 0x57
 8013736:	e7d5      	b.n	80136e4 <_strtoul_l.constprop.0+0x5c>
 8013738:	f04f 36ff 	mov.w	r6, #4294967295
 801373c:	e7df      	b.n	80136fe <_strtoul_l.constprop.0+0x76>
 801373e:	1c73      	adds	r3, r6, #1
 8013740:	d106      	bne.n	8013750 <_strtoul_l.constprop.0+0xc8>
 8013742:	2322      	movs	r3, #34	@ 0x22
 8013744:	f8ce 3000 	str.w	r3, [lr]
 8013748:	4630      	mov	r0, r6
 801374a:	b932      	cbnz	r2, 801375a <_strtoul_l.constprop.0+0xd2>
 801374c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013750:	b107      	cbz	r7, 8013754 <_strtoul_l.constprop.0+0xcc>
 8013752:	4240      	negs	r0, r0
 8013754:	2a00      	cmp	r2, #0
 8013756:	d0f9      	beq.n	801374c <_strtoul_l.constprop.0+0xc4>
 8013758:	b106      	cbz	r6, 801375c <_strtoul_l.constprop.0+0xd4>
 801375a:	1e69      	subs	r1, r5, #1
 801375c:	6011      	str	r1, [r2, #0]
 801375e:	e7f5      	b.n	801374c <_strtoul_l.constprop.0+0xc4>
 8013760:	08013ee9 	.word	0x08013ee9

08013764 <_strtoul_r>:
 8013764:	f7ff bf90 	b.w	8013688 <_strtoul_l.constprop.0>

08013768 <__ascii_wctomb>:
 8013768:	4603      	mov	r3, r0
 801376a:	4608      	mov	r0, r1
 801376c:	b141      	cbz	r1, 8013780 <__ascii_wctomb+0x18>
 801376e:	2aff      	cmp	r2, #255	@ 0xff
 8013770:	d904      	bls.n	801377c <__ascii_wctomb+0x14>
 8013772:	228a      	movs	r2, #138	@ 0x8a
 8013774:	601a      	str	r2, [r3, #0]
 8013776:	f04f 30ff 	mov.w	r0, #4294967295
 801377a:	4770      	bx	lr
 801377c:	700a      	strb	r2, [r1, #0]
 801377e:	2001      	movs	r0, #1
 8013780:	4770      	bx	lr
	...

08013784 <__assert_func>:
 8013784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013786:	4614      	mov	r4, r2
 8013788:	461a      	mov	r2, r3
 801378a:	4b09      	ldr	r3, [pc, #36]	@ (80137b0 <__assert_func+0x2c>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	4605      	mov	r5, r0
 8013790:	68d8      	ldr	r0, [r3, #12]
 8013792:	b954      	cbnz	r4, 80137aa <__assert_func+0x26>
 8013794:	4b07      	ldr	r3, [pc, #28]	@ (80137b4 <__assert_func+0x30>)
 8013796:	461c      	mov	r4, r3
 8013798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801379c:	9100      	str	r1, [sp, #0]
 801379e:	462b      	mov	r3, r5
 80137a0:	4905      	ldr	r1, [pc, #20]	@ (80137b8 <__assert_func+0x34>)
 80137a2:	f000 f829 	bl	80137f8 <fiprintf>
 80137a6:	f000 f839 	bl	801381c <abort>
 80137aa:	4b04      	ldr	r3, [pc, #16]	@ (80137bc <__assert_func+0x38>)
 80137ac:	e7f4      	b.n	8013798 <__assert_func+0x14>
 80137ae:	bf00      	nop
 80137b0:	2000001c 	.word	0x2000001c
 80137b4:	0801425b 	.word	0x0801425b
 80137b8:	0801422d 	.word	0x0801422d
 80137bc:	08014220 	.word	0x08014220

080137c0 <_calloc_r>:
 80137c0:	b570      	push	{r4, r5, r6, lr}
 80137c2:	fba1 5402 	umull	r5, r4, r1, r2
 80137c6:	b93c      	cbnz	r4, 80137d8 <_calloc_r+0x18>
 80137c8:	4629      	mov	r1, r5
 80137ca:	f7fc fb07 	bl	800fddc <_malloc_r>
 80137ce:	4606      	mov	r6, r0
 80137d0:	b928      	cbnz	r0, 80137de <_calloc_r+0x1e>
 80137d2:	2600      	movs	r6, #0
 80137d4:	4630      	mov	r0, r6
 80137d6:	bd70      	pop	{r4, r5, r6, pc}
 80137d8:	220c      	movs	r2, #12
 80137da:	6002      	str	r2, [r0, #0]
 80137dc:	e7f9      	b.n	80137d2 <_calloc_r+0x12>
 80137de:	462a      	mov	r2, r5
 80137e0:	4621      	mov	r1, r4
 80137e2:	f7fc ffdf 	bl	80107a4 <memset>
 80137e6:	e7f5      	b.n	80137d4 <_calloc_r+0x14>

080137e8 <_malloc_usable_size_r>:
 80137e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137ec:	1f18      	subs	r0, r3, #4
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	bfbc      	itt	lt
 80137f2:	580b      	ldrlt	r3, [r1, r0]
 80137f4:	18c0      	addlt	r0, r0, r3
 80137f6:	4770      	bx	lr

080137f8 <fiprintf>:
 80137f8:	b40e      	push	{r1, r2, r3}
 80137fa:	b503      	push	{r0, r1, lr}
 80137fc:	4601      	mov	r1, r0
 80137fe:	ab03      	add	r3, sp, #12
 8013800:	4805      	ldr	r0, [pc, #20]	@ (8013818 <fiprintf+0x20>)
 8013802:	f853 2b04 	ldr.w	r2, [r3], #4
 8013806:	6800      	ldr	r0, [r0, #0]
 8013808:	9301      	str	r3, [sp, #4]
 801380a:	f000 f837 	bl	801387c <_vfiprintf_r>
 801380e:	b002      	add	sp, #8
 8013810:	f85d eb04 	ldr.w	lr, [sp], #4
 8013814:	b003      	add	sp, #12
 8013816:	4770      	bx	lr
 8013818:	2000001c 	.word	0x2000001c

0801381c <abort>:
 801381c:	b508      	push	{r3, lr}
 801381e:	2006      	movs	r0, #6
 8013820:	f000 f96c 	bl	8013afc <raise>
 8013824:	2001      	movs	r0, #1
 8013826:	f7f0 fde3 	bl	80043f0 <_exit>

0801382a <__sfputc_r>:
 801382a:	6893      	ldr	r3, [r2, #8]
 801382c:	3b01      	subs	r3, #1
 801382e:	2b00      	cmp	r3, #0
 8013830:	b410      	push	{r4}
 8013832:	6093      	str	r3, [r2, #8]
 8013834:	da08      	bge.n	8013848 <__sfputc_r+0x1e>
 8013836:	6994      	ldr	r4, [r2, #24]
 8013838:	42a3      	cmp	r3, r4
 801383a:	db01      	blt.n	8013840 <__sfputc_r+0x16>
 801383c:	290a      	cmp	r1, #10
 801383e:	d103      	bne.n	8013848 <__sfputc_r+0x1e>
 8013840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013844:	f7fc bf19 	b.w	801067a <__swbuf_r>
 8013848:	6813      	ldr	r3, [r2, #0]
 801384a:	1c58      	adds	r0, r3, #1
 801384c:	6010      	str	r0, [r2, #0]
 801384e:	7019      	strb	r1, [r3, #0]
 8013850:	4608      	mov	r0, r1
 8013852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013856:	4770      	bx	lr

08013858 <__sfputs_r>:
 8013858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385a:	4606      	mov	r6, r0
 801385c:	460f      	mov	r7, r1
 801385e:	4614      	mov	r4, r2
 8013860:	18d5      	adds	r5, r2, r3
 8013862:	42ac      	cmp	r4, r5
 8013864:	d101      	bne.n	801386a <__sfputs_r+0x12>
 8013866:	2000      	movs	r0, #0
 8013868:	e007      	b.n	801387a <__sfputs_r+0x22>
 801386a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801386e:	463a      	mov	r2, r7
 8013870:	4630      	mov	r0, r6
 8013872:	f7ff ffda 	bl	801382a <__sfputc_r>
 8013876:	1c43      	adds	r3, r0, #1
 8013878:	d1f3      	bne.n	8013862 <__sfputs_r+0xa>
 801387a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801387c <_vfiprintf_r>:
 801387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013880:	460d      	mov	r5, r1
 8013882:	b09d      	sub	sp, #116	@ 0x74
 8013884:	4614      	mov	r4, r2
 8013886:	4698      	mov	r8, r3
 8013888:	4606      	mov	r6, r0
 801388a:	b118      	cbz	r0, 8013894 <_vfiprintf_r+0x18>
 801388c:	6a03      	ldr	r3, [r0, #32]
 801388e:	b90b      	cbnz	r3, 8013894 <_vfiprintf_r+0x18>
 8013890:	f7fc fdd0 	bl	8010434 <__sinit>
 8013894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013896:	07d9      	lsls	r1, r3, #31
 8013898:	d405      	bmi.n	80138a6 <_vfiprintf_r+0x2a>
 801389a:	89ab      	ldrh	r3, [r5, #12]
 801389c:	059a      	lsls	r2, r3, #22
 801389e:	d402      	bmi.n	80138a6 <_vfiprintf_r+0x2a>
 80138a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138a2:	f7fd f81a 	bl	80108da <__retarget_lock_acquire_recursive>
 80138a6:	89ab      	ldrh	r3, [r5, #12]
 80138a8:	071b      	lsls	r3, r3, #28
 80138aa:	d501      	bpl.n	80138b0 <_vfiprintf_r+0x34>
 80138ac:	692b      	ldr	r3, [r5, #16]
 80138ae:	b99b      	cbnz	r3, 80138d8 <_vfiprintf_r+0x5c>
 80138b0:	4629      	mov	r1, r5
 80138b2:	4630      	mov	r0, r6
 80138b4:	f7fc ff20 	bl	80106f8 <__swsetup_r>
 80138b8:	b170      	cbz	r0, 80138d8 <_vfiprintf_r+0x5c>
 80138ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138bc:	07dc      	lsls	r4, r3, #31
 80138be:	d504      	bpl.n	80138ca <_vfiprintf_r+0x4e>
 80138c0:	f04f 30ff 	mov.w	r0, #4294967295
 80138c4:	b01d      	add	sp, #116	@ 0x74
 80138c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ca:	89ab      	ldrh	r3, [r5, #12]
 80138cc:	0598      	lsls	r0, r3, #22
 80138ce:	d4f7      	bmi.n	80138c0 <_vfiprintf_r+0x44>
 80138d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138d2:	f7fd f803 	bl	80108dc <__retarget_lock_release_recursive>
 80138d6:	e7f3      	b.n	80138c0 <_vfiprintf_r+0x44>
 80138d8:	2300      	movs	r3, #0
 80138da:	9309      	str	r3, [sp, #36]	@ 0x24
 80138dc:	2320      	movs	r3, #32
 80138de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80138e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80138e6:	2330      	movs	r3, #48	@ 0x30
 80138e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013a98 <_vfiprintf_r+0x21c>
 80138ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80138f0:	f04f 0901 	mov.w	r9, #1
 80138f4:	4623      	mov	r3, r4
 80138f6:	469a      	mov	sl, r3
 80138f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138fc:	b10a      	cbz	r2, 8013902 <_vfiprintf_r+0x86>
 80138fe:	2a25      	cmp	r2, #37	@ 0x25
 8013900:	d1f9      	bne.n	80138f6 <_vfiprintf_r+0x7a>
 8013902:	ebba 0b04 	subs.w	fp, sl, r4
 8013906:	d00b      	beq.n	8013920 <_vfiprintf_r+0xa4>
 8013908:	465b      	mov	r3, fp
 801390a:	4622      	mov	r2, r4
 801390c:	4629      	mov	r1, r5
 801390e:	4630      	mov	r0, r6
 8013910:	f7ff ffa2 	bl	8013858 <__sfputs_r>
 8013914:	3001      	adds	r0, #1
 8013916:	f000 80a7 	beq.w	8013a68 <_vfiprintf_r+0x1ec>
 801391a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801391c:	445a      	add	r2, fp
 801391e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013920:	f89a 3000 	ldrb.w	r3, [sl]
 8013924:	2b00      	cmp	r3, #0
 8013926:	f000 809f 	beq.w	8013a68 <_vfiprintf_r+0x1ec>
 801392a:	2300      	movs	r3, #0
 801392c:	f04f 32ff 	mov.w	r2, #4294967295
 8013930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013934:	f10a 0a01 	add.w	sl, sl, #1
 8013938:	9304      	str	r3, [sp, #16]
 801393a:	9307      	str	r3, [sp, #28]
 801393c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013940:	931a      	str	r3, [sp, #104]	@ 0x68
 8013942:	4654      	mov	r4, sl
 8013944:	2205      	movs	r2, #5
 8013946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801394a:	4853      	ldr	r0, [pc, #332]	@ (8013a98 <_vfiprintf_r+0x21c>)
 801394c:	f7ec fc58 	bl	8000200 <memchr>
 8013950:	9a04      	ldr	r2, [sp, #16]
 8013952:	b9d8      	cbnz	r0, 801398c <_vfiprintf_r+0x110>
 8013954:	06d1      	lsls	r1, r2, #27
 8013956:	bf44      	itt	mi
 8013958:	2320      	movmi	r3, #32
 801395a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801395e:	0713      	lsls	r3, r2, #28
 8013960:	bf44      	itt	mi
 8013962:	232b      	movmi	r3, #43	@ 0x2b
 8013964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013968:	f89a 3000 	ldrb.w	r3, [sl]
 801396c:	2b2a      	cmp	r3, #42	@ 0x2a
 801396e:	d015      	beq.n	801399c <_vfiprintf_r+0x120>
 8013970:	9a07      	ldr	r2, [sp, #28]
 8013972:	4654      	mov	r4, sl
 8013974:	2000      	movs	r0, #0
 8013976:	f04f 0c0a 	mov.w	ip, #10
 801397a:	4621      	mov	r1, r4
 801397c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013980:	3b30      	subs	r3, #48	@ 0x30
 8013982:	2b09      	cmp	r3, #9
 8013984:	d94b      	bls.n	8013a1e <_vfiprintf_r+0x1a2>
 8013986:	b1b0      	cbz	r0, 80139b6 <_vfiprintf_r+0x13a>
 8013988:	9207      	str	r2, [sp, #28]
 801398a:	e014      	b.n	80139b6 <_vfiprintf_r+0x13a>
 801398c:	eba0 0308 	sub.w	r3, r0, r8
 8013990:	fa09 f303 	lsl.w	r3, r9, r3
 8013994:	4313      	orrs	r3, r2
 8013996:	9304      	str	r3, [sp, #16]
 8013998:	46a2      	mov	sl, r4
 801399a:	e7d2      	b.n	8013942 <_vfiprintf_r+0xc6>
 801399c:	9b03      	ldr	r3, [sp, #12]
 801399e:	1d19      	adds	r1, r3, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	9103      	str	r1, [sp, #12]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	bfbb      	ittet	lt
 80139a8:	425b      	neglt	r3, r3
 80139aa:	f042 0202 	orrlt.w	r2, r2, #2
 80139ae:	9307      	strge	r3, [sp, #28]
 80139b0:	9307      	strlt	r3, [sp, #28]
 80139b2:	bfb8      	it	lt
 80139b4:	9204      	strlt	r2, [sp, #16]
 80139b6:	7823      	ldrb	r3, [r4, #0]
 80139b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80139ba:	d10a      	bne.n	80139d2 <_vfiprintf_r+0x156>
 80139bc:	7863      	ldrb	r3, [r4, #1]
 80139be:	2b2a      	cmp	r3, #42	@ 0x2a
 80139c0:	d132      	bne.n	8013a28 <_vfiprintf_r+0x1ac>
 80139c2:	9b03      	ldr	r3, [sp, #12]
 80139c4:	1d1a      	adds	r2, r3, #4
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	9203      	str	r2, [sp, #12]
 80139ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80139ce:	3402      	adds	r4, #2
 80139d0:	9305      	str	r3, [sp, #20]
 80139d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013aa8 <_vfiprintf_r+0x22c>
 80139d6:	7821      	ldrb	r1, [r4, #0]
 80139d8:	2203      	movs	r2, #3
 80139da:	4650      	mov	r0, sl
 80139dc:	f7ec fc10 	bl	8000200 <memchr>
 80139e0:	b138      	cbz	r0, 80139f2 <_vfiprintf_r+0x176>
 80139e2:	9b04      	ldr	r3, [sp, #16]
 80139e4:	eba0 000a 	sub.w	r0, r0, sl
 80139e8:	2240      	movs	r2, #64	@ 0x40
 80139ea:	4082      	lsls	r2, r0
 80139ec:	4313      	orrs	r3, r2
 80139ee:	3401      	adds	r4, #1
 80139f0:	9304      	str	r3, [sp, #16]
 80139f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139f6:	4829      	ldr	r0, [pc, #164]	@ (8013a9c <_vfiprintf_r+0x220>)
 80139f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80139fc:	2206      	movs	r2, #6
 80139fe:	f7ec fbff 	bl	8000200 <memchr>
 8013a02:	2800      	cmp	r0, #0
 8013a04:	d03f      	beq.n	8013a86 <_vfiprintf_r+0x20a>
 8013a06:	4b26      	ldr	r3, [pc, #152]	@ (8013aa0 <_vfiprintf_r+0x224>)
 8013a08:	bb1b      	cbnz	r3, 8013a52 <_vfiprintf_r+0x1d6>
 8013a0a:	9b03      	ldr	r3, [sp, #12]
 8013a0c:	3307      	adds	r3, #7
 8013a0e:	f023 0307 	bic.w	r3, r3, #7
 8013a12:	3308      	adds	r3, #8
 8013a14:	9303      	str	r3, [sp, #12]
 8013a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a18:	443b      	add	r3, r7
 8013a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a1c:	e76a      	b.n	80138f4 <_vfiprintf_r+0x78>
 8013a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a22:	460c      	mov	r4, r1
 8013a24:	2001      	movs	r0, #1
 8013a26:	e7a8      	b.n	801397a <_vfiprintf_r+0xfe>
 8013a28:	2300      	movs	r3, #0
 8013a2a:	3401      	adds	r4, #1
 8013a2c:	9305      	str	r3, [sp, #20]
 8013a2e:	4619      	mov	r1, r3
 8013a30:	f04f 0c0a 	mov.w	ip, #10
 8013a34:	4620      	mov	r0, r4
 8013a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a3a:	3a30      	subs	r2, #48	@ 0x30
 8013a3c:	2a09      	cmp	r2, #9
 8013a3e:	d903      	bls.n	8013a48 <_vfiprintf_r+0x1cc>
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d0c6      	beq.n	80139d2 <_vfiprintf_r+0x156>
 8013a44:	9105      	str	r1, [sp, #20]
 8013a46:	e7c4      	b.n	80139d2 <_vfiprintf_r+0x156>
 8013a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	2301      	movs	r3, #1
 8013a50:	e7f0      	b.n	8013a34 <_vfiprintf_r+0x1b8>
 8013a52:	ab03      	add	r3, sp, #12
 8013a54:	9300      	str	r3, [sp, #0]
 8013a56:	462a      	mov	r2, r5
 8013a58:	4b12      	ldr	r3, [pc, #72]	@ (8013aa4 <_vfiprintf_r+0x228>)
 8013a5a:	a904      	add	r1, sp, #16
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	f3af 8000 	nop.w
 8013a62:	4607      	mov	r7, r0
 8013a64:	1c78      	adds	r0, r7, #1
 8013a66:	d1d6      	bne.n	8013a16 <_vfiprintf_r+0x19a>
 8013a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a6a:	07d9      	lsls	r1, r3, #31
 8013a6c:	d405      	bmi.n	8013a7a <_vfiprintf_r+0x1fe>
 8013a6e:	89ab      	ldrh	r3, [r5, #12]
 8013a70:	059a      	lsls	r2, r3, #22
 8013a72:	d402      	bmi.n	8013a7a <_vfiprintf_r+0x1fe>
 8013a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a76:	f7fc ff31 	bl	80108dc <__retarget_lock_release_recursive>
 8013a7a:	89ab      	ldrh	r3, [r5, #12]
 8013a7c:	065b      	lsls	r3, r3, #25
 8013a7e:	f53f af1f 	bmi.w	80138c0 <_vfiprintf_r+0x44>
 8013a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a84:	e71e      	b.n	80138c4 <_vfiprintf_r+0x48>
 8013a86:	ab03      	add	r3, sp, #12
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	462a      	mov	r2, r5
 8013a8c:	4b05      	ldr	r3, [pc, #20]	@ (8013aa4 <_vfiprintf_r+0x228>)
 8013a8e:	a904      	add	r1, sp, #16
 8013a90:	4630      	mov	r0, r6
 8013a92:	f7fe f999 	bl	8011dc8 <_printf_i>
 8013a96:	e7e4      	b.n	8013a62 <_vfiprintf_r+0x1e6>
 8013a98:	08013fe9 	.word	0x08013fe9
 8013a9c:	08013ff3 	.word	0x08013ff3
 8013aa0:	00000000 	.word	0x00000000
 8013aa4:	08013859 	.word	0x08013859
 8013aa8:	08013fef 	.word	0x08013fef

08013aac <_raise_r>:
 8013aac:	291f      	cmp	r1, #31
 8013aae:	b538      	push	{r3, r4, r5, lr}
 8013ab0:	4605      	mov	r5, r0
 8013ab2:	460c      	mov	r4, r1
 8013ab4:	d904      	bls.n	8013ac0 <_raise_r+0x14>
 8013ab6:	2316      	movs	r3, #22
 8013ab8:	6003      	str	r3, [r0, #0]
 8013aba:	f04f 30ff 	mov.w	r0, #4294967295
 8013abe:	bd38      	pop	{r3, r4, r5, pc}
 8013ac0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013ac2:	b112      	cbz	r2, 8013aca <_raise_r+0x1e>
 8013ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013ac8:	b94b      	cbnz	r3, 8013ade <_raise_r+0x32>
 8013aca:	4628      	mov	r0, r5
 8013acc:	f000 f830 	bl	8013b30 <_getpid_r>
 8013ad0:	4622      	mov	r2, r4
 8013ad2:	4601      	mov	r1, r0
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ada:	f000 b817 	b.w	8013b0c <_kill_r>
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d00a      	beq.n	8013af8 <_raise_r+0x4c>
 8013ae2:	1c59      	adds	r1, r3, #1
 8013ae4:	d103      	bne.n	8013aee <_raise_r+0x42>
 8013ae6:	2316      	movs	r3, #22
 8013ae8:	6003      	str	r3, [r0, #0]
 8013aea:	2001      	movs	r0, #1
 8013aec:	e7e7      	b.n	8013abe <_raise_r+0x12>
 8013aee:	2100      	movs	r1, #0
 8013af0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013af4:	4620      	mov	r0, r4
 8013af6:	4798      	blx	r3
 8013af8:	2000      	movs	r0, #0
 8013afa:	e7e0      	b.n	8013abe <_raise_r+0x12>

08013afc <raise>:
 8013afc:	4b02      	ldr	r3, [pc, #8]	@ (8013b08 <raise+0xc>)
 8013afe:	4601      	mov	r1, r0
 8013b00:	6818      	ldr	r0, [r3, #0]
 8013b02:	f7ff bfd3 	b.w	8013aac <_raise_r>
 8013b06:	bf00      	nop
 8013b08:	2000001c 	.word	0x2000001c

08013b0c <_kill_r>:
 8013b0c:	b538      	push	{r3, r4, r5, lr}
 8013b0e:	4d07      	ldr	r5, [pc, #28]	@ (8013b2c <_kill_r+0x20>)
 8013b10:	2300      	movs	r3, #0
 8013b12:	4604      	mov	r4, r0
 8013b14:	4608      	mov	r0, r1
 8013b16:	4611      	mov	r1, r2
 8013b18:	602b      	str	r3, [r5, #0]
 8013b1a:	f7f0 fc59 	bl	80043d0 <_kill>
 8013b1e:	1c43      	adds	r3, r0, #1
 8013b20:	d102      	bne.n	8013b28 <_kill_r+0x1c>
 8013b22:	682b      	ldr	r3, [r5, #0]
 8013b24:	b103      	cbz	r3, 8013b28 <_kill_r+0x1c>
 8013b26:	6023      	str	r3, [r4, #0]
 8013b28:	bd38      	pop	{r3, r4, r5, pc}
 8013b2a:	bf00      	nop
 8013b2c:	20003fc0 	.word	0x20003fc0

08013b30 <_getpid_r>:
 8013b30:	f7f0 bc46 	b.w	80043c0 <_getpid>
 8013b34:	0000      	movs	r0, r0
	...

08013b38 <floor>:
 8013b38:	ec51 0b10 	vmov	r0, r1, d0
 8013b3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b44:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013b48:	2e13      	cmp	r6, #19
 8013b4a:	460c      	mov	r4, r1
 8013b4c:	4605      	mov	r5, r0
 8013b4e:	4680      	mov	r8, r0
 8013b50:	dc34      	bgt.n	8013bbc <floor+0x84>
 8013b52:	2e00      	cmp	r6, #0
 8013b54:	da17      	bge.n	8013b86 <floor+0x4e>
 8013b56:	a332      	add	r3, pc, #200	@ (adr r3, 8013c20 <floor+0xe8>)
 8013b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5c:	f7ec fba6 	bl	80002ac <__adddf3>
 8013b60:	2200      	movs	r2, #0
 8013b62:	2300      	movs	r3, #0
 8013b64:	f7ec ffe8 	bl	8000b38 <__aeabi_dcmpgt>
 8013b68:	b150      	cbz	r0, 8013b80 <floor+0x48>
 8013b6a:	2c00      	cmp	r4, #0
 8013b6c:	da55      	bge.n	8013c1a <floor+0xe2>
 8013b6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013b72:	432c      	orrs	r4, r5
 8013b74:	2500      	movs	r5, #0
 8013b76:	42ac      	cmp	r4, r5
 8013b78:	4c2b      	ldr	r4, [pc, #172]	@ (8013c28 <floor+0xf0>)
 8013b7a:	bf08      	it	eq
 8013b7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013b80:	4621      	mov	r1, r4
 8013b82:	4628      	mov	r0, r5
 8013b84:	e023      	b.n	8013bce <floor+0x96>
 8013b86:	4f29      	ldr	r7, [pc, #164]	@ (8013c2c <floor+0xf4>)
 8013b88:	4137      	asrs	r7, r6
 8013b8a:	ea01 0307 	and.w	r3, r1, r7
 8013b8e:	4303      	orrs	r3, r0
 8013b90:	d01d      	beq.n	8013bce <floor+0x96>
 8013b92:	a323      	add	r3, pc, #140	@ (adr r3, 8013c20 <floor+0xe8>)
 8013b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b98:	f7ec fb88 	bl	80002ac <__adddf3>
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	f7ec ffca 	bl	8000b38 <__aeabi_dcmpgt>
 8013ba4:	2800      	cmp	r0, #0
 8013ba6:	d0eb      	beq.n	8013b80 <floor+0x48>
 8013ba8:	2c00      	cmp	r4, #0
 8013baa:	bfbe      	ittt	lt
 8013bac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013bb0:	4133      	asrlt	r3, r6
 8013bb2:	18e4      	addlt	r4, r4, r3
 8013bb4:	ea24 0407 	bic.w	r4, r4, r7
 8013bb8:	2500      	movs	r5, #0
 8013bba:	e7e1      	b.n	8013b80 <floor+0x48>
 8013bbc:	2e33      	cmp	r6, #51	@ 0x33
 8013bbe:	dd0a      	ble.n	8013bd6 <floor+0x9e>
 8013bc0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013bc4:	d103      	bne.n	8013bce <floor+0x96>
 8013bc6:	4602      	mov	r2, r0
 8013bc8:	460b      	mov	r3, r1
 8013bca:	f7ec fb6f 	bl	80002ac <__adddf3>
 8013bce:	ec41 0b10 	vmov	d0, r0, r1
 8013bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013bda:	f04f 37ff 	mov.w	r7, #4294967295
 8013bde:	40df      	lsrs	r7, r3
 8013be0:	4207      	tst	r7, r0
 8013be2:	d0f4      	beq.n	8013bce <floor+0x96>
 8013be4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013c20 <floor+0xe8>)
 8013be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bea:	f7ec fb5f 	bl	80002ac <__adddf3>
 8013bee:	2200      	movs	r2, #0
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	f7ec ffa1 	bl	8000b38 <__aeabi_dcmpgt>
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d0c2      	beq.n	8013b80 <floor+0x48>
 8013bfa:	2c00      	cmp	r4, #0
 8013bfc:	da0a      	bge.n	8013c14 <floor+0xdc>
 8013bfe:	2e14      	cmp	r6, #20
 8013c00:	d101      	bne.n	8013c06 <floor+0xce>
 8013c02:	3401      	adds	r4, #1
 8013c04:	e006      	b.n	8013c14 <floor+0xdc>
 8013c06:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	40b3      	lsls	r3, r6
 8013c0e:	441d      	add	r5, r3
 8013c10:	4545      	cmp	r5, r8
 8013c12:	d3f6      	bcc.n	8013c02 <floor+0xca>
 8013c14:	ea25 0507 	bic.w	r5, r5, r7
 8013c18:	e7b2      	b.n	8013b80 <floor+0x48>
 8013c1a:	2500      	movs	r5, #0
 8013c1c:	462c      	mov	r4, r5
 8013c1e:	e7af      	b.n	8013b80 <floor+0x48>
 8013c20:	8800759c 	.word	0x8800759c
 8013c24:	7e37e43c 	.word	0x7e37e43c
 8013c28:	bff00000 	.word	0xbff00000
 8013c2c:	000fffff 	.word	0x000fffff

08013c30 <_init>:
 8013c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c32:	bf00      	nop
 8013c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c36:	bc08      	pop	{r3}
 8013c38:	469e      	mov	lr, r3
 8013c3a:	4770      	bx	lr

08013c3c <_fini>:
 8013c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c3e:	bf00      	nop
 8013c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c42:	bc08      	pop	{r3}
 8013c44:	469e      	mov	lr, r3
 8013c46:	4770      	bx	lr
