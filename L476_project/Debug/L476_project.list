
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08013ef8  08013ef8  00023ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014588  08014588  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014588  08014588  00024588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014590  08014590  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014590  08014590  00024590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014594  08014594  00024594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08014598  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002628  200001e8  0801477c  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002810  0801477c  00032810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000439dc  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067f7  00000000  00000000  00073bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003a38  00000000  00000000  0007a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003770  00000000  00000000  0007de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003295f  00000000  00000000  00081590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003768b  00000000  00000000  000b3eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129198  00000000  00000000  000eb57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00214712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011180  00000000  00000000  00214764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ee0 	.word	0x08013ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08013ee0 	.word	0x08013ee0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Tasks_Init>:

extern SemaphoreHandle_t xHandleSemaphoreTX;
extern StaticSemaphore_t xSemaphoreTX;

void Tasks_Init(void)
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b096      	sub	sp, #88	; 0x58
 800101c:	af00      	add	r7, sp, #0
	osThreadDef(UART, StartUart, osPriorityNormal, 0, 64);
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <Tasks_Init+0x7c>)
 8001020:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001024:	461d      	mov	r5, r3
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UARTHandle = osThreadCreate(osThread(UART), NULL);
 8001032:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00c faa7 	bl	800d58c <osThreadCreate>
 800103e:	4603      	mov	r3, r0
 8001040:	4a15      	ldr	r2, [pc, #84]	; (8001098 <Tasks_Init+0x80>)
 8001042:	6013      	str	r3, [r2, #0]

	osThreadDef(IMU, StartIMU, osPriorityNormal, 0, 512);
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <Tasks_Init+0x84>)
 8001046:	f107 0420 	add.w	r4, r7, #32
 800104a:	461d      	mov	r5, r3
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMUHandle = osThreadCreate(osThread(IMU), NULL);
 8001058:	f107 0320 	add.w	r3, r7, #32
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00c fa94 	bl	800d58c <osThreadCreate>
 8001064:	4603      	mov	r3, r0
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <Tasks_Init+0x88>)
 8001068:	6013      	str	r3, [r2, #0]

	osThreadDef(GPS, StartGPS, osPriorityNormal, 0, 64);
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <Tasks_Init+0x8c>)
 800106c:	1d3c      	adds	r4, r7, #4
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00c fa83 	bl	800d58c <osThreadCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <Tasks_Init+0x90>)
 800108a:	6013      	str	r3, [r2, #0]
	osThreadDef(I2C, StartI2C, osPriorityBelowNormal, 0, 64);
	I2CHandle = osThreadCreate(osThread(I2C), NULL);

	osThreadDef(SPI, StartSPI, osPriorityBelowNormal, 0, 64);
	SPIHandle = osThreadCreate(osThread(SPI), NULL);*/
}
 800108c:	bf00      	nop
 800108e:	3758      	adds	r7, #88	; 0x58
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	08013f08 	.word	0x08013f08
 8001098:	2000020c 	.word	0x2000020c
 800109c:	08013f24 	.word	0x08013f24
 80010a0:	20000204 	.word	0x20000204
 80010a4:	08013f40 	.word	0x08013f40
 80010a8:	20000208 	.word	0x20000208

080010ac <IMU_Receive_Transmit_Data>:

void IMU_Receive_Transmit_Data()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	IMU_GetData();
 80010b0:	f000 fa9e 	bl	80015f0 <IMU_GetData>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <GetData_GPS>:

void GetData_GPS(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
 80010bc:	2201      	movs	r2, #1
 80010be:	4903      	ldr	r1, [pc, #12]	; (80010cc <GetData_GPS+0x14>)
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <GetData_GPS+0x18>)
 80010c2:	f00a fefb 	bl	800bebc <HAL_UART_Receive_IT>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000d80 	.word	0x20000d80
 80010d0:	20000c70 	.word	0x20000c70

080010d4 <HAL_UART_TxCpltCallback>:
		 }
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
	 if (huart -> Instance == UART4)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_UART_TxCpltCallback+0x48>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d113      	bne.n	8001112 <HAL_UART_TxCpltCallback+0x3e>
	 {
		 if (adresse_buffer != NULL) {
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_UART_TxCpltCallback+0x4c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <HAL_UART_TxCpltCallback+0x2e>
		             free(adresse_buffer);
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_UART_TxCpltCallback+0x4c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00e fea2 	bl	800fe40 <free>
		             adresse_buffer = NULL; // Bonne pratique pour éviter les double free
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_UART_TxCpltCallback+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
		  }

		 xSemaphoreGiveFromISR(xHandleSemaphoreTX, &xHigherPriorityTaskWoken);
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_UART_TxCpltCallback+0x50>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f107 020c 	add.w	r2, r7, #12
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f00c fded 	bl	800dcec <xQueueGiveFromISR>

		 //osMutexRelease(mutex_uartHandle);

	 }

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40004c00 	.word	0x40004c00
 8001120:	2000030c 	.word	0x2000030c
 8001124:	20000e50 	.word	0x20000e50

08001128 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <HAL_UART_RxCpltCallback+0x8c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d137      	bne.n	80011aa <HAL_UART_RxCpltCallback+0x82>

			static char rx_buffer[LINEMAX];   // Local holding buffer to build line
			static int rx_index = 0;


			if ((rxBufferGps == '\r') || (rxBufferGps == '\n')) // Is this an end-of-line condition, either will suffice?
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_UART_RxCpltCallback+0x90>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b0d      	cmp	r3, #13
 8001140:	d003      	beq.n	800114a <HAL_UART_RxCpltCallback+0x22>
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_UART_RxCpltCallback+0x90>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d116      	bne.n	8001178 <HAL_UART_RxCpltCallback+0x50>
			{
			  if (rx_index != 0) // Line has some content
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d026      	beq.n	80011a0 <HAL_UART_RxCpltCallback+0x78>
			  {
				memcpy((void *)nmeaFrame, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4919      	ldr	r1, [pc, #100]	; (80011c0 <HAL_UART_RxCpltCallback+0x98>)
 800115a:	481a      	ldr	r0, [pc, #104]	; (80011c4 <HAL_UART_RxCpltCallback+0x9c>)
 800115c:	f00e fe78 	bl	800fe50 <memcpy>
				nmeaFrame[rx_index] = 0; // Add terminating NUL
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_UART_RxCpltCallback+0x9c>)
 8001166:	2100      	movs	r1, #0
 8001168:	54d1      	strb	r1, [r2, r3]
				nmeaFrameValid = 1; // flag new line valid for processing
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_UART_RxCpltCallback+0xa0>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

				rx_index = 0; // Reset content pointer
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
			  if (rx_index != 0) // Line has some content
 8001176:	e013      	b.n	80011a0 <HAL_UART_RxCpltCallback+0x78>
			  }
			}
			else
			{
			  if ((rxBufferGps == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_UART_RxCpltCallback+0x90>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b24      	cmp	r3, #36	; 0x24
 800117e:	d003      	beq.n	8001188 <HAL_UART_RxCpltCallback+0x60>
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2bc8      	cmp	r3, #200	; 0xc8
 8001186:	d102      	bne.n	800118e <HAL_UART_RxCpltCallback+0x66>
				rx_index = 0;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

			  rx_buffer[rx_index++] = rxBufferGps; // Copy to buffer and increment
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	4909      	ldr	r1, [pc, #36]	; (80011bc <HAL_UART_RxCpltCallback+0x94>)
 8001196:	600a      	str	r2, [r1, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_UART_RxCpltCallback+0x90>)
 800119a:	7811      	ldrb	r1, [r2, #0]
 800119c:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_UART_RxCpltCallback+0x98>)
 800119e:	54d1      	strb	r1, [r2, r3]
			}


    	HAL_UART_Receive_IT(&huart2, &rxBufferGps, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	4905      	ldr	r1, [pc, #20]	; (80011b8 <HAL_UART_RxCpltCallback+0x90>)
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <HAL_UART_RxCpltCallback+0xa4>)
 80011a6:	f00a fe89 	bl	800bebc <HAL_UART_Receive_IT>

    if (huart -> Instance == USART3)
    {

    }
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40004400 	.word	0x40004400
 80011b8:	20000d80 	.word	0x20000d80
 80011bc:	20000210 	.word	0x20000210
 80011c0:	20000214 	.word	0x20000214
 80011c4:	20000d84 	.word	0x20000d84
 80011c8:	20000e4c 	.word	0x20000e4c
 80011cc:	20000c70 	.word	0x20000c70

080011d0 <Transmit_data_to_usb>:



void Transmit_data_to_usb(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
		MESSAGE_Typedef message_appli;
		message_appli = MESSAGE_ReadMailboxNoDelay(Appli_Mailbox);
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <Transmit_data_to_usb+0x50>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fb34 	bl	800184c <MESSAGE_ReadMailboxNoDelay>
		switch(message_appli.id){
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d00f      	beq.n	800120a <Transmit_data_to_usb+0x3a>
 80011ea:	2b40      	cmp	r3, #64	; 0x40
 80011ec:	dc12      	bgt.n	8001214 <Transmit_data_to_usb+0x44>
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d006      	beq.n	8001200 <Transmit_data_to_usb+0x30>
 80011f2:	2b30      	cmp	r3, #48	; 0x30
 80011f4:	d10e      	bne.n	8001214 <Transmit_data_to_usb+0x44>
		case MSG_ID_GPS :
			TransmitGPSFrame(message_appli.data);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 ff15 	bl	8002028 <TransmitGPSFrame>
			break;
 80011fe:	e00a      	b.n	8001216 <Transmit_data_to_usb+0x46>
		case MSG_ID_IMU :
			TransmitIMUFrame(message_appli.data);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fa62 	bl	80016cc <TransmitIMUFrame>
			break;
 8001208:	e005      	b.n	8001216 <Transmit_data_to_usb+0x46>
		case MSG_ID_LIDAR :
			TransmitLiDARFrame(message_appli.data);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fad5 	bl	80017bc <TransmitLiDARFrame>
			break;
 8001212:	e000      	b.n	8001216 <Transmit_data_to_usb+0x46>
		default :
			break;
 8001214:	bf00      	nop
		}
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200004e4 	.word	0x200004e4

08001224 <StartUart>:

void StartUart(void const * argument)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(200);
 800122c:	23c8      	movs	r3, #200	; 0xc8
 800122e:	60fb      	str	r3, [r7, #12]
	xHandleSemaphoreTX = xSemaphoreCreateBinaryStatic( &xSemaphoreTX );
 8001230:	2303      	movs	r3, #3
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <StartUart+0x60>)
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2001      	movs	r0, #1
 800123c:	f00c fb3a 	bl	800d8b4 <xQueueGenericCreateStatic>
 8001240:	4603      	mov	r3, r0
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <StartUart+0x64>)
 8001244:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(xHandleSemaphoreTX);
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <StartUart+0x64>)
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	f00c fc4e 	bl	800daf0 <xQueueGenericSend>
	//xSemaphore = xSemaphoreCreateBinary();
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001254:	f00d fc66 	bl	800eb24 <xTaskGetTickCount>
 8001258:	4603      	mov	r3, r0
 800125a:	60bb      	str	r3, [r7, #8]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
	  if( xSemaphoreTake( xHandleSemaphoreTX, 0xffff ) == pdTRUE ){
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <StartUart+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001264:	4618      	mov	r0, r3
 8001266:	f00c feaf 	bl	800dfc8 <xQueueSemaphoreTake>
 800126a:	4603      	mov	r3, r0
 800126c:	2b01      	cmp	r3, #1
 800126e:	d1f5      	bne.n	800125c <StartUart+0x38>
		  Transmit_data_to_usb();
 8001270:	f7ff ffae 	bl	80011d0 <Transmit_data_to_usb>
		  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	68f9      	ldr	r1, [r7, #12]
 800127a:	4618      	mov	r0, r3
 800127c:	f00d fa96 	bl	800e7ac <vTaskDelayUntil>
	  if( xSemaphoreTake( xHandleSemaphoreTX, 0xffff ) == pdTRUE ){
 8001280:	e7ec      	b.n	800125c <StartUart+0x38>
 8001282:	bf00      	nop
 8001284:	20000e54 	.word	0x20000e54
 8001288:	20000e50 	.word	0x20000e50

0800128c <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(600);
 8001294:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001298:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800129a:	f00d fc43 	bl	800eb24 <xTaskGetTickCount>
 800129e:	4603      	mov	r3, r0
 80012a0:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	  IMU_Receive_Transmit_Data();
 80012a2:	f7ff ff03 	bl	80010ac <IMU_Receive_Transmit_Data>
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00d fa7d 	bl	800e7ac <vTaskDelayUntil>
	  IMU_Receive_Transmit_Data();
 80012b2:	e7f6      	b.n	80012a2 <StartIMU+0x16>

080012b4 <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(200);
 80012bc:	23c8      	movs	r3, #200	; 0xc8
 80012be:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80012c0:	f00d fc30 	bl	800eb24 <xTaskGetTickCount>
 80012c4:	4603      	mov	r3, r0
 80012c6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  GetData_GPS();
 80012c8:	f7ff fef6 	bl	80010b8 <GetData_GPS>
	  task_update_gps();
 80012cc:	f000 fb04 	bl	80018d8 <task_update_gps>
	  task_send_values_GPS();
 80012d0:	f000 fb20 	bl	8001914 <task_send_values_GPS>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	68f9      	ldr	r1, [r7, #12]
 80012da:	4618      	mov	r0, r3
 80012dc:	f00d fa66 	bl	800e7ac <vTaskDelayUntil>
	  GetData_GPS();
 80012e0:	e7f2      	b.n	80012c8 <StartGPS+0x14>
	...

080012e4 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <GLOBVAR_Init+0x88>)
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <GLOBVAR_Init+0x8c>)
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <GLOBVAR_Init+0x90>)
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <GLOBVAR_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <GLOBVAR_Init+0x94>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <GLOBVAR_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <GLOBVAR_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <GLOBVAR_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <GLOBVAR_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <GLOBVAR_Init+0x9c>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <GLOBVAR_Init+0x9c>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <GLOBVAR_Init+0x9c>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 8001336:	4913      	ldr	r1, [pc, #76]	; (8001384 <GLOBVAR_Init+0xa0>)
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 8001344:	490f      	ldr	r1, [pc, #60]	; (8001384 <GLOBVAR_Init+0xa0>)
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 8001352:	490c      	ldr	r1, [pc, #48]	; (8001384 <GLOBVAR_Init+0xa0>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c1 2302 	strd	r2, r3, [r1, #8]


}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000300 	.word	0x20000300
 8001370:	20000304 	.word	0x20000304
 8001374:	20000308 	.word	0x20000308
 8001378:	200002dc 	.word	0x200002dc
 800137c:	200002e8 	.word	0x200002e8
 8001380:	200002f4 	.word	0x200002f4
 8001384:	20000310 	.word	0x20000310

08001388 <CalculateCRC>:
 0x78, 0xd6, 0x9b, 0x4c, 0x01, 0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17,
 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8
};

uint8_t CalculateCRC(uint8_t package[], uint8_t len)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	for (i = 0; i < len; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	81bb      	strh	r3, [r7, #12]
 800139c:	e009      	b.n	80013b2 <CalculateCRC+0x2a>
	{
		crc += package[i];
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4413      	add	r3, r2
 80013aa:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len; i++)
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	81bb      	strh	r3, [r7, #12]
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	89ba      	ldrh	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3f0      	bcc.n	800139e <CalculateCRC+0x16>
		//crc = CrcTable[(crc ^ package[i]) & 0xff];
	}
	return 0xFF - crc;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	43db      	mvns	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <IMU_init>:

void IMU_init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 80013d4:	4b57      	ldr	r3, [pc, #348]	; (8001534 <IMU_init+0x164>)
 80013d6:	22bf      	movs	r2, #191	; 0xbf
 80013d8:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <IMU_init+0x164>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80013e0:	4b54      	ldr	r3, [pc, #336]	; (8001534 <IMU_init+0x164>)
 80013e2:	4a55      	ldr	r2, [pc, #340]	; (8001538 <IMU_init+0x168>)
 80013e4:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80013e6:	4b53      	ldr	r3, [pc, #332]	; (8001534 <IMU_init+0x164>)
 80013e8:	4a54      	ldr	r2, [pc, #336]	; (800153c <IMU_init+0x16c>)
 80013ea:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80013ec:	4b51      	ldr	r3, [pc, #324]	; (8001534 <IMU_init+0x164>)
 80013ee:	4a54      	ldr	r2, [pc, #336]	; (8001540 <IMU_init+0x170>)
 80013f0:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80013f2:	4b50      	ldr	r3, [pc, #320]	; (8001534 <IMU_init+0x164>)
 80013f4:	4a53      	ldr	r2, [pc, #332]	; (8001544 <IMU_init+0x174>)
 80013f6:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <IMU_init+0x164>)
 80013fa:	4a53      	ldr	r2, [pc, #332]	; (8001548 <IMU_init+0x178>)
 80013fc:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <IMU_init+0x164>)
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <IMU_init+0x17c>)
 8001402:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 8001404:	494b      	ldr	r1, [pc, #300]	; (8001534 <IMU_init+0x164>)
 8001406:	4852      	ldr	r0, [pc, #328]	; (8001550 <IMU_init+0x180>)
 8001408:	f003 f8cc 	bl	80045a4 <HTS221_RegisterBusIO>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d000      	beq.n	8001414 <IMU_init+0x44>
		while(1);
 8001412:	e7fe      	b.n	8001412 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 8001414:	484e      	ldr	r0, [pc, #312]	; (8001550 <IMU_init+0x180>)
 8001416:	f003 f90f 	bl	8004638 <HTS221_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d000      	beq.n	8001422 <IMU_init+0x52>
		while (1);
 8001420:	e7fe      	b.n	8001420 <IMU_init+0x50>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 8001422:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <IMU_init+0x184>)
 8001424:	2233      	movs	r2, #51	; 0x33
 8001426:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <IMU_init+0x184>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 800142e:	4b49      	ldr	r3, [pc, #292]	; (8001554 <IMU_init+0x184>)
 8001430:	4a41      	ldr	r2, [pc, #260]	; (8001538 <IMU_init+0x168>)
 8001432:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001434:	4b47      	ldr	r3, [pc, #284]	; (8001554 <IMU_init+0x184>)
 8001436:	4a41      	ldr	r2, [pc, #260]	; (800153c <IMU_init+0x16c>)
 8001438:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800143a:	4b46      	ldr	r3, [pc, #280]	; (8001554 <IMU_init+0x184>)
 800143c:	4a40      	ldr	r2, [pc, #256]	; (8001540 <IMU_init+0x170>)
 800143e:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001440:	4b44      	ldr	r3, [pc, #272]	; (8001554 <IMU_init+0x184>)
 8001442:	4a40      	ldr	r2, [pc, #256]	; (8001544 <IMU_init+0x174>)
 8001444:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 8001446:	4b43      	ldr	r3, [pc, #268]	; (8001554 <IMU_init+0x184>)
 8001448:	4a3f      	ldr	r2, [pc, #252]	; (8001548 <IMU_init+0x178>)
 800144a:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <IMU_init+0x184>)
 800144e:	4a3f      	ldr	r2, [pc, #252]	; (800154c <IMU_init+0x17c>)
 8001450:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 8001452:	4940      	ldr	r1, [pc, #256]	; (8001554 <IMU_init+0x184>)
 8001454:	4840      	ldr	r0, [pc, #256]	; (8001558 <IMU_init+0x188>)
 8001456:	f004 f84f 	bl	80054f8 <LSM303AGR_ACC_RegisterBusIO>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d000      	beq.n	8001462 <IMU_init+0x92>
		while(1);
 8001460:	e7fe      	b.n	8001460 <IMU_init+0x90>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 8001462:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <IMU_init+0x184>)
 8001464:	223d      	movs	r2, #61	; 0x3d
 8001466:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 8001468:	493a      	ldr	r1, [pc, #232]	; (8001554 <IMU_init+0x184>)
 800146a:	483c      	ldr	r0, [pc, #240]	; (800155c <IMU_init+0x18c>)
 800146c:	f004 fa34 	bl	80058d8 <LSM303AGR_MAG_RegisterBusIO>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d000      	beq.n	8001478 <IMU_init+0xa8>
		while(1);
 8001476:	e7fe      	b.n	8001476 <IMU_init+0xa6>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 8001478:	4837      	ldr	r0, [pc, #220]	; (8001558 <IMU_init+0x188>)
 800147a:	f004 f8a7 	bl	80055cc <LSM303AGR_ACC_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d000      	beq.n	8001486 <IMU_init+0xb6>
		while (1);
 8001484:	e7fe      	b.n	8001484 <IMU_init+0xb4>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 8001486:	4835      	ldr	r0, [pc, #212]	; (800155c <IMU_init+0x18c>)
 8001488:	f004 fa8a 	bl	80059a0 <LSM303AGR_MAG_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d000      	beq.n	8001494 <IMU_init+0xc4>
		while (1);
 8001492:	e7fe      	b.n	8001492 <IMU_init+0xc2>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <IMU_init+0x190>)
 8001496:	22d7      	movs	r2, #215	; 0xd7
 8001498:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <IMU_init+0x190>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <IMU_init+0x190>)
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <IMU_init+0x168>)
 80014a4:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <IMU_init+0x190>)
 80014a8:	4a24      	ldr	r2, [pc, #144]	; (800153c <IMU_init+0x16c>)
 80014aa:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <IMU_init+0x190>)
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <IMU_init+0x170>)
 80014b0:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <IMU_init+0x190>)
 80014b4:	4a23      	ldr	r2, [pc, #140]	; (8001544 <IMU_init+0x174>)
 80014b6:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <IMU_init+0x190>)
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <IMU_init+0x178>)
 80014bc:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <IMU_init+0x190>)
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <IMU_init+0x17c>)
 80014c2:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 80014c4:	4926      	ldr	r1, [pc, #152]	; (8001560 <IMU_init+0x190>)
 80014c6:	4827      	ldr	r0, [pc, #156]	; (8001564 <IMU_init+0x194>)
 80014c8:	f004 ff44 	bl	8006354 <LSM6DSL_RegisterBusIO>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d000      	beq.n	80014d4 <IMU_init+0x104>
		while(1);
 80014d2:	e7fe      	b.n	80014d2 <IMU_init+0x102>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 80014d4:	4823      	ldr	r0, [pc, #140]	; (8001564 <IMU_init+0x194>)
 80014d6:	f004 ffa7 	bl	8006428 <LSM6DSL_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d000      	beq.n	80014e2 <IMU_init+0x112>
		while (1);
 80014e0:	e7fe      	b.n	80014e0 <IMU_init+0x110>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <IMU_init+0x198>)
 80014e4:	22bb      	movs	r2, #187	; 0xbb
 80014e6:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <IMU_init+0x198>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <IMU_init+0x198>)
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <IMU_init+0x168>)
 80014f2:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <IMU_init+0x198>)
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <IMU_init+0x16c>)
 80014f8:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <IMU_init+0x198>)
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <IMU_init+0x170>)
 80014fe:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <IMU_init+0x198>)
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <IMU_init+0x174>)
 8001504:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <IMU_init+0x198>)
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <IMU_init+0x178>)
 800150a:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <IMU_init+0x198>)
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <IMU_init+0x17c>)
 8001510:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 8001512:	4915      	ldr	r1, [pc, #84]	; (8001568 <IMU_init+0x198>)
 8001514:	4815      	ldr	r0, [pc, #84]	; (800156c <IMU_init+0x19c>)
 8001516:	f003 fcf3 	bl	8004f00 <LPS22HB_RegisterBusIO>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d000      	beq.n	8001522 <IMU_init+0x152>
		while(1);
 8001520:	e7fe      	b.n	8001520 <IMU_init+0x150>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 8001522:	4812      	ldr	r0, [pc, #72]	; (800156c <IMU_init+0x19c>)
 8001524:	f003 fd56 	bl	8004fd4 <LPS22HB_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d000      	beq.n	8001530 <IMU_init+0x160>
		while (1);
 800152e:	e7fe      	b.n	800152e <IMU_init+0x15e>
	}



}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000032c 	.word	0x2000032c
 8001538:	0800408d 	.word	0x0800408d
 800153c:	08004109 	.word	0x08004109
 8001540:	080041bd 	.word	0x080041bd
 8001544:	08004159 	.word	0x08004159
 8001548:	08006bed 	.word	0x08006bed
 800154c:	08006c05 	.word	0x08006c05
 8001550:	2000034c 	.word	0x2000034c
 8001554:	20000380 	.word	0x20000380
 8001558:	200003a0 	.word	0x200003a0
 800155c:	200003d4 	.word	0x200003d4
 8001560:	20000408 	.word	0x20000408
 8001564:	20000428 	.word	0x20000428
 8001568:	20000460 	.word	0x20000460
 800156c:	20000480 	.word	0x20000480

08001570 <IMU_enable>:

void IMU_enable(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 8001574:	4819      	ldr	r0, [pc, #100]	; (80015dc <IMU_enable+0x6c>)
 8001576:	f003 f87a 	bl	800466e <HTS221_HUM_Enable>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d000      	beq.n	8001582 <IMU_enable+0x12>
		while (1);
 8001580:	e7fe      	b.n	8001580 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 8001582:	4816      	ldr	r0, [pc, #88]	; (80015dc <IMU_enable+0x6c>)
 8001584:	f003 f920 	bl	80047c8 <HTS221_TEMP_Enable>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d000      	beq.n	8001590 <IMU_enable+0x20>
		while (1);
 800158e:	e7fe      	b.n	800158e <IMU_enable+0x1e>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <IMU_enable+0x70>)
 8001592:	f004 f85c 	bl	800564e <LSM303AGR_ACC_Enable>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d000      	beq.n	800159e <IMU_enable+0x2e>
		while (1);
 800159c:	e7fe      	b.n	800159c <IMU_enable+0x2c>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 800159e:	4811      	ldr	r0, [pc, #68]	; (80015e4 <IMU_enable+0x74>)
 80015a0:	f004 fa3b 	bl	8005a1a <LSM303AGR_MAG_Enable>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d000      	beq.n	80015ac <IMU_enable+0x3c>
		while (1);
 80015aa:	e7fe      	b.n	80015aa <IMU_enable+0x3a>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <IMU_enable+0x78>)
 80015ae:	f004 ffa4 	bl	80064fa <LSM6DSL_ACC_Enable>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d000      	beq.n	80015ba <IMU_enable+0x4a>
		while (1);
 80015b8:	e7fe      	b.n	80015b8 <IMU_enable+0x48>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 80015ba:	480b      	ldr	r0, [pc, #44]	; (80015e8 <IMU_enable+0x78>)
 80015bc:	f004 ffc1 	bl	8006542 <LSM6DSL_GYRO_Enable>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d000      	beq.n	80015c8 <IMU_enable+0x58>
		while (1);
 80015c6:	e7fe      	b.n	80015c6 <IMU_enable+0x56>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <IMU_enable+0x7c>)
 80015ca:	f003 fd1e 	bl	800500a <LPS22HB_PRESS_Enable>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d000      	beq.n	80015d6 <IMU_enable+0x66>
		while (1);
 80015d4:	e7fe      	b.n	80015d4 <IMU_enable+0x64>
	}
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000034c 	.word	0x2000034c
 80015e0:	200003a0 	.word	0x200003a0
 80015e4:	200003d4 	.word	0x200003d4
 80015e8:	20000428 	.word	0x20000428
 80015ec:	20000480 	.word	0x20000480

080015f0 <IMU_GetData>:

void IMU_GetData(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	 //IMUFrameTypeDef imu_frame;

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 80015f4:	4928      	ldr	r1, [pc, #160]	; (8001698 <IMU_GetData+0xa8>)
 80015f6:	4829      	ldr	r0, [pc, #164]	; (800169c <IMU_GetData+0xac>)
 80015f8:	f003 f85e 	bl	80046b8 <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 80015fc:	4928      	ldr	r1, [pc, #160]	; (80016a0 <IMU_GetData+0xb0>)
 80015fe:	4827      	ldr	r0, [pc, #156]	; (800169c <IMU_GetData+0xac>)
 8001600:	f003 f907 	bl	8004812 <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 8001604:	4927      	ldr	r1, [pc, #156]	; (80016a4 <IMU_GetData+0xb4>)
 8001606:	4828      	ldr	r0, [pc, #160]	; (80016a8 <IMU_GetData+0xb8>)
 8001608:	f004 f8f6 	bl	80057f8 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 800160c:	4927      	ldr	r1, [pc, #156]	; (80016ac <IMU_GetData+0xbc>)
 800160e:	4828      	ldr	r0, [pc, #160]	; (80016b0 <IMU_GetData+0xc0>)
 8001610:	f004 fa33 	bl	8005a7a <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 8001614:	4927      	ldr	r1, [pc, #156]	; (80016b4 <IMU_GetData+0xc4>)
 8001616:	4828      	ldr	r0, [pc, #160]	; (80016b8 <IMU_GetData+0xc8>)
 8001618:	f003 fd1b 	bl	8005052 <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 800161c:	4927      	ldr	r1, [pc, #156]	; (80016bc <IMU_GetData+0xcc>)
 800161e:	4828      	ldr	r0, [pc, #160]	; (80016c0 <IMU_GetData+0xd0>)
 8001620:	f005 f806 	bl	8006630 <LSM6DSL_GYRO_GetAxes>

	 imu_frame.humidity = current_humidity_perc;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <IMU_GetData+0xa8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <IMU_GetData+0xd4>)
 800162a:	6053      	str	r3, [r2, #4]
	 imu_frame.temperature = current_temperature_degC;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <IMU_GetData+0xb0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <IMU_GetData+0xd4>)
 8001632:	6013      	str	r3, [r2, #0]
	 imu_frame.pressure = current_pressure_hPa;
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <IMU_GetData+0xc4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <IMU_GetData+0xd4>)
 800163a:	6093      	str	r3, [r2, #8]
	 imu_frame.magnetic_x = current_magnetic_mG.x;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <IMU_GetData+0xbc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <IMU_GetData+0xd4>)
 8001642:	60d3      	str	r3, [r2, #12]
	 imu_frame.magnetic_y = current_magnetic_mG.y;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <IMU_GetData+0xbc>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <IMU_GetData+0xd4>)
 800164a:	6113      	str	r3, [r2, #16]
	 imu_frame.magnetic_z = current_magnetic_mG.z;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <IMU_GetData+0xbc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <IMU_GetData+0xd4>)
 8001652:	6153      	str	r3, [r2, #20]
	 imu_frame.acceleration_x = current_acceleration_mg.x;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <IMU_GetData+0xb4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <IMU_GetData+0xd4>)
 800165a:	6193      	str	r3, [r2, #24]
	 imu_frame.acceleration_y = current_acceleration_mg.y;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <IMU_GetData+0xb4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <IMU_GetData+0xd4>)
 8001662:	61d3      	str	r3, [r2, #28]
	 imu_frame.acceleration_z = current_acceleration_mg.z;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <IMU_GetData+0xb4>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <IMU_GetData+0xd4>)
 800166a:	6213      	str	r3, [r2, #32]
	 imu_frame.gyro_x = current_angular_rate_mdps.x;
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <IMU_GetData+0xcc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <IMU_GetData+0xd4>)
 8001672:	6253      	str	r3, [r2, #36]	; 0x24
	 imu_frame.gyro_y = current_angular_rate_mdps.y;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <IMU_GetData+0xcc>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <IMU_GetData+0xd4>)
 800167a:	6293      	str	r3, [r2, #40]	; 0x28
	 imu_frame.gyro_z = current_angular_rate_mdps.z;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <IMU_GetData+0xcc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <IMU_GetData+0xd4>)
 8001682:	62d3      	str	r3, [r2, #44]	; 0x2c

	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU, NULL,&imu_frame);
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <IMU_GetData+0xd8>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <IMU_GetData+0xd4>)
 800168a:	2200      	movs	r2, #0
 800168c:	2120      	movs	r1, #32
 800168e:	f000 f901 	bl	8001894 <MESSAGE_SendMailbox>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_GYR, NULL,message_gyro);
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_MAG, NULL,message_mag);*/

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000308 	.word	0x20000308
 800169c:	2000034c 	.word	0x2000034c
 80016a0:	20000304 	.word	0x20000304
 80016a4:	200002dc 	.word	0x200002dc
 80016a8:	200003a0 	.word	0x200003a0
 80016ac:	200002f4 	.word	0x200002f4
 80016b0:	200003d4 	.word	0x200003d4
 80016b4:	20000300 	.word	0x20000300
 80016b8:	20000480 	.word	0x20000480
 80016bc:	200002e8 	.word	0x200002e8
 80016c0:	20000428 	.word	0x20000428
 80016c4:	200004b4 	.word	0x200004b4
 80016c8:	200004e4 	.word	0x200004e4

080016cc <TransmitIMUFrame>:

void TransmitIMUFrame(IMUFrameTypeDef *frame) {
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	b093      	sub	sp, #76	; 0x4c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
    // Convertir la structure en un tableau de bytes
	uint8_t *buffer = (uint8_t *)malloc(sizeof(API_FrameTypeDef_IMU));
 80016d4:	2036      	movs	r0, #54	; 0x36
 80016d6:	f00e fbab 	bl	800fe30 <malloc>
 80016da:	4603      	mov	r3, r0
 80016dc:	647b      	str	r3, [r7, #68]	; 0x44
    //uint8_t buffer[sizeof(API_FrameTypeDef_IMU)];
	if (buffer == NULL) {
 80016de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d03b      	beq.n	800175c <TransmitIMUFrame+0x90>
		// Gérer l'erreur d'allocation de mémoire
		return;
	}
    API_FrameTypeDef_IMU api_frame = {
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2236      	movs	r2, #54	; 0x36
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00e fbbd 	bl	800fe6c <memset>
 80016f2:	237e      	movs	r3, #126	; 0x7e
 80016f4:	733b      	strb	r3, [r7, #12]
 80016f6:	2330      	movs	r3, #48	; 0x30
 80016f8:	81fb      	strh	r3, [r7, #14]
 80016fa:	2320      	movs	r3, #32
 80016fc:	743b      	strb	r3, [r7, #16]
    .length = sizeof(IMUFrameTypeDef),
    .frame_type = MSG_ID_IMU,
	.data={0},
	.crc = 0};

    memcpy(&(api_frame.data), frame, sizeof(IMUFrameTypeDef));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f107 0011 	add.w	r0, r7, #17
 8001704:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001708:	4602      	mov	r2, r0
 800170a:	4619      	mov	r1, r3
 800170c:	f8d1 c000 	ldr.w	ip, [r1]
 8001710:	684e      	ldr	r6, [r1, #4]
 8001712:	688d      	ldr	r5, [r1, #8]
 8001714:	68c9      	ldr	r1, [r1, #12]
 8001716:	f8c2 c000 	str.w	ip, [r2]
 800171a:	6056      	str	r6, [r2, #4]
 800171c:	6095      	str	r5, [r2, #8]
 800171e:	60d1      	str	r1, [r2, #12]
 8001720:	3310      	adds	r3, #16
 8001722:	3010      	adds	r0, #16
 8001724:	42a3      	cmp	r3, r4
 8001726:	d1ef      	bne.n	8001708 <TransmitIMUFrame+0x3c>
    api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(IMUFrameTypeDef));
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	3305      	adds	r3, #5
 800172e:	2130      	movs	r1, #48	; 0x30
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe29 	bl	8001388 <CalculateCRC>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_IMU));
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2236      	movs	r2, #54	; 0x36
 8001742:	4619      	mov	r1, r3
 8001744:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001746:	f00e fb83 	bl	800fe50 <memcpy>

    adresse_buffer = buffer;
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <TransmitIMUFrame+0x98>)
 800174c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174e:	6013      	str	r3, [r2, #0]
    // Transmettre le tableau de bytes via UART
    HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_IMU));
 8001750:	2236      	movs	r2, #54	; 0x36
 8001752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <TransmitIMUFrame+0x9c>)
 8001756:	f00a fb43 	bl	800bde0 <HAL_UART_Transmit_IT>
 800175a:	e000      	b.n	800175e <TransmitIMUFrame+0x92>
		return;
 800175c:	bf00      	nop
}
 800175e:	374c      	adds	r7, #76	; 0x4c
 8001760:	46bd      	mov	sp, r7
 8001762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001764:	2000030c 	.word	0x2000030c
 8001768:	20000ae4 	.word	0x20000ae4

0800176c <CalCRC8>:
#include "stm32l4xx_hal.h"

extern UART_HandleTypeDef huart4;

uint8_t CalCRC8(uint8_t package[], uint8_t len)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	for (i = 0; i < len; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	81bb      	strh	r3, [r7, #12]
 8001780:	e00d      	b.n	800179e <CalCRC8+0x32>
	{
		crc = CrcTable[(crc ^ package[i]) & 0xff];
 8001782:	89bb      	ldrh	r3, [r7, #12]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	4053      	eors	r3, r2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <CalCRC8+0x4c>)
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len; i++)
 8001798:	89bb      	ldrh	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	81bb      	strh	r3, [r7, #12]
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	89ba      	ldrh	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3ec      	bcc.n	8001782 <CalCRC8+0x16>
	}
	return crc;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	08013fe8 	.word	0x08013fe8

080017bc <TransmitLiDARFrame>:
		}
	}
	return lf;
}

void TransmitLiDARFrame(LiDARFrameTypeDef *frame) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0be      	sub	sp, #248	; 0xf8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_LIDAR)];
	API_FrameTypeDef_LIDAR api_frame;
	api_frame.header = API_HEADER;
 80017c4:	237e      	movs	r3, #126	; 0x7e
 80017c6:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(LiDARFrameTypeDef);
 80017c8:	2371      	movs	r3, #113	; 0x71
 80017ca:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_LIDAR;
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(LiDARFrameTypeDef));
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	f107 030d 	add.w	r3, r7, #13
 80017d6:	4611      	mov	r1, r2
 80017d8:	2271      	movs	r2, #113	; 0x71
 80017da:	4618      	mov	r0, r3
 80017dc:	f00e fb38 	bl	800fe50 <memcpy>
	api_frame.crc = CalCRC8((uint8_t*)&(api_frame.data), sizeof(LiDARFrameTypeDef));
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	3305      	adds	r3, #5
 80017e6:	2171      	movs	r1, #113	; 0x71
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ffbf 	bl	800176c <CalCRC8>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_LIDAR));
 80017f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017f8:	f107 0108 	add.w	r1, r7, #8
 80017fc:	2278      	movs	r2, #120	; 0x78
 80017fe:	4618      	mov	r0, r3
 8001800:	f00e fb26 	bl	800fe50 <memcpy>

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_LIDAR));
 8001804:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001808:	2278      	movs	r2, #120	; 0x78
 800180a:	4619      	mov	r1, r3
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <TransmitLiDARFrame+0x60>)
 800180e:	f00a fae7 	bl	800bde0 <HAL_UART_Transmit_IT>

}
 8001812:	bf00      	nop
 8001814:	37f8      	adds	r7, #248	; 0xf8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000ae4 	.word	0x20000ae4

08001820 <MESSAGE_Init>:

//QueueHandle_t IMU_Mailbox;
//QueueHandle_t GPS_Mailbox;
QueueHandle_t Appli_Mailbox;

void  MESSAGE_Init(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	//IMU_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	//GPS_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	Appli_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
 8001824:	2200      	movs	r2, #0
 8001826:	210c      	movs	r1, #12
 8001828:	2020      	movs	r0, #32
 800182a:	f00c f8bb 	bl	800d9a4 <xQueueGenericCreate>
 800182e:	4603      	mov	r3, r0
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <MESSAGE_Init+0x24>)
 8001832:	6013      	str	r3, [r2, #0]

	/* Add queues to registry in order to view them in stm32cube ide */
	//vQueueAddToRegistry(IMU_Mailbox,"IMU Mailbox");
	//vQueueAddToRegistry(GPS_Mailbox,"GPS Mailbox");
	vQueueAddToRegistry(Appli_Mailbox,"Appli Mailbox");
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <MESSAGE_Init+0x24>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4903      	ldr	r1, [pc, #12]	; (8001848 <MESSAGE_Init+0x28>)
 800183a:	4618      	mov	r0, r3
 800183c:	f00c fdf8 	bl	800e430 <vQueueAddToRegistry>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200004e4 	.word	0x200004e4
 8001848:	08013f5c 	.word	0x08013f5c

0800184c <MESSAGE_ReadMailboxNoDelay>:
 *
 * @remark This function is non blocking.
 * If mailbox is empty when calling the function, a message structure is still returned with \ref MSG_ID_NO_MESSAGE
 * in message id field
 */
MESSAGE_Typedef MESSAGE_ReadMailboxNoDelay(QueueHandle_t mbx) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
	MESSAGE_Typedef msg= {0};
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]

	if (!xQueueReceive(mbx, &msg, 0))  // Pas de message dans la mailbox
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	6838      	ldr	r0, [r7, #0]
 800186c:	f00c facc 	bl	800de08 <xQueueReceive>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <MESSAGE_ReadMailboxNoDelay+0x2e>
		msg.id=MSG_ID_NO_MESSAGE;
 8001876:	2300      	movs	r3, #0
 8001878:	81bb      	strh	r3, [r7, #12]

	return msg;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	461c      	mov	r4, r3
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
	...

08001894 <MESSAGE_SendMailbox>:
 * @return None
 *
 * @remark This function is non blocking.
 * If mailbox is full when calling the function, error will be ignored silently
 */
void MESSAGE_SendMailbox(QueueHandle_t mbx_dest, uint16_t id, QueueHandle_t mbx_sender, void *data){
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	460b      	mov	r3, r1
 80018a2:	817b      	strh	r3, [r7, #10]
	MESSAGE_Typedef msg;

	msg.id=id;
 80018a4:	897b      	ldrh	r3, [r7, #10]
 80018a6:	82bb      	strh	r3, [r7, #20]
	msg.sender = &mbx_sender;
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	61bb      	str	r3, [r7, #24]
	msg.data=data;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	61fb      	str	r3, [r7, #28]

	if (!xQueueSend(mbx_dest, &msg, 0)) { // envoi sans attendre
 80018b0:	f107 0114 	add.w	r1, r7, #20
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f00c f919 	bl	800daf0 <xQueueGenericSend>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <MESSAGE_SendMailbox+0x36>
		printf("Failed to send data, Queue full.\r\n");
 80018c4:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MESSAGE_SendMailbox+0x40>)
 80018c6:	f00e fe37 	bl	8010538 <puts>
	}
}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08013f6c 	.word	0x08013f6c

080018d8 <task_update_gps>:
	}
}



void task_update_gps(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	if (nmeaFrameValid){
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <task_update_gps+0x28>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00a      	beq.n	80018fa <task_update_gps+0x22>
		ProcessNMEALine(nmeaFrame,&gpsCoords, &gpsQuality);
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <task_update_gps+0x2c>)
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <task_update_gps+0x30>)
 80018e8:	4808      	ldr	r0, [pc, #32]	; (800190c <task_update_gps+0x34>)
 80018ea:	f000 fbd7 	bl	800209c <ProcessNMEALine>
		gpsSend = 1;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <task_update_gps+0x38>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
		nmeaFrameValid = 0;
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <task_update_gps+0x28>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
	}

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000e4c 	.word	0x20000e4c
 8001904:	20000328 	.word	0x20000328
 8001908:	20000310 	.word	0x20000310
 800190c:	20000d84 	.word	0x20000d84
 8001910:	200004e8 	.word	0x200004e8

08001914 <task_send_values_GPS>:

void task_send_values_GPS (void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b09a      	sub	sp, #104	; 0x68
 8001918:	af00      	add	r7, sp, #0

	if (gpsSend){
 800191a:	4bc8      	ldr	r3, [pc, #800]	; (8001c3c <task_send_values_GPS+0x328>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8378 	beq.w	8002014 <task_send_values_GPS+0x700>
		//Latitude
		double computing = gpsCoords.lat;
 8001924:	4bc6      	ldr	r3, [pc, #792]	; (8001c40 <task_send_values_GPS+0x32c>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat7 = floor(computing);
 800192e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001932:	f012 fa55 	bl	8013de0 <floor>
 8001936:	ec53 2b10 	vmov	r2, r3, d0
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff f91b 	bl	8000b78 <__aeabi_d2iz>
 8001942:	4603      	mov	r3, r0
 8001944:	65fb      	str	r3, [r7, #92]	; 0x5c
		computing = 100.0*(computing-(double)Lat7);
 8001946:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001948:	f7fe fdfc 	bl	8000544 <__aeabi_i2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001954:	f7fe fca8 	bl	80002a8 <__aeabi_dsub>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4bb7      	ldr	r3, [pc, #732]	; (8001c44 <task_send_values_GPS+0x330>)
 8001966:	f7fe fe57 	bl	8000618 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat6 = floor(computing);
 8001972:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001976:	f012 fa33 	bl	8013de0 <floor>
 800197a:	ec53 2b10 	vmov	r2, r3, d0
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f8f9 	bl	8000b78 <__aeabi_d2iz>
 8001986:	4603      	mov	r3, r0
 8001988:	65bb      	str	r3, [r7, #88]	; 0x58
		computing = 100.0*(computing-(double)Lat6);
 800198a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800198c:	f7fe fdda 	bl	8000544 <__aeabi_i2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001998:	f7fe fc86 	bl	80002a8 <__aeabi_dsub>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4ba6      	ldr	r3, [pc, #664]	; (8001c44 <task_send_values_GPS+0x330>)
 80019aa:	f7fe fe35 	bl	8000618 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat5 = floor(computing);
 80019b6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80019ba:	f012 fa11 	bl	8013de0 <floor>
 80019be:	ec53 2b10 	vmov	r2, r3, d0
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f8d7 	bl	8000b78 <__aeabi_d2iz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	657b      	str	r3, [r7, #84]	; 0x54
		computing = 100.0*(computing-(double)Lat5);
 80019ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80019d0:	f7fe fdb8 	bl	8000544 <__aeabi_i2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80019dc:	f7fe fc64 	bl	80002a8 <__aeabi_dsub>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b95      	ldr	r3, [pc, #596]	; (8001c44 <task_send_values_GPS+0x330>)
 80019ee:	f7fe fe13 	bl	8000618 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat4 = floor(computing);
 80019fa:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80019fe:	f012 f9ef 	bl	8013de0 <floor>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8b5 	bl	8000b78 <__aeabi_d2iz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
		computing = 100.0*(computing-(double)Lat4);
 8001a12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a14:	f7fe fd96 	bl	8000544 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a20:	f7fe fc42 	bl	80002a8 <__aeabi_dsub>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b84      	ldr	r3, [pc, #528]	; (8001c44 <task_send_values_GPS+0x330>)
 8001a32:	f7fe fdf1 	bl	8000618 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat3 = floor(computing);
 8001a3e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001a42:	f012 f9cd 	bl	8013de0 <floor>
 8001a46:	ec53 2b10 	vmov	r2, r3, d0
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f893 	bl	8000b78 <__aeabi_d2iz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	64fb      	str	r3, [r7, #76]	; 0x4c
		computing = 100.0*(computing-(double)Lat3);
 8001a56:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a58:	f7fe fd74 	bl	8000544 <__aeabi_i2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a64:	f7fe fc20 	bl	80002a8 <__aeabi_dsub>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <task_send_values_GPS+0x330>)
 8001a76:	f7fe fdcf 	bl	8000618 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat2 = floor(computing);
 8001a82:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001a86:	f012 f9ab 	bl	8013de0 <floor>
 8001a8a:	ec53 2b10 	vmov	r2, r3, d0
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f871 	bl	8000b78 <__aeabi_d2iz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	64bb      	str	r3, [r7, #72]	; 0x48
		computing = 100.0*(computing-(double)Lat2);
 8001a9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a9c:	f7fe fd52 	bl	8000544 <__aeabi_i2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001aa8:	f7fe fbfe 	bl	80002a8 <__aeabi_dsub>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b62      	ldr	r3, [pc, #392]	; (8001c44 <task_send_values_GPS+0x330>)
 8001aba:	f7fe fdad 	bl	8000618 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat1 = floor(computing);
 8001ac6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001aca:	f012 f989 	bl	8013de0 <floor>
 8001ace:	ec53 2b10 	vmov	r2, r3, d0
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f84f 	bl	8000b78 <__aeabi_d2iz>
 8001ada:	4603      	mov	r3, r0
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
		computing = 100.0*(computing-(double)Lat1);
 8001ade:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ae0:	f7fe fd30 	bl	8000544 <__aeabi_i2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001aec:	f7fe fbdc 	bl	80002a8 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <task_send_values_GPS+0x330>)
 8001afe:	f7fe fd8b 	bl	8000618 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat0 = floor(computing);
 8001b0a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001b0e:	f012 f967 	bl	8013de0 <floor>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f82d 	bl	8000b78 <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	643b      	str	r3, [r7, #64]	; 0x40

		gps_data1.gps_data_lat[0] = Lat7;
 8001b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b28:	701a      	strb	r2, [r3, #0]
		gps_data1.gps_data_lat[1] = Lat6;
 8001b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b30:	705a      	strb	r2, [r3, #1]
		gps_data1.gps_data_lat[2] = Lat5;
 8001b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b38:	709a      	strb	r2, [r3, #2]
		gps_data1.gps_data_lat[3] = Lat4;
 8001b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b40:	70da      	strb	r2, [r3, #3]
		gps_data1.gps_data_lat[4] = Lat3;
 8001b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b48:	711a      	strb	r2, [r3, #4]
		gps_data1.gps_data_lat[5] = Lat2;
 8001b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b50:	715a      	strb	r2, [r3, #5]
		gps_data1.gps_data_lat[6] = Lat1;
 8001b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b58:	719a      	strb	r2, [r3, #6]
		gps_data1.gps_data_lat[7] = Lat0;
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <task_send_values_GPS+0x334>)
 8001b60:	71da      	strb	r2, [r3, #7]
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Longitude
		computing = gpsCoords.lon;
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <task_send_values_GPS+0x32c>)
 8001b64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b68:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon7 = floor(computing);
 8001b6c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001b70:	f012 f936 	bl	8013de0 <floor>
 8001b74:	ec53 2b10 	vmov	r2, r3, d0
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe fffc 	bl	8000b78 <__aeabi_d2iz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
		computing = 100.0*(computing-(double)Lon7);
 8001b84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b86:	f7fe fcdd 	bl	8000544 <__aeabi_i2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b92:	f7fe fb89 	bl	80002a8 <__aeabi_dsub>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <task_send_values_GPS+0x330>)
 8001ba4:	f7fe fd38 	bl	8000618 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon6 = floor(computing);
 8001bb0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001bb4:	f012 f914 	bl	8013de0 <floor>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ffda 	bl	8000b78 <__aeabi_d2iz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
		computing = 100.0*(computing-(double)Lon6);
 8001bc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bca:	f7fe fcbb 	bl	8000544 <__aeabi_i2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001bd6:	f7fe fb67 	bl	80002a8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <task_send_values_GPS+0x330>)
 8001be8:	f7fe fd16 	bl	8000618 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon5 = floor(computing);
 8001bf4:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001bf8:	f012 f8f2 	bl	8013de0 <floor>
 8001bfc:	ec53 2b10 	vmov	r2, r3, d0
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ffb8 	bl	8000b78 <__aeabi_d2iz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
		computing = 100.0*(computing-(double)Lon5);
 8001c0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c0e:	f7fe fc99 	bl	8000544 <__aeabi_i2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c1a:	f7fe fb45 	bl	80002a8 <__aeabi_dsub>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <task_send_values_GPS+0x330>)
 8001c2c:	f7fe fcf4 	bl	8000618 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001c38:	e008      	b.n	8001c4c <task_send_values_GPS+0x338>
 8001c3a:	bf00      	nop
 8001c3c:	200004e8 	.word	0x200004e8
 8001c40:	20000310 	.word	0x20000310
 8001c44:	40590000 	.word	0x40590000
 8001c48:	200004ec 	.word	0x200004ec
		int Lon4 = floor(computing);
 8001c4c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001c50:	f012 f8c6 	bl	8013de0 <floor>
 8001c54:	ec53 2b10 	vmov	r2, r3, d0
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff8c 	bl	8000b78 <__aeabi_d2iz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
		computing = 100.0*(computing-(double)Lon4);
 8001c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c66:	f7fe fc6d 	bl	8000544 <__aeabi_i2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c72:	f7fe fb19 	bl	80002a8 <__aeabi_dsub>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	4bca      	ldr	r3, [pc, #808]	; (8001fac <task_send_values_GPS+0x698>)
 8001c84:	f7fe fcc8 	bl	8000618 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon3 = floor(computing);
 8001c90:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001c94:	f012 f8a4 	bl	8013de0 <floor>
 8001c98:	ec53 2b10 	vmov	r2, r3, d0
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff6a 	bl	8000b78 <__aeabi_d2iz>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
		computing = 100.0*(computing-(double)Lon3);
 8001ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001caa:	f7fe fc4b 	bl	8000544 <__aeabi_i2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001cb6:	f7fe faf7 	bl	80002a8 <__aeabi_dsub>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4bb9      	ldr	r3, [pc, #740]	; (8001fac <task_send_values_GPS+0x698>)
 8001cc8:	f7fe fca6 	bl	8000618 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon2 = floor(computing);
 8001cd4:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001cd8:	f012 f882 	bl	8013de0 <floor>
 8001cdc:	ec53 2b10 	vmov	r2, r3, d0
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff48 	bl	8000b78 <__aeabi_d2iz>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
		computing = 100.0*(computing-(double)Lon2);
 8001cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cee:	f7fe fc29 	bl	8000544 <__aeabi_i2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001cfa:	f7fe fad5 	bl	80002a8 <__aeabi_dsub>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <task_send_values_GPS+0x698>)
 8001d0c:	f7fe fc84 	bl	8000618 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon1 = floor(computing);
 8001d18:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d1c:	f012 f860 	bl	8013de0 <floor>
 8001d20:	ec53 2b10 	vmov	r2, r3, d0
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff26 	bl	8000b78 <__aeabi_d2iz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
		computing = 100.0*(computing-(double)Lon1);
 8001d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d32:	f7fe fc07 	bl	8000544 <__aeabi_i2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d3e:	f7fe fab3 	bl	80002a8 <__aeabi_dsub>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b97      	ldr	r3, [pc, #604]	; (8001fac <task_send_values_GPS+0x698>)
 8001d50:	f7fe fc62 	bl	8000618 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon0 = floor(computing);
 8001d5c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d60:	f012 f83e 	bl	8013de0 <floor>
 8001d64:	ec53 2b10 	vmov	r2, r3, d0
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff04 	bl	8000b78 <__aeabi_d2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	623b      	str	r3, [r7, #32]

		gps_data1.gps_data_long[0] = Lon7;
 8001d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b8d      	ldr	r3, [pc, #564]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001d7a:	721a      	strb	r2, [r3, #8]
		gps_data1.gps_data_long[1] = Lon6;
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001d82:	725a      	strb	r2, [r3, #9]
		gps_data1.gps_data_long[2] = Lon5;
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001d8a:	729a      	strb	r2, [r3, #10]
		gps_data1.gps_data_long[3] = Lon4;
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b87      	ldr	r3, [pc, #540]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001d92:	72da      	strb	r2, [r3, #11]
		gps_data1.gps_data_long[4] = Lon3;
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001d9a:	731a      	strb	r2, [r3, #12]
		gps_data1.gps_data_long[5] = Lon2;
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001da2:	735a      	strb	r2, [r3, #13]
		gps_data1.gps_data_long[6] = Lon1;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001daa:	739a      	strb	r2, [r3, #14]
		gps_data1.gps_data_long[7] = Lon0;
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <task_send_values_GPS+0x69c>)
 8001db2:	73da      	strb	r2, [r3, #15]

		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Altitude
		computing = gpsCoords.alt;
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <task_send_values_GPS+0x6a0>)
 8001db6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001dba:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt7 = floor(computing);
 8001dbe:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001dc2:	f012 f80d 	bl	8013de0 <floor>
 8001dc6:	ec53 2b10 	vmov	r2, r3, d0
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fed3 	bl	8000b78 <__aeabi_d2iz>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	61fb      	str	r3, [r7, #28]
		computing = 100.0*(computing-(double)Alt7);
 8001dd6:	69f8      	ldr	r0, [r7, #28]
 8001dd8:	f7fe fbb4 	bl	8000544 <__aeabi_i2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001de4:	f7fe fa60 	bl	80002a8 <__aeabi_dsub>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b6d      	ldr	r3, [pc, #436]	; (8001fac <task_send_values_GPS+0x698>)
 8001df6:	f7fe fc0f 	bl	8000618 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt6 = floor(computing);
 8001e02:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001e06:	f011 ffeb 	bl	8013de0 <floor>
 8001e0a:	ec53 2b10 	vmov	r2, r3, d0
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe feb1 	bl	8000b78 <__aeabi_d2iz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	61bb      	str	r3, [r7, #24]
		computing = 100.0*(computing-(double)Alt6);
 8001e1a:	69b8      	ldr	r0, [r7, #24]
 8001e1c:	f7fe fb92 	bl	8000544 <__aeabi_i2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e28:	f7fe fa3e 	bl	80002a8 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <task_send_values_GPS+0x698>)
 8001e3a:	f7fe fbed 	bl	8000618 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt5 = floor(computing);
 8001e46:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001e4a:	f011 ffc9 	bl	8013de0 <floor>
 8001e4e:	ec53 2b10 	vmov	r2, r3, d0
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe8f 	bl	8000b78 <__aeabi_d2iz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	617b      	str	r3, [r7, #20]
		computing = 100.0*(computing-(double)Alt5);
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7fe fb70 	bl	8000544 <__aeabi_i2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e6c:	f7fe fa1c 	bl	80002a8 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <task_send_values_GPS+0x698>)
 8001e7e:	f7fe fbcb 	bl	8000618 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt4 = floor(computing);
 8001e8a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001e8e:	f011 ffa7 	bl	8013de0 <floor>
 8001e92:	ec53 2b10 	vmov	r2, r3, d0
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe6d 	bl	8000b78 <__aeabi_d2iz>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	613b      	str	r3, [r7, #16]
		computing = 100.0*(computing-(double)Alt4);
 8001ea2:	6938      	ldr	r0, [r7, #16]
 8001ea4:	f7fe fb4e 	bl	8000544 <__aeabi_i2d>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001eb0:	f7fe f9fa 	bl	80002a8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <task_send_values_GPS+0x698>)
 8001ec2:	f7fe fba9 	bl	8000618 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt3 = floor(computing);
 8001ece:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001ed2:	f011 ff85 	bl	8013de0 <floor>
 8001ed6:	ec53 2b10 	vmov	r2, r3, d0
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fe4b 	bl	8000b78 <__aeabi_d2iz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	60fb      	str	r3, [r7, #12]
		computing = 100.0*(computing-(double)Alt3);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7fe fb2c 	bl	8000544 <__aeabi_i2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ef4:	f7fe f9d8 	bl	80002a8 <__aeabi_dsub>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <task_send_values_GPS+0x698>)
 8001f06:	f7fe fb87 	bl	8000618 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt2 = floor(computing);
 8001f12:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001f16:	f011 ff63 	bl	8013de0 <floor>
 8001f1a:	ec53 2b10 	vmov	r2, r3, d0
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe29 	bl	8000b78 <__aeabi_d2iz>
 8001f26:	4603      	mov	r3, r0
 8001f28:	60bb      	str	r3, [r7, #8]
		computing = 100.0*(computing-(double)Alt2);
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f7fe fb0a 	bl	8000544 <__aeabi_i2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f38:	f7fe f9b6 	bl	80002a8 <__aeabi_dsub>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <task_send_values_GPS+0x698>)
 8001f4a:	f7fe fb65 	bl	8000618 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt1 = floor(computing);
 8001f56:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001f5a:	f011 ff41 	bl	8013de0 <floor>
 8001f5e:	ec53 2b10 	vmov	r2, r3, d0
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fe07 	bl	8000b78 <__aeabi_d2iz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	607b      	str	r3, [r7, #4]
		computing = 100.0*(computing-(double)Alt1);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fae8 	bl	8000544 <__aeabi_i2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f7c:	f7fe f994 	bl	80002a8 <__aeabi_dsub>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <task_send_values_GPS+0x698>)
 8001f8e:	f7fe fb43 	bl	8000618 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt0 = floor(computing);
 8001f9a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001f9e:	f011 ff1f 	bl	8013de0 <floor>
 8001fa2:	ec53 2b10 	vmov	r2, r3, d0
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	e005      	b.n	8001fb8 <task_send_values_GPS+0x6a4>
 8001fac:	40590000 	.word	0x40590000
 8001fb0:	200004ec 	.word	0x200004ec
 8001fb4:	20000310 	.word	0x20000310
 8001fb8:	f7fe fdde 	bl	8000b78 <__aeabi_d2iz>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	603b      	str	r3, [r7, #0]

		gps_data1.gps_data_alt[0] = Alt7;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <task_send_values_GPS+0x708>)
 8001fc6:	741a      	strb	r2, [r3, #16]
		gps_data1.gps_data_alt[1] = Alt6;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <task_send_values_GPS+0x708>)
 8001fce:	745a      	strb	r2, [r3, #17]
		gps_data1.gps_data_alt[2] = Alt5;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <task_send_values_GPS+0x708>)
 8001fd6:	749a      	strb	r2, [r3, #18]
		gps_data1.gps_data_alt[3] = Alt4;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <task_send_values_GPS+0x708>)
 8001fde:	74da      	strb	r2, [r3, #19]
		gps_data1.gps_data_alt[4] = Alt3;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <task_send_values_GPS+0x708>)
 8001fe6:	751a      	strb	r2, [r3, #20]
		gps_data1.gps_data_alt[5] = Alt2;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <task_send_values_GPS+0x708>)
 8001fee:	755a      	strb	r2, [r3, #21]
		gps_data1.gps_data_alt[6] = Alt1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <task_send_values_GPS+0x708>)
 8001ff6:	759a      	strb	r2, [r3, #22]
		gps_data1.gps_data_alt[7] = Alt0;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <task_send_values_GPS+0x708>)
 8001ffe:	75da      	strb	r2, [r3, #23]

		MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_GPS, NULL,&gps_data1);
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <task_send_values_GPS+0x70c>)
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <task_send_values_GPS+0x708>)
 8002006:	2200      	movs	r2, #0
 8002008:	2130      	movs	r1, #48	; 0x30
 800200a:	f7ff fc43 	bl	8001894 <MESSAGE_SendMailbox>
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		gpsSend = 0;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <task_send_values_GPS+0x710>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
	}


}
 8002014:	bf00      	nop
 8002016:	3768      	adds	r7, #104	; 0x68
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200004ec 	.word	0x200004ec
 8002020:	200004e4 	.word	0x200004e4
 8002024:	200004e8 	.word	0x200004e8

08002028 <TransmitGPSFrame>:

void TransmitGPSFrame(GPSFrameTypeDef *frame) {
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b092      	sub	sp, #72	; 0x48
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_GPS)];
	API_FrameTypeDef_GPS api_frame;
	api_frame.header = API_HEADER;
 8002030:	237e      	movs	r3, #126	; 0x7e
 8002032:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(GPSFrameTypeDef);
 8002034:	2318      	movs	r3, #24
 8002036:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_GPS;
 8002038:	2330      	movs	r3, #48	; 0x30
 800203a:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(GPSFrameTypeDef));
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	f107 030d 	add.w	r3, r7, #13
 8002042:	6810      	ldr	r0, [r2, #0]
 8002044:	6851      	ldr	r1, [r2, #4]
 8002046:	6895      	ldr	r5, [r2, #8]
 8002048:	68d4      	ldr	r4, [r2, #12]
 800204a:	6018      	str	r0, [r3, #0]
 800204c:	6059      	str	r1, [r3, #4]
 800204e:	609d      	str	r5, [r3, #8]
 8002050:	60dc      	str	r4, [r3, #12]
 8002052:	6910      	ldr	r0, [r2, #16]
 8002054:	6951      	ldr	r1, [r2, #20]
 8002056:	6118      	str	r0, [r3, #16]
 8002058:	6159      	str	r1, [r3, #20]
	api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(GPSFrameTypeDef));
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	3305      	adds	r3, #5
 8002060:	2118      	movs	r1, #24
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f990 	bl	8001388 <CalculateCRC>
 8002068:	4603      	mov	r3, r0
 800206a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_GPS));
 800206e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002072:	f107 0508 	add.w	r5, r7, #8
 8002076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800207a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800207e:	c407      	stmia	r4!, {r0, r1, r2}
 8002080:	8023      	strh	r3, [r4, #0]

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_GPS));
 8002082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002086:	221e      	movs	r2, #30
 8002088:	4619      	mov	r1, r3
 800208a:	4803      	ldr	r0, [pc, #12]	; (8002098 <TransmitGPSFrame+0x70>)
 800208c:	f009 fea8 	bl	800bde0 <HAL_UART_Transmit_IT>

}
 8002090:	bf00      	nop
 8002092:	3748      	adds	r7, #72	; 0x48
 8002094:	46bd      	mov	sp, r7
 8002096:	bdb0      	pop	{r4, r5, r7, pc}
 8002098:	20000ae4 	.word	0x20000ae4

0800209c <ProcessNMEALine>:
#include <trames_nmea.h>

//Interprets gps frames to retrieve useful data (latitude, longitude, altitude ...)
void ProcessNMEALine(char *s, GPS_Coords_t * coords, int * quality)
{
 800209c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a0:	b0d6      	sub	sp, #344	; 0x158
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80020a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020ac:	6018      	str	r0, [r3, #0]
 80020ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80020b2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020b6:	6019      	str	r1, [r3, #0]
 80020b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80020bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020c0:	601a      	str	r2, [r3, #0]
  int x;


  // Check the line synchronization

  if (s[0] != '$')
 80020c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80020c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b24      	cmp	r3, #36	; 0x24
 80020d0:	f040 83f5 	bne.w	80028be <ProcessNMEALine+0x822>
    return;

  // Verify the line checksum integrity

  c = 0; // checksum
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f

  i = 1; // Xor bytes between $ and *, but not including those bytes
 80020da:	2301      	movs	r3, #1
 80020dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

  while((s[i] != 0) && (s[i] != '*'))
 80020e0:	e011      	b.n	8002106 <ProcessNMEALine+0x6a>
    c ^= s[i++];
 80020e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80020ec:	461a      	mov	r2, r3
 80020ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80020f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002100:	4053      	eors	r3, r2
 8002102:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
  while((s[i] != 0) && (s[i] != '*'))
 8002106:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800210a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800210e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <ProcessNMEALine+0x96>
 800211c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002120:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002124:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b2a      	cmp	r3, #42	; 0x2a
 8002130:	d1d7      	bne.n	80020e2 <ProcessNMEALine+0x46>

  if (s[i] == 0)
 8002132:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002136:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800213a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 83bc 	beq.w	80028c2 <ProcessNMEALine+0x826>
    return;

  sscanf(&s[i + 1],"%x",&x); // Checksum byte - Note sscanf needs this to be an int, rather than a single byte
 800214a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800214e:	3301      	adds	r3, #1
 8002150:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002154:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002160:	4952      	ldr	r1, [pc, #328]	; (80022ac <ProcessNMEALine+0x210>)
 8002162:	4618      	mov	r0, r3
 8002164:	f00e fa26 	bl	80105b4 <siscanf>

  if (c != (char)(x & 0xFF)) // Leave if checksum fails
 8002168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002172:	429a      	cmp	r2, r3
 8002174:	f040 83a7 	bne.w	80028c6 <ProcessNMEALine+0x82a>
    return;

  // Parse out fields on , and *

  f = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

  while(1)
  {
    field[f++] = s;
 800217e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800218e:	f107 0208 	add.w	r2, r7, #8
 8002192:	4413      	add	r3, r2
 8002194:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002198:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	f843 2ccc 	str.w	r2, [r3, #-204]

    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 80021a2:	e00a      	b.n	80021ba <ProcessNMEALine+0x11e>
      s++;
 80021a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021ac:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80021b0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	3201      	adds	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 80021ba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01f      	beq.n	800220a <ProcessNMEALine+0x16e>
 80021ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b2c      	cmp	r3, #44	; 0x2c
 80021d8:	d017      	beq.n	800220a <ProcessNMEALine+0x16e>
 80021da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b2a      	cmp	r3, #42	; 0x2a
 80021e8:	d00f      	beq.n	800220a <ProcessNMEALine+0x16e>
 80021ea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b0d      	cmp	r3, #13
 80021f8:	d007      	beq.n	800220a <ProcessNMEALine+0x16e>
 80021fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b0a      	cmp	r3, #10
 8002208:	d1cc      	bne.n	80021a4 <ProcessNMEALine+0x108>

    if ((*s == 0) || (*s == '*') || (*s == 0x0D) || (*s == 0x0A) || (f == (FIELD_MAX - 1)))
 800220a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800220e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01b      	beq.n	8002252 <ProcessNMEALine+0x1b6>
 800221a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800221e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b2a      	cmp	r3, #42	; 0x2a
 8002228:	d013      	beq.n	8002252 <ProcessNMEALine+0x1b6>
 800222a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800222e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b0d      	cmp	r3, #13
 8002238:	d00b      	beq.n	8002252 <ProcessNMEALine+0x1b6>
 800223a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800223e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b0a      	cmp	r3, #10
 8002248:	d003      	beq.n	8002252 <ProcessNMEALine+0x1b6>
 800224a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800224e:	2b13      	cmp	r3, #19
 8002250:	d11e      	bne.n	8002290 <ProcessNMEALine+0x1f4>
    {
      *s = 0;
 8002252:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002256:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
      field[f] = NULL;
 8002260:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800226a:	f107 0208 	add.w	r2, r7, #8
 800226e:	4413      	add	r3, r2
 8002270:	2200      	movs	r2, #0
 8002272:	f843 2ccc 	str.w	r2, [r3, #-204]
      break;
 8002276:	bf00      	nop
  }


  // Process a couple of NMEA sentences for illustration

  if (strncmp(field[0],"$G",2) == 0) // Allow for different Talker ID's ie $GP, $GN, $GL, etc
 8002278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800227c:	2202      	movs	r2, #2
 800227e:	490c      	ldr	r1, [pc, #48]	; (80022b0 <ProcessNMEALine+0x214>)
 8002280:	4618      	mov	r0, r3
 8002282:	f00e fa08 	bl	8010696 <strncmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 831e 	bne.w	80028ca <ProcessNMEALine+0x82e>
 800228e:	e011      	b.n	80022b4 <ProcessNMEALine+0x218>
    *s++ = 0;
 8002290:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002294:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800229e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	6011      	str	r1, [r2, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    field[f++] = s;
 80022aa:	e768      	b.n	800217e <ProcessNMEALine+0xe2>
 80022ac:	08013f90 	.word	0x08013f90
 80022b0:	08013f94 	.word	0x08013f94
  {
    if ((strcmp(&field[0][3],"GLL") == 0) && (f > 6)) // Geographic Position, Latitude, Longitude and Time
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b8:	3303      	adds	r3, #3
 80022ba:	49bd      	ldr	r1, [pc, #756]	; (80025b0 <ProcessNMEALine+0x514>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fd ff87 	bl	80001d0 <strcmp>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 8116 	bne.w	80024f6 <ProcessNMEALine+0x45a>
 80022ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	f340 8111 	ble.w	80024f6 <ProcessNMEALine+0x45a>
      // Field 4 Lon Hemi E/W
      // Field 5 UTC Time HHMMSS.SSS
      // Field 6 Fix A=Valid, V=Not Valid
      // Field 7 Mode A=Autonomous, D=Differential, E=Estimated, N=Not Valid [Optional] - Simulator Does not report this

      sscanf(field[1],"%lf",&lat);
 80022d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022d8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80022dc:	49b5      	ldr	r1, [pc, #724]	; (80025b4 <ProcessNMEALine+0x518>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f00e f968 	bl	80105b4 <siscanf>

      lat_hemi = field[2][0];
 80022e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143

      sscanf(field[3],"%lf",&lon);
 80022ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80022f6:	49af      	ldr	r1, [pc, #700]	; (80025b4 <ProcessNMEALine+0x518>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00e f95b 	bl	80105b4 <siscanf>

      lon_hemi = field[4][0];
 80022fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142

      sscanf(field[5],"%lf",&fix_time);
 8002308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800230c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002310:	49a8      	ldr	r1, [pc, #672]	; (80025b4 <ProcessNMEALine+0x518>)
 8002312:	4618      	mov	r0, r3
 8002314:	f00e f94e 	bl	80105b4 <siscanf>

      valid = field[6][0];
 8002318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141

      if (valid == 'A')
 8002322:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8002326:	2b41      	cmp	r3, #65	; 0x41
 8002328:	f040 82c7 	bne.w	80028ba <ProcessNMEALine+0x81e>
      {
        // Extract Time-of-Fix

        fix_minute = (int)fix_time / 100;
 800232c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc20 	bl	8000b78 <__aeabi_d2iz>
 8002338:	4603      	mov	r3, r0
 800233a:	4a9f      	ldr	r2, [pc, #636]	; (80025b8 <ProcessNMEALine+0x51c>)
 800233c:	fb82 1203 	smull	r1, r2, r2, r3
 8002340:	1152      	asrs	r2, r2, #5
 8002342:	17db      	asrs	r3, r3, #31
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        fix_second = fix_time - (fix_minute * 100);
 800234a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800234e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002352:	2264      	movs	r2, #100	; 0x64
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f8f3 	bl	8000544 <__aeabi_i2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fd ff9f 	bl	80002a8 <__aeabi_dsub>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

        fix_hour = fix_minute / 100;
 8002372:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002376:	4a90      	ldr	r2, [pc, #576]	; (80025b8 <ProcessNMEALine+0x51c>)
 8002378:	fb82 1203 	smull	r1, r2, r2, r3
 800237c:	1152      	asrs	r2, r2, #5
 800237e:	17db      	asrs	r3, r3, #31
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        fix_minute = fix_minute % 100;
 8002386:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800238a:	4a8b      	ldr	r2, [pc, #556]	; (80025b8 <ProcessNMEALine+0x51c>)
 800238c:	fb82 1203 	smull	r1, r2, r2, r3
 8002390:	1151      	asrs	r1, r2, #5
 8002392:	17da      	asrs	r2, r3, #31
 8002394:	1a8a      	subs	r2, r1, r2
 8002396:	2164      	movs	r1, #100	; 0x64
 8002398:	fb01 f202 	mul.w	r2, r1, r2
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        // Process Latitude DDMM.mmmmm

        lat_deg = (int)lat / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 80023a2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fbe5 	bl	8000b78 <__aeabi_d2iz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a81      	ldr	r2, [pc, #516]	; (80025b8 <ProcessNMEALine+0x51c>)
 80023b2:	fb82 1203 	smull	r1, r2, r2, r3
 80023b6:	1152      	asrs	r2, r2, #5
 80023b8:	17db      	asrs	r3, r3, #31
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

        lat_min = lat - (lat_deg * 100);
 80023c0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80023c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023c8:	2264      	movs	r2, #100	; 0x64
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8b8 	bl	8000544 <__aeabi_i2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff64 	bl	80002a8 <__aeabi_dsub>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

        lat = (double)lat_deg + (lat_min / 60.0); // Computed Latitude in DECIMAL DEGREES
 80023e8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80023ec:	f7fe f8aa 	bl	8000544 <__aeabi_i2d>
 80023f0:	4604      	mov	r4, r0
 80023f2:	460d      	mov	r5, r1
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4b70      	ldr	r3, [pc, #448]	; (80025bc <ProcessNMEALine+0x520>)
 80023fa:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80023fe:	f7fe fa35 	bl	800086c <__aeabi_ddiv>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	f7fd ff4f 	bl	80002ac <__adddf3>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

        if (lat_hemi == 'S')
 8002416:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800241a:	2b53      	cmp	r3, #83	; 0x53
 800241c:	d10e      	bne.n	800243c <ProcessNMEALine+0x3a0>
        {
          lat_deg = -lat_deg;
 800241e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002422:	425b      	negs	r3, r3
 8002424:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          lat = -lat;
 8002428:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800242c:	603a      	str	r2, [r7, #0]
 800242e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	ed97 7b00 	vldr	d7, [r7]
 8002438:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
        }

        // Process Longitude DDDMM.mmmmm

        lon_deg = (int)lon / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 800243c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fb98 	bl	8000b78 <__aeabi_d2iz>
 8002448:	4603      	mov	r3, r0
 800244a:	4a5b      	ldr	r2, [pc, #364]	; (80025b8 <ProcessNMEALine+0x51c>)
 800244c:	fb82 1203 	smull	r1, r2, r2, r3
 8002450:	1152      	asrs	r2, r2, #5
 8002452:	17db      	asrs	r3, r3, #31
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        lon_min = lon - (lon_deg * 100);
 800245a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800245e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002462:	2264      	movs	r2, #100	; 0x64
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f86b 	bl	8000544 <__aeabi_i2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fd ff17 	bl	80002a8 <__aeabi_dsub>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

        lon = (double)lon_deg + (lon_min / 60.0); // Computed Longitude in DECIMAL DEGREES
 8002482:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002486:	f7fe f85d 	bl	8000544 <__aeabi_i2d>
 800248a:	4604      	mov	r4, r0
 800248c:	460d      	mov	r5, r1
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <ProcessNMEALine+0x520>)
 8002494:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002498:	f7fe f9e8 	bl	800086c <__aeabi_ddiv>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd ff02 	bl	80002ac <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

        if (lon_hemi == 'W')
 80024b0:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 80024b4:	2b57      	cmp	r3, #87	; 0x57
 80024b6:	d10b      	bne.n	80024d0 <ProcessNMEALine+0x434>
        {
          lon_deg = -lon_deg;
 80024b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024bc:	425b      	negs	r3, r3
 80024be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
          lon = -lon;
 80024c2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80024c6:	4692      	mov	sl, r2
 80024c8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80024cc:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
        }


        coords->lat=lat;
 80024d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80024d4:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80024d8:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80024dc:	6809      	ldr	r1, [r1, #0]
 80024de:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 80024e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80024e6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80024ea:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80024ee:	6809      	ldr	r1, [r1, #0]
 80024f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
 80024f4:	e1e1      	b.n	80028ba <ProcessNMEALine+0x81e>
      }

    }
    else if ((strcmp(&field[0][3],"GSA") == 0) && (f > 17)) // GPS DOP and Active Satellites
 80024f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fa:	3303      	adds	r3, #3
 80024fc:	4930      	ldr	r1, [pc, #192]	; (80025c0 <ProcessNMEALine+0x524>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fd fe66 	bl	80001d0 <strcmp>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d15e      	bne.n	80025c8 <ProcessNMEALine+0x52c>
 800250a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800250e:	2b11      	cmp	r3, #17
 8002510:	dd5a      	ble.n	80025c8 <ProcessNMEALine+0x52c>
      // Field 14 SV List#12
      // Field 15 PDOP
      // Field 16 HDOP
      // Field 17 VDOP

      mode = field[1][0];
 8002512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      fix = field[2][0];
 800251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

      sscanf(field[15],"%lf",&pdop); // Position Dilution of precision (PDOP)
 8002526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800252a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800252e:	4921      	ldr	r1, [pc, #132]	; (80025b4 <ProcessNMEALine+0x518>)
 8002530:	4618      	mov	r0, r3
 8002532:	f00e f83f 	bl	80105b4 <siscanf>
      sscanf(field[16],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 8002536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800253a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800253e:	491d      	ldr	r1, [pc, #116]	; (80025b4 <ProcessNMEALine+0x518>)
 8002540:	4618      	mov	r0, r3
 8002542:	f00e f837 	bl	80105b4 <siscanf>
      sscanf(field[17],"%lf",&vdop); // Vertical Dilution of precision (VDOP)
 8002546:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800254a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800254e:	4919      	ldr	r1, [pc, #100]	; (80025b4 <ProcessNMEALine+0x518>)
 8002550:	4618      	mov	r0, r3
 8002552:	f00e f82f 	bl	80105b4 <siscanf>


      for(i=0; i<12; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800255c:	e023      	b.n	80025a6 <ProcessNMEALine+0x50a>
      {
        if (field[3+i][0])
 800255e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002562:	3303      	adds	r3, #3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800256a:	f107 0208 	add.w	r2, r7, #8
 800256e:	4413      	add	r3, r2
 8002570:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <ProcessNMEALine+0x500>
        {
          sscanf(field[3+i],"%d",&sv);
 800257a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800257e:	3303      	adds	r3, #3
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002586:	f107 0208 	add.w	r2, r7, #8
 800258a:	4413      	add	r3, r2
 800258c:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8002590:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002594:	490b      	ldr	r1, [pc, #44]	; (80025c4 <ProcessNMEALine+0x528>)
 8002596:	4618      	mov	r0, r3
 8002598:	f00e f80c 	bl	80105b4 <siscanf>
      for(i=0; i<12; i++)
 800259c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80025a0:	3301      	adds	r3, #1
 80025a2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80025a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80025aa:	2b0b      	cmp	r3, #11
 80025ac:	ddd7      	ble.n	800255e <ProcessNMEALine+0x4c2>
    {
 80025ae:	e185      	b.n	80028bc <ProcessNMEALine+0x820>
 80025b0:	08013f98 	.word	0x08013f98
 80025b4:	08013f9c 	.word	0x08013f9c
 80025b8:	51eb851f 	.word	0x51eb851f
 80025bc:	404e0000 	.word	0x404e0000
 80025c0:	08013fa0 	.word	0x08013fa0
 80025c4:	08013fa4 	.word	0x08013fa4
        }
      }


    }
    else  if ((strcmp(&field[0][3],"GGA") == 0) && (f > 14))
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025cc:	3303      	adds	r3, #3
 80025ce:	49c2      	ldr	r1, [pc, #776]	; (80028d8 <ProcessNMEALine+0x83c>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd fdfd 	bl	80001d0 <strcmp>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 8176 	bne.w	80028ca <ProcessNMEALine+0x82e>
 80025de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80025e2:	2b0e      	cmp	r3, #14
 80025e4:	f340 8171 	ble.w	80028ca <ProcessNMEALine+0x82e>
      double lat_min, lon_min;
      double fix_time;
      int fix_hour, fix_minute;
      double fix_second;
      char lat_hemi, lon_hemi;
      int valid = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      // Field 11 Geoid Separation
      // Field 12 Units M
      // Field 13 Age of Differential (NULL when not used)
      // Field 14 Differential Reference Station ID

      sscanf(field[2],"%lf",&lat);
 80025ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025f6:	49b9      	ldr	r1, [pc, #740]	; (80028dc <ProcessNMEALine+0x840>)
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00d ffdb 	bl	80105b4 <siscanf>

      lat_hemi = field[3][0];
 80025fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

      sscanf(field[4],"%lf",&lon);
 8002608:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800260c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002610:	49b2      	ldr	r1, [pc, #712]	; (80028dc <ProcessNMEALine+0x840>)
 8002612:	4618      	mov	r0, r3
 8002614:	f00d ffce 	bl	80105b4 <siscanf>

      lon_hemi = field[5][0];
 8002618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c

      sscanf(field[9],"%lf",&msl);
 8002622:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002626:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800262a:	49ac      	ldr	r1, [pc, #688]	; (80028dc <ProcessNMEALine+0x840>)
 800262c:	4618      	mov	r0, r3
 800262e:	f00d ffc1 	bl	80105b4 <siscanf>

      sscanf(field[11],"%lf",&alt);
 8002632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002636:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800263a:	49a8      	ldr	r1, [pc, #672]	; (80028dc <ProcessNMEALine+0x840>)
 800263c:	4618      	mov	r0, r3
 800263e:	f00d ffb9 	bl	80105b4 <siscanf>

      sscanf(field[1],"%lf",&fix_time);
 8002642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002646:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800264a:	49a4      	ldr	r1, [pc, #656]	; (80028dc <ProcessNMEALine+0x840>)
 800264c:	4618      	mov	r0, r3
 800264e:	f00d ffb1 	bl	80105b4 <siscanf>

      if (sscanf(field[6],"%d",quality) == 0)// 0=Fix Not available, 1=GPS SPS, 2=GPS SPS DIFF
 8002652:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002656:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800265a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	499f      	ldr	r1, [pc, #636]	; (80028e0 <ProcessNMEALine+0x844>)
 8002662:	f00d ffa7 	bl	80105b4 <siscanf>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <ProcessNMEALine+0x5d6>
        valid = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

      sscanf(field[7],"%d",&sv);    // Satellites used (or in view, depends on receiver)
 8002672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002676:	f107 021c 	add.w	r2, r7, #28
 800267a:	4999      	ldr	r1, [pc, #612]	; (80028e0 <ProcessNMEALine+0x844>)
 800267c:	4618      	mov	r0, r3
 800267e:	f00d ff99 	bl	80105b4 <siscanf>

      sscanf(field[8],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 8002682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002686:	f107 0220 	add.w	r2, r7, #32
 800268a:	4994      	ldr	r1, [pc, #592]	; (80028dc <ProcessNMEALine+0x840>)
 800268c:	4618      	mov	r0, r3
 800268e:	f00d ff91 	bl	80105b4 <siscanf>

      if (valid != 0)
 8002692:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8117 	beq.w	80028ca <ProcessNMEALine+0x82e>
      {
        lat_deg = (int)lat / 100;
 800269c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa66 	bl	8000b78 <__aeabi_d2iz>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4a8d      	ldr	r2, [pc, #564]	; (80028e4 <ProcessNMEALine+0x848>)
 80026b0:	fb82 1203 	smull	r1, r2, r2, r3
 80026b4:	1152      	asrs	r2, r2, #5
 80026b6:	17db      	asrs	r3, r3, #31
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        lat_min = lat - (lat_deg * 100);
 80026be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026c2:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80026c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026ca:	2264      	movs	r2, #100	; 0x64
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff37 	bl	8000544 <__aeabi_i2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4650      	mov	r0, sl
 80026dc:	4659      	mov	r1, fp
 80026de:	f7fd fde3 	bl	80002a8 <__aeabi_dsub>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100

        lat = (double)lat_deg + (lat_min / 60.0);
 80026ea:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80026ee:	f7fd ff29 	bl	8000544 <__aeabi_i2d>
 80026f2:	4682      	mov	sl, r0
 80026f4:	468b      	mov	fp, r1
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <ProcessNMEALine+0x84c>)
 80026fc:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002700:	f7fe f8b4 	bl	800086c <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4650      	mov	r0, sl
 800270a:	4659      	mov	r1, fp
 800270c:	f7fd fdce 	bl	80002ac <__adddf3>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002718:	e9c1 2300 	strd	r2, r3, [r1]

        if (lat_hemi == 'S')
 800271c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002720:	2b53      	cmp	r3, #83	; 0x53
 8002722:	d10a      	bne.n	800273a <ProcessNMEALine+0x69e>
          lat = -lat;
 8002724:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	4690      	mov	r8, r2
 800272e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002736:	e9c3 8900 	strd	r8, r9, [r3]


        lon_deg = (int)lon / 100;
 800273a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800273e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fa17 	bl	8000b78 <__aeabi_d2iz>
 800274a:	4603      	mov	r3, r0
 800274c:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <ProcessNMEALine+0x848>)
 800274e:	fb82 1203 	smull	r1, r2, r2, r3
 8002752:	1152      	asrs	r2, r2, #5
 8002754:	17db      	asrs	r3, r3, #31
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

        lon_min = lon - (lon_deg * 100);
 800275c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002760:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8002764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002768:	2264      	movs	r2, #100	; 0x64
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fee8 	bl	8000544 <__aeabi_i2d>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4640      	mov	r0, r8
 800277a:	4649      	mov	r1, r9
 800277c:	f7fd fd94 	bl	80002a8 <__aeabi_dsub>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

        lon = (double)lon_deg + (lon_min / 60.0);
 8002788:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800278c:	f7fd feda 	bl	8000544 <__aeabi_i2d>
 8002790:	4680      	mov	r8, r0
 8002792:	4689      	mov	r9, r1
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <ProcessNMEALine+0x84c>)
 800279a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800279e:	f7fe f865 	bl	800086c <__aeabi_ddiv>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4640      	mov	r0, r8
 80027a8:	4649      	mov	r1, r9
 80027aa:	f7fd fd7f 	bl	80002ac <__adddf3>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80027b6:	e941 2302 	strd	r2, r3, [r1, #-8]

        if (lon_hemi == 'W')
 80027ba:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80027be:	2b57      	cmp	r3, #87	; 0x57
 80027c0:	d10a      	bne.n	80027d8 <ProcessNMEALine+0x73c>
          lon = -lon;
 80027c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80027ca:	4614      	mov	r4, r2
 80027cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80027d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027d4:	e943 4502 	strd	r4, r5, [r3, #-8]

        alt += msl; // Convert to height above datum
 80027d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80027e8:	f7fd fd60 	bl	80002ac <__adddf3>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027f4:	e9c1 2300 	strd	r2, r3, [r1]

        fix_minute = (int)fix_time / 100;
 80027f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe f9b8 	bl	8000b78 <__aeabi_d2iz>
 8002808:	4603      	mov	r3, r0
 800280a:	4a36      	ldr	r2, [pc, #216]	; (80028e4 <ProcessNMEALine+0x848>)
 800280c:	fb82 1203 	smull	r1, r2, r2, r3
 8002810:	1152      	asrs	r2, r2, #5
 8002812:	17db      	asrs	r3, r3, #31
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

        fix_second = fix_time - (fix_minute * 100);
 800281a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800281e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002822:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002826:	2264      	movs	r2, #100	; 0x64
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe89 	bl	8000544 <__aeabi_i2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fd fd35 	bl	80002a8 <__aeabi_dsub>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

        fix_hour = fix_minute / 100;
 8002846:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <ProcessNMEALine+0x848>)
 800284c:	fb82 1203 	smull	r1, r2, r2, r3
 8002850:	1152      	asrs	r2, r2, #5
 8002852:	17db      	asrs	r3, r3, #31
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

        fix_minute = fix_minute % 100;
 800285a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800285e:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <ProcessNMEALine+0x848>)
 8002860:	fb82 1203 	smull	r1, r2, r2, r3
 8002864:	1151      	asrs	r1, r2, #5
 8002866:	17da      	asrs	r2, r3, #31
 8002868:	1a8a      	subs	r2, r1, r2
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	fb01 f202 	mul.w	r2, r1, r2
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

        coords->lat=lat;
 8002876:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002882:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 8002886:	6809      	ldr	r1, [r1, #0]
 8002888:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 800288c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002894:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002898:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 800289c:	6809      	ldr	r1, [r1, #0]
 800289e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        coords->alt=alt;
 80028a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80028ae:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80028b2:	6809      	ldr	r1, [r1, #0]
 80028b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      }
    }
  }
  return;
 80028b8:	e007      	b.n	80028ca <ProcessNMEALine+0x82e>
    {
 80028ba:	bf00      	nop
  return;
 80028bc:	e005      	b.n	80028ca <ProcessNMEALine+0x82e>
    return;
 80028be:	bf00      	nop
 80028c0:	e004      	b.n	80028cc <ProcessNMEALine+0x830>
    return;
 80028c2:	bf00      	nop
 80028c4:	e002      	b.n	80028cc <ProcessNMEALine+0x830>
    return;
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <ProcessNMEALine+0x830>
  return;
 80028ca:	bf00      	nop
}
 80028cc:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	08013fa8 	.word	0x08013fa8
 80028dc:	08013f9c 	.word	0x08013f9c
 80028e0:	08013fa4 	.word	0x08013fa4
 80028e4:	51eb851f 	.word	0x51eb851f
 80028e8:	404e0000 	.word	0x404e0000

080028ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <vApplicationGetIdleTaskMemory+0x2c>)
 80028fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4a06      	ldr	r2, [pc, #24]	; (800291c <vApplicationGetIdleTaskMemory+0x30>)
 8002902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000504 	.word	0x20000504
 800291c:	20000558 	.word	0x20000558

08002920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002926:	f004 f8f1 	bl	8006b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800292a:	f000 f855 	bl	80029d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800292e:	f000 fd61 	bl	80033f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002932:	f000 fcff 	bl	8003334 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8002936:	f000 f8a1 	bl	8002a7c <MX_ADC3_Init>
  MX_CAN1_Init();
 800293a:	f000 f903 	bl	8002b44 <MX_CAN1_Init>
  MX_TIM1_Init();
 800293e:	f000 fa3b 	bl	8002db8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002942:	f000 fa93 	bl	8002e6c <MX_TIM3_Init>
  MX_TIM8_Init();
 8002946:	f000 fb95 	bl	8003074 <MX_TIM8_Init>
  MX_UART4_Init();
 800294a:	f000 fc63 	bl	8003214 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800294e:	f000 fd21 	bl	8003394 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8002952:	f000 f959 	bl	8002c08 <MX_I2C2_Init>
  MX_UART5_Init();
 8002956:	f000 fc8d 	bl	8003274 <MX_UART5_Init>
  MX_COMP2_Init();
 800295a:	f000 f929 	bl	8002bb0 <MX_COMP2_Init>
  MX_SPI2_Init();
 800295e:	f000 f993 	bl	8002c88 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002962:	f000 f9cf 	bl	8002d04 <MX_SPI3_Init>
  MX_SWPMI1_Init();
 8002966:	f000 fa07 	bl	8002d78 <MX_SWPMI1_Init>
  MX_TIM6_Init();
 800296a:	f000 fb17 	bl	8002f9c <MX_TIM6_Init>
  MX_TIM7_Init();
 800296e:	f000 fb4b 	bl	8003008 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002972:	f000 fcaf 	bl	80032d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 8002976:	f7fe fcb5 	bl	80012e4 <GLOBVAR_Init>

  MESSAGE_Init();
 800297a:	f7fe ff51 	bl	8001820 <MESSAGE_Init>

  IMU_init();
 800297e:	f7fe fd27 	bl	80013d0 <IMU_init>
  IMU_enable();
 8002982:	f7fe fdf5 	bl	8001570 <IMU_enable>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutex_uart */
  osMutexDef(mutex_uart);
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  mutex_uartHandle = osMutexCreate(osMutex(mutex_uart));
 800298e:	f107 0320 	add.w	r3, r7, #32
 8002992:	4618      	mov	r0, r3
 8002994:	f00a fe5a 	bl	800d64c <osMutexCreate>
 8002998:	4603      	mov	r3, r0
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <main+0xac>)
 800299c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <main+0xb0>)
 80029a0:	1d3c      	adds	r4, r7, #4
 80029a2:	461d      	mov	r5, r3
 80029a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00a fde9 	bl	800d58c <osThreadCreate>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <main+0xb4>)
 80029be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Tasks_Init();
 80029c0:	f7fe fb2a 	bl	8001018 <Tasks_Init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80029c4:	f00a fddb 	bl	800d57e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <main+0xa8>
 80029ca:	bf00      	nop
 80029cc:	20000d7c 	.word	0x20000d7c
 80029d0:	08013fb8 	.word	0x08013fb8
 80029d4:	20000d78 	.word	0x20000d78

080029d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b096      	sub	sp, #88	; 0x58
 80029dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	2244      	movs	r2, #68	; 0x44
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f00d fa40 	bl	800fe6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ec:	463b      	mov	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029fe:	f006 fd25 	bl	800944c <HAL_PWREx_ControlVoltageScaling>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002a08:	f000 fd6f 	bl	80034ea <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a16:	2310      	movs	r3, #16
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002a26:	230a      	movs	r3, #10
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a32:	2302      	movs	r3, #2
 8002a34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f006 fd5c 	bl	80094f8 <HAL_RCC_OscConfig>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002a46:	f000 fd50 	bl	80034ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a5e:	463b      	mov	r3, r7
 8002a60:	2104      	movs	r1, #4
 8002a62:	4618      	mov	r0, r3
 8002a64:	f007 f924 	bl	8009cb0 <HAL_RCC_ClockConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a6e:	f000 fd3c 	bl	80034ea <Error_Handler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	3758      	adds	r7, #88	; 0x58
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a82:	463b      	mov	r3, r7
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
 8002a90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <MX_ADC3_Init+0xc0>)
 8002a96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002aaa:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ab0:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002abc:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002af2:	4811      	ldr	r0, [pc, #68]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002af4:	f004 fa36 	bl	8006f64 <HAL_ADC_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002afe:	f000 fcf4 	bl	80034ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <MX_ADC3_Init+0xc4>)
 8002b04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b06:	2306      	movs	r3, #6
 8002b08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b0e:	237f      	movs	r3, #127	; 0x7f
 8002b10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b12:	2304      	movs	r3, #4
 8002b14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <MX_ADC3_Init+0xbc>)
 8002b20:	f004 fb76 	bl	8007210 <HAL_ADC_ConfigChannel>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8002b2a:	f000 fcde 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000758 	.word	0x20000758
 8002b3c:	50040200 	.word	0x50040200
 8002b40:	04300002 	.word	0x04300002

08002b44 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <MX_CAN1_Init+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b50:	2210      	movs	r2, #16
 8002b52:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_CAN1_Init+0x64>)
 8002b94:	f004 ff2c 	bl	80079f0 <HAL_CAN_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002b9e:	f000 fca4 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200007bc 	.word	0x200007bc
 8002bac:	40006400 	.word	0x40006400

08002bb0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <MX_COMP2_Init+0x54>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bbc:	2270      	movs	r2, #112	; 0x70
 8002bbe:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <MX_COMP2_Init+0x50>)
 8002bec:	f005 f8a4 	bl	8007d38 <HAL_COMP_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002bf6:	f000 fc78 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200007e4 	.word	0x200007e4
 8002c04:	40010204 	.word	0x40010204

08002c08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <MX_I2C2_Init+0x78>)
 8002c10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c14:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <MX_I2C2_Init+0x7c>)
 8002c16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c42:	480e      	ldr	r0, [pc, #56]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c44:	f005 fdb0 	bl	80087a8 <HAL_I2C_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c4e:	f000 fc4c 	bl	80034ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c52:	2100      	movs	r1, #0
 8002c54:	4809      	ldr	r0, [pc, #36]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c56:	f006 fb53 	bl	8009300 <HAL_I2CEx_ConfigAnalogFilter>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c60:	f000 fc43 	bl	80034ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c64:	2100      	movs	r1, #0
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_I2C2_Init+0x74>)
 8002c68:	f006 fb95 	bl	8009396 <HAL_I2CEx_ConfigDigitalFilter>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c72:	f000 fc3a 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000810 	.word	0x20000810
 8002c80:	40005800 	.word	0x40005800
 8002c84:	10909cec 	.word	0x10909cec

08002c88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <MX_SPI2_Init+0x78>)
 8002c90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002ca2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ca6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cd6:	2207      	movs	r2, #7
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_SPI2_Init+0x74>)
 8002ce8:	f007 fec2 	bl	800aa70 <HAL_SPI_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002cf2:	f000 fbfa 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000864 	.word	0x20000864
 8002d00:	40003800 	.word	0x40003800

08002d04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <MX_SPI3_Init+0x70>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d1c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d34:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_SPI3_Init+0x6c>)
 8002d5c:	f007 fe88 	bl	800aa70 <HAL_SPI_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8002d66:	f000 fbc0 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200008c8 	.word	0x200008c8
 8002d74:	40003c00 	.word	0x40003c00

08002d78 <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <MX_SWPMI1_Init+0x38>)
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <MX_SWPMI1_Init+0x3c>)
 8002d80:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <MX_SWPMI1_Init+0x38>)
 8002d84:	2202      	movs	r2, #2
 8002d86:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <MX_SWPMI1_Init+0x38>)
 8002d8a:	2213      	movs	r2, #19
 8002d8c:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <MX_SWPMI1_Init+0x38>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <MX_SWPMI1_Init+0x38>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_SWPMI1_Init+0x38>)
 8002d9c:	f007 ff0c 	bl	800abb8 <HAL_SWPMI_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 8002da6:	f000 fba0 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000092c 	.word	0x2000092c
 8002db4:	40008800 	.word	0x40008800

08002db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	; 0x30
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f00d f850 	bl	800fe6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dcc:	463b      	mov	r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <MX_TIM1_Init+0xb0>)
 8002dda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480d      	ldr	r0, [pc, #52]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002e2e:	f007 fff5 	bl	800ae1c <HAL_TIM_Encoder_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002e38:	f000 fb57 	bl	80034ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e48:	463b      	mov	r3, r7
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_TIM1_Init+0xac>)
 8002e4e:	f008 fe73 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002e58:	f000 fb47 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e5c:	bf00      	nop
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000968 	.word	0x20000968
 8002e68:	40012c00 	.word	0x40012c00

08002e6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	; 0x38
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	615a      	str	r2, [r3, #20]
 8002e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002ea0:	4a3d      	ldr	r2, [pc, #244]	; (8002f98 <MX_TIM3_Init+0x12c>)
 8002ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002eb0:	4b38      	ldr	r3, [pc, #224]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb8:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebe:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ec4:	4833      	ldr	r0, [pc, #204]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002ec6:	f007 fef1 	bl	800acac <HAL_TIM_Base_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ed0:	f000 fb0b 	bl	80034ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	482c      	ldr	r0, [pc, #176]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002ee2:	f008 f955 	bl	800b190 <HAL_TIM_ConfigClockSource>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002eec:	f000 fafd 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ef0:	4828      	ldr	r0, [pc, #160]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002ef2:	f007 ff32 	bl	800ad5a <HAL_TIM_PWM_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002efc:	f000 faf5 	bl	80034ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4821      	ldr	r0, [pc, #132]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002f10:	f008 fe12 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f1a:	f000 fae6 	bl	80034ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f1e:	2360      	movs	r3, #96	; 0x60
 8002f20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2200      	movs	r2, #0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4817      	ldr	r0, [pc, #92]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002f36:	f008 f817 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f40:	f000 fad3 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f44:	463b      	mov	r3, r7
 8002f46:	2204      	movs	r2, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4812      	ldr	r0, [pc, #72]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002f4c:	f008 f80c 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002f56:	f000 fac8 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002f62:	f008 f801 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002f6c:	f000 fabd 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f70:	463b      	mov	r3, r7
 8002f72:	220c      	movs	r2, #12
 8002f74:	4619      	mov	r1, r3
 8002f76:	4807      	ldr	r0, [pc, #28]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002f78:	f007 fff6 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002f82:	f000 fab2 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f86:	4803      	ldr	r0, [pc, #12]	; (8002f94 <MX_TIM3_Init+0x128>)
 8002f88:	f000 fdf0 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 8002f8c:	bf00      	nop
 8002f8e:	3738      	adds	r7, #56	; 0x38
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200009b4 	.word	0x200009b4
 8002f98:	40000400 	.word	0x40000400

08002f9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <MX_TIM6_Init+0x64>)
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <MX_TIM6_Init+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <MX_TIM6_Init+0x64>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_TIM6_Init+0x64>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <MX_TIM6_Init+0x64>)
 8002fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_TIM6_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fcc:	480c      	ldr	r0, [pc, #48]	; (8003000 <MX_TIM6_Init+0x64>)
 8002fce:	f007 fe6d 	bl	800acac <HAL_TIM_Base_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002fd8:	f000 fa87 	bl	80034ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4805      	ldr	r0, [pc, #20]	; (8003000 <MX_TIM6_Init+0x64>)
 8002fea:	f008 fda5 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002ff4:	f000 fa79 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000a00 	.word	0x20000a00
 8003004:	40001000 	.word	0x40001000

08003008 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <MX_TIM7_Init+0x64>)
 800301a:	4a15      	ldr	r2, [pc, #84]	; (8003070 <MX_TIM7_Init+0x68>)
 800301c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <MX_TIM7_Init+0x64>)
 8003020:	2200      	movs	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <MX_TIM7_Init+0x64>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <MX_TIM7_Init+0x64>)
 800302c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003030:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <MX_TIM7_Init+0x64>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003038:	480c      	ldr	r0, [pc, #48]	; (800306c <MX_TIM7_Init+0x64>)
 800303a:	f007 fe37 	bl	800acac <HAL_TIM_Base_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003044:	f000 fa51 	bl	80034ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <MX_TIM7_Init+0x64>)
 8003056:	f008 fd6f 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003060:	f000 fa43 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000a4c 	.word	0x20000a4c
 8003070:	40001400 	.word	0x40001400

08003074 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b09a      	sub	sp, #104	; 0x68
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800307a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003088:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
 80030a4:	615a      	str	r2, [r3, #20]
 80030a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	222c      	movs	r2, #44	; 0x2c
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f00c fedc 	bl	800fe6c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030b4:	4b55      	ldr	r3, [pc, #340]	; (800320c <MX_TIM8_Init+0x198>)
 80030b6:	4a56      	ldr	r2, [pc, #344]	; (8003210 <MX_TIM8_Init+0x19c>)
 80030b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <MX_TIM8_Init+0x198>)
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c0:	4b52      	ldr	r3, [pc, #328]	; (800320c <MX_TIM8_Init+0x198>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80030c6:	4b51      	ldr	r3, [pc, #324]	; (800320c <MX_TIM8_Init+0x198>)
 80030c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ce:	4b4f      	ldr	r3, [pc, #316]	; (800320c <MX_TIM8_Init+0x198>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <MX_TIM8_Init+0x198>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030da:	4b4c      	ldr	r3, [pc, #304]	; (800320c <MX_TIM8_Init+0x198>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030e0:	484a      	ldr	r0, [pc, #296]	; (800320c <MX_TIM8_Init+0x198>)
 80030e2:	f007 fde3 	bl	800acac <HAL_TIM_Base_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80030ec:	f000 f9fd 	bl	80034ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030fa:	4619      	mov	r1, r3
 80030fc:	4843      	ldr	r0, [pc, #268]	; (800320c <MX_TIM8_Init+0x198>)
 80030fe:	f008 f847 	bl	800b190 <HAL_TIM_ConfigClockSource>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003108:	f000 f9ef 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800310c:	483f      	ldr	r0, [pc, #252]	; (800320c <MX_TIM8_Init+0x198>)
 800310e:	f007 fe24 	bl	800ad5a <HAL_TIM_PWM_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003118:	f000 f9e7 	bl	80034ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311c:	2300      	movs	r3, #0
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003128:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800312c:	4619      	mov	r1, r3
 800312e:	4837      	ldr	r0, [pc, #220]	; (800320c <MX_TIM8_Init+0x198>)
 8003130:	f008 fd02 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800313a:	f000 f9d6 	bl	80034ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800313e:	2360      	movs	r3, #96	; 0x60
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003146:	2300      	movs	r3, #0
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800314a:	2300      	movs	r3, #0
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800315a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	4619      	mov	r1, r3
 8003162:	482a      	ldr	r0, [pc, #168]	; (800320c <MX_TIM8_Init+0x198>)
 8003164:	f007 ff00 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800316e:	f000 f9bc 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003172:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003176:	2204      	movs	r2, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4824      	ldr	r0, [pc, #144]	; (800320c <MX_TIM8_Init+0x198>)
 800317c:	f007 fef4 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003186:	f000 f9b0 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800318a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800318e:	2208      	movs	r2, #8
 8003190:	4619      	mov	r1, r3
 8003192:	481e      	ldr	r0, [pc, #120]	; (800320c <MX_TIM8_Init+0x198>)
 8003194:	f007 fee8 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800319e:	f000 f9a4 	bl	80034ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031a6:	220c      	movs	r2, #12
 80031a8:	4619      	mov	r1, r3
 80031aa:	4818      	ldr	r0, [pc, #96]	; (800320c <MX_TIM8_Init+0x198>)
 80031ac:	f007 fedc 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 80031b6:	f000 f998 	bl	80034ea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4807      	ldr	r0, [pc, #28]	; (800320c <MX_TIM8_Init+0x198>)
 80031f0:	f008 fd2a 	bl	800bc48 <HAL_TIMEx_ConfigBreakDeadTime>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 80031fa:	f000 f976 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80031fe:	4803      	ldr	r0, [pc, #12]	; (800320c <MX_TIM8_Init+0x198>)
 8003200:	f000 fcb4 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 8003204:	bf00      	nop
 8003206:	3768      	adds	r7, #104	; 0x68
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000a98 	.word	0x20000a98
 8003210:	40013400 	.word	0x40013400

08003214 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <MX_UART4_Init+0x58>)
 800321a:	4a15      	ldr	r2, [pc, #84]	; (8003270 <MX_UART4_Init+0x5c>)
 800321c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <MX_UART4_Init+0x58>)
 8003220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003224:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <MX_UART4_Init+0x58>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <MX_UART4_Init+0x58>)
 800322e:	2200      	movs	r2, #0
 8003230:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <MX_UART4_Init+0x58>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <MX_UART4_Init+0x58>)
 800323a:	220c      	movs	r2, #12
 800323c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <MX_UART4_Init+0x58>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <MX_UART4_Init+0x58>)
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <MX_UART4_Init+0x58>)
 800324c:	2200      	movs	r2, #0
 800324e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <MX_UART4_Init+0x58>)
 8003252:	2200      	movs	r2, #0
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003256:	4805      	ldr	r0, [pc, #20]	; (800326c <MX_UART4_Init+0x58>)
 8003258:	f008 fd74 	bl	800bd44 <HAL_UART_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003262:	f000 f942 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000ae4 	.word	0x20000ae4
 8003270:	40004c00 	.word	0x40004c00

08003274 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <MX_UART5_Init+0x58>)
 800327a:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <MX_UART5_Init+0x5c>)
 800327c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <MX_UART5_Init+0x58>)
 8003280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003284:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <MX_UART5_Init+0x58>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <MX_UART5_Init+0x58>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <MX_UART5_Init+0x58>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <MX_UART5_Init+0x58>)
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <MX_UART5_Init+0x58>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <MX_UART5_Init+0x58>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <MX_UART5_Init+0x58>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <MX_UART5_Init+0x58>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <MX_UART5_Init+0x58>)
 80032b8:	f008 fd44 	bl	800bd44 <HAL_UART_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80032c2:	f000 f912 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000b68 	.word	0x20000b68
 80032d0:	40005000 	.word	0x40005000

080032d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <MX_USART1_UART_Init+0x58>)
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <MX_USART1_UART_Init+0x5c>)
 80032dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <MX_USART1_UART_Init+0x58>)
 80032e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <MX_USART1_UART_Init+0x58>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <MX_USART1_UART_Init+0x58>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <MX_USART1_UART_Init+0x58>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <MX_USART1_UART_Init+0x58>)
 80032fa:	220c      	movs	r2, #12
 80032fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <MX_USART1_UART_Init+0x58>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <MX_USART1_UART_Init+0x58>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <MX_USART1_UART_Init+0x58>)
 800330c:	2200      	movs	r2, #0
 800330e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <MX_USART1_UART_Init+0x58>)
 8003312:	2200      	movs	r2, #0
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003316:	4805      	ldr	r0, [pc, #20]	; (800332c <MX_USART1_UART_Init+0x58>)
 8003318:	f008 fd14 	bl	800bd44 <HAL_UART_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003322:	f000 f8e2 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000bec 	.word	0x20000bec
 8003330:	40013800 	.word	0x40013800

08003334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <MX_USART2_UART_Init+0x58>)
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <MX_USART2_UART_Init+0x5c>)
 800333c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <MX_USART2_UART_Init+0x58>)
 8003340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_USART2_UART_Init+0x58>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <MX_USART2_UART_Init+0x58>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_USART2_UART_Init+0x58>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <MX_USART2_UART_Init+0x58>)
 800335a:	220c      	movs	r2, #12
 800335c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <MX_USART2_UART_Init+0x58>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <MX_USART2_UART_Init+0x58>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <MX_USART2_UART_Init+0x58>)
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <MX_USART2_UART_Init+0x58>)
 8003372:	2200      	movs	r2, #0
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003376:	4805      	ldr	r0, [pc, #20]	; (800338c <MX_USART2_UART_Init+0x58>)
 8003378:	f008 fce4 	bl	800bd44 <HAL_UART_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003382:	f000 f8b2 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000c70 	.word	0x20000c70
 8003390:	40004400 	.word	0x40004400

08003394 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <MX_USART3_UART_Init+0x58>)
 800339a:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <MX_USART3_UART_Init+0x5c>)
 800339c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033a0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80033a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033ba:	220c      	movs	r2, #12
 80033bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033d6:	4805      	ldr	r0, [pc, #20]	; (80033ec <MX_USART3_UART_Init+0x58>)
 80033d8:	f008 fcb4 	bl	800bd44 <HAL_UART_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033e2:	f000 f882 	bl	80034ea <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000cf4 	.word	0x20000cf4
 80033f0:	40004800 	.word	0x40004800

080033f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <MX_GPIO_Init+0xdc>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <MX_GPIO_Init+0xdc>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800346a:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <MX_GPIO_Init+0xdc>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <MX_GPIO_Init+0xdc>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003482:	2200      	movs	r2, #0
 8003484:	2120      	movs	r1, #32
 8003486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800348a:	f005 f975 	bl	8008778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800348e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003494:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <MX_GPIO_Init+0xe0>)
 80034a6:	f004 fec9 	bl	800823c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80034aa:	2320      	movs	r3, #32
 80034ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c4:	f004 feba 	bl	800823c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034c8:	bf00      	nop
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	48000800 	.word	0x48000800

080034d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 80034e0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80034e4:	f00a f89e 	bl	800d624 <osDelay>
 80034e8:	e7fa      	b.n	80034e0 <StartDefaultTask+0x8>

080034ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ee:	b672      	cpsid	i
}
 80034f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034f2:	e7fe      	b.n	80034f2 <Error_Handler+0x8>

080034f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_MspInit+0x4c>)
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_MspInit+0x4c>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6613      	str	r3, [r2, #96]	; 0x60
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_MspInit+0x4c>)
 8003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_MspInit+0x4c>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_MspInit+0x4c>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	6593      	str	r3, [r2, #88]	; 0x58
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_MspInit+0x4c>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	210f      	movs	r1, #15
 800352e:	f06f 0001 	mvn.w	r0, #1
 8003532:	f004 fdce 	bl	80080d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b0ac      	sub	sp, #176	; 0xb0
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	2288      	movs	r2, #136	; 0x88
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f00c fc81 	bl	800fe6c <memset>
  if(hadc->Instance==ADC3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a27      	ldr	r2, [pc, #156]	; (800360c <HAL_ADC_MspInit+0xc8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d146      	bne.n	8003602 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003578:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800357a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800357e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003582:	2302      	movs	r3, #2
 8003584:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800358a:	2308      	movs	r3, #8
 800358c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800358e:	2307      	movs	r3, #7
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003592:	2302      	movs	r3, #2
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003596:	2302      	movs	r3, #2
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800359a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 fda7 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80035b0:	f7ff ff9b 	bl	80034ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80035b4:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_ADC_MspInit+0xcc>)
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_ADC_MspInit+0xcc>)
 80035ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_ADC_MspInit+0xcc>)
 80035c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_ADC_MspInit+0xcc>)
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <HAL_ADC_MspInit+0xcc>)
 80035d2:	f043 0304 	orr.w	r3, r3, #4
 80035d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_ADC_MspInit+0xcc>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80035e4:	2307      	movs	r3, #7
 80035e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80035ea:	230b      	movs	r3, #11
 80035ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035fa:	4619      	mov	r1, r3
 80035fc:	4805      	ldr	r0, [pc, #20]	; (8003614 <HAL_ADC_MspInit+0xd0>)
 80035fe:	f004 fe1d 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003602:	bf00      	nop
 8003604:	37b0      	adds	r7, #176	; 0xb0
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	50040200 	.word	0x50040200
 8003610:	40021000 	.word	0x40021000
 8003614:	48000800 	.word	0x48000800

08003618 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_CAN_MspInit+0x80>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d129      	bne.n	800368e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_CAN_MspInit+0x84>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <HAL_CAN_MspInit+0x84>)
 8003640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_CAN_MspInit+0x84>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_CAN_MspInit+0x84>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	4a11      	ldr	r2, [pc, #68]	; (800369c <HAL_CAN_MspInit+0x84>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_CAN_MspInit+0x84>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800366a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800366e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800367c:	2309      	movs	r3, #9
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	4619      	mov	r1, r3
 8003686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800368a:	f004 fdd7 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800368e:	bf00      	nop
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40006400 	.word	0x40006400
 800369c:	40021000 	.word	0x40021000

080036a0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 030c 	add.w	r3, r7, #12
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_COMP_MspInit+0x5c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d117      	bne.n	80036f2 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_COMP_MspInit+0x60>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <HAL_COMP_MspInit+0x60>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_COMP_MspInit+0x60>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80036da:	2390      	movs	r3, #144	; 0x90
 80036dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036de:	2303      	movs	r3, #3
 80036e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	4619      	mov	r1, r3
 80036ec:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_COMP_MspInit+0x64>)
 80036ee:	f004 fda5 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80036f2:	bf00      	nop
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40010204 	.word	0x40010204
 8003700:	40021000 	.word	0x40021000
 8003704:	48000400 	.word	0x48000400

08003708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b0ac      	sub	sp, #176	; 0xb0
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	2288      	movs	r2, #136	; 0x88
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f00c fb9f 	bl	800fe6c <memset>
  if(hi2c->Instance==I2C2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_I2C_MspInit+0xb0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d13b      	bne.n	80037b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800373c:	2300      	movs	r3, #0
 800373e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4618      	mov	r0, r3
 8003746:	f006 fcd7 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003750:	f7ff fecb 	bl	80034ea <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_I2C_MspInit+0xb4>)
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_I2C_MspInit+0xb4>)
 800375a:	f043 0302 	orr.w	r3, r3, #2
 800375e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_I2C_MspInit+0xb4>)
 8003762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800376c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003774:	2312      	movs	r3, #18
 8003776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003780:	2303      	movs	r3, #3
 8003782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003786:	2304      	movs	r3, #4
 8003788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003790:	4619      	mov	r1, r3
 8003792:	480b      	ldr	r0, [pc, #44]	; (80037c0 <HAL_I2C_MspInit+0xb8>)
 8003794:	f004 fd52 	bl	800823c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_I2C_MspInit+0xb4>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_I2C_MspInit+0xb4>)
 800379e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037a2:	6593      	str	r3, [r2, #88]	; 0x58
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_I2C_MspInit+0xb4>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037b0:	bf00      	nop
 80037b2:	37b0      	adds	r7, #176	; 0xb0
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40005800 	.word	0x40005800
 80037bc:	40021000 	.word	0x40021000
 80037c0:	48000400 	.word	0x48000400

080037c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <HAL_I2C_MspDeInit+0x3c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10f      	bne.n	80037f6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_I2C_MspDeInit+0x40>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <HAL_I2C_MspDeInit+0x40>)
 80037dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80037e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037e6:	4808      	ldr	r0, [pc, #32]	; (8003808 <HAL_I2C_MspDeInit+0x44>)
 80037e8:	f004 fed2 	bl	8008590 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80037ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037f0:	4805      	ldr	r0, [pc, #20]	; (8003808 <HAL_I2C_MspDeInit+0x44>)
 80037f2:	f004 fecd 	bl	8008590 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40005800 	.word	0x40005800
 8003804:	40021000 	.word	0x40021000
 8003808:	48000400 	.word	0x48000400

0800380c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08e      	sub	sp, #56	; 0x38
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <HAL_SPI_MspInit+0x14c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d145      	bne.n	80038ba <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800382e:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_SPI_MspInit+0x150>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_SPI_MspInit+0x150>)
 8003834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
 800383a:	4b48      	ldr	r3, [pc, #288]	; (800395c <HAL_SPI_MspInit+0x150>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003846:	4b45      	ldr	r3, [pc, #276]	; (800395c <HAL_SPI_MspInit+0x150>)
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	4a44      	ldr	r2, [pc, #272]	; (800395c <HAL_SPI_MspInit+0x150>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003852:	4b42      	ldr	r3, [pc, #264]	; (800395c <HAL_SPI_MspInit+0x150>)
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385e:	4b3f      	ldr	r3, [pc, #252]	; (800395c <HAL_SPI_MspInit+0x150>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	4a3e      	ldr	r2, [pc, #248]	; (800395c <HAL_SPI_MspInit+0x150>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800386a:	4b3c      	ldr	r3, [pc, #240]	; (800395c <HAL_SPI_MspInit+0x150>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003876:	2308      	movs	r3, #8
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003886:	2305      	movs	r3, #5
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388e:	4619      	mov	r1, r3
 8003890:	4833      	ldr	r0, [pc, #204]	; (8003960 <HAL_SPI_MspInit+0x154>)
 8003892:	f004 fcd3 	bl	800823c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003896:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a4:	2303      	movs	r3, #3
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038a8:	2305      	movs	r3, #5
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b0:	4619      	mov	r1, r3
 80038b2:	482c      	ldr	r0, [pc, #176]	; (8003964 <HAL_SPI_MspInit+0x158>)
 80038b4:	f004 fcc2 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80038b8:	e049      	b.n	800394e <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <HAL_SPI_MspInit+0x15c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d144      	bne.n	800394e <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	4a24      	ldr	r2, [pc, #144]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ce:	6593      	str	r3, [r2, #88]	; 0x58
 80038d0:	4b22      	ldr	r3, [pc, #136]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038dc:	4b1f      	ldr	r3, [pc, #124]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038e8:	4b1c      	ldr	r3, [pc, #112]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_SPI_MspInit+0x150>)
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003900:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_SPI_MspInit+0x150>)
 8003902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800390c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	2302      	movs	r3, #2
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391a:	2303      	movs	r3, #3
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800391e:	2306      	movs	r3, #6
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003926:	4619      	mov	r1, r3
 8003928:	480d      	ldr	r0, [pc, #52]	; (8003960 <HAL_SPI_MspInit+0x154>)
 800392a:	f004 fc87 	bl	800823c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800392e:	2320      	movs	r3, #32
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800393e:	2306      	movs	r3, #6
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003946:	4619      	mov	r1, r3
 8003948:	4806      	ldr	r0, [pc, #24]	; (8003964 <HAL_SPI_MspInit+0x158>)
 800394a:	f004 fc77 	bl	800823c <HAL_GPIO_Init>
}
 800394e:	bf00      	nop
 8003950:	3738      	adds	r7, #56	; 0x38
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40003800 	.word	0x40003800
 800395c:	40021000 	.word	0x40021000
 8003960:	48000800 	.word	0x48000800
 8003964:	48000400 	.word	0x48000400
 8003968:	40003c00 	.word	0x40003c00

0800396c <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b0ac      	sub	sp, #176	; 0xb0
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	2288      	movs	r2, #136	; 0x88
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f00c fa6d 	bl	800fe6c <memset>
  if(hswpmi->Instance==SWPMI1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_SWPMI_MspInit+0xb4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d13d      	bne.n	8003a18 <HAL_SWPMI_MspInit+0xac>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 800399c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f006 fba3 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 80039b8:	f7ff fd97 	bl	80034ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_SWPMI_MspInit+0xb8>)
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_SWPMI_MspInit+0xb8>)
 80039c2:	f043 0304 	orr.w	r3, r3, #4
 80039c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_SWPMI_MspInit+0xb8>)
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_SWPMI_MspInit+0xb8>)
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <HAL_SWPMI_MspInit+0xb8>)
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_SWPMI_MspInit+0xb8>)
 80039e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
    /**SWPMI1 GPIO Configuration
    PB12     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a00:	2303      	movs	r3, #3
 8003a02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 8003a06:	230c      	movs	r3, #12
 8003a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a10:	4619      	mov	r1, r3
 8003a12:	4805      	ldr	r0, [pc, #20]	; (8003a28 <HAL_SWPMI_MspInit+0xbc>)
 8003a14:	f004 fc12 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 8003a18:	bf00      	nop
 8003a1a:	37b0      	adds	r7, #176	; 0xb0
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40008800 	.word	0x40008800
 8003a24:	40021000 	.word	0x40021000
 8003a28:	48000400 	.word	0x48000400

08003a2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_TIM_Encoder_MspInit+0x80>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d129      	bne.n	8003aa2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a58:	6613      	str	r3, [r2, #96]	; 0x60
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a9e:	f004 fbcd 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003aa2:	bf00      	nop
 8003aa4:	3728      	adds	r7, #40	; 0x28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <HAL_TIM_Base_MspInit+0xa4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003ade:	e034      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <HAL_TIM_Base_MspInit+0xac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003af0:	f043 0310 	orr.w	r3, r3, #16
 8003af4:	6593      	str	r3, [r2, #88]	; 0x58
 8003af6:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
}
 8003b02:	e022      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_TIM_Base_MspInit+0xb0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10c      	bne.n	8003b28 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003b14:	f043 0320 	orr.w	r3, r3, #32
 8003b18:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
}
 8003b26:	e010      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <HAL_TIM_Base_MspInit+0xb4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10b      	bne.n	8003b4a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_TIM_Base_MspInit+0xa8>)
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40001000 	.word	0x40001000
 8003b64:	40001400 	.word	0x40001400
 8003b68:	40013400 	.word	0x40013400

08003b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a31      	ldr	r2, [pc, #196]	; (8003c50 <HAL_TIM_MspPostInit+0xe4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d139      	bne.n	8003c02 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bb2:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bbe:	23c0      	movs	r3, #192	; 0xc0
 8003bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bdc:	f004 fb2e 	bl	800823c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003be0:	2303      	movs	r3, #3
 8003be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4817      	ldr	r0, [pc, #92]	; (8003c58 <HAL_TIM_MspPostInit+0xec>)
 8003bfc:	f004 fb1e 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c00:	e021      	b.n	8003c46 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <HAL_TIM_MspPostInit+0xf0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d11c      	bne.n	8003c46 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c18:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_TIM_MspPostInit+0xe8>)
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003c24:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c36:	2303      	movs	r3, #3
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4807      	ldr	r0, [pc, #28]	; (8003c60 <HAL_TIM_MspPostInit+0xf4>)
 8003c42:	f004 fafb 	bl	800823c <HAL_GPIO_Init>
}
 8003c46:	bf00      	nop
 8003c48:	3728      	adds	r7, #40	; 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40021000 	.word	0x40021000
 8003c58:	48000400 	.word	0x48000400
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	48000800 	.word	0x48000800

08003c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b0b6      	sub	sp, #216	; 0xd8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c80:	2288      	movs	r2, #136	; 0x88
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f00c f8f1 	bl	800fe6c <memset>
  if(huart->Instance==UART4)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4aad      	ldr	r2, [pc, #692]	; (8003f44 <HAL_UART_MspInit+0x2e0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d145      	bne.n	8003d20 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003c94:	2308      	movs	r3, #8
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f006 fa28 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cae:	f7ff fc1c 	bl	80034ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cb2:	4ba5      	ldr	r3, [pc, #660]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	4aa4      	ldr	r2, [pc, #656]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cbe:	4ba2      	ldr	r3, [pc, #648]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cca:	4b9f      	ldr	r3, [pc, #636]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	4a9e      	ldr	r2, [pc, #632]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd6:	4b9c      	ldr	r3, [pc, #624]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d04:	4619      	mov	r1, r3
 8003d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d0a:	f004 fa97 	bl	800823c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2105      	movs	r1, #5
 8003d12:	2034      	movs	r0, #52	; 0x34
 8003d14:	f004 f9dd 	bl	80080d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003d18:	2034      	movs	r0, #52	; 0x34
 8003d1a:	f004 f9f6 	bl	800810a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d1e:	e169      	b.n	8003ff4 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a89      	ldr	r2, [pc, #548]	; (8003f4c <HAL_UART_MspInit+0x2e8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d15e      	bne.n	8003de8 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f006 f9dd 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003d44:	f7ff fbd1 	bl	80034ea <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d48:	4b7f      	ldr	r3, [pc, #508]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4a7e      	ldr	r2, [pc, #504]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
 8003d54:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d60:	4b79      	ldr	r3, [pc, #484]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	4a78      	ldr	r2, [pc, #480]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d6c:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d78:	4b73      	ldr	r3, [pc, #460]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	4a72      	ldr	r2, [pc, #456]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d7e:	f043 0308 	orr.w	r3, r3, #8
 8003d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d84:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da4:	2303      	movs	r3, #3
 8003da6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003daa:	2308      	movs	r3, #8
 8003dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4866      	ldr	r0, [pc, #408]	; (8003f50 <HAL_UART_MspInit+0x2ec>)
 8003db8:	f004 fa40 	bl	800823c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dda:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003dde:	4619      	mov	r1, r3
 8003de0:	485c      	ldr	r0, [pc, #368]	; (8003f54 <HAL_UART_MspInit+0x2f0>)
 8003de2:	f004 fa2b 	bl	800823c <HAL_GPIO_Init>
}
 8003de6:	e105      	b.n	8003ff4 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a5a      	ldr	r2, [pc, #360]	; (8003f58 <HAL_UART_MspInit+0x2f4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d15e      	bne.n	8003eb0 <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003df6:	2300      	movs	r3, #0
 8003df8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f006 f97a 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003e0a:	f7ff fb6e 	bl	80034ea <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e0e:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e12:	4a4d      	ldr	r2, [pc, #308]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e18:	6613      	str	r3, [r2, #96]	; 0x60
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	4a47      	ldr	r2, [pc, #284]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e32:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3e:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e4a:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e70:	2307      	movs	r3, #7
 8003e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e80:	f004 f9dc 	bl	800823c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e84:	2340      	movs	r3, #64	; 0x40
 8003e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e96:	2303      	movs	r3, #3
 8003e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e9c:	2307      	movs	r3, #7
 8003e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	482c      	ldr	r0, [pc, #176]	; (8003f5c <HAL_UART_MspInit+0x2f8>)
 8003eaa:	f004 f9c7 	bl	800823c <HAL_GPIO_Init>
}
 8003eae:	e0a1      	b.n	8003ff4 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <HAL_UART_MspInit+0x2fc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d154      	bne.n	8003f64 <HAL_UART_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f006 f916 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8003ed2:	f7ff fb0a 	bl	80034ea <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_UART_MspInit+0x2e4>)
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f06:	230c      	movs	r3, #12
 8003f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f1e:	2307      	movs	r3, #7
 8003f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f2e:	f004 f985 	bl	800823c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2105      	movs	r1, #5
 8003f36:	2026      	movs	r0, #38	; 0x26
 8003f38:	f004 f8cb 	bl	80080d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f3c:	2026      	movs	r0, #38	; 0x26
 8003f3e:	f004 f8e4 	bl	800810a <HAL_NVIC_EnableIRQ>
}
 8003f42:	e057      	b.n	8003ff4 <HAL_UART_MspInit+0x390>
 8003f44:	40004c00 	.word	0x40004c00
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40005000 	.word	0x40005000
 8003f50:	48000800 	.word	0x48000800
 8003f54:	48000c00 	.word	0x48000c00
 8003f58:	40013800 	.word	0x40013800
 8003f5c:	48000400 	.word	0x48000400
 8003f60:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a24      	ldr	r2, [pc, #144]	; (8003ffc <HAL_UART_MspInit+0x398>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d142      	bne.n	8003ff4 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f72:	2300      	movs	r3, #0
 8003f74:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f006 f8bc 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_UART_MspInit+0x326>
      Error_Handler();
 8003f86:	f7ff fab0 	bl	80034ea <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_UART_MspInit+0x39c>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_UART_MspInit+0x39c>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6593      	str	r3, [r2, #88]	; 0x58
 8003f96:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_UART_MspInit+0x39c>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_UART_MspInit+0x39c>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <HAL_UART_MspInit+0x39c>)
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_UART_MspInit+0x39c>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003fba:	2330      	movs	r3, #48	; 0x30
 8003fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fd2:	2307      	movs	r3, #7
 8003fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4809      	ldr	r0, [pc, #36]	; (8004004 <HAL_UART_MspInit+0x3a0>)
 8003fe0:	f004 f92c 	bl	800823c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2105      	movs	r1, #5
 8003fe8:	2027      	movs	r0, #39	; 0x27
 8003fea:	f004 f872 	bl	80080d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fee:	2027      	movs	r0, #39	; 0x27
 8003ff0:	f004 f88b 	bl	800810a <HAL_NVIC_EnableIRQ>
}
 8003ff4:	bf00      	nop
 8003ff6:	37d8      	adds	r7, #216	; 0xd8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40004800 	.word	0x40004800
 8004000:	40021000 	.word	0x40021000
 8004004:	48000800 	.word	0x48000800

08004008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800400c:	e7fe      	b.n	800400c <NMI_Handler+0x4>

0800400e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004012:	e7fe      	b.n	8004012 <HardFault_Handler+0x4>

08004014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004018:	e7fe      	b.n	8004018 <MemManage_Handler+0x4>

0800401a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800401e:	e7fe      	b.n	800401e <BusFault_Handler+0x4>

08004020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004024:	e7fe      	b.n	8004024 <UsageFault_Handler+0x4>

08004026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004038:	f002 fdc4 	bl	8006bc4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800403c:	f00b f876 	bl	800f12c <xTaskGetSchedulerState>
 8004040:	4603      	mov	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d001      	beq.n	800404a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004046:	f00b fc4f 	bl	800f8e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <USART2_IRQHandler+0x10>)
 8004056:	f007 ff87 	bl	800bf68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000c70 	.word	0x20000c70

08004064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <USART3_IRQHandler+0x10>)
 800406a:	f007 ff7d 	bl	800bf68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000cf4 	.word	0x20000cf4

08004078 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800407c:	4802      	ldr	r0, [pc, #8]	; (8004088 <UART4_IRQHandler+0x10>)
 800407e:	f007 ff73 	bl	800bf68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000ae4 	.word	0x20000ae4

0800408c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <BSP_I2C1_Init+0x70>)
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <BSP_I2C1_Init+0x74>)
 800409a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <BSP_I2C1_Init+0x78>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	4918      	ldr	r1, [pc, #96]	; (8004104 <BSP_I2C1_Init+0x78>)
 80040a4:	600a      	str	r2, [r1, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d122      	bne.n	80040f0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80040aa:	4814      	ldr	r0, [pc, #80]	; (80040fc <BSP_I2C1_Init+0x70>)
 80040ac:	f004 fe68 	bl	8008d80 <HAL_I2C_GetState>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11c      	bne.n	80040f0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80040b6:	4811      	ldr	r0, [pc, #68]	; (80040fc <BSP_I2C1_Init+0x70>)
 80040b8:	f000 f8f6 	bl	80042a8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d116      	bne.n	80040f0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80040c2:	480e      	ldr	r0, [pc, #56]	; (80040fc <BSP_I2C1_Init+0x70>)
 80040c4:	f000 f8ac 	bl	8004220 <MX_I2C1_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80040ce:	f06f 0307 	mvn.w	r3, #7
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e00c      	b.n	80040f0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040d6:	2100      	movs	r1, #0
 80040d8:	4808      	ldr	r0, [pc, #32]	; (80040fc <BSP_I2C1_Init+0x70>)
 80040da:	f005 f911 	bl	8009300 <HAL_I2CEx_ConfigAnalogFilter>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80040e4:	f06f 0307 	mvn.w	r3, #7
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	e001      	b.n	80040f0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80040f0:	687b      	ldr	r3, [r7, #4]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000e9c 	.word	0x20000e9c
 8004100:	40005400 	.word	0x40005400
 8004104:	20000ef0 	.word	0x20000ef0

08004108 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <BSP_I2C1_DeInit+0x48>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d014      	beq.n	8004144 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <BSP_I2C1_DeInit+0x48>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <BSP_I2C1_DeInit+0x48>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <BSP_I2C1_DeInit+0x48>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800412c:	4809      	ldr	r0, [pc, #36]	; (8004154 <BSP_I2C1_DeInit+0x4c>)
 800412e:	f000 f91b 	bl	8004368 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004132:	4808      	ldr	r0, [pc, #32]	; (8004154 <BSP_I2C1_DeInit+0x4c>)
 8004134:	f004 fbc7 	bl	80088c6 <HAL_I2C_DeInit>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800413e:	f06f 0307 	mvn.w	r3, #7
 8004142:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004144:	687b      	ldr	r3, [r7, #4]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000ef0 	.word	0x20000ef0
 8004154:	20000e9c 	.word	0x20000e9c

08004158 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af04      	add	r7, sp, #16
 800415e:	60ba      	str	r2, [r7, #8]
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	81fb      	strh	r3, [r7, #14]
 8004166:	460b      	mov	r3, r1
 8004168:	81bb      	strh	r3, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004172:	89ba      	ldrh	r2, [r7, #12]
 8004174:	89f9      	ldrh	r1, [r7, #14]
 8004176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800417a:	9302      	str	r3, [sp, #8]
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	2301      	movs	r3, #1
 8004186:	480c      	ldr	r0, [pc, #48]	; (80041b8 <BSP_I2C1_WriteReg+0x60>)
 8004188:	f004 fbcc 	bl	8008924 <HAL_I2C_Mem_Write>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00c      	beq.n	80041ac <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004192:	4809      	ldr	r0, [pc, #36]	; (80041b8 <BSP_I2C1_WriteReg+0x60>)
 8004194:	f004 fe02 	bl	8008d9c <HAL_I2C_GetError>
 8004198:	4603      	mov	r3, r0
 800419a:	2b04      	cmp	r3, #4
 800419c:	d103      	bne.n	80041a6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800419e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e002      	b.n	80041ac <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80041a6:	f06f 0303 	mvn.w	r3, #3
 80041aa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80041ac:	697b      	ldr	r3, [r7, #20]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000e9c 	.word	0x20000e9c

080041bc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af04      	add	r7, sp, #16
 80041c2:	60ba      	str	r2, [r7, #8]
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	81fb      	strh	r3, [r7, #14]
 80041ca:	460b      	mov	r3, r1
 80041cc:	81bb      	strh	r3, [r7, #12]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80041d6:	89ba      	ldrh	r2, [r7, #12]
 80041d8:	89f9      	ldrh	r1, [r7, #14]
 80041da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2301      	movs	r3, #1
 80041ea:	480c      	ldr	r0, [pc, #48]	; (800421c <BSP_I2C1_ReadReg+0x60>)
 80041ec:	f004 fcae 	bl	8008b4c <HAL_I2C_Mem_Read>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80041f6:	4809      	ldr	r0, [pc, #36]	; (800421c <BSP_I2C1_ReadReg+0x60>)
 80041f8:	f004 fdd0 	bl	8008d9c <HAL_I2C_GetError>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d103      	bne.n	800420a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004202:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e002      	b.n	8004210 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800420a:	f06f 0303 	mvn.w	r3, #3
 800420e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004210:	697b      	ldr	r3, [r7, #20]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000e9c 	.word	0x20000e9c

08004220 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <MX_I2C1_Init+0x80>)
 8004230:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <MX_I2C1_Init+0x84>)
 8004236:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f004 faa0 	bl	80087a8 <HAL_I2C_Init>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004272:	2100      	movs	r1, #0
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f005 f843 	bl	8009300 <HAL_I2CEx_ConfigAnalogFilter>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8004284:	2100      	movs	r1, #0
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f005 f885 	bl	8009396 <HAL_I2CEx_ConfigDigitalFilter>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40005400 	.word	0x40005400
 80042a4:	10909cec 	.word	0x10909cec

080042a8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b0ac      	sub	sp, #176	; 0xb0
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	2288      	movs	r2, #136	; 0x88
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00b fdd7 	bl	800fe6c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80042be:	2340      	movs	r3, #64	; 0x40
 80042c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042c2:	2300      	movs	r3, #0
 80042c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	4618      	mov	r0, r3
 80042cc:	f005 ff14 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <I2C1_MspInit+0xb8>)
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	4a22      	ldr	r2, [pc, #136]	; (8004360 <I2C1_MspInit+0xb8>)
 80042d6:	f043 0302 	orr.w	r3, r3, #2
 80042da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042dc:	4b20      	ldr	r3, [pc, #128]	; (8004360 <I2C1_MspInit+0xb8>)
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80042e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f0:	2312      	movs	r3, #18
 80042f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fc:	2303      	movs	r3, #3
 80042fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004302:	2304      	movs	r3, #4
 8004304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004308:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800430c:	4619      	mov	r1, r3
 800430e:	4815      	ldr	r0, [pc, #84]	; (8004364 <I2C1_MspInit+0xbc>)
 8004310:	f003 ff94 	bl	800823c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800431c:	2312      	movs	r3, #18
 800431e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004328:	2303      	movs	r3, #3
 800432a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800432e:	2304      	movs	r3, #4
 8004330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004334:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004338:	4619      	mov	r1, r3
 800433a:	480a      	ldr	r0, [pc, #40]	; (8004364 <I2C1_MspInit+0xbc>)
 800433c:	f003 ff7e 	bl	800823c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <I2C1_MspInit+0xb8>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	4a06      	ldr	r2, [pc, #24]	; (8004360 <I2C1_MspInit+0xb8>)
 8004346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800434a:	6593      	str	r3, [r2, #88]	; 0x58
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <I2C1_MspInit+0xb8>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004358:	bf00      	nop
 800435a:	37b0      	adds	r7, #176	; 0xb0
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	48000400 	.word	0x48000400

08004368 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <I2C1_MspDeInit+0x30>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	4a08      	ldr	r2, [pc, #32]	; (8004398 <I2C1_MspDeInit+0x30>)
 8004376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800437a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800437c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004380:	4806      	ldr	r0, [pc, #24]	; (800439c <I2C1_MspDeInit+0x34>)
 8004382:	f004 f905 	bl	8008590 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8004386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800438a:	4804      	ldr	r0, [pc, #16]	; (800439c <I2C1_MspDeInit+0x34>)
 800438c:	f004 f900 	bl	8008590 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	48000400 	.word	0x48000400

080043a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return 1;
 80043a4:	2301      	movs	r3, #1
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <_kill>:

int _kill(int pid, int sig)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043ba:	f00b fd0f 	bl	800fddc <__errno>
 80043be:	4603      	mov	r3, r0
 80043c0:	2216      	movs	r2, #22
 80043c2:	601a      	str	r2, [r3, #0]
  return -1;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_exit>:

void _exit (int status)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043d8:	f04f 31ff 	mov.w	r1, #4294967295
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ffe7 	bl	80043b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80043e2:	e7fe      	b.n	80043e2 <_exit+0x12>

080043e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e00a      	b.n	800440c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043f6:	f3af 8000 	nop.w
 80043fa:	4601      	mov	r1, r0
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	60ba      	str	r2, [r7, #8]
 8004402:	b2ca      	uxtb	r2, r1
 8004404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	dbf0      	blt.n	80043f6 <_read+0x12>
  }

  return len;
 8004414:	687b      	ldr	r3, [r7, #4]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e009      	b.n	8004444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	60ba      	str	r2, [r7, #8]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	3301      	adds	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	dbf1      	blt.n	8004430 <_write+0x12>
  }
  return len;
 800444c:	687b      	ldr	r3, [r7, #4]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <_close>:

int _close(int file)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800447e:	605a      	str	r2, [r3, #4]
  return 0;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <_isatty>:

int _isatty(int file)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004496:	2301      	movs	r3, #1
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044c8:	4a14      	ldr	r2, [pc, #80]	; (800451c <_sbrk+0x5c>)
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <_sbrk+0x60>)
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <_sbrk+0x64>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <_sbrk+0x64>)
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <_sbrk+0x68>)
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <_sbrk+0x64>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d207      	bcs.n	8004500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044f0:	f00b fc74 	bl	800fddc <__errno>
 80044f4:	4603      	mov	r3, r0
 80044f6:	220c      	movs	r2, #12
 80044f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	e009      	b.n	8004514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <_sbrk+0x64>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <_sbrk+0x64>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <_sbrk+0x64>)
 8004510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004512:	68fb      	ldr	r3, [r7, #12]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20018000 	.word	0x20018000
 8004520:	00000400 	.word	0x00000400
 8004524:	20000ef4 	.word	0x20000ef4
 8004528:	20002810 	.word	0x20002810

0800452c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <SystemInit+0x20>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	4a05      	ldr	r2, [pc, #20]	; (800454c <SystemInit+0x20>)
 8004538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800453c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004588 <LoopForever+0x2>

/* Call the clock system initialization function.*/
	    bl  SystemInit
 8004554:	f7ff ffea 	bl	800452c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004558:	480c      	ldr	r0, [pc, #48]	; (800458c <LoopForever+0x6>)
  ldr r1, =_edata
 800455a:	490d      	ldr	r1, [pc, #52]	; (8004590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <LoopForever+0xe>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004560:	e002      	b.n	8004568 <LoopCopyDataInit>

08004562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004566:	3304      	adds	r3, #4

08004568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800456c:	d3f9      	bcc.n	8004562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004570:	4c0a      	ldr	r4, [pc, #40]	; (800459c <LoopForever+0x16>)
  movs r3, #0
 8004572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004574:	e001      	b.n	800457a <LoopFillZerobss>

08004576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004578:	3204      	adds	r2, #4

0800457a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800457c:	d3fb      	bcc.n	8004576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800457e:	f00b fc33 	bl	800fde8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004582:	f7fe f9cd 	bl	8002920 <main>

08004586 <LoopForever>:

LoopForever:
    b LoopForever
 8004586:	e7fe      	b.n	8004586 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004588:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800458c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004590:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004594:	08014598 	.word	0x08014598
  ldr r2, =_sbss
 8004598:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800459c:	20002810 	.word	0x20002810

080045a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045a0:	e7fe      	b.n	80045a0 <ADC1_2_IRQHandler>
	...

080045a4 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e034      	b.n	8004626 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	7b1a      	ldrb	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HTS221_RegisterBusIO+0x8c>)
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <HTS221_RegisterBusIO+0x90>)
 80045fe:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4798      	blx	r3
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	e002      	b.n	8004626 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	08004a11 	.word	0x08004a11
 8004634:	08004a73 	.word	0x08004a73

08004638 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004646:	2b00      	cmp	r3, #0
 8004648:	d108      	bne.n	800465c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f97b 	bl	8004946 <HTS221_Initialize>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	e004      	b.n	8004666 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e015      	b.n	80046b0 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3320      	adds	r3, #32
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fadf 	bl	8004c58 <hts221_power_on_set>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80046a0:	f04f 33ff 	mov.w	r3, #4294967295
 80046a4:	e004      	b.n	80046b0 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3320      	adds	r3, #32
 80046c6:	f107 020c 	add.w	r2, r7, #12
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fb87 	bl	8004de0 <hts221_hum_adc_point_0_get>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80046d8:	f04f 33ff 	mov.w	r3, #4294967295
 80046dc:	e06b      	b.n	80047b6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f103 0220 	add.w	r2, r3, #32
 80046e4:	f107 030c 	add.w	r3, r7, #12
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f000 fad9 	bl	8004ca4 <hts221_hum_rh_point_0_get>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	e05b      	b.n	80047b6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f103 0220 	add.w	r2, r3, #32
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	3308      	adds	r3, #8
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fb8b 	bl	8004e28 <hts221_hum_adc_point_1_get>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	e04b      	b.n	80047b6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f103 0220 	add.w	r2, r3, #32
 8004724:	f107 030c 	add.w	r3, r7, #12
 8004728:	330c      	adds	r3, #12
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f000 fad7 	bl	8004ce0 <hts221_hum_rh_point_1_get>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
 800473c:	e03b      	b.n	80047b6 <HTS221_HUM_GetHumidity+0xfe>
 800473e:	2300      	movs	r3, #0
 8004740:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3320      	adds	r3, #32
 8004746:	f107 021c 	add.w	r2, r7, #28
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fa3d 	bl	8004bcc <hts221_humidity_raw_get>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295
 800475c:	e02b      	b.n	80047b6 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800475e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800476a:	f107 030c 	add.w	r3, r7, #12
 800476e:	eeb0 0a67 	vmov.f32	s0, s15
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f913 	bl	800499e <Linear_Interpolation>
 8004778:	eef0 7a40 	vmov.f32	s15, s0
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004790:	d503      	bpl.n	800479a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80047c0 <HTS221_HUM_GetHumidity+0x108>
 80047a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ac:	dd02      	ble.n	80047b4 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HTS221_HUM_GetHumidity+0x10c>)
 80047b2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3720      	adds	r7, #32
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	42c80000 	.word	0x42c80000
 80047c4:	42c80000 	.word	0x42c80000

080047c8 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e015      	b.n	800480a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3320      	adds	r3, #32
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fa32 	bl	8004c58 <hts221_power_on_set>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	e004      	b.n	800480a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b088      	sub	sp, #32
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3320      	adds	r3, #32
 8004820:	f107 020c 	add.w	r2, r7, #12
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fb22 	bl	8004e70 <hts221_temp_adc_point_0_get>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
 8004836:	e052      	b.n	80048de <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f103 0220 	add.w	r2, r3, #32
 800483e:	f107 030c 	add.w	r3, r7, #12
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 fa68 	bl	8004d1c <hts221_temp_deg_point_0_get>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	e042      	b.n	80048de <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f103 0220 	add.w	r2, r3, #32
 800485e:	f107 030c 	add.w	r3, r7, #12
 8004862:	3308      	adds	r3, #8
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f000 fb26 	bl	8004eb8 <hts221_temp_adc_point_1_get>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	e032      	b.n	80048de <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f103 0220 	add.w	r2, r3, #32
 800487e:	f107 030c 	add.w	r3, r7, #12
 8004882:	330c      	adds	r3, #12
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 fa79 	bl	8004d7e <hts221_temp_deg_point_1_get>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	e022      	b.n	80048de <HTS221_TEMP_GetTemperature+0xcc>
 8004898:	2300      	movs	r3, #0
 800489a:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3320      	adds	r3, #32
 80048a0:	f107 021c 	add.w	r2, r7, #28
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f9b3 	bl	8004c12 <hts221_temperature_raw_get>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	e012      	b.n	80048de <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80048b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	eeb0 0a67 	vmov.f32	s0, s15
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f866 	bl	800499e <Linear_Interpolation>
 80048d2:	eef0 7a40 	vmov.f32	s15, s0
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80048f2:	edd7 7a00 	vldr	s15, [r7]
 80048f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	d801      	bhi.n	8004908 <HTS221_SetOutputDataRate+0x22>
 8004904:	2301      	movs	r3, #1
 8004906:	e00b      	b.n	8004920 <HTS221_SetOutputDataRate+0x3a>
 8004908:	edd7 7a00 	vldr	s15, [r7]
 800490c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8004910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d801      	bhi.n	800491e <HTS221_SetOutputDataRate+0x38>
 800491a:	2302      	movs	r3, #2
 800491c:	e000      	b.n	8004920 <HTS221_SetOutputDataRate+0x3a>
 800491e:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8004920:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3320      	adds	r3, #32
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f902 	bl	8004b34 <hts221_data_rate_set>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e000      	b.n	800493e <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3320      	adds	r3, #32
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 f97f 	bl	8004c58 <hts221_power_on_set>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	e017      	b.n	8004996 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3320      	adds	r3, #32
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f907 	bl	8004b80 <hts221_block_data_update_set>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8004978:	f04f 33ff 	mov.w	r3, #4294967295
 800497c:	e00b      	b.n	8004996 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800497e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff ffaf 	bl	80048e6 <HTS221_SetOutputDataRate>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	e000      	b.n	8004996 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80049b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049ba:	edd7 7a00 	vldr	s15, [r7]
 80049be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80049ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	ed93 6a00 	vldr	s12, [r3]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	edd3 7a03 	vldr	s15, [r3, #12]
 80049de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80049e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	edd3 7a00 	vldr	s15, [r3]
 80049f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80049fe:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a02:	eeb0 0a67 	vmov.f32	s0, s15
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	72fb      	strb	r3, [r7, #11]
 8004a20:	4613      	mov	r3, r2
 8004a22:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10e      	bne.n	8004a4e <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	695c      	ldr	r4, [r3, #20]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	7b1b      	ldrb	r3, [r3, #12]
 8004a38:	b298      	uxth	r0, r3
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	b299      	uxth	r1, r3
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	47a0      	blx	r4
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	e00d      	b.n	8004a6a <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	695c      	ldr	r4, [r3, #20]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	7b1b      	ldrb	r3, [r3, #12]
 8004a56:	b298      	uxth	r0, r3
 8004a58:	7afb      	ldrb	r3, [r7, #11]
 8004a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	b299      	uxth	r1, r3
 8004a62:	893b      	ldrh	r3, [r7, #8]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	47a0      	blx	r4
 8004a68:	4603      	mov	r3, r0
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd90      	pop	{r4, r7, pc}

08004a72 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a72:	b590      	push	{r4, r7, lr}
 8004a74:	b087      	sub	sp, #28
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	460b      	mov	r3, r1
 8004a80:	72fb      	strb	r3, [r7, #11]
 8004a82:	4613      	mov	r3, r2
 8004a84:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10e      	bne.n	8004ab0 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	691c      	ldr	r4, [r3, #16]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	7b1b      	ldrb	r3, [r3, #12]
 8004a9a:	b298      	uxth	r0, r3
 8004a9c:	7afb      	ldrb	r3, [r7, #11]
 8004a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	b299      	uxth	r1, r3
 8004aa6:	893b      	ldrh	r3, [r7, #8]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	47a0      	blx	r4
 8004aac:	4603      	mov	r3, r0
 8004aae:	e00d      	b.n	8004acc <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	691c      	ldr	r4, [r3, #16]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	7b1b      	ldrb	r3, [r3, #12]
 8004ab8:	b298      	uxth	r0, r3
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	b299      	uxth	r1, r3
 8004ac4:	893b      	ldrh	r3, [r7, #8]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	47a0      	blx	r4
 8004aca:	4603      	mov	r3, r0
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd90      	pop	{r4, r7, pc}

08004ad4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	72fb      	strb	r3, [r7, #11]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685c      	ldr	r4, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68d8      	ldr	r0, [r3, #12]
 8004af0:	893b      	ldrh	r3, [r7, #8]
 8004af2:	7af9      	ldrb	r1, [r7, #11]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	47a0      	blx	r4
 8004af8:	6178      	str	r0, [r7, #20]

  return ret;
 8004afa:	697b      	ldr	r3, [r7, #20]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}

08004b04 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	460b      	mov	r3, r1
 8004b12:	72fb      	strb	r3, [r7, #11]
 8004b14:	4613      	mov	r3, r2
 8004b16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681c      	ldr	r4, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68d8      	ldr	r0, [r3, #12]
 8004b20:	893b      	ldrh	r3, [r7, #8]
 8004b22:	7af9      	ldrb	r1, [r7, #11]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	47a0      	blx	r4
 8004b28:	6178      	str	r0, [r7, #20]

  return ret;
 8004b2a:	697b      	ldr	r3, [r7, #20]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd90      	pop	{r4, r7, pc}

08004b34 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004b40:	f107 0208 	add.w	r2, r7, #8
 8004b44:	2301      	movs	r3, #1
 8004b46:	2120      	movs	r1, #32
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffc3 	bl	8004ad4 <hts221_read_reg>
 8004b4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	7a3b      	ldrb	r3, [r7, #8]
 8004b60:	f362 0301 	bfi	r3, r2, #0, #2
 8004b64:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004b66:	f107 0208 	add.w	r2, r7, #8
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	2120      	movs	r1, #32
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ffc8 	bl	8004b04 <hts221_write_reg>
 8004b74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004b8c:	f107 0208 	add.w	r2, r7, #8
 8004b90:	2301      	movs	r3, #1
 8004b92:	2120      	movs	r1, #32
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff ff9d 	bl	8004ad4 <hts221_read_reg>
 8004b9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10f      	bne.n	8004bc2 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	7a3b      	ldrb	r3, [r7, #8]
 8004bac:	f362 0382 	bfi	r3, r2, #2, #1
 8004bb0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004bb2:	f107 0208 	add.w	r2, r7, #8
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	2120      	movs	r1, #32
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff ffa2 	bl	8004b04 <hts221_write_reg>
 8004bc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8004bd6:	f107 0208 	add.w	r2, r7, #8
 8004bda:	2302      	movs	r3, #2
 8004bdc:	2128      	movs	r1, #40	; 0x28
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ff78 	bl	8004ad4 <hts221_read_reg>
 8004be4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004be6:	7a7b      	ldrb	r3, [r7, #9]
 8004be8:	b21a      	sxth	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	7a3b      	ldrb	r3, [r7, #8]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	b21a      	sxth	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c08:	68fb      	ldr	r3, [r7, #12]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004c1c:	f107 0208 	add.w	r2, r7, #8
 8004c20:	2302      	movs	r3, #2
 8004c22:	212a      	movs	r1, #42	; 0x2a
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff ff55 	bl	8004ad4 <hts221_read_reg>
 8004c2a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004c2c:	7a7b      	ldrb	r3, [r7, #9]
 8004c2e:	b21a      	sxth	r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	7a3b      	ldrb	r3, [r7, #8]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	b21a      	sxth	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c64:	f107 0208 	add.w	r2, r7, #8
 8004c68:	2301      	movs	r3, #1
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff31 	bl	8004ad4 <hts221_read_reg>
 8004c72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	7a3b      	ldrb	r3, [r7, #8]
 8004c84:	f362 13c7 	bfi	r3, r2, #7, #1
 8004c88:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	2301      	movs	r3, #1
 8004c90:	2120      	movs	r1, #32
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ff36 	bl	8004b04 <hts221_write_reg>
 8004c98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8004cae:	f107 020b 	add.w	r2, r7, #11
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2130      	movs	r1, #48	; 0x30
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff ff0c 	bl	8004ad4 <hts221_read_reg>
 8004cbc:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8004cea:	f107 020b 	add.w	r2, r7, #11
 8004cee:	2301      	movs	r3, #1
 8004cf0:	2131      	movs	r1, #49	; 0x31
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff feee 	bl	8004ad4 <hts221_read_reg>
 8004cf8:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004cfa:	7afb      	ldrb	r3, [r7, #11]
 8004cfc:	ee07 3a90 	vmov	s15, r3
 8004d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004d12:	68fb      	ldr	r3, [r7, #12]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8004d26:	f107 020f 	add.w	r2, r7, #15
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	2132      	movs	r1, #50	; 0x32
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fed0 	bl	8004ad4 <hts221_read_reg>
 8004d34:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11b      	bne.n	8004d74 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004d3c:	f107 0210 	add.w	r2, r7, #16
 8004d40:	2301      	movs	r3, #1
 8004d42:	2135      	movs	r1, #53	; 0x35
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff fec5 	bl	8004ad4 <hts221_read_reg>
 8004d4a:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004d4c:	7c3b      	ldrb	r3, [r7, #16]
 8004d4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d66:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004d74:	697b      	ldr	r3, [r7, #20]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b086      	sub	sp, #24
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004d88:	f107 020f 	add.w	r2, r7, #15
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	2133      	movs	r1, #51	; 0x33
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fe9f 	bl	8004ad4 <hts221_read_reg>
 8004d96:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d11b      	bne.n	8004dd6 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004d9e:	f107 0210 	add.w	r2, r7, #16
 8004da2:	2301      	movs	r3, #1
 8004da4:	2135      	movs	r1, #53	; 0x35
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fe94 	bl	8004ad4 <hts221_read_reg>
 8004dac:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8004dae:	7c3b      	ldrb	r3, [r7, #16]
 8004db0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004dd6:	697b      	ldr	r3, [r7, #20]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8004dea:	f107 0208 	add.w	r2, r7, #8
 8004dee:	2302      	movs	r3, #2
 8004df0:	2136      	movs	r1, #54	; 0x36
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff fe6e 	bl	8004ad4 <hts221_read_reg>
 8004df8:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004dfa:	7a7b      	ldrb	r3, [r7, #9]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	7a3b      	ldrb	r3, [r7, #8]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004e0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e10:	ee07 3a90 	vmov	s15, r3
 8004e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004e32:	f107 0208 	add.w	r2, r7, #8
 8004e36:	2302      	movs	r3, #2
 8004e38:	213a      	movs	r1, #58	; 0x3a
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fe4a 	bl	8004ad4 <hts221_read_reg>
 8004e40:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004e42:	7a7b      	ldrb	r3, [r7, #9]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	7a3b      	ldrb	r3, [r7, #8]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004e54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e58:	ee07 3a90 	vmov	s15, r3
 8004e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8004e7a:	f107 0208 	add.w	r2, r7, #8
 8004e7e:	2302      	movs	r3, #2
 8004e80:	213c      	movs	r1, #60	; 0x3c
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff fe26 	bl	8004ad4 <hts221_read_reg>
 8004e88:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004e8a:	7a7b      	ldrb	r3, [r7, #9]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	7a3b      	ldrb	r3, [r7, #8]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004e9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8004ec2:	f107 0208 	add.w	r2, r7, #8
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	213e      	movs	r1, #62	; 0x3e
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fe02 	bl	8004ad4 <hts221_read_reg>
 8004ed0:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004ed2:	7a7b      	ldrb	r3, [r7, #9]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	7a3b      	ldrb	r3, [r7, #8]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004ee4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004f14:	f04f 33ff 	mov.w	r3, #4294967295
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e051      	b.n	8004fc0 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	7b1a      	ldrb	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <LPS22HB_RegisterBusIO+0xcc>)
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <LPS22HB_RegisterBusIO+0xd0>)
 8004f5e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8004f76:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e020      	b.n	8004fc0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4798      	blx	r3
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e016      	b.n	8004fc0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d112      	bne.n	8004fc0 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10d      	bne.n	8004fc0 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8004fa8:	7afb      	ldrb	r3, [r7, #11]
 8004faa:	461a      	mov	r2, r3
 8004fac:	2110      	movs	r1, #16
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f877 	bl	80050a2 <LPS22HB_Write_Reg>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	0800518b 	.word	0x0800518b
 8004fd0:	08005211 	.word	0x08005211

08004fd4 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f876 	bl	80050d8 <LPS22HB_Initialize>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	e004      	b.n	8005002 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e014      	b.n	800504a <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f103 0220 	add.w	r2, r3, #32
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 f9c6 	bl	80053c0 <lps22hb_data_rate_set>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	e004      	b.n	800504a <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	2204      	movs	r2, #4
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f00a ff01 	bl	800fe6c <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3320      	adds	r3, #32
 800506e:	f107 020c 	add.w	r2, r7, #12
 8005072:	4611      	mov	r1, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f000 f9c9 	bl	800540c <lps22hb_pressure_raw_get>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8005080:	f04f 33ff 	mov.w	r3, #4294967295
 8005084:	e009      	b.n	800509a <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f935 	bl	80052f8 <lps22hb_from_lsb_to_hpa>
 800508e:	eef0 7a40 	vmov.f32	s15, s0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]
 80050ae:	4613      	mov	r3, r2
 80050b0:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f103 0020 	add.w	r0, r3, #32
 80050b8:	1cba      	adds	r2, r7, #2
 80050ba:	78f9      	ldrb	r1, [r7, #3]
 80050bc:	2301      	movs	r3, #1
 80050be:	f000 f902 	bl	80052c6 <lps22hb_write_reg>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
 80050cc:	e000      	b.n	80050d0 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3320      	adds	r3, #32
 80050e4:	2101      	movs	r1, #1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f9b9 	bl	800545e <lps22hb_low_power_set>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	e044      	b.n	8005182 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3320      	adds	r3, #32
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f95e 	bl	80053c0 <lps22hb_data_rate_set>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	e038      	b.n	8005182 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3320      	adds	r3, #32
 8005114:	2102      	movs	r1, #2
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f92c 	bl	8005374 <lps22hb_low_pass_filter_mode_set>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295
 8005126:	e02c      	b.n	8005182 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3320      	adds	r3, #32
 800512c:	2101      	movs	r1, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f8fa 	bl	8005328 <lps22hb_block_data_update_set>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 800513a:	f04f 33ff 	mov.w	r3, #4294967295
 800513e:	e020      	b.n	8005182 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3320      	adds	r3, #32
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f9ab 	bl	80054aa <lps22hb_auto_add_inc_set>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295
 800515e:	e010      	b.n	8005182 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3320      	adds	r3, #32
 8005164:	2101      	movs	r1, #1
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f99f 	bl	80054aa <lps22hb_auto_add_inc_set>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	e004      	b.n	8005182 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2203      	movs	r2, #3
 800517c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800518a:	b590      	push	{r4, r7, lr}
 800518c:	b089      	sub	sp, #36	; 0x24
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	461a      	mov	r2, r3
 8005196:	460b      	mov	r3, r1
 8005198:	72fb      	strb	r3, [r7, #11]
 800519a:	4613      	mov	r3, r2
 800519c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d121      	bne.n	80051f2 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	83fb      	strh	r3, [r7, #30]
 80051b2:	e018      	b.n	80051e6 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	695c      	ldr	r4, [r3, #20]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	7b1b      	ldrb	r3, [r3, #12]
 80051bc:	b298      	uxth	r0, r3
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	8bfb      	ldrh	r3, [r7, #30]
 80051c4:	4413      	add	r3, r2
 80051c6:	b299      	uxth	r1, r3
 80051c8:	8bfb      	ldrh	r3, [r7, #30]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	441a      	add	r2, r3
 80051ce:	2301      	movs	r3, #1
 80051d0:	47a0      	blx	r4
 80051d2:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80051da:	f04f 33ff 	mov.w	r3, #4294967295
 80051de:	e013      	b.n	8005208 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80051e0:	8bfb      	ldrh	r3, [r7, #30]
 80051e2:	3301      	adds	r3, #1
 80051e4:	83fb      	strh	r3, [r7, #30]
 80051e6:	8bfa      	ldrh	r2, [r7, #30]
 80051e8:	893b      	ldrh	r3, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d3e2      	bcc.n	80051b4 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	e00a      	b.n	8005208 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	695c      	ldr	r4, [r3, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	7b1b      	ldrb	r3, [r3, #12]
 80051fa:	b298      	uxth	r0, r3
 80051fc:	7afb      	ldrb	r3, [r7, #11]
 80051fe:	b299      	uxth	r1, r3
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	47a0      	blx	r4
 8005206:	4603      	mov	r3, r0
  }
}
 8005208:	4618      	mov	r0, r3
 800520a:	3724      	adds	r7, #36	; 0x24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}

08005210 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b089      	sub	sp, #36	; 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	461a      	mov	r2, r3
 800521c:	460b      	mov	r3, r1
 800521e:	72fb      	strb	r3, [r7, #11]
 8005220:	4613      	mov	r3, r2
 8005222:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d121      	bne.n	8005278 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	83fb      	strh	r3, [r7, #30]
 8005238:	e018      	b.n	800526c <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	691c      	ldr	r4, [r3, #16]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	7b1b      	ldrb	r3, [r3, #12]
 8005242:	b298      	uxth	r0, r3
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	b29a      	uxth	r2, r3
 8005248:	8bfb      	ldrh	r3, [r7, #30]
 800524a:	4413      	add	r3, r2
 800524c:	b299      	uxth	r1, r3
 800524e:	8bfb      	ldrh	r3, [r7, #30]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	441a      	add	r2, r3
 8005254:	2301      	movs	r3, #1
 8005256:	47a0      	blx	r4
 8005258:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295
 8005264:	e013      	b.n	800528e <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8005266:	8bfb      	ldrh	r3, [r7, #30]
 8005268:	3301      	adds	r3, #1
 800526a:	83fb      	strh	r3, [r7, #30]
 800526c:	8bfa      	ldrh	r2, [r7, #30]
 800526e:	893b      	ldrh	r3, [r7, #8]
 8005270:	429a      	cmp	r2, r3
 8005272:	d3e2      	bcc.n	800523a <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	e00a      	b.n	800528e <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	691c      	ldr	r4, [r3, #16]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	7b1b      	ldrb	r3, [r3, #12]
 8005280:	b298      	uxth	r0, r3
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	b299      	uxth	r1, r3
 8005286:	893b      	ldrh	r3, [r7, #8]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	47a0      	blx	r4
 800528c:	4603      	mov	r3, r0
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd90      	pop	{r4, r7, pc}

08005296 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005296:	b590      	push	{r4, r7, lr}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	461a      	mov	r2, r3
 80052a2:	460b      	mov	r3, r1
 80052a4:	72fb      	strb	r3, [r7, #11]
 80052a6:	4613      	mov	r3, r2
 80052a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685c      	ldr	r4, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68d8      	ldr	r0, [r3, #12]
 80052b2:	893b      	ldrh	r3, [r7, #8]
 80052b4:	7af9      	ldrb	r1, [r7, #11]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	47a0      	blx	r4
 80052ba:	6178      	str	r0, [r7, #20]

  return ret;
 80052bc:	697b      	ldr	r3, [r7, #20]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd90      	pop	{r4, r7, pc}

080052c6 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80052c6:	b590      	push	{r4, r7, lr}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	461a      	mov	r2, r3
 80052d2:	460b      	mov	r3, r1
 80052d4:	72fb      	strb	r3, [r7, #11]
 80052d6:	4613      	mov	r3, r2
 80052d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681c      	ldr	r4, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68d8      	ldr	r0, [r3, #12]
 80052e2:	893b      	ldrh	r3, [r7, #8]
 80052e4:	7af9      	ldrb	r1, [r7, #11]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	47a0      	blx	r4
 80052ea:	6178      	str	r0, [r7, #20]

  return ret;
 80052ec:	697b      	ldr	r3, [r7, #20]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd90      	pop	{r4, r7, pc}
	...

080052f8 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800530a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005324 <lps22hb_from_lsb_to_hpa+0x2c>
 800530e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005312:	eef0 7a66 	vmov.f32	s15, s13
}
 8005316:	eeb0 0a67 	vmov.f32	s0, s15
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	49800000 	.word	0x49800000

08005328 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005334:	f107 0208 	add.w	r2, r7, #8
 8005338:	2301      	movs	r3, #1
 800533a:	2110      	movs	r1, #16
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff ffaa 	bl	8005296 <lps22hb_read_reg>
 8005342:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10f      	bne.n	800536a <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	b2da      	uxtb	r2, r3
 8005352:	7a3b      	ldrb	r3, [r7, #8]
 8005354:	f362 0341 	bfi	r3, r2, #1, #1
 8005358:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800535a:	f107 0208 	add.w	r2, r7, #8
 800535e:	2301      	movs	r3, #1
 8005360:	2110      	movs	r1, #16
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff ffaf 	bl	80052c6 <lps22hb_write_reg>
 8005368:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005380:	f107 0208 	add.w	r2, r7, #8
 8005384:	2301      	movs	r3, #1
 8005386:	2110      	movs	r1, #16
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff84 	bl	8005296 <lps22hb_read_reg>
 800538e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	b2da      	uxtb	r2, r3
 800539e:	7a3b      	ldrb	r3, [r7, #8]
 80053a0:	f362 0383 	bfi	r3, r2, #2, #2
 80053a4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053a6:	f107 0208 	add.w	r2, r7, #8
 80053aa:	2301      	movs	r3, #1
 80053ac:	2110      	movs	r1, #16
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff ff89 	bl	80052c6 <lps22hb_write_reg>
 80053b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053b6:	68fb      	ldr	r3, [r7, #12]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053cc:	f107 0208 	add.w	r2, r7, #8
 80053d0:	2301      	movs	r3, #1
 80053d2:	2110      	movs	r1, #16
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ff5e 	bl	8005296 <lps22hb_read_reg>
 80053da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10f      	bne.n	8005402 <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	7a3b      	ldrb	r3, [r7, #8]
 80053ec:	f362 1306 	bfi	r3, r2, #4, #3
 80053f0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053f2:	f107 0208 	add.w	r2, r7, #8
 80053f6:	2301      	movs	r3, #1
 80053f8:	2110      	movs	r1, #16
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff ff63 	bl	80052c6 <lps22hb_write_reg>
 8005400:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005402:	68fb      	ldr	r3, [r7, #12]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8005416:	f107 0208 	add.w	r2, r7, #8
 800541a:	2303      	movs	r3, #3
 800541c:	2128      	movs	r1, #40	; 0x28
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff ff39 	bl	8005296 <lps22hb_read_reg>
 8005424:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005426:	7abb      	ldrb	r3, [r7, #10]
 8005428:	461a      	mov	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	7a7a      	ldrb	r2, [r7, #9]
 8005436:	441a      	add	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	7a3a      	ldrb	r2, [r7, #8]
 8005444:	441a      	add	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	601a      	str	r2, [r3, #0]

  return ret;
 8005454:	68fb      	ldr	r3, [r7, #12]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 800546a:	f107 0208 	add.w	r2, r7, #8
 800546e:	2301      	movs	r3, #1
 8005470:	211a      	movs	r1, #26
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff ff0f 	bl	8005296 <lps22hb_read_reg>
 8005478:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	7a3b      	ldrb	r3, [r7, #8]
 800548a:	f362 0300 	bfi	r3, r2, #0, #1
 800548e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8005490:	f107 0208 	add.w	r2, r7, #8
 8005494:	2301      	movs	r3, #1
 8005496:	211a      	movs	r1, #26
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ff14 	bl	80052c6 <lps22hb_write_reg>
 800549e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054a0:	68fb      	ldr	r3, [r7, #12]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80054b6:	f107 0208 	add.w	r2, r7, #8
 80054ba:	2301      	movs	r3, #1
 80054bc:	2111      	movs	r1, #17
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff fee9 	bl	8005296 <lps22hb_read_reg>
 80054c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10f      	bne.n	80054ec <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	7a3b      	ldrb	r3, [r7, #8]
 80054d6:	f362 1304 	bfi	r3, r2, #4, #1
 80054da:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80054dc:	f107 0208 	add.w	r2, r7, #8
 80054e0:	2301      	movs	r3, #1
 80054e2:	2111      	movs	r1, #17
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff feee 	bl	80052c6 <lps22hb_write_reg>
 80054ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800550c:	f04f 33ff 	mov.w	r3, #4294967295
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e051      	b.n	80055b8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	7b1a      	ldrb	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695a      	ldr	r2, [r3, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8005550:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8005556:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 800556e:	f04f 33ff 	mov.w	r3, #4294967295
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e020      	b.n	80055b8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4798      	blx	r3
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e016      	b.n	80055b8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d112      	bne.n	80055b8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10d      	bne.n	80055b8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800559c:	2301      	movs	r3, #1
 800559e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80055a0:	7afb      	ldrb	r3, [r7, #11]
 80055a2:	461a      	mov	r2, r3
 80055a4:	2123      	movs	r1, #35	; 0x23
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f97b 	bl	80058a2 <LSM303AGR_ACC_Write_Reg>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 80055b2:	f04f 33ff 	mov.w	r3, #4294967295
 80055b6:	e000      	b.n	80055ba <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 80055b8:	68fb      	ldr	r3, [r7, #12]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	08005cbd 	.word	0x08005cbd
 80055c8:	08005d1f 	.word	0x08005d1f

080055cc <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3320      	adds	r3, #32
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fd1a 	bl	8006014 <lsm303agr_xl_block_data_update_set>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	e02c      	b.n	8005646 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3320      	adds	r3, #32
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fe62 	bl	80062bc <lsm303agr_xl_fifo_mode_set>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	e020      	b.n	8005646 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2205      	movs	r2, #5
 8005608:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3320      	adds	r3, #32
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fc7a 	bl	8005f0c <lsm303agr_xl_data_rate_set>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800561e:	f04f 33ff 	mov.w	r3, #4294967295
 8005622:	e010      	b.n	8005646 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3320      	adds	r3, #32
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fc94 	bl	8005f58 <lsm303agr_xl_full_scale_set>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295
 800563a:	e004      	b.n	8005646 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e014      	b.n	800568e <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f103 0220 	add.w	r2, r3, #32
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f000 fc4a 	bl	8005f0c <lsm303agr_xl_data_rate_set>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	e004      	b.n	800568e <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3320      	adds	r3, #32
 80056a8:	f107 020b 	add.w	r2, r7, #11
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fbf8 	bl	8005ea4 <lsm303agr_xl_operating_mode_get>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	e031      	b.n	8005724 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80056c0:	7afb      	ldrb	r3, [r7, #11]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d01a      	beq.n	80056fc <LSM303AGR_ACC_GetSensitivity+0x66>
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	dc22      	bgt.n	8005710 <LSM303AGR_ACC_GetSensitivity+0x7a>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d00a      	beq.n	80056e8 <LSM303AGR_ACC_GetSensitivity+0x52>
 80056d2:	e01d      	b.n	8005710 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa1e 	bl	8005b18 <LSM303AGR_ACC_GetSensitivityHR>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01a      	beq.n	8005718 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295
 80056e6:	e01d      	b.n	8005724 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa5a 	bl	8005ba4 <LSM303AGR_ACC_GetSensitivityNM>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d012      	beq.n	800571c <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295
 80056fa:	e013      	b.n	8005724 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa96 	bl	8005c30 <LSM303AGR_ACC_GetSensitivityLP>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	e009      	b.n	8005724 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8005710:	f04f 33ff 	mov.w	r3, #4294967295
 8005714:	60fb      	str	r3, [r7, #12]
      break;
 8005716:	e004      	b.n	8005722 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005718:	bf00      	nop
 800571a:	e002      	b.n	8005722 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005720:	bf00      	nop
  }

  return ret;
 8005722:	68fb      	ldr	r3, [r7, #12]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8005736:	2301      	movs	r3, #1
 8005738:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3320      	adds	r3, #32
 8005742:	f107 020f 	add.w	r2, r7, #15
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fbab 	bl	8005ea4 <lsm303agr_xl_operating_mode_get>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	e04a      	b.n	80057f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d00c      	beq.n	800577a <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8005760:	2b02      	cmp	r3, #2
 8005762:	dc0e      	bgt.n	8005782 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8005768:	2b01      	cmp	r3, #1
 800576a:	d003      	beq.n	8005774 <LSM303AGR_ACC_GetAxesRaw+0x48>
 800576c:	e009      	b.n	8005782 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800576e:	2310      	movs	r3, #16
 8005770:	83fb      	strh	r3, [r7, #30]
      break;
 8005772:	e00a      	b.n	800578a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8005774:	2340      	movs	r3, #64	; 0x40
 8005776:	83fb      	strh	r3, [r7, #30]
      break;
 8005778:	e007      	b.n	800578a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800577a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800577e:	83fb      	strh	r3, [r7, #30]
      break;
 8005780:	e003      	b.n	800578a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8005782:	f04f 33ff 	mov.w	r3, #4294967295
 8005786:	61bb      	str	r3, [r7, #24]
      break;
 8005788:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d101      	bne.n	8005796 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	e02c      	b.n	80057f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3320      	adds	r3, #32
 800579a:	f107 0210 	add.w	r2, r7, #16
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fc5d 	bl	8006060 <lsm303agr_acceleration_raw_get>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	e01e      	b.n	80057f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80057b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80057c0:	b21a      	sxth	r2, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80057c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80057d4:	b21a      	sxth	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80057da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057de:	461a      	mov	r2, r3
 80057e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80057e8:	b21a      	sxth	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	809a      	strh	r2, [r3, #4]

  return ret;
 80057ee:	69bb      	ldr	r3, [r7, #24]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8005808:	f107 0310 	add.w	r3, r7, #16
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff ff8c 	bl	800572c <LSM303AGR_ACC_GetAxesRaw>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800581a:	f04f 33ff 	mov.w	r3, #4294967295
 800581e:	e03c      	b.n	800589a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff35 	bl	8005696 <LSM303AGR_ACC_GetSensitivity>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	e030      	b.n	800589a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005838:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800583c:	ee07 3a90 	vmov	s15, r3
 8005840:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005844:	edd7 7a03 	vldr	s15, [r7, #12]
 8005848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005850:	ee17 2a90 	vmov	r2, s15
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005858:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005864:	edd7 7a03 	vldr	s15, [r7, #12]
 8005868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005870:	ee17 2a90 	vmov	r2, s15
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005878:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800587c:	ee07 3a90 	vmov	s15, r3
 8005880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005884:	edd7 7a03 	vldr	s15, [r7, #12]
 8005888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005890:	ee17 2a90 	vmov	r2, s15
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	70fb      	strb	r3, [r7, #3]
 80058ae:	4613      	mov	r3, r2
 80058b0:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f103 0020 	add.w	r0, r3, #32
 80058b8:	1cba      	adds	r2, r7, #2
 80058ba:	78f9      	ldrb	r1, [r7, #3]
 80058bc:	2301      	movs	r3, #1
 80058be:	f000 fad9 	bl	8005e74 <lsm303agr_write_reg>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	e000      	b.n	80058d0 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d103      	bne.n	80058f4 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80058ec:	f04f 33ff 	mov.w	r3, #4294967295
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e04b      	b.n	800598c <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	7b1a      	ldrb	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8005930:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8005936:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e01e      	b.n	800598c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4798      	blx	r3
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e014      	b.n	800598c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3320      	adds	r3, #32
 8005978:	2101      	movs	r1, #1
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fcc4 	bl	8006308 <lsm303agr_mag_i2c_interface_set>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	e000      	b.n	800598e <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 800598c:	68fb      	ldr	r3, [r7, #12]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	08005d81 	.word	0x08005d81
 800599c:	08005de3 	.word	0x08005de3

080059a0 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3320      	adds	r3, #32
 80059ac:	2101      	movs	r1, #1
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fbed 	bl	800618e <lsm303agr_mag_block_data_update_set>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	e028      	b.n	8005a12 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3320      	adds	r3, #32
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fb95 	bl	80060f6 <lsm303agr_mag_operating_mode_set>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	e01c      	b.n	8005a12 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3320      	adds	r3, #32
 80059dc:	2103      	movs	r1, #3
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fbaf 	bl	8006142 <lsm303agr_mag_data_rate_set>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295
 80059ee:	e010      	b.n	8005a12 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3320      	adds	r3, #32
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fc3a 	bl	8006270 <lsm303agr_mag_self_test_set>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	e004      	b.n	8005a12 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e010      	b.n	8005a52 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3320      	adds	r3, #32
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb5d 	bl	80060f6 <lsm303agr_mag_operating_mode_set>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295
 8005a46:	e004      	b.n	8005a52 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005a6a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b086      	sub	sp, #24
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3320      	adds	r3, #32
 8005a88:	f107 0210 	add.w	r2, r7, #16
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fba3 	bl	80061da <lsm303agr_magnetic_raw_get>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	e036      	b.n	8005b0e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005aa0:	f107 030c 	add.w	r3, r7, #12
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ffd7 	bl	8005a5a <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005aac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ab0:	ee07 3a90 	vmov	s15, r3
 8005ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ac4:	ee17 2a90 	vmov	r2, s15
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005acc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ae4:	ee17 2a90 	vmov	r2, s15
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005aec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005af8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b04:	ee17 2a90 	vmov	r2, s15
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3320      	adds	r3, #32
 8005b2a:	f107 020b 	add.w	r2, r7, #11
 8005b2e:	4611      	mov	r1, r2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fa37 	bl	8005fa4 <lsm303agr_xl_full_scale_get>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	e023      	b.n	8005b8a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005b42:	7afb      	ldrb	r3, [r7, #11]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d81b      	bhi.n	8005b80 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b69 	.word	0x08005b69
 8005b58:	08005b71 	.word	0x08005b71
 8005b5c:	08005b79 	.word	0x08005b79
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005b64:	601a      	str	r2, [r3, #0]
      break;
 8005b66:	e00f      	b.n	8005b88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	4a0b      	ldr	r2, [pc, #44]	; (8005b98 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005b6c:	601a      	str	r2, [r3, #0]
      break;
 8005b6e:	e00b      	b.n	8005b88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005b74:	601a      	str	r2, [r3, #0]
      break;
 8005b76:	e007      	b.n	8005b88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005b7c:	601a      	str	r2, [r3, #0]
      break;
 8005b7e:	e003      	b.n	8005b88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295
 8005b84:	60fb      	str	r3, [r7, #12]
      break;
 8005b86:	bf00      	nop
  }

  return ret;
 8005b88:	68fb      	ldr	r3, [r7, #12]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	3f7ae148 	.word	0x3f7ae148
 8005b98:	3ff9999a 	.word	0x3ff9999a
 8005b9c:	4079999a 	.word	0x4079999a
 8005ba0:	413b851f 	.word	0x413b851f

08005ba4 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3320      	adds	r3, #32
 8005bb6:	f107 020b 	add.w	r2, r7, #11
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f9f1 	bl	8005fa4 <lsm303agr_xl_full_scale_get>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bcc:	e023      	b.n	8005c16 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005bce:	7afb      	ldrb	r3, [r7, #11]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d81b      	bhi.n	8005c0c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005bed 	.word	0x08005bed
 8005be0:	08005bf5 	.word	0x08005bf5
 8005be4:	08005bfd 	.word	0x08005bfd
 8005be8:	08005c05 	.word	0x08005c05
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005bf0:	601a      	str	r2, [r3, #0]
      break;
 8005bf2:	e00f      	b.n	8005c14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4a0b      	ldr	r2, [pc, #44]	; (8005c24 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005bf8:	601a      	str	r2, [r3, #0]
      break;
 8005bfa:	e00b      	b.n	8005c14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005c00:	601a      	str	r2, [r3, #0]
      break;
 8005c02:	e007      	b.n	8005c14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005c08:	601a      	str	r2, [r3, #0]
      break;
 8005c0a:	e003      	b.n	8005c14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c10:	60fb      	str	r3, [r7, #12]
      break;
 8005c12:	bf00      	nop
  }

  return ret;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	4079999a 	.word	0x4079999a
 8005c24:	40fa3d71 	.word	0x40fa3d71
 8005c28:	417a147b 	.word	0x417a147b
 8005c2c:	423b999a 	.word	0x423b999a

08005c30 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3320      	adds	r3, #32
 8005c42:	f107 020b 	add.w	r2, r7, #11
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f9ab 	bl	8005fa4 <lsm303agr_xl_full_scale_get>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	e023      	b.n	8005ca2 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d81b      	bhi.n	8005c98 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c79 	.word	0x08005c79
 8005c6c:	08005c81 	.word	0x08005c81
 8005c70:	08005c89 	.word	0x08005c89
 8005c74:	08005c91 	.word	0x08005c91
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005c7c:	601a      	str	r2, [r3, #0]
      break;
 8005c7e:	e00f      	b.n	8005ca0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	4a0b      	ldr	r2, [pc, #44]	; (8005cb0 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005c84:	601a      	str	r2, [r3, #0]
      break;
 8005c86:	e00b      	b.n	8005ca0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005c8c:	601a      	str	r2, [r3, #0]
      break;
 8005c8e:	e007      	b.n	8005ca0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005c94:	601a      	str	r2, [r3, #0]
      break;
 8005c96:	e003      	b.n	8005ca0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005c98:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9c:	60fb      	str	r3, [r7, #12]
      break;
 8005c9e:	bf00      	nop
  }

  return ret;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	417a147b 	.word	0x417a147b
 8005cb0:	41fa147b 	.word	0x41fa147b
 8005cb4:	427a147b 	.word	0x427a147b
 8005cb8:	433b947b 	.word	0x433b947b

08005cbc <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	607a      	str	r2, [r7, #4]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	460b      	mov	r3, r1
 8005cca:	72fb      	strb	r3, [r7, #11]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10e      	bne.n	8005cfa <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	695c      	ldr	r4, [r3, #20]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	7b1b      	ldrb	r3, [r3, #12]
 8005ce4:	b298      	uxth	r0, r3
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	b299      	uxth	r1, r3
 8005cf0:	893b      	ldrh	r3, [r7, #8]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	47a0      	blx	r4
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	e00d      	b.n	8005d16 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	695c      	ldr	r4, [r3, #20]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	7b1b      	ldrb	r3, [r3, #12]
 8005d02:	b298      	uxth	r0, r3
 8005d04:	7afb      	ldrb	r3, [r7, #11]
 8005d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	b299      	uxth	r1, r3
 8005d0e:	893b      	ldrh	r3, [r7, #8]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	47a0      	blx	r4
 8005d14:	4603      	mov	r3, r0
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}

08005d1e <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d1e:	b590      	push	{r4, r7, lr}
 8005d20:	b087      	sub	sp, #28
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	72fb      	strb	r3, [r7, #11]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10e      	bne.n	8005d5c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	691c      	ldr	r4, [r3, #16]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	7b1b      	ldrb	r3, [r3, #12]
 8005d46:	b298      	uxth	r0, r3
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	b299      	uxth	r1, r3
 8005d52:	893b      	ldrh	r3, [r7, #8]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	47a0      	blx	r4
 8005d58:	4603      	mov	r3, r0
 8005d5a:	e00d      	b.n	8005d78 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	691c      	ldr	r4, [r3, #16]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	7b1b      	ldrb	r3, [r3, #12]
 8005d64:	b298      	uxth	r0, r3
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	b299      	uxth	r1, r3
 8005d70:	893b      	ldrh	r3, [r7, #8]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	47a0      	blx	r4
 8005d76:	4603      	mov	r3, r0
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd90      	pop	{r4, r7, pc}

08005d80 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	72fb      	strb	r3, [r7, #11]
 8005d90:	4613      	mov	r3, r2
 8005d92:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10e      	bne.n	8005dbe <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	695c      	ldr	r4, [r3, #20]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	7b1b      	ldrb	r3, [r3, #12]
 8005da8:	b298      	uxth	r0, r3
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	b299      	uxth	r1, r3
 8005db4:	893b      	ldrh	r3, [r7, #8]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	47a0      	blx	r4
 8005dba:	4603      	mov	r3, r0
 8005dbc:	e00d      	b.n	8005dda <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	695c      	ldr	r4, [r3, #20]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	7b1b      	ldrb	r3, [r3, #12]
 8005dc6:	b298      	uxth	r0, r3
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	b299      	uxth	r1, r3
 8005dd2:	893b      	ldrh	r3, [r7, #8]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	47a0      	blx	r4
 8005dd8:	4603      	mov	r3, r0
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd90      	pop	{r4, r7, pc}

08005de2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005de2:	b590      	push	{r4, r7, lr}
 8005de4:	b087      	sub	sp, #28
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	461a      	mov	r2, r3
 8005dee:	460b      	mov	r3, r1
 8005df0:	72fb      	strb	r3, [r7, #11]
 8005df2:	4613      	mov	r3, r2
 8005df4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10e      	bne.n	8005e20 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	691c      	ldr	r4, [r3, #16]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	7b1b      	ldrb	r3, [r3, #12]
 8005e0a:	b298      	uxth	r0, r3
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	b299      	uxth	r1, r3
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	47a0      	blx	r4
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	e00d      	b.n	8005e3c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	691c      	ldr	r4, [r3, #16]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	7b1b      	ldrb	r3, [r3, #12]
 8005e28:	b298      	uxth	r0, r3
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	b299      	uxth	r1, r3
 8005e34:	893b      	ldrh	r3, [r7, #8]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	47a0      	blx	r4
 8005e3a:	4603      	mov	r3, r0
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd90      	pop	{r4, r7, pc}

08005e44 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	460b      	mov	r3, r1
 8005e52:	72fb      	strb	r3, [r7, #11]
 8005e54:	4613      	mov	r3, r2
 8005e56:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685c      	ldr	r4, [r3, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68d8      	ldr	r0, [r3, #12]
 8005e60:	893b      	ldrh	r3, [r7, #8]
 8005e62:	7af9      	ldrb	r1, [r7, #11]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	47a0      	blx	r4
 8005e68:	6178      	str	r0, [r7, #20]

  return ret;
 8005e6a:	697b      	ldr	r3, [r7, #20]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd90      	pop	{r4, r7, pc}

08005e74 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	460b      	mov	r3, r1
 8005e82:	72fb      	strb	r3, [r7, #11]
 8005e84:	4613      	mov	r3, r2
 8005e86:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681c      	ldr	r4, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68d8      	ldr	r0, [r3, #12]
 8005e90:	893b      	ldrh	r3, [r7, #8]
 8005e92:	7af9      	ldrb	r1, [r7, #11]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	47a0      	blx	r4
 8005e98:	6178      	str	r0, [r7, #20]

  return ret;
 8005e9a:	697b      	ldr	r3, [r7, #20]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd90      	pop	{r4, r7, pc}

08005ea4 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005eae:	f107 020c 	add.w	r2, r7, #12
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	2120      	movs	r1, #32
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ffc4 	bl	8005e44 <lsm303agr_read_reg>
 8005ebc:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d107      	bne.n	8005ed4 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005ec4:	f107 0210 	add.w	r2, r7, #16
 8005ec8:	2301      	movs	r3, #1
 8005eca:	2123      	movs	r1, #35	; 0x23
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ffb9 	bl	8005e44 <lsm303agr_read_reg>
 8005ed2:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8005ed4:	7b3b      	ldrb	r3, [r7, #12]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e00c      	b.n	8005f02 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8005ee8:	7c3b      	ldrb	r3, [r7, #16]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005f02:	697b      	ldr	r3, [r7, #20]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005f18:	f107 0208 	add.w	r2, r7, #8
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	2120      	movs	r1, #32
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff8f 	bl	8005e44 <lsm303agr_read_reg>
 8005f26:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	7a3b      	ldrb	r3, [r7, #8]
 8005f38:	f362 1307 	bfi	r3, r2, #4, #4
 8005f3c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005f3e:	f107 0208 	add.w	r2, r7, #8
 8005f42:	2301      	movs	r3, #1
 8005f44:	2120      	movs	r1, #32
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff94 	bl	8005e74 <lsm303agr_write_reg>
 8005f4c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005f64:	f107 0208 	add.w	r2, r7, #8
 8005f68:	2301      	movs	r3, #1
 8005f6a:	2123      	movs	r1, #35	; 0x23
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ff69 	bl	8005e44 <lsm303agr_read_reg>
 8005f72:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10f      	bne.n	8005f9a <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	7a3b      	ldrb	r3, [r7, #8]
 8005f84:	f362 1305 	bfi	r3, r2, #4, #2
 8005f88:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005f8a:	f107 0208 	add.w	r2, r7, #8
 8005f8e:	2301      	movs	r3, #1
 8005f90:	2123      	movs	r1, #35	; 0x23
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ff6e 	bl	8005e74 <lsm303agr_write_reg>
 8005f98:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005fae:	f107 0208 	add.w	r2, r7, #8
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	2123      	movs	r1, #35	; 0x23
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff44 	bl	8005e44 <lsm303agr_read_reg>
 8005fbc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8005fbe:	7a3b      	ldrb	r3, [r7, #8]
 8005fc0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d81a      	bhi.n	8006000 <lsm303agr_xl_full_scale_get+0x5c>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <lsm303agr_xl_full_scale_get+0x2c>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08005fe9 	.word	0x08005fe9
 8005fd8:	08005ff1 	.word	0x08005ff1
 8005fdc:	08005ff9 	.word	0x08005ff9
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
      break;
 8005fe6:	e00f      	b.n	8006008 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
      break;
 8005fee:	e00b      	b.n	8006008 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	701a      	strb	r2, [r3, #0]
      break;
 8005ff6:	e007      	b.n	8006008 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	701a      	strb	r2, [r3, #0]
      break;
 8005ffe:	e003      	b.n	8006008 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
      break;
 8006006:	bf00      	nop
  }

  return ret;
 8006008:	68fb      	ldr	r3, [r7, #12]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop

08006014 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006020:	f107 0208 	add.w	r2, r7, #8
 8006024:	2301      	movs	r3, #1
 8006026:	2123      	movs	r1, #35	; 0x23
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff0b 	bl	8005e44 <lsm303agr_read_reg>
 800602e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	b2da      	uxtb	r2, r3
 800603e:	7a3b      	ldrb	r3, [r7, #8]
 8006040:	f362 13c7 	bfi	r3, r2, #7, #1
 8006044:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006046:	f107 0208 	add.w	r2, r7, #8
 800604a:	2301      	movs	r3, #1
 800604c:	2123      	movs	r1, #35	; 0x23
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff10 	bl	8005e74 <lsm303agr_write_reg>
 8006054:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800606a:	f107 020c 	add.w	r2, r7, #12
 800606e:	2306      	movs	r3, #6
 8006070:	2128      	movs	r1, #40	; 0x28
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fee6 	bl	8005e44 <lsm303agr_read_reg>
 8006078:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800607a:	7b7b      	ldrb	r3, [r7, #13]
 800607c:	b21a      	sxth	r2, r3
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006088:	b29b      	uxth	r3, r3
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	b29a      	uxth	r2, r3
 800608e:	7b3b      	ldrb	r3, [r7, #12]
 8006090:	b29b      	uxth	r3, r3
 8006092:	4413      	add	r3, r2
 8006094:	b29b      	uxth	r3, r3
 8006096:	b21a      	sxth	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800609c:	7bfa      	ldrb	r2, [r7, #15]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	3302      	adds	r3, #2
 80060a2:	b212      	sxth	r2, r2
 80060a4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	3302      	adds	r3, #2
 80060aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	4413      	add	r3, r2
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	3302      	adds	r3, #2
 80060c0:	b212      	sxth	r2, r2
 80060c2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80060c4:	7c7a      	ldrb	r2, [r7, #17]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	3304      	adds	r3, #4
 80060ca:	b212      	sxth	r2, r2
 80060cc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	b29a      	uxth	r2, r3
 80060dc:	7c3b      	ldrb	r3, [r7, #16]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	4413      	add	r3, r2
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	3304      	adds	r3, #4
 80060e8:	b212      	sxth	r2, r2
 80060ea:	801a      	strh	r2, [r3, #0]

  return ret;
 80060ec:	697b      	ldr	r3, [r7, #20]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006102:	f107 0208 	add.w	r2, r7, #8
 8006106:	2301      	movs	r3, #1
 8006108:	2160      	movs	r1, #96	; 0x60
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fe9a 	bl	8005e44 <lsm303agr_read_reg>
 8006110:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	b2da      	uxtb	r2, r3
 8006120:	7a3b      	ldrb	r3, [r7, #8]
 8006122:	f362 0301 	bfi	r3, r2, #0, #2
 8006126:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006128:	f107 0208 	add.w	r2, r7, #8
 800612c:	2301      	movs	r3, #1
 800612e:	2160      	movs	r1, #96	; 0x60
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fe9f 	bl	8005e74 <lsm303agr_write_reg>
 8006136:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8006138:	68fb      	ldr	r3, [r7, #12]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800614e:	f107 0208 	add.w	r2, r7, #8
 8006152:	2301      	movs	r3, #1
 8006154:	2160      	movs	r1, #96	; 0x60
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fe74 	bl	8005e44 <lsm303agr_read_reg>
 800615c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	b2da      	uxtb	r2, r3
 800616c:	7a3b      	ldrb	r3, [r7, #8]
 800616e:	f362 0383 	bfi	r3, r2, #2, #2
 8006172:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006174:	f107 0208 	add.w	r2, r7, #8
 8006178:	2301      	movs	r3, #1
 800617a:	2160      	movs	r1, #96	; 0x60
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fe79 	bl	8005e74 <lsm303agr_write_reg>
 8006182:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8006184:	68fb      	ldr	r3, [r7, #12]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800619a:	f107 0208 	add.w	r2, r7, #8
 800619e:	2301      	movs	r3, #1
 80061a0:	2162      	movs	r1, #98	; 0x62
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fe4e 	bl	8005e44 <lsm303agr_read_reg>
 80061a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10f      	bne.n	80061d0 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	7a3b      	ldrb	r3, [r7, #8]
 80061ba:	f362 1304 	bfi	r3, r2, #4, #1
 80061be:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80061c0:	f107 0208 	add.w	r2, r7, #8
 80061c4:	2301      	movs	r3, #1
 80061c6:	2162      	movs	r1, #98	; 0x62
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fe53 	bl	8005e74 <lsm303agr_write_reg>
 80061ce:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80061d0:	68fb      	ldr	r3, [r7, #12]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80061e4:	f107 020c 	add.w	r2, r7, #12
 80061e8:	2306      	movs	r3, #6
 80061ea:	2168      	movs	r1, #104	; 0x68
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fe29 	bl	8005e44 <lsm303agr_read_reg>
 80061f2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80061f4:	7b7b      	ldrb	r3, [r7, #13]
 80061f6:	b21a      	sxth	r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006202:	b29b      	uxth	r3, r3
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	b29a      	uxth	r2, r3
 8006208:	7b3b      	ldrb	r3, [r7, #12]
 800620a:	b29b      	uxth	r3, r3
 800620c:	4413      	add	r3, r2
 800620e:	b29b      	uxth	r3, r3
 8006210:	b21a      	sxth	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006216:	7bfa      	ldrb	r2, [r7, #15]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	3302      	adds	r3, #2
 800621c:	b212      	sxth	r2, r2
 800621e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	3302      	adds	r3, #2
 8006224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006228:	b29b      	uxth	r3, r3
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	b29a      	uxth	r2, r3
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	b29b      	uxth	r3, r3
 8006232:	4413      	add	r3, r2
 8006234:	b29a      	uxth	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	3302      	adds	r3, #2
 800623a:	b212      	sxth	r2, r2
 800623c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800623e:	7c7a      	ldrb	r2, [r7, #17]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	b212      	sxth	r2, r2
 8006246:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	3304      	adds	r3, #4
 800624c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006250:	b29b      	uxth	r3, r3
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	b29a      	uxth	r2, r3
 8006256:	7c3b      	ldrb	r3, [r7, #16]
 8006258:	b29b      	uxth	r3, r3
 800625a:	4413      	add	r3, r2
 800625c:	b29a      	uxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3304      	adds	r3, #4
 8006262:	b212      	sxth	r2, r2
 8006264:	801a      	strh	r2, [r3, #0]

  return ret;
 8006266:	697b      	ldr	r3, [r7, #20]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800627c:	f107 0208 	add.w	r2, r7, #8
 8006280:	2301      	movs	r3, #1
 8006282:	2162      	movs	r1, #98	; 0x62
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fddd 	bl	8005e44 <lsm303agr_read_reg>
 800628a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	b2da      	uxtb	r2, r3
 800629a:	7a3b      	ldrb	r3, [r7, #8]
 800629c:	f362 0341 	bfi	r3, r2, #1, #1
 80062a0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80062a2:	f107 0208 	add.w	r2, r7, #8
 80062a6:	2301      	movs	r3, #1
 80062a8:	2162      	movs	r1, #98	; 0x62
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff fde2 	bl	8005e74 <lsm303agr_write_reg>
 80062b0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80062c8:	f107 0208 	add.w	r2, r7, #8
 80062cc:	2301      	movs	r3, #1
 80062ce:	212e      	movs	r1, #46	; 0x2e
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fdb7 	bl	8005e44 <lsm303agr_read_reg>
 80062d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10f      	bne.n	80062fe <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	7a3b      	ldrb	r3, [r7, #8]
 80062e8:	f362 1387 	bfi	r3, r2, #6, #2
 80062ec:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80062ee:	f107 0208 	add.w	r2, r7, #8
 80062f2:	2301      	movs	r3, #1
 80062f4:	212e      	movs	r1, #46	; 0x2e
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fdbc 	bl	8005e74 <lsm303agr_write_reg>
 80062fc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80062fe:	68fb      	ldr	r3, [r7, #12]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006314:	f107 0208 	add.w	r2, r7, #8
 8006318:	2301      	movs	r3, #1
 800631a:	2162      	movs	r1, #98	; 0x62
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff fd91 	bl	8005e44 <lsm303agr_read_reg>
 8006322:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10f      	bne.n	800634a <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	7a3b      	ldrb	r3, [r7, #8]
 8006334:	f362 1345 	bfi	r3, r2, #5, #1
 8006338:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800633a:	f107 0208 	add.w	r2, r7, #8
 800633e:	2301      	movs	r3, #1
 8006340:	2162      	movs	r1, #98	; 0x62
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fd96 	bl	8005e74 <lsm303agr_write_reg>
 8006348:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e051      	b.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	7b1a      	ldrb	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <LSM6DSL_RegisterBusIO+0xcc>)
 80063ac:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <LSM6DSL_RegisterBusIO+0xd0>)
 80063b2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e020      	b.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4798      	blx	r3
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e016      	b.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d112      	bne.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10d      	bne.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80063f8:	230c      	movs	r3, #12
 80063fa:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	461a      	mov	r2, r3
 8006400:	2112      	movs	r1, #18
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f968 	bl	80066d8 <LSM6DSL_Write_Reg>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	0800670f 	.word	0x0800670f
 8006424:	08006745 	.word	0x08006745

08006428 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3320      	adds	r3, #32
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fb1b 	bl	8006a72 <lsm6dsl_auto_increment_set>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295
 8006446:	e054      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3320      	adds	r3, #32
 800644c:	2101      	movs	r1, #1
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fa9e 	bl	8006990 <lsm6dsl_block_data_update_set>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800645a:	f04f 33ff 	mov.w	r3, #4294967295
 800645e:	e048      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3320      	adds	r3, #32
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb29 	bl	8006abe <lsm6dsl_fifo_mode_set>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	e03c      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2204      	movs	r2, #4
 800647c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3320      	adds	r3, #32
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f9cd 	bl	8006826 <lsm6dsl_xl_data_rate_set>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295
 8006496:	e02c      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3320      	adds	r3, #32
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f99b 	bl	80067da <lsm6dsl_xl_full_scale_set>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295
 80064ae:	e020      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2204      	movs	r2, #4
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3320      	adds	r3, #32
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fa40 	bl	8006944 <lsm6dsl_gy_data_rate_set>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80064ca:	f04f 33ff 	mov.w	r3, #4294967295
 80064ce:	e010      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3320      	adds	r3, #32
 80064d4:	2106      	movs	r1, #6
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f9cb 	bl	8006872 <lsm6dsl_gy_full_scale_set>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	e004      	b.n	80064f2 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e014      	b.n	800653a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f103 0220 	add.w	r2, r3, #32
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f000 f981 	bl	8006826 <lsm6dsl_xl_data_rate_set>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	e004      	b.n	800653a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e014      	b.n	8006582 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0220 	add.w	r2, r3, #32
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f000 f9ec 	bl	8006944 <lsm6dsl_gy_data_rate_set>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006572:	f04f 33ff 	mov.w	r3, #4294967295
 8006576:	e004      	b.n	8006582 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3320      	adds	r3, #32
 800659e:	f107 020b 	add.w	r2, r7, #11
 80065a2:	4611      	mov	r1, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f98b 	bl	80068c0 <lsm6dsl_gy_full_scale_get>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80065b0:	f04f 33ff 	mov.w	r3, #4294967295
 80065b4:	e02d      	b.n	8006612 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	2b06      	cmp	r3, #6
 80065ba:	d825      	bhi.n	8006608 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80065bc:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065e1 	.word	0x080065e1
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	08006609 	.word	0x08006609
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	08006609 	.word	0x08006609
 80065dc:	08006601 	.word	0x08006601
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4a0e      	ldr	r2, [pc, #56]	; (800661c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80065e4:	601a      	str	r2, [r3, #0]
      break;
 80065e6:	e013      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80065ec:	601a      	str	r2, [r3, #0]
      break;
 80065ee:	e00f      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	4a0c      	ldr	r2, [pc, #48]	; (8006624 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80065f4:	601a      	str	r2, [r3, #0]
      break;
 80065f6:	e00b      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80065fc:	601a      	str	r2, [r3, #0]
      break;
 80065fe:	e007      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8006604:	601a      	str	r2, [r3, #0]
      break;
 8006606:	e003      	b.n	8006610 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	60fb      	str	r3, [r7, #12]
      break;
 800660e:	bf00      	nop
  }

  return ret;
 8006610:	68fb      	ldr	r3, [r7, #12]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	408c0000 	.word	0x408c0000
 8006620:	410c0000 	.word	0x410c0000
 8006624:	418c0000 	.word	0x418c0000
 8006628:	420c0000 	.word	0x420c0000
 800662c:	428c0000 	.word	0x428c0000

08006630 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3320      	adds	r3, #32
 800663e:	f107 0210 	add.w	r2, r7, #16
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f000 f9c9 	bl	80069dc <lsm6dsl_angular_rate_raw_get>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	e03c      	b.n	80066d0 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006656:	f107 030c 	add.w	r3, r7, #12
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff ff95 	bl	800658c <LSM6DSL_GYRO_GetSensitivity>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8006668:	f04f 33ff 	mov.w	r3, #4294967295
 800666c:	e030      	b.n	80066d0 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800666e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667a:	edd7 7a03 	vldr	s15, [r7, #12]
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006686:	ee17 2a90 	vmov	r2, s15
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800668e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800669a:	edd7 7a03 	vldr	s15, [r7, #12]
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066a6:	ee17 2a90 	vmov	r2, s15
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80066ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c6:	ee17 2a90 	vmov	r2, s15
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
 80066e4:	4613      	mov	r3, r2
 80066e6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f103 0020 	add.w	r0, r3, #32
 80066ee:	1cba      	adds	r2, r7, #2
 80066f0:	78f9      	ldrb	r1, [r7, #3]
 80066f2:	2301      	movs	r3, #1
 80066f4:	f000 f859 	bl	80067aa <lsm6dsl_write_reg>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	e000      	b.n	8006706 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800670e:	b590      	push	{r4, r7, lr}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	461a      	mov	r2, r3
 800671a:	460b      	mov	r3, r1
 800671c:	72fb      	strb	r3, [r7, #11]
 800671e:	4613      	mov	r3, r2
 8006720:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	695c      	ldr	r4, [r3, #20]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	7b1b      	ldrb	r3, [r3, #12]
 800672e:	b298      	uxth	r0, r3
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	b299      	uxth	r1, r3
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	47a0      	blx	r4
 800673a:	4603      	mov	r3, r0
}
 800673c:	4618      	mov	r0, r3
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd90      	pop	{r4, r7, pc}

08006744 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	461a      	mov	r2, r3
 8006750:	460b      	mov	r3, r1
 8006752:	72fb      	strb	r3, [r7, #11]
 8006754:	4613      	mov	r3, r2
 8006756:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	691c      	ldr	r4, [r3, #16]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	7b1b      	ldrb	r3, [r3, #12]
 8006764:	b298      	uxth	r0, r3
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	b299      	uxth	r1, r3
 800676a:	893b      	ldrh	r3, [r7, #8]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	47a0      	blx	r4
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd90      	pop	{r4, r7, pc}

0800677a <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800677a:	b590      	push	{r4, r7, lr}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	461a      	mov	r2, r3
 8006786:	460b      	mov	r3, r1
 8006788:	72fb      	strb	r3, [r7, #11]
 800678a:	4613      	mov	r3, r2
 800678c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685c      	ldr	r4, [r3, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68d8      	ldr	r0, [r3, #12]
 8006796:	893b      	ldrh	r3, [r7, #8]
 8006798:	7af9      	ldrb	r1, [r7, #11]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	47a0      	blx	r4
 800679e:	6178      	str	r0, [r7, #20]

  return ret;
 80067a0:	697b      	ldr	r3, [r7, #20]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd90      	pop	{r4, r7, pc}

080067aa <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80067aa:	b590      	push	{r4, r7, lr}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	461a      	mov	r2, r3
 80067b6:	460b      	mov	r3, r1
 80067b8:	72fb      	strb	r3, [r7, #11]
 80067ba:	4613      	mov	r3, r2
 80067bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681c      	ldr	r4, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68d8      	ldr	r0, [r3, #12]
 80067c6:	893b      	ldrh	r3, [r7, #8]
 80067c8:	7af9      	ldrb	r1, [r7, #11]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	47a0      	blx	r4
 80067ce:	6178      	str	r0, [r7, #20]

  return ret;
 80067d0:	697b      	ldr	r3, [r7, #20]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd90      	pop	{r4, r7, pc}

080067da <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80067e6:	f107 0208 	add.w	r2, r7, #8
 80067ea:	2301      	movs	r3, #1
 80067ec:	2110      	movs	r1, #16
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff ffc3 	bl	800677a <lsm6dsl_read_reg>
 80067f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10f      	bne.n	800681c <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	b2da      	uxtb	r2, r3
 8006804:	7a3b      	ldrb	r3, [r7, #8]
 8006806:	f362 0383 	bfi	r3, r2, #2, #2
 800680a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800680c:	f107 0208 	add.w	r2, r7, #8
 8006810:	2301      	movs	r3, #1
 8006812:	2110      	movs	r1, #16
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ffc8 	bl	80067aa <lsm6dsl_write_reg>
 800681a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800681c:	68fb      	ldr	r3, [r7, #12]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006832:	f107 0208 	add.w	r2, r7, #8
 8006836:	2301      	movs	r3, #1
 8006838:	2110      	movs	r1, #16
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff ff9d 	bl	800677a <lsm6dsl_read_reg>
 8006840:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10f      	bne.n	8006868 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	b2da      	uxtb	r2, r3
 8006850:	7a3b      	ldrb	r3, [r7, #8]
 8006852:	f362 1307 	bfi	r3, r2, #4, #4
 8006856:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006858:	f107 0208 	add.w	r2, r7, #8
 800685c:	2301      	movs	r3, #1
 800685e:	2110      	movs	r1, #16
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ffa2 	bl	80067aa <lsm6dsl_write_reg>
 8006866:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800687e:	f107 0208 	add.w	r2, r7, #8
 8006882:	2301      	movs	r3, #1
 8006884:	2111      	movs	r1, #17
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff ff77 	bl	800677a <lsm6dsl_read_reg>
 800688c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10f      	bne.n	80068b4 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	b2da      	uxtb	r2, r3
 800689c:	7a3b      	ldrb	r3, [r7, #8]
 800689e:	f362 0343 	bfi	r3, r2, #1, #3
 80068a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80068a4:	f107 0208 	add.w	r2, r7, #8
 80068a8:	2301      	movs	r3, #1
 80068aa:	2111      	movs	r1, #17
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ff7c 	bl	80067aa <lsm6dsl_write_reg>
 80068b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068b4:	68fb      	ldr	r3, [r7, #12]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80068ca:	f107 0208 	add.w	r2, r7, #8
 80068ce:	2301      	movs	r3, #1
 80068d0:	2111      	movs	r1, #17
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff ff51 	bl	800677a <lsm6dsl_read_reg>
 80068d8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 80068da:	7a3b      	ldrb	r3, [r7, #8]
 80068dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b06      	cmp	r3, #6
 80068e4:	d824      	bhi.n	8006930 <lsm6dsl_gy_full_scale_get+0x70>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <lsm6dsl_gy_full_scale_get+0x2c>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006909 	.word	0x08006909
 80068f0:	08006911 	.word	0x08006911
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006931 	.word	0x08006931
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006931 	.word	0x08006931
 8006904:	08006929 	.word	0x08006929
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
      break;
 800690e:	e013      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
      break;
 8006916:	e00f      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2202      	movs	r2, #2
 800691c:	701a      	strb	r2, [r3, #0]
      break;
 800691e:	e00b      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2204      	movs	r2, #4
 8006924:	701a      	strb	r2, [r3, #0]
      break;
 8006926:	e007      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2206      	movs	r2, #6
 800692c:	701a      	strb	r2, [r3, #0]
      break;
 800692e:	e003      	b.n	8006938 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2207      	movs	r2, #7
 8006934:	701a      	strb	r2, [r3, #0]
      break;
 8006936:	bf00      	nop
  }

  return ret;
 8006938:	68fb      	ldr	r3, [r7, #12]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop

08006944 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006950:	f107 0208 	add.w	r2, r7, #8
 8006954:	2301      	movs	r3, #1
 8006956:	2111      	movs	r1, #17
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff0e 	bl	800677a <lsm6dsl_read_reg>
 800695e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10f      	bne.n	8006986 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	b2da      	uxtb	r2, r3
 800696e:	7a3b      	ldrb	r3, [r7, #8]
 8006970:	f362 1307 	bfi	r3, r2, #4, #4
 8006974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006976:	f107 0208 	add.w	r2, r7, #8
 800697a:	2301      	movs	r3, #1
 800697c:	2111      	movs	r1, #17
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff ff13 	bl	80067aa <lsm6dsl_write_reg>
 8006984:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006986:	68fb      	ldr	r3, [r7, #12]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800699c:	f107 0208 	add.w	r2, r7, #8
 80069a0:	2301      	movs	r3, #1
 80069a2:	2112      	movs	r1, #18
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff fee8 	bl	800677a <lsm6dsl_read_reg>
 80069aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10f      	bne.n	80069d2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	7a3b      	ldrb	r3, [r7, #8]
 80069bc:	f362 1386 	bfi	r3, r2, #6, #1
 80069c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80069c2:	f107 0208 	add.w	r2, r7, #8
 80069c6:	2301      	movs	r3, #1
 80069c8:	2112      	movs	r1, #18
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff feed 	bl	80067aa <lsm6dsl_write_reg>
 80069d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80069e6:	f107 020c 	add.w	r2, r7, #12
 80069ea:	2306      	movs	r3, #6
 80069ec:	2122      	movs	r1, #34	; 0x22
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff fec3 	bl	800677a <lsm6dsl_read_reg>
 80069f4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80069f6:	7b7b      	ldrb	r3, [r7, #13]
 80069f8:	b21a      	sxth	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	7b3b      	ldrb	r3, [r7, #12]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4413      	add	r3, r2
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b21a      	sxth	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006a18:	7bfa      	ldrb	r2, [r7, #15]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	b212      	sxth	r2, r2
 8006a20:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	3302      	adds	r3, #2
 8006a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	4413      	add	r3, r2
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	3302      	adds	r3, #2
 8006a3c:	b212      	sxth	r2, r2
 8006a3e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006a40:	7c7a      	ldrb	r2, [r7, #17]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	3304      	adds	r3, #4
 8006a46:	b212      	sxth	r2, r2
 8006a48:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	7c3b      	ldrb	r3, [r7, #16]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	3304      	adds	r3, #4
 8006a64:	b212      	sxth	r2, r2
 8006a66:	801a      	strh	r2, [r3, #0]

  return ret;
 8006a68:	697b      	ldr	r3, [r7, #20]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006a7e:	f107 0208 	add.w	r2, r7, #8
 8006a82:	2301      	movs	r3, #1
 8006a84:	2112      	movs	r1, #18
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff fe77 	bl	800677a <lsm6dsl_read_reg>
 8006a8c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10f      	bne.n	8006ab4 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	7a3b      	ldrb	r3, [r7, #8]
 8006a9e:	f362 0382 	bfi	r3, r2, #2, #1
 8006aa2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006aa4:	f107 0208 	add.w	r2, r7, #8
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	2112      	movs	r1, #18
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe7c 	bl	80067aa <lsm6dsl_write_reg>
 8006ab2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006aca:	f107 0208 	add.w	r2, r7, #8
 8006ace:	2301      	movs	r3, #1
 8006ad0:	210a      	movs	r1, #10
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fe51 	bl	800677a <lsm6dsl_read_reg>
 8006ad8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10f      	bne.n	8006b00 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	7a3b      	ldrb	r3, [r7, #8]
 8006aea:	f362 0302 	bfi	r3, r2, #0, #3
 8006aee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006af0:	f107 0208 	add.w	r2, r7, #8
 8006af4:	2301      	movs	r3, #1
 8006af6:	210a      	movs	r1, #10
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fe56 	bl	80067aa <lsm6dsl_write_reg>
 8006afe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b16:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <HAL_Init+0x3c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a0b      	ldr	r2, [pc, #44]	; (8006b48 <HAL_Init+0x3c>)
 8006b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b22:	2003      	movs	r0, #3
 8006b24:	f001 faca 	bl	80080bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b28:	200f      	movs	r0, #15
 8006b2a:	f000 f80f 	bl	8006b4c <HAL_InitTick>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	71fb      	strb	r3, [r7, #7]
 8006b38:	e001      	b.n	8006b3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b3a:	f7fc fcdb 	bl	80034f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40022000 	.word	0x40022000

08006b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006b58:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <HAL_InitTick+0x6c>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d023      	beq.n	8006ba8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006b60:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <HAL_InitTick+0x70>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <HAL_InitTick+0x6c>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 fad5 	bl	8008126 <HAL_SYSTICK_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b0f      	cmp	r3, #15
 8006b86:	d809      	bhi.n	8006b9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b88:	2200      	movs	r2, #0
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	f001 fa9f 	bl	80080d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <HAL_InitTick+0x74>)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e007      	b.n	8006bac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
 8006ba0:	e004      	b.n	8006bac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
 8006ba6:	e001      	b.n	8006bac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000008 	.word	0x20000008
 8006bbc:	20000000 	.word	0x20000000
 8006bc0:	20000004 	.word	0x20000004

08006bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006bc8:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_IncTick+0x20>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <HAL_IncTick+0x24>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <HAL_IncTick+0x24>)
 8006bd6:	6013      	str	r3, [r2, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000008 	.word	0x20000008
 8006be8:	20000ef8 	.word	0x20000ef8

08006bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  return uwTick;
 8006bf0:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <HAL_GetTick+0x14>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20000ef8 	.word	0x20000ef8

08006c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c0c:	f7ff ffee 	bl	8006bec <HAL_GetTick>
 8006c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d005      	beq.n	8006c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <HAL_Delay+0x44>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c2a:	bf00      	nop
 8006c2c:	f7ff ffde 	bl	8006bec <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d8f7      	bhi.n	8006c2c <HAL_Delay+0x28>
  {
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000008 	.word	0x20000008

08006c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	609a      	str	r2, [r3, #8]
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	609a      	str	r2, [r3, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3360      	adds	r3, #96	; 0x60
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <LL_ADC_SetOffset+0x44>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	03fff000 	.word	0x03fff000

08006cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3360      	adds	r3, #96	; 0x60
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3360      	adds	r3, #96	; 0x60
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3330      	adds	r3, #48	; 0x30
 8006d6e:	461a      	mov	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	f003 030c 	and.w	r3, r3, #12
 8006d7a:	4413      	add	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	211f      	movs	r1, #31
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	401a      	ands	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0e9b      	lsrs	r3, r3, #26
 8006d96:	f003 011f 	and.w	r1, r3, #31
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	fa01 f303 	lsl.w	r3, r1, r3
 8006da4:	431a      	orrs	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b087      	sub	sp, #28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3314      	adds	r3, #20
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	0e5b      	lsrs	r3, r3, #25
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	4413      	add	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	0d1b      	lsrs	r3, r3, #20
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	2107      	movs	r1, #7
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	0d1b      	lsrs	r3, r3, #20
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006e00:	bf00      	nop
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e24:	43db      	mvns	r3, r3
 8006e26:	401a      	ands	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f003 0318 	and.w	r3, r3, #24
 8006e2e:	4908      	ldr	r1, [pc, #32]	; (8006e50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006e30:	40d9      	lsrs	r1, r3
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	400b      	ands	r3, r1
 8006e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	0007ffff 	.word	0x0007ffff

08006e54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6093      	str	r3, [r2, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8c:	d101      	bne.n	8006e92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006eb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006edc:	d101      	bne.n	8006ee2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <LL_ADC_IsEnabled+0x18>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <LL_ADC_IsEnabled+0x1a>
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d101      	bne.n	8006f2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d101      	bne.n	8006f54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b089      	sub	sp, #36	; 0x24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e136      	b.n	80071ec <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fc fad9 	bl	8003544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff ff67 	bl	8006e78 <LL_ADC_IsDeepPowerDownEnabled>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ff4d 	bl	8006e54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff ff82 	bl	8006ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d115      	bne.n	8006ff6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff ff66 	bl	8006ea0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fd4:	4b87      	ldr	r3, [pc, #540]	; (80071f4 <HAL_ADC_Init+0x290>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	4a87      	ldr	r2, [pc, #540]	; (80071f8 <HAL_ADC_Init+0x294>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	099b      	lsrs	r3, r3, #6
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006fe8:	e002      	b.n	8006ff0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f9      	bne.n	8006fea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff ff64 	bl	8006ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700a:	f043 0210 	orr.w	r2, r3, #16
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	f043 0201 	orr.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff ff75 	bl	8006f16 <LL_ADC_REG_IsConversionOngoing>
 800702c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 80cf 	bne.w	80071da <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 80cb 	bne.w	80071da <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800704c:	f043 0202 	orr.w	r2, r3, #2
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff ff49 	bl	8006ef0 <LL_ADC_IsEnabled>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d115      	bne.n	8007090 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007064:	4865      	ldr	r0, [pc, #404]	; (80071fc <HAL_ADC_Init+0x298>)
 8007066:	f7ff ff43 	bl	8006ef0 <LL_ADC_IsEnabled>
 800706a:	4604      	mov	r4, r0
 800706c:	4864      	ldr	r0, [pc, #400]	; (8007200 <HAL_ADC_Init+0x29c>)
 800706e:	f7ff ff3f 	bl	8006ef0 <LL_ADC_IsEnabled>
 8007072:	4603      	mov	r3, r0
 8007074:	431c      	orrs	r4, r3
 8007076:	4863      	ldr	r0, [pc, #396]	; (8007204 <HAL_ADC_Init+0x2a0>)
 8007078:	f7ff ff3a 	bl	8006ef0 <LL_ADC_IsEnabled>
 800707c:	4603      	mov	r3, r0
 800707e:	4323      	orrs	r3, r4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d105      	bne.n	8007090 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4619      	mov	r1, r3
 800708a:	485f      	ldr	r0, [pc, #380]	; (8007208 <HAL_ADC_Init+0x2a4>)
 800708c:	f7ff fdde 	bl	8006c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	7e5b      	ldrb	r3, [r3, #25]
 8007094:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800709a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80070a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80070a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80070b0:	4313      	orrs	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d106      	bne.n	80070cc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	3b01      	subs	r3, #1
 80070c4:	045b      	lsls	r3, r3, #17
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d009      	beq.n	80070e8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	4b47      	ldr	r3, [pc, #284]	; (800720c <HAL_ADC_Init+0x2a8>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	69b9      	ldr	r1, [r7, #24]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff ff08 	bl	8006f16 <LL_ADC_REG_IsConversionOngoing>
 8007106:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff ff15 	bl	8006f3c <LL_ADC_INJ_IsConversionOngoing>
 8007112:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d13d      	bne.n	8007196 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d13a      	bne.n	8007196 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007124:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800712c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800712e:	4313      	orrs	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713c:	f023 0302 	bic.w	r3, r3, #2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	69b9      	ldr	r1, [r7, #24]
 8007146:	430b      	orrs	r3, r1
 8007148:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007150:	2b01      	cmp	r3, #1
 8007152:	d118      	bne.n	8007186 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800715e:	f023 0304 	bic.w	r3, r3, #4
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800716a:	4311      	orrs	r1, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007170:	4311      	orrs	r1, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007176:	430a      	orrs	r2, r1
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	611a      	str	r2, [r3, #16]
 8007184:	e007      	b.n	8007196 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d10c      	bne.n	80071b8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	f023 010f 	bic.w	r1, r3, #15
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	1e5a      	subs	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30
 80071b6:	e007      	b.n	80071c8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 020f 	bic.w	r2, r2, #15
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071cc:	f023 0303 	bic.w	r3, r3, #3
 80071d0:	f043 0201 	orr.w	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54
 80071d8:	e007      	b.n	80071ea <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	f043 0210 	orr.w	r2, r3, #16
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80071ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3724      	adds	r7, #36	; 0x24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd90      	pop	{r4, r7, pc}
 80071f4:	20000000 	.word	0x20000000
 80071f8:	053e2d63 	.word	0x053e2d63
 80071fc:	50040000 	.word	0x50040000
 8007200:	50040100 	.word	0x50040100
 8007204:	50040200 	.word	0x50040200
 8007208:	50040300 	.word	0x50040300
 800720c:	fff0c007 	.word	0xfff0c007

08007210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b0b6      	sub	sp, #216	; 0xd8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_ADC_ConfigChannel+0x22>
 800722e:	2302      	movs	r3, #2
 8007230:	e3c7      	b.n	80079c2 <HAL_ADC_ConfigChannel+0x7b2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fe69 	bl	8006f16 <LL_ADC_REG_IsConversionOngoing>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	f040 83a8 	bne.w	800799c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b05      	cmp	r3, #5
 8007252:	d824      	bhi.n	800729e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	3b02      	subs	r3, #2
 800725a:	2b03      	cmp	r3, #3
 800725c:	d81b      	bhi.n	8007296 <HAL_ADC_ConfigChannel+0x86>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <HAL_ADC_ConfigChannel+0x54>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007275 	.word	0x08007275
 8007268:	0800727d 	.word	0x0800727d
 800726c:	08007285 	.word	0x08007285
 8007270:	0800728d 	.word	0x0800728d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	220c      	movs	r2, #12
 8007278:	605a      	str	r2, [r3, #4]
          break;
 800727a:	e011      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2212      	movs	r2, #18
 8007280:	605a      	str	r2, [r3, #4]
          break;
 8007282:	e00d      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2218      	movs	r2, #24
 8007288:	605a      	str	r2, [r3, #4]
          break;
 800728a:	e009      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007292:	605a      	str	r2, [r3, #4]
          break;
 8007294:	e004      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2206      	movs	r2, #6
 800729a:	605a      	str	r2, [r3, #4]
          break;
 800729c:	e000      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800729e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	6859      	ldr	r1, [r3, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	f7ff fd56 	bl	8006d5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff fe2d 	bl	8006f16 <LL_ADC_REG_IsConversionOngoing>
 80072bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff fe39 	bl	8006f3c <LL_ADC_INJ_IsConversionOngoing>
 80072ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80072ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 81a6 	bne.w	8007624 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80072d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f040 81a1 	bne.w	8007624 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6819      	ldr	r1, [r3, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f7ff fd61 	bl	8006db6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	695a      	ldr	r2, [r3, #20]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b04      	cmp	r3, #4
 8007314:	d00a      	beq.n	800732c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	6919      	ldr	r1, [r3, #16]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007326:	f7ff fcc5 	bl	8006cb4 <LL_ADC_SetOffset>
 800732a:	e17b      	b.n	8007624 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fce2 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 8007338:	4603      	mov	r3, r0
 800733a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <HAL_ADC_ConfigChannel+0x148>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2100      	movs	r1, #0
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fcd7 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 800734e:	4603      	mov	r3, r0
 8007350:	0e9b      	lsrs	r3, r3, #26
 8007352:	f003 021f 	and.w	r2, r3, #31
 8007356:	e01e      	b.n	8007396 <HAL_ADC_ConfigChannel+0x186>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fccc 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 8007364:	4603      	mov	r3, r0
 8007366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800736e:	fa93 f3a3 	rbit	r3, r3
 8007372:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800737a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800737e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8007386:	2320      	movs	r3, #32
 8007388:	e004      	b.n	8007394 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800738a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800738e:	fab3 f383 	clz	r3, r3
 8007392:	b2db      	uxtb	r3, r3
 8007394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <HAL_ADC_ConfigChannel+0x19e>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	0e9b      	lsrs	r3, r3, #26
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	e018      	b.n	80073e0 <HAL_ADC_ConfigChannel+0x1d0>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ba:	fa93 f3a3 	rbit	r3, r3
 80073be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80073c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80073ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80073d2:	2320      	movs	r3, #32
 80073d4:	e004      	b.n	80073e0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80073d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073da:	fab3 f383 	clz	r3, r3
 80073de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d106      	bne.n	80073f2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fc9b 	bl	8006d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2101      	movs	r1, #1
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fc7f 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 80073fe:	4603      	mov	r3, r0
 8007400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <HAL_ADC_ConfigChannel+0x20e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2101      	movs	r1, #1
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fc74 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 8007414:	4603      	mov	r3, r0
 8007416:	0e9b      	lsrs	r3, r3, #26
 8007418:	f003 021f 	and.w	r2, r3, #31
 800741c:	e01e      	b.n	800745c <HAL_ADC_ConfigChannel+0x24c>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2101      	movs	r1, #1
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff fc69 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 800742a:	4603      	mov	r3, r0
 800742c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007430:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007434:	fa93 f3a3 	rbit	r3, r3
 8007438:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800743c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800744c:	2320      	movs	r3, #32
 800744e:	e004      	b.n	800745a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8007450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007454:	fab3 f383 	clz	r3, r3
 8007458:	b2db      	uxtb	r3, r3
 800745a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <HAL_ADC_ConfigChannel+0x264>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	0e9b      	lsrs	r3, r3, #26
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	e018      	b.n	80074a6 <HAL_ADC_ConfigChannel+0x296>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007480:	fa93 f3a3 	rbit	r3, r3
 8007484:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007488:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800748c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8007498:	2320      	movs	r3, #32
 800749a:	e004      	b.n	80074a6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800749c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074a0:	fab3 f383 	clz	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d106      	bne.n	80074b8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	2101      	movs	r1, #1
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fc38 	bl	8006d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2102      	movs	r1, #2
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fc1c 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <HAL_ADC_ConfigChannel+0x2d4>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2102      	movs	r1, #2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fc11 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 80074da:	4603      	mov	r3, r0
 80074dc:	0e9b      	lsrs	r3, r3, #26
 80074de:	f003 021f 	and.w	r2, r3, #31
 80074e2:	e01e      	b.n	8007522 <HAL_ADC_ConfigChannel+0x312>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2102      	movs	r1, #2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fc06 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074fa:	fa93 f3a3 	rbit	r3, r3
 80074fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800750a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8007512:	2320      	movs	r3, #32
 8007514:	e004      	b.n	8007520 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8007516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800751a:	fab3 f383 	clz	r3, r3
 800751e:	b2db      	uxtb	r3, r3
 8007520:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <HAL_ADC_ConfigChannel+0x32a>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	0e9b      	lsrs	r3, r3, #26
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	e016      	b.n	8007568 <HAL_ADC_ConfigChannel+0x358>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007546:	fa93 f3a3 	rbit	r3, r3
 800754a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800754c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800754e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800755a:	2320      	movs	r3, #32
 800755c:	e004      	b.n	8007568 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800755e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007562:	fab3 f383 	clz	r3, r3
 8007566:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007568:	429a      	cmp	r2, r3
 800756a:	d106      	bne.n	800757a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	2102      	movs	r1, #2
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fbd7 	bl	8006d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2103      	movs	r1, #3
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff fbbb 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 8007586:	4603      	mov	r3, r0
 8007588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <HAL_ADC_ConfigChannel+0x396>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2103      	movs	r1, #3
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fbb0 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 800759c:	4603      	mov	r3, r0
 800759e:	0e9b      	lsrs	r3, r3, #26
 80075a0:	f003 021f 	and.w	r2, r3, #31
 80075a4:	e017      	b.n	80075d6 <HAL_ADC_ConfigChannel+0x3c6>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2103      	movs	r1, #3
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fba5 	bl	8006cfc <LL_ADC_GetOffsetChannel>
 80075b2:	4603      	mov	r3, r0
 80075b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b8:	fa93 f3a3 	rbit	r3, r3
 80075bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80075be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80075c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80075c8:	2320      	movs	r3, #32
 80075ca:	e003      	b.n	80075d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80075cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ce:	fab3 f383 	clz	r3, r3
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <HAL_ADC_ConfigChannel+0x3de>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	0e9b      	lsrs	r3, r3, #26
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	e011      	b.n	8007612 <HAL_ADC_ConfigChannel+0x402>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075f6:	fa93 f3a3 	rbit	r3, r3
 80075fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80075fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8007606:	2320      	movs	r3, #32
 8007608:	e003      	b.n	8007612 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	fab3 f383 	clz	r3, r3
 8007610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007612:	429a      	cmp	r2, r3
 8007614:	d106      	bne.n	8007624 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	2103      	movs	r1, #3
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fb82 	bl	8006d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fc61 	bl	8006ef0 <LL_ADC_IsEnabled>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 813f 	bne.w	80078b4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	6819      	ldr	r1, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	461a      	mov	r2, r3
 8007644:	f7ff fbe2 	bl	8006e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	4a8e      	ldr	r2, [pc, #568]	; (8007888 <HAL_ADC_ConfigChannel+0x678>)
 800764e:	4293      	cmp	r3, r2
 8007650:	f040 8130 	bne.w	80078b4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10b      	bne.n	800767c <HAL_ADC_ConfigChannel+0x46c>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	0e9b      	lsrs	r3, r3, #26
 800766a:	3301      	adds	r3, #1
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2b09      	cmp	r3, #9
 8007672:	bf94      	ite	ls
 8007674:	2301      	movls	r3, #1
 8007676:	2300      	movhi	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e019      	b.n	80076b0 <HAL_ADC_ConfigChannel+0x4a0>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007684:	fa93 f3a3 	rbit	r3, r3
 8007688:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800768a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800768c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800768e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007694:	2320      	movs	r3, #32
 8007696:	e003      	b.n	80076a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800769a:	fab3 f383 	clz	r3, r3
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	3301      	adds	r3, #1
 80076a2:	f003 031f 	and.w	r3, r3, #31
 80076a6:	2b09      	cmp	r3, #9
 80076a8:	bf94      	ite	ls
 80076aa:	2301      	movls	r3, #1
 80076ac:	2300      	movhi	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d079      	beq.n	80077a8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <HAL_ADC_ConfigChannel+0x4c0>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	0e9b      	lsrs	r3, r3, #26
 80076c6:	3301      	adds	r3, #1
 80076c8:	069b      	lsls	r3, r3, #26
 80076ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076ce:	e015      	b.n	80076fc <HAL_ADC_ConfigChannel+0x4ec>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d8:	fa93 f3a3 	rbit	r3, r3
 80076dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80076de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80076e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80076e8:	2320      	movs	r3, #32
 80076ea:	e003      	b.n	80076f4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80076ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ee:	fab3 f383 	clz	r3, r3
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	3301      	adds	r3, #1
 80076f6:	069b      	lsls	r3, r3, #26
 80076f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007704:	2b00      	cmp	r3, #0
 8007706:	d109      	bne.n	800771c <HAL_ADC_ConfigChannel+0x50c>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	0e9b      	lsrs	r3, r3, #26
 800770e:	3301      	adds	r3, #1
 8007710:	f003 031f 	and.w	r3, r3, #31
 8007714:	2101      	movs	r1, #1
 8007716:	fa01 f303 	lsl.w	r3, r1, r3
 800771a:	e017      	b.n	800774c <HAL_ADC_ConfigChannel+0x53c>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007724:	fa93 f3a3 	rbit	r3, r3
 8007728:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800772a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800772e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8007734:	2320      	movs	r3, #32
 8007736:	e003      	b.n	8007740 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8007738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773a:	fab3 f383 	clz	r3, r3
 800773e:	b2db      	uxtb	r3, r3
 8007740:	3301      	adds	r3, #1
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2101      	movs	r1, #1
 8007748:	fa01 f303 	lsl.w	r3, r1, r3
 800774c:	ea42 0103 	orr.w	r1, r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <HAL_ADC_ConfigChannel+0x562>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	0e9b      	lsrs	r3, r3, #26
 8007762:	3301      	adds	r3, #1
 8007764:	f003 021f 	and.w	r2, r3, #31
 8007768:	4613      	mov	r3, r2
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	4413      	add	r3, r2
 800776e:	051b      	lsls	r3, r3, #20
 8007770:	e018      	b.n	80077a4 <HAL_ADC_ConfigChannel+0x594>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	fa93 f3a3 	rbit	r3, r3
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800778a:	2320      	movs	r3, #32
 800778c:	e003      	b.n	8007796 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800778e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007790:	fab3 f383 	clz	r3, r3
 8007794:	b2db      	uxtb	r3, r3
 8007796:	3301      	adds	r3, #1
 8007798:	f003 021f 	and.w	r2, r3, #31
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077a4:	430b      	orrs	r3, r1
 80077a6:	e080      	b.n	80078aa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d107      	bne.n	80077c4 <HAL_ADC_ConfigChannel+0x5b4>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	0e9b      	lsrs	r3, r3, #26
 80077ba:	3301      	adds	r3, #1
 80077bc:	069b      	lsls	r3, r3, #26
 80077be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077c2:	e015      	b.n	80077f0 <HAL_ADC_ConfigChannel+0x5e0>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	fa93 f3a3 	rbit	r3, r3
 80077d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80077dc:	2320      	movs	r3, #32
 80077de:	e003      	b.n	80077e8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	fab3 f383 	clz	r3, r3
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	3301      	adds	r3, #1
 80077ea:	069b      	lsls	r3, r3, #26
 80077ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <HAL_ADC_ConfigChannel+0x600>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	0e9b      	lsrs	r3, r3, #26
 8007802:	3301      	adds	r3, #1
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f303 	lsl.w	r3, r1, r3
 800780e:	e017      	b.n	8007840 <HAL_ADC_ConfigChannel+0x630>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	fa93 f3a3 	rbit	r3, r3
 800781c:	61fb      	str	r3, [r7, #28]
  return result;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8007828:	2320      	movs	r3, #32
 800782a:	e003      	b.n	8007834 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	fab3 f383 	clz	r3, r3
 8007832:	b2db      	uxtb	r3, r3
 8007834:	3301      	adds	r3, #1
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	2101      	movs	r1, #1
 800783c:	fa01 f303 	lsl.w	r3, r1, r3
 8007840:	ea42 0103 	orr.w	r1, r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10d      	bne.n	800786c <HAL_ADC_ConfigChannel+0x65c>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	0e9b      	lsrs	r3, r3, #26
 8007856:	3301      	adds	r3, #1
 8007858:	f003 021f 	and.w	r2, r3, #31
 800785c:	4613      	mov	r3, r2
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	4413      	add	r3, r2
 8007862:	3b1e      	subs	r3, #30
 8007864:	051b      	lsls	r3, r3, #20
 8007866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800786a:	e01d      	b.n	80078a8 <HAL_ADC_ConfigChannel+0x698>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	fa93 f3a3 	rbit	r3, r3
 8007878:	613b      	str	r3, [r7, #16]
  return result;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8007884:	2320      	movs	r3, #32
 8007886:	e005      	b.n	8007894 <HAL_ADC_ConfigChannel+0x684>
 8007888:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	fab3 f383 	clz	r3, r3
 8007892:	b2db      	uxtb	r3, r3
 8007894:	3301      	adds	r3, #1
 8007896:	f003 021f 	and.w	r2, r3, #31
 800789a:	4613      	mov	r3, r2
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4413      	add	r3, r2
 80078a0:	3b1e      	subs	r3, #30
 80078a2:	051b      	lsls	r3, r3, #20
 80078a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078a8:	430b      	orrs	r3, r1
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	6892      	ldr	r2, [r2, #8]
 80078ae:	4619      	mov	r1, r3
 80078b0:	f7ff fa81 	bl	8006db6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	4b44      	ldr	r3, [pc, #272]	; (80079cc <HAL_ADC_ConfigChannel+0x7bc>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d07a      	beq.n	80079b6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078c0:	4843      	ldr	r0, [pc, #268]	; (80079d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80078c2:	f7ff f9e9 	bl	8006c98 <LL_ADC_GetCommonPathInternalCh>
 80078c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a41      	ldr	r2, [pc, #260]	; (80079d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d12c      	bne.n	800792e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80078d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d126      	bne.n	800792e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a3c      	ldr	r2, [pc, #240]	; (80079d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <HAL_ADC_ConfigChannel+0x6e4>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a3b      	ldr	r2, [pc, #236]	; (80079dc <HAL_ADC_ConfigChannel+0x7cc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d15d      	bne.n	80079b0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078fc:	4619      	mov	r1, r3
 80078fe:	4834      	ldr	r0, [pc, #208]	; (80079d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8007900:	f7ff f9b7 	bl	8006c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007904:	4b36      	ldr	r3, [pc, #216]	; (80079e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	099b      	lsrs	r3, r3, #6
 800790a:	4a36      	ldr	r2, [pc, #216]	; (80079e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	099b      	lsrs	r3, r3, #6
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	4613      	mov	r3, r2
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800791e:	e002      	b.n	8007926 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3b01      	subs	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f9      	bne.n	8007920 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800792c:	e040      	b.n	80079b0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a2d      	ldr	r2, [pc, #180]	; (80079e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d118      	bne.n	800796a <HAL_ADC_ConfigChannel+0x75a>
 8007938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800793c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d112      	bne.n	800796a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a23      	ldr	r2, [pc, #140]	; (80079d8 <HAL_ADC_ConfigChannel+0x7c8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_ADC_ConfigChannel+0x748>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a22      	ldr	r2, [pc, #136]	; (80079dc <HAL_ADC_ConfigChannel+0x7cc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d12d      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800795c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007960:	4619      	mov	r1, r3
 8007962:	481b      	ldr	r0, [pc, #108]	; (80079d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8007964:	f7ff f985 	bl	8006c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007968:	e024      	b.n	80079b4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <HAL_ADC_ConfigChannel+0x7dc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d120      	bne.n	80079b6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11a      	bne.n	80079b6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <HAL_ADC_ConfigChannel+0x7c8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d115      	bne.n	80079b6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800798a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800798e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007992:	4619      	mov	r1, r3
 8007994:	480e      	ldr	r0, [pc, #56]	; (80079d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8007996:	f7ff f96c 	bl	8006c72 <LL_ADC_SetCommonPathInternalCh>
 800799a:	e00c      	b.n	80079b6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a0:	f043 0220 	orr.w	r2, r3, #32
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80079ae:	e002      	b.n	80079b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80079be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	37d8      	adds	r7, #216	; 0xd8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	80080000 	.word	0x80080000
 80079d0:	50040300 	.word	0x50040300
 80079d4:	c7520000 	.word	0xc7520000
 80079d8:	50040000 	.word	0x50040000
 80079dc:	50040200 	.word	0x50040200
 80079e0:	20000000 	.word	0x20000000
 80079e4:	053e2d63 	.word	0x053e2d63
 80079e8:	cb840000 	.word	0xcb840000
 80079ec:	80000001 	.word	0x80000001

080079f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e0ed      	b.n	8007bde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d102      	bne.n	8007a14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fb fe02 	bl	8003618 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a24:	f7ff f8e2 	bl	8006bec <HAL_GetTick>
 8007a28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a2a:	e012      	b.n	8007a52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a2c:	f7ff f8de 	bl	8006bec <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b0a      	cmp	r3, #10
 8007a38:	d90b      	bls.n	8007a52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2205      	movs	r2, #5
 8007a4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e0c5      	b.n	8007bde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0e5      	beq.n	8007a2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0202 	bic.w	r2, r2, #2
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a70:	f7ff f8bc 	bl	8006bec <HAL_GetTick>
 8007a74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007a76:	e012      	b.n	8007a9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a78:	f7ff f8b8 	bl	8006bec <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b0a      	cmp	r3, #10
 8007a84:	d90b      	bls.n	8007a9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2205      	movs	r2, #5
 8007a96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e09f      	b.n	8007bde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7e1b      	ldrb	r3, [r3, #24]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d108      	bne.n	8007ac6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	e007      	b.n	8007ad6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7e5b      	ldrb	r3, [r3, #25]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d108      	bne.n	8007af0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e007      	b.n	8007b00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7e9b      	ldrb	r3, [r3, #26]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d108      	bne.n	8007b1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0220 	orr.w	r2, r2, #32
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e007      	b.n	8007b2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0220 	bic.w	r2, r2, #32
 8007b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7edb      	ldrb	r3, [r3, #27]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d108      	bne.n	8007b44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0210 	bic.w	r2, r2, #16
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e007      	b.n	8007b54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0210 	orr.w	r2, r2, #16
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7f1b      	ldrb	r3, [r3, #28]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d108      	bne.n	8007b6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0208 	orr.w	r2, r2, #8
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	e007      	b.n	8007b7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0208 	bic.w	r2, r2, #8
 8007b7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7f5b      	ldrb	r3, [r3, #29]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d108      	bne.n	8007b98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f042 0204 	orr.w	r2, r2, #4
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e007      	b.n	8007ba8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0204 	bic.w	r2, r2, #4
 8007ba6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	ea42 0103 	orr.w	r1, r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	1e5a      	subs	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <LL_EXTI_EnableIT_0_31+0x20>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4904      	ldr	r1, [pc, #16]	; (8007c08 <LL_EXTI_EnableIT_0_31+0x20>)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	600b      	str	r3, [r1, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40010400 	.word	0x40010400

08007c0c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007c14:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <LL_EXTI_DisableIT_0_31+0x24>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	43db      	mvns	r3, r3
 8007c1c:	4904      	ldr	r1, [pc, #16]	; (8007c30 <LL_EXTI_DisableIT_0_31+0x24>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	600b      	str	r3, [r1, #0]
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010400 	.word	0x40010400

08007c34 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	4904      	ldr	r1, [pc, #16]	; (8007c54 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	604b      	str	r3, [r1, #4]

}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40010400 	.word	0x40010400

08007c58 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007c60:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	43db      	mvns	r3, r3
 8007c68:	4904      	ldr	r1, [pc, #16]	; (8007c7c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	604b      	str	r3, [r1, #4]
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010400 	.word	0x40010400

08007c80 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	4904      	ldr	r1, [pc, #16]	; (8007ca0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	608b      	str	r3, [r1, #8]

}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	40010400 	.word	0x40010400

08007ca4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	4904      	ldr	r1, [pc, #16]	; (8007cc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	608b      	str	r3, [r1, #8]

}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010400 	.word	0x40010400

08007ccc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007cd4:	4b05      	ldr	r3, [pc, #20]	; (8007cec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60cb      	str	r3, [r1, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	40010400 	.word	0x40010400

08007cf0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007cf8:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	4904      	ldr	r1, [pc, #16]	; (8007d14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	60cb      	str	r3, [r1, #12]
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	40010400 	.word	0x40010400

08007d18 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007d20:	4a04      	ldr	r2, [pc, #16]	; (8007d34 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6153      	str	r3, [r2, #20]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40010400 	.word	0x40010400

08007d38 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d102      	bne.n	8007d54 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	77fb      	strb	r3, [r7, #31]
 8007d52:	e0d1      	b.n	8007ef8 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d62:	d102      	bne.n	8007d6a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	e0c6      	b.n	8007ef8 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d115      	bne.n	8007da2 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d84:	4b5f      	ldr	r3, [pc, #380]	; (8007f04 <HAL_COMP_Init+0x1cc>)
 8007d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d88:	4a5e      	ldr	r2, [pc, #376]	; (8007f04 <HAL_COMP_Init+0x1cc>)
 8007d8a:	f043 0301 	orr.w	r3, r3, #1
 8007d8e:	6613      	str	r3, [r2, #96]	; 0x60
 8007d90:	4b5c      	ldr	r3, [pc, #368]	; (8007f04 <HAL_COMP_Init+0x1cc>)
 8007d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7fb fc7f 	bl	80036a0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dac:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	; (8007f08 <HAL_COMP_Init+0x1d0>)
 8007dda:	4013      	ands	r3, r2
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	6979      	ldr	r1, [r7, #20]
 8007de2:	430b      	orrs	r3, r1
 8007de4:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dee:	d106      	bne.n	8007dfe <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007df0:	4b46      	ldr	r3, [pc, #280]	; (8007f0c <HAL_COMP_Init+0x1d4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a45      	ldr	r2, [pc, #276]	; (8007f0c <HAL_COMP_Init+0x1d4>)
 8007df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	e005      	b.n	8007e0a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007dfe:	4b43      	ldr	r3, [pc, #268]	; (8007f0c <HAL_COMP_Init+0x1d4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a42      	ldr	r2, [pc, #264]	; (8007f0c <HAL_COMP_Init+0x1d4>)
 8007e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e08:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d016      	beq.n	8007e46 <HAL_COMP_Init+0x10e>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d113      	bne.n	8007e46 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e1e:	4b3c      	ldr	r3, [pc, #240]	; (8007f10 <HAL_COMP_Init+0x1d8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	099b      	lsrs	r3, r3, #6
 8007e24:	4a3b      	ldr	r2, [pc, #236]	; (8007f14 <HAL_COMP_Init+0x1dc>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	099b      	lsrs	r3, r3, #6
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007e38:	e002      	b.n	8007e40 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1f9      	bne.n	8007e3a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a33      	ldr	r2, [pc, #204]	; (8007f18 <HAL_COMP_Init+0x1e0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d102      	bne.n	8007e56 <HAL_COMP_Init+0x11e>
 8007e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e54:	e001      	b.n	8007e5a <HAL_COMP_Init+0x122>
 8007e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e5a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d037      	beq.n	8007ed8 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007e74:	6938      	ldr	r0, [r7, #16]
 8007e76:	f7ff ff03 	bl	8007c80 <LL_EXTI_EnableRisingTrig_0_31>
 8007e7a:	e002      	b.n	8007e82 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007e7c:	6938      	ldr	r0, [r7, #16]
 8007e7e:	f7ff ff11 	bl	8007ca4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007e8e:	6938      	ldr	r0, [r7, #16]
 8007e90:	f7ff ff1c 	bl	8007ccc <LL_EXTI_EnableFallingTrig_0_31>
 8007e94:	e002      	b.n	8007e9c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007e96:	6938      	ldr	r0, [r7, #16]
 8007e98:	f7ff ff2a 	bl	8007cf0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007e9c:	6938      	ldr	r0, [r7, #16]
 8007e9e:	f7ff ff3b 	bl	8007d18 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007eae:	6938      	ldr	r0, [r7, #16]
 8007eb0:	f7ff fec0 	bl	8007c34 <LL_EXTI_EnableEvent_0_31>
 8007eb4:	e002      	b.n	8007ebc <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007eb6:	6938      	ldr	r0, [r7, #16]
 8007eb8:	f7ff fece 	bl	8007c58 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007ec8:	6938      	ldr	r0, [r7, #16]
 8007eca:	f7ff fe8d 	bl	8007be8 <LL_EXTI_EnableIT_0_31>
 8007ece:	e009      	b.n	8007ee4 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007ed0:	6938      	ldr	r0, [r7, #16]
 8007ed2:	f7ff fe9b 	bl	8007c0c <LL_EXTI_DisableIT_0_31>
 8007ed6:	e005      	b.n	8007ee4 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007ed8:	6938      	ldr	r0, [r7, #16]
 8007eda:	f7ff febd 	bl	8007c58 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007ede:	6938      	ldr	r0, [r7, #16]
 8007ee0:	f7ff fe94 	bl	8007c0c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007ef8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40021000 	.word	0x40021000
 8007f08:	ff207d03 	.word	0xff207d03
 8007f0c:	40010204 	.word	0x40010204
 8007f10:	20000000 	.word	0x20000000
 8007f14:	053e2d63 	.word	0x053e2d63
 8007f18:	40010200 	.word	0x40010200

08007f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <__NVIC_SetPriorityGrouping+0x44>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f38:	4013      	ands	r3, r2
 8007f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f4e:	4a04      	ldr	r2, [pc, #16]	; (8007f60 <__NVIC_SetPriorityGrouping+0x44>)
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	60d3      	str	r3, [r2, #12]
}
 8007f54:	bf00      	nop
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	e000ed00 	.word	0xe000ed00

08007f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <__NVIC_GetPriorityGrouping+0x18>)
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	f003 0307 	and.w	r3, r3, #7
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	e000ed00 	.word	0xe000ed00

08007f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	db0b      	blt.n	8007faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	f003 021f 	and.w	r2, r3, #31
 8007f98:	4907      	ldr	r1, [pc, #28]	; (8007fb8 <__NVIC_EnableIRQ+0x38>)
 8007f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8007fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	e000e100 	.word	0xe000e100

08007fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	db0a      	blt.n	8007fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	490c      	ldr	r1, [pc, #48]	; (8008008 <__NVIC_SetPriority+0x4c>)
 8007fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fda:	0112      	lsls	r2, r2, #4
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	440b      	add	r3, r1
 8007fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fe4:	e00a      	b.n	8007ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	4908      	ldr	r1, [pc, #32]	; (800800c <__NVIC_SetPriority+0x50>)
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	3b04      	subs	r3, #4
 8007ff4:	0112      	lsls	r2, r2, #4
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	761a      	strb	r2, [r3, #24]
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	e000e100 	.word	0xe000e100
 800800c:	e000ed00 	.word	0xe000ed00

08008010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008010:	b480      	push	{r7}
 8008012:	b089      	sub	sp, #36	; 0x24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f1c3 0307 	rsb	r3, r3, #7
 800802a:	2b04      	cmp	r3, #4
 800802c:	bf28      	it	cs
 800802e:	2304      	movcs	r3, #4
 8008030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	3304      	adds	r3, #4
 8008036:	2b06      	cmp	r3, #6
 8008038:	d902      	bls.n	8008040 <NVIC_EncodePriority+0x30>
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	3b03      	subs	r3, #3
 800803e:	e000      	b.n	8008042 <NVIC_EncodePriority+0x32>
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008044:	f04f 32ff 	mov.w	r2, #4294967295
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	fa02 f303 	lsl.w	r3, r2, r3
 800804e:	43da      	mvns	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	401a      	ands	r2, r3
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008058:	f04f 31ff 	mov.w	r1, #4294967295
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	fa01 f303 	lsl.w	r3, r1, r3
 8008062:	43d9      	mvns	r1, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008068:	4313      	orrs	r3, r2
         );
}
 800806a:	4618      	mov	r0, r3
 800806c:	3724      	adds	r7, #36	; 0x24
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3b01      	subs	r3, #1
 8008084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008088:	d301      	bcc.n	800808e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800808a:	2301      	movs	r3, #1
 800808c:	e00f      	b.n	80080ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800808e:	4a0a      	ldr	r2, [pc, #40]	; (80080b8 <SysTick_Config+0x40>)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3b01      	subs	r3, #1
 8008094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008096:	210f      	movs	r1, #15
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	f7ff ff8e 	bl	8007fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <SysTick_Config+0x40>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080a6:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <SysTick_Config+0x40>)
 80080a8:	2207      	movs	r2, #7
 80080aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	e000e010 	.word	0xe000e010

080080bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ff29 	bl	8007f1c <__NVIC_SetPriorityGrouping>
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b086      	sub	sp, #24
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	4603      	mov	r3, r0
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80080e4:	f7ff ff3e 	bl	8007f64 <__NVIC_GetPriorityGrouping>
 80080e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f7ff ff8e 	bl	8008010 <NVIC_EncodePriority>
 80080f4:	4602      	mov	r2, r0
 80080f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ff5d 	bl	8007fbc <__NVIC_SetPriority>
}
 8008102:	bf00      	nop
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	4603      	mov	r3, r0
 8008112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff ff31 	bl	8007f80 <__NVIC_EnableIRQ>
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff ffa2 	bl	8008078 <SysTick_Config>
 8008134:	4603      	mov	r3, r0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d008      	beq.n	8008168 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2204      	movs	r2, #4
 800815a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e022      	b.n	80081ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 020e 	bic.w	r2, r2, #14
 8008176:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818c:	f003 021c 	and.w	r2, r3, #28
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	2101      	movs	r1, #1
 8008196:	fa01 f202 	lsl.w	r2, r1, r2
 800819a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d005      	beq.n	80081de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2204      	movs	r2, #4
 80081d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
 80081dc:	e029      	b.n	8008232 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 020e 	bic.w	r2, r2, #14
 80081ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0201 	bic.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008202:	f003 021c 	and.w	r2, r3, #28
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	2101      	movs	r1, #1
 800820c:	fa01 f202 	lsl.w	r2, r1, r2
 8008210:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
    }
  }
  return status;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800824a:	e17f      	b.n	800854c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	2101      	movs	r1, #1
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	4013      	ands	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8171 	beq.w	8008546 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	2b01      	cmp	r3, #1
 800826e:	d005      	beq.n	800827c <HAL_GPIO_Init+0x40>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f003 0303 	and.w	r3, r3, #3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d130      	bne.n	80082de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	2203      	movs	r2, #3
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	43db      	mvns	r3, r3
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4013      	ands	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	fa02 f303 	lsl.w	r3, r2, r3
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082b2:	2201      	movs	r2, #1
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	43db      	mvns	r3, r3
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	4013      	ands	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	091b      	lsrs	r3, r3, #4
 80082c8:	f003 0201 	and.w	r2, r3, #1
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d118      	bne.n	800831c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80082f0:	2201      	movs	r2, #1
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	fa02 f303 	lsl.w	r3, r2, r3
 80082f8:	43db      	mvns	r3, r3
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4013      	ands	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	08db      	lsrs	r3, r3, #3
 8008306:	f003 0201 	and.w	r2, r3, #1
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	fa02 f303 	lsl.w	r3, r2, r3
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	2b03      	cmp	r3, #3
 8008326:	d017      	beq.n	8008358 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	2203      	movs	r2, #3
 8008334:	fa02 f303 	lsl.w	r3, r2, r3
 8008338:	43db      	mvns	r3, r3
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4013      	ands	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	fa02 f303 	lsl.w	r3, r2, r3
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d123      	bne.n	80083ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	08da      	lsrs	r2, r3, #3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3208      	adds	r2, #8
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	220f      	movs	r2, #15
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	43db      	mvns	r3, r3
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4013      	ands	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	fa02 f303 	lsl.w	r3, r2, r3
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	4313      	orrs	r3, r2
 800839c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	08da      	lsrs	r2, r3, #3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	3208      	adds	r2, #8
 80083a6:	6939      	ldr	r1, [r7, #16]
 80083a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	2203      	movs	r2, #3
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	43db      	mvns	r3, r3
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4013      	ands	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f003 0203 	and.w	r2, r3, #3
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	fa02 f303 	lsl.w	r3, r2, r3
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80ac 	beq.w	8008546 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083ee:	4b5f      	ldr	r3, [pc, #380]	; (800856c <HAL_GPIO_Init+0x330>)
 80083f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f2:	4a5e      	ldr	r2, [pc, #376]	; (800856c <HAL_GPIO_Init+0x330>)
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	6613      	str	r3, [r2, #96]	; 0x60
 80083fa:	4b5c      	ldr	r3, [pc, #368]	; (800856c <HAL_GPIO_Init+0x330>)
 80083fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	60bb      	str	r3, [r7, #8]
 8008404:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008406:	4a5a      	ldr	r2, [pc, #360]	; (8008570 <HAL_GPIO_Init+0x334>)
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	089b      	lsrs	r3, r3, #2
 800840c:	3302      	adds	r3, #2
 800840e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008412:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	220f      	movs	r2, #15
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	43db      	mvns	r3, r3
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4013      	ands	r3, r2
 8008428:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008430:	d025      	beq.n	800847e <HAL_GPIO_Init+0x242>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a4f      	ldr	r2, [pc, #316]	; (8008574 <HAL_GPIO_Init+0x338>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01f      	beq.n	800847a <HAL_GPIO_Init+0x23e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a4e      	ldr	r2, [pc, #312]	; (8008578 <HAL_GPIO_Init+0x33c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d019      	beq.n	8008476 <HAL_GPIO_Init+0x23a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a4d      	ldr	r2, [pc, #308]	; (800857c <HAL_GPIO_Init+0x340>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <HAL_GPIO_Init+0x236>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a4c      	ldr	r2, [pc, #304]	; (8008580 <HAL_GPIO_Init+0x344>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00d      	beq.n	800846e <HAL_GPIO_Init+0x232>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a4b      	ldr	r2, [pc, #300]	; (8008584 <HAL_GPIO_Init+0x348>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <HAL_GPIO_Init+0x22e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a4a      	ldr	r2, [pc, #296]	; (8008588 <HAL_GPIO_Init+0x34c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d101      	bne.n	8008466 <HAL_GPIO_Init+0x22a>
 8008462:	2306      	movs	r3, #6
 8008464:	e00c      	b.n	8008480 <HAL_GPIO_Init+0x244>
 8008466:	2307      	movs	r3, #7
 8008468:	e00a      	b.n	8008480 <HAL_GPIO_Init+0x244>
 800846a:	2305      	movs	r3, #5
 800846c:	e008      	b.n	8008480 <HAL_GPIO_Init+0x244>
 800846e:	2304      	movs	r3, #4
 8008470:	e006      	b.n	8008480 <HAL_GPIO_Init+0x244>
 8008472:	2303      	movs	r3, #3
 8008474:	e004      	b.n	8008480 <HAL_GPIO_Init+0x244>
 8008476:	2302      	movs	r3, #2
 8008478:	e002      	b.n	8008480 <HAL_GPIO_Init+0x244>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <HAL_GPIO_Init+0x244>
 800847e:	2300      	movs	r3, #0
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	f002 0203 	and.w	r2, r2, #3
 8008486:	0092      	lsls	r2, r2, #2
 8008488:	4093      	lsls	r3, r2
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008490:	4937      	ldr	r1, [pc, #220]	; (8008570 <HAL_GPIO_Init+0x334>)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	089b      	lsrs	r3, r3, #2
 8008496:	3302      	adds	r3, #2
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800849e:	4b3b      	ldr	r3, [pc, #236]	; (800858c <HAL_GPIO_Init+0x350>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	43db      	mvns	r3, r3
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4013      	ands	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084c2:	4a32      	ldr	r2, [pc, #200]	; (800858c <HAL_GPIO_Init+0x350>)
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80084c8:	4b30      	ldr	r3, [pc, #192]	; (800858c <HAL_GPIO_Init+0x350>)
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	43db      	mvns	r3, r3
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4013      	ands	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80084ec:	4a27      	ldr	r2, [pc, #156]	; (800858c <HAL_GPIO_Init+0x350>)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80084f2:	4b26      	ldr	r3, [pc, #152]	; (800858c <HAL_GPIO_Init+0x350>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	43db      	mvns	r3, r3
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4013      	ands	r3, r2
 8008500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008516:	4a1d      	ldr	r2, [pc, #116]	; (800858c <HAL_GPIO_Init+0x350>)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <HAL_GPIO_Init+0x350>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	43db      	mvns	r3, r3
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4013      	ands	r3, r2
 800852a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4313      	orrs	r3, r2
 800853e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008540:	4a12      	ldr	r2, [pc, #72]	; (800858c <HAL_GPIO_Init+0x350>)
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	3301      	adds	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	fa22 f303 	lsr.w	r3, r2, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	f47f ae78 	bne.w	800824c <HAL_GPIO_Init+0x10>
  }
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40021000 	.word	0x40021000
 8008570:	40010000 	.word	0x40010000
 8008574:	48000400 	.word	0x48000400
 8008578:	48000800 	.word	0x48000800
 800857c:	48000c00 	.word	0x48000c00
 8008580:	48001000 	.word	0x48001000
 8008584:	48001400 	.word	0x48001400
 8008588:	48001800 	.word	0x48001800
 800858c:	40010400 	.word	0x40010400

08008590 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800859a:	2300      	movs	r3, #0
 800859c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800859e:	e0cd      	b.n	800873c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80085a0:	2201      	movs	r2, #1
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	4013      	ands	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 80c0 	beq.w	8008736 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80085b6:	4a68      	ldr	r2, [pc, #416]	; (8008758 <HAL_GPIO_DeInit+0x1c8>)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	089b      	lsrs	r3, r3, #2
 80085bc:	3302      	adds	r3, #2
 80085be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	220f      	movs	r2, #15
 80085ce:	fa02 f303 	lsl.w	r3, r2, r3
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80085de:	d025      	beq.n	800862c <HAL_GPIO_DeInit+0x9c>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a5e      	ldr	r2, [pc, #376]	; (800875c <HAL_GPIO_DeInit+0x1cc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d01f      	beq.n	8008628 <HAL_GPIO_DeInit+0x98>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a5d      	ldr	r2, [pc, #372]	; (8008760 <HAL_GPIO_DeInit+0x1d0>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d019      	beq.n	8008624 <HAL_GPIO_DeInit+0x94>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a5c      	ldr	r2, [pc, #368]	; (8008764 <HAL_GPIO_DeInit+0x1d4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d013      	beq.n	8008620 <HAL_GPIO_DeInit+0x90>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a5b      	ldr	r2, [pc, #364]	; (8008768 <HAL_GPIO_DeInit+0x1d8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00d      	beq.n	800861c <HAL_GPIO_DeInit+0x8c>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a5a      	ldr	r2, [pc, #360]	; (800876c <HAL_GPIO_DeInit+0x1dc>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d007      	beq.n	8008618 <HAL_GPIO_DeInit+0x88>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a59      	ldr	r2, [pc, #356]	; (8008770 <HAL_GPIO_DeInit+0x1e0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d101      	bne.n	8008614 <HAL_GPIO_DeInit+0x84>
 8008610:	2306      	movs	r3, #6
 8008612:	e00c      	b.n	800862e <HAL_GPIO_DeInit+0x9e>
 8008614:	2307      	movs	r3, #7
 8008616:	e00a      	b.n	800862e <HAL_GPIO_DeInit+0x9e>
 8008618:	2305      	movs	r3, #5
 800861a:	e008      	b.n	800862e <HAL_GPIO_DeInit+0x9e>
 800861c:	2304      	movs	r3, #4
 800861e:	e006      	b.n	800862e <HAL_GPIO_DeInit+0x9e>
 8008620:	2303      	movs	r3, #3
 8008622:	e004      	b.n	800862e <HAL_GPIO_DeInit+0x9e>
 8008624:	2302      	movs	r3, #2
 8008626:	e002      	b.n	800862e <HAL_GPIO_DeInit+0x9e>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <HAL_GPIO_DeInit+0x9e>
 800862c:	2300      	movs	r3, #0
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	f002 0203 	and.w	r2, r2, #3
 8008634:	0092      	lsls	r2, r2, #2
 8008636:	4093      	lsls	r3, r2
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	429a      	cmp	r2, r3
 800863c:	d132      	bne.n	80086a4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800863e:	4b4d      	ldr	r3, [pc, #308]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	43db      	mvns	r3, r3
 8008646:	494b      	ldr	r1, [pc, #300]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 8008648:	4013      	ands	r3, r2
 800864a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800864c:	4b49      	ldr	r3, [pc, #292]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	43db      	mvns	r3, r3
 8008654:	4947      	ldr	r1, [pc, #284]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 8008656:	4013      	ands	r3, r2
 8008658:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800865a:	4b46      	ldr	r3, [pc, #280]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	43db      	mvns	r3, r3
 8008662:	4944      	ldr	r1, [pc, #272]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 8008664:	4013      	ands	r3, r2
 8008666:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008668:	4b42      	ldr	r3, [pc, #264]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	43db      	mvns	r3, r3
 8008670:	4940      	ldr	r1, [pc, #256]	; (8008774 <HAL_GPIO_DeInit+0x1e4>)
 8008672:	4013      	ands	r3, r2
 8008674:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	220f      	movs	r2, #15
 8008680:	fa02 f303 	lsl.w	r3, r2, r3
 8008684:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008686:	4a34      	ldr	r2, [pc, #208]	; (8008758 <HAL_GPIO_DeInit+0x1c8>)
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	3302      	adds	r3, #2
 800868e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	43da      	mvns	r2, r3
 8008696:	4830      	ldr	r0, [pc, #192]	; (8008758 <HAL_GPIO_DeInit+0x1c8>)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	089b      	lsrs	r3, r3, #2
 800869c:	400a      	ands	r2, r1
 800869e:	3302      	adds	r3, #2
 80086a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	2103      	movs	r1, #3
 80086ae:	fa01 f303 	lsl.w	r3, r1, r3
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	08da      	lsrs	r2, r3, #3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3208      	adds	r2, #8
 80086c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	220f      	movs	r2, #15
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43db      	mvns	r3, r3
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	08d2      	lsrs	r2, r2, #3
 80086d8:	4019      	ands	r1, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3208      	adds	r2, #8
 80086de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	2103      	movs	r1, #3
 80086ec:	fa01 f303 	lsl.w	r3, r1, r3
 80086f0:	43db      	mvns	r3, r3
 80086f2:	401a      	ands	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	2101      	movs	r1, #1
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	fa01 f303 	lsl.w	r3, r1, r3
 8008704:	43db      	mvns	r3, r3
 8008706:	401a      	ands	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	2103      	movs	r1, #3
 8008716:	fa01 f303 	lsl.w	r3, r1, r3
 800871a:	43db      	mvns	r3, r3
 800871c:	401a      	ands	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008726:	2101      	movs	r1, #1
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	fa01 f303 	lsl.w	r3, r1, r3
 800872e:	43db      	mvns	r3, r3
 8008730:	401a      	ands	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	3301      	adds	r3, #1
 800873a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	f47f af2b 	bne.w	80085a0 <HAL_GPIO_DeInit+0x10>
  }
}
 800874a:	bf00      	nop
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	40010000 	.word	0x40010000
 800875c:	48000400 	.word	0x48000400
 8008760:	48000800 	.word	0x48000800
 8008764:	48000c00 	.word	0x48000c00
 8008768:	48001000 	.word	0x48001000
 800876c:	48001400 	.word	0x48001400
 8008770:	48001800 	.word	0x48001800
 8008774:	40010400 	.word	0x40010400

08008778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	807b      	strh	r3, [r7, #2]
 8008784:	4613      	mov	r3, r2
 8008786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008788:	787b      	ldrb	r3, [r7, #1]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800878e:	887a      	ldrh	r2, [r7, #2]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008794:	e002      	b.n	800879c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008796:	887a      	ldrh	r2, [r7, #2]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e081      	b.n	80088be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fa ff9a 	bl	8003708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2224      	movs	r2, #36	; 0x24
 80087d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0201 	bic.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008808:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d107      	bne.n	8008822 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800881e:	609a      	str	r2, [r3, #8]
 8008820:	e006      	b.n	8008830 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800882e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d104      	bne.n	8008842 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008840:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	6812      	ldr	r2, [r2, #0]
 800884c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008854:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008864:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	69d9      	ldr	r1, [r3, #28]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1a      	ldr	r2, [r3, #32]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e021      	b.n	800891c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2224      	movs	r2, #36	; 0x24
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0201 	bic.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fa ff67 	bl	80037c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	461a      	mov	r2, r3
 8008932:	4603      	mov	r3, r0
 8008934:	817b      	strh	r3, [r7, #10]
 8008936:	460b      	mov	r3, r1
 8008938:	813b      	strh	r3, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b20      	cmp	r3, #32
 8008948:	f040 80f9 	bne.w	8008b3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_I2C_Mem_Write+0x34>
 8008952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008954:	2b00      	cmp	r3, #0
 8008956:	d105      	bne.n	8008964 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800895e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e0ed      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_I2C_Mem_Write+0x4e>
 800896e:	2302      	movs	r3, #2
 8008970:	e0e6      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800897a:	f7fe f937 	bl	8006bec <HAL_GetTick>
 800897e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2319      	movs	r3, #25
 8008986:	2201      	movs	r2, #1
 8008988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fadd 	bl	8008f4c <I2C_WaitOnFlagUntilTimeout>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0d1      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2221      	movs	r2, #33	; 0x21
 80089a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2240      	movs	r2, #64	; 0x40
 80089a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a3a      	ldr	r2, [r7, #32]
 80089b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089c4:	88f8      	ldrh	r0, [r7, #6]
 80089c6:	893a      	ldrh	r2, [r7, #8]
 80089c8:	8979      	ldrh	r1, [r7, #10]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	4603      	mov	r3, r0
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f9ed 	bl	8008db4 <I2C_RequestMemoryWrite>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d005      	beq.n	80089ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0a9      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2bff      	cmp	r3, #255	; 0xff
 80089f4:	d90e      	bls.n	8008a14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	22ff      	movs	r2, #255	; 0xff
 80089fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	8979      	ldrh	r1, [r7, #10]
 8008a04:	2300      	movs	r3, #0
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fc45 	bl	800929c <I2C_TransferConfig>
 8008a12:	e00f      	b.n	8008a34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	8979      	ldrh	r1, [r7, #10]
 8008a26:	2300      	movs	r3, #0
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fc34 	bl	800929c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fac7 	bl	8008fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e07b      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d034      	beq.n	8008aec <HAL_I2C_Mem_Write+0x1c8>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d130      	bne.n	8008aec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	2200      	movs	r2, #0
 8008a92:	2180      	movs	r1, #128	; 0x80
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fa59 	bl	8008f4c <I2C_WaitOnFlagUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e04d      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2bff      	cmp	r3, #255	; 0xff
 8008aac:	d90e      	bls.n	8008acc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	22ff      	movs	r2, #255	; 0xff
 8008ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	8979      	ldrh	r1, [r7, #10]
 8008abc:	2300      	movs	r3, #0
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 fbe9 	bl	800929c <I2C_TransferConfig>
 8008aca:	e00f      	b.n	8008aec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	8979      	ldrh	r1, [r7, #10]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fbd8 	bl	800929c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d19e      	bne.n	8008a34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 faa6 	bl	800904c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e01a      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6859      	ldr	r1, [r3, #4]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <HAL_I2C_Mem_Write+0x224>)
 8008b1e:	400b      	ands	r3, r1
 8008b20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e000      	b.n	8008b40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008b3e:	2302      	movs	r3, #2
  }
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	fe00e800 	.word	0xfe00e800

08008b4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af02      	add	r7, sp, #8
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	4608      	mov	r0, r1
 8008b56:	4611      	mov	r1, r2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	817b      	strh	r3, [r7, #10]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	813b      	strh	r3, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	f040 80fd 	bne.w	8008d6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <HAL_I2C_Mem_Read+0x34>
 8008b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d105      	bne.n	8008b8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e0f1      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_I2C_Mem_Read+0x4e>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e0ea      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ba2:	f7fe f823 	bl	8006bec <HAL_GetTick>
 8008ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	2319      	movs	r3, #25
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f9c9 	bl	8008f4c <I2C_WaitOnFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0d5      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2222      	movs	r2, #34	; 0x22
 8008bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2240      	movs	r2, #64	; 0x40
 8008bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bec:	88f8      	ldrh	r0, [r7, #6]
 8008bee:	893a      	ldrh	r2, [r7, #8]
 8008bf0:	8979      	ldrh	r1, [r7, #10]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f92d 	bl	8008e5c <I2C_RequestMemoryRead>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e0ad      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2bff      	cmp	r3, #255	; 0xff
 8008c1c:	d90e      	bls.n	8008c3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	22ff      	movs	r2, #255	; 0xff
 8008c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	8979      	ldrh	r1, [r7, #10]
 8008c2c:	4b52      	ldr	r3, [pc, #328]	; (8008d78 <HAL_I2C_Mem_Read+0x22c>)
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fb31 	bl	800929c <I2C_TransferConfig>
 8008c3a:	e00f      	b.n	8008c5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	8979      	ldrh	r1, [r7, #10]
 8008c4e:	4b4a      	ldr	r3, [pc, #296]	; (8008d78 <HAL_I2C_Mem_Read+0x22c>)
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fb20 	bl	800929c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	2200      	movs	r2, #0
 8008c64:	2104      	movs	r1, #4
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 f970 	bl	8008f4c <I2C_WaitOnFlagUntilTimeout>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e07c      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d034      	beq.n	8008d1c <HAL_I2C_Mem_Read+0x1d0>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d130      	bne.n	8008d1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2180      	movs	r1, #128	; 0x80
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f941 	bl	8008f4c <I2C_WaitOnFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e04d      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2bff      	cmp	r3, #255	; 0xff
 8008cdc:	d90e      	bls.n	8008cfc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	22ff      	movs	r2, #255	; 0xff
 8008ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	8979      	ldrh	r1, [r7, #10]
 8008cec:	2300      	movs	r3, #0
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fad1 	bl	800929c <I2C_TransferConfig>
 8008cfa:	e00f      	b.n	8008d1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	8979      	ldrh	r1, [r7, #10]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fac0 	bl	800929c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d19a      	bne.n	8008c5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 f98e 	bl	800904c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e01a      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6859      	ldr	r1, [r3, #4]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_I2C_Mem_Read+0x230>)
 8008d4e:	400b      	ands	r3, r1
 8008d50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e000      	b.n	8008d70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d6e:	2302      	movs	r3, #2
  }
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	80002400 	.word	0x80002400
 8008d7c:	fe00e800 	.word	0xfe00e800

08008d80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d8e:	b2db      	uxtb	r3, r3
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	817b      	strh	r3, [r7, #10]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	813b      	strh	r3, [r7, #8]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008dce:	88fb      	ldrh	r3, [r7, #6]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	8979      	ldrh	r1, [r7, #10]
 8008dd4:	4b20      	ldr	r3, [pc, #128]	; (8008e58 <I2C_RequestMemoryWrite+0xa4>)
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fa5d 	bl	800929c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	69b9      	ldr	r1, [r7, #24]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 f8f0 	bl	8008fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e02c      	b.n	8008e50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d105      	bne.n	8008e08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008dfc:	893b      	ldrh	r3, [r7, #8]
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	629a      	str	r2, [r3, #40]	; 0x28
 8008e06:	e015      	b.n	8008e34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e08:	893b      	ldrh	r3, [r7, #8]
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	69b9      	ldr	r1, [r7, #24]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f8d6 	bl	8008fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e012      	b.n	8008e50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e2a:	893b      	ldrh	r3, [r7, #8]
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2180      	movs	r1, #128	; 0x80
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f884 	bl	8008f4c <I2C_WaitOnFlagUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	80002000 	.word	0x80002000

08008e5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	4608      	mov	r0, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	817b      	strh	r3, [r7, #10]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	813b      	strh	r3, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	8979      	ldrh	r1, [r7, #10]
 8008e7c:	4b20      	ldr	r3, [pc, #128]	; (8008f00 <I2C_RequestMemoryRead+0xa4>)
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	2300      	movs	r3, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fa0a 	bl	800929c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e88:	69fa      	ldr	r2, [r7, #28]
 8008e8a:	69b9      	ldr	r1, [r7, #24]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f89d 	bl	8008fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e02c      	b.n	8008ef6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e9c:	88fb      	ldrh	r3, [r7, #6]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d105      	bne.n	8008eae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ea2:	893b      	ldrh	r3, [r7, #8]
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8008eac:	e015      	b.n	8008eda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008eae:	893b      	ldrh	r3, [r7, #8]
 8008eb0:	0a1b      	lsrs	r3, r3, #8
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	69b9      	ldr	r1, [r7, #24]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f883 	bl	8008fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e012      	b.n	8008ef6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ed0:	893b      	ldrh	r3, [r7, #8]
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2140      	movs	r1, #64	; 0x40
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f831 	bl	8008f4c <I2C_WaitOnFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e000      	b.n	8008ef6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	80002000 	.word	0x80002000

08008f04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d103      	bne.n	8008f22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d007      	beq.n	8008f40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0201 	orr.w	r2, r2, #1
 8008f3e:	619a      	str	r2, [r3, #24]
  }
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f5c:	e022      	b.n	8008fa4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f64:	d01e      	beq.n	8008fa4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f66:	f7fd fe41 	bl	8006bec <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d302      	bcc.n	8008f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d113      	bne.n	8008fa4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f80:	f043 0220 	orr.w	r2, r3, #32
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e00f      	b.n	8008fc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4013      	ands	r3, r2
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	bf0c      	ite	eq
 8008fb4:	2301      	moveq	r3, #1
 8008fb6:	2300      	movne	r3, #0
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d0cd      	beq.n	8008f5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008fd8:	e02c      	b.n	8009034 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 f870 	bl	80090c4 <I2C_IsErrorOccurred>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e02a      	b.n	8009044 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d01e      	beq.n	8009034 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff6:	f7fd fdf9 	bl	8006bec <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	429a      	cmp	r2, r3
 8009004:	d302      	bcc.n	800900c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d113      	bne.n	8009034 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009010:	f043 0220 	orr.w	r2, r3, #32
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e007      	b.n	8009044 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b02      	cmp	r3, #2
 8009040:	d1cb      	bne.n	8008fda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009058:	e028      	b.n	80090ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f830 	bl	80090c4 <I2C_IsErrorOccurred>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e026      	b.n	80090bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800906e:	f7fd fdbd 	bl	8006bec <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	429a      	cmp	r2, r3
 800907c:	d302      	bcc.n	8009084 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d113      	bne.n	80090ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009088:	f043 0220 	orr.w	r2, r3, #32
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e007      	b.n	80090bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b20      	cmp	r3, #32
 80090b8:	d1cf      	bne.n	800905a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	; 0x28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d075      	beq.n	80091dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2210      	movs	r2, #16
 80090f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090f8:	e056      	b.n	80091a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d052      	beq.n	80091a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009102:	f7fd fd73 	bl	8006bec <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	429a      	cmp	r2, r3
 8009110:	d302      	bcc.n	8009118 <I2C_IsErrorOccurred+0x54>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d147      	bne.n	80091a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800912a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800913a:	d12e      	bne.n	800919a <I2C_IsErrorOccurred+0xd6>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009142:	d02a      	beq.n	800919a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009144:	7cfb      	ldrb	r3, [r7, #19]
 8009146:	2b20      	cmp	r3, #32
 8009148:	d027      	beq.n	800919a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009158:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800915a:	f7fd fd47 	bl	8006bec <HAL_GetTick>
 800915e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009160:	e01b      	b.n	800919a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009162:	f7fd fd43 	bl	8006bec <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b19      	cmp	r3, #25
 800916e:	d914      	bls.n	800919a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009174:	f043 0220 	orr.w	r2, r3, #32
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d1dc      	bne.n	8009162 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d003      	beq.n	80091be <I2C_IsErrorOccurred+0xfa>
 80091b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d09d      	beq.n	80090fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80091be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d103      	bne.n	80091ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2220      	movs	r2, #32
 80091cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	f043 0304 	orr.w	r3, r3, #4
 80091d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00b      	beq.n	8009206 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	f043 0301 	orr.w	r3, r3, #1
 80091f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	f043 0308 	orr.w	r3, r3, #8
 8009216:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009220:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f043 0302 	orr.w	r3, r3, #2
 8009238:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009242:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800924a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800924e:	2b00      	cmp	r3, #0
 8009250:	d01c      	beq.n	800928c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fe56 	bl	8008f04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6859      	ldr	r1, [r3, #4]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <I2C_IsErrorOccurred+0x1d4>)
 8009264:	400b      	ands	r3, r1
 8009266:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	431a      	orrs	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800928c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009290:	4618      	mov	r0, r3
 8009292:	3728      	adds	r7, #40	; 0x28
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	fe00e800 	.word	0xfe00e800

0800929c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	607b      	str	r3, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	817b      	strh	r3, [r7, #10]
 80092aa:	4613      	mov	r3, r2
 80092ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80092ae:	897b      	ldrh	r3, [r7, #10]
 80092b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80092b4:	7a7b      	ldrb	r3, [r7, #9]
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80092bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	0d5b      	lsrs	r3, r3, #21
 80092d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80092da:	4b08      	ldr	r3, [pc, #32]	; (80092fc <I2C_TransferConfig+0x60>)
 80092dc:	430b      	orrs	r3, r1
 80092de:	43db      	mvns	r3, r3
 80092e0:	ea02 0103 	and.w	r1, r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	03ff63ff 	.word	0x03ff63ff

08009300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b20      	cmp	r3, #32
 8009314:	d138      	bne.n	8009388 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009320:	2302      	movs	r3, #2
 8009322:	e032      	b.n	800938a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2224      	movs	r2, #36	; 0x24
 8009330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0201 	bic.w	r2, r2, #1
 8009342:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009352:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6819      	ldr	r1, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	e000      	b.n	800938a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009388:	2302      	movs	r3, #2
  }
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b20      	cmp	r3, #32
 80093aa:	d139      	bne.n	8009420 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80093b6:	2302      	movs	r3, #2
 80093b8:	e033      	b.n	8009422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2224      	movs	r2, #36	; 0x24
 80093c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0201 	bic.w	r2, r2, #1
 80093d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80093e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0201 	orr.w	r2, r2, #1
 800940a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	e000      	b.n	8009422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009420:	2302      	movs	r3, #2
  }
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <HAL_PWREx_GetVoltageRange+0x18>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800943c:	4618      	mov	r0, r3
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40007000 	.word	0x40007000

0800944c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800945a:	d130      	bne.n	80094be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800945c:	4b23      	ldr	r3, [pc, #140]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009468:	d038      	beq.n	80094dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800946a:	4b20      	ldr	r3, [pc, #128]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009472:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009478:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800947a:	4b1d      	ldr	r3, [pc, #116]	; (80094f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2232      	movs	r2, #50	; 0x32
 8009480:	fb02 f303 	mul.w	r3, r2, r3
 8009484:	4a1b      	ldr	r2, [pc, #108]	; (80094f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0c9b      	lsrs	r3, r3, #18
 800948c:	3301      	adds	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009490:	e002      	b.n	8009498 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3b01      	subs	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009498:	4b14      	ldr	r3, [pc, #80]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094a4:	d102      	bne.n	80094ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1f2      	bne.n	8009492 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80094ac:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b8:	d110      	bne.n	80094dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e00f      	b.n	80094de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80094be:	4b0b      	ldr	r3, [pc, #44]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ca:	d007      	beq.n	80094dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80094cc:	4b07      	ldr	r3, [pc, #28]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80094d4:	4a05      	ldr	r2, [pc, #20]	; (80094ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	40007000 	.word	0x40007000
 80094f0:	20000000 	.word	0x20000000
 80094f4:	431bde83 	.word	0x431bde83

080094f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e3ca      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800950a:	4b97      	ldr	r3, [pc, #604]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f003 030c 	and.w	r3, r3, #12
 8009512:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009514:	4b94      	ldr	r3, [pc, #592]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0310 	and.w	r3, r3, #16
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 80e4 	beq.w	80096f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <HAL_RCC_OscConfig+0x4a>
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b0c      	cmp	r3, #12
 8009536:	f040 808b 	bne.w	8009650 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b01      	cmp	r3, #1
 800953e:	f040 8087 	bne.w	8009650 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009542:	4b89      	ldr	r3, [pc, #548]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <HAL_RCC_OscConfig+0x62>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e3a2      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1a      	ldr	r2, [r3, #32]
 800955e:	4b82      	ldr	r3, [pc, #520]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <HAL_RCC_OscConfig+0x7c>
 800956a:	4b7f      	ldr	r3, [pc, #508]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009572:	e005      	b.n	8009580 <HAL_RCC_OscConfig+0x88>
 8009574:	4b7c      	ldr	r3, [pc, #496]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800957a:	091b      	lsrs	r3, r3, #4
 800957c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009580:	4293      	cmp	r3, r2
 8009582:	d223      	bcs.n	80095cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fd55 	bl	800a038 <RCC_SetFlashLatencyFromMSIRange>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e383      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009598:	4b73      	ldr	r3, [pc, #460]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a72      	ldr	r2, [pc, #456]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800959e:	f043 0308 	orr.w	r3, r3, #8
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	4b70      	ldr	r3, [pc, #448]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	496d      	ldr	r1, [pc, #436]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095b6:	4b6c      	ldr	r3, [pc, #432]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	4968      	ldr	r1, [pc, #416]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	604b      	str	r3, [r1, #4]
 80095ca:	e025      	b.n	8009618 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80095cc:	4b66      	ldr	r3, [pc, #408]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a65      	ldr	r2, [pc, #404]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095d2:	f043 0308 	orr.w	r3, r3, #8
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	4b63      	ldr	r3, [pc, #396]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	4960      	ldr	r1, [pc, #384]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095ea:	4b5f      	ldr	r3, [pc, #380]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	495b      	ldr	r1, [pc, #364]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d109      	bne.n	8009618 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	4618      	mov	r0, r3
 800960a:	f000 fd15 	bl	800a038 <RCC_SetFlashLatencyFromMSIRange>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e343      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009618:	f000 fc4a 	bl	8009eb0 <HAL_RCC_GetSysClockFreq>
 800961c:	4602      	mov	r2, r0
 800961e:	4b52      	ldr	r3, [pc, #328]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	091b      	lsrs	r3, r3, #4
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	4950      	ldr	r1, [pc, #320]	; (800976c <HAL_RCC_OscConfig+0x274>)
 800962a:	5ccb      	ldrb	r3, [r1, r3]
 800962c:	f003 031f 	and.w	r3, r3, #31
 8009630:	fa22 f303 	lsr.w	r3, r2, r3
 8009634:	4a4e      	ldr	r2, [pc, #312]	; (8009770 <HAL_RCC_OscConfig+0x278>)
 8009636:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009638:	4b4e      	ldr	r3, [pc, #312]	; (8009774 <HAL_RCC_OscConfig+0x27c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f7fd fa85 	bl	8006b4c <HAL_InitTick>
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d052      	beq.n	80096f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	e327      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d032      	beq.n	80096be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009658:	4b43      	ldr	r3, [pc, #268]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a42      	ldr	r2, [pc, #264]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009664:	f7fd fac2 	bl	8006bec <HAL_GetTick>
 8009668:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800966c:	f7fd fabe 	bl	8006bec <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e310      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800967e:	4b3a      	ldr	r3, [pc, #232]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f0      	beq.n	800966c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800968a:	4b37      	ldr	r3, [pc, #220]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a36      	ldr	r2, [pc, #216]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009690:	f043 0308 	orr.w	r3, r3, #8
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	4b34      	ldr	r3, [pc, #208]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	4931      	ldr	r1, [pc, #196]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096a8:	4b2f      	ldr	r3, [pc, #188]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	492c      	ldr	r1, [pc, #176]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80096b8:	4313      	orrs	r3, r2
 80096ba:	604b      	str	r3, [r1, #4]
 80096bc:	e01a      	b.n	80096f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80096be:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a29      	ldr	r2, [pc, #164]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80096c4:	f023 0301 	bic.w	r3, r3, #1
 80096c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80096ca:	f7fd fa8f 	bl	8006bec <HAL_GetTick>
 80096ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80096d0:	e008      	b.n	80096e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80096d2:	f7fd fa8b 	bl	8006bec <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d901      	bls.n	80096e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e2dd      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80096e4:	4b20      	ldr	r3, [pc, #128]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1f0      	bne.n	80096d2 <HAL_RCC_OscConfig+0x1da>
 80096f0:	e000      	b.n	80096f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80096f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d074      	beq.n	80097ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	2b08      	cmp	r3, #8
 8009704:	d005      	beq.n	8009712 <HAL_RCC_OscConfig+0x21a>
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	2b0c      	cmp	r3, #12
 800970a:	d10e      	bne.n	800972a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2b03      	cmp	r3, #3
 8009710:	d10b      	bne.n	800972a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009712:	4b15      	ldr	r3, [pc, #84]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d064      	beq.n	80097e8 <HAL_RCC_OscConfig+0x2f0>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d160      	bne.n	80097e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e2ba      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009732:	d106      	bne.n	8009742 <HAL_RCC_OscConfig+0x24a>
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a0b      	ldr	r2, [pc, #44]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800973a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	e026      	b.n	8009790 <HAL_RCC_OscConfig+0x298>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800974a:	d115      	bne.n	8009778 <HAL_RCC_OscConfig+0x280>
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a05      	ldr	r2, [pc, #20]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 8009752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	4b03      	ldr	r3, [pc, #12]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a02      	ldr	r2, [pc, #8]	; (8009768 <HAL_RCC_OscConfig+0x270>)
 800975e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	e014      	b.n	8009790 <HAL_RCC_OscConfig+0x298>
 8009766:	bf00      	nop
 8009768:	40021000 	.word	0x40021000
 800976c:	080140e8 	.word	0x080140e8
 8009770:	20000000 	.word	0x20000000
 8009774:	20000004 	.word	0x20000004
 8009778:	4ba0      	ldr	r3, [pc, #640]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a9f      	ldr	r2, [pc, #636]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800977e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	4b9d      	ldr	r3, [pc, #628]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a9c      	ldr	r2, [pc, #624]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800978a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800978e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d013      	beq.n	80097c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009798:	f7fd fa28 	bl	8006bec <HAL_GetTick>
 800979c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800979e:	e008      	b.n	80097b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097a0:	f7fd fa24 	bl	8006bec <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b64      	cmp	r3, #100	; 0x64
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e276      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097b2:	4b92      	ldr	r3, [pc, #584]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0f0      	beq.n	80097a0 <HAL_RCC_OscConfig+0x2a8>
 80097be:	e014      	b.n	80097ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c0:	f7fd fa14 	bl	8006bec <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097c8:	f7fd fa10 	bl	8006bec <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b64      	cmp	r3, #100	; 0x64
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e262      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097da:	4b88      	ldr	r3, [pc, #544]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1f0      	bne.n	80097c8 <HAL_RCC_OscConfig+0x2d0>
 80097e6:	e000      	b.n	80097ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d060      	beq.n	80098b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d005      	beq.n	8009808 <HAL_RCC_OscConfig+0x310>
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	2b0c      	cmp	r3, #12
 8009800:	d119      	bne.n	8009836 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b02      	cmp	r3, #2
 8009806:	d116      	bne.n	8009836 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009808:	4b7c      	ldr	r3, [pc, #496]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <HAL_RCC_OscConfig+0x328>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e23f      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009820:	4b76      	ldr	r3, [pc, #472]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	061b      	lsls	r3, r3, #24
 800982e:	4973      	ldr	r1, [pc, #460]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009830:	4313      	orrs	r3, r2
 8009832:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009834:	e040      	b.n	80098b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d023      	beq.n	8009886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800983e:	4b6f      	ldr	r3, [pc, #444]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a6e      	ldr	r2, [pc, #440]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800984a:	f7fd f9cf 	bl	8006bec <HAL_GetTick>
 800984e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009850:	e008      	b.n	8009864 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009852:	f7fd f9cb 	bl	8006bec <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e21d      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009864:	4b65      	ldr	r3, [pc, #404]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0f0      	beq.n	8009852 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009870:	4b62      	ldr	r3, [pc, #392]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	061b      	lsls	r3, r3, #24
 800987e:	495f      	ldr	r1, [pc, #380]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009880:	4313      	orrs	r3, r2
 8009882:	604b      	str	r3, [r1, #4]
 8009884:	e018      	b.n	80098b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009886:	4b5d      	ldr	r3, [pc, #372]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a5c      	ldr	r2, [pc, #368]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800988c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009892:	f7fd f9ab 	bl	8006bec <HAL_GetTick>
 8009896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009898:	e008      	b.n	80098ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800989a:	f7fd f9a7 	bl	8006bec <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e1f9      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80098ac:	4b53      	ldr	r3, [pc, #332]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1f0      	bne.n	800989a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d03c      	beq.n	800993e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01c      	beq.n	8009906 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098cc:	4b4b      	ldr	r3, [pc, #300]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80098ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098d2:	4a4a      	ldr	r2, [pc, #296]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80098d4:	f043 0301 	orr.w	r3, r3, #1
 80098d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098dc:	f7fd f986 	bl	8006bec <HAL_GetTick>
 80098e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098e4:	f7fd f982 	bl	8006bec <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e1d4      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098f6:	4b41      	ldr	r3, [pc, #260]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80098f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0ef      	beq.n	80098e4 <HAL_RCC_OscConfig+0x3ec>
 8009904:	e01b      	b.n	800993e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009906:	4b3d      	ldr	r3, [pc, #244]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800990c:	4a3b      	ldr	r2, [pc, #236]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009916:	f7fd f969 	bl	8006bec <HAL_GetTick>
 800991a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800991c:	e008      	b.n	8009930 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800991e:	f7fd f965 	bl	8006bec <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d901      	bls.n	8009930 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e1b7      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009930:	4b32      	ldr	r3, [pc, #200]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1ef      	bne.n	800991e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80a6 	beq.w	8009a98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800994c:	2300      	movs	r3, #0
 800994e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009950:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10d      	bne.n	8009978 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800995c:	4b27      	ldr	r3, [pc, #156]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800995e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009960:	4a26      	ldr	r2, [pc, #152]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 8009962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009966:	6593      	str	r3, [r2, #88]	; 0x58
 8009968:	4b24      	ldr	r3, [pc, #144]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 800996a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009974:	2301      	movs	r3, #1
 8009976:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009978:	4b21      	ldr	r3, [pc, #132]	; (8009a00 <HAL_RCC_OscConfig+0x508>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009980:	2b00      	cmp	r3, #0
 8009982:	d118      	bne.n	80099b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009984:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <HAL_RCC_OscConfig+0x508>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1d      	ldr	r2, [pc, #116]	; (8009a00 <HAL_RCC_OscConfig+0x508>)
 800998a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800998e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009990:	f7fd f92c 	bl	8006bec <HAL_GetTick>
 8009994:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009996:	e008      	b.n	80099aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009998:	f7fd f928 	bl	8006bec <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e17a      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099aa:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <HAL_RCC_OscConfig+0x508>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0f0      	beq.n	8009998 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d108      	bne.n	80099d0 <HAL_RCC_OscConfig+0x4d8>
 80099be:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80099c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c4:	4a0d      	ldr	r2, [pc, #52]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80099ce:	e029      	b.n	8009a24 <HAL_RCC_OscConfig+0x52c>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b05      	cmp	r3, #5
 80099d6:	d115      	bne.n	8009a04 <HAL_RCC_OscConfig+0x50c>
 80099d8:	4b08      	ldr	r3, [pc, #32]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80099da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099de:	4a07      	ldr	r2, [pc, #28]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80099e0:	f043 0304 	orr.w	r3, r3, #4
 80099e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80099e8:	4b04      	ldr	r3, [pc, #16]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80099ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ee:	4a03      	ldr	r2, [pc, #12]	; (80099fc <HAL_RCC_OscConfig+0x504>)
 80099f0:	f043 0301 	orr.w	r3, r3, #1
 80099f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80099f8:	e014      	b.n	8009a24 <HAL_RCC_OscConfig+0x52c>
 80099fa:	bf00      	nop
 80099fc:	40021000 	.word	0x40021000
 8009a00:	40007000 	.word	0x40007000
 8009a04:	4b9c      	ldr	r3, [pc, #624]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0a:	4a9b      	ldr	r2, [pc, #620]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a0c:	f023 0301 	bic.w	r3, r3, #1
 8009a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009a14:	4b98      	ldr	r3, [pc, #608]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a1a:	4a97      	ldr	r2, [pc, #604]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a1c:	f023 0304 	bic.w	r3, r3, #4
 8009a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d016      	beq.n	8009a5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2c:	f7fd f8de 	bl	8006bec <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a32:	e00a      	b.n	8009a4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a34:	f7fd f8da 	bl	8006bec <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e12a      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a4a:	4b8b      	ldr	r3, [pc, #556]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0ed      	beq.n	8009a34 <HAL_RCC_OscConfig+0x53c>
 8009a58:	e015      	b.n	8009a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a5a:	f7fd f8c7 	bl	8006bec <HAL_GetTick>
 8009a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a60:	e00a      	b.n	8009a78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a62:	f7fd f8c3 	bl	8006bec <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e113      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a78:	4b7f      	ldr	r3, [pc, #508]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1ed      	bne.n	8009a62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a86:	7ffb      	ldrb	r3, [r7, #31]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d105      	bne.n	8009a98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a8c:	4b7a      	ldr	r3, [pc, #488]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a90:	4a79      	ldr	r2, [pc, #484]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80fe 	beq.w	8009c9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	f040 80d0 	bne.w	8009c4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009aac:	4b72      	ldr	r3, [pc, #456]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f003 0203 	and.w	r2, r3, #3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d130      	bne.n	8009b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	3b01      	subs	r3, #1
 8009acc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d127      	bne.n	8009b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009adc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d11f      	bne.n	8009b22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009aec:	2a07      	cmp	r2, #7
 8009aee:	bf14      	ite	ne
 8009af0:	2201      	movne	r2, #1
 8009af2:	2200      	moveq	r2, #0
 8009af4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d113      	bne.n	8009b22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	3b01      	subs	r3, #1
 8009b08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d109      	bne.n	8009b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d06e      	beq.n	8009c00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	2b0c      	cmp	r3, #12
 8009b26:	d069      	beq.n	8009bfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009b28:	4b53      	ldr	r3, [pc, #332]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d105      	bne.n	8009b40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009b34:	4b50      	ldr	r3, [pc, #320]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e0ad      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009b44:	4b4c      	ldr	r3, [pc, #304]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a4b      	ldr	r2, [pc, #300]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009b50:	f7fd f84c 	bl	8006bec <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b58:	f7fd f848 	bl	8006bec <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e09a      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b6a:	4b43      	ldr	r3, [pc, #268]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f0      	bne.n	8009b58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b76:	4b40      	ldr	r3, [pc, #256]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	4b40      	ldr	r3, [pc, #256]	; (8009c7c <HAL_RCC_OscConfig+0x784>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009b86:	3a01      	subs	r2, #1
 8009b88:	0112      	lsls	r2, r2, #4
 8009b8a:	4311      	orrs	r1, r2
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b90:	0212      	lsls	r2, r2, #8
 8009b92:	4311      	orrs	r1, r2
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009b98:	0852      	lsrs	r2, r2, #1
 8009b9a:	3a01      	subs	r2, #1
 8009b9c:	0552      	lsls	r2, r2, #21
 8009b9e:	4311      	orrs	r1, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009ba4:	0852      	lsrs	r2, r2, #1
 8009ba6:	3a01      	subs	r2, #1
 8009ba8:	0652      	lsls	r2, r2, #25
 8009baa:	4311      	orrs	r1, r2
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bb0:	0912      	lsrs	r2, r2, #4
 8009bb2:	0452      	lsls	r2, r2, #17
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	4930      	ldr	r1, [pc, #192]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009bbc:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a2d      	ldr	r2, [pc, #180]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009bc8:	4b2b      	ldr	r3, [pc, #172]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4a2a      	ldr	r2, [pc, #168]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009bd4:	f7fd f80a 	bl	8006bec <HAL_GetTick>
 8009bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bda:	e008      	b.n	8009bee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bdc:	f7fd f806 	bl	8006bec <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e058      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bee:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0f0      	beq.n	8009bdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009bfa:	e050      	b.n	8009c9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e04f      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c00:	4b1d      	ldr	r3, [pc, #116]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d148      	bne.n	8009c9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009c0c:	4b1a      	ldr	r3, [pc, #104]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a19      	ldr	r2, [pc, #100]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009c18:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	4a16      	ldr	r2, [pc, #88]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c24:	f7fc ffe2 	bl	8006bec <HAL_GetTick>
 8009c28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c2a:	e008      	b.n	8009c3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c2c:	f7fc ffde 	bl	8006bec <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e030      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c3e:	4b0e      	ldr	r3, [pc, #56]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f0      	beq.n	8009c2c <HAL_RCC_OscConfig+0x734>
 8009c4a:	e028      	b.n	8009c9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b0c      	cmp	r3, #12
 8009c50:	d023      	beq.n	8009c9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a08      	ldr	r2, [pc, #32]	; (8009c78 <HAL_RCC_OscConfig+0x780>)
 8009c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c5e:	f7fc ffc5 	bl	8006bec <HAL_GetTick>
 8009c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c64:	e00c      	b.n	8009c80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c66:	f7fc ffc1 	bl	8006bec <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d905      	bls.n	8009c80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e013      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
 8009c78:	40021000 	.word	0x40021000
 8009c7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c80:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <HAL_RCC_OscConfig+0x7b0>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1ec      	bne.n	8009c66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <HAL_RCC_OscConfig+0x7b0>)
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	4905      	ldr	r1, [pc, #20]	; (8009ca8 <HAL_RCC_OscConfig+0x7b0>)
 8009c92:	4b06      	ldr	r3, [pc, #24]	; (8009cac <HAL_RCC_OscConfig+0x7b4>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	60cb      	str	r3, [r1, #12]
 8009c98:	e001      	b.n	8009c9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e000      	b.n	8009ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	40021000 	.word	0x40021000
 8009cac:	feeefffc 	.word	0xfeeefffc

08009cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e0e7      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cc4:	4b75      	ldr	r3, [pc, #468]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d910      	bls.n	8009cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cd2:	4b72      	ldr	r3, [pc, #456]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f023 0207 	bic.w	r2, r3, #7
 8009cda:	4970      	ldr	r1, [pc, #448]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ce2:	4b6e      	ldr	r3, [pc, #440]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0307 	and.w	r3, r3, #7
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d001      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e0cf      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d010      	beq.n	8009d22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	4b66      	ldr	r3, [pc, #408]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d908      	bls.n	8009d22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d10:	4b63      	ldr	r3, [pc, #396]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	4960      	ldr	r1, [pc, #384]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d04c      	beq.n	8009dc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d107      	bne.n	8009d46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d36:	4b5a      	ldr	r3, [pc, #360]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d121      	bne.n	8009d86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e0a6      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d107      	bne.n	8009d5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d4e:	4b54      	ldr	r3, [pc, #336]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d115      	bne.n	8009d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e09a      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d107      	bne.n	8009d76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d66:	4b4e      	ldr	r3, [pc, #312]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d109      	bne.n	8009d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e08e      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d76:	4b4a      	ldr	r3, [pc, #296]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e086      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d86:	4b46      	ldr	r3, [pc, #280]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f023 0203 	bic.w	r2, r3, #3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	4943      	ldr	r1, [pc, #268]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d98:	f7fc ff28 	bl	8006bec <HAL_GetTick>
 8009d9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d9e:	e00a      	b.n	8009db6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009da0:	f7fc ff24 	bl	8006bec <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d901      	bls.n	8009db6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e06e      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009db6:	4b3a      	ldr	r3, [pc, #232]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f003 020c 	and.w	r2, r3, #12
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d1eb      	bne.n	8009da0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d010      	beq.n	8009df6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	4b31      	ldr	r3, [pc, #196]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d208      	bcs.n	8009df6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009de4:	4b2e      	ldr	r3, [pc, #184]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	492b      	ldr	r1, [pc, #172]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009df6:	4b29      	ldr	r3, [pc, #164]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d210      	bcs.n	8009e26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e04:	4b25      	ldr	r3, [pc, #148]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f023 0207 	bic.w	r2, r3, #7
 8009e0c:	4923      	ldr	r1, [pc, #140]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e14:	4b21      	ldr	r3, [pc, #132]	; (8009e9c <HAL_RCC_ClockConfig+0x1ec>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d001      	beq.n	8009e26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e036      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d008      	beq.n	8009e44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e32:	4b1b      	ldr	r3, [pc, #108]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	4918      	ldr	r1, [pc, #96]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e40:	4313      	orrs	r3, r2
 8009e42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0308 	and.w	r3, r3, #8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d009      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e50:	4b13      	ldr	r3, [pc, #76]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	4910      	ldr	r1, [pc, #64]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009e64:	f000 f824 	bl	8009eb0 <HAL_RCC_GetSysClockFreq>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	091b      	lsrs	r3, r3, #4
 8009e70:	f003 030f 	and.w	r3, r3, #15
 8009e74:	490b      	ldr	r1, [pc, #44]	; (8009ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8009e76:	5ccb      	ldrb	r3, [r1, r3]
 8009e78:	f003 031f 	and.w	r3, r3, #31
 8009e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e80:	4a09      	ldr	r2, [pc, #36]	; (8009ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009e84:	4b09      	ldr	r3, [pc, #36]	; (8009eac <HAL_RCC_ClockConfig+0x1fc>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fc fe5f 	bl	8006b4c <HAL_InitTick>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	72fb      	strb	r3, [r7, #11]

  return status;
 8009e92:	7afb      	ldrb	r3, [r7, #11]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	40022000 	.word	0x40022000
 8009ea0:	40021000 	.word	0x40021000
 8009ea4:	080140e8 	.word	0x080140e8
 8009ea8:	20000000 	.word	0x20000000
 8009eac:	20000004 	.word	0x20000004

08009eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b089      	sub	sp, #36	; 0x24
 8009eb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	61fb      	str	r3, [r7, #28]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ebe:	4b3e      	ldr	r3, [pc, #248]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f003 030c 	and.w	r3, r3, #12
 8009ec6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ec8:	4b3b      	ldr	r3, [pc, #236]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0303 	and.w	r3, r3, #3
 8009ed0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d005      	beq.n	8009ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	2b0c      	cmp	r3, #12
 8009edc:	d121      	bne.n	8009f22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d11e      	bne.n	8009f22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009ee4:	4b34      	ldr	r3, [pc, #208]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0308 	and.w	r3, r3, #8
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d107      	bne.n	8009f00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009ef0:	4b31      	ldr	r3, [pc, #196]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	f003 030f 	and.w	r3, r3, #15
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	e005      	b.n	8009f0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009f00:	4b2d      	ldr	r3, [pc, #180]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	091b      	lsrs	r3, r3, #4
 8009f06:	f003 030f 	and.w	r3, r3, #15
 8009f0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009f0c:	4a2b      	ldr	r2, [pc, #172]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10d      	bne.n	8009f38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009f20:	e00a      	b.n	8009f38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d102      	bne.n	8009f2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009f28:	4b25      	ldr	r3, [pc, #148]	; (8009fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009f2a:	61bb      	str	r3, [r7, #24]
 8009f2c:	e004      	b.n	8009f38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	d101      	bne.n	8009f38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009f34:	4b23      	ldr	r3, [pc, #140]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009f36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b0c      	cmp	r3, #12
 8009f3c:	d134      	bne.n	8009fa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f3e:	4b1e      	ldr	r3, [pc, #120]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d003      	beq.n	8009f56 <HAL_RCC_GetSysClockFreq+0xa6>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d003      	beq.n	8009f5c <HAL_RCC_GetSysClockFreq+0xac>
 8009f54:	e005      	b.n	8009f62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009f56:	4b1a      	ldr	r3, [pc, #104]	; (8009fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009f58:	617b      	str	r3, [r7, #20]
      break;
 8009f5a:	e005      	b.n	8009f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009f5c:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009f5e:	617b      	str	r3, [r7, #20]
      break;
 8009f60:	e002      	b.n	8009f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	617b      	str	r3, [r7, #20]
      break;
 8009f66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f68:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	091b      	lsrs	r3, r3, #4
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	3301      	adds	r3, #1
 8009f74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009f76:	4b10      	ldr	r3, [pc, #64]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	0a1b      	lsrs	r3, r3, #8
 8009f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	fb03 f202 	mul.w	r2, r3, r2
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	0e5b      	lsrs	r3, r3, #25
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	3301      	adds	r3, #1
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009fa8:	69bb      	ldr	r3, [r7, #24]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3724      	adds	r7, #36	; 0x24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	40021000 	.word	0x40021000
 8009fbc:	08014100 	.word	0x08014100
 8009fc0:	00f42400 	.word	0x00f42400
 8009fc4:	007a1200 	.word	0x007a1200

08009fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fcc:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8009fce:	681b      	ldr	r3, [r3, #0]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	20000000 	.word	0x20000000

08009fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009fe4:	f7ff fff0 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	4b06      	ldr	r3, [pc, #24]	; (800a004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	0a1b      	lsrs	r3, r3, #8
 8009ff0:	f003 0307 	and.w	r3, r3, #7
 8009ff4:	4904      	ldr	r1, [pc, #16]	; (800a008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ff6:	5ccb      	ldrb	r3, [r1, r3]
 8009ff8:	f003 031f 	and.w	r3, r3, #31
 8009ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a000:	4618      	mov	r0, r3
 800a002:	bd80      	pop	{r7, pc}
 800a004:	40021000 	.word	0x40021000
 800a008:	080140f8 	.word	0x080140f8

0800a00c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a010:	f7ff ffda 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 800a014:	4602      	mov	r2, r0
 800a016:	4b06      	ldr	r3, [pc, #24]	; (800a030 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	0adb      	lsrs	r3, r3, #11
 800a01c:	f003 0307 	and.w	r3, r3, #7
 800a020:	4904      	ldr	r1, [pc, #16]	; (800a034 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a022:	5ccb      	ldrb	r3, [r1, r3]
 800a024:	f003 031f 	and.w	r3, r3, #31
 800a028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	40021000 	.word	0x40021000
 800a034:	080140f8 	.word	0x080140f8

0800a038 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a040:	2300      	movs	r3, #0
 800a042:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a044:	4b2a      	ldr	r3, [pc, #168]	; (800a0f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a050:	f7ff f9ee 	bl	8009430 <HAL_PWREx_GetVoltageRange>
 800a054:	6178      	str	r0, [r7, #20]
 800a056:	e014      	b.n	800a082 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a058:	4b25      	ldr	r3, [pc, #148]	; (800a0f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05c:	4a24      	ldr	r2, [pc, #144]	; (800a0f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a05e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a062:	6593      	str	r3, [r2, #88]	; 0x58
 800a064:	4b22      	ldr	r3, [pc, #136]	; (800a0f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a070:	f7ff f9de 	bl	8009430 <HAL_PWREx_GetVoltageRange>
 800a074:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a076:	4b1e      	ldr	r3, [pc, #120]	; (800a0f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07a:	4a1d      	ldr	r2, [pc, #116]	; (800a0f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a07c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a080:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a088:	d10b      	bne.n	800a0a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b80      	cmp	r3, #128	; 0x80
 800a08e:	d919      	bls.n	800a0c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2ba0      	cmp	r3, #160	; 0xa0
 800a094:	d902      	bls.n	800a09c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a096:	2302      	movs	r3, #2
 800a098:	613b      	str	r3, [r7, #16]
 800a09a:	e013      	b.n	800a0c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a09c:	2301      	movs	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	e010      	b.n	800a0c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b80      	cmp	r3, #128	; 0x80
 800a0a6:	d902      	bls.n	800a0ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	613b      	str	r3, [r7, #16]
 800a0ac:	e00a      	b.n	800a0c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b80      	cmp	r3, #128	; 0x80
 800a0b2:	d102      	bne.n	800a0ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	613b      	str	r3, [r7, #16]
 800a0b8:	e004      	b.n	800a0c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b70      	cmp	r3, #112	; 0x70
 800a0be:	d101      	bne.n	800a0c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a0c4:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f023 0207 	bic.w	r2, r3, #7
 800a0cc:	4909      	ldr	r1, [pc, #36]	; (800a0f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a0d4:	4b07      	ldr	r3, [pc, #28]	; (800a0f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d001      	beq.n	800a0e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	40021000 	.word	0x40021000
 800a0f4:	40022000 	.word	0x40022000

0800a0f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a100:	2300      	movs	r3, #0
 800a102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a104:	2300      	movs	r3, #0
 800a106:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a110:	2b00      	cmp	r3, #0
 800a112:	d041      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a118:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a11c:	d02a      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a11e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a122:	d824      	bhi.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a124:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a128:	d008      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a12a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a12e:	d81e      	bhi.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00a      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a138:	d010      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a13a:	e018      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a13c:	4b86      	ldr	r3, [pc, #536]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	4a85      	ldr	r2, [pc, #532]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a146:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a148:	e015      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3304      	adds	r3, #4
 800a14e:	2100      	movs	r1, #0
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fabb 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a156:	4603      	mov	r3, r0
 800a158:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a15a:	e00c      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3320      	adds	r3, #32
 800a160:	2100      	movs	r1, #0
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fba6 	bl	800a8b4 <RCCEx_PLLSAI2_Config>
 800a168:	4603      	mov	r3, r0
 800a16a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a16c:	e003      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	74fb      	strb	r3, [r7, #19]
      break;
 800a172:	e000      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a174:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a176:	7cfb      	ldrb	r3, [r7, #19]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10b      	bne.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a17c:	4b76      	ldr	r3, [pc, #472]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a18a:	4973      	ldr	r1, [pc, #460]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a192:	e001      	b.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a194:	7cfb      	ldrb	r3, [r7, #19]
 800a196:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d041      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a1ac:	d02a      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a1ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a1b2:	d824      	bhi.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a1b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b8:	d008      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a1ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1be:	d81e      	bhi.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00a      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a1c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1c8:	d010      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a1ca:	e018      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a1cc:	4b62      	ldr	r3, [pc, #392]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	4a61      	ldr	r2, [pc, #388]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1d8:	e015      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fa73 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1ea:	e00c      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3320      	adds	r3, #32
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fb5e 	bl	800a8b4 <RCCEx_PLLSAI2_Config>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1fc:	e003      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	74fb      	strb	r3, [r7, #19]
      break;
 800a202:	e000      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a204:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a206:	7cfb      	ldrb	r3, [r7, #19]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10b      	bne.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a20c:	4b52      	ldr	r3, [pc, #328]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a212:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a21a:	494f      	ldr	r1, [pc, #316]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a222:	e001      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a224:	7cfb      	ldrb	r3, [r7, #19]
 800a226:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80a0 	beq.w	800a376 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a236:	2300      	movs	r3, #0
 800a238:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a23a:	4b47      	ldr	r3, [pc, #284]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a24a:	2300      	movs	r3, #0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00d      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a250:	4b41      	ldr	r3, [pc, #260]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a254:	4a40      	ldr	r2, [pc, #256]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a25a:	6593      	str	r3, [r2, #88]	; 0x58
 800a25c:	4b3e      	ldr	r3, [pc, #248]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a264:	60bb      	str	r3, [r7, #8]
 800a266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a268:	2301      	movs	r3, #1
 800a26a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a26c:	4b3b      	ldr	r3, [pc, #236]	; (800a35c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a3a      	ldr	r2, [pc, #232]	; (800a35c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a276:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a278:	f7fc fcb8 	bl	8006bec <HAL_GetTick>
 800a27c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a27e:	e009      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a280:	f7fc fcb4 	bl	8006bec <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d902      	bls.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	74fb      	strb	r3, [r7, #19]
        break;
 800a292:	e005      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a294:	4b31      	ldr	r3, [pc, #196]	; (800a35c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0ef      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a2a0:	7cfb      	ldrb	r3, [r7, #19]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d15c      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a2a6:	4b2c      	ldr	r3, [pc, #176]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01f      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d019      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a2c4:	4b24      	ldr	r3, [pc, #144]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2d0:	4b21      	ldr	r3, [pc, #132]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d6:	4a20      	ldr	r2, [pc, #128]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2e0:	4b1d      	ldr	r3, [pc, #116]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2e6:	4a1c      	ldr	r2, [pc, #112]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a2f0:	4a19      	ldr	r2, [pc, #100]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d016      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a302:	f7fc fc73 	bl	8006bec <HAL_GetTick>
 800a306:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a308:	e00b      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a30a:	f7fc fc6f 	bl	8006bec <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	f241 3288 	movw	r2, #5000	; 0x1388
 800a318:	4293      	cmp	r3, r2
 800a31a:	d902      	bls.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	74fb      	strb	r3, [r7, #19]
            break;
 800a320:	e006      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a322:	4b0d      	ldr	r3, [pc, #52]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d0ec      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a330:	7cfb      	ldrb	r3, [r7, #19]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a336:	4b08      	ldr	r3, [pc, #32]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a346:	4904      	ldr	r1, [pc, #16]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a348:	4313      	orrs	r3, r2
 800a34a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a34e:	e009      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a350:	7cfb      	ldrb	r3, [r7, #19]
 800a352:	74bb      	strb	r3, [r7, #18]
 800a354:	e006      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a356:	bf00      	nop
 800a358:	40021000 	.word	0x40021000
 800a35c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a360:	7cfb      	ldrb	r3, [r7, #19]
 800a362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a364:	7c7b      	ldrb	r3, [r7, #17]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d105      	bne.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a36a:	4b9e      	ldr	r3, [pc, #632]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a36e:	4a9d      	ldr	r2, [pc, #628]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a382:	4b98      	ldr	r3, [pc, #608]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a388:	f023 0203 	bic.w	r2, r3, #3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	4994      	ldr	r1, [pc, #592]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a392:	4313      	orrs	r3, r2
 800a394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00a      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a3a4:	4b8f      	ldr	r3, [pc, #572]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3aa:	f023 020c 	bic.w	r2, r3, #12
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b2:	498c      	ldr	r1, [pc, #560]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0304 	and.w	r3, r3, #4
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a3c6:	4b87      	ldr	r3, [pc, #540]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	4983      	ldr	r1, [pc, #524]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0308 	and.w	r3, r3, #8
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a3e8:	4b7e      	ldr	r3, [pc, #504]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f6:	497b      	ldr	r1, [pc, #492]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0310 	and.w	r3, r3, #16
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a40a:	4b76      	ldr	r3, [pc, #472]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a418:	4972      	ldr	r1, [pc, #456]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0320 	and.w	r3, r3, #32
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a42c:	4b6d      	ldr	r3, [pc, #436]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a432:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43a:	496a      	ldr	r1, [pc, #424]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a44e:	4b65      	ldr	r3, [pc, #404]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a454:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45c:	4961      	ldr	r1, [pc, #388]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a470:	4b5c      	ldr	r3, [pc, #368]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a476:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a47e:	4959      	ldr	r1, [pc, #356]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a492:	4b54      	ldr	r3, [pc, #336]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a498:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a0:	4950      	ldr	r1, [pc, #320]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a4b4:	4b4b      	ldr	r3, [pc, #300]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	4948      	ldr	r1, [pc, #288]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a4d6:	4b43      	ldr	r3, [pc, #268]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e4:	493f      	ldr	r1, [pc, #252]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d028      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4f8:	4b3a      	ldr	r3, [pc, #232]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a506:	4937      	ldr	r1, [pc, #220]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a516:	d106      	bne.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a518:	4b32      	ldr	r3, [pc, #200]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	4a31      	ldr	r2, [pc, #196]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a51e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a522:	60d3      	str	r3, [r2, #12]
 800a524:	e011      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a52a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a52e:	d10c      	bne.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3304      	adds	r3, #4
 800a534:	2101      	movs	r1, #1
 800a536:	4618      	mov	r0, r3
 800a538:	f000 f8c8 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a53c:	4603      	mov	r3, r0
 800a53e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a540:	7cfb      	ldrb	r3, [r7, #19]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a546:	7cfb      	ldrb	r3, [r7, #19]
 800a548:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d028      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a556:	4b23      	ldr	r3, [pc, #140]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a564:	491f      	ldr	r1, [pc, #124]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a566:	4313      	orrs	r3, r2
 800a568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a574:	d106      	bne.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a576:	4b1b      	ldr	r3, [pc, #108]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a57c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a580:	60d3      	str	r3, [r2, #12]
 800a582:	e011      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a58c:	d10c      	bne.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3304      	adds	r3, #4
 800a592:	2101      	movs	r1, #1
 800a594:	4618      	mov	r0, r3
 800a596:	f000 f899 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a59a:	4603      	mov	r3, r0
 800a59c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a59e:	7cfb      	ldrb	r3, [r7, #19]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a5a4:	7cfb      	ldrb	r3, [r7, #19]
 800a5a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d02b      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a5b4:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c2:	4908      	ldr	r1, [pc, #32]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d2:	d109      	bne.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5d4:	4b03      	ldr	r3, [pc, #12]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	4a02      	ldr	r2, [pc, #8]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5de:	60d3      	str	r3, [r2, #12]
 800a5e0:	e014      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a5e2:	bf00      	nop
 800a5e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5f0:	d10c      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 f867 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a5fe:	4603      	mov	r3, r0
 800a600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a602:	7cfb      	ldrb	r3, [r7, #19]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a608:	7cfb      	ldrb	r3, [r7, #19]
 800a60a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d02f      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a618:	4b2b      	ldr	r3, [pc, #172]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a626:	4928      	ldr	r1, [pc, #160]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a636:	d10d      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3304      	adds	r3, #4
 800a63c:	2102      	movs	r1, #2
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f844 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a644:	4603      	mov	r3, r0
 800a646:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a648:	7cfb      	ldrb	r3, [r7, #19]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d014      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a64e:	7cfb      	ldrb	r3, [r7, #19]
 800a650:	74bb      	strb	r3, [r7, #18]
 800a652:	e011      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a65c:	d10c      	bne.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3320      	adds	r3, #32
 800a662:	2102      	movs	r1, #2
 800a664:	4618      	mov	r0, r3
 800a666:	f000 f925 	bl	800a8b4 <RCCEx_PLLSAI2_Config>
 800a66a:	4603      	mov	r3, r0
 800a66c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a66e:	7cfb      	ldrb	r3, [r7, #19]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a674:	7cfb      	ldrb	r3, [r7, #19]
 800a676:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00a      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a684:	4b10      	ldr	r3, [pc, #64]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a692:	490d      	ldr	r1, [pc, #52]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a694:	4313      	orrs	r3, r2
 800a696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00b      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6a6:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6b6:	4904      	ldr	r1, [pc, #16]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a6be:	7cbb      	ldrb	r3, [r7, #18]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	40021000 	.word	0x40021000

0800a6cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a6da:	4b75      	ldr	r3, [pc, #468]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a6e6:	4b72      	ldr	r3, [pc, #456]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f003 0203 	and.w	r2, r3, #3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d10d      	bne.n	800a712 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
       ||
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a6fe:	4b6c      	ldr	r3, [pc, #432]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	091b      	lsrs	r3, r3, #4
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
       ||
 800a70e:	429a      	cmp	r2, r3
 800a710:	d047      	beq.n	800a7a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	73fb      	strb	r3, [r7, #15]
 800a716:	e044      	b.n	800a7a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d018      	beq.n	800a752 <RCCEx_PLLSAI1_Config+0x86>
 800a720:	2b03      	cmp	r3, #3
 800a722:	d825      	bhi.n	800a770 <RCCEx_PLLSAI1_Config+0xa4>
 800a724:	2b01      	cmp	r3, #1
 800a726:	d002      	beq.n	800a72e <RCCEx_PLLSAI1_Config+0x62>
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d009      	beq.n	800a740 <RCCEx_PLLSAI1_Config+0x74>
 800a72c:	e020      	b.n	800a770 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a72e:	4b60      	ldr	r3, [pc, #384]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d11d      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a73e:	e01a      	b.n	800a776 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a740:	4b5b      	ldr	r3, [pc, #364]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d116      	bne.n	800a77a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a750:	e013      	b.n	800a77a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a752:	4b57      	ldr	r3, [pc, #348]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10f      	bne.n	800a77e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a75e:	4b54      	ldr	r3, [pc, #336]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d109      	bne.n	800a77e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a76e:	e006      	b.n	800a77e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
      break;
 800a774:	e004      	b.n	800a780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a776:	bf00      	nop
 800a778:	e002      	b.n	800a780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a77a:	bf00      	nop
 800a77c:	e000      	b.n	800a780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a77e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10d      	bne.n	800a7a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a786:	4b4a      	ldr	r3, [pc, #296]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6819      	ldr	r1, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	3b01      	subs	r3, #1
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	430b      	orrs	r3, r1
 800a79c:	4944      	ldr	r1, [pc, #272]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d17d      	bne.n	800a8a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a7a8:	4b41      	ldr	r3, [pc, #260]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a40      	ldr	r2, [pc, #256]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a7b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7b4:	f7fc fa1a 	bl	8006bec <HAL_GetTick>
 800a7b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a7ba:	e009      	b.n	800a7d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7bc:	f7fc fa16 	bl	8006bec <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d902      	bls.n	800a7d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
        break;
 800a7ce:	e005      	b.n	800a7dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a7d0:	4b37      	ldr	r3, [pc, #220]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1ef      	bne.n	800a7bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d160      	bne.n	800a8a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d111      	bne.n	800a80c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a7e8:	4b31      	ldr	r3, [pc, #196]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a7f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6892      	ldr	r2, [r2, #8]
 800a7f8:	0211      	lsls	r1, r2, #8
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68d2      	ldr	r2, [r2, #12]
 800a7fe:	0912      	lsrs	r2, r2, #4
 800a800:	0452      	lsls	r2, r2, #17
 800a802:	430a      	orrs	r2, r1
 800a804:	492a      	ldr	r1, [pc, #168]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a806:	4313      	orrs	r3, r2
 800a808:	610b      	str	r3, [r1, #16]
 800a80a:	e027      	b.n	800a85c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d112      	bne.n	800a838 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a812:	4b27      	ldr	r3, [pc, #156]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a81a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6892      	ldr	r2, [r2, #8]
 800a822:	0211      	lsls	r1, r2, #8
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	6912      	ldr	r2, [r2, #16]
 800a828:	0852      	lsrs	r2, r2, #1
 800a82a:	3a01      	subs	r2, #1
 800a82c:	0552      	lsls	r2, r2, #21
 800a82e:	430a      	orrs	r2, r1
 800a830:	491f      	ldr	r1, [pc, #124]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a832:	4313      	orrs	r3, r2
 800a834:	610b      	str	r3, [r1, #16]
 800a836:	e011      	b.n	800a85c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a838:	4b1d      	ldr	r3, [pc, #116]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a840:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	6892      	ldr	r2, [r2, #8]
 800a848:	0211      	lsls	r1, r2, #8
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6952      	ldr	r2, [r2, #20]
 800a84e:	0852      	lsrs	r2, r2, #1
 800a850:	3a01      	subs	r2, #1
 800a852:	0652      	lsls	r2, r2, #25
 800a854:	430a      	orrs	r2, r1
 800a856:	4916      	ldr	r1, [pc, #88]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a85c:	4b14      	ldr	r3, [pc, #80]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a13      	ldr	r2, [pc, #76]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a868:	f7fc f9c0 	bl	8006bec <HAL_GetTick>
 800a86c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a86e:	e009      	b.n	800a884 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a870:	f7fc f9bc 	bl	8006bec <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d902      	bls.n	800a884 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a87e:	2303      	movs	r3, #3
 800a880:	73fb      	strb	r3, [r7, #15]
          break;
 800a882:	e005      	b.n	800a890 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a884:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0ef      	beq.n	800a870 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a896:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a898:	691a      	ldr	r2, [r3, #16]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	4904      	ldr	r1, [pc, #16]	; (800a8b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	40021000 	.word	0x40021000

0800a8b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a8c2:	4b6a      	ldr	r3, [pc, #424]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	f003 0303 	and.w	r3, r3, #3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d018      	beq.n	800a900 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a8ce:	4b67      	ldr	r3, [pc, #412]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f003 0203 	and.w	r2, r3, #3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d10d      	bne.n	800a8fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
       ||
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d009      	beq.n	800a8fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a8e6:	4b61      	ldr	r3, [pc, #388]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	f003 0307 	and.w	r3, r3, #7
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
       ||
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d047      	beq.n	800a98a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	73fb      	strb	r3, [r7, #15]
 800a8fe:	e044      	b.n	800a98a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b03      	cmp	r3, #3
 800a906:	d018      	beq.n	800a93a <RCCEx_PLLSAI2_Config+0x86>
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d825      	bhi.n	800a958 <RCCEx_PLLSAI2_Config+0xa4>
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d002      	beq.n	800a916 <RCCEx_PLLSAI2_Config+0x62>
 800a910:	2b02      	cmp	r3, #2
 800a912:	d009      	beq.n	800a928 <RCCEx_PLLSAI2_Config+0x74>
 800a914:	e020      	b.n	800a958 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a916:	4b55      	ldr	r3, [pc, #340]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0302 	and.w	r3, r3, #2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d11d      	bne.n	800a95e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a926:	e01a      	b.n	800a95e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a928:	4b50      	ldr	r3, [pc, #320]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a930:	2b00      	cmp	r3, #0
 800a932:	d116      	bne.n	800a962 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a938:	e013      	b.n	800a962 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a93a:	4b4c      	ldr	r3, [pc, #304]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10f      	bne.n	800a966 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a946:	4b49      	ldr	r3, [pc, #292]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d109      	bne.n	800a966 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a956:	e006      	b.n	800a966 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	73fb      	strb	r3, [r7, #15]
      break;
 800a95c:	e004      	b.n	800a968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a95e:	bf00      	nop
 800a960:	e002      	b.n	800a968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a962:	bf00      	nop
 800a964:	e000      	b.n	800a968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a966:	bf00      	nop
    }

    if(status == HAL_OK)
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10d      	bne.n	800a98a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a96e:	4b3f      	ldr	r3, [pc, #252]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6819      	ldr	r1, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	3b01      	subs	r3, #1
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	430b      	orrs	r3, r1
 800a984:	4939      	ldr	r1, [pc, #228]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a986:	4313      	orrs	r3, r2
 800a988:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d167      	bne.n	800aa60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a990:	4b36      	ldr	r3, [pc, #216]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a35      	ldr	r2, [pc, #212]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a99a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a99c:	f7fc f926 	bl	8006bec <HAL_GetTick>
 800a9a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a9a2:	e009      	b.n	800a9b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a9a4:	f7fc f922 	bl	8006bec <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d902      	bls.n	800a9b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	73fb      	strb	r3, [r7, #15]
        break;
 800a9b6:	e005      	b.n	800a9c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a9b8:	4b2c      	ldr	r3, [pc, #176]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1ef      	bne.n	800a9a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d14a      	bne.n	800aa60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d111      	bne.n	800a9f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a9d0:	4b26      	ldr	r3, [pc, #152]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a9d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	6892      	ldr	r2, [r2, #8]
 800a9e0:	0211      	lsls	r1, r2, #8
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	68d2      	ldr	r2, [r2, #12]
 800a9e6:	0912      	lsrs	r2, r2, #4
 800a9e8:	0452      	lsls	r2, r2, #17
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	491f      	ldr	r1, [pc, #124]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	614b      	str	r3, [r1, #20]
 800a9f2:	e011      	b.n	800aa18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a9f4:	4b1d      	ldr	r3, [pc, #116]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a9fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6892      	ldr	r2, [r2, #8]
 800aa04:	0211      	lsls	r1, r2, #8
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6912      	ldr	r2, [r2, #16]
 800aa0a:	0852      	lsrs	r2, r2, #1
 800aa0c:	3a01      	subs	r2, #1
 800aa0e:	0652      	lsls	r2, r2, #25
 800aa10:	430a      	orrs	r2, r1
 800aa12:	4916      	ldr	r1, [pc, #88]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800aa18:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a13      	ldr	r2, [pc, #76]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa24:	f7fc f8e2 	bl	8006bec <HAL_GetTick>
 800aa28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800aa2a:	e009      	b.n	800aa40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800aa2c:	f7fc f8de 	bl	8006bec <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d902      	bls.n	800aa40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	73fb      	strb	r3, [r7, #15]
          break;
 800aa3e:	e005      	b.n	800aa4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800aa40:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0ef      	beq.n	800aa2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d106      	bne.n	800aa60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800aa52:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa54:	695a      	ldr	r2, [r3, #20]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	4904      	ldr	r1, [pc, #16]	; (800aa6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	40021000 	.word	0x40021000

0800aa70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e095      	b.n	800abae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d108      	bne.n	800aa9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa92:	d009      	beq.n	800aaa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	61da      	str	r2, [r3, #28]
 800aa9a:	e005      	b.n	800aaa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d106      	bne.n	800aac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7f8 fea2 	bl	800380c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aade:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aae8:	d902      	bls.n	800aaf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60fb      	str	r3, [r7, #12]
 800aaee:	e002      	b.n	800aaf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aaf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aafe:	d007      	beq.n	800ab10 <HAL_SPI_Init+0xa0>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab08:	d002      	beq.n	800ab10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ab20:	431a      	orrs	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	f003 0302 	and.w	r3, r3, #2
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	695b      	ldr	r3, [r3, #20]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	431a      	orrs	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab48:	431a      	orrs	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab52:	ea42 0103 	orr.w	r1, r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	0c1b      	lsrs	r3, r3, #16
 800ab6c:	f003 0204 	and.w	r2, r3, #4
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	f003 0310 	and.w	r3, r3, #16
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7e:	f003 0308 	and.w	r3, r3, #8
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab8c:	ea42 0103 	orr.w	r1, r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d102      	bne.n	800abd4 <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	73fb      	strb	r3, [r7, #15]
 800abd2:	e061      	b.n	800ac98 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7f8 febf 	bl	800396c <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f022 0220 	bic.w	r2, r2, #32
 800ac04:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f240 129f 	movw	r2, #415	; 0x19f
 800ac0e:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	f023 0102 	bic.w	r1, r3, #2
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	625a      	str	r2, [r3, #36]	; 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d112      	bne.n	800ac54 <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 800ac2e:	4b1d      	ldr	r3, [pc, #116]	; (800aca4 <HAL_SWPMI_Init+0xec>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a1d      	ldr	r2, [pc, #116]	; (800aca8 <HAL_SWPMI_Init+0xf0>)
 800ac34:	fba2 2303 	umull	r2, r3, r2, r3
 800ac38:	0d1b      	lsrs	r3, r3, #20
 800ac3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac3e:	fb02 f303 	mul.w	r3, r2, r3
 800ac42:	3396      	adds	r3, #150	; 0x96
 800ac44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ac46:	e002      	b.n	800ac4e <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1f9      	bne.n	800ac48 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	6892      	ldr	r2, [r2, #8]
 800ac5c:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f023 010f 	bic.w	r1, r3, #15
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	431a      	orrs	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	639a      	str	r2, [r3, #56]	; 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f042 0220 	orr.w	r2, r2, #32
 800ac96:	601a      	str	r2, [r3, #0]
  }

  return status;
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	20000000 	.word	0x20000000
 800aca8:	431bde83 	.word	0x431bde83

0800acac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e049      	b.n	800ad52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7f8 feee 	bl	8003ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f000 fb1a 	bl	800b324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e049      	b.n	800ae00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d106      	bne.n	800ad86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f841 	bl	800ae08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3304      	adds	r3, #4
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f000 fac3 	bl	800b324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e097      	b.n	800af60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d106      	bne.n	800ae4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7f8 fdf1 	bl	8003a2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	6812      	ldr	r2, [r2, #0]
 800ae5c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800ae60:	f023 0307 	bic.w	r3, r3, #7
 800ae64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4610      	mov	r0, r2
 800ae72:	f000 fa57 	bl	800b324 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae9e:	f023 0303 	bic.w	r3, r3, #3
 800aea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	021b      	lsls	r3, r3, #8
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800aebc:	f023 030c 	bic.w	r3, r3, #12
 800aec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	021b      	lsls	r3, r3, #8
 800aed8:	4313      	orrs	r3, r2
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	4313      	orrs	r3, r2
 800aede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	011a      	lsls	r2, r3, #4
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	031b      	lsls	r3, r3, #12
 800aeec:	4313      	orrs	r3, r2
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aefa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800af02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	011b      	lsls	r3, r3, #4
 800af0e:	4313      	orrs	r3, r2
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d101      	bne.n	800af86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af82:	2302      	movs	r3, #2
 800af84:	e0ff      	b.n	800b186 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b14      	cmp	r3, #20
 800af92:	f200 80f0 	bhi.w	800b176 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af96:	a201      	add	r2, pc, #4	; (adr r2, 800af9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9c:	0800aff1 	.word	0x0800aff1
 800afa0:	0800b177 	.word	0x0800b177
 800afa4:	0800b177 	.word	0x0800b177
 800afa8:	0800b177 	.word	0x0800b177
 800afac:	0800b031 	.word	0x0800b031
 800afb0:	0800b177 	.word	0x0800b177
 800afb4:	0800b177 	.word	0x0800b177
 800afb8:	0800b177 	.word	0x0800b177
 800afbc:	0800b073 	.word	0x0800b073
 800afc0:	0800b177 	.word	0x0800b177
 800afc4:	0800b177 	.word	0x0800b177
 800afc8:	0800b177 	.word	0x0800b177
 800afcc:	0800b0b3 	.word	0x0800b0b3
 800afd0:	0800b177 	.word	0x0800b177
 800afd4:	0800b177 	.word	0x0800b177
 800afd8:	0800b177 	.word	0x0800b177
 800afdc:	0800b0f5 	.word	0x0800b0f5
 800afe0:	0800b177 	.word	0x0800b177
 800afe4:	0800b177 	.word	0x0800b177
 800afe8:	0800b177 	.word	0x0800b177
 800afec:	0800b135 	.word	0x0800b135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fa2e 	bl	800b458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699a      	ldr	r2, [r3, #24]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f042 0208 	orr.w	r2, r2, #8
 800b00a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699a      	ldr	r2, [r3, #24]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0204 	bic.w	r2, r2, #4
 800b01a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6999      	ldr	r1, [r3, #24]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	691a      	ldr	r2, [r3, #16]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	619a      	str	r2, [r3, #24]
      break;
 800b02e:	e0a5      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68b9      	ldr	r1, [r7, #8]
 800b036:	4618      	mov	r0, r3
 800b038:	f000 fa9e 	bl	800b578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	699a      	ldr	r2, [r3, #24]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699a      	ldr	r2, [r3, #24]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6999      	ldr	r1, [r3, #24]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	021a      	lsls	r2, r3, #8
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	619a      	str	r2, [r3, #24]
      break;
 800b070:	e084      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fb07 	bl	800b68c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69da      	ldr	r2, [r3, #28]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0208 	orr.w	r2, r2, #8
 800b08c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69da      	ldr	r2, [r3, #28]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f022 0204 	bic.w	r2, r2, #4
 800b09c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69d9      	ldr	r1, [r3, #28]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	691a      	ldr	r2, [r3, #16]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	61da      	str	r2, [r3, #28]
      break;
 800b0b0:	e064      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fb6f 	bl	800b79c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69da      	ldr	r2, [r3, #28]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	69da      	ldr	r2, [r3, #28]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69d9      	ldr	r1, [r3, #28]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	021a      	lsls	r2, r3, #8
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	61da      	str	r2, [r3, #28]
      break;
 800b0f2:	e043      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fbb8 	bl	800b870 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f042 0208 	orr.w	r2, r2, #8
 800b10e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0204 	bic.w	r2, r2, #4
 800b11e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	691a      	ldr	r2, [r3, #16]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	430a      	orrs	r2, r1
 800b130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b132:	e023      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68b9      	ldr	r1, [r7, #8]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fbfc 	bl	800b938 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b14e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b15e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	021a      	lsls	r2, r3, #8
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	430a      	orrs	r2, r1
 800b172:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b174:	e002      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	75fb      	strb	r3, [r7, #23]
      break;
 800b17a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b184:	7dfb      	ldrb	r3, [r7, #23]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop

0800b190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_TIM_ConfigClockSource+0x1c>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e0b6      	b.n	800b31a <HAL_TIM_ConfigClockSource+0x18a>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b1ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1e8:	d03e      	beq.n	800b268 <HAL_TIM_ConfigClockSource+0xd8>
 800b1ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1ee:	f200 8087 	bhi.w	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b1f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f6:	f000 8086 	beq.w	800b306 <HAL_TIM_ConfigClockSource+0x176>
 800b1fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1fe:	d87f      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b200:	2b70      	cmp	r3, #112	; 0x70
 800b202:	d01a      	beq.n	800b23a <HAL_TIM_ConfigClockSource+0xaa>
 800b204:	2b70      	cmp	r3, #112	; 0x70
 800b206:	d87b      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b208:	2b60      	cmp	r3, #96	; 0x60
 800b20a:	d050      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x11e>
 800b20c:	2b60      	cmp	r3, #96	; 0x60
 800b20e:	d877      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b210:	2b50      	cmp	r3, #80	; 0x50
 800b212:	d03c      	beq.n	800b28e <HAL_TIM_ConfigClockSource+0xfe>
 800b214:	2b50      	cmp	r3, #80	; 0x50
 800b216:	d873      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b218:	2b40      	cmp	r3, #64	; 0x40
 800b21a:	d058      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0x13e>
 800b21c:	2b40      	cmp	r3, #64	; 0x40
 800b21e:	d86f      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b220:	2b30      	cmp	r3, #48	; 0x30
 800b222:	d064      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0x15e>
 800b224:	2b30      	cmp	r3, #48	; 0x30
 800b226:	d86b      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b228:	2b20      	cmp	r3, #32
 800b22a:	d060      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0x15e>
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	d867      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d05c      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0x15e>
 800b234:	2b10      	cmp	r3, #16
 800b236:	d05a      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0x15e>
 800b238:	e062      	b.n	800b300 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	6899      	ldr	r1, [r3, #8]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	f000 fc55 	bl	800baf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b25c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	609a      	str	r2, [r3, #8]
      break;
 800b266:	e04f      	b.n	800b308 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6818      	ldr	r0, [r3, #0]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	6899      	ldr	r1, [r3, #8]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f000 fc3e 	bl	800baf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	689a      	ldr	r2, [r3, #8]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b28a:	609a      	str	r2, [r3, #8]
      break;
 800b28c:	e03c      	b.n	800b308 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6859      	ldr	r1, [r3, #4]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f000 fbb2 	bl	800ba04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2150      	movs	r1, #80	; 0x50
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fc0b 	bl	800bac2 <TIM_ITRx_SetConfig>
      break;
 800b2ac:	e02c      	b.n	800b308 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	6859      	ldr	r1, [r3, #4]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f000 fbd1 	bl	800ba62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2160      	movs	r1, #96	; 0x60
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 fbfb 	bl	800bac2 <TIM_ITRx_SetConfig>
      break;
 800b2cc:	e01c      	b.n	800b308 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6859      	ldr	r1, [r3, #4]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f000 fb92 	bl	800ba04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2140      	movs	r1, #64	; 0x40
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 fbeb 	bl	800bac2 <TIM_ITRx_SetConfig>
      break;
 800b2ec:	e00c      	b.n	800b308 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	f000 fbe2 	bl	800bac2 <TIM_ITRx_SetConfig>
      break;
 800b2fe:	e003      	b.n	800b308 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]
      break;
 800b304:	e000      	b.n	800b308 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a40      	ldr	r2, [pc, #256]	; (800b438 <TIM_Base_SetConfig+0x114>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d013      	beq.n	800b364 <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b342:	d00f      	beq.n	800b364 <TIM_Base_SetConfig+0x40>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a3d      	ldr	r2, [pc, #244]	; (800b43c <TIM_Base_SetConfig+0x118>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d00b      	beq.n	800b364 <TIM_Base_SetConfig+0x40>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a3c      	ldr	r2, [pc, #240]	; (800b440 <TIM_Base_SetConfig+0x11c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d007      	beq.n	800b364 <TIM_Base_SetConfig+0x40>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a3b      	ldr	r2, [pc, #236]	; (800b444 <TIM_Base_SetConfig+0x120>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d003      	beq.n	800b364 <TIM_Base_SetConfig+0x40>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a3a      	ldr	r2, [pc, #232]	; (800b448 <TIM_Base_SetConfig+0x124>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d108      	bne.n	800b376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b36a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a2f      	ldr	r2, [pc, #188]	; (800b438 <TIM_Base_SetConfig+0x114>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d01f      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b384:	d01b      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a2c      	ldr	r2, [pc, #176]	; (800b43c <TIM_Base_SetConfig+0x118>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d017      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a2b      	ldr	r2, [pc, #172]	; (800b440 <TIM_Base_SetConfig+0x11c>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d013      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a2a      	ldr	r2, [pc, #168]	; (800b444 <TIM_Base_SetConfig+0x120>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00f      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a29      	ldr	r2, [pc, #164]	; (800b448 <TIM_Base_SetConfig+0x124>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00b      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a28      	ldr	r2, [pc, #160]	; (800b44c <TIM_Base_SetConfig+0x128>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d007      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a27      	ldr	r2, [pc, #156]	; (800b450 <TIM_Base_SetConfig+0x12c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d003      	beq.n	800b3be <TIM_Base_SetConfig+0x9a>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a26      	ldr	r2, [pc, #152]	; (800b454 <TIM_Base_SetConfig+0x130>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d108      	bne.n	800b3d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a10      	ldr	r2, [pc, #64]	; (800b438 <TIM_Base_SetConfig+0x114>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d00f      	beq.n	800b41c <TIM_Base_SetConfig+0xf8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a12      	ldr	r2, [pc, #72]	; (800b448 <TIM_Base_SetConfig+0x124>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d00b      	beq.n	800b41c <TIM_Base_SetConfig+0xf8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a11      	ldr	r2, [pc, #68]	; (800b44c <TIM_Base_SetConfig+0x128>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d007      	beq.n	800b41c <TIM_Base_SetConfig+0xf8>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a10      	ldr	r2, [pc, #64]	; (800b450 <TIM_Base_SetConfig+0x12c>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d003      	beq.n	800b41c <TIM_Base_SetConfig+0xf8>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a0f      	ldr	r2, [pc, #60]	; (800b454 <TIM_Base_SetConfig+0x130>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d103      	bne.n	800b424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	691a      	ldr	r2, [r3, #16]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	615a      	str	r2, [r3, #20]
}
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	40012c00 	.word	0x40012c00
 800b43c:	40000400 	.word	0x40000400
 800b440:	40000800 	.word	0x40000800
 800b444:	40000c00 	.word	0x40000c00
 800b448:	40013400 	.word	0x40013400
 800b44c:	40014000 	.word	0x40014000
 800b450:	40014400 	.word	0x40014400
 800b454:	40014800 	.word	0x40014800

0800b458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	f023 0201 	bic.w	r2, r3, #1
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 0303 	bic.w	r3, r3, #3
 800b492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f023 0302 	bic.w	r3, r3, #2
 800b4a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a2c      	ldr	r2, [pc, #176]	; (800b564 <TIM_OC1_SetConfig+0x10c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00f      	beq.n	800b4d8 <TIM_OC1_SetConfig+0x80>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a2b      	ldr	r2, [pc, #172]	; (800b568 <TIM_OC1_SetConfig+0x110>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d00b      	beq.n	800b4d8 <TIM_OC1_SetConfig+0x80>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a2a      	ldr	r2, [pc, #168]	; (800b56c <TIM_OC1_SetConfig+0x114>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d007      	beq.n	800b4d8 <TIM_OC1_SetConfig+0x80>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a29      	ldr	r2, [pc, #164]	; (800b570 <TIM_OC1_SetConfig+0x118>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d003      	beq.n	800b4d8 <TIM_OC1_SetConfig+0x80>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a28      	ldr	r2, [pc, #160]	; (800b574 <TIM_OC1_SetConfig+0x11c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d10c      	bne.n	800b4f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f023 0308 	bic.w	r3, r3, #8
 800b4de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f023 0304 	bic.w	r3, r3, #4
 800b4f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a1b      	ldr	r2, [pc, #108]	; (800b564 <TIM_OC1_SetConfig+0x10c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d00f      	beq.n	800b51a <TIM_OC1_SetConfig+0xc2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a1a      	ldr	r2, [pc, #104]	; (800b568 <TIM_OC1_SetConfig+0x110>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00b      	beq.n	800b51a <TIM_OC1_SetConfig+0xc2>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a19      	ldr	r2, [pc, #100]	; (800b56c <TIM_OC1_SetConfig+0x114>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d007      	beq.n	800b51a <TIM_OC1_SetConfig+0xc2>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a18      	ldr	r2, [pc, #96]	; (800b570 <TIM_OC1_SetConfig+0x118>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d003      	beq.n	800b51a <TIM_OC1_SetConfig+0xc2>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a17      	ldr	r2, [pc, #92]	; (800b574 <TIM_OC1_SetConfig+0x11c>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d111      	bne.n	800b53e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	4313      	orrs	r3, r2
 800b532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	621a      	str	r2, [r3, #32]
}
 800b558:	bf00      	nop
 800b55a:	371c      	adds	r7, #28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	40012c00 	.word	0x40012c00
 800b568:	40013400 	.word	0x40013400
 800b56c:	40014000 	.word	0x40014000
 800b570:	40014400 	.word	0x40014400
 800b574:	40014800 	.word	0x40014800

0800b578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b578:	b480      	push	{r7}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	f023 0210 	bic.w	r2, r3, #16
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	021b      	lsls	r3, r3, #8
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f023 0320 	bic.w	r3, r3, #32
 800b5c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	011b      	lsls	r3, r3, #4
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a28      	ldr	r2, [pc, #160]	; (800b678 <TIM_OC2_SetConfig+0x100>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d003      	beq.n	800b5e4 <TIM_OC2_SetConfig+0x6c>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a27      	ldr	r2, [pc, #156]	; (800b67c <TIM_OC2_SetConfig+0x104>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d10d      	bne.n	800b600 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a1d      	ldr	r2, [pc, #116]	; (800b678 <TIM_OC2_SetConfig+0x100>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d00f      	beq.n	800b628 <TIM_OC2_SetConfig+0xb0>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a1c      	ldr	r2, [pc, #112]	; (800b67c <TIM_OC2_SetConfig+0x104>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d00b      	beq.n	800b628 <TIM_OC2_SetConfig+0xb0>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a1b      	ldr	r2, [pc, #108]	; (800b680 <TIM_OC2_SetConfig+0x108>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d007      	beq.n	800b628 <TIM_OC2_SetConfig+0xb0>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a1a      	ldr	r2, [pc, #104]	; (800b684 <TIM_OC2_SetConfig+0x10c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d003      	beq.n	800b628 <TIM_OC2_SetConfig+0xb0>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a19      	ldr	r2, [pc, #100]	; (800b688 <TIM_OC2_SetConfig+0x110>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d113      	bne.n	800b650 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b62e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	4313      	orrs	r3, r2
 800b642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	685a      	ldr	r2, [r3, #4]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	621a      	str	r2, [r3, #32]
}
 800b66a:	bf00      	nop
 800b66c:	371c      	adds	r7, #28
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	40012c00 	.word	0x40012c00
 800b67c:	40013400 	.word	0x40013400
 800b680:	40014000 	.word	0x40014000
 800b684:	40014400 	.word	0x40014400
 800b688:	40014800 	.word	0x40014800

0800b68c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f023 0303 	bic.w	r3, r3, #3
 800b6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	021b      	lsls	r3, r3, #8
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a27      	ldr	r2, [pc, #156]	; (800b788 <TIM_OC3_SetConfig+0xfc>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d003      	beq.n	800b6f6 <TIM_OC3_SetConfig+0x6a>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a26      	ldr	r2, [pc, #152]	; (800b78c <TIM_OC3_SetConfig+0x100>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d10d      	bne.n	800b712 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	021b      	lsls	r3, r3, #8
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	4313      	orrs	r3, r2
 800b708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a1c      	ldr	r2, [pc, #112]	; (800b788 <TIM_OC3_SetConfig+0xfc>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00f      	beq.n	800b73a <TIM_OC3_SetConfig+0xae>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a1b      	ldr	r2, [pc, #108]	; (800b78c <TIM_OC3_SetConfig+0x100>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d00b      	beq.n	800b73a <TIM_OC3_SetConfig+0xae>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a1a      	ldr	r2, [pc, #104]	; (800b790 <TIM_OC3_SetConfig+0x104>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d007      	beq.n	800b73a <TIM_OC3_SetConfig+0xae>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a19      	ldr	r2, [pc, #100]	; (800b794 <TIM_OC3_SetConfig+0x108>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d003      	beq.n	800b73a <TIM_OC3_SetConfig+0xae>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a18      	ldr	r2, [pc, #96]	; (800b798 <TIM_OC3_SetConfig+0x10c>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d113      	bne.n	800b762 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	4313      	orrs	r3, r2
 800b754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4313      	orrs	r3, r2
 800b760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	621a      	str	r2, [r3, #32]
}
 800b77c:	bf00      	nop
 800b77e:	371c      	adds	r7, #28
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	40012c00 	.word	0x40012c00
 800b78c:	40013400 	.word	0x40013400
 800b790:	40014000 	.word	0x40014000
 800b794:	40014400 	.word	0x40014400
 800b798:	40014800 	.word	0x40014800

0800b79c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	021b      	lsls	r3, r3, #8
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	031b      	lsls	r3, r3, #12
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a18      	ldr	r2, [pc, #96]	; (800b85c <TIM_OC4_SetConfig+0xc0>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d00f      	beq.n	800b820 <TIM_OC4_SetConfig+0x84>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a17      	ldr	r2, [pc, #92]	; (800b860 <TIM_OC4_SetConfig+0xc4>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d00b      	beq.n	800b820 <TIM_OC4_SetConfig+0x84>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a16      	ldr	r2, [pc, #88]	; (800b864 <TIM_OC4_SetConfig+0xc8>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d007      	beq.n	800b820 <TIM_OC4_SetConfig+0x84>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a15      	ldr	r2, [pc, #84]	; (800b868 <TIM_OC4_SetConfig+0xcc>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d003      	beq.n	800b820 <TIM_OC4_SetConfig+0x84>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a14      	ldr	r2, [pc, #80]	; (800b86c <TIM_OC4_SetConfig+0xd0>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d109      	bne.n	800b834 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	019b      	lsls	r3, r3, #6
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	4313      	orrs	r3, r2
 800b832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	621a      	str	r2, [r3, #32]
}
 800b84e:	bf00      	nop
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40012c00 	.word	0x40012c00
 800b860:	40013400 	.word	0x40013400
 800b864:	40014000 	.word	0x40014000
 800b868:	40014400 	.word	0x40014400
 800b86c:	40014800 	.word	0x40014800

0800b870 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b870:	b480      	push	{r7}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b8b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	041b      	lsls	r3, r3, #16
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a17      	ldr	r2, [pc, #92]	; (800b924 <TIM_OC5_SetConfig+0xb4>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00f      	beq.n	800b8ea <TIM_OC5_SetConfig+0x7a>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a16      	ldr	r2, [pc, #88]	; (800b928 <TIM_OC5_SetConfig+0xb8>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d00b      	beq.n	800b8ea <TIM_OC5_SetConfig+0x7a>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a15      	ldr	r2, [pc, #84]	; (800b92c <TIM_OC5_SetConfig+0xbc>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d007      	beq.n	800b8ea <TIM_OC5_SetConfig+0x7a>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a14      	ldr	r2, [pc, #80]	; (800b930 <TIM_OC5_SetConfig+0xc0>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d003      	beq.n	800b8ea <TIM_OC5_SetConfig+0x7a>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a13      	ldr	r2, [pc, #76]	; (800b934 <TIM_OC5_SetConfig+0xc4>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d109      	bne.n	800b8fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	621a      	str	r2, [r3, #32]
}
 800b918:	bf00      	nop
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	40012c00 	.word	0x40012c00
 800b928:	40013400 	.word	0x40013400
 800b92c:	40014000 	.word	0x40014000
 800b930:	40014400 	.word	0x40014400
 800b934:	40014800 	.word	0x40014800

0800b938 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	021b      	lsls	r3, r3, #8
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	4313      	orrs	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b97e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	051b      	lsls	r3, r3, #20
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	4313      	orrs	r3, r2
 800b98a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a18      	ldr	r2, [pc, #96]	; (800b9f0 <TIM_OC6_SetConfig+0xb8>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00f      	beq.n	800b9b4 <TIM_OC6_SetConfig+0x7c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a17      	ldr	r2, [pc, #92]	; (800b9f4 <TIM_OC6_SetConfig+0xbc>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00b      	beq.n	800b9b4 <TIM_OC6_SetConfig+0x7c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a16      	ldr	r2, [pc, #88]	; (800b9f8 <TIM_OC6_SetConfig+0xc0>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d007      	beq.n	800b9b4 <TIM_OC6_SetConfig+0x7c>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a15      	ldr	r2, [pc, #84]	; (800b9fc <TIM_OC6_SetConfig+0xc4>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d003      	beq.n	800b9b4 <TIM_OC6_SetConfig+0x7c>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a14      	ldr	r2, [pc, #80]	; (800ba00 <TIM_OC6_SetConfig+0xc8>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d109      	bne.n	800b9c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	029b      	lsls	r3, r3, #10
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	621a      	str	r2, [r3, #32]
}
 800b9e2:	bf00      	nop
 800b9e4:	371c      	adds	r7, #28
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	40012c00 	.word	0x40012c00
 800b9f4:	40013400 	.word	0x40013400
 800b9f8:	40014000 	.word	0x40014000
 800b9fc:	40014400 	.word	0x40014400
 800ba00:	40014800 	.word	0x40014800

0800ba04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	f023 0201 	bic.w	r2, r3, #1
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f023 030a 	bic.w	r3, r3, #10
 800ba40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	621a      	str	r2, [r3, #32]
}
 800ba56:	bf00      	nop
 800ba58:	371c      	adds	r7, #28
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b087      	sub	sp, #28
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	60b9      	str	r1, [r7, #8]
 800ba6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	f023 0210 	bic.w	r2, r3, #16
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	031b      	lsls	r3, r3, #12
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	011b      	lsls	r3, r3, #4
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	621a      	str	r2, [r3, #32]
}
 800bab6:	bf00      	nop
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b085      	sub	sp, #20
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4313      	orrs	r3, r2
 800bae0:	f043 0307 	orr.w	r3, r3, #7
 800bae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	609a      	str	r2, [r3, #8]
}
 800baec:	bf00      	nop
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	021a      	lsls	r2, r3, #8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	697a      	ldr	r2, [r7, #20]
 800bb2a:	609a      	str	r2, [r3, #8]
}
 800bb2c:	bf00      	nop
 800bb2e:	371c      	adds	r7, #28
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d101      	bne.n	800bb50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	e068      	b.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a2e      	ldr	r2, [pc, #184]	; (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d004      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a2d      	ldr	r2, [pc, #180]	; (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d108      	bne.n	800bb96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a1e      	ldr	r2, [pc, #120]	; (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d01d      	beq.n	800bbf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbc2:	d018      	beq.n	800bbf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a1b      	ldr	r2, [pc, #108]	; (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d013      	beq.n	800bbf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a1a      	ldr	r2, [pc, #104]	; (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d00e      	beq.n	800bbf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a18      	ldr	r2, [pc, #96]	; (800bc40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d009      	beq.n	800bbf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a13      	ldr	r2, [pc, #76]	; (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d004      	beq.n	800bbf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a14      	ldr	r2, [pc, #80]	; (800bc44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d10c      	bne.n	800bc10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	40012c00 	.word	0x40012c00
 800bc34:	40013400 	.word	0x40013400
 800bc38:	40000400 	.word	0x40000400
 800bc3c:	40000800 	.word	0x40000800
 800bc40:	40000c00 	.word	0x40000c00
 800bc44:	40014000 	.word	0x40014000

0800bc48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d101      	bne.n	800bc64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc60:	2302      	movs	r3, #2
 800bc62:	e065      	b.n	800bd30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcca:	4313      	orrs	r3, r2
 800bccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	041b      	lsls	r3, r3, #16
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a16      	ldr	r2, [pc, #88]	; (800bd3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d004      	beq.n	800bcf2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a14      	ldr	r2, [pc, #80]	; (800bd40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d115      	bne.n	800bd1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	051b      	lsls	r3, r3, #20
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	40012c00 	.word	0x40012c00
 800bd40:	40013400 	.word	0x40013400

0800bd44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e040      	b.n	800bdd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d106      	bne.n	800bd6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7f7 ff7c 	bl	8003c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2224      	movs	r2, #36	; 0x24
 800bd70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f022 0201 	bic.w	r2, r2, #1
 800bd80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fbe8 	bl	800c558 <UART_SetConfig>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d101      	bne.n	800bd92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e022      	b.n	800bdd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d002      	beq.n	800bda0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fe94 	bl	800cac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0201 	orr.w	r2, r2, #1
 800bdce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 ff1b 	bl	800cc0c <UART_CheckIdleState>
 800bdd6:	4603      	mov	r3, r0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b08b      	sub	sp, #44	; 0x2c
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdf2:	2b20      	cmp	r3, #32
 800bdf4:	d156      	bne.n	800bea4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <HAL_UART_Transmit_IT+0x22>
 800bdfc:	88fb      	ldrh	r3, [r7, #6]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e04f      	b.n	800bea6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d101      	bne.n	800be14 <HAL_UART_Transmit_IT+0x34>
 800be10:	2302      	movs	r3, #2
 800be12:	e048      	b.n	800bea6 <HAL_UART_Transmit_IT+0xc6>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	88fa      	ldrh	r2, [r7, #6]
 800be26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	88fa      	ldrh	r2, [r7, #6]
 800be2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2221      	movs	r2, #33	; 0x21
 800be44:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be4e:	d107      	bne.n	800be60 <HAL_UART_Transmit_IT+0x80>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d103      	bne.n	800be60 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	4a16      	ldr	r2, [pc, #88]	; (800beb4 <HAL_UART_Transmit_IT+0xd4>)
 800be5c:	669a      	str	r2, [r3, #104]	; 0x68
 800be5e:	e002      	b.n	800be66 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4a15      	ldr	r2, [pc, #84]	; (800beb8 <HAL_UART_Transmit_IT+0xd8>)
 800be64:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	e853 3f00 	ldrex	r3, [r3]
 800be7a:	613b      	str	r3, [r7, #16]
   return(result);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be82:	627b      	str	r3, [r7, #36]	; 0x24
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	461a      	mov	r2, r3
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	623b      	str	r3, [r7, #32]
 800be8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	69f9      	ldr	r1, [r7, #28]
 800be92:	6a3a      	ldr	r2, [r7, #32]
 800be94:	e841 2300 	strex	r3, r2, [r1]
 800be98:	61bb      	str	r3, [r7, #24]
   return(result);
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e6      	bne.n	800be6e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e000      	b.n	800bea6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800bea4:	2302      	movs	r3, #2
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	372c      	adds	r7, #44	; 0x2c
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	0800d167 	.word	0x0800d167
 800beb8:	0800d0af 	.word	0x0800d0af

0800bebc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08a      	sub	sp, #40	; 0x28
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	4613      	mov	r3, r2
 800bec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bece:	2b20      	cmp	r3, #32
 800bed0:	d142      	bne.n	800bf58 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <HAL_UART_Receive_IT+0x22>
 800bed8:	88fb      	ldrh	r3, [r7, #6]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e03b      	b.n	800bf5a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <HAL_UART_Receive_IT+0x34>
 800beec:	2302      	movs	r3, #2
 800beee:	e034      	b.n	800bf5a <HAL_UART_Receive_IT+0x9e>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a18      	ldr	r2, [pc, #96]	; (800bf64 <HAL_UART_Receive_IT+0xa8>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d01f      	beq.n	800bf48 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d018      	beq.n	800bf48 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	613b      	str	r3, [r7, #16]
   return(result);
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	623b      	str	r3, [r7, #32]
 800bf36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	69f9      	ldr	r1, [r7, #28]
 800bf3a:	6a3a      	ldr	r2, [r7, #32]
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e6      	bne.n	800bf16 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bf48:	88fb      	ldrh	r3, [r7, #6]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68b9      	ldr	r1, [r7, #8]
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 ff6a 	bl	800ce28 <UART_Start_Receive_IT>
 800bf54:	4603      	mov	r3, r0
 800bf56:	e000      	b.n	800bf5a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800bf58:	2302      	movs	r3, #2
  }
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3728      	adds	r7, #40	; 0x28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	40008000 	.word	0x40008000

0800bf68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b0ba      	sub	sp, #232	; 0xe8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bf92:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf96:	4013      	ands	r3, r2
 800bf98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d115      	bne.n	800bfd0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00f      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfb4:	f003 0320 	and.w	r3, r3, #32
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d009      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 82a6 	beq.w	800c512 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	4798      	blx	r3
      }
      return;
 800bfce:	e2a0      	b.n	800c512 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800bfd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 8117 	beq.w	800c208 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bfda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d106      	bne.n	800bff4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bfe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bfea:	4b85      	ldr	r3, [pc, #532]	; (800c200 <HAL_UART_IRQHandler+0x298>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 810a 	beq.w	800c208 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d011      	beq.n	800c024 <HAL_UART_IRQHandler+0xbc>
 800c000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2201      	movs	r2, #1
 800c012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c01a:	f043 0201 	orr.w	r2, r3, #1
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c028:	f003 0302 	and.w	r3, r3, #2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d011      	beq.n	800c054 <HAL_UART_IRQHandler+0xec>
 800c030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00b      	beq.n	800c054 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2202      	movs	r2, #2
 800c042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c04a:	f043 0204 	orr.w	r2, r3, #4
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d011      	beq.n	800c084 <HAL_UART_IRQHandler+0x11c>
 800c060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00b      	beq.n	800c084 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2204      	movs	r2, #4
 800c072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c07a:	f043 0202 	orr.w	r2, r3, #2
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c088:	f003 0308 	and.w	r3, r3, #8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d017      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c094:	f003 0320 	and.w	r3, r3, #32
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d105      	bne.n	800c0a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c09c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2208      	movs	r2, #8
 800c0ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0b6:	f043 0208 	orr.w	r2, r3, #8
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d012      	beq.n	800c0f2 <HAL_UART_IRQHandler+0x18a>
 800c0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00c      	beq.n	800c0f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0e8:	f043 0220 	orr.w	r2, r3, #32
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 820c 	beq.w	800c516 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c102:	f003 0320 	and.w	r3, r3, #32
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00d      	beq.n	800c126 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c10a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c10e:	f003 0320 	and.w	r3, r3, #32
 800c112:	2b00      	cmp	r3, #0
 800c114:	d007      	beq.n	800c126 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d003      	beq.n	800c126 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c12c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c13a:	2b40      	cmp	r3, #64	; 0x40
 800c13c:	d005      	beq.n	800c14a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c13e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c142:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c146:	2b00      	cmp	r3, #0
 800c148:	d04f      	beq.n	800c1ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 ff36 	bl	800cfbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c15a:	2b40      	cmp	r3, #64	; 0x40
 800c15c:	d141      	bne.n	800c1e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c17c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3308      	adds	r3, #8
 800c186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c18a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c18e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c19a:	e841 2300 	strex	r3, r2, [r1]
 800c19e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1d9      	bne.n	800c15e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d013      	beq.n	800c1da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b6:	4a13      	ldr	r2, [pc, #76]	; (800c204 <HAL_UART_IRQHandler+0x29c>)
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fb fffb 	bl	80081ba <HAL_DMA_Abort_IT>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d017      	beq.n	800c1fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d8:	e00f      	b.n	800c1fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f9a6 	bl	800c52c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e0:	e00b      	b.n	800c1fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f9a2 	bl	800c52c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e8:	e007      	b.n	800c1fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f99e 	bl	800c52c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c1f8:	e18d      	b.n	800c516 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1fa:	bf00      	nop
    return;
 800c1fc:	e18b      	b.n	800c516 <HAL_UART_IRQHandler+0x5ae>
 800c1fe:	bf00      	nop
 800c200:	04000120 	.word	0x04000120
 800c204:	0800d083 	.word	0x0800d083

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	f040 8146 	bne.w	800c49e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c216:	f003 0310 	and.w	r3, r3, #16
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f000 813f 	beq.w	800c49e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c224:	f003 0310 	and.w	r3, r3, #16
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 8138 	beq.w	800c49e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2210      	movs	r2, #16
 800c234:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c240:	2b40      	cmp	r3, #64	; 0x40
 800c242:	f040 80b4 	bne.w	800c3ae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c252:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 815f 	beq.w	800c51a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c266:	429a      	cmp	r2, r3
 800c268:	f080 8157 	bcs.w	800c51a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0320 	and.w	r3, r3, #32
 800c282:	2b00      	cmp	r3, #0
 800c284:	f040 8085 	bne.w	800c392 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c29c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c2be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c2c2:	e841 2300 	strex	r3, r2, [r1]
 800c2c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c2ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1da      	bne.n	800c288 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2dc:	e853 3f00 	ldrex	r3, [r3]
 800c2e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c2e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2e4:	f023 0301 	bic.w	r3, r3, #1
 800c2e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3308      	adds	r3, #8
 800c2f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c2f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c2fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c302:	e841 2300 	strex	r3, r2, [r1]
 800c306:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e1      	bne.n	800c2d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3308      	adds	r3, #8
 800c314:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c318:	e853 3f00 	ldrex	r3, [r3]
 800c31c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c31e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3308      	adds	r3, #8
 800c32e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c332:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c334:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c336:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c338:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c33a:	e841 2300 	strex	r3, r2, [r1]
 800c33e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1e3      	bne.n	800c30e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c35a:	e853 3f00 	ldrex	r3, [r3]
 800c35e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c362:	f023 0310 	bic.w	r3, r3, #16
 800c366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c374:	65bb      	str	r3, [r7, #88]	; 0x58
 800c376:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c37a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c37c:	e841 2300 	strex	r3, r2, [r1]
 800c380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1e4      	bne.n	800c352 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7fb fed6 	bl	800813e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f8ca 	bl	800c540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3ac:	e0b5      	b.n	800c51a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 80a7 	beq.w	800c51e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c3d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 80a2 	beq.w	800c51e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c3fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e4      	bne.n	800c3da <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3308      	adds	r3, #8
 800c416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	e853 3f00 	ldrex	r3, [r3]
 800c41e:	623b      	str	r3, [r7, #32]
   return(result);
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c434:	633a      	str	r2, [r7, #48]	; 0x30
 800c436:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c43a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43c:	e841 2300 	strex	r3, r2, [r1]
 800c440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e3      	bne.n	800c410 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2220      	movs	r2, #32
 800c44c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	60fb      	str	r3, [r7, #12]
   return(result);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f023 0310 	bic.w	r3, r3, #16
 800c46e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	69b9      	ldr	r1, [r7, #24]
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	617b      	str	r3, [r7, #20]
   return(result);
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e4      	bne.n	800c45a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f852 	bl	800c540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c49c:	e03f      	b.n	800c51e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00e      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x560>
 800c4aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d008      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c4be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f001 f83a 	bl	800d53a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4c6:	e02d      	b.n	800c524 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00e      	beq.n	800c4f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d008      	beq.n	800c4f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d01c      	beq.n	800c522 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	4798      	blx	r3
    }
    return;
 800c4f0:	e017      	b.n	800c522 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d012      	beq.n	800c524 <HAL_UART_IRQHandler+0x5bc>
 800c4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00c      	beq.n	800c524 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fe8b 	bl	800d226 <UART_EndTransmit_IT>
    return;
 800c510:	e008      	b.n	800c524 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c512:	bf00      	nop
 800c514:	e006      	b.n	800c524 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c516:	bf00      	nop
 800c518:	e004      	b.n	800c524 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c51a:	bf00      	nop
 800c51c:	e002      	b.n	800c524 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c51e:	bf00      	nop
 800c520:	e000      	b.n	800c524 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c522:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c524:	37e8      	adds	r7, #232	; 0xe8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop

0800c52c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c534:	bf00      	nop
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c55c:	b08a      	sub	sp, #40	; 0x28
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	689a      	ldr	r2, [r3, #8]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	431a      	orrs	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	431a      	orrs	r2, r3
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	69db      	ldr	r3, [r3, #28]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	4ba4      	ldr	r3, [pc, #656]	; (800c818 <UART_SetConfig+0x2c0>)
 800c588:	4013      	ands	r3, r2
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	6812      	ldr	r2, [r2, #0]
 800c58e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c590:	430b      	orrs	r3, r1
 800c592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a99      	ldr	r2, [pc, #612]	; (800c81c <UART_SetConfig+0x2c4>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d004      	beq.n	800c5c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6a1b      	ldr	r3, [r3, #32]
 800c5be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d4:	430a      	orrs	r2, r1
 800c5d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a90      	ldr	r2, [pc, #576]	; (800c820 <UART_SetConfig+0x2c8>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d126      	bne.n	800c630 <UART_SetConfig+0xd8>
 800c5e2:	4b90      	ldr	r3, [pc, #576]	; (800c824 <UART_SetConfig+0x2cc>)
 800c5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	d81b      	bhi.n	800c628 <UART_SetConfig+0xd0>
 800c5f0:	a201      	add	r2, pc, #4	; (adr r2, 800c5f8 <UART_SetConfig+0xa0>)
 800c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f6:	bf00      	nop
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c619 	.word	0x0800c619
 800c600:	0800c611 	.word	0x0800c611
 800c604:	0800c621 	.word	0x0800c621
 800c608:	2301      	movs	r3, #1
 800c60a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c60e:	e116      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c610:	2302      	movs	r3, #2
 800c612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c616:	e112      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c618:	2304      	movs	r3, #4
 800c61a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c61e:	e10e      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c620:	2308      	movs	r3, #8
 800c622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c626:	e10a      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c628:	2310      	movs	r3, #16
 800c62a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c62e:	e106      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a7c      	ldr	r2, [pc, #496]	; (800c828 <UART_SetConfig+0x2d0>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d138      	bne.n	800c6ac <UART_SetConfig+0x154>
 800c63a:	4b7a      	ldr	r3, [pc, #488]	; (800c824 <UART_SetConfig+0x2cc>)
 800c63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c640:	f003 030c 	and.w	r3, r3, #12
 800c644:	2b0c      	cmp	r3, #12
 800c646:	d82d      	bhi.n	800c6a4 <UART_SetConfig+0x14c>
 800c648:	a201      	add	r2, pc, #4	; (adr r2, 800c650 <UART_SetConfig+0xf8>)
 800c64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64e:	bf00      	nop
 800c650:	0800c685 	.word	0x0800c685
 800c654:	0800c6a5 	.word	0x0800c6a5
 800c658:	0800c6a5 	.word	0x0800c6a5
 800c65c:	0800c6a5 	.word	0x0800c6a5
 800c660:	0800c695 	.word	0x0800c695
 800c664:	0800c6a5 	.word	0x0800c6a5
 800c668:	0800c6a5 	.word	0x0800c6a5
 800c66c:	0800c6a5 	.word	0x0800c6a5
 800c670:	0800c68d 	.word	0x0800c68d
 800c674:	0800c6a5 	.word	0x0800c6a5
 800c678:	0800c6a5 	.word	0x0800c6a5
 800c67c:	0800c6a5 	.word	0x0800c6a5
 800c680:	0800c69d 	.word	0x0800c69d
 800c684:	2300      	movs	r3, #0
 800c686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c68a:	e0d8      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c68c:	2302      	movs	r3, #2
 800c68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c692:	e0d4      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c694:	2304      	movs	r3, #4
 800c696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c69a:	e0d0      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c69c:	2308      	movs	r3, #8
 800c69e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6a2:	e0cc      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6aa:	e0c8      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a5e      	ldr	r2, [pc, #376]	; (800c82c <UART_SetConfig+0x2d4>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d125      	bne.n	800c702 <UART_SetConfig+0x1aa>
 800c6b6:	4b5b      	ldr	r3, [pc, #364]	; (800c824 <UART_SetConfig+0x2cc>)
 800c6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c6c0:	2b30      	cmp	r3, #48	; 0x30
 800c6c2:	d016      	beq.n	800c6f2 <UART_SetConfig+0x19a>
 800c6c4:	2b30      	cmp	r3, #48	; 0x30
 800c6c6:	d818      	bhi.n	800c6fa <UART_SetConfig+0x1a2>
 800c6c8:	2b20      	cmp	r3, #32
 800c6ca:	d00a      	beq.n	800c6e2 <UART_SetConfig+0x18a>
 800c6cc:	2b20      	cmp	r3, #32
 800c6ce:	d814      	bhi.n	800c6fa <UART_SetConfig+0x1a2>
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <UART_SetConfig+0x182>
 800c6d4:	2b10      	cmp	r3, #16
 800c6d6:	d008      	beq.n	800c6ea <UART_SetConfig+0x192>
 800c6d8:	e00f      	b.n	800c6fa <UART_SetConfig+0x1a2>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6e0:	e0ad      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6e8:	e0a9      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c6ea:	2304      	movs	r3, #4
 800c6ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6f0:	e0a5      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c6f2:	2308      	movs	r3, #8
 800c6f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6f8:	e0a1      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c6fa:	2310      	movs	r3, #16
 800c6fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c700:	e09d      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a4a      	ldr	r2, [pc, #296]	; (800c830 <UART_SetConfig+0x2d8>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d125      	bne.n	800c758 <UART_SetConfig+0x200>
 800c70c:	4b45      	ldr	r3, [pc, #276]	; (800c824 <UART_SetConfig+0x2cc>)
 800c70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c712:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c716:	2bc0      	cmp	r3, #192	; 0xc0
 800c718:	d016      	beq.n	800c748 <UART_SetConfig+0x1f0>
 800c71a:	2bc0      	cmp	r3, #192	; 0xc0
 800c71c:	d818      	bhi.n	800c750 <UART_SetConfig+0x1f8>
 800c71e:	2b80      	cmp	r3, #128	; 0x80
 800c720:	d00a      	beq.n	800c738 <UART_SetConfig+0x1e0>
 800c722:	2b80      	cmp	r3, #128	; 0x80
 800c724:	d814      	bhi.n	800c750 <UART_SetConfig+0x1f8>
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <UART_SetConfig+0x1d8>
 800c72a:	2b40      	cmp	r3, #64	; 0x40
 800c72c:	d008      	beq.n	800c740 <UART_SetConfig+0x1e8>
 800c72e:	e00f      	b.n	800c750 <UART_SetConfig+0x1f8>
 800c730:	2300      	movs	r3, #0
 800c732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c736:	e082      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c738:	2302      	movs	r3, #2
 800c73a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c73e:	e07e      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c740:	2304      	movs	r3, #4
 800c742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c746:	e07a      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c748:	2308      	movs	r3, #8
 800c74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c74e:	e076      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c750:	2310      	movs	r3, #16
 800c752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c756:	e072      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a35      	ldr	r2, [pc, #212]	; (800c834 <UART_SetConfig+0x2dc>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d12a      	bne.n	800c7b8 <UART_SetConfig+0x260>
 800c762:	4b30      	ldr	r3, [pc, #192]	; (800c824 <UART_SetConfig+0x2cc>)
 800c764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c76c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c770:	d01a      	beq.n	800c7a8 <UART_SetConfig+0x250>
 800c772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c776:	d81b      	bhi.n	800c7b0 <UART_SetConfig+0x258>
 800c778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c77c:	d00c      	beq.n	800c798 <UART_SetConfig+0x240>
 800c77e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c782:	d815      	bhi.n	800c7b0 <UART_SetConfig+0x258>
 800c784:	2b00      	cmp	r3, #0
 800c786:	d003      	beq.n	800c790 <UART_SetConfig+0x238>
 800c788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c78c:	d008      	beq.n	800c7a0 <UART_SetConfig+0x248>
 800c78e:	e00f      	b.n	800c7b0 <UART_SetConfig+0x258>
 800c790:	2300      	movs	r3, #0
 800c792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c796:	e052      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c798:	2302      	movs	r3, #2
 800c79a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c79e:	e04e      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7a6:	e04a      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c7a8:	2308      	movs	r3, #8
 800c7aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7ae:	e046      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c7b0:	2310      	movs	r3, #16
 800c7b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7b6:	e042      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a17      	ldr	r2, [pc, #92]	; (800c81c <UART_SetConfig+0x2c4>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d13a      	bne.n	800c838 <UART_SetConfig+0x2e0>
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <UART_SetConfig+0x2cc>)
 800c7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c7cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7d0:	d01a      	beq.n	800c808 <UART_SetConfig+0x2b0>
 800c7d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7d6:	d81b      	bhi.n	800c810 <UART_SetConfig+0x2b8>
 800c7d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7dc:	d00c      	beq.n	800c7f8 <UART_SetConfig+0x2a0>
 800c7de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7e2:	d815      	bhi.n	800c810 <UART_SetConfig+0x2b8>
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d003      	beq.n	800c7f0 <UART_SetConfig+0x298>
 800c7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ec:	d008      	beq.n	800c800 <UART_SetConfig+0x2a8>
 800c7ee:	e00f      	b.n	800c810 <UART_SetConfig+0x2b8>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7f6:	e022      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7fe:	e01e      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c800:	2304      	movs	r3, #4
 800c802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c806:	e01a      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c808:	2308      	movs	r3, #8
 800c80a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c80e:	e016      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c810:	2310      	movs	r3, #16
 800c812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c816:	e012      	b.n	800c83e <UART_SetConfig+0x2e6>
 800c818:	efff69f3 	.word	0xefff69f3
 800c81c:	40008000 	.word	0x40008000
 800c820:	40013800 	.word	0x40013800
 800c824:	40021000 	.word	0x40021000
 800c828:	40004400 	.word	0x40004400
 800c82c:	40004800 	.word	0x40004800
 800c830:	40004c00 	.word	0x40004c00
 800c834:	40005000 	.word	0x40005000
 800c838:	2310      	movs	r3, #16
 800c83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a9f      	ldr	r2, [pc, #636]	; (800cac0 <UART_SetConfig+0x568>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d17a      	bne.n	800c93e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c84c:	2b08      	cmp	r3, #8
 800c84e:	d824      	bhi.n	800c89a <UART_SetConfig+0x342>
 800c850:	a201      	add	r2, pc, #4	; (adr r2, 800c858 <UART_SetConfig+0x300>)
 800c852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c856:	bf00      	nop
 800c858:	0800c87d 	.word	0x0800c87d
 800c85c:	0800c89b 	.word	0x0800c89b
 800c860:	0800c885 	.word	0x0800c885
 800c864:	0800c89b 	.word	0x0800c89b
 800c868:	0800c88b 	.word	0x0800c88b
 800c86c:	0800c89b 	.word	0x0800c89b
 800c870:	0800c89b 	.word	0x0800c89b
 800c874:	0800c89b 	.word	0x0800c89b
 800c878:	0800c893 	.word	0x0800c893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c87c:	f7fd fbb0 	bl	8009fe0 <HAL_RCC_GetPCLK1Freq>
 800c880:	61f8      	str	r0, [r7, #28]
        break;
 800c882:	e010      	b.n	800c8a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c884:	4b8f      	ldr	r3, [pc, #572]	; (800cac4 <UART_SetConfig+0x56c>)
 800c886:	61fb      	str	r3, [r7, #28]
        break;
 800c888:	e00d      	b.n	800c8a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c88a:	f7fd fb11 	bl	8009eb0 <HAL_RCC_GetSysClockFreq>
 800c88e:	61f8      	str	r0, [r7, #28]
        break;
 800c890:	e009      	b.n	800c8a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c896:	61fb      	str	r3, [r7, #28]
        break;
 800c898:	e005      	b.n	800c8a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c89a:	2300      	movs	r3, #0
 800c89c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c8a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 80fb 	beq.w	800caa4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	4413      	add	r3, r2
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d305      	bcc.n	800c8ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c8c4:	69fa      	ldr	r2, [r7, #28]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d903      	bls.n	800c8d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c8d0:	e0e8      	b.n	800caa4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	461c      	mov	r4, r3
 800c8d8:	4615      	mov	r5, r2
 800c8da:	f04f 0200 	mov.w	r2, #0
 800c8de:	f04f 0300 	mov.w	r3, #0
 800c8e2:	022b      	lsls	r3, r5, #8
 800c8e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c8e8:	0222      	lsls	r2, r4, #8
 800c8ea:	68f9      	ldr	r1, [r7, #12]
 800c8ec:	6849      	ldr	r1, [r1, #4]
 800c8ee:	0849      	lsrs	r1, r1, #1
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	4688      	mov	r8, r1
 800c8f4:	4681      	mov	r9, r0
 800c8f6:	eb12 0a08 	adds.w	sl, r2, r8
 800c8fa:	eb43 0b09 	adc.w	fp, r3, r9
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	603b      	str	r3, [r7, #0]
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c90c:	4650      	mov	r0, sl
 800c90e:	4659      	mov	r1, fp
 800c910:	f7f4 f9ca 	bl	8000ca8 <__aeabi_uldivmod>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4613      	mov	r3, r2
 800c91a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c922:	d308      	bcc.n	800c936 <UART_SetConfig+0x3de>
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c92a:	d204      	bcs.n	800c936 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	69ba      	ldr	r2, [r7, #24]
 800c932:	60da      	str	r2, [r3, #12]
 800c934:	e0b6      	b.n	800caa4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c93c:	e0b2      	b.n	800caa4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c946:	d15e      	bne.n	800ca06 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800c948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c94c:	2b08      	cmp	r3, #8
 800c94e:	d828      	bhi.n	800c9a2 <UART_SetConfig+0x44a>
 800c950:	a201      	add	r2, pc, #4	; (adr r2, 800c958 <UART_SetConfig+0x400>)
 800c952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c956:	bf00      	nop
 800c958:	0800c97d 	.word	0x0800c97d
 800c95c:	0800c985 	.word	0x0800c985
 800c960:	0800c98d 	.word	0x0800c98d
 800c964:	0800c9a3 	.word	0x0800c9a3
 800c968:	0800c993 	.word	0x0800c993
 800c96c:	0800c9a3 	.word	0x0800c9a3
 800c970:	0800c9a3 	.word	0x0800c9a3
 800c974:	0800c9a3 	.word	0x0800c9a3
 800c978:	0800c99b 	.word	0x0800c99b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c97c:	f7fd fb30 	bl	8009fe0 <HAL_RCC_GetPCLK1Freq>
 800c980:	61f8      	str	r0, [r7, #28]
        break;
 800c982:	e014      	b.n	800c9ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c984:	f7fd fb42 	bl	800a00c <HAL_RCC_GetPCLK2Freq>
 800c988:	61f8      	str	r0, [r7, #28]
        break;
 800c98a:	e010      	b.n	800c9ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c98c:	4b4d      	ldr	r3, [pc, #308]	; (800cac4 <UART_SetConfig+0x56c>)
 800c98e:	61fb      	str	r3, [r7, #28]
        break;
 800c990:	e00d      	b.n	800c9ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c992:	f7fd fa8d 	bl	8009eb0 <HAL_RCC_GetSysClockFreq>
 800c996:	61f8      	str	r0, [r7, #28]
        break;
 800c998:	e009      	b.n	800c9ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c99e:	61fb      	str	r3, [r7, #28]
        break;
 800c9a0:	e005      	b.n	800c9ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c9ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d077      	beq.n	800caa4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	005a      	lsls	r2, r3, #1
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	085b      	lsrs	r3, r3, #1
 800c9be:	441a      	add	r2, r3
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	2b0f      	cmp	r3, #15
 800c9ce:	d916      	bls.n	800c9fe <UART_SetConfig+0x4a6>
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9d6:	d212      	bcs.n	800c9fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	f023 030f 	bic.w	r3, r3, #15
 800c9e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	085b      	lsrs	r3, r3, #1
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	f003 0307 	and.w	r3, r3, #7
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	8afb      	ldrh	r3, [r7, #22]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	8afa      	ldrh	r2, [r7, #22]
 800c9fa:	60da      	str	r2, [r3, #12]
 800c9fc:	e052      	b.n	800caa4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ca04:	e04e      	b.n	800caa4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca0a:	2b08      	cmp	r3, #8
 800ca0c:	d827      	bhi.n	800ca5e <UART_SetConfig+0x506>
 800ca0e:	a201      	add	r2, pc, #4	; (adr r2, 800ca14 <UART_SetConfig+0x4bc>)
 800ca10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca14:	0800ca39 	.word	0x0800ca39
 800ca18:	0800ca41 	.word	0x0800ca41
 800ca1c:	0800ca49 	.word	0x0800ca49
 800ca20:	0800ca5f 	.word	0x0800ca5f
 800ca24:	0800ca4f 	.word	0x0800ca4f
 800ca28:	0800ca5f 	.word	0x0800ca5f
 800ca2c:	0800ca5f 	.word	0x0800ca5f
 800ca30:	0800ca5f 	.word	0x0800ca5f
 800ca34:	0800ca57 	.word	0x0800ca57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca38:	f7fd fad2 	bl	8009fe0 <HAL_RCC_GetPCLK1Freq>
 800ca3c:	61f8      	str	r0, [r7, #28]
        break;
 800ca3e:	e014      	b.n	800ca6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca40:	f7fd fae4 	bl	800a00c <HAL_RCC_GetPCLK2Freq>
 800ca44:	61f8      	str	r0, [r7, #28]
        break;
 800ca46:	e010      	b.n	800ca6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca48:	4b1e      	ldr	r3, [pc, #120]	; (800cac4 <UART_SetConfig+0x56c>)
 800ca4a:	61fb      	str	r3, [r7, #28]
        break;
 800ca4c:	e00d      	b.n	800ca6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca4e:	f7fd fa2f 	bl	8009eb0 <HAL_RCC_GetSysClockFreq>
 800ca52:	61f8      	str	r0, [r7, #28]
        break;
 800ca54:	e009      	b.n	800ca6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca5a:	61fb      	str	r3, [r7, #28]
        break;
 800ca5c:	e005      	b.n	800ca6a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ca68:	bf00      	nop
    }

    if (pclk != 0U)
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d019      	beq.n	800caa4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	085a      	lsrs	r2, r3, #1
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	441a      	add	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d909      	bls.n	800ca9e <UART_SetConfig+0x546>
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca90:	d205      	bcs.n	800ca9e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60da      	str	r2, [r3, #12]
 800ca9c:	e002      	b.n	800caa4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cab0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3728      	adds	r7, #40	; 0x28
 800cab8:	46bd      	mov	sp, r7
 800caba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cabe:	bf00      	nop
 800cac0:	40008000 	.word	0x40008000
 800cac4:	00f42400 	.word	0x00f42400

0800cac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	f003 0301 	and.w	r3, r3, #1
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	430a      	orrs	r2, r1
 800caf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00a      	beq.n	800cb14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	430a      	orrs	r2, r1
 800cb12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb18:	f003 0304 	and.w	r3, r3, #4
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00a      	beq.n	800cb36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	430a      	orrs	r2, r1
 800cb34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3a:	f003 0308 	and.w	r3, r3, #8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00a      	beq.n	800cb58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	430a      	orrs	r2, r1
 800cb56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5c:	f003 0310 	and.w	r3, r3, #16
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00a      	beq.n	800cb7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7e:	f003 0320 	and.w	r3, r3, #32
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00a      	beq.n	800cb9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	430a      	orrs	r2, r1
 800cb9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01a      	beq.n	800cbde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbc6:	d10a      	bne.n	800cbde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	605a      	str	r2, [r3, #4]
  }
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc1c:	f7f9 ffe6 	bl	8006bec <HAL_GetTick>
 800cc20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0308 	and.w	r3, r3, #8
 800cc2c:	2b08      	cmp	r3, #8
 800cc2e:	d10e      	bne.n	800cc4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f82d 	bl	800cc9e <UART_WaitOnFlagUntilTimeout>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e023      	b.n	800cc96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	d10e      	bne.n	800cc7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f817 	bl	800cc9e <UART_WaitOnFlagUntilTimeout>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e00d      	b.n	800cc96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2220      	movs	r2, #32
 800cc84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b09c      	sub	sp, #112	; 0x70
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	603b      	str	r3, [r7, #0]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccae:	e0a5      	b.n	800cdfc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb6:	f000 80a1 	beq.w	800cdfc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccba:	f7f9 ff97 	bl	8006bec <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d302      	bcc.n	800ccd0 <UART_WaitOnFlagUntilTimeout+0x32>
 800ccca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d13e      	bne.n	800cd4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd8:	e853 3f00 	ldrex	r3, [r3]
 800ccdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ccde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cce4:	667b      	str	r3, [r7, #100]	; 0x64
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccf0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccf6:	e841 2300 	strex	r3, r2, [r1]
 800ccfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ccfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1e6      	bne.n	800ccd0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3308      	adds	r3, #8
 800cd08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	f023 0301 	bic.w	r3, r3, #1
 800cd18:	663b      	str	r3, [r7, #96]	; 0x60
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3308      	adds	r3, #8
 800cd20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd22:	64ba      	str	r2, [r7, #72]	; 0x48
 800cd24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cd30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e5      	bne.n	800cd02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2220      	movs	r2, #32
 800cd40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	e067      	b.n	800ce1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d04f      	beq.n	800cdfc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd6a:	d147      	bne.n	800cdfc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7e:	e853 3f00 	ldrex	r3, [r3]
 800cd82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	461a      	mov	r2, r3
 800cd92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd94:	637b      	str	r3, [r7, #52]	; 0x34
 800cd96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd9c:	e841 2300 	strex	r3, r2, [r1]
 800cda0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1e6      	bne.n	800cd76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	3308      	adds	r3, #8
 800cdae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	e853 3f00 	ldrex	r3, [r3]
 800cdb6:	613b      	str	r3, [r7, #16]
   return(result);
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	f023 0301 	bic.w	r3, r3, #1
 800cdbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cdc8:	623a      	str	r2, [r7, #32]
 800cdca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdcc:	69f9      	ldr	r1, [r7, #28]
 800cdce:	6a3a      	ldr	r2, [r7, #32]
 800cdd0:	e841 2300 	strex	r3, r2, [r1]
 800cdd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1e5      	bne.n	800cda8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2220      	movs	r2, #32
 800cde0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2220      	movs	r2, #32
 800cde6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2220      	movs	r2, #32
 800cdec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e010      	b.n	800ce1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	69da      	ldr	r2, [r3, #28]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	4013      	ands	r3, r2
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	bf0c      	ite	eq
 800ce0c:	2301      	moveq	r3, #1
 800ce0e:	2300      	movne	r3, #0
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	461a      	mov	r2, r3
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	f43f af4a 	beq.w	800ccb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3770      	adds	r7, #112	; 0x70
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b097      	sub	sp, #92	; 0x5c
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	4613      	mov	r3, r2
 800ce34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	88fa      	ldrh	r2, [r7, #6]
 800ce40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	88fa      	ldrh	r2, [r7, #6]
 800ce48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce5a:	d10e      	bne.n	800ce7a <UART_Start_Receive_IT+0x52>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d105      	bne.n	800ce70 <UART_Start_Receive_IT+0x48>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ce6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce6e:	e02d      	b.n	800cecc <UART_Start_Receive_IT+0xa4>
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	22ff      	movs	r2, #255	; 0xff
 800ce74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce78:	e028      	b.n	800cecc <UART_Start_Receive_IT+0xa4>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10d      	bne.n	800ce9e <UART_Start_Receive_IT+0x76>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d104      	bne.n	800ce94 <UART_Start_Receive_IT+0x6c>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	22ff      	movs	r2, #255	; 0xff
 800ce8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce92:	e01b      	b.n	800cecc <UART_Start_Receive_IT+0xa4>
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	227f      	movs	r2, #127	; 0x7f
 800ce98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce9c:	e016      	b.n	800cecc <UART_Start_Receive_IT+0xa4>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cea6:	d10d      	bne.n	800cec4 <UART_Start_Receive_IT+0x9c>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d104      	bne.n	800ceba <UART_Start_Receive_IT+0x92>
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	227f      	movs	r2, #127	; 0x7f
 800ceb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ceb8:	e008      	b.n	800cecc <UART_Start_Receive_IT+0xa4>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	223f      	movs	r2, #63	; 0x3f
 800cebe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cec2:	e003      	b.n	800cecc <UART_Start_Receive_IT+0xa4>
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2222      	movs	r2, #34	; 0x22
 800ced8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3308      	adds	r3, #8
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee4:	e853 3f00 	ldrex	r3, [r3]
 800cee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	f043 0301 	orr.w	r3, r3, #1
 800cef0:	657b      	str	r3, [r7, #84]	; 0x54
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3308      	adds	r3, #8
 800cef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cefa:	64ba      	str	r2, [r7, #72]	; 0x48
 800cefc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf02:	e841 2300 	strex	r3, r2, [r1]
 800cf06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cf08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1e5      	bne.n	800ceda <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf16:	d107      	bne.n	800cf28 <UART_Start_Receive_IT+0x100>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d103      	bne.n	800cf28 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4a24      	ldr	r2, [pc, #144]	; (800cfb4 <UART_Start_Receive_IT+0x18c>)
 800cf24:	665a      	str	r2, [r3, #100]	; 0x64
 800cf26:	e002      	b.n	800cf2e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	4a23      	ldr	r2, [pc, #140]	; (800cfb8 <UART_Start_Receive_IT+0x190>)
 800cf2c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d019      	beq.n	800cf72 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	e853 3f00 	ldrex	r3, [r3]
 800cf4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cf52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	461a      	mov	r2, r3
 800cf5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf5c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf64:	e841 2300 	strex	r3, r2, [r1]
 800cf68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1e6      	bne.n	800cf3e <UART_Start_Receive_IT+0x116>
 800cf70:	e018      	b.n	800cfa4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	e853 3f00 	ldrex	r3, [r3]
 800cf7e:	613b      	str	r3, [r7, #16]
   return(result);
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	f043 0320 	orr.w	r3, r3, #32
 800cf86:	653b      	str	r3, [r7, #80]	; 0x50
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf90:	623b      	str	r3, [r7, #32]
 800cf92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf94:	69f9      	ldr	r1, [r7, #28]
 800cf96:	6a3a      	ldr	r2, [r7, #32]
 800cf98:	e841 2300 	strex	r3, r2, [r1]
 800cf9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1e6      	bne.n	800cf72 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	375c      	adds	r7, #92	; 0x5c
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	0800d3db 	.word	0x0800d3db
 800cfb8:	0800d27b 	.word	0x0800d27b

0800cfbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b095      	sub	sp, #84	; 0x54
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfcc:	e853 3f00 	ldrex	r3, [r3]
 800cfd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe2:	643b      	str	r3, [r7, #64]	; 0x40
 800cfe4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfea:	e841 2300 	strex	r3, r2, [r1]
 800cfee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1e6      	bne.n	800cfc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	3308      	adds	r3, #8
 800cffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	e853 3f00 	ldrex	r3, [r3]
 800d004:	61fb      	str	r3, [r7, #28]
   return(result);
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	f023 0301 	bic.w	r3, r3, #1
 800d00c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3308      	adds	r3, #8
 800d014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d016:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d01e:	e841 2300 	strex	r3, r2, [r1]
 800d022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1e5      	bne.n	800cff6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d118      	bne.n	800d064 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	e853 3f00 	ldrex	r3, [r3]
 800d03e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	f023 0310 	bic.w	r3, r3, #16
 800d046:	647b      	str	r3, [r7, #68]	; 0x44
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	461a      	mov	r2, r3
 800d04e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d050:	61bb      	str	r3, [r7, #24]
 800d052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d054:	6979      	ldr	r1, [r7, #20]
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	e841 2300 	strex	r3, r2, [r1]
 800d05c:	613b      	str	r3, [r7, #16]
   return(result);
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e6      	bne.n	800d032 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d076:	bf00      	nop
 800d078:	3754      	adds	r7, #84	; 0x54
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7ff fa43 	bl	800c52c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0a6:	bf00      	nop
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b08f      	sub	sp, #60	; 0x3c
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0ba:	2b21      	cmp	r3, #33	; 0x21
 800d0bc:	d14d      	bne.n	800d15a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d132      	bne.n	800d130 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	e853 3f00 	ldrex	r3, [r3]
 800d0d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0de:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0f0:	e841 2300 	strex	r3, r2, [r1]
 800d0f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1e6      	bne.n	800d0ca <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	60bb      	str	r3, [r7, #8]
   return(result);
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d110:	633b      	str	r3, [r7, #48]	; 0x30
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	6979      	ldr	r1, [r7, #20]
 800d120:	69ba      	ldr	r2, [r7, #24]
 800d122:	e841 2300 	strex	r3, r2, [r1]
 800d126:	613b      	str	r3, [r7, #16]
   return(result);
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1e6      	bne.n	800d0fc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d12e:	e014      	b.n	800d15a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d134:	781a      	ldrb	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	b292      	uxth	r2, r2
 800d13c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d14e:	b29b      	uxth	r3, r3
 800d150:	3b01      	subs	r3, #1
 800d152:	b29a      	uxth	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d15a:	bf00      	nop
 800d15c:	373c      	adds	r7, #60	; 0x3c
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d166:	b480      	push	{r7}
 800d168:	b091      	sub	sp, #68	; 0x44
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d172:	2b21      	cmp	r3, #33	; 0x21
 800d174:	d151      	bne.n	800d21a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d132      	bne.n	800d1e8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	e853 3f00 	ldrex	r3, [r3]
 800d18e:	623b      	str	r3, [r7, #32]
   return(result);
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d196:	63bb      	str	r3, [r7, #56]	; 0x38
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	461a      	mov	r2, r3
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	633b      	str	r3, [r7, #48]	; 0x30
 800d1a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1a8:	e841 2300 	strex	r3, r2, [r1]
 800d1ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1e6      	bne.n	800d182 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	e853 3f00 	ldrex	r3, [r3]
 800d1c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d2:	61fb      	str	r3, [r7, #28]
 800d1d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	69b9      	ldr	r1, [r7, #24]
 800d1d8:	69fa      	ldr	r2, [r7, #28]
 800d1da:	e841 2300 	strex	r3, r2, [r1]
 800d1de:	617b      	str	r3, [r7, #20]
   return(result);
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e6      	bne.n	800d1b4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d1e6:	e018      	b.n	800d21a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f0:	881a      	ldrh	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1fa:	b292      	uxth	r2, r2
 800d1fc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d202:	1c9a      	adds	r2, r3, #2
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d20e:	b29b      	uxth	r3, r3
 800d210:	3b01      	subs	r3, #1
 800d212:	b29a      	uxth	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d21a:	bf00      	nop
 800d21c:	3744      	adds	r7, #68	; 0x44
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b088      	sub	sp, #32
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	e853 3f00 	ldrex	r3, [r3]
 800d23a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d242:	61fb      	str	r3, [r7, #28]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	61bb      	str	r3, [r7, #24]
 800d24e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d250:	6979      	ldr	r1, [r7, #20]
 800d252:	69ba      	ldr	r2, [r7, #24]
 800d254:	e841 2300 	strex	r3, r2, [r1]
 800d258:	613b      	str	r3, [r7, #16]
   return(result);
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1e6      	bne.n	800d22e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2220      	movs	r2, #32
 800d264:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7f3 ff31 	bl	80010d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d272:	bf00      	nop
 800d274:	3720      	adds	r7, #32
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b096      	sub	sp, #88	; 0x58
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d290:	2b22      	cmp	r3, #34	; 0x22
 800d292:	f040 8094 	bne.w	800d3be <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d29c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d2a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d2a4:	b2d9      	uxtb	r1, r3
 800d2a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2b0:	400a      	ands	r2, r1
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d179      	bne.n	800d3d2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	e853 3f00 	ldrex	r3, [r3]
 800d2ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2f2:	653b      	str	r3, [r7, #80]	; 0x50
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2fc:	647b      	str	r3, [r7, #68]	; 0x44
 800d2fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d300:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d304:	e841 2300 	strex	r3, r2, [r1]
 800d308:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1e6      	bne.n	800d2de <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3308      	adds	r3, #8
 800d316:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	e853 3f00 	ldrex	r3, [r3]
 800d31e:	623b      	str	r3, [r7, #32]
   return(result);
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	f023 0301 	bic.w	r3, r3, #1
 800d326:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3308      	adds	r3, #8
 800d32e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d330:	633a      	str	r2, [r7, #48]	; 0x30
 800d332:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d338:	e841 2300 	strex	r3, r2, [r1]
 800d33c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1e5      	bne.n	800d310 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2220      	movs	r2, #32
 800d348:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d354:	2b01      	cmp	r3, #1
 800d356:	d12e      	bne.n	800d3b6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	e853 3f00 	ldrex	r3, [r3]
 800d36a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f023 0310 	bic.w	r3, r3, #16
 800d372:	64bb      	str	r3, [r7, #72]	; 0x48
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	461a      	mov	r2, r3
 800d37a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37c:	61fb      	str	r3, [r7, #28]
 800d37e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d380:	69b9      	ldr	r1, [r7, #24]
 800d382:	69fa      	ldr	r2, [r7, #28]
 800d384:	e841 2300 	strex	r3, r2, [r1]
 800d388:	617b      	str	r3, [r7, #20]
   return(result);
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d1e6      	bne.n	800d35e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	f003 0310 	and.w	r3, r3, #16
 800d39a:	2b10      	cmp	r3, #16
 800d39c:	d103      	bne.n	800d3a6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2210      	movs	r2, #16
 800d3a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7ff f8c6 	bl	800c540 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3b4:	e00d      	b.n	800d3d2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7f3 feb6 	bl	8001128 <HAL_UART_RxCpltCallback>
}
 800d3bc:	e009      	b.n	800d3d2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	8b1b      	ldrh	r3, [r3, #24]
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f042 0208 	orr.w	r2, r2, #8
 800d3ce:	b292      	uxth	r2, r2
 800d3d0:	831a      	strh	r2, [r3, #24]
}
 800d3d2:	bf00      	nop
 800d3d4:	3758      	adds	r7, #88	; 0x58
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b096      	sub	sp, #88	; 0x58
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d3e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3f0:	2b22      	cmp	r3, #34	; 0x22
 800d3f2:	f040 8094 	bne.w	800d51e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d3fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d404:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d406:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d40a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d40e:	4013      	ands	r3, r2
 800d410:	b29a      	uxth	r2, r3
 800d412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d414:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d41a:	1c9a      	adds	r2, r3, #2
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d426:	b29b      	uxth	r3, r3
 800d428:	3b01      	subs	r3, #1
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d438:	b29b      	uxth	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d179      	bne.n	800d532 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d446:	e853 3f00 	ldrex	r3, [r3]
 800d44a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d452:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	461a      	mov	r2, r3
 800d45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d45c:	643b      	str	r3, [r7, #64]	; 0x40
 800d45e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d464:	e841 2300 	strex	r3, r2, [r1]
 800d468:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1e6      	bne.n	800d43e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3308      	adds	r3, #8
 800d476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	e853 3f00 	ldrex	r3, [r3]
 800d47e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	f023 0301 	bic.w	r3, r3, #1
 800d486:	64bb      	str	r3, [r7, #72]	; 0x48
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3308      	adds	r3, #8
 800d48e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d490:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d498:	e841 2300 	strex	r3, r2, [r1]
 800d49c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1e5      	bne.n	800d470 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d12e      	bne.n	800d516 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	f023 0310 	bic.w	r3, r3, #16
 800d4d2:	647b      	str	r3, [r7, #68]	; 0x44
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	6979      	ldr	r1, [r7, #20]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e6      	bne.n	800d4be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	f003 0310 	and.w	r3, r3, #16
 800d4fa:	2b10      	cmp	r3, #16
 800d4fc:	d103      	bne.n	800d506 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2210      	movs	r2, #16
 800d504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d50c:	4619      	mov	r1, r3
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff f816 	bl	800c540 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d514:	e00d      	b.n	800d532 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7f3 fe06 	bl	8001128 <HAL_UART_RxCpltCallback>
}
 800d51c:	e009      	b.n	800d532 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	8b1b      	ldrh	r3, [r3, #24]
 800d524:	b29a      	uxth	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f042 0208 	orr.w	r2, r2, #8
 800d52e:	b292      	uxth	r2, r2
 800d530:	831a      	strh	r2, [r3, #24]
}
 800d532:	bf00      	nop
 800d534:	3758      	adds	r7, #88	; 0x58
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d542:	bf00      	nop
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d54e:	b480      	push	{r7}
 800d550:	b085      	sub	sp, #20
 800d552:	af00      	add	r7, sp, #0
 800d554:	4603      	mov	r3, r0
 800d556:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d558:	2300      	movs	r3, #0
 800d55a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d55c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d560:	2b84      	cmp	r3, #132	; 0x84
 800d562:	d005      	beq.n	800d570 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d564:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	4413      	add	r3, r2
 800d56c:	3303      	adds	r3, #3
 800d56e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d570:	68fb      	ldr	r3, [r7, #12]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d582:	f001 f9c5 	bl	800e910 <vTaskStartScheduler>
  
  return osOK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d58e:	b089      	sub	sp, #36	; 0x24
 800d590:	af04      	add	r7, sp, #16
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d020      	beq.n	800d5e0 <osThreadCreate+0x54>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	699b      	ldr	r3, [r3, #24]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d01c      	beq.n	800d5e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685c      	ldr	r4, [r3, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681d      	ldr	r5, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	691e      	ldr	r6, [r3, #16]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7ff ffc8 	bl	800d54e <makeFreeRtosPriority>
 800d5be:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5c8:	9202      	str	r2, [sp, #8]
 800d5ca:	9301      	str	r3, [sp, #4]
 800d5cc:	9100      	str	r1, [sp, #0]
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	4632      	mov	r2, r6
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 ff55 	bl	800e484 <xTaskCreateStatic>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	60fb      	str	r3, [r7, #12]
 800d5de:	e01c      	b.n	800d61a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685c      	ldr	r4, [r3, #4]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5ec:	b29e      	uxth	r6, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff ffaa 	bl	800d54e <makeFreeRtosPriority>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	f107 030c 	add.w	r3, r7, #12
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	9200      	str	r2, [sp, #0]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	4632      	mov	r2, r6
 800d608:	4629      	mov	r1, r5
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 ff97 	bl	800e53e <xTaskCreate>
 800d610:	4603      	mov	r3, r0
 800d612:	2b01      	cmp	r3, #1
 800d614:	d001      	beq.n	800d61a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	e000      	b.n	800d61c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d61a:	68fb      	ldr	r3, [r7, #12]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3714      	adds	r7, #20
 800d620:	46bd      	mov	sp, r7
 800d622:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d624 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <osDelay+0x16>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	e000      	b.n	800d63c <osDelay+0x18>
 800d63a:	2301      	movs	r3, #1
 800d63c:	4618      	mov	r0, r3
 800d63e:	f001 f933 	bl	800e8a8 <vTaskDelay>
  
  return osOK;
 800d642:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d007      	beq.n	800d66c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4619      	mov	r1, r3
 800d662:	2001      	movs	r0, #1
 800d664:	f000 fa29 	bl	800daba <xQueueCreateMutexStatic>
 800d668:	4603      	mov	r3, r0
 800d66a:	e003      	b.n	800d674 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d66c:	2001      	movs	r0, #1
 800d66e:	f000 fa0c 	bl	800da8a <xQueueCreateMutex>
 800d672:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d674:	4618      	mov	r0, r3
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f103 0208 	add.w	r2, r3, #8
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f04f 32ff 	mov.w	r2, #4294967295
 800d694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f103 0208 	add.w	r2, r3, #8
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f103 0208 	add.w	r2, r3, #8
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d6ca:	bf00      	nop
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b085      	sub	sp, #20
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	689a      	ldr	r2, [r3, #8]
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	601a      	str	r2, [r3, #0]
}
 800d712:	bf00      	nop
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d71e:	b480      	push	{r7}
 800d720:	b085      	sub	sp, #20
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
 800d726:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d734:	d103      	bne.n	800d73e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	60fb      	str	r3, [r7, #12]
 800d73c:	e00c      	b.n	800d758 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3308      	adds	r3, #8
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	e002      	b.n	800d74c <vListInsert+0x2e>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	429a      	cmp	r2, r3
 800d756:	d2f6      	bcs.n	800d746 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	685a      	ldr	r2, [r3, #4]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	601a      	str	r2, [r3, #0]
}
 800d784:	bf00      	nop
 800d786:	3714      	adds	r7, #20
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	6892      	ldr	r2, [r2, #8]
 800d7a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	6852      	ldr	r2, [r2, #4]
 800d7b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d103      	bne.n	800d7c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	689a      	ldr	r2, [r3, #8]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	1e5a      	subs	r2, r3, #1
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10a      	bne.n	800d80e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d80e:	f001 ffd9 	bl	800f7c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81a:	68f9      	ldr	r1, [r7, #12]
 800d81c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d81e:	fb01 f303 	mul.w	r3, r1, r3
 800d822:	441a      	add	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2200      	movs	r2, #0
 800d82c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83e:	3b01      	subs	r3, #1
 800d840:	68f9      	ldr	r1, [r7, #12]
 800d842:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d844:	fb01 f303 	mul.w	r3, r1, r3
 800d848:	441a      	add	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	22ff      	movs	r2, #255	; 0xff
 800d852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	22ff      	movs	r2, #255	; 0xff
 800d85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d114      	bne.n	800d88e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d01a      	beq.n	800d8a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	3310      	adds	r3, #16
 800d870:	4618      	mov	r0, r3
 800d872:	f001 fa9f 	bl	800edb4 <xTaskRemoveFromEventList>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d012      	beq.n	800d8a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d87c:	4b0c      	ldr	r3, [pc, #48]	; (800d8b0 <xQueueGenericReset+0xcc>)
 800d87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	e009      	b.n	800d8a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3310      	adds	r3, #16
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff fef2 	bl	800d67c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3324      	adds	r3, #36	; 0x24
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff feed 	bl	800d67c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d8a2:	f001 ffbf 	bl	800f824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d8a6:	2301      	movs	r3, #1
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	e000ed04 	.word	0xe000ed04

0800d8b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08e      	sub	sp, #56	; 0x38
 800d8b8:	af02      	add	r7, sp, #8
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10a      	bne.n	800d8fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d8f6:	bf00      	nop
 800d8f8:	e7fe      	b.n	800d8f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <xQueueGenericCreateStatic+0x52>
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <xQueueGenericCreateStatic+0x56>
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <xQueueGenericCreateStatic+0x58>
 800d90a:	2300      	movs	r3, #0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10a      	bne.n	800d926 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	623b      	str	r3, [r7, #32]
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <xQueueGenericCreateStatic+0x7e>
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d101      	bne.n	800d936 <xQueueGenericCreateStatic+0x82>
 800d932:	2301      	movs	r3, #1
 800d934:	e000      	b.n	800d938 <xQueueGenericCreateStatic+0x84>
 800d936:	2300      	movs	r3, #0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10a      	bne.n	800d952 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	61fb      	str	r3, [r7, #28]
}
 800d94e:	bf00      	nop
 800d950:	e7fe      	b.n	800d950 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d952:	2348      	movs	r3, #72	; 0x48
 800d954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	2b48      	cmp	r3, #72	; 0x48
 800d95a:	d00a      	beq.n	800d972 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	61bb      	str	r3, [r7, #24]
}
 800d96e:	bf00      	nop
 800d970:	e7fe      	b.n	800d970 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d972:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00d      	beq.n	800d99a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	2201      	movs	r2, #1
 800d982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d986:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	4613      	mov	r3, r2
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	68b9      	ldr	r1, [r7, #8]
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f000 f83f 	bl	800da18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3730      	adds	r7, #48	; 0x30
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b08a      	sub	sp, #40	; 0x28
 800d9a8:	af02      	add	r7, sp, #8
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10a      	bne.n	800d9ce <xQueueGenericCreate+0x2a>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	613b      	str	r3, [r7, #16]
}
 800d9ca:	bf00      	nop
 800d9cc:	e7fe      	b.n	800d9cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	fb02 f303 	mul.w	r3, r2, r3
 800d9d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	3348      	adds	r3, #72	; 0x48
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f002 f813 	bl	800fa08 <pvPortMalloc>
 800d9e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d011      	beq.n	800da0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	3348      	adds	r3, #72	; 0x48
 800d9f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d9fc:	79fa      	ldrb	r2, [r7, #7]
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	4613      	mov	r3, r2
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	68b9      	ldr	r1, [r7, #8]
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f000 f805 	bl	800da18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da0e:	69bb      	ldr	r3, [r7, #24]
	}
 800da10:	4618      	mov	r0, r3
 800da12:	3720      	adds	r7, #32
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
 800da24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d103      	bne.n	800da34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	69ba      	ldr	r2, [r7, #24]
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	e002      	b.n	800da3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da46:	2101      	movs	r1, #1
 800da48:	69b8      	ldr	r0, [r7, #24]
 800da4a:	f7ff fecb 	bl	800d7e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800da4e:	bf00      	nop
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00e      	beq.n	800da82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800da76:	2300      	movs	r3, #0
 800da78:	2200      	movs	r2, #0
 800da7a:	2100      	movs	r1, #0
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f837 	bl	800daf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800da82:	bf00      	nop
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b086      	sub	sp, #24
 800da8e:	af00      	add	r7, sp, #0
 800da90:	4603      	mov	r3, r0
 800da92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800da94:	2301      	movs	r3, #1
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	2300      	movs	r3, #0
 800da9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800da9c:	79fb      	ldrb	r3, [r7, #7]
 800da9e:	461a      	mov	r2, r3
 800daa0:	6939      	ldr	r1, [r7, #16]
 800daa2:	6978      	ldr	r0, [r7, #20]
 800daa4:	f7ff ff7e 	bl	800d9a4 <xQueueGenericCreate>
 800daa8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f7ff ffd3 	bl	800da56 <prvInitialiseMutex>

		return xNewQueue;
 800dab0:	68fb      	ldr	r3, [r7, #12]
	}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b088      	sub	sp, #32
 800dabe:	af02      	add	r7, sp, #8
 800dac0:	4603      	mov	r3, r0
 800dac2:	6039      	str	r1, [r7, #0]
 800dac4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dac6:	2301      	movs	r3, #1
 800dac8:	617b      	str	r3, [r7, #20]
 800daca:	2300      	movs	r3, #0
 800dacc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dace:	79fb      	ldrb	r3, [r7, #7]
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	2200      	movs	r2, #0
 800dad6:	6939      	ldr	r1, [r7, #16]
 800dad8:	6978      	ldr	r0, [r7, #20]
 800dada:	f7ff feeb 	bl	800d8b4 <xQueueGenericCreateStatic>
 800dade:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f7ff ffb8 	bl	800da56 <prvInitialiseMutex>

		return xNewQueue;
 800dae6:	68fb      	ldr	r3, [r7, #12]
	}
 800dae8:	4618      	mov	r0, r3
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08e      	sub	sp, #56	; 0x38
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dafe:	2300      	movs	r3, #0
 800db00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10a      	bne.n	800db22 <xQueueGenericSend+0x32>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db1e:	bf00      	nop
 800db20:	e7fe      	b.n	800db20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d103      	bne.n	800db30 <xQueueGenericSend+0x40>
 800db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <xQueueGenericSend+0x44>
 800db30:	2301      	movs	r3, #1
 800db32:	e000      	b.n	800db36 <xQueueGenericSend+0x46>
 800db34:	2300      	movs	r3, #0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10a      	bne.n	800db50 <xQueueGenericSend+0x60>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	2b02      	cmp	r3, #2
 800db54:	d103      	bne.n	800db5e <xQueueGenericSend+0x6e>
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d101      	bne.n	800db62 <xQueueGenericSend+0x72>
 800db5e:	2301      	movs	r3, #1
 800db60:	e000      	b.n	800db64 <xQueueGenericSend+0x74>
 800db62:	2300      	movs	r3, #0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10a      	bne.n	800db7e <xQueueGenericSend+0x8e>
	__asm volatile
 800db68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	623b      	str	r3, [r7, #32]
}
 800db7a:	bf00      	nop
 800db7c:	e7fe      	b.n	800db7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db7e:	f001 fad5 	bl	800f12c <xTaskGetSchedulerState>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <xQueueGenericSend+0x9e>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <xQueueGenericSend+0xa2>
 800db8e:	2301      	movs	r3, #1
 800db90:	e000      	b.n	800db94 <xQueueGenericSend+0xa4>
 800db92:	2300      	movs	r3, #0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d10a      	bne.n	800dbae <xQueueGenericSend+0xbe>
	__asm volatile
 800db98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	61fb      	str	r3, [r7, #28]
}
 800dbaa:	bf00      	nop
 800dbac:	e7fe      	b.n	800dbac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbae:	f001 fe09 	bl	800f7c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d302      	bcc.n	800dbc4 <xQueueGenericSend+0xd4>
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	d129      	bne.n	800dc18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbc4:	683a      	ldr	r2, [r7, #0]
 800dbc6:	68b9      	ldr	r1, [r7, #8]
 800dbc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbca:	f000 fb21 	bl	800e210 <prvCopyDataToQueue>
 800dbce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d010      	beq.n	800dbfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	3324      	adds	r3, #36	; 0x24
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f001 f8e9 	bl	800edb4 <xTaskRemoveFromEventList>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d013      	beq.n	800dc10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dbe8:	4b3f      	ldr	r3, [pc, #252]	; (800dce8 <xQueueGenericSend+0x1f8>)
 800dbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	e00a      	b.n	800dc10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d007      	beq.n	800dc10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dc00:	4b39      	ldr	r3, [pc, #228]	; (800dce8 <xQueueGenericSend+0x1f8>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dc10:	f001 fe08 	bl	800f824 <vPortExitCritical>
				return pdPASS;
 800dc14:	2301      	movs	r3, #1
 800dc16:	e063      	b.n	800dce0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d103      	bne.n	800dc26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc1e:	f001 fe01 	bl	800f824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	e05c      	b.n	800dce0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d106      	bne.n	800dc3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc2c:	f107 0314 	add.w	r3, r7, #20
 800dc30:	4618      	mov	r0, r3
 800dc32:	f001 f921 	bl	800ee78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc36:	2301      	movs	r3, #1
 800dc38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc3a:	f001 fdf3 	bl	800f824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc3e:	f000 fec7 	bl	800e9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc42:	f001 fdbf 	bl	800f7c4 <vPortEnterCritical>
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc4c:	b25b      	sxtb	r3, r3
 800dc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc52:	d103      	bne.n	800dc5c <xQueueGenericSend+0x16c>
 800dc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc56:	2200      	movs	r2, #0
 800dc58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc62:	b25b      	sxtb	r3, r3
 800dc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc68:	d103      	bne.n	800dc72 <xQueueGenericSend+0x182>
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc72:	f001 fdd7 	bl	800f824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc76:	1d3a      	adds	r2, r7, #4
 800dc78:	f107 0314 	add.w	r3, r7, #20
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f001 f910 	bl	800eea4 <xTaskCheckForTimeOut>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d124      	bne.n	800dcd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dc8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc8c:	f000 fbb8 	bl	800e400 <prvIsQueueFull>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d018      	beq.n	800dcc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	3310      	adds	r3, #16
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f001 f864 	bl	800ed6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dca6:	f000 fb43 	bl	800e330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dcaa:	f000 fe9f 	bl	800e9ec <xTaskResumeAll>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f47f af7c 	bne.w	800dbae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dcb6:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <xQueueGenericSend+0x1f8>)
 800dcb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcbc:	601a      	str	r2, [r3, #0]
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	e772      	b.n	800dbae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dcc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcca:	f000 fb31 	bl	800e330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcce:	f000 fe8d 	bl	800e9ec <xTaskResumeAll>
 800dcd2:	e76c      	b.n	800dbae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dcd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcd6:	f000 fb2b 	bl	800e330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcda:	f000 fe87 	bl	800e9ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dcde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3738      	adds	r7, #56	; 0x38
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08e      	sub	sp, #56	; 0x38
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10a      	bne.n	800dd16 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	623b      	str	r3, [r7, #32]
}
 800dd12:	bf00      	nop
 800dd14:	e7fe      	b.n	800dd14 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00a      	beq.n	800dd34 <xQueueGiveFromISR+0x48>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	61fb      	str	r3, [r7, #28]
}
 800dd30:	bf00      	nop
 800dd32:	e7fe      	b.n	800dd32 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d103      	bne.n	800dd44 <xQueueGiveFromISR+0x58>
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <xQueueGiveFromISR+0x5c>
 800dd44:	2301      	movs	r3, #1
 800dd46:	e000      	b.n	800dd4a <xQueueGiveFromISR+0x5e>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10a      	bne.n	800dd64 <xQueueGiveFromISR+0x78>
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	61bb      	str	r3, [r7, #24]
}
 800dd60:	bf00      	nop
 800dd62:	e7fe      	b.n	800dd62 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd64:	f001 fe10 	bl	800f988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dd68:	f3ef 8211 	mrs	r2, BASEPRI
 800dd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd70:	f383 8811 	msr	BASEPRI, r3
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	617a      	str	r2, [r7, #20]
 800dd7e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dd80:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd88:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d22b      	bcs.n	800ddec <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dda6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ddaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddae:	d112      	bne.n	800ddd6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d016      	beq.n	800dde6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddba:	3324      	adds	r3, #36	; 0x24
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f000 fff9 	bl	800edb4 <xTaskRemoveFromEventList>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00e      	beq.n	800dde6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00b      	beq.n	800dde6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	e007      	b.n	800dde6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ddd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddda:	3301      	adds	r3, #1
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	b25a      	sxtb	r2, r3
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dde6:	2301      	movs	r3, #1
 800dde8:	637b      	str	r3, [r7, #52]	; 0x34
 800ddea:	e001      	b.n	800ddf0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ddec:	2300      	movs	r3, #0
 800ddee:	637b      	str	r3, [r7, #52]	; 0x34
 800ddf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ddfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3738      	adds	r7, #56	; 0x38
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
	...

0800de08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08c      	sub	sp, #48	; 0x30
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800de14:	2300      	movs	r3, #0
 800de16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10a      	bne.n	800de38 <xQueueReceive+0x30>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	623b      	str	r3, [r7, #32]
}
 800de34:	bf00      	nop
 800de36:	e7fe      	b.n	800de36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d103      	bne.n	800de46 <xQueueReceive+0x3e>
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d101      	bne.n	800de4a <xQueueReceive+0x42>
 800de46:	2301      	movs	r3, #1
 800de48:	e000      	b.n	800de4c <xQueueReceive+0x44>
 800de4a:	2300      	movs	r3, #0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10a      	bne.n	800de66 <xQueueReceive+0x5e>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	61fb      	str	r3, [r7, #28]
}
 800de62:	bf00      	nop
 800de64:	e7fe      	b.n	800de64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de66:	f001 f961 	bl	800f12c <xTaskGetSchedulerState>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <xQueueReceive+0x6e>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <xQueueReceive+0x72>
 800de76:	2301      	movs	r3, #1
 800de78:	e000      	b.n	800de7c <xQueueReceive+0x74>
 800de7a:	2300      	movs	r3, #0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10a      	bne.n	800de96 <xQueueReceive+0x8e>
	__asm volatile
 800de80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	61bb      	str	r3, [r7, #24]
}
 800de92:	bf00      	nop
 800de94:	e7fe      	b.n	800de94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de96:	f001 fc95 	bl	800f7c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d01f      	beq.n	800dee6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deaa:	f000 fa1b 	bl	800e2e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800deae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb0:	1e5a      	subs	r2, r3, #1
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00f      	beq.n	800dede <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	3310      	adds	r3, #16
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 ff76 	bl	800edb4 <xTaskRemoveFromEventList>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d007      	beq.n	800dede <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dece:	4b3d      	ldr	r3, [pc, #244]	; (800dfc4 <xQueueReceive+0x1bc>)
 800ded0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dede:	f001 fca1 	bl	800f824 <vPortExitCritical>
				return pdPASS;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e069      	b.n	800dfba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d103      	bne.n	800def4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800deec:	f001 fc9a 	bl	800f824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800def0:	2300      	movs	r3, #0
 800def2:	e062      	b.n	800dfba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	2b00      	cmp	r3, #0
 800def8:	d106      	bne.n	800df08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800defa:	f107 0310 	add.w	r3, r7, #16
 800defe:	4618      	mov	r0, r3
 800df00:	f000 ffba 	bl	800ee78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df04:	2301      	movs	r3, #1
 800df06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df08:	f001 fc8c 	bl	800f824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df0c:	f000 fd60 	bl	800e9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df10:	f001 fc58 	bl	800f7c4 <vPortEnterCritical>
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df1a:	b25b      	sxtb	r3, r3
 800df1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df20:	d103      	bne.n	800df2a <xQueueReceive+0x122>
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	2200      	movs	r2, #0
 800df26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df30:	b25b      	sxtb	r3, r3
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df36:	d103      	bne.n	800df40 <xQueueReceive+0x138>
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df40:	f001 fc70 	bl	800f824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df44:	1d3a      	adds	r2, r7, #4
 800df46:	f107 0310 	add.w	r3, r7, #16
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 ffa9 	bl	800eea4 <xTaskCheckForTimeOut>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d123      	bne.n	800dfa0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df5a:	f000 fa3b 	bl	800e3d4 <prvIsQueueEmpty>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d017      	beq.n	800df94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	3324      	adds	r3, #36	; 0x24
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	4611      	mov	r1, r2
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 fefd 	bl	800ed6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df74:	f000 f9dc 	bl	800e330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df78:	f000 fd38 	bl	800e9ec <xTaskResumeAll>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d189      	bne.n	800de96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800df82:	4b10      	ldr	r3, [pc, #64]	; (800dfc4 <xQueueReceive+0x1bc>)
 800df84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	e780      	b.n	800de96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800df94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df96:	f000 f9cb 	bl	800e330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df9a:	f000 fd27 	bl	800e9ec <xTaskResumeAll>
 800df9e:	e77a      	b.n	800de96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dfa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfa2:	f000 f9c5 	bl	800e330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfa6:	f000 fd21 	bl	800e9ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfac:	f000 fa12 	bl	800e3d4 <prvIsQueueEmpty>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f43f af6f 	beq.w	800de96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dfb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3730      	adds	r7, #48	; 0x30
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	e000ed04 	.word	0xe000ed04

0800dfc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08e      	sub	sp, #56	; 0x38
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10a      	bne.n	800dffa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	623b      	str	r3, [r7, #32]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00a      	beq.n	800e018 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	61fb      	str	r3, [r7, #28]
}
 800e014:	bf00      	nop
 800e016:	e7fe      	b.n	800e016 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e018:	f001 f888 	bl	800f12c <xTaskGetSchedulerState>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d102      	bne.n	800e028 <xQueueSemaphoreTake+0x60>
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <xQueueSemaphoreTake+0x64>
 800e028:	2301      	movs	r3, #1
 800e02a:	e000      	b.n	800e02e <xQueueSemaphoreTake+0x66>
 800e02c:	2300      	movs	r3, #0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10a      	bne.n	800e048 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	61bb      	str	r3, [r7, #24]
}
 800e044:	bf00      	nop
 800e046:	e7fe      	b.n	800e046 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e048:	f001 fbbc 	bl	800f7c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e050:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e054:	2b00      	cmp	r3, #0
 800e056:	d024      	beq.n	800e0a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	1e5a      	subs	r2, r3, #1
 800e05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d104      	bne.n	800e072 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e068:	f001 fa08 	bl	800f47c <pvTaskIncrementMutexHeldCount>
 800e06c:	4602      	mov	r2, r0
 800e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e070:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00f      	beq.n	800e09a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07c:	3310      	adds	r3, #16
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 fe98 	bl	800edb4 <xTaskRemoveFromEventList>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d007      	beq.n	800e09a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e08a:	4b54      	ldr	r3, [pc, #336]	; (800e1dc <xQueueSemaphoreTake+0x214>)
 800e08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e090:	601a      	str	r2, [r3, #0]
 800e092:	f3bf 8f4f 	dsb	sy
 800e096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e09a:	f001 fbc3 	bl	800f824 <vPortExitCritical>
				return pdPASS;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e097      	b.n	800e1d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d111      	bne.n	800e0cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00a      	beq.n	800e0c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	617b      	str	r3, [r7, #20]
}
 800e0c0:	bf00      	nop
 800e0c2:	e7fe      	b.n	800e0c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e0c4:	f001 fbae 	bl	800f824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e082      	b.n	800e1d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d106      	bne.n	800e0e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0d2:	f107 030c 	add.w	r3, r7, #12
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 fece 	bl	800ee78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0e0:	f001 fba0 	bl	800f824 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0e4:	f000 fc74 	bl	800e9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0e8:	f001 fb6c 	bl	800f7c4 <vPortEnterCritical>
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0f2:	b25b      	sxtb	r3, r3
 800e0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f8:	d103      	bne.n	800e102 <xQueueSemaphoreTake+0x13a>
 800e0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e108:	b25b      	sxtb	r3, r3
 800e10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10e:	d103      	bne.n	800e118 <xQueueSemaphoreTake+0x150>
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	2200      	movs	r2, #0
 800e114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e118:	f001 fb84 	bl	800f824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e11c:	463a      	mov	r2, r7
 800e11e:	f107 030c 	add.w	r3, r7, #12
 800e122:	4611      	mov	r1, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f000 febd 	bl	800eea4 <xTaskCheckForTimeOut>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d132      	bne.n	800e196 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e132:	f000 f94f 	bl	800e3d4 <prvIsQueueEmpty>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d026      	beq.n	800e18a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d109      	bne.n	800e158 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e144:	f001 fb3e 	bl	800f7c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f001 f80b 	bl	800f168 <xTaskPriorityInherit>
 800e152:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e154:	f001 fb66 	bl	800f824 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	3324      	adds	r3, #36	; 0x24
 800e15c:	683a      	ldr	r2, [r7, #0]
 800e15e:	4611      	mov	r1, r2
 800e160:	4618      	mov	r0, r3
 800e162:	f000 fe03 	bl	800ed6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e168:	f000 f8e2 	bl	800e330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e16c:	f000 fc3e 	bl	800e9ec <xTaskResumeAll>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	f47f af68 	bne.w	800e048 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e178:	4b18      	ldr	r3, [pc, #96]	; (800e1dc <xQueueSemaphoreTake+0x214>)
 800e17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	f3bf 8f6f 	isb	sy
 800e188:	e75e      	b.n	800e048 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e18a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e18c:	f000 f8d0 	bl	800e330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e190:	f000 fc2c 	bl	800e9ec <xTaskResumeAll>
 800e194:	e758      	b.n	800e048 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e198:	f000 f8ca 	bl	800e330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e19c:	f000 fc26 	bl	800e9ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1a2:	f000 f917 	bl	800e3d4 <prvIsQueueEmpty>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f43f af4d 	beq.w	800e048 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00d      	beq.n	800e1d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e1b4:	f001 fb06 	bl	800f7c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1ba:	f000 f811 	bl	800e1e0 <prvGetDisinheritPriorityAfterTimeout>
 800e1be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f001 f8ca 	bl	800f360 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e1cc:	f001 fb2a 	bl	800f824 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e1d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3738      	adds	r7, #56	; 0x38
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	e000ed04 	.word	0xe000ed04

0800e1e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d006      	beq.n	800e1fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f1c3 0307 	rsb	r3, r3, #7
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	e001      	b.n	800e202 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e1fe:	2300      	movs	r3, #0
 800e200:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e202:	68fb      	ldr	r3, [r7, #12]
	}
 800e204:	4618      	mov	r0, r3
 800e206:	3714      	adds	r7, #20
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e21c:	2300      	movs	r3, #0
 800e21e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e224:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10d      	bne.n	800e24a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d14d      	bne.n	800e2d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	4618      	mov	r0, r3
 800e23c:	f001 f80a 	bl	800f254 <xTaskPriorityDisinherit>
 800e240:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	609a      	str	r2, [r3, #8]
 800e248:	e043      	b.n	800e2d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d119      	bne.n	800e284 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6858      	ldr	r0, [r3, #4]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e258:	461a      	mov	r2, r3
 800e25a:	68b9      	ldr	r1, [r7, #8]
 800e25c:	f001 fdf8 	bl	800fe50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e268:	441a      	add	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	429a      	cmp	r2, r3
 800e278:	d32b      	bcc.n	800e2d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	605a      	str	r2, [r3, #4]
 800e282:	e026      	b.n	800e2d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68d8      	ldr	r0, [r3, #12]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28c:	461a      	mov	r2, r3
 800e28e:	68b9      	ldr	r1, [r7, #8]
 800e290:	f001 fdde 	bl	800fe50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	68da      	ldr	r2, [r3, #12]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29c:	425b      	negs	r3, r3
 800e29e:	441a      	add	r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	68da      	ldr	r2, [r3, #12]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d207      	bcs.n	800e2c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	689a      	ldr	r2, [r3, #8]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b8:	425b      	negs	r3, r3
 800e2ba:	441a      	add	r2, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d105      	bne.n	800e2d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e2da:	697b      	ldr	r3, [r7, #20]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3718      	adds	r7, #24
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d018      	beq.n	800e328 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	68da      	ldr	r2, [r3, #12]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fe:	441a      	add	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d303      	bcc.n	800e318 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68d9      	ldr	r1, [r3, #12]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e320:	461a      	mov	r2, r3
 800e322:	6838      	ldr	r0, [r7, #0]
 800e324:	f001 fd94 	bl	800fe50 <memcpy>
	}
}
 800e328:	bf00      	nop
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e338:	f001 fa44 	bl	800f7c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e344:	e011      	b.n	800e36a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d012      	beq.n	800e374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3324      	adds	r3, #36	; 0x24
 800e352:	4618      	mov	r0, r3
 800e354:	f000 fd2e 	bl	800edb4 <xTaskRemoveFromEventList>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d001      	beq.n	800e362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e35e:	f000 fe03 	bl	800ef68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	3b01      	subs	r3, #1
 800e366:	b2db      	uxtb	r3, r3
 800e368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	dce9      	bgt.n	800e346 <prvUnlockQueue+0x16>
 800e372:	e000      	b.n	800e376 <prvUnlockQueue+0x46>
					break;
 800e374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	22ff      	movs	r2, #255	; 0xff
 800e37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e37e:	f001 fa51 	bl	800f824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e382:	f001 fa1f 	bl	800f7c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e38c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e38e:	e011      	b.n	800e3b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d012      	beq.n	800e3be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3310      	adds	r3, #16
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 fd09 	bl	800edb4 <xTaskRemoveFromEventList>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e3a8:	f000 fdde 	bl	800ef68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e3ac:	7bbb      	ldrb	r3, [r7, #14]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	dce9      	bgt.n	800e390 <prvUnlockQueue+0x60>
 800e3bc:	e000      	b.n	800e3c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e3be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	22ff      	movs	r2, #255	; 0xff
 800e3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e3c8:	f001 fa2c 	bl	800f824 <vPortExitCritical>
}
 800e3cc:	bf00      	nop
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3dc:	f001 f9f2 	bl	800f7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d102      	bne.n	800e3ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	e001      	b.n	800e3f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e3f2:	f001 fa17 	bl	800f824 <vPortExitCritical>

	return xReturn;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e408:	f001 f9dc 	bl	800f7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e414:	429a      	cmp	r2, r3
 800e416:	d102      	bne.n	800e41e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e418:	2301      	movs	r3, #1
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	e001      	b.n	800e422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e41e:	2300      	movs	r3, #0
 800e420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e422:	f001 f9ff 	bl	800f824 <vPortExitCritical>

	return xReturn;
 800e426:	68fb      	ldr	r3, [r7, #12]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e43a:	2300      	movs	r3, #0
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	e014      	b.n	800e46a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e440:	4a0f      	ldr	r2, [pc, #60]	; (800e480 <vQueueAddToRegistry+0x50>)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10b      	bne.n	800e464 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e44c:	490c      	ldr	r1, [pc, #48]	; (800e480 <vQueueAddToRegistry+0x50>)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e456:	4a0a      	ldr	r2, [pc, #40]	; (800e480 <vQueueAddToRegistry+0x50>)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	4413      	add	r3, r2
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e462:	e006      	b.n	800e472 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	3301      	adds	r3, #1
 800e468:	60fb      	str	r3, [r7, #12]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	d9e7      	bls.n	800e440 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e470:	bf00      	nop
 800e472:	bf00      	nop
 800e474:	3714      	adds	r7, #20
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	20000efc 	.word	0x20000efc

0800e484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08e      	sub	sp, #56	; 0x38
 800e488:	af04      	add	r7, sp, #16
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800e498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	623b      	str	r3, [r7, #32]
}
 800e4aa:	bf00      	nop
 800e4ac:	e7fe      	b.n	800e4ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10a      	bne.n	800e4ca <xTaskCreateStatic+0x46>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	61fb      	str	r3, [r7, #28]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4ca:	2354      	movs	r3, #84	; 0x54
 800e4cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	2b54      	cmp	r3, #84	; 0x54
 800e4d2:	d00a      	beq.n	800e4ea <xTaskCreateStatic+0x66>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	61bb      	str	r3, [r7, #24]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e4ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d01e      	beq.n	800e530 <xTaskCreateStatic+0xac>
 800e4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d01b      	beq.n	800e530 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e500:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	2202      	movs	r2, #2
 800e506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e50a:	2300      	movs	r3, #0
 800e50c:	9303      	str	r3, [sp, #12]
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	9302      	str	r3, [sp, #8]
 800e512:	f107 0314 	add.w	r3, r7, #20
 800e516:	9301      	str	r3, [sp, #4]
 800e518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	68b9      	ldr	r1, [r7, #8]
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f000 f850 	bl	800e5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e52a:	f000 f8d5 	bl	800e6d8 <prvAddNewTaskToReadyList>
 800e52e:	e001      	b.n	800e534 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e530:	2300      	movs	r3, #0
 800e532:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e534:	697b      	ldr	r3, [r7, #20]
	}
 800e536:	4618      	mov	r0, r3
 800e538:	3728      	adds	r7, #40	; 0x28
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b08c      	sub	sp, #48	; 0x30
 800e542:	af04      	add	r7, sp, #16
 800e544:	60f8      	str	r0, [r7, #12]
 800e546:	60b9      	str	r1, [r7, #8]
 800e548:	603b      	str	r3, [r7, #0]
 800e54a:	4613      	mov	r3, r2
 800e54c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e54e:	88fb      	ldrh	r3, [r7, #6]
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	4618      	mov	r0, r3
 800e554:	f001 fa58 	bl	800fa08 <pvPortMalloc>
 800e558:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00e      	beq.n	800e57e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e560:	2054      	movs	r0, #84	; 0x54
 800e562:	f001 fa51 	bl	800fa08 <pvPortMalloc>
 800e566:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d003      	beq.n	800e576 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	631a      	str	r2, [r3, #48]	; 0x30
 800e574:	e005      	b.n	800e582 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e576:	6978      	ldr	r0, [r7, #20]
 800e578:	f001 fb12 	bl	800fba0 <vPortFree>
 800e57c:	e001      	b.n	800e582 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e57e:	2300      	movs	r3, #0
 800e580:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d017      	beq.n	800e5b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e590:	88fa      	ldrh	r2, [r7, #6]
 800e592:	2300      	movs	r3, #0
 800e594:	9303      	str	r3, [sp, #12]
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	9302      	str	r3, [sp, #8]
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	68b9      	ldr	r1, [r7, #8]
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f000 f80e 	bl	800e5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5ac:	69f8      	ldr	r0, [r7, #28]
 800e5ae:	f000 f893 	bl	800e6d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	61bb      	str	r3, [r7, #24]
 800e5b6:	e002      	b.n	800e5be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e5be:	69bb      	ldr	r3, [r7, #24]
	}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3720      	adds	r7, #32
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4413      	add	r3, r2
 800e5e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	f023 0307 	bic.w	r3, r3, #7
 800e5ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	f003 0307 	and.w	r3, r3, #7
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fe:	f383 8811 	msr	BASEPRI, r3
 800e602:	f3bf 8f6f 	isb	sy
 800e606:	f3bf 8f4f 	dsb	sy
 800e60a:	617b      	str	r3, [r7, #20]
}
 800e60c:	bf00      	nop
 800e60e:	e7fe      	b.n	800e60e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d01f      	beq.n	800e656 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e616:	2300      	movs	r3, #0
 800e618:	61fb      	str	r3, [r7, #28]
 800e61a:	e012      	b.n	800e642 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	4413      	add	r3, r2
 800e622:	7819      	ldrb	r1, [r3, #0]
 800e624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	4413      	add	r3, r2
 800e62a:	3334      	adds	r3, #52	; 0x34
 800e62c:	460a      	mov	r2, r1
 800e62e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	4413      	add	r3, r2
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d006      	beq.n	800e64a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	3301      	adds	r3, #1
 800e640:	61fb      	str	r3, [r7, #28]
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	2b0f      	cmp	r3, #15
 800e646:	d9e9      	bls.n	800e61c <prvInitialiseNewTask+0x54>
 800e648:	e000      	b.n	800e64c <prvInitialiseNewTask+0x84>
			{
				break;
 800e64a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e654:	e003      	b.n	800e65e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	2b06      	cmp	r3, #6
 800e662:	d901      	bls.n	800e668 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e664:	2306      	movs	r3, #6
 800e666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e66c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e672:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e676:	2200      	movs	r2, #0
 800e678:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67c:	3304      	adds	r3, #4
 800e67e:	4618      	mov	r0, r3
 800e680:	f7ff f81c 	bl	800d6bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	3318      	adds	r3, #24
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff f817 	bl	800d6bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e696:	f1c3 0207 	rsb	r2, r3, #7
 800e69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	68f9      	ldr	r1, [r7, #12]
 800e6b6:	69b8      	ldr	r0, [r7, #24]
 800e6b8:	f000 ff5a 	bl	800f570 <pxPortInitialiseStack>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6ce:	bf00      	nop
 800e6d0:	3720      	adds	r7, #32
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
	...

0800e6d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e6e0:	f001 f870 	bl	800f7c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e6e4:	4b2a      	ldr	r3, [pc, #168]	; (800e790 <prvAddNewTaskToReadyList+0xb8>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	4a29      	ldr	r2, [pc, #164]	; (800e790 <prvAddNewTaskToReadyList+0xb8>)
 800e6ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e6ee:	4b29      	ldr	r3, [pc, #164]	; (800e794 <prvAddNewTaskToReadyList+0xbc>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d109      	bne.n	800e70a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e6f6:	4a27      	ldr	r2, [pc, #156]	; (800e794 <prvAddNewTaskToReadyList+0xbc>)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6fc:	4b24      	ldr	r3, [pc, #144]	; (800e790 <prvAddNewTaskToReadyList+0xb8>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d110      	bne.n	800e726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e704:	f000 fc54 	bl	800efb0 <prvInitialiseTaskLists>
 800e708:	e00d      	b.n	800e726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e70a:	4b23      	ldr	r3, [pc, #140]	; (800e798 <prvAddNewTaskToReadyList+0xc0>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d109      	bne.n	800e726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e712:	4b20      	ldr	r3, [pc, #128]	; (800e794 <prvAddNewTaskToReadyList+0xbc>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d802      	bhi.n	800e726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e720:	4a1c      	ldr	r2, [pc, #112]	; (800e794 <prvAddNewTaskToReadyList+0xbc>)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e726:	4b1d      	ldr	r3, [pc, #116]	; (800e79c <prvAddNewTaskToReadyList+0xc4>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3301      	adds	r3, #1
 800e72c:	4a1b      	ldr	r2, [pc, #108]	; (800e79c <prvAddNewTaskToReadyList+0xc4>)
 800e72e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e734:	2201      	movs	r2, #1
 800e736:	409a      	lsls	r2, r3
 800e738:	4b19      	ldr	r3, [pc, #100]	; (800e7a0 <prvAddNewTaskToReadyList+0xc8>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	4a18      	ldr	r2, [pc, #96]	; (800e7a0 <prvAddNewTaskToReadyList+0xc8>)
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e746:	4613      	mov	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4413      	add	r3, r2
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	4a15      	ldr	r2, [pc, #84]	; (800e7a4 <prvAddNewTaskToReadyList+0xcc>)
 800e750:	441a      	add	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	3304      	adds	r3, #4
 800e756:	4619      	mov	r1, r3
 800e758:	4610      	mov	r0, r2
 800e75a:	f7fe ffbc 	bl	800d6d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e75e:	f001 f861 	bl	800f824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e762:	4b0d      	ldr	r3, [pc, #52]	; (800e798 <prvAddNewTaskToReadyList+0xc0>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00e      	beq.n	800e788 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e76a:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <prvAddNewTaskToReadyList+0xbc>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e774:	429a      	cmp	r2, r3
 800e776:	d207      	bcs.n	800e788 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e778:	4b0b      	ldr	r3, [pc, #44]	; (800e7a8 <prvAddNewTaskToReadyList+0xd0>)
 800e77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e77e:	601a      	str	r2, [r3, #0]
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e788:	bf00      	nop
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	2000103c 	.word	0x2000103c
 800e794:	20000f3c 	.word	0x20000f3c
 800e798:	20001048 	.word	0x20001048
 800e79c:	20001058 	.word	0x20001058
 800e7a0:	20001044 	.word	0x20001044
 800e7a4:	20000f40 	.word	0x20000f40
 800e7a8:	e000ed04 	.word	0xe000ed04

0800e7ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08a      	sub	sp, #40	; 0x28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10a      	bne.n	800e7d6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	617b      	str	r3, [r7, #20]
}
 800e7d2:	bf00      	nop
 800e7d4:	e7fe      	b.n	800e7d4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10a      	bne.n	800e7f2 <vTaskDelayUntil+0x46>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	613b      	str	r3, [r7, #16]
}
 800e7ee:	bf00      	nop
 800e7f0:	e7fe      	b.n	800e7f0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e7f2:	4b2a      	ldr	r3, [pc, #168]	; (800e89c <vTaskDelayUntil+0xf0>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <vTaskDelayUntil+0x64>
	__asm volatile
 800e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	60fb      	str	r3, [r7, #12]
}
 800e80c:	bf00      	nop
 800e80e:	e7fe      	b.n	800e80e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e810:	f000 f8de 	bl	800e9d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e814:	4b22      	ldr	r3, [pc, #136]	; (800e8a0 <vTaskDelayUntil+0xf4>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	4413      	add	r3, r2
 800e822:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6a3a      	ldr	r2, [r7, #32]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d20b      	bcs.n	800e846 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	69fa      	ldr	r2, [r7, #28]
 800e834:	429a      	cmp	r2, r3
 800e836:	d211      	bcs.n	800e85c <vTaskDelayUntil+0xb0>
 800e838:	69fa      	ldr	r2, [r7, #28]
 800e83a:	6a3b      	ldr	r3, [r7, #32]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d90d      	bls.n	800e85c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e840:	2301      	movs	r3, #1
 800e842:	627b      	str	r3, [r7, #36]	; 0x24
 800e844:	e00a      	b.n	800e85c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	69fa      	ldr	r2, [r7, #28]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d303      	bcc.n	800e858 <vTaskDelayUntil+0xac>
 800e850:	69fa      	ldr	r2, [r7, #28]
 800e852:	6a3b      	ldr	r3, [r7, #32]
 800e854:	429a      	cmp	r2, r3
 800e856:	d901      	bls.n	800e85c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e858:	2301      	movs	r3, #1
 800e85a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	2b00      	cmp	r3, #0
 800e866:	d006      	beq.n	800e876 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e868:	69fa      	ldr	r2, [r7, #28]
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	2100      	movs	r1, #0
 800e870:	4618      	mov	r0, r3
 800e872:	f000 fe17 	bl	800f4a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e876:	f000 f8b9 	bl	800e9ec <xTaskResumeAll>
 800e87a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d107      	bne.n	800e892 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e882:	4b08      	ldr	r3, [pc, #32]	; (800e8a4 <vTaskDelayUntil+0xf8>)
 800e884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e888:	601a      	str	r2, [r3, #0]
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e892:	bf00      	nop
 800e894:	3728      	adds	r7, #40	; 0x28
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	20001064 	.word	0x20001064
 800e8a0:	20001040 	.word	0x20001040
 800e8a4:	e000ed04 	.word	0xe000ed04

0800e8a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d017      	beq.n	800e8ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e8ba:	4b13      	ldr	r3, [pc, #76]	; (800e908 <vTaskDelay+0x60>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d00a      	beq.n	800e8d8 <vTaskDelay+0x30>
	__asm volatile
 800e8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c6:	f383 8811 	msr	BASEPRI, r3
 800e8ca:	f3bf 8f6f 	isb	sy
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	60bb      	str	r3, [r7, #8]
}
 800e8d4:	bf00      	nop
 800e8d6:	e7fe      	b.n	800e8d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e8d8:	f000 f87a 	bl	800e9d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e8dc:	2100      	movs	r1, #0
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 fde0 	bl	800f4a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e8e4:	f000 f882 	bl	800e9ec <xTaskResumeAll>
 800e8e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d107      	bne.n	800e900 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e8f0:	4b06      	ldr	r3, [pc, #24]	; (800e90c <vTaskDelay+0x64>)
 800e8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f6:	601a      	str	r2, [r3, #0]
 800e8f8:	f3bf 8f4f 	dsb	sy
 800e8fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e900:	bf00      	nop
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20001064 	.word	0x20001064
 800e90c:	e000ed04 	.word	0xe000ed04

0800e910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08a      	sub	sp, #40	; 0x28
 800e914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e91e:	463a      	mov	r2, r7
 800e920:	1d39      	adds	r1, r7, #4
 800e922:	f107 0308 	add.w	r3, r7, #8
 800e926:	4618      	mov	r0, r3
 800e928:	f7f3 ffe0 	bl	80028ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	9202      	str	r2, [sp, #8]
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	2300      	movs	r3, #0
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	2300      	movs	r3, #0
 800e93c:	460a      	mov	r2, r1
 800e93e:	491e      	ldr	r1, [pc, #120]	; (800e9b8 <vTaskStartScheduler+0xa8>)
 800e940:	481e      	ldr	r0, [pc, #120]	; (800e9bc <vTaskStartScheduler+0xac>)
 800e942:	f7ff fd9f 	bl	800e484 <xTaskCreateStatic>
 800e946:	4603      	mov	r3, r0
 800e948:	4a1d      	ldr	r2, [pc, #116]	; (800e9c0 <vTaskStartScheduler+0xb0>)
 800e94a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e94c:	4b1c      	ldr	r3, [pc, #112]	; (800e9c0 <vTaskStartScheduler+0xb0>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e954:	2301      	movs	r3, #1
 800e956:	617b      	str	r3, [r7, #20]
 800e958:	e001      	b.n	800e95e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e95a:	2300      	movs	r3, #0
 800e95c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d116      	bne.n	800e992 <vTaskStartScheduler+0x82>
	__asm volatile
 800e964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	613b      	str	r3, [r7, #16]
}
 800e976:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e978:	4b12      	ldr	r3, [pc, #72]	; (800e9c4 <vTaskStartScheduler+0xb4>)
 800e97a:	f04f 32ff 	mov.w	r2, #4294967295
 800e97e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e980:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <vTaskStartScheduler+0xb8>)
 800e982:	2201      	movs	r2, #1
 800e984:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e986:	4b11      	ldr	r3, [pc, #68]	; (800e9cc <vTaskStartScheduler+0xbc>)
 800e988:	2200      	movs	r2, #0
 800e98a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e98c:	f000 fe78 	bl	800f680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e990:	e00e      	b.n	800e9b0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e998:	d10a      	bne.n	800e9b0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	60fb      	str	r3, [r7, #12]
}
 800e9ac:	bf00      	nop
 800e9ae:	e7fe      	b.n	800e9ae <vTaskStartScheduler+0x9e>
}
 800e9b0:	bf00      	nop
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	08013fd4 	.word	0x08013fd4
 800e9bc:	0800ef81 	.word	0x0800ef81
 800e9c0:	20001060 	.word	0x20001060
 800e9c4:	2000105c 	.word	0x2000105c
 800e9c8:	20001048 	.word	0x20001048
 800e9cc:	20001040 	.word	0x20001040

0800e9d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e9d4:	4b04      	ldr	r3, [pc, #16]	; (800e9e8 <vTaskSuspendAll+0x18>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	4a03      	ldr	r2, [pc, #12]	; (800e9e8 <vTaskSuspendAll+0x18>)
 800e9dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e9de:	bf00      	nop
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr
 800e9e8:	20001064 	.word	0x20001064

0800e9ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e9fa:	4b41      	ldr	r3, [pc, #260]	; (800eb00 <xTaskResumeAll+0x114>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d10a      	bne.n	800ea18 <xTaskResumeAll+0x2c>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	603b      	str	r3, [r7, #0]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea18:	f000 fed4 	bl	800f7c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ea1c:	4b38      	ldr	r3, [pc, #224]	; (800eb00 <xTaskResumeAll+0x114>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3b01      	subs	r3, #1
 800ea22:	4a37      	ldr	r2, [pc, #220]	; (800eb00 <xTaskResumeAll+0x114>)
 800ea24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea26:	4b36      	ldr	r3, [pc, #216]	; (800eb00 <xTaskResumeAll+0x114>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d161      	bne.n	800eaf2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea2e:	4b35      	ldr	r3, [pc, #212]	; (800eb04 <xTaskResumeAll+0x118>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d05d      	beq.n	800eaf2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea36:	e02e      	b.n	800ea96 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea38:	4b33      	ldr	r3, [pc, #204]	; (800eb08 <xTaskResumeAll+0x11c>)
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3318      	adds	r3, #24
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fe fea3 	bl	800d790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fe fe9e 	bl	800d790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea58:	2201      	movs	r2, #1
 800ea5a:	409a      	lsls	r2, r3
 800ea5c:	4b2b      	ldr	r3, [pc, #172]	; (800eb0c <xTaskResumeAll+0x120>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	4a2a      	ldr	r2, [pc, #168]	; (800eb0c <xTaskResumeAll+0x120>)
 800ea64:	6013      	str	r3, [r2, #0]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4413      	add	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	4a27      	ldr	r2, [pc, #156]	; (800eb10 <xTaskResumeAll+0x124>)
 800ea74:	441a      	add	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	3304      	adds	r3, #4
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	f7fe fe2a 	bl	800d6d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea86:	4b23      	ldr	r3, [pc, #140]	; (800eb14 <xTaskResumeAll+0x128>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d302      	bcc.n	800ea96 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ea90:	4b21      	ldr	r3, [pc, #132]	; (800eb18 <xTaskResumeAll+0x12c>)
 800ea92:	2201      	movs	r2, #1
 800ea94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea96:	4b1c      	ldr	r3, [pc, #112]	; (800eb08 <xTaskResumeAll+0x11c>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1cc      	bne.n	800ea38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d001      	beq.n	800eaa8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eaa4:	f000 fb22 	bl	800f0ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eaa8:	4b1c      	ldr	r3, [pc, #112]	; (800eb1c <xTaskResumeAll+0x130>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d010      	beq.n	800ead6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eab4:	f000 f846 	bl	800eb44 <xTaskIncrementTick>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d002      	beq.n	800eac4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800eabe:	4b16      	ldr	r3, [pc, #88]	; (800eb18 <xTaskResumeAll+0x12c>)
 800eac0:	2201      	movs	r2, #1
 800eac2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	3b01      	subs	r3, #1
 800eac8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1f1      	bne.n	800eab4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ead0:	4b12      	ldr	r3, [pc, #72]	; (800eb1c <xTaskResumeAll+0x130>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ead6:	4b10      	ldr	r3, [pc, #64]	; (800eb18 <xTaskResumeAll+0x12c>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d009      	beq.n	800eaf2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eade:	2301      	movs	r3, #1
 800eae0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eae2:	4b0f      	ldr	r3, [pc, #60]	; (800eb20 <xTaskResumeAll+0x134>)
 800eae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae8:	601a      	str	r2, [r3, #0]
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eaf2:	f000 fe97 	bl	800f824 <vPortExitCritical>

	return xAlreadyYielded;
 800eaf6:	68bb      	ldr	r3, [r7, #8]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	20001064 	.word	0x20001064
 800eb04:	2000103c 	.word	0x2000103c
 800eb08:	20000ffc 	.word	0x20000ffc
 800eb0c:	20001044 	.word	0x20001044
 800eb10:	20000f40 	.word	0x20000f40
 800eb14:	20000f3c 	.word	0x20000f3c
 800eb18:	20001050 	.word	0x20001050
 800eb1c:	2000104c 	.word	0x2000104c
 800eb20:	e000ed04 	.word	0xe000ed04

0800eb24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eb24:	b480      	push	{r7}
 800eb26:	b083      	sub	sp, #12
 800eb28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eb2a:	4b05      	ldr	r3, [pc, #20]	; (800eb40 <xTaskGetTickCount+0x1c>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eb30:	687b      	ldr	r3, [r7, #4]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	370c      	adds	r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	20001040 	.word	0x20001040

0800eb44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb4e:	4b4e      	ldr	r3, [pc, #312]	; (800ec88 <xTaskIncrementTick+0x144>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f040 808e 	bne.w	800ec74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eb58:	4b4c      	ldr	r3, [pc, #304]	; (800ec8c <xTaskIncrementTick+0x148>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eb60:	4a4a      	ldr	r2, [pc, #296]	; (800ec8c <xTaskIncrementTick+0x148>)
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d120      	bne.n	800ebae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800eb6c:	4b48      	ldr	r3, [pc, #288]	; (800ec90 <xTaskIncrementTick+0x14c>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00a      	beq.n	800eb8c <xTaskIncrementTick+0x48>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	603b      	str	r3, [r7, #0]
}
 800eb88:	bf00      	nop
 800eb8a:	e7fe      	b.n	800eb8a <xTaskIncrementTick+0x46>
 800eb8c:	4b40      	ldr	r3, [pc, #256]	; (800ec90 <xTaskIncrementTick+0x14c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	4b40      	ldr	r3, [pc, #256]	; (800ec94 <xTaskIncrementTick+0x150>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a3e      	ldr	r2, [pc, #248]	; (800ec90 <xTaskIncrementTick+0x14c>)
 800eb98:	6013      	str	r3, [r2, #0]
 800eb9a:	4a3e      	ldr	r2, [pc, #248]	; (800ec94 <xTaskIncrementTick+0x150>)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6013      	str	r3, [r2, #0]
 800eba0:	4b3d      	ldr	r3, [pc, #244]	; (800ec98 <xTaskIncrementTick+0x154>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	3301      	adds	r3, #1
 800eba6:	4a3c      	ldr	r2, [pc, #240]	; (800ec98 <xTaskIncrementTick+0x154>)
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	f000 fa9f 	bl	800f0ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ebae:	4b3b      	ldr	r3, [pc, #236]	; (800ec9c <xTaskIncrementTick+0x158>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d348      	bcc.n	800ec4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebb8:	4b35      	ldr	r3, [pc, #212]	; (800ec90 <xTaskIncrementTick+0x14c>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d104      	bne.n	800ebcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebc2:	4b36      	ldr	r3, [pc, #216]	; (800ec9c <xTaskIncrementTick+0x158>)
 800ebc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc8:	601a      	str	r2, [r3, #0]
					break;
 800ebca:	e03e      	b.n	800ec4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebcc:	4b30      	ldr	r3, [pc, #192]	; (800ec90 <xTaskIncrementTick+0x14c>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d203      	bcs.n	800ebec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ebe4:	4a2d      	ldr	r2, [pc, #180]	; (800ec9c <xTaskIncrementTick+0x158>)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ebea:	e02e      	b.n	800ec4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	3304      	adds	r3, #4
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe fdcd 	bl	800d790 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d004      	beq.n	800ec08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	3318      	adds	r3, #24
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fe fdc4 	bl	800d790 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	409a      	lsls	r2, r3
 800ec10:	4b23      	ldr	r3, [pc, #140]	; (800eca0 <xTaskIncrementTick+0x15c>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4313      	orrs	r3, r2
 800ec16:	4a22      	ldr	r2, [pc, #136]	; (800eca0 <xTaskIncrementTick+0x15c>)
 800ec18:	6013      	str	r3, [r2, #0]
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1e:	4613      	mov	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4413      	add	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4a1f      	ldr	r2, [pc, #124]	; (800eca4 <xTaskIncrementTick+0x160>)
 800ec28:	441a      	add	r2, r3
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	3304      	adds	r3, #4
 800ec2e:	4619      	mov	r1, r3
 800ec30:	4610      	mov	r0, r2
 800ec32:	f7fe fd50 	bl	800d6d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec3a:	4b1b      	ldr	r3, [pc, #108]	; (800eca8 <xTaskIncrementTick+0x164>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d3b9      	bcc.n	800ebb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ec44:	2301      	movs	r3, #1
 800ec46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec48:	e7b6      	b.n	800ebb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ec4a:	4b17      	ldr	r3, [pc, #92]	; (800eca8 <xTaskIncrementTick+0x164>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec50:	4914      	ldr	r1, [pc, #80]	; (800eca4 <xTaskIncrementTick+0x160>)
 800ec52:	4613      	mov	r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	4413      	add	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	440b      	add	r3, r1
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d901      	bls.n	800ec66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ec62:	2301      	movs	r3, #1
 800ec64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ec66:	4b11      	ldr	r3, [pc, #68]	; (800ecac <xTaskIncrementTick+0x168>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	e004      	b.n	800ec7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ec74:	4b0e      	ldr	r3, [pc, #56]	; (800ecb0 <xTaskIncrementTick+0x16c>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	4a0d      	ldr	r2, [pc, #52]	; (800ecb0 <xTaskIncrementTick+0x16c>)
 800ec7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ec7e:	697b      	ldr	r3, [r7, #20]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3718      	adds	r7, #24
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	20001064 	.word	0x20001064
 800ec8c:	20001040 	.word	0x20001040
 800ec90:	20000ff4 	.word	0x20000ff4
 800ec94:	20000ff8 	.word	0x20000ff8
 800ec98:	20001054 	.word	0x20001054
 800ec9c:	2000105c 	.word	0x2000105c
 800eca0:	20001044 	.word	0x20001044
 800eca4:	20000f40 	.word	0x20000f40
 800eca8:	20000f3c 	.word	0x20000f3c
 800ecac:	20001050 	.word	0x20001050
 800ecb0:	2000104c 	.word	0x2000104c

0800ecb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b087      	sub	sp, #28
 800ecb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ecba:	4b27      	ldr	r3, [pc, #156]	; (800ed58 <vTaskSwitchContext+0xa4>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d003      	beq.n	800ecca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ecc2:	4b26      	ldr	r3, [pc, #152]	; (800ed5c <vTaskSwitchContext+0xa8>)
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ecc8:	e03f      	b.n	800ed4a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ecca:	4b24      	ldr	r3, [pc, #144]	; (800ed5c <vTaskSwitchContext+0xa8>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecd0:	4b23      	ldr	r3, [pc, #140]	; (800ed60 <vTaskSwitchContext+0xac>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	fab3 f383 	clz	r3, r3
 800ecdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ecde:	7afb      	ldrb	r3, [r7, #11]
 800ece0:	f1c3 031f 	rsb	r3, r3, #31
 800ece4:	617b      	str	r3, [r7, #20]
 800ece6:	491f      	ldr	r1, [pc, #124]	; (800ed64 <vTaskSwitchContext+0xb0>)
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	4613      	mov	r3, r2
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4413      	add	r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	440b      	add	r3, r1
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d10a      	bne.n	800ed10 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ecfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfe:	f383 8811 	msr	BASEPRI, r3
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	607b      	str	r3, [r7, #4]
}
 800ed0c:	bf00      	nop
 800ed0e:	e7fe      	b.n	800ed0e <vTaskSwitchContext+0x5a>
 800ed10:	697a      	ldr	r2, [r7, #20]
 800ed12:	4613      	mov	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4413      	add	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4a12      	ldr	r2, [pc, #72]	; (800ed64 <vTaskSwitchContext+0xb0>)
 800ed1c:	4413      	add	r3, r2
 800ed1e:	613b      	str	r3, [r7, #16]
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	685a      	ldr	r2, [r3, #4]
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	605a      	str	r2, [r3, #4]
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	685a      	ldr	r2, [r3, #4]
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	3308      	adds	r3, #8
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d104      	bne.n	800ed40 <vTaskSwitchContext+0x8c>
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	605a      	str	r2, [r3, #4]
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	4a08      	ldr	r2, [pc, #32]	; (800ed68 <vTaskSwitchContext+0xb4>)
 800ed48:	6013      	str	r3, [r2, #0]
}
 800ed4a:	bf00      	nop
 800ed4c:	371c      	adds	r7, #28
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	20001064 	.word	0x20001064
 800ed5c:	20001050 	.word	0x20001050
 800ed60:	20001044 	.word	0x20001044
 800ed64:	20000f40 	.word	0x20000f40
 800ed68:	20000f3c 	.word	0x20000f3c

0800ed6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10a      	bne.n	800ed92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	60fb      	str	r3, [r7, #12]
}
 800ed8e:	bf00      	nop
 800ed90:	e7fe      	b.n	800ed90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed92:	4b07      	ldr	r3, [pc, #28]	; (800edb0 <vTaskPlaceOnEventList+0x44>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3318      	adds	r3, #24
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7fe fcbf 	bl	800d71e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eda0:	2101      	movs	r1, #1
 800eda2:	6838      	ldr	r0, [r7, #0]
 800eda4:	f000 fb7e 	bl	800f4a4 <prvAddCurrentTaskToDelayedList>
}
 800eda8:	bf00      	nop
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	20000f3c 	.word	0x20000f3c

0800edb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10a      	bne.n	800ede0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	f383 8811 	msr	BASEPRI, r3
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	60fb      	str	r3, [r7, #12]
}
 800eddc:	bf00      	nop
 800edde:	e7fe      	b.n	800edde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	3318      	adds	r3, #24
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7fe fcd3 	bl	800d790 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edea:	4b1d      	ldr	r3, [pc, #116]	; (800ee60 <xTaskRemoveFromEventList+0xac>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d11c      	bne.n	800ee2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	3304      	adds	r3, #4
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fe fcca 	bl	800d790 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	2201      	movs	r2, #1
 800ee02:	409a      	lsls	r2, r3
 800ee04:	4b17      	ldr	r3, [pc, #92]	; (800ee64 <xTaskRemoveFromEventList+0xb0>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	4a16      	ldr	r2, [pc, #88]	; (800ee64 <xTaskRemoveFromEventList+0xb0>)
 800ee0c:	6013      	str	r3, [r2, #0]
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee12:	4613      	mov	r3, r2
 800ee14:	009b      	lsls	r3, r3, #2
 800ee16:	4413      	add	r3, r2
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	4a13      	ldr	r2, [pc, #76]	; (800ee68 <xTaskRemoveFromEventList+0xb4>)
 800ee1c:	441a      	add	r2, r3
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4619      	mov	r1, r3
 800ee24:	4610      	mov	r0, r2
 800ee26:	f7fe fc56 	bl	800d6d6 <vListInsertEnd>
 800ee2a:	e005      	b.n	800ee38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	3318      	adds	r3, #24
 800ee30:	4619      	mov	r1, r3
 800ee32:	480e      	ldr	r0, [pc, #56]	; (800ee6c <xTaskRemoveFromEventList+0xb8>)
 800ee34:	f7fe fc4f 	bl	800d6d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3c:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <xTaskRemoveFromEventList+0xbc>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d905      	bls.n	800ee52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ee46:	2301      	movs	r3, #1
 800ee48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ee4a:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <xTaskRemoveFromEventList+0xc0>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	e001      	b.n	800ee56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ee52:	2300      	movs	r3, #0
 800ee54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ee56:	697b      	ldr	r3, [r7, #20]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	20001064 	.word	0x20001064
 800ee64:	20001044 	.word	0x20001044
 800ee68:	20000f40 	.word	0x20000f40
 800ee6c:	20000ffc 	.word	0x20000ffc
 800ee70:	20000f3c 	.word	0x20000f3c
 800ee74:	20001050 	.word	0x20001050

0800ee78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ee80:	4b06      	ldr	r3, [pc, #24]	; (800ee9c <vTaskInternalSetTimeOutState+0x24>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ee88:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <vTaskInternalSetTimeOutState+0x28>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	605a      	str	r2, [r3, #4]
}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	20001054 	.word	0x20001054
 800eea0:	20001040 	.word	0x20001040

0800eea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b088      	sub	sp, #32
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10a      	bne.n	800eeca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	f3bf 8f6f 	isb	sy
 800eec0:	f3bf 8f4f 	dsb	sy
 800eec4:	613b      	str	r3, [r7, #16]
}
 800eec6:	bf00      	nop
 800eec8:	e7fe      	b.n	800eec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10a      	bne.n	800eee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	60fb      	str	r3, [r7, #12]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eee6:	f000 fc6d 	bl	800f7c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eeea:	4b1d      	ldr	r3, [pc, #116]	; (800ef60 <xTaskCheckForTimeOut+0xbc>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	69ba      	ldr	r2, [r7, #24]
 800eef6:	1ad3      	subs	r3, r2, r3
 800eef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef02:	d102      	bne.n	800ef0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ef04:	2300      	movs	r3, #0
 800ef06:	61fb      	str	r3, [r7, #28]
 800ef08:	e023      	b.n	800ef52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	4b15      	ldr	r3, [pc, #84]	; (800ef64 <xTaskCheckForTimeOut+0xc0>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d007      	beq.n	800ef26 <xTaskCheckForTimeOut+0x82>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	69ba      	ldr	r2, [r7, #24]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d302      	bcc.n	800ef26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ef20:	2301      	movs	r3, #1
 800ef22:	61fb      	str	r3, [r7, #28]
 800ef24:	e015      	b.n	800ef52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d20b      	bcs.n	800ef48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	1ad2      	subs	r2, r2, r3
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff ff9b 	bl	800ee78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ef42:	2300      	movs	r3, #0
 800ef44:	61fb      	str	r3, [r7, #28]
 800ef46:	e004      	b.n	800ef52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ef52:	f000 fc67 	bl	800f824 <vPortExitCritical>

	return xReturn;
 800ef56:	69fb      	ldr	r3, [r7, #28]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3720      	adds	r7, #32
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	20001040 	.word	0x20001040
 800ef64:	20001054 	.word	0x20001054

0800ef68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ef6c:	4b03      	ldr	r3, [pc, #12]	; (800ef7c <vTaskMissedYield+0x14>)
 800ef6e:	2201      	movs	r2, #1
 800ef70:	601a      	str	r2, [r3, #0]
}
 800ef72:	bf00      	nop
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr
 800ef7c:	20001050 	.word	0x20001050

0800ef80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ef88:	f000 f852 	bl	800f030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ef8c:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <prvIdleTask+0x28>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d9f9      	bls.n	800ef88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ef94:	4b05      	ldr	r3, [pc, #20]	; (800efac <prvIdleTask+0x2c>)
 800ef96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800efa4:	e7f0      	b.n	800ef88 <prvIdleTask+0x8>
 800efa6:	bf00      	nop
 800efa8:	20000f40 	.word	0x20000f40
 800efac:	e000ed04 	.word	0xe000ed04

0800efb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800efb6:	2300      	movs	r3, #0
 800efb8:	607b      	str	r3, [r7, #4]
 800efba:	e00c      	b.n	800efd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	4613      	mov	r3, r2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4413      	add	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4a12      	ldr	r2, [pc, #72]	; (800f010 <prvInitialiseTaskLists+0x60>)
 800efc8:	4413      	add	r3, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe fb56 	bl	800d67c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	3301      	adds	r3, #1
 800efd4:	607b      	str	r3, [r7, #4]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b06      	cmp	r3, #6
 800efda:	d9ef      	bls.n	800efbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800efdc:	480d      	ldr	r0, [pc, #52]	; (800f014 <prvInitialiseTaskLists+0x64>)
 800efde:	f7fe fb4d 	bl	800d67c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800efe2:	480d      	ldr	r0, [pc, #52]	; (800f018 <prvInitialiseTaskLists+0x68>)
 800efe4:	f7fe fb4a 	bl	800d67c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800efe8:	480c      	ldr	r0, [pc, #48]	; (800f01c <prvInitialiseTaskLists+0x6c>)
 800efea:	f7fe fb47 	bl	800d67c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800efee:	480c      	ldr	r0, [pc, #48]	; (800f020 <prvInitialiseTaskLists+0x70>)
 800eff0:	f7fe fb44 	bl	800d67c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eff4:	480b      	ldr	r0, [pc, #44]	; (800f024 <prvInitialiseTaskLists+0x74>)
 800eff6:	f7fe fb41 	bl	800d67c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800effa:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <prvInitialiseTaskLists+0x78>)
 800effc:	4a05      	ldr	r2, [pc, #20]	; (800f014 <prvInitialiseTaskLists+0x64>)
 800effe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f000:	4b0a      	ldr	r3, [pc, #40]	; (800f02c <prvInitialiseTaskLists+0x7c>)
 800f002:	4a05      	ldr	r2, [pc, #20]	; (800f018 <prvInitialiseTaskLists+0x68>)
 800f004:	601a      	str	r2, [r3, #0]
}
 800f006:	bf00      	nop
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	20000f40 	.word	0x20000f40
 800f014:	20000fcc 	.word	0x20000fcc
 800f018:	20000fe0 	.word	0x20000fe0
 800f01c:	20000ffc 	.word	0x20000ffc
 800f020:	20001010 	.word	0x20001010
 800f024:	20001028 	.word	0x20001028
 800f028:	20000ff4 	.word	0x20000ff4
 800f02c:	20000ff8 	.word	0x20000ff8

0800f030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f036:	e019      	b.n	800f06c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f038:	f000 fbc4 	bl	800f7c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f03c:	4b10      	ldr	r3, [pc, #64]	; (800f080 <prvCheckTasksWaitingTermination+0x50>)
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	3304      	adds	r3, #4
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fe fba1 	bl	800d790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f04e:	4b0d      	ldr	r3, [pc, #52]	; (800f084 <prvCheckTasksWaitingTermination+0x54>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	3b01      	subs	r3, #1
 800f054:	4a0b      	ldr	r2, [pc, #44]	; (800f084 <prvCheckTasksWaitingTermination+0x54>)
 800f056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f058:	4b0b      	ldr	r3, [pc, #44]	; (800f088 <prvCheckTasksWaitingTermination+0x58>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	4a0a      	ldr	r2, [pc, #40]	; (800f088 <prvCheckTasksWaitingTermination+0x58>)
 800f060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f062:	f000 fbdf 	bl	800f824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 f810 	bl	800f08c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f06c:	4b06      	ldr	r3, [pc, #24]	; (800f088 <prvCheckTasksWaitingTermination+0x58>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1e1      	bne.n	800f038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f074:	bf00      	nop
 800f076:	bf00      	nop
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	20001010 	.word	0x20001010
 800f084:	2000103c 	.word	0x2000103c
 800f088:	20001024 	.word	0x20001024

0800f08c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d108      	bne.n	800f0b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 fd7c 	bl	800fba0 <vPortFree>
				vPortFree( pxTCB );
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fd79 	bl	800fba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f0ae:	e018      	b.n	800f0e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d103      	bne.n	800f0c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fd70 	bl	800fba0 <vPortFree>
	}
 800f0c0:	e00f      	b.n	800f0e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f0c8:	2b02      	cmp	r3, #2
 800f0ca:	d00a      	beq.n	800f0e2 <prvDeleteTCB+0x56>
	__asm volatile
 800f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	60fb      	str	r3, [r7, #12]
}
 800f0de:	bf00      	nop
 800f0e0:	e7fe      	b.n	800f0e0 <prvDeleteTCB+0x54>
	}
 800f0e2:	bf00      	nop
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
	...

0800f0ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0f2:	4b0c      	ldr	r3, [pc, #48]	; (800f124 <prvResetNextTaskUnblockTime+0x38>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d104      	bne.n	800f106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f0fc:	4b0a      	ldr	r3, [pc, #40]	; (800f128 <prvResetNextTaskUnblockTime+0x3c>)
 800f0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f104:	e008      	b.n	800f118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f106:	4b07      	ldr	r3, [pc, #28]	; (800f124 <prvResetNextTaskUnblockTime+0x38>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	4a04      	ldr	r2, [pc, #16]	; (800f128 <prvResetNextTaskUnblockTime+0x3c>)
 800f116:	6013      	str	r3, [r2, #0]
}
 800f118:	bf00      	nop
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	20000ff4 	.word	0x20000ff4
 800f128:	2000105c 	.word	0x2000105c

0800f12c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f132:	4b0b      	ldr	r3, [pc, #44]	; (800f160 <xTaskGetSchedulerState+0x34>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d102      	bne.n	800f140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f13a:	2301      	movs	r3, #1
 800f13c:	607b      	str	r3, [r7, #4]
 800f13e:	e008      	b.n	800f152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f140:	4b08      	ldr	r3, [pc, #32]	; (800f164 <xTaskGetSchedulerState+0x38>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d102      	bne.n	800f14e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f148:	2302      	movs	r3, #2
 800f14a:	607b      	str	r3, [r7, #4]
 800f14c:	e001      	b.n	800f152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f14e:	2300      	movs	r3, #0
 800f150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f152:	687b      	ldr	r3, [r7, #4]
	}
 800f154:	4618      	mov	r0, r3
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr
 800f160:	20001048 	.word	0x20001048
 800f164:	20001064 	.word	0x20001064

0800f168 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f174:	2300      	movs	r3, #0
 800f176:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d05e      	beq.n	800f23c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f182:	4b31      	ldr	r3, [pc, #196]	; (800f248 <xTaskPriorityInherit+0xe0>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f188:	429a      	cmp	r2, r3
 800f18a:	d24e      	bcs.n	800f22a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	699b      	ldr	r3, [r3, #24]
 800f190:	2b00      	cmp	r3, #0
 800f192:	db06      	blt.n	800f1a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f194:	4b2c      	ldr	r3, [pc, #176]	; (800f248 <xTaskPriorityInherit+0xe0>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19a:	f1c3 0207 	rsb	r2, r3, #7
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	6959      	ldr	r1, [r3, #20]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	4a26      	ldr	r2, [pc, #152]	; (800f24c <xTaskPriorityInherit+0xe4>)
 800f1b4:	4413      	add	r3, r2
 800f1b6:	4299      	cmp	r1, r3
 800f1b8:	d12f      	bne.n	800f21a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	3304      	adds	r3, #4
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fe fae6 	bl	800d790 <uxListRemove>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d10a      	bne.n	800f1e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1d4:	43da      	mvns	r2, r3
 800f1d6:	4b1e      	ldr	r3, [pc, #120]	; (800f250 <xTaskPriorityInherit+0xe8>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	4013      	ands	r3, r2
 800f1dc:	4a1c      	ldr	r2, [pc, #112]	; (800f250 <xTaskPriorityInherit+0xe8>)
 800f1de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f1e0:	4b19      	ldr	r3, [pc, #100]	; (800f248 <xTaskPriorityInherit+0xe0>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	409a      	lsls	r2, r3
 800f1f2:	4b17      	ldr	r3, [pc, #92]	; (800f250 <xTaskPriorityInherit+0xe8>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	4a15      	ldr	r2, [pc, #84]	; (800f250 <xTaskPriorityInherit+0xe8>)
 800f1fa:	6013      	str	r3, [r2, #0]
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f200:	4613      	mov	r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	4413      	add	r3, r2
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	4a10      	ldr	r2, [pc, #64]	; (800f24c <xTaskPriorityInherit+0xe4>)
 800f20a:	441a      	add	r2, r3
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	3304      	adds	r3, #4
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	f7fe fa5f 	bl	800d6d6 <vListInsertEnd>
 800f218:	e004      	b.n	800f224 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f21a:	4b0b      	ldr	r3, [pc, #44]	; (800f248 <xTaskPriorityInherit+0xe0>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f224:	2301      	movs	r3, #1
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	e008      	b.n	800f23c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f22e:	4b06      	ldr	r3, [pc, #24]	; (800f248 <xTaskPriorityInherit+0xe0>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f234:	429a      	cmp	r2, r3
 800f236:	d201      	bcs.n	800f23c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f238:	2301      	movs	r3, #1
 800f23a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f23c:	68fb      	ldr	r3, [r7, #12]
	}
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	20000f3c 	.word	0x20000f3c
 800f24c:	20000f40 	.word	0x20000f40
 800f250:	20001044 	.word	0x20001044

0800f254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f260:	2300      	movs	r3, #0
 800f262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d06e      	beq.n	800f348 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f26a:	4b3a      	ldr	r3, [pc, #232]	; (800f354 <xTaskPriorityDisinherit+0x100>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	693a      	ldr	r2, [r7, #16]
 800f270:	429a      	cmp	r2, r3
 800f272:	d00a      	beq.n	800f28a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	60fb      	str	r3, [r7, #12]
}
 800f286:	bf00      	nop
 800f288:	e7fe      	b.n	800f288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10a      	bne.n	800f2a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f296:	f383 8811 	msr	BASEPRI, r3
 800f29a:	f3bf 8f6f 	isb	sy
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	60bb      	str	r3, [r7, #8]
}
 800f2a4:	bf00      	nop
 800f2a6:	e7fe      	b.n	800f2a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2ac:	1e5a      	subs	r2, r3, #1
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d044      	beq.n	800f348 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d140      	bne.n	800f348 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	3304      	adds	r3, #4
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fe fa60 	bl	800d790 <uxListRemove>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d115      	bne.n	800f302 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2da:	491f      	ldr	r1, [pc, #124]	; (800f358 <xTaskPriorityDisinherit+0x104>)
 800f2dc:	4613      	mov	r3, r2
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	4413      	add	r3, r2
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	440b      	add	r3, r1
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10a      	bne.n	800f302 <xTaskPriorityDisinherit+0xae>
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f6:	43da      	mvns	r2, r3
 800f2f8:	4b18      	ldr	r3, [pc, #96]	; (800f35c <xTaskPriorityDisinherit+0x108>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	4a17      	ldr	r2, [pc, #92]	; (800f35c <xTaskPriorityDisinherit+0x108>)
 800f300:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f30e:	f1c3 0207 	rsb	r2, r3, #7
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31a:	2201      	movs	r2, #1
 800f31c:	409a      	lsls	r2, r3
 800f31e:	4b0f      	ldr	r3, [pc, #60]	; (800f35c <xTaskPriorityDisinherit+0x108>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4313      	orrs	r3, r2
 800f324:	4a0d      	ldr	r2, [pc, #52]	; (800f35c <xTaskPriorityDisinherit+0x108>)
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32c:	4613      	mov	r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	4413      	add	r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	4a08      	ldr	r2, [pc, #32]	; (800f358 <xTaskPriorityDisinherit+0x104>)
 800f336:	441a      	add	r2, r3
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	3304      	adds	r3, #4
 800f33c:	4619      	mov	r1, r3
 800f33e:	4610      	mov	r0, r2
 800f340:	f7fe f9c9 	bl	800d6d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f344:	2301      	movs	r3, #1
 800f346:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f348:	697b      	ldr	r3, [r7, #20]
	}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3718      	adds	r7, #24
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	20000f3c 	.word	0x20000f3c
 800f358:	20000f40 	.word	0x20000f40
 800f35c:	20001044 	.word	0x20001044

0800f360 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f360:	b580      	push	{r7, lr}
 800f362:	b088      	sub	sp, #32
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f36e:	2301      	movs	r3, #1
 800f370:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d077      	beq.n	800f468 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d10a      	bne.n	800f396 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	60fb      	str	r3, [r7, #12]
}
 800f392:	bf00      	nop
 800f394:	e7fe      	b.n	800f394 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f39a:	683a      	ldr	r2, [r7, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d902      	bls.n	800f3a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	61fb      	str	r3, [r7, #28]
 800f3a4:	e002      	b.n	800f3ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b0:	69fa      	ldr	r2, [r7, #28]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d058      	beq.n	800f468 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d153      	bne.n	800f468 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f3c0:	4b2b      	ldr	r3, [pc, #172]	; (800f470 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	69ba      	ldr	r2, [r7, #24]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d10a      	bne.n	800f3e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ce:	f383 8811 	msr	BASEPRI, r3
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	60bb      	str	r3, [r7, #8]
}
 800f3dc:	bf00      	nop
 800f3de:	e7fe      	b.n	800f3de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	69fa      	ldr	r2, [r7, #28]
 800f3ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	699b      	ldr	r3, [r3, #24]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	db04      	blt.n	800f3fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	f1c3 0207 	rsb	r2, r3, #7
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	6959      	ldr	r1, [r3, #20]
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	4613      	mov	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4413      	add	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4a19      	ldr	r2, [pc, #100]	; (800f474 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f40e:	4413      	add	r3, r2
 800f410:	4299      	cmp	r1, r3
 800f412:	d129      	bne.n	800f468 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	3304      	adds	r3, #4
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fe f9b9 	bl	800d790 <uxListRemove>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10a      	bne.n	800f43a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f428:	2201      	movs	r2, #1
 800f42a:	fa02 f303 	lsl.w	r3, r2, r3
 800f42e:	43da      	mvns	r2, r3
 800f430:	4b11      	ldr	r3, [pc, #68]	; (800f478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4013      	ands	r3, r2
 800f436:	4a10      	ldr	r2, [pc, #64]	; (800f478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f438:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43e:	2201      	movs	r2, #1
 800f440:	409a      	lsls	r2, r3
 800f442:	4b0d      	ldr	r3, [pc, #52]	; (800f478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4313      	orrs	r3, r2
 800f448:	4a0b      	ldr	r2, [pc, #44]	; (800f478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f44a:	6013      	str	r3, [r2, #0]
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f450:	4613      	mov	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	4413      	add	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	4a06      	ldr	r2, [pc, #24]	; (800f474 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f45a:	441a      	add	r2, r3
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	3304      	adds	r3, #4
 800f460:	4619      	mov	r1, r3
 800f462:	4610      	mov	r0, r2
 800f464:	f7fe f937 	bl	800d6d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f468:	bf00      	nop
 800f46a:	3720      	adds	r7, #32
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	20000f3c 	.word	0x20000f3c
 800f474:	20000f40 	.word	0x20000f40
 800f478:	20001044 	.word	0x20001044

0800f47c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f47c:	b480      	push	{r7}
 800f47e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f480:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d004      	beq.n	800f492 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f488:	4b05      	ldr	r3, [pc, #20]	; (800f4a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f48e:	3201      	adds	r2, #1
 800f490:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f492:	4b03      	ldr	r3, [pc, #12]	; (800f4a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f494:	681b      	ldr	r3, [r3, #0]
	}
 800f496:	4618      	mov	r0, r3
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	20000f3c 	.word	0x20000f3c

0800f4a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4ae:	4b29      	ldr	r3, [pc, #164]	; (800f554 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4b4:	4b28      	ldr	r3, [pc, #160]	; (800f558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3304      	adds	r3, #4
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fe f968 	bl	800d790 <uxListRemove>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d10b      	bne.n	800f4de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f4c6:	4b24      	ldr	r3, [pc, #144]	; (800f558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d2:	43da      	mvns	r2, r3
 800f4d4:	4b21      	ldr	r3, [pc, #132]	; (800f55c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4013      	ands	r3, r2
 800f4da:	4a20      	ldr	r2, [pc, #128]	; (800f55c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f4dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e4:	d10a      	bne.n	800f4fc <prvAddCurrentTaskToDelayedList+0x58>
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d007      	beq.n	800f4fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4ec:	4b1a      	ldr	r3, [pc, #104]	; (800f558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	481a      	ldr	r0, [pc, #104]	; (800f560 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f4f6:	f7fe f8ee 	bl	800d6d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f4fa:	e026      	b.n	800f54a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4413      	add	r3, r2
 800f502:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f504:	4b14      	ldr	r3, [pc, #80]	; (800f558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	68ba      	ldr	r2, [r7, #8]
 800f50a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	429a      	cmp	r2, r3
 800f512:	d209      	bcs.n	800f528 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f514:	4b13      	ldr	r3, [pc, #76]	; (800f564 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	4b0f      	ldr	r3, [pc, #60]	; (800f558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3304      	adds	r3, #4
 800f51e:	4619      	mov	r1, r3
 800f520:	4610      	mov	r0, r2
 800f522:	f7fe f8fc 	bl	800d71e <vListInsert>
}
 800f526:	e010      	b.n	800f54a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f528:	4b0f      	ldr	r3, [pc, #60]	; (800f568 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	4b0a      	ldr	r3, [pc, #40]	; (800f558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	3304      	adds	r3, #4
 800f532:	4619      	mov	r1, r3
 800f534:	4610      	mov	r0, r2
 800f536:	f7fe f8f2 	bl	800d71e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f53a:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	429a      	cmp	r2, r3
 800f542:	d202      	bcs.n	800f54a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f544:	4a09      	ldr	r2, [pc, #36]	; (800f56c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	6013      	str	r3, [r2, #0]
}
 800f54a:	bf00      	nop
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	20001040 	.word	0x20001040
 800f558:	20000f3c 	.word	0x20000f3c
 800f55c:	20001044 	.word	0x20001044
 800f560:	20001028 	.word	0x20001028
 800f564:	20000ff8 	.word	0x20000ff8
 800f568:	20000ff4 	.word	0x20000ff4
 800f56c:	2000105c 	.word	0x2000105c

0800f570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	3b04      	subs	r3, #4
 800f580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3b04      	subs	r3, #4
 800f58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	f023 0201 	bic.w	r2, r3, #1
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3b04      	subs	r3, #4
 800f59e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f5a0:	4a0c      	ldr	r2, [pc, #48]	; (800f5d4 <pxPortInitialiseStack+0x64>)
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	3b14      	subs	r3, #20
 800f5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3b04      	subs	r3, #4
 800f5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f06f 0202 	mvn.w	r2, #2
 800f5be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3b20      	subs	r3, #32
 800f5c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3714      	adds	r7, #20
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr
 800f5d4:	0800f5d9 	.word	0x0800f5d9

0800f5d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5e2:	4b12      	ldr	r3, [pc, #72]	; (800f62c <prvTaskExitError+0x54>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ea:	d00a      	beq.n	800f602 <prvTaskExitError+0x2a>
	__asm volatile
 800f5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f0:	f383 8811 	msr	BASEPRI, r3
 800f5f4:	f3bf 8f6f 	isb	sy
 800f5f8:	f3bf 8f4f 	dsb	sy
 800f5fc:	60fb      	str	r3, [r7, #12]
}
 800f5fe:	bf00      	nop
 800f600:	e7fe      	b.n	800f600 <prvTaskExitError+0x28>
	__asm volatile
 800f602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	60bb      	str	r3, [r7, #8]
}
 800f614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f616:	bf00      	nop
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d0fc      	beq.n	800f618 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f61e:	bf00      	nop
 800f620:	bf00      	nop
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	2000000c 	.word	0x2000000c

0800f630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f630:	4b07      	ldr	r3, [pc, #28]	; (800f650 <pxCurrentTCBConst2>)
 800f632:	6819      	ldr	r1, [r3, #0]
 800f634:	6808      	ldr	r0, [r1, #0]
 800f636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63a:	f380 8809 	msr	PSP, r0
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f04f 0000 	mov.w	r0, #0
 800f646:	f380 8811 	msr	BASEPRI, r0
 800f64a:	4770      	bx	lr
 800f64c:	f3af 8000 	nop.w

0800f650 <pxCurrentTCBConst2>:
 800f650:	20000f3c 	.word	0x20000f3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f654:	bf00      	nop
 800f656:	bf00      	nop

0800f658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f658:	4808      	ldr	r0, [pc, #32]	; (800f67c <prvPortStartFirstTask+0x24>)
 800f65a:	6800      	ldr	r0, [r0, #0]
 800f65c:	6800      	ldr	r0, [r0, #0]
 800f65e:	f380 8808 	msr	MSP, r0
 800f662:	f04f 0000 	mov.w	r0, #0
 800f666:	f380 8814 	msr	CONTROL, r0
 800f66a:	b662      	cpsie	i
 800f66c:	b661      	cpsie	f
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	df00      	svc	0
 800f678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f67a:	bf00      	nop
 800f67c:	e000ed08 	.word	0xe000ed08

0800f680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f686:	4b46      	ldr	r3, [pc, #280]	; (800f7a0 <xPortStartScheduler+0x120>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a46      	ldr	r2, [pc, #280]	; (800f7a4 <xPortStartScheduler+0x124>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d10a      	bne.n	800f6a6 <xPortStartScheduler+0x26>
	__asm volatile
 800f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	613b      	str	r3, [r7, #16]
}
 800f6a2:	bf00      	nop
 800f6a4:	e7fe      	b.n	800f6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f6a6:	4b3e      	ldr	r3, [pc, #248]	; (800f7a0 <xPortStartScheduler+0x120>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a3f      	ldr	r2, [pc, #252]	; (800f7a8 <xPortStartScheduler+0x128>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d10a      	bne.n	800f6c6 <xPortStartScheduler+0x46>
	__asm volatile
 800f6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b4:	f383 8811 	msr	BASEPRI, r3
 800f6b8:	f3bf 8f6f 	isb	sy
 800f6bc:	f3bf 8f4f 	dsb	sy
 800f6c0:	60fb      	str	r3, [r7, #12]
}
 800f6c2:	bf00      	nop
 800f6c4:	e7fe      	b.n	800f6c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6c6:	4b39      	ldr	r3, [pc, #228]	; (800f7ac <xPortStartScheduler+0x12c>)
 800f6c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	22ff      	movs	r2, #255	; 0xff
 800f6d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6e0:	78fb      	ldrb	r3, [r7, #3]
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6e8:	b2da      	uxtb	r2, r3
 800f6ea:	4b31      	ldr	r3, [pc, #196]	; (800f7b0 <xPortStartScheduler+0x130>)
 800f6ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6ee:	4b31      	ldr	r3, [pc, #196]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f6f0:	2207      	movs	r2, #7
 800f6f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6f4:	e009      	b.n	800f70a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f6f6:	4b2f      	ldr	r3, [pc, #188]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	4a2d      	ldr	r2, [pc, #180]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f6fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f700:	78fb      	ldrb	r3, [r7, #3]
 800f702:	b2db      	uxtb	r3, r3
 800f704:	005b      	lsls	r3, r3, #1
 800f706:	b2db      	uxtb	r3, r3
 800f708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f70a:	78fb      	ldrb	r3, [r7, #3]
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f712:	2b80      	cmp	r3, #128	; 0x80
 800f714:	d0ef      	beq.n	800f6f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f716:	4b27      	ldr	r3, [pc, #156]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f1c3 0307 	rsb	r3, r3, #7
 800f71e:	2b04      	cmp	r3, #4
 800f720:	d00a      	beq.n	800f738 <xPortStartScheduler+0xb8>
	__asm volatile
 800f722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f726:	f383 8811 	msr	BASEPRI, r3
 800f72a:	f3bf 8f6f 	isb	sy
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	60bb      	str	r3, [r7, #8]
}
 800f734:	bf00      	nop
 800f736:	e7fe      	b.n	800f736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f738:	4b1e      	ldr	r3, [pc, #120]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	021b      	lsls	r3, r3, #8
 800f73e:	4a1d      	ldr	r2, [pc, #116]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f742:	4b1c      	ldr	r3, [pc, #112]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f74a:	4a1a      	ldr	r2, [pc, #104]	; (800f7b4 <xPortStartScheduler+0x134>)
 800f74c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	b2da      	uxtb	r2, r3
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f756:	4b18      	ldr	r3, [pc, #96]	; (800f7b8 <xPortStartScheduler+0x138>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a17      	ldr	r2, [pc, #92]	; (800f7b8 <xPortStartScheduler+0x138>)
 800f75c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f762:	4b15      	ldr	r3, [pc, #84]	; (800f7b8 <xPortStartScheduler+0x138>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4a14      	ldr	r2, [pc, #80]	; (800f7b8 <xPortStartScheduler+0x138>)
 800f768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f76c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f76e:	f000 f8dd 	bl	800f92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f772:	4b12      	ldr	r3, [pc, #72]	; (800f7bc <xPortStartScheduler+0x13c>)
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f778:	f000 f8fc 	bl	800f974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f77c:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <xPortStartScheduler+0x140>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a0f      	ldr	r2, [pc, #60]	; (800f7c0 <xPortStartScheduler+0x140>)
 800f782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f788:	f7ff ff66 	bl	800f658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f78c:	f7ff fa92 	bl	800ecb4 <vTaskSwitchContext>
	prvTaskExitError();
 800f790:	f7ff ff22 	bl	800f5d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	e000ed00 	.word	0xe000ed00
 800f7a4:	410fc271 	.word	0x410fc271
 800f7a8:	410fc270 	.word	0x410fc270
 800f7ac:	e000e400 	.word	0xe000e400
 800f7b0:	20001068 	.word	0x20001068
 800f7b4:	2000106c 	.word	0x2000106c
 800f7b8:	e000ed20 	.word	0xe000ed20
 800f7bc:	2000000c 	.word	0x2000000c
 800f7c0:	e000ef34 	.word	0xe000ef34

0800f7c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
	__asm volatile
 800f7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	607b      	str	r3, [r7, #4]
}
 800f7dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7de:	4b0f      	ldr	r3, [pc, #60]	; (800f81c <vPortEnterCritical+0x58>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	4a0d      	ldr	r2, [pc, #52]	; (800f81c <vPortEnterCritical+0x58>)
 800f7e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7e8:	4b0c      	ldr	r3, [pc, #48]	; (800f81c <vPortEnterCritical+0x58>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d10f      	bne.n	800f810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7f0:	4b0b      	ldr	r3, [pc, #44]	; (800f820 <vPortEnterCritical+0x5c>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00a      	beq.n	800f810 <vPortEnterCritical+0x4c>
	__asm volatile
 800f7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fe:	f383 8811 	msr	BASEPRI, r3
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	f3bf 8f4f 	dsb	sy
 800f80a:	603b      	str	r3, [r7, #0]
}
 800f80c:	bf00      	nop
 800f80e:	e7fe      	b.n	800f80e <vPortEnterCritical+0x4a>
	}
}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr
 800f81c:	2000000c 	.word	0x2000000c
 800f820:	e000ed04 	.word	0xe000ed04

0800f824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f82a:	4b12      	ldr	r3, [pc, #72]	; (800f874 <vPortExitCritical+0x50>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d10a      	bne.n	800f848 <vPortExitCritical+0x24>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	607b      	str	r3, [r7, #4]
}
 800f844:	bf00      	nop
 800f846:	e7fe      	b.n	800f846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f848:	4b0a      	ldr	r3, [pc, #40]	; (800f874 <vPortExitCritical+0x50>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	3b01      	subs	r3, #1
 800f84e:	4a09      	ldr	r2, [pc, #36]	; (800f874 <vPortExitCritical+0x50>)
 800f850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f852:	4b08      	ldr	r3, [pc, #32]	; (800f874 <vPortExitCritical+0x50>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d105      	bne.n	800f866 <vPortExitCritical+0x42>
 800f85a:	2300      	movs	r3, #0
 800f85c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	f383 8811 	msr	BASEPRI, r3
}
 800f864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f866:	bf00      	nop
 800f868:	370c      	adds	r7, #12
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop
 800f874:	2000000c 	.word	0x2000000c
	...

0800f880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f880:	f3ef 8009 	mrs	r0, PSP
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	4b15      	ldr	r3, [pc, #84]	; (800f8e0 <pxCurrentTCBConst>)
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	f01e 0f10 	tst.w	lr, #16
 800f890:	bf08      	it	eq
 800f892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89a:	6010      	str	r0, [r2, #0]
 800f89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f8a4:	f380 8811 	msr	BASEPRI, r0
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f7ff fa00 	bl	800ecb4 <vTaskSwitchContext>
 800f8b4:	f04f 0000 	mov.w	r0, #0
 800f8b8:	f380 8811 	msr	BASEPRI, r0
 800f8bc:	bc09      	pop	{r0, r3}
 800f8be:	6819      	ldr	r1, [r3, #0]
 800f8c0:	6808      	ldr	r0, [r1, #0]
 800f8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c6:	f01e 0f10 	tst.w	lr, #16
 800f8ca:	bf08      	it	eq
 800f8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8d0:	f380 8809 	msr	PSP, r0
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	f3af 8000 	nop.w

0800f8e0 <pxCurrentTCBConst>:
 800f8e0:	20000f3c 	.word	0x20000f3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8e4:	bf00      	nop
 800f8e6:	bf00      	nop

0800f8e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	607b      	str	r3, [r7, #4]
}
 800f900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f902:	f7ff f91f 	bl	800eb44 <xTaskIncrementTick>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d003      	beq.n	800f914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f90c:	4b06      	ldr	r3, [pc, #24]	; (800f928 <xPortSysTickHandler+0x40>)
 800f90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	2300      	movs	r3, #0
 800f916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	f383 8811 	msr	BASEPRI, r3
}
 800f91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	e000ed04 	.word	0xe000ed04

0800f92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f92c:	b480      	push	{r7}
 800f92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f930:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <vPortSetupTimerInterrupt+0x34>)
 800f932:	2200      	movs	r2, #0
 800f934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f936:	4b0b      	ldr	r3, [pc, #44]	; (800f964 <vPortSetupTimerInterrupt+0x38>)
 800f938:	2200      	movs	r2, #0
 800f93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f93c:	4b0a      	ldr	r3, [pc, #40]	; (800f968 <vPortSetupTimerInterrupt+0x3c>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a0a      	ldr	r2, [pc, #40]	; (800f96c <vPortSetupTimerInterrupt+0x40>)
 800f942:	fba2 2303 	umull	r2, r3, r2, r3
 800f946:	099b      	lsrs	r3, r3, #6
 800f948:	4a09      	ldr	r2, [pc, #36]	; (800f970 <vPortSetupTimerInterrupt+0x44>)
 800f94a:	3b01      	subs	r3, #1
 800f94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f94e:	4b04      	ldr	r3, [pc, #16]	; (800f960 <vPortSetupTimerInterrupt+0x34>)
 800f950:	2207      	movs	r2, #7
 800f952:	601a      	str	r2, [r3, #0]
}
 800f954:	bf00      	nop
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	e000e010 	.word	0xe000e010
 800f964:	e000e018 	.word	0xe000e018
 800f968:	20000000 	.word	0x20000000
 800f96c:	10624dd3 	.word	0x10624dd3
 800f970:	e000e014 	.word	0xe000e014

0800f974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f984 <vPortEnableVFP+0x10>
 800f978:	6801      	ldr	r1, [r0, #0]
 800f97a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f97e:	6001      	str	r1, [r0, #0]
 800f980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f982:	bf00      	nop
 800f984:	e000ed88 	.word	0xe000ed88

0800f988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f988:	b480      	push	{r7}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f98e:	f3ef 8305 	mrs	r3, IPSR
 800f992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2b0f      	cmp	r3, #15
 800f998:	d914      	bls.n	800f9c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f99a:	4a17      	ldr	r2, [pc, #92]	; (800f9f8 <vPortValidateInterruptPriority+0x70>)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	4413      	add	r3, r2
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f9a4:	4b15      	ldr	r3, [pc, #84]	; (800f9fc <vPortValidateInterruptPriority+0x74>)
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	7afa      	ldrb	r2, [r7, #11]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d20a      	bcs.n	800f9c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	607b      	str	r3, [r7, #4]
}
 800f9c0:	bf00      	nop
 800f9c2:	e7fe      	b.n	800f9c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9c4:	4b0e      	ldr	r3, [pc, #56]	; (800fa00 <vPortValidateInterruptPriority+0x78>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f9cc:	4b0d      	ldr	r3, [pc, #52]	; (800fa04 <vPortValidateInterruptPriority+0x7c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d90a      	bls.n	800f9ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	603b      	str	r3, [r7, #0]
}
 800f9e6:	bf00      	nop
 800f9e8:	e7fe      	b.n	800f9e8 <vPortValidateInterruptPriority+0x60>
	}
 800f9ea:	bf00      	nop
 800f9ec:	3714      	adds	r7, #20
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	e000e3f0 	.word	0xe000e3f0
 800f9fc:	20001068 	.word	0x20001068
 800fa00:	e000ed0c 	.word	0xe000ed0c
 800fa04:	2000106c 	.word	0x2000106c

0800fa08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08a      	sub	sp, #40	; 0x28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa10:	2300      	movs	r3, #0
 800fa12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa14:	f7fe ffdc 	bl	800e9d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa18:	4b5b      	ldr	r3, [pc, #364]	; (800fb88 <pvPortMalloc+0x180>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d101      	bne.n	800fa24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa20:	f000 f920 	bl	800fc64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa24:	4b59      	ldr	r3, [pc, #356]	; (800fb8c <pvPortMalloc+0x184>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4013      	ands	r3, r2
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f040 8093 	bne.w	800fb58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d01d      	beq.n	800fa74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa38:	2208      	movs	r2, #8
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f003 0307 	and.w	r3, r3, #7
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d014      	beq.n	800fa74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f023 0307 	bic.w	r3, r3, #7
 800fa50:	3308      	adds	r3, #8
 800fa52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f003 0307 	and.w	r3, r3, #7
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00a      	beq.n	800fa74 <pvPortMalloc+0x6c>
	__asm volatile
 800fa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	617b      	str	r3, [r7, #20]
}
 800fa70:	bf00      	nop
 800fa72:	e7fe      	b.n	800fa72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d06e      	beq.n	800fb58 <pvPortMalloc+0x150>
 800fa7a:	4b45      	ldr	r3, [pc, #276]	; (800fb90 <pvPortMalloc+0x188>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d869      	bhi.n	800fb58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa84:	4b43      	ldr	r3, [pc, #268]	; (800fb94 <pvPortMalloc+0x18c>)
 800fa86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa88:	4b42      	ldr	r3, [pc, #264]	; (800fb94 <pvPortMalloc+0x18c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa8e:	e004      	b.n	800fa9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d903      	bls.n	800faac <pvPortMalloc+0xa4>
 800faa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d1f1      	bne.n	800fa90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800faac:	4b36      	ldr	r3, [pc, #216]	; (800fb88 <pvPortMalloc+0x180>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d050      	beq.n	800fb58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2208      	movs	r2, #8
 800fabc:	4413      	add	r3, r2
 800fabe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	6a3b      	ldr	r3, [r7, #32]
 800fac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faca:	685a      	ldr	r2, [r3, #4]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	1ad2      	subs	r2, r2, r3
 800fad0:	2308      	movs	r3, #8
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d91f      	bls.n	800fb18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4413      	add	r3, r2
 800fade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	f003 0307 	and.w	r3, r3, #7
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00a      	beq.n	800fb00 <pvPortMalloc+0xf8>
	__asm volatile
 800faea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faee:	f383 8811 	msr	BASEPRI, r3
 800faf2:	f3bf 8f6f 	isb	sy
 800faf6:	f3bf 8f4f 	dsb	sy
 800fafa:	613b      	str	r3, [r7, #16]
}
 800fafc:	bf00      	nop
 800fafe:	e7fe      	b.n	800fafe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	685a      	ldr	r2, [r3, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	1ad2      	subs	r2, r2, r3
 800fb08:	69bb      	ldr	r3, [r7, #24]
 800fb0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb12:	69b8      	ldr	r0, [r7, #24]
 800fb14:	f000 f908 	bl	800fd28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb18:	4b1d      	ldr	r3, [pc, #116]	; (800fb90 <pvPortMalloc+0x188>)
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	4a1b      	ldr	r2, [pc, #108]	; (800fb90 <pvPortMalloc+0x188>)
 800fb24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb26:	4b1a      	ldr	r3, [pc, #104]	; (800fb90 <pvPortMalloc+0x188>)
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	4b1b      	ldr	r3, [pc, #108]	; (800fb98 <pvPortMalloc+0x190>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d203      	bcs.n	800fb3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb32:	4b17      	ldr	r3, [pc, #92]	; (800fb90 <pvPortMalloc+0x188>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4a18      	ldr	r2, [pc, #96]	; (800fb98 <pvPortMalloc+0x190>)
 800fb38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	4b13      	ldr	r3, [pc, #76]	; (800fb8c <pvPortMalloc+0x184>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	431a      	orrs	r2, r3
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb4e:	4b13      	ldr	r3, [pc, #76]	; (800fb9c <pvPortMalloc+0x194>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	3301      	adds	r3, #1
 800fb54:	4a11      	ldr	r2, [pc, #68]	; (800fb9c <pvPortMalloc+0x194>)
 800fb56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb58:	f7fe ff48 	bl	800e9ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	f003 0307 	and.w	r3, r3, #7
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00a      	beq.n	800fb7c <pvPortMalloc+0x174>
	__asm volatile
 800fb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	60fb      	str	r3, [r7, #12]
}
 800fb78:	bf00      	nop
 800fb7a:	e7fe      	b.n	800fb7a <pvPortMalloc+0x172>
	return pvReturn;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3728      	adds	r7, #40	; 0x28
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	200027e8 	.word	0x200027e8
 800fb8c:	200027fc 	.word	0x200027fc
 800fb90:	200027ec 	.word	0x200027ec
 800fb94:	200027e0 	.word	0x200027e0
 800fb98:	200027f0 	.word	0x200027f0
 800fb9c:	200027f4 	.word	0x200027f4

0800fba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d04d      	beq.n	800fc4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fbb2:	2308      	movs	r3, #8
 800fbb4:	425b      	negs	r3, r3
 800fbb6:	697a      	ldr	r2, [r7, #20]
 800fbb8:	4413      	add	r3, r2
 800fbba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	685a      	ldr	r2, [r3, #4]
 800fbc4:	4b24      	ldr	r3, [pc, #144]	; (800fc58 <vPortFree+0xb8>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4013      	ands	r3, r2
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d10a      	bne.n	800fbe4 <vPortFree+0x44>
	__asm volatile
 800fbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd2:	f383 8811 	msr	BASEPRI, r3
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	f3bf 8f4f 	dsb	sy
 800fbde:	60fb      	str	r3, [r7, #12]
}
 800fbe0:	bf00      	nop
 800fbe2:	e7fe      	b.n	800fbe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00a      	beq.n	800fc02 <vPortFree+0x62>
	__asm volatile
 800fbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	60bb      	str	r3, [r7, #8]
}
 800fbfe:	bf00      	nop
 800fc00:	e7fe      	b.n	800fc00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	685a      	ldr	r2, [r3, #4]
 800fc06:	4b14      	ldr	r3, [pc, #80]	; (800fc58 <vPortFree+0xb8>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d01e      	beq.n	800fc4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d11a      	bne.n	800fc4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	685a      	ldr	r2, [r3, #4]
 800fc1c:	4b0e      	ldr	r3, [pc, #56]	; (800fc58 <vPortFree+0xb8>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	43db      	mvns	r3, r3
 800fc22:	401a      	ands	r2, r3
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc28:	f7fe fed2 	bl	800e9d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	685a      	ldr	r2, [r3, #4]
 800fc30:	4b0a      	ldr	r3, [pc, #40]	; (800fc5c <vPortFree+0xbc>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4413      	add	r3, r2
 800fc36:	4a09      	ldr	r2, [pc, #36]	; (800fc5c <vPortFree+0xbc>)
 800fc38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc3a:	6938      	ldr	r0, [r7, #16]
 800fc3c:	f000 f874 	bl	800fd28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc40:	4b07      	ldr	r3, [pc, #28]	; (800fc60 <vPortFree+0xc0>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	3301      	adds	r3, #1
 800fc46:	4a06      	ldr	r2, [pc, #24]	; (800fc60 <vPortFree+0xc0>)
 800fc48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc4a:	f7fe fecf 	bl	800e9ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc4e:	bf00      	nop
 800fc50:	3718      	adds	r7, #24
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	200027fc 	.word	0x200027fc
 800fc5c:	200027ec 	.word	0x200027ec
 800fc60:	200027f8 	.word	0x200027f8

0800fc64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc6a:	f241 7370 	movw	r3, #6000	; 0x1770
 800fc6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc70:	4b27      	ldr	r3, [pc, #156]	; (800fd10 <prvHeapInit+0xac>)
 800fc72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f003 0307 	and.w	r3, r3, #7
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d00c      	beq.n	800fc98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	3307      	adds	r3, #7
 800fc82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f023 0307 	bic.w	r3, r3, #7
 800fc8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	4a1f      	ldr	r2, [pc, #124]	; (800fd10 <prvHeapInit+0xac>)
 800fc94:	4413      	add	r3, r2
 800fc96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc9c:	4a1d      	ldr	r2, [pc, #116]	; (800fd14 <prvHeapInit+0xb0>)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fca2:	4b1c      	ldr	r3, [pc, #112]	; (800fd14 <prvHeapInit+0xb0>)
 800fca4:	2200      	movs	r2, #0
 800fca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	4413      	add	r3, r2
 800fcae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fcb0:	2208      	movs	r2, #8
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f023 0307 	bic.w	r3, r3, #7
 800fcbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	4a15      	ldr	r2, [pc, #84]	; (800fd18 <prvHeapInit+0xb4>)
 800fcc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fcc6:	4b14      	ldr	r3, [pc, #80]	; (800fd18 <prvHeapInit+0xb4>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2200      	movs	r2, #0
 800fccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcce:	4b12      	ldr	r3, [pc, #72]	; (800fd18 <prvHeapInit+0xb4>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	1ad2      	subs	r2, r2, r3
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fce4:	4b0c      	ldr	r3, [pc, #48]	; (800fd18 <prvHeapInit+0xb4>)
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	4a0a      	ldr	r2, [pc, #40]	; (800fd1c <prvHeapInit+0xb8>)
 800fcf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	4a09      	ldr	r2, [pc, #36]	; (800fd20 <prvHeapInit+0xbc>)
 800fcfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcfc:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <prvHeapInit+0xc0>)
 800fcfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fd02:	601a      	str	r2, [r3, #0]
}
 800fd04:	bf00      	nop
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	20001070 	.word	0x20001070
 800fd14:	200027e0 	.word	0x200027e0
 800fd18:	200027e8 	.word	0x200027e8
 800fd1c:	200027f0 	.word	0x200027f0
 800fd20:	200027ec 	.word	0x200027ec
 800fd24:	200027fc 	.word	0x200027fc

0800fd28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd30:	4b28      	ldr	r3, [pc, #160]	; (800fdd4 <prvInsertBlockIntoFreeList+0xac>)
 800fd32:	60fb      	str	r3, [r7, #12]
 800fd34:	e002      	b.n	800fd3c <prvInsertBlockIntoFreeList+0x14>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	60fb      	str	r3, [r7, #12]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d8f7      	bhi.n	800fd36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	4413      	add	r3, r2
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d108      	bne.n	800fd6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	441a      	add	r2, r3
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	441a      	add	r2, r3
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d118      	bne.n	800fdb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	4b15      	ldr	r3, [pc, #84]	; (800fdd8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d00d      	beq.n	800fda6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	685a      	ldr	r2, [r3, #4]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	441a      	add	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	601a      	str	r2, [r3, #0]
 800fda4:	e008      	b.n	800fdb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fda6:	4b0c      	ldr	r3, [pc, #48]	; (800fdd8 <prvInsertBlockIntoFreeList+0xb0>)
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	e003      	b.n	800fdb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fdb8:	68fa      	ldr	r2, [r7, #12]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d002      	beq.n	800fdc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdc6:	bf00      	nop
 800fdc8:	3714      	adds	r7, #20
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	200027e0 	.word	0x200027e0
 800fdd8:	200027e8 	.word	0x200027e8

0800fddc <__errno>:
 800fddc:	4b01      	ldr	r3, [pc, #4]	; (800fde4 <__errno+0x8>)
 800fdde:	6818      	ldr	r0, [r3, #0]
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	20000010 	.word	0x20000010

0800fde8 <__libc_init_array>:
 800fde8:	b570      	push	{r4, r5, r6, lr}
 800fdea:	4d0d      	ldr	r5, [pc, #52]	; (800fe20 <__libc_init_array+0x38>)
 800fdec:	4c0d      	ldr	r4, [pc, #52]	; (800fe24 <__libc_init_array+0x3c>)
 800fdee:	1b64      	subs	r4, r4, r5
 800fdf0:	10a4      	asrs	r4, r4, #2
 800fdf2:	2600      	movs	r6, #0
 800fdf4:	42a6      	cmp	r6, r4
 800fdf6:	d109      	bne.n	800fe0c <__libc_init_array+0x24>
 800fdf8:	4d0b      	ldr	r5, [pc, #44]	; (800fe28 <__libc_init_array+0x40>)
 800fdfa:	4c0c      	ldr	r4, [pc, #48]	; (800fe2c <__libc_init_array+0x44>)
 800fdfc:	f004 f870 	bl	8013ee0 <_init>
 800fe00:	1b64      	subs	r4, r4, r5
 800fe02:	10a4      	asrs	r4, r4, #2
 800fe04:	2600      	movs	r6, #0
 800fe06:	42a6      	cmp	r6, r4
 800fe08:	d105      	bne.n	800fe16 <__libc_init_array+0x2e>
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe10:	4798      	blx	r3
 800fe12:	3601      	adds	r6, #1
 800fe14:	e7ee      	b.n	800fdf4 <__libc_init_array+0xc>
 800fe16:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe1a:	4798      	blx	r3
 800fe1c:	3601      	adds	r6, #1
 800fe1e:	e7f2      	b.n	800fe06 <__libc_init_array+0x1e>
 800fe20:	08014590 	.word	0x08014590
 800fe24:	08014590 	.word	0x08014590
 800fe28:	08014590 	.word	0x08014590
 800fe2c:	08014594 	.word	0x08014594

0800fe30 <malloc>:
 800fe30:	4b02      	ldr	r3, [pc, #8]	; (800fe3c <malloc+0xc>)
 800fe32:	4601      	mov	r1, r0
 800fe34:	6818      	ldr	r0, [r3, #0]
 800fe36:	f000 b88d 	b.w	800ff54 <_malloc_r>
 800fe3a:	bf00      	nop
 800fe3c:	20000010 	.word	0x20000010

0800fe40 <free>:
 800fe40:	4b02      	ldr	r3, [pc, #8]	; (800fe4c <free+0xc>)
 800fe42:	4601      	mov	r1, r0
 800fe44:	6818      	ldr	r0, [r3, #0]
 800fe46:	f000 b819 	b.w	800fe7c <_free_r>
 800fe4a:	bf00      	nop
 800fe4c:	20000010 	.word	0x20000010

0800fe50 <memcpy>:
 800fe50:	440a      	add	r2, r1
 800fe52:	4291      	cmp	r1, r2
 800fe54:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe58:	d100      	bne.n	800fe5c <memcpy+0xc>
 800fe5a:	4770      	bx	lr
 800fe5c:	b510      	push	{r4, lr}
 800fe5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe66:	4291      	cmp	r1, r2
 800fe68:	d1f9      	bne.n	800fe5e <memcpy+0xe>
 800fe6a:	bd10      	pop	{r4, pc}

0800fe6c <memset>:
 800fe6c:	4402      	add	r2, r0
 800fe6e:	4603      	mov	r3, r0
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d100      	bne.n	800fe76 <memset+0xa>
 800fe74:	4770      	bx	lr
 800fe76:	f803 1b01 	strb.w	r1, [r3], #1
 800fe7a:	e7f9      	b.n	800fe70 <memset+0x4>

0800fe7c <_free_r>:
 800fe7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe7e:	2900      	cmp	r1, #0
 800fe80:	d044      	beq.n	800ff0c <_free_r+0x90>
 800fe82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe86:	9001      	str	r0, [sp, #4]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	f1a1 0404 	sub.w	r4, r1, #4
 800fe8e:	bfb8      	it	lt
 800fe90:	18e4      	addlt	r4, r4, r3
 800fe92:	f002 f957 	bl	8012144 <__malloc_lock>
 800fe96:	4a1e      	ldr	r2, [pc, #120]	; (800ff10 <_free_r+0x94>)
 800fe98:	9801      	ldr	r0, [sp, #4]
 800fe9a:	6813      	ldr	r3, [r2, #0]
 800fe9c:	b933      	cbnz	r3, 800feac <_free_r+0x30>
 800fe9e:	6063      	str	r3, [r4, #4]
 800fea0:	6014      	str	r4, [r2, #0]
 800fea2:	b003      	add	sp, #12
 800fea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fea8:	f002 b952 	b.w	8012150 <__malloc_unlock>
 800feac:	42a3      	cmp	r3, r4
 800feae:	d908      	bls.n	800fec2 <_free_r+0x46>
 800feb0:	6825      	ldr	r5, [r4, #0]
 800feb2:	1961      	adds	r1, r4, r5
 800feb4:	428b      	cmp	r3, r1
 800feb6:	bf01      	itttt	eq
 800feb8:	6819      	ldreq	r1, [r3, #0]
 800feba:	685b      	ldreq	r3, [r3, #4]
 800febc:	1949      	addeq	r1, r1, r5
 800febe:	6021      	streq	r1, [r4, #0]
 800fec0:	e7ed      	b.n	800fe9e <_free_r+0x22>
 800fec2:	461a      	mov	r2, r3
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	b10b      	cbz	r3, 800fecc <_free_r+0x50>
 800fec8:	42a3      	cmp	r3, r4
 800feca:	d9fa      	bls.n	800fec2 <_free_r+0x46>
 800fecc:	6811      	ldr	r1, [r2, #0]
 800fece:	1855      	adds	r5, r2, r1
 800fed0:	42a5      	cmp	r5, r4
 800fed2:	d10b      	bne.n	800feec <_free_r+0x70>
 800fed4:	6824      	ldr	r4, [r4, #0]
 800fed6:	4421      	add	r1, r4
 800fed8:	1854      	adds	r4, r2, r1
 800feda:	42a3      	cmp	r3, r4
 800fedc:	6011      	str	r1, [r2, #0]
 800fede:	d1e0      	bne.n	800fea2 <_free_r+0x26>
 800fee0:	681c      	ldr	r4, [r3, #0]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	6053      	str	r3, [r2, #4]
 800fee6:	4421      	add	r1, r4
 800fee8:	6011      	str	r1, [r2, #0]
 800feea:	e7da      	b.n	800fea2 <_free_r+0x26>
 800feec:	d902      	bls.n	800fef4 <_free_r+0x78>
 800feee:	230c      	movs	r3, #12
 800fef0:	6003      	str	r3, [r0, #0]
 800fef2:	e7d6      	b.n	800fea2 <_free_r+0x26>
 800fef4:	6825      	ldr	r5, [r4, #0]
 800fef6:	1961      	adds	r1, r4, r5
 800fef8:	428b      	cmp	r3, r1
 800fefa:	bf04      	itt	eq
 800fefc:	6819      	ldreq	r1, [r3, #0]
 800fefe:	685b      	ldreq	r3, [r3, #4]
 800ff00:	6063      	str	r3, [r4, #4]
 800ff02:	bf04      	itt	eq
 800ff04:	1949      	addeq	r1, r1, r5
 800ff06:	6021      	streq	r1, [r4, #0]
 800ff08:	6054      	str	r4, [r2, #4]
 800ff0a:	e7ca      	b.n	800fea2 <_free_r+0x26>
 800ff0c:	b003      	add	sp, #12
 800ff0e:	bd30      	pop	{r4, r5, pc}
 800ff10:	20002800 	.word	0x20002800

0800ff14 <sbrk_aligned>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	4e0e      	ldr	r6, [pc, #56]	; (800ff50 <sbrk_aligned+0x3c>)
 800ff18:	460c      	mov	r4, r1
 800ff1a:	6831      	ldr	r1, [r6, #0]
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	b911      	cbnz	r1, 800ff26 <sbrk_aligned+0x12>
 800ff20:	f000 fb12 	bl	8010548 <_sbrk_r>
 800ff24:	6030      	str	r0, [r6, #0]
 800ff26:	4621      	mov	r1, r4
 800ff28:	4628      	mov	r0, r5
 800ff2a:	f000 fb0d 	bl	8010548 <_sbrk_r>
 800ff2e:	1c43      	adds	r3, r0, #1
 800ff30:	d00a      	beq.n	800ff48 <sbrk_aligned+0x34>
 800ff32:	1cc4      	adds	r4, r0, #3
 800ff34:	f024 0403 	bic.w	r4, r4, #3
 800ff38:	42a0      	cmp	r0, r4
 800ff3a:	d007      	beq.n	800ff4c <sbrk_aligned+0x38>
 800ff3c:	1a21      	subs	r1, r4, r0
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f000 fb02 	bl	8010548 <_sbrk_r>
 800ff44:	3001      	adds	r0, #1
 800ff46:	d101      	bne.n	800ff4c <sbrk_aligned+0x38>
 800ff48:	f04f 34ff 	mov.w	r4, #4294967295
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	bd70      	pop	{r4, r5, r6, pc}
 800ff50:	20002804 	.word	0x20002804

0800ff54 <_malloc_r>:
 800ff54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff58:	1ccd      	adds	r5, r1, #3
 800ff5a:	f025 0503 	bic.w	r5, r5, #3
 800ff5e:	3508      	adds	r5, #8
 800ff60:	2d0c      	cmp	r5, #12
 800ff62:	bf38      	it	cc
 800ff64:	250c      	movcc	r5, #12
 800ff66:	2d00      	cmp	r5, #0
 800ff68:	4607      	mov	r7, r0
 800ff6a:	db01      	blt.n	800ff70 <_malloc_r+0x1c>
 800ff6c:	42a9      	cmp	r1, r5
 800ff6e:	d905      	bls.n	800ff7c <_malloc_r+0x28>
 800ff70:	230c      	movs	r3, #12
 800ff72:	603b      	str	r3, [r7, #0]
 800ff74:	2600      	movs	r6, #0
 800ff76:	4630      	mov	r0, r6
 800ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7c:	4e2e      	ldr	r6, [pc, #184]	; (8010038 <_malloc_r+0xe4>)
 800ff7e:	f002 f8e1 	bl	8012144 <__malloc_lock>
 800ff82:	6833      	ldr	r3, [r6, #0]
 800ff84:	461c      	mov	r4, r3
 800ff86:	bb34      	cbnz	r4, 800ffd6 <_malloc_r+0x82>
 800ff88:	4629      	mov	r1, r5
 800ff8a:	4638      	mov	r0, r7
 800ff8c:	f7ff ffc2 	bl	800ff14 <sbrk_aligned>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	4604      	mov	r4, r0
 800ff94:	d14d      	bne.n	8010032 <_malloc_r+0xde>
 800ff96:	6834      	ldr	r4, [r6, #0]
 800ff98:	4626      	mov	r6, r4
 800ff9a:	2e00      	cmp	r6, #0
 800ff9c:	d140      	bne.n	8010020 <_malloc_r+0xcc>
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	4631      	mov	r1, r6
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	eb04 0803 	add.w	r8, r4, r3
 800ffa8:	f000 face 	bl	8010548 <_sbrk_r>
 800ffac:	4580      	cmp	r8, r0
 800ffae:	d13a      	bne.n	8010026 <_malloc_r+0xd2>
 800ffb0:	6821      	ldr	r1, [r4, #0]
 800ffb2:	3503      	adds	r5, #3
 800ffb4:	1a6d      	subs	r5, r5, r1
 800ffb6:	f025 0503 	bic.w	r5, r5, #3
 800ffba:	3508      	adds	r5, #8
 800ffbc:	2d0c      	cmp	r5, #12
 800ffbe:	bf38      	it	cc
 800ffc0:	250c      	movcc	r5, #12
 800ffc2:	4629      	mov	r1, r5
 800ffc4:	4638      	mov	r0, r7
 800ffc6:	f7ff ffa5 	bl	800ff14 <sbrk_aligned>
 800ffca:	3001      	adds	r0, #1
 800ffcc:	d02b      	beq.n	8010026 <_malloc_r+0xd2>
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	442b      	add	r3, r5
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	e00e      	b.n	800fff4 <_malloc_r+0xa0>
 800ffd6:	6822      	ldr	r2, [r4, #0]
 800ffd8:	1b52      	subs	r2, r2, r5
 800ffda:	d41e      	bmi.n	801001a <_malloc_r+0xc6>
 800ffdc:	2a0b      	cmp	r2, #11
 800ffde:	d916      	bls.n	801000e <_malloc_r+0xba>
 800ffe0:	1961      	adds	r1, r4, r5
 800ffe2:	42a3      	cmp	r3, r4
 800ffe4:	6025      	str	r5, [r4, #0]
 800ffe6:	bf18      	it	ne
 800ffe8:	6059      	strne	r1, [r3, #4]
 800ffea:	6863      	ldr	r3, [r4, #4]
 800ffec:	bf08      	it	eq
 800ffee:	6031      	streq	r1, [r6, #0]
 800fff0:	5162      	str	r2, [r4, r5]
 800fff2:	604b      	str	r3, [r1, #4]
 800fff4:	4638      	mov	r0, r7
 800fff6:	f104 060b 	add.w	r6, r4, #11
 800fffa:	f002 f8a9 	bl	8012150 <__malloc_unlock>
 800fffe:	f026 0607 	bic.w	r6, r6, #7
 8010002:	1d23      	adds	r3, r4, #4
 8010004:	1af2      	subs	r2, r6, r3
 8010006:	d0b6      	beq.n	800ff76 <_malloc_r+0x22>
 8010008:	1b9b      	subs	r3, r3, r6
 801000a:	50a3      	str	r3, [r4, r2]
 801000c:	e7b3      	b.n	800ff76 <_malloc_r+0x22>
 801000e:	6862      	ldr	r2, [r4, #4]
 8010010:	42a3      	cmp	r3, r4
 8010012:	bf0c      	ite	eq
 8010014:	6032      	streq	r2, [r6, #0]
 8010016:	605a      	strne	r2, [r3, #4]
 8010018:	e7ec      	b.n	800fff4 <_malloc_r+0xa0>
 801001a:	4623      	mov	r3, r4
 801001c:	6864      	ldr	r4, [r4, #4]
 801001e:	e7b2      	b.n	800ff86 <_malloc_r+0x32>
 8010020:	4634      	mov	r4, r6
 8010022:	6876      	ldr	r6, [r6, #4]
 8010024:	e7b9      	b.n	800ff9a <_malloc_r+0x46>
 8010026:	230c      	movs	r3, #12
 8010028:	603b      	str	r3, [r7, #0]
 801002a:	4638      	mov	r0, r7
 801002c:	f002 f890 	bl	8012150 <__malloc_unlock>
 8010030:	e7a1      	b.n	800ff76 <_malloc_r+0x22>
 8010032:	6025      	str	r5, [r4, #0]
 8010034:	e7de      	b.n	800fff4 <_malloc_r+0xa0>
 8010036:	bf00      	nop
 8010038:	20002800 	.word	0x20002800

0801003c <_scanf_float>:
 801003c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010040:	b087      	sub	sp, #28
 8010042:	4617      	mov	r7, r2
 8010044:	9303      	str	r3, [sp, #12]
 8010046:	688b      	ldr	r3, [r1, #8]
 8010048:	1e5a      	subs	r2, r3, #1
 801004a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801004e:	bf83      	ittte	hi
 8010050:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010054:	195b      	addhi	r3, r3, r5
 8010056:	9302      	strhi	r3, [sp, #8]
 8010058:	2300      	movls	r3, #0
 801005a:	bf86      	itte	hi
 801005c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010060:	608b      	strhi	r3, [r1, #8]
 8010062:	9302      	strls	r3, [sp, #8]
 8010064:	680b      	ldr	r3, [r1, #0]
 8010066:	468b      	mov	fp, r1
 8010068:	2500      	movs	r5, #0
 801006a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801006e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010072:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010076:	4680      	mov	r8, r0
 8010078:	460c      	mov	r4, r1
 801007a:	465e      	mov	r6, fp
 801007c:	46aa      	mov	sl, r5
 801007e:	46a9      	mov	r9, r5
 8010080:	9501      	str	r5, [sp, #4]
 8010082:	68a2      	ldr	r2, [r4, #8]
 8010084:	b152      	cbz	r2, 801009c <_scanf_float+0x60>
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	2b4e      	cmp	r3, #78	; 0x4e
 801008c:	d864      	bhi.n	8010158 <_scanf_float+0x11c>
 801008e:	2b40      	cmp	r3, #64	; 0x40
 8010090:	d83c      	bhi.n	801010c <_scanf_float+0xd0>
 8010092:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010096:	b2c8      	uxtb	r0, r1
 8010098:	280e      	cmp	r0, #14
 801009a:	d93a      	bls.n	8010112 <_scanf_float+0xd6>
 801009c:	f1b9 0f00 	cmp.w	r9, #0
 80100a0:	d003      	beq.n	80100aa <_scanf_float+0x6e>
 80100a2:	6823      	ldr	r3, [r4, #0]
 80100a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100a8:	6023      	str	r3, [r4, #0]
 80100aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100ae:	f1ba 0f01 	cmp.w	sl, #1
 80100b2:	f200 8113 	bhi.w	80102dc <_scanf_float+0x2a0>
 80100b6:	455e      	cmp	r6, fp
 80100b8:	f200 8105 	bhi.w	80102c6 <_scanf_float+0x28a>
 80100bc:	2501      	movs	r5, #1
 80100be:	4628      	mov	r0, r5
 80100c0:	b007      	add	sp, #28
 80100c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80100ca:	2a0d      	cmp	r2, #13
 80100cc:	d8e6      	bhi.n	801009c <_scanf_float+0x60>
 80100ce:	a101      	add	r1, pc, #4	; (adr r1, 80100d4 <_scanf_float+0x98>)
 80100d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80100d4:	08010213 	.word	0x08010213
 80100d8:	0801009d 	.word	0x0801009d
 80100dc:	0801009d 	.word	0x0801009d
 80100e0:	0801009d 	.word	0x0801009d
 80100e4:	08010273 	.word	0x08010273
 80100e8:	0801024b 	.word	0x0801024b
 80100ec:	0801009d 	.word	0x0801009d
 80100f0:	0801009d 	.word	0x0801009d
 80100f4:	08010221 	.word	0x08010221
 80100f8:	0801009d 	.word	0x0801009d
 80100fc:	0801009d 	.word	0x0801009d
 8010100:	0801009d 	.word	0x0801009d
 8010104:	0801009d 	.word	0x0801009d
 8010108:	080101d9 	.word	0x080101d9
 801010c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010110:	e7db      	b.n	80100ca <_scanf_float+0x8e>
 8010112:	290e      	cmp	r1, #14
 8010114:	d8c2      	bhi.n	801009c <_scanf_float+0x60>
 8010116:	a001      	add	r0, pc, #4	; (adr r0, 801011c <_scanf_float+0xe0>)
 8010118:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801011c:	080101cb 	.word	0x080101cb
 8010120:	0801009d 	.word	0x0801009d
 8010124:	080101cb 	.word	0x080101cb
 8010128:	0801025f 	.word	0x0801025f
 801012c:	0801009d 	.word	0x0801009d
 8010130:	08010179 	.word	0x08010179
 8010134:	080101b5 	.word	0x080101b5
 8010138:	080101b5 	.word	0x080101b5
 801013c:	080101b5 	.word	0x080101b5
 8010140:	080101b5 	.word	0x080101b5
 8010144:	080101b5 	.word	0x080101b5
 8010148:	080101b5 	.word	0x080101b5
 801014c:	080101b5 	.word	0x080101b5
 8010150:	080101b5 	.word	0x080101b5
 8010154:	080101b5 	.word	0x080101b5
 8010158:	2b6e      	cmp	r3, #110	; 0x6e
 801015a:	d809      	bhi.n	8010170 <_scanf_float+0x134>
 801015c:	2b60      	cmp	r3, #96	; 0x60
 801015e:	d8b2      	bhi.n	80100c6 <_scanf_float+0x8a>
 8010160:	2b54      	cmp	r3, #84	; 0x54
 8010162:	d077      	beq.n	8010254 <_scanf_float+0x218>
 8010164:	2b59      	cmp	r3, #89	; 0x59
 8010166:	d199      	bne.n	801009c <_scanf_float+0x60>
 8010168:	2d07      	cmp	r5, #7
 801016a:	d197      	bne.n	801009c <_scanf_float+0x60>
 801016c:	2508      	movs	r5, #8
 801016e:	e029      	b.n	80101c4 <_scanf_float+0x188>
 8010170:	2b74      	cmp	r3, #116	; 0x74
 8010172:	d06f      	beq.n	8010254 <_scanf_float+0x218>
 8010174:	2b79      	cmp	r3, #121	; 0x79
 8010176:	e7f6      	b.n	8010166 <_scanf_float+0x12a>
 8010178:	6821      	ldr	r1, [r4, #0]
 801017a:	05c8      	lsls	r0, r1, #23
 801017c:	d51a      	bpl.n	80101b4 <_scanf_float+0x178>
 801017e:	9b02      	ldr	r3, [sp, #8]
 8010180:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010184:	6021      	str	r1, [r4, #0]
 8010186:	f109 0901 	add.w	r9, r9, #1
 801018a:	b11b      	cbz	r3, 8010194 <_scanf_float+0x158>
 801018c:	3b01      	subs	r3, #1
 801018e:	3201      	adds	r2, #1
 8010190:	9302      	str	r3, [sp, #8]
 8010192:	60a2      	str	r2, [r4, #8]
 8010194:	68a3      	ldr	r3, [r4, #8]
 8010196:	3b01      	subs	r3, #1
 8010198:	60a3      	str	r3, [r4, #8]
 801019a:	6923      	ldr	r3, [r4, #16]
 801019c:	3301      	adds	r3, #1
 801019e:	6123      	str	r3, [r4, #16]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3b01      	subs	r3, #1
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	607b      	str	r3, [r7, #4]
 80101a8:	f340 8084 	ble.w	80102b4 <_scanf_float+0x278>
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	3301      	adds	r3, #1
 80101b0:	603b      	str	r3, [r7, #0]
 80101b2:	e766      	b.n	8010082 <_scanf_float+0x46>
 80101b4:	eb1a 0f05 	cmn.w	sl, r5
 80101b8:	f47f af70 	bne.w	801009c <_scanf_float+0x60>
 80101bc:	6822      	ldr	r2, [r4, #0]
 80101be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80101c2:	6022      	str	r2, [r4, #0]
 80101c4:	f806 3b01 	strb.w	r3, [r6], #1
 80101c8:	e7e4      	b.n	8010194 <_scanf_float+0x158>
 80101ca:	6822      	ldr	r2, [r4, #0]
 80101cc:	0610      	lsls	r0, r2, #24
 80101ce:	f57f af65 	bpl.w	801009c <_scanf_float+0x60>
 80101d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80101d6:	e7f4      	b.n	80101c2 <_scanf_float+0x186>
 80101d8:	f1ba 0f00 	cmp.w	sl, #0
 80101dc:	d10e      	bne.n	80101fc <_scanf_float+0x1c0>
 80101de:	f1b9 0f00 	cmp.w	r9, #0
 80101e2:	d10e      	bne.n	8010202 <_scanf_float+0x1c6>
 80101e4:	6822      	ldr	r2, [r4, #0]
 80101e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80101ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80101ee:	d108      	bne.n	8010202 <_scanf_float+0x1c6>
 80101f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80101f4:	6022      	str	r2, [r4, #0]
 80101f6:	f04f 0a01 	mov.w	sl, #1
 80101fa:	e7e3      	b.n	80101c4 <_scanf_float+0x188>
 80101fc:	f1ba 0f02 	cmp.w	sl, #2
 8010200:	d055      	beq.n	80102ae <_scanf_float+0x272>
 8010202:	2d01      	cmp	r5, #1
 8010204:	d002      	beq.n	801020c <_scanf_float+0x1d0>
 8010206:	2d04      	cmp	r5, #4
 8010208:	f47f af48 	bne.w	801009c <_scanf_float+0x60>
 801020c:	3501      	adds	r5, #1
 801020e:	b2ed      	uxtb	r5, r5
 8010210:	e7d8      	b.n	80101c4 <_scanf_float+0x188>
 8010212:	f1ba 0f01 	cmp.w	sl, #1
 8010216:	f47f af41 	bne.w	801009c <_scanf_float+0x60>
 801021a:	f04f 0a02 	mov.w	sl, #2
 801021e:	e7d1      	b.n	80101c4 <_scanf_float+0x188>
 8010220:	b97d      	cbnz	r5, 8010242 <_scanf_float+0x206>
 8010222:	f1b9 0f00 	cmp.w	r9, #0
 8010226:	f47f af3c 	bne.w	80100a2 <_scanf_float+0x66>
 801022a:	6822      	ldr	r2, [r4, #0]
 801022c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010230:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010234:	f47f af39 	bne.w	80100aa <_scanf_float+0x6e>
 8010238:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801023c:	6022      	str	r2, [r4, #0]
 801023e:	2501      	movs	r5, #1
 8010240:	e7c0      	b.n	80101c4 <_scanf_float+0x188>
 8010242:	2d03      	cmp	r5, #3
 8010244:	d0e2      	beq.n	801020c <_scanf_float+0x1d0>
 8010246:	2d05      	cmp	r5, #5
 8010248:	e7de      	b.n	8010208 <_scanf_float+0x1cc>
 801024a:	2d02      	cmp	r5, #2
 801024c:	f47f af26 	bne.w	801009c <_scanf_float+0x60>
 8010250:	2503      	movs	r5, #3
 8010252:	e7b7      	b.n	80101c4 <_scanf_float+0x188>
 8010254:	2d06      	cmp	r5, #6
 8010256:	f47f af21 	bne.w	801009c <_scanf_float+0x60>
 801025a:	2507      	movs	r5, #7
 801025c:	e7b2      	b.n	80101c4 <_scanf_float+0x188>
 801025e:	6822      	ldr	r2, [r4, #0]
 8010260:	0591      	lsls	r1, r2, #22
 8010262:	f57f af1b 	bpl.w	801009c <_scanf_float+0x60>
 8010266:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801026a:	6022      	str	r2, [r4, #0]
 801026c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010270:	e7a8      	b.n	80101c4 <_scanf_float+0x188>
 8010272:	6822      	ldr	r2, [r4, #0]
 8010274:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010278:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801027c:	d006      	beq.n	801028c <_scanf_float+0x250>
 801027e:	0550      	lsls	r0, r2, #21
 8010280:	f57f af0c 	bpl.w	801009c <_scanf_float+0x60>
 8010284:	f1b9 0f00 	cmp.w	r9, #0
 8010288:	f43f af0f 	beq.w	80100aa <_scanf_float+0x6e>
 801028c:	0591      	lsls	r1, r2, #22
 801028e:	bf58      	it	pl
 8010290:	9901      	ldrpl	r1, [sp, #4]
 8010292:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010296:	bf58      	it	pl
 8010298:	eba9 0101 	subpl.w	r1, r9, r1
 801029c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80102a0:	bf58      	it	pl
 80102a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80102a6:	6022      	str	r2, [r4, #0]
 80102a8:	f04f 0900 	mov.w	r9, #0
 80102ac:	e78a      	b.n	80101c4 <_scanf_float+0x188>
 80102ae:	f04f 0a03 	mov.w	sl, #3
 80102b2:	e787      	b.n	80101c4 <_scanf_float+0x188>
 80102b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80102b8:	4639      	mov	r1, r7
 80102ba:	4640      	mov	r0, r8
 80102bc:	4798      	blx	r3
 80102be:	2800      	cmp	r0, #0
 80102c0:	f43f aedf 	beq.w	8010082 <_scanf_float+0x46>
 80102c4:	e6ea      	b.n	801009c <_scanf_float+0x60>
 80102c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102ce:	463a      	mov	r2, r7
 80102d0:	4640      	mov	r0, r8
 80102d2:	4798      	blx	r3
 80102d4:	6923      	ldr	r3, [r4, #16]
 80102d6:	3b01      	subs	r3, #1
 80102d8:	6123      	str	r3, [r4, #16]
 80102da:	e6ec      	b.n	80100b6 <_scanf_float+0x7a>
 80102dc:	1e6b      	subs	r3, r5, #1
 80102de:	2b06      	cmp	r3, #6
 80102e0:	d825      	bhi.n	801032e <_scanf_float+0x2f2>
 80102e2:	2d02      	cmp	r5, #2
 80102e4:	d836      	bhi.n	8010354 <_scanf_float+0x318>
 80102e6:	455e      	cmp	r6, fp
 80102e8:	f67f aee8 	bls.w	80100bc <_scanf_float+0x80>
 80102ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102f4:	463a      	mov	r2, r7
 80102f6:	4640      	mov	r0, r8
 80102f8:	4798      	blx	r3
 80102fa:	6923      	ldr	r3, [r4, #16]
 80102fc:	3b01      	subs	r3, #1
 80102fe:	6123      	str	r3, [r4, #16]
 8010300:	e7f1      	b.n	80102e6 <_scanf_float+0x2aa>
 8010302:	9802      	ldr	r0, [sp, #8]
 8010304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010308:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801030c:	9002      	str	r0, [sp, #8]
 801030e:	463a      	mov	r2, r7
 8010310:	4640      	mov	r0, r8
 8010312:	4798      	blx	r3
 8010314:	6923      	ldr	r3, [r4, #16]
 8010316:	3b01      	subs	r3, #1
 8010318:	6123      	str	r3, [r4, #16]
 801031a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801031e:	fa5f fa8a 	uxtb.w	sl, sl
 8010322:	f1ba 0f02 	cmp.w	sl, #2
 8010326:	d1ec      	bne.n	8010302 <_scanf_float+0x2c6>
 8010328:	3d03      	subs	r5, #3
 801032a:	b2ed      	uxtb	r5, r5
 801032c:	1b76      	subs	r6, r6, r5
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	05da      	lsls	r2, r3, #23
 8010332:	d52f      	bpl.n	8010394 <_scanf_float+0x358>
 8010334:	055b      	lsls	r3, r3, #21
 8010336:	d510      	bpl.n	801035a <_scanf_float+0x31e>
 8010338:	455e      	cmp	r6, fp
 801033a:	f67f aebf 	bls.w	80100bc <_scanf_float+0x80>
 801033e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010346:	463a      	mov	r2, r7
 8010348:	4640      	mov	r0, r8
 801034a:	4798      	blx	r3
 801034c:	6923      	ldr	r3, [r4, #16]
 801034e:	3b01      	subs	r3, #1
 8010350:	6123      	str	r3, [r4, #16]
 8010352:	e7f1      	b.n	8010338 <_scanf_float+0x2fc>
 8010354:	46aa      	mov	sl, r5
 8010356:	9602      	str	r6, [sp, #8]
 8010358:	e7df      	b.n	801031a <_scanf_float+0x2de>
 801035a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801035e:	6923      	ldr	r3, [r4, #16]
 8010360:	2965      	cmp	r1, #101	; 0x65
 8010362:	f103 33ff 	add.w	r3, r3, #4294967295
 8010366:	f106 35ff 	add.w	r5, r6, #4294967295
 801036a:	6123      	str	r3, [r4, #16]
 801036c:	d00c      	beq.n	8010388 <_scanf_float+0x34c>
 801036e:	2945      	cmp	r1, #69	; 0x45
 8010370:	d00a      	beq.n	8010388 <_scanf_float+0x34c>
 8010372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010376:	463a      	mov	r2, r7
 8010378:	4640      	mov	r0, r8
 801037a:	4798      	blx	r3
 801037c:	6923      	ldr	r3, [r4, #16]
 801037e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010382:	3b01      	subs	r3, #1
 8010384:	1eb5      	subs	r5, r6, #2
 8010386:	6123      	str	r3, [r4, #16]
 8010388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801038c:	463a      	mov	r2, r7
 801038e:	4640      	mov	r0, r8
 8010390:	4798      	blx	r3
 8010392:	462e      	mov	r6, r5
 8010394:	6825      	ldr	r5, [r4, #0]
 8010396:	f015 0510 	ands.w	r5, r5, #16
 801039a:	d159      	bne.n	8010450 <_scanf_float+0x414>
 801039c:	7035      	strb	r5, [r6, #0]
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80103a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103a8:	d11b      	bne.n	80103e2 <_scanf_float+0x3a6>
 80103aa:	9b01      	ldr	r3, [sp, #4]
 80103ac:	454b      	cmp	r3, r9
 80103ae:	eba3 0209 	sub.w	r2, r3, r9
 80103b2:	d123      	bne.n	80103fc <_scanf_float+0x3c0>
 80103b4:	2200      	movs	r2, #0
 80103b6:	4659      	mov	r1, fp
 80103b8:	4640      	mov	r0, r8
 80103ba:	f000 ffa3 	bl	8011304 <_strtod_r>
 80103be:	6822      	ldr	r2, [r4, #0]
 80103c0:	9b03      	ldr	r3, [sp, #12]
 80103c2:	f012 0f02 	tst.w	r2, #2
 80103c6:	ec57 6b10 	vmov	r6, r7, d0
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	d021      	beq.n	8010412 <_scanf_float+0x3d6>
 80103ce:	9903      	ldr	r1, [sp, #12]
 80103d0:	1d1a      	adds	r2, r3, #4
 80103d2:	600a      	str	r2, [r1, #0]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	e9c3 6700 	strd	r6, r7, [r3]
 80103da:	68e3      	ldr	r3, [r4, #12]
 80103dc:	3301      	adds	r3, #1
 80103de:	60e3      	str	r3, [r4, #12]
 80103e0:	e66d      	b.n	80100be <_scanf_float+0x82>
 80103e2:	9b04      	ldr	r3, [sp, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d0e5      	beq.n	80103b4 <_scanf_float+0x378>
 80103e8:	9905      	ldr	r1, [sp, #20]
 80103ea:	230a      	movs	r3, #10
 80103ec:	462a      	mov	r2, r5
 80103ee:	3101      	adds	r1, #1
 80103f0:	4640      	mov	r0, r8
 80103f2:	f001 f80f 	bl	8011414 <_strtol_r>
 80103f6:	9b04      	ldr	r3, [sp, #16]
 80103f8:	9e05      	ldr	r6, [sp, #20]
 80103fa:	1ac2      	subs	r2, r0, r3
 80103fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010400:	429e      	cmp	r6, r3
 8010402:	bf28      	it	cs
 8010404:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010408:	4912      	ldr	r1, [pc, #72]	; (8010454 <_scanf_float+0x418>)
 801040a:	4630      	mov	r0, r6
 801040c:	f000 f8b2 	bl	8010574 <siprintf>
 8010410:	e7d0      	b.n	80103b4 <_scanf_float+0x378>
 8010412:	9903      	ldr	r1, [sp, #12]
 8010414:	f012 0f04 	tst.w	r2, #4
 8010418:	f103 0204 	add.w	r2, r3, #4
 801041c:	600a      	str	r2, [r1, #0]
 801041e:	d1d9      	bne.n	80103d4 <_scanf_float+0x398>
 8010420:	f8d3 8000 	ldr.w	r8, [r3]
 8010424:	ee10 2a10 	vmov	r2, s0
 8010428:	ee10 0a10 	vmov	r0, s0
 801042c:	463b      	mov	r3, r7
 801042e:	4639      	mov	r1, r7
 8010430:	f7f0 fb8c 	bl	8000b4c <__aeabi_dcmpun>
 8010434:	b128      	cbz	r0, 8010442 <_scanf_float+0x406>
 8010436:	4808      	ldr	r0, [pc, #32]	; (8010458 <_scanf_float+0x41c>)
 8010438:	f000 f896 	bl	8010568 <nanf>
 801043c:	ed88 0a00 	vstr	s0, [r8]
 8010440:	e7cb      	b.n	80103da <_scanf_float+0x39e>
 8010442:	4630      	mov	r0, r6
 8010444:	4639      	mov	r1, r7
 8010446:	f7f0 fbdf 	bl	8000c08 <__aeabi_d2f>
 801044a:	f8c8 0000 	str.w	r0, [r8]
 801044e:	e7c4      	b.n	80103da <_scanf_float+0x39e>
 8010450:	2500      	movs	r5, #0
 8010452:	e634      	b.n	80100be <_scanf_float+0x82>
 8010454:	08014134 	.word	0x08014134
 8010458:	08014585 	.word	0x08014585

0801045c <_puts_r>:
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	460e      	mov	r6, r1
 8010460:	4605      	mov	r5, r0
 8010462:	b118      	cbz	r0, 801046c <_puts_r+0x10>
 8010464:	6983      	ldr	r3, [r0, #24]
 8010466:	b90b      	cbnz	r3, 801046c <_puts_r+0x10>
 8010468:	f001 f9d2 	bl	8011810 <__sinit>
 801046c:	69ab      	ldr	r3, [r5, #24]
 801046e:	68ac      	ldr	r4, [r5, #8]
 8010470:	b913      	cbnz	r3, 8010478 <_puts_r+0x1c>
 8010472:	4628      	mov	r0, r5
 8010474:	f001 f9cc 	bl	8011810 <__sinit>
 8010478:	4b2c      	ldr	r3, [pc, #176]	; (801052c <_puts_r+0xd0>)
 801047a:	429c      	cmp	r4, r3
 801047c:	d120      	bne.n	80104c0 <_puts_r+0x64>
 801047e:	686c      	ldr	r4, [r5, #4]
 8010480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010482:	07db      	lsls	r3, r3, #31
 8010484:	d405      	bmi.n	8010492 <_puts_r+0x36>
 8010486:	89a3      	ldrh	r3, [r4, #12]
 8010488:	0598      	lsls	r0, r3, #22
 801048a:	d402      	bmi.n	8010492 <_puts_r+0x36>
 801048c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801048e:	f001 fdcc 	bl	801202a <__retarget_lock_acquire_recursive>
 8010492:	89a3      	ldrh	r3, [r4, #12]
 8010494:	0719      	lsls	r1, r3, #28
 8010496:	d51d      	bpl.n	80104d4 <_puts_r+0x78>
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	b1db      	cbz	r3, 80104d4 <_puts_r+0x78>
 801049c:	3e01      	subs	r6, #1
 801049e:	68a3      	ldr	r3, [r4, #8]
 80104a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80104a4:	3b01      	subs	r3, #1
 80104a6:	60a3      	str	r3, [r4, #8]
 80104a8:	bb39      	cbnz	r1, 80104fa <_puts_r+0x9e>
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	da38      	bge.n	8010520 <_puts_r+0xc4>
 80104ae:	4622      	mov	r2, r4
 80104b0:	210a      	movs	r1, #10
 80104b2:	4628      	mov	r0, r5
 80104b4:	f000 ffb0 	bl	8011418 <__swbuf_r>
 80104b8:	3001      	adds	r0, #1
 80104ba:	d011      	beq.n	80104e0 <_puts_r+0x84>
 80104bc:	250a      	movs	r5, #10
 80104be:	e011      	b.n	80104e4 <_puts_r+0x88>
 80104c0:	4b1b      	ldr	r3, [pc, #108]	; (8010530 <_puts_r+0xd4>)
 80104c2:	429c      	cmp	r4, r3
 80104c4:	d101      	bne.n	80104ca <_puts_r+0x6e>
 80104c6:	68ac      	ldr	r4, [r5, #8]
 80104c8:	e7da      	b.n	8010480 <_puts_r+0x24>
 80104ca:	4b1a      	ldr	r3, [pc, #104]	; (8010534 <_puts_r+0xd8>)
 80104cc:	429c      	cmp	r4, r3
 80104ce:	bf08      	it	eq
 80104d0:	68ec      	ldreq	r4, [r5, #12]
 80104d2:	e7d5      	b.n	8010480 <_puts_r+0x24>
 80104d4:	4621      	mov	r1, r4
 80104d6:	4628      	mov	r0, r5
 80104d8:	f001 f802 	bl	80114e0 <__swsetup_r>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d0dd      	beq.n	801049c <_puts_r+0x40>
 80104e0:	f04f 35ff 	mov.w	r5, #4294967295
 80104e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104e6:	07da      	lsls	r2, r3, #31
 80104e8:	d405      	bmi.n	80104f6 <_puts_r+0x9a>
 80104ea:	89a3      	ldrh	r3, [r4, #12]
 80104ec:	059b      	lsls	r3, r3, #22
 80104ee:	d402      	bmi.n	80104f6 <_puts_r+0x9a>
 80104f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104f2:	f001 fd9b 	bl	801202c <__retarget_lock_release_recursive>
 80104f6:	4628      	mov	r0, r5
 80104f8:	bd70      	pop	{r4, r5, r6, pc}
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	da04      	bge.n	8010508 <_puts_r+0xac>
 80104fe:	69a2      	ldr	r2, [r4, #24]
 8010500:	429a      	cmp	r2, r3
 8010502:	dc06      	bgt.n	8010512 <_puts_r+0xb6>
 8010504:	290a      	cmp	r1, #10
 8010506:	d004      	beq.n	8010512 <_puts_r+0xb6>
 8010508:	6823      	ldr	r3, [r4, #0]
 801050a:	1c5a      	adds	r2, r3, #1
 801050c:	6022      	str	r2, [r4, #0]
 801050e:	7019      	strb	r1, [r3, #0]
 8010510:	e7c5      	b.n	801049e <_puts_r+0x42>
 8010512:	4622      	mov	r2, r4
 8010514:	4628      	mov	r0, r5
 8010516:	f000 ff7f 	bl	8011418 <__swbuf_r>
 801051a:	3001      	adds	r0, #1
 801051c:	d1bf      	bne.n	801049e <_puts_r+0x42>
 801051e:	e7df      	b.n	80104e0 <_puts_r+0x84>
 8010520:	6823      	ldr	r3, [r4, #0]
 8010522:	250a      	movs	r5, #10
 8010524:	1c5a      	adds	r2, r3, #1
 8010526:	6022      	str	r2, [r4, #0]
 8010528:	701d      	strb	r5, [r3, #0]
 801052a:	e7db      	b.n	80104e4 <_puts_r+0x88>
 801052c:	080142bc 	.word	0x080142bc
 8010530:	080142dc 	.word	0x080142dc
 8010534:	0801429c 	.word	0x0801429c

08010538 <puts>:
 8010538:	4b02      	ldr	r3, [pc, #8]	; (8010544 <puts+0xc>)
 801053a:	4601      	mov	r1, r0
 801053c:	6818      	ldr	r0, [r3, #0]
 801053e:	f7ff bf8d 	b.w	801045c <_puts_r>
 8010542:	bf00      	nop
 8010544:	20000010 	.word	0x20000010

08010548 <_sbrk_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4d06      	ldr	r5, [pc, #24]	; (8010564 <_sbrk_r+0x1c>)
 801054c:	2300      	movs	r3, #0
 801054e:	4604      	mov	r4, r0
 8010550:	4608      	mov	r0, r1
 8010552:	602b      	str	r3, [r5, #0]
 8010554:	f7f3 ffb4 	bl	80044c0 <_sbrk>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_sbrk_r+0x1a>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_sbrk_r+0x1a>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	2000280c 	.word	0x2000280c

08010568 <nanf>:
 8010568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010570 <nanf+0x8>
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	7fc00000 	.word	0x7fc00000

08010574 <siprintf>:
 8010574:	b40e      	push	{r1, r2, r3}
 8010576:	b500      	push	{lr}
 8010578:	b09c      	sub	sp, #112	; 0x70
 801057a:	ab1d      	add	r3, sp, #116	; 0x74
 801057c:	9002      	str	r0, [sp, #8]
 801057e:	9006      	str	r0, [sp, #24]
 8010580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010584:	4809      	ldr	r0, [pc, #36]	; (80105ac <siprintf+0x38>)
 8010586:	9107      	str	r1, [sp, #28]
 8010588:	9104      	str	r1, [sp, #16]
 801058a:	4909      	ldr	r1, [pc, #36]	; (80105b0 <siprintf+0x3c>)
 801058c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010590:	9105      	str	r1, [sp, #20]
 8010592:	6800      	ldr	r0, [r0, #0]
 8010594:	9301      	str	r3, [sp, #4]
 8010596:	a902      	add	r1, sp, #8
 8010598:	f002 fb12 	bl	8012bc0 <_svfiprintf_r>
 801059c:	9b02      	ldr	r3, [sp, #8]
 801059e:	2200      	movs	r2, #0
 80105a0:	701a      	strb	r2, [r3, #0]
 80105a2:	b01c      	add	sp, #112	; 0x70
 80105a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80105a8:	b003      	add	sp, #12
 80105aa:	4770      	bx	lr
 80105ac:	20000010 	.word	0x20000010
 80105b0:	ffff0208 	.word	0xffff0208

080105b4 <siscanf>:
 80105b4:	b40e      	push	{r1, r2, r3}
 80105b6:	b510      	push	{r4, lr}
 80105b8:	b09f      	sub	sp, #124	; 0x7c
 80105ba:	ac21      	add	r4, sp, #132	; 0x84
 80105bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80105c0:	f854 2b04 	ldr.w	r2, [r4], #4
 80105c4:	9201      	str	r2, [sp, #4]
 80105c6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80105ca:	9004      	str	r0, [sp, #16]
 80105cc:	9008      	str	r0, [sp, #32]
 80105ce:	f7ef fe09 	bl	80001e4 <strlen>
 80105d2:	4b0c      	ldr	r3, [pc, #48]	; (8010604 <siscanf+0x50>)
 80105d4:	9005      	str	r0, [sp, #20]
 80105d6:	9009      	str	r0, [sp, #36]	; 0x24
 80105d8:	930d      	str	r3, [sp, #52]	; 0x34
 80105da:	480b      	ldr	r0, [pc, #44]	; (8010608 <siscanf+0x54>)
 80105dc:	9a01      	ldr	r2, [sp, #4]
 80105de:	6800      	ldr	r0, [r0, #0]
 80105e0:	9403      	str	r4, [sp, #12]
 80105e2:	2300      	movs	r3, #0
 80105e4:	9311      	str	r3, [sp, #68]	; 0x44
 80105e6:	9316      	str	r3, [sp, #88]	; 0x58
 80105e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80105f0:	a904      	add	r1, sp, #16
 80105f2:	4623      	mov	r3, r4
 80105f4:	f002 fc3e 	bl	8012e74 <__ssvfiscanf_r>
 80105f8:	b01f      	add	sp, #124	; 0x7c
 80105fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105fe:	b003      	add	sp, #12
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	0801062f 	.word	0x0801062f
 8010608:	20000010 	.word	0x20000010

0801060c <__sread>:
 801060c:	b510      	push	{r4, lr}
 801060e:	460c      	mov	r4, r1
 8010610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010614:	f003 f88c 	bl	8013730 <_read_r>
 8010618:	2800      	cmp	r0, #0
 801061a:	bfab      	itete	ge
 801061c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801061e:	89a3      	ldrhlt	r3, [r4, #12]
 8010620:	181b      	addge	r3, r3, r0
 8010622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010626:	bfac      	ite	ge
 8010628:	6563      	strge	r3, [r4, #84]	; 0x54
 801062a:	81a3      	strhlt	r3, [r4, #12]
 801062c:	bd10      	pop	{r4, pc}

0801062e <__seofread>:
 801062e:	2000      	movs	r0, #0
 8010630:	4770      	bx	lr

08010632 <__swrite>:
 8010632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010636:	461f      	mov	r7, r3
 8010638:	898b      	ldrh	r3, [r1, #12]
 801063a:	05db      	lsls	r3, r3, #23
 801063c:	4605      	mov	r5, r0
 801063e:	460c      	mov	r4, r1
 8010640:	4616      	mov	r6, r2
 8010642:	d505      	bpl.n	8010650 <__swrite+0x1e>
 8010644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010648:	2302      	movs	r3, #2
 801064a:	2200      	movs	r2, #0
 801064c:	f001 fcf0 	bl	8012030 <_lseek_r>
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801065a:	81a3      	strh	r3, [r4, #12]
 801065c:	4632      	mov	r2, r6
 801065e:	463b      	mov	r3, r7
 8010660:	4628      	mov	r0, r5
 8010662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010666:	f000 bf29 	b.w	80114bc <_write_r>

0801066a <__sseek>:
 801066a:	b510      	push	{r4, lr}
 801066c:	460c      	mov	r4, r1
 801066e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010672:	f001 fcdd 	bl	8012030 <_lseek_r>
 8010676:	1c43      	adds	r3, r0, #1
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	bf15      	itete	ne
 801067c:	6560      	strne	r0, [r4, #84]	; 0x54
 801067e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010686:	81a3      	strheq	r3, [r4, #12]
 8010688:	bf18      	it	ne
 801068a:	81a3      	strhne	r3, [r4, #12]
 801068c:	bd10      	pop	{r4, pc}

0801068e <__sclose>:
 801068e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010692:	f000 bf93 	b.w	80115bc <_close_r>

08010696 <strncmp>:
 8010696:	b510      	push	{r4, lr}
 8010698:	b17a      	cbz	r2, 80106ba <strncmp+0x24>
 801069a:	4603      	mov	r3, r0
 801069c:	3901      	subs	r1, #1
 801069e:	1884      	adds	r4, r0, r2
 80106a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80106a8:	4290      	cmp	r0, r2
 80106aa:	d101      	bne.n	80106b0 <strncmp+0x1a>
 80106ac:	42a3      	cmp	r3, r4
 80106ae:	d101      	bne.n	80106b4 <strncmp+0x1e>
 80106b0:	1a80      	subs	r0, r0, r2
 80106b2:	bd10      	pop	{r4, pc}
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d1f3      	bne.n	80106a0 <strncmp+0xa>
 80106b8:	e7fa      	b.n	80106b0 <strncmp+0x1a>
 80106ba:	4610      	mov	r0, r2
 80106bc:	e7f9      	b.n	80106b2 <strncmp+0x1c>

080106be <sulp>:
 80106be:	b570      	push	{r4, r5, r6, lr}
 80106c0:	4604      	mov	r4, r0
 80106c2:	460d      	mov	r5, r1
 80106c4:	ec45 4b10 	vmov	d0, r4, r5
 80106c8:	4616      	mov	r6, r2
 80106ca:	f002 f8b9 	bl	8012840 <__ulp>
 80106ce:	ec51 0b10 	vmov	r0, r1, d0
 80106d2:	b17e      	cbz	r6, 80106f4 <sulp+0x36>
 80106d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80106d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80106dc:	2b00      	cmp	r3, #0
 80106de:	dd09      	ble.n	80106f4 <sulp+0x36>
 80106e0:	051b      	lsls	r3, r3, #20
 80106e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80106e6:	2400      	movs	r4, #0
 80106e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80106ec:	4622      	mov	r2, r4
 80106ee:	462b      	mov	r3, r5
 80106f0:	f7ef ff92 	bl	8000618 <__aeabi_dmul>
 80106f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080106f8 <_strtod_l>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	ed2d 8b02 	vpush	{d8}
 8010700:	b09d      	sub	sp, #116	; 0x74
 8010702:	461f      	mov	r7, r3
 8010704:	2300      	movs	r3, #0
 8010706:	9318      	str	r3, [sp, #96]	; 0x60
 8010708:	4ba2      	ldr	r3, [pc, #648]	; (8010994 <_strtod_l+0x29c>)
 801070a:	9213      	str	r2, [sp, #76]	; 0x4c
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	9305      	str	r3, [sp, #20]
 8010710:	4604      	mov	r4, r0
 8010712:	4618      	mov	r0, r3
 8010714:	4688      	mov	r8, r1
 8010716:	f7ef fd65 	bl	80001e4 <strlen>
 801071a:	f04f 0a00 	mov.w	sl, #0
 801071e:	4605      	mov	r5, r0
 8010720:	f04f 0b00 	mov.w	fp, #0
 8010724:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801072a:	781a      	ldrb	r2, [r3, #0]
 801072c:	2a2b      	cmp	r2, #43	; 0x2b
 801072e:	d04e      	beq.n	80107ce <_strtod_l+0xd6>
 8010730:	d83b      	bhi.n	80107aa <_strtod_l+0xb2>
 8010732:	2a0d      	cmp	r2, #13
 8010734:	d834      	bhi.n	80107a0 <_strtod_l+0xa8>
 8010736:	2a08      	cmp	r2, #8
 8010738:	d834      	bhi.n	80107a4 <_strtod_l+0xac>
 801073a:	2a00      	cmp	r2, #0
 801073c:	d03e      	beq.n	80107bc <_strtod_l+0xc4>
 801073e:	2300      	movs	r3, #0
 8010740:	930a      	str	r3, [sp, #40]	; 0x28
 8010742:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010744:	7833      	ldrb	r3, [r6, #0]
 8010746:	2b30      	cmp	r3, #48	; 0x30
 8010748:	f040 80b0 	bne.w	80108ac <_strtod_l+0x1b4>
 801074c:	7873      	ldrb	r3, [r6, #1]
 801074e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010752:	2b58      	cmp	r3, #88	; 0x58
 8010754:	d168      	bne.n	8010828 <_strtod_l+0x130>
 8010756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010758:	9301      	str	r3, [sp, #4]
 801075a:	ab18      	add	r3, sp, #96	; 0x60
 801075c:	9702      	str	r7, [sp, #8]
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	4a8d      	ldr	r2, [pc, #564]	; (8010998 <_strtod_l+0x2a0>)
 8010762:	ab19      	add	r3, sp, #100	; 0x64
 8010764:	a917      	add	r1, sp, #92	; 0x5c
 8010766:	4620      	mov	r0, r4
 8010768:	f001 f956 	bl	8011a18 <__gethex>
 801076c:	f010 0707 	ands.w	r7, r0, #7
 8010770:	4605      	mov	r5, r0
 8010772:	d005      	beq.n	8010780 <_strtod_l+0x88>
 8010774:	2f06      	cmp	r7, #6
 8010776:	d12c      	bne.n	80107d2 <_strtod_l+0xda>
 8010778:	3601      	adds	r6, #1
 801077a:	2300      	movs	r3, #0
 801077c:	9617      	str	r6, [sp, #92]	; 0x5c
 801077e:	930a      	str	r3, [sp, #40]	; 0x28
 8010780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010782:	2b00      	cmp	r3, #0
 8010784:	f040 8590 	bne.w	80112a8 <_strtod_l+0xbb0>
 8010788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801078a:	b1eb      	cbz	r3, 80107c8 <_strtod_l+0xd0>
 801078c:	4652      	mov	r2, sl
 801078e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010792:	ec43 2b10 	vmov	d0, r2, r3
 8010796:	b01d      	add	sp, #116	; 0x74
 8010798:	ecbd 8b02 	vpop	{d8}
 801079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a0:	2a20      	cmp	r2, #32
 80107a2:	d1cc      	bne.n	801073e <_strtod_l+0x46>
 80107a4:	3301      	adds	r3, #1
 80107a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80107a8:	e7be      	b.n	8010728 <_strtod_l+0x30>
 80107aa:	2a2d      	cmp	r2, #45	; 0x2d
 80107ac:	d1c7      	bne.n	801073e <_strtod_l+0x46>
 80107ae:	2201      	movs	r2, #1
 80107b0:	920a      	str	r2, [sp, #40]	; 0x28
 80107b2:	1c5a      	adds	r2, r3, #1
 80107b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80107b6:	785b      	ldrb	r3, [r3, #1]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1c2      	bne.n	8010742 <_strtod_l+0x4a>
 80107bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f040 856e 	bne.w	80112a4 <_strtod_l+0xbac>
 80107c8:	4652      	mov	r2, sl
 80107ca:	465b      	mov	r3, fp
 80107cc:	e7e1      	b.n	8010792 <_strtod_l+0x9a>
 80107ce:	2200      	movs	r2, #0
 80107d0:	e7ee      	b.n	80107b0 <_strtod_l+0xb8>
 80107d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80107d4:	b13a      	cbz	r2, 80107e6 <_strtod_l+0xee>
 80107d6:	2135      	movs	r1, #53	; 0x35
 80107d8:	a81a      	add	r0, sp, #104	; 0x68
 80107da:	f002 f93c 	bl	8012a56 <__copybits>
 80107de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80107e0:	4620      	mov	r0, r4
 80107e2:	f001 fcfb 	bl	80121dc <_Bfree>
 80107e6:	3f01      	subs	r7, #1
 80107e8:	2f04      	cmp	r7, #4
 80107ea:	d806      	bhi.n	80107fa <_strtod_l+0x102>
 80107ec:	e8df f007 	tbb	[pc, r7]
 80107f0:	1714030a 	.word	0x1714030a
 80107f4:	0a          	.byte	0x0a
 80107f5:	00          	.byte	0x00
 80107f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80107fa:	0728      	lsls	r0, r5, #28
 80107fc:	d5c0      	bpl.n	8010780 <_strtod_l+0x88>
 80107fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010802:	e7bd      	b.n	8010780 <_strtod_l+0x88>
 8010804:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010808:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801080a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801080e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010812:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010816:	e7f0      	b.n	80107fa <_strtod_l+0x102>
 8010818:	f8df b180 	ldr.w	fp, [pc, #384]	; 801099c <_strtod_l+0x2a4>
 801081c:	e7ed      	b.n	80107fa <_strtod_l+0x102>
 801081e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010822:	f04f 3aff 	mov.w	sl, #4294967295
 8010826:	e7e8      	b.n	80107fa <_strtod_l+0x102>
 8010828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801082a:	1c5a      	adds	r2, r3, #1
 801082c:	9217      	str	r2, [sp, #92]	; 0x5c
 801082e:	785b      	ldrb	r3, [r3, #1]
 8010830:	2b30      	cmp	r3, #48	; 0x30
 8010832:	d0f9      	beq.n	8010828 <_strtod_l+0x130>
 8010834:	2b00      	cmp	r3, #0
 8010836:	d0a3      	beq.n	8010780 <_strtod_l+0x88>
 8010838:	2301      	movs	r3, #1
 801083a:	f04f 0900 	mov.w	r9, #0
 801083e:	9304      	str	r3, [sp, #16]
 8010840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010842:	9308      	str	r3, [sp, #32]
 8010844:	f8cd 901c 	str.w	r9, [sp, #28]
 8010848:	464f      	mov	r7, r9
 801084a:	220a      	movs	r2, #10
 801084c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801084e:	7806      	ldrb	r6, [r0, #0]
 8010850:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010854:	b2d9      	uxtb	r1, r3
 8010856:	2909      	cmp	r1, #9
 8010858:	d92a      	bls.n	80108b0 <_strtod_l+0x1b8>
 801085a:	9905      	ldr	r1, [sp, #20]
 801085c:	462a      	mov	r2, r5
 801085e:	f7ff ff1a 	bl	8010696 <strncmp>
 8010862:	b398      	cbz	r0, 80108cc <_strtod_l+0x1d4>
 8010864:	2000      	movs	r0, #0
 8010866:	4632      	mov	r2, r6
 8010868:	463d      	mov	r5, r7
 801086a:	9005      	str	r0, [sp, #20]
 801086c:	4603      	mov	r3, r0
 801086e:	2a65      	cmp	r2, #101	; 0x65
 8010870:	d001      	beq.n	8010876 <_strtod_l+0x17e>
 8010872:	2a45      	cmp	r2, #69	; 0x45
 8010874:	d118      	bne.n	80108a8 <_strtod_l+0x1b0>
 8010876:	b91d      	cbnz	r5, 8010880 <_strtod_l+0x188>
 8010878:	9a04      	ldr	r2, [sp, #16]
 801087a:	4302      	orrs	r2, r0
 801087c:	d09e      	beq.n	80107bc <_strtod_l+0xc4>
 801087e:	2500      	movs	r5, #0
 8010880:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010884:	f108 0201 	add.w	r2, r8, #1
 8010888:	9217      	str	r2, [sp, #92]	; 0x5c
 801088a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801088e:	2a2b      	cmp	r2, #43	; 0x2b
 8010890:	d075      	beq.n	801097e <_strtod_l+0x286>
 8010892:	2a2d      	cmp	r2, #45	; 0x2d
 8010894:	d07b      	beq.n	801098e <_strtod_l+0x296>
 8010896:	f04f 0c00 	mov.w	ip, #0
 801089a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801089e:	2909      	cmp	r1, #9
 80108a0:	f240 8082 	bls.w	80109a8 <_strtod_l+0x2b0>
 80108a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80108a8:	2600      	movs	r6, #0
 80108aa:	e09d      	b.n	80109e8 <_strtod_l+0x2f0>
 80108ac:	2300      	movs	r3, #0
 80108ae:	e7c4      	b.n	801083a <_strtod_l+0x142>
 80108b0:	2f08      	cmp	r7, #8
 80108b2:	bfd8      	it	le
 80108b4:	9907      	ldrle	r1, [sp, #28]
 80108b6:	f100 0001 	add.w	r0, r0, #1
 80108ba:	bfda      	itte	le
 80108bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80108c0:	9307      	strle	r3, [sp, #28]
 80108c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80108c6:	3701      	adds	r7, #1
 80108c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80108ca:	e7bf      	b.n	801084c <_strtod_l+0x154>
 80108cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108ce:	195a      	adds	r2, r3, r5
 80108d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80108d2:	5d5a      	ldrb	r2, [r3, r5]
 80108d4:	2f00      	cmp	r7, #0
 80108d6:	d037      	beq.n	8010948 <_strtod_l+0x250>
 80108d8:	9005      	str	r0, [sp, #20]
 80108da:	463d      	mov	r5, r7
 80108dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80108e0:	2b09      	cmp	r3, #9
 80108e2:	d912      	bls.n	801090a <_strtod_l+0x212>
 80108e4:	2301      	movs	r3, #1
 80108e6:	e7c2      	b.n	801086e <_strtod_l+0x176>
 80108e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108ea:	1c5a      	adds	r2, r3, #1
 80108ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80108ee:	785a      	ldrb	r2, [r3, #1]
 80108f0:	3001      	adds	r0, #1
 80108f2:	2a30      	cmp	r2, #48	; 0x30
 80108f4:	d0f8      	beq.n	80108e8 <_strtod_l+0x1f0>
 80108f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80108fa:	2b08      	cmp	r3, #8
 80108fc:	f200 84d9 	bhi.w	80112b2 <_strtod_l+0xbba>
 8010900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010902:	9005      	str	r0, [sp, #20]
 8010904:	2000      	movs	r0, #0
 8010906:	9308      	str	r3, [sp, #32]
 8010908:	4605      	mov	r5, r0
 801090a:	3a30      	subs	r2, #48	; 0x30
 801090c:	f100 0301 	add.w	r3, r0, #1
 8010910:	d014      	beq.n	801093c <_strtod_l+0x244>
 8010912:	9905      	ldr	r1, [sp, #20]
 8010914:	4419      	add	r1, r3
 8010916:	9105      	str	r1, [sp, #20]
 8010918:	462b      	mov	r3, r5
 801091a:	eb00 0e05 	add.w	lr, r0, r5
 801091e:	210a      	movs	r1, #10
 8010920:	4573      	cmp	r3, lr
 8010922:	d113      	bne.n	801094c <_strtod_l+0x254>
 8010924:	182b      	adds	r3, r5, r0
 8010926:	2b08      	cmp	r3, #8
 8010928:	f105 0501 	add.w	r5, r5, #1
 801092c:	4405      	add	r5, r0
 801092e:	dc1c      	bgt.n	801096a <_strtod_l+0x272>
 8010930:	9907      	ldr	r1, [sp, #28]
 8010932:	230a      	movs	r3, #10
 8010934:	fb03 2301 	mla	r3, r3, r1, r2
 8010938:	9307      	str	r3, [sp, #28]
 801093a:	2300      	movs	r3, #0
 801093c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801093e:	1c51      	adds	r1, r2, #1
 8010940:	9117      	str	r1, [sp, #92]	; 0x5c
 8010942:	7852      	ldrb	r2, [r2, #1]
 8010944:	4618      	mov	r0, r3
 8010946:	e7c9      	b.n	80108dc <_strtod_l+0x1e4>
 8010948:	4638      	mov	r0, r7
 801094a:	e7d2      	b.n	80108f2 <_strtod_l+0x1fa>
 801094c:	2b08      	cmp	r3, #8
 801094e:	dc04      	bgt.n	801095a <_strtod_l+0x262>
 8010950:	9e07      	ldr	r6, [sp, #28]
 8010952:	434e      	muls	r6, r1
 8010954:	9607      	str	r6, [sp, #28]
 8010956:	3301      	adds	r3, #1
 8010958:	e7e2      	b.n	8010920 <_strtod_l+0x228>
 801095a:	f103 0c01 	add.w	ip, r3, #1
 801095e:	f1bc 0f10 	cmp.w	ip, #16
 8010962:	bfd8      	it	le
 8010964:	fb01 f909 	mulle.w	r9, r1, r9
 8010968:	e7f5      	b.n	8010956 <_strtod_l+0x25e>
 801096a:	2d10      	cmp	r5, #16
 801096c:	bfdc      	itt	le
 801096e:	230a      	movle	r3, #10
 8010970:	fb03 2909 	mlale	r9, r3, r9, r2
 8010974:	e7e1      	b.n	801093a <_strtod_l+0x242>
 8010976:	2300      	movs	r3, #0
 8010978:	9305      	str	r3, [sp, #20]
 801097a:	2301      	movs	r3, #1
 801097c:	e77c      	b.n	8010878 <_strtod_l+0x180>
 801097e:	f04f 0c00 	mov.w	ip, #0
 8010982:	f108 0202 	add.w	r2, r8, #2
 8010986:	9217      	str	r2, [sp, #92]	; 0x5c
 8010988:	f898 2002 	ldrb.w	r2, [r8, #2]
 801098c:	e785      	b.n	801089a <_strtod_l+0x1a2>
 801098e:	f04f 0c01 	mov.w	ip, #1
 8010992:	e7f6      	b.n	8010982 <_strtod_l+0x28a>
 8010994:	08014374 	.word	0x08014374
 8010998:	08014148 	.word	0x08014148
 801099c:	7ff00000 	.word	0x7ff00000
 80109a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109a2:	1c51      	adds	r1, r2, #1
 80109a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80109a6:	7852      	ldrb	r2, [r2, #1]
 80109a8:	2a30      	cmp	r2, #48	; 0x30
 80109aa:	d0f9      	beq.n	80109a0 <_strtod_l+0x2a8>
 80109ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80109b0:	2908      	cmp	r1, #8
 80109b2:	f63f af79 	bhi.w	80108a8 <_strtod_l+0x1b0>
 80109b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80109ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109bc:	9206      	str	r2, [sp, #24]
 80109be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109c0:	1c51      	adds	r1, r2, #1
 80109c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80109c4:	7852      	ldrb	r2, [r2, #1]
 80109c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80109ca:	2e09      	cmp	r6, #9
 80109cc:	d937      	bls.n	8010a3e <_strtod_l+0x346>
 80109ce:	9e06      	ldr	r6, [sp, #24]
 80109d0:	1b89      	subs	r1, r1, r6
 80109d2:	2908      	cmp	r1, #8
 80109d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80109d8:	dc02      	bgt.n	80109e0 <_strtod_l+0x2e8>
 80109da:	4576      	cmp	r6, lr
 80109dc:	bfa8      	it	ge
 80109de:	4676      	movge	r6, lr
 80109e0:	f1bc 0f00 	cmp.w	ip, #0
 80109e4:	d000      	beq.n	80109e8 <_strtod_l+0x2f0>
 80109e6:	4276      	negs	r6, r6
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	d14d      	bne.n	8010a88 <_strtod_l+0x390>
 80109ec:	9904      	ldr	r1, [sp, #16]
 80109ee:	4301      	orrs	r1, r0
 80109f0:	f47f aec6 	bne.w	8010780 <_strtod_l+0x88>
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	f47f aee1 	bne.w	80107bc <_strtod_l+0xc4>
 80109fa:	2a69      	cmp	r2, #105	; 0x69
 80109fc:	d027      	beq.n	8010a4e <_strtod_l+0x356>
 80109fe:	dc24      	bgt.n	8010a4a <_strtod_l+0x352>
 8010a00:	2a49      	cmp	r2, #73	; 0x49
 8010a02:	d024      	beq.n	8010a4e <_strtod_l+0x356>
 8010a04:	2a4e      	cmp	r2, #78	; 0x4e
 8010a06:	f47f aed9 	bne.w	80107bc <_strtod_l+0xc4>
 8010a0a:	499f      	ldr	r1, [pc, #636]	; (8010c88 <_strtod_l+0x590>)
 8010a0c:	a817      	add	r0, sp, #92	; 0x5c
 8010a0e:	f001 fa5b 	bl	8011ec8 <__match>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	f43f aed2 	beq.w	80107bc <_strtod_l+0xc4>
 8010a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	2b28      	cmp	r3, #40	; 0x28
 8010a1e:	d12d      	bne.n	8010a7c <_strtod_l+0x384>
 8010a20:	499a      	ldr	r1, [pc, #616]	; (8010c8c <_strtod_l+0x594>)
 8010a22:	aa1a      	add	r2, sp, #104	; 0x68
 8010a24:	a817      	add	r0, sp, #92	; 0x5c
 8010a26:	f001 fa63 	bl	8011ef0 <__hexnan>
 8010a2a:	2805      	cmp	r0, #5
 8010a2c:	d126      	bne.n	8010a7c <_strtod_l+0x384>
 8010a2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010a34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010a38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010a3c:	e6a0      	b.n	8010780 <_strtod_l+0x88>
 8010a3e:	210a      	movs	r1, #10
 8010a40:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010a44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010a48:	e7b9      	b.n	80109be <_strtod_l+0x2c6>
 8010a4a:	2a6e      	cmp	r2, #110	; 0x6e
 8010a4c:	e7db      	b.n	8010a06 <_strtod_l+0x30e>
 8010a4e:	4990      	ldr	r1, [pc, #576]	; (8010c90 <_strtod_l+0x598>)
 8010a50:	a817      	add	r0, sp, #92	; 0x5c
 8010a52:	f001 fa39 	bl	8011ec8 <__match>
 8010a56:	2800      	cmp	r0, #0
 8010a58:	f43f aeb0 	beq.w	80107bc <_strtod_l+0xc4>
 8010a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a5e:	498d      	ldr	r1, [pc, #564]	; (8010c94 <_strtod_l+0x59c>)
 8010a60:	3b01      	subs	r3, #1
 8010a62:	a817      	add	r0, sp, #92	; 0x5c
 8010a64:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a66:	f001 fa2f 	bl	8011ec8 <__match>
 8010a6a:	b910      	cbnz	r0, 8010a72 <_strtod_l+0x37a>
 8010a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a6e:	3301      	adds	r3, #1
 8010a70:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a72:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010ca4 <_strtod_l+0x5ac>
 8010a76:	f04f 0a00 	mov.w	sl, #0
 8010a7a:	e681      	b.n	8010780 <_strtod_l+0x88>
 8010a7c:	4886      	ldr	r0, [pc, #536]	; (8010c98 <_strtod_l+0x5a0>)
 8010a7e:	f002 fe6b 	bl	8013758 <nan>
 8010a82:	ec5b ab10 	vmov	sl, fp, d0
 8010a86:	e67b      	b.n	8010780 <_strtod_l+0x88>
 8010a88:	9b05      	ldr	r3, [sp, #20]
 8010a8a:	9807      	ldr	r0, [sp, #28]
 8010a8c:	1af3      	subs	r3, r6, r3
 8010a8e:	2f00      	cmp	r7, #0
 8010a90:	bf08      	it	eq
 8010a92:	462f      	moveq	r7, r5
 8010a94:	2d10      	cmp	r5, #16
 8010a96:	9306      	str	r3, [sp, #24]
 8010a98:	46a8      	mov	r8, r5
 8010a9a:	bfa8      	it	ge
 8010a9c:	f04f 0810 	movge.w	r8, #16
 8010aa0:	f7ef fd40 	bl	8000524 <__aeabi_ui2d>
 8010aa4:	2d09      	cmp	r5, #9
 8010aa6:	4682      	mov	sl, r0
 8010aa8:	468b      	mov	fp, r1
 8010aaa:	dd13      	ble.n	8010ad4 <_strtod_l+0x3dc>
 8010aac:	4b7b      	ldr	r3, [pc, #492]	; (8010c9c <_strtod_l+0x5a4>)
 8010aae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010ab2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010ab6:	f7ef fdaf 	bl	8000618 <__aeabi_dmul>
 8010aba:	4682      	mov	sl, r0
 8010abc:	4648      	mov	r0, r9
 8010abe:	468b      	mov	fp, r1
 8010ac0:	f7ef fd30 	bl	8000524 <__aeabi_ui2d>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	4650      	mov	r0, sl
 8010aca:	4659      	mov	r1, fp
 8010acc:	f7ef fbee 	bl	80002ac <__adddf3>
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	468b      	mov	fp, r1
 8010ad4:	2d0f      	cmp	r5, #15
 8010ad6:	dc38      	bgt.n	8010b4a <_strtod_l+0x452>
 8010ad8:	9b06      	ldr	r3, [sp, #24]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f43f ae50 	beq.w	8010780 <_strtod_l+0x88>
 8010ae0:	dd24      	ble.n	8010b2c <_strtod_l+0x434>
 8010ae2:	2b16      	cmp	r3, #22
 8010ae4:	dc0b      	bgt.n	8010afe <_strtod_l+0x406>
 8010ae6:	496d      	ldr	r1, [pc, #436]	; (8010c9c <_strtod_l+0x5a4>)
 8010ae8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010af0:	4652      	mov	r2, sl
 8010af2:	465b      	mov	r3, fp
 8010af4:	f7ef fd90 	bl	8000618 <__aeabi_dmul>
 8010af8:	4682      	mov	sl, r0
 8010afa:	468b      	mov	fp, r1
 8010afc:	e640      	b.n	8010780 <_strtod_l+0x88>
 8010afe:	9a06      	ldr	r2, [sp, #24]
 8010b00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010b04:	4293      	cmp	r3, r2
 8010b06:	db20      	blt.n	8010b4a <_strtod_l+0x452>
 8010b08:	4c64      	ldr	r4, [pc, #400]	; (8010c9c <_strtod_l+0x5a4>)
 8010b0a:	f1c5 050f 	rsb	r5, r5, #15
 8010b0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010b12:	4652      	mov	r2, sl
 8010b14:	465b      	mov	r3, fp
 8010b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b1a:	f7ef fd7d 	bl	8000618 <__aeabi_dmul>
 8010b1e:	9b06      	ldr	r3, [sp, #24]
 8010b20:	1b5d      	subs	r5, r3, r5
 8010b22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010b26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b2a:	e7e3      	b.n	8010af4 <_strtod_l+0x3fc>
 8010b2c:	9b06      	ldr	r3, [sp, #24]
 8010b2e:	3316      	adds	r3, #22
 8010b30:	db0b      	blt.n	8010b4a <_strtod_l+0x452>
 8010b32:	9b05      	ldr	r3, [sp, #20]
 8010b34:	1b9e      	subs	r6, r3, r6
 8010b36:	4b59      	ldr	r3, [pc, #356]	; (8010c9c <_strtod_l+0x5a4>)
 8010b38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010b3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b40:	4650      	mov	r0, sl
 8010b42:	4659      	mov	r1, fp
 8010b44:	f7ef fe92 	bl	800086c <__aeabi_ddiv>
 8010b48:	e7d6      	b.n	8010af8 <_strtod_l+0x400>
 8010b4a:	9b06      	ldr	r3, [sp, #24]
 8010b4c:	eba5 0808 	sub.w	r8, r5, r8
 8010b50:	4498      	add	r8, r3
 8010b52:	f1b8 0f00 	cmp.w	r8, #0
 8010b56:	dd74      	ble.n	8010c42 <_strtod_l+0x54a>
 8010b58:	f018 030f 	ands.w	r3, r8, #15
 8010b5c:	d00a      	beq.n	8010b74 <_strtod_l+0x47c>
 8010b5e:	494f      	ldr	r1, [pc, #316]	; (8010c9c <_strtod_l+0x5a4>)
 8010b60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b64:	4652      	mov	r2, sl
 8010b66:	465b      	mov	r3, fp
 8010b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b6c:	f7ef fd54 	bl	8000618 <__aeabi_dmul>
 8010b70:	4682      	mov	sl, r0
 8010b72:	468b      	mov	fp, r1
 8010b74:	f038 080f 	bics.w	r8, r8, #15
 8010b78:	d04f      	beq.n	8010c1a <_strtod_l+0x522>
 8010b7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010b7e:	dd22      	ble.n	8010bc6 <_strtod_l+0x4ce>
 8010b80:	2500      	movs	r5, #0
 8010b82:	462e      	mov	r6, r5
 8010b84:	9507      	str	r5, [sp, #28]
 8010b86:	9505      	str	r5, [sp, #20]
 8010b88:	2322      	movs	r3, #34	; 0x22
 8010b8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010ca4 <_strtod_l+0x5ac>
 8010b8e:	6023      	str	r3, [r4, #0]
 8010b90:	f04f 0a00 	mov.w	sl, #0
 8010b94:	9b07      	ldr	r3, [sp, #28]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f43f adf2 	beq.w	8010780 <_strtod_l+0x88>
 8010b9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f001 fb1c 	bl	80121dc <_Bfree>
 8010ba4:	9905      	ldr	r1, [sp, #20]
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f001 fb18 	bl	80121dc <_Bfree>
 8010bac:	4631      	mov	r1, r6
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f001 fb14 	bl	80121dc <_Bfree>
 8010bb4:	9907      	ldr	r1, [sp, #28]
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	f001 fb10 	bl	80121dc <_Bfree>
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f001 fb0c 	bl	80121dc <_Bfree>
 8010bc4:	e5dc      	b.n	8010780 <_strtod_l+0x88>
 8010bc6:	4b36      	ldr	r3, [pc, #216]	; (8010ca0 <_strtod_l+0x5a8>)
 8010bc8:	9304      	str	r3, [sp, #16]
 8010bca:	2300      	movs	r3, #0
 8010bcc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010bd0:	4650      	mov	r0, sl
 8010bd2:	4659      	mov	r1, fp
 8010bd4:	4699      	mov	r9, r3
 8010bd6:	f1b8 0f01 	cmp.w	r8, #1
 8010bda:	dc21      	bgt.n	8010c20 <_strtod_l+0x528>
 8010bdc:	b10b      	cbz	r3, 8010be2 <_strtod_l+0x4ea>
 8010bde:	4682      	mov	sl, r0
 8010be0:	468b      	mov	fp, r1
 8010be2:	4b2f      	ldr	r3, [pc, #188]	; (8010ca0 <_strtod_l+0x5a8>)
 8010be4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010be8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010bec:	4652      	mov	r2, sl
 8010bee:	465b      	mov	r3, fp
 8010bf0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010bf4:	f7ef fd10 	bl	8000618 <__aeabi_dmul>
 8010bf8:	4b2a      	ldr	r3, [pc, #168]	; (8010ca4 <_strtod_l+0x5ac>)
 8010bfa:	460a      	mov	r2, r1
 8010bfc:	400b      	ands	r3, r1
 8010bfe:	492a      	ldr	r1, [pc, #168]	; (8010ca8 <_strtod_l+0x5b0>)
 8010c00:	428b      	cmp	r3, r1
 8010c02:	4682      	mov	sl, r0
 8010c04:	d8bc      	bhi.n	8010b80 <_strtod_l+0x488>
 8010c06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c0a:	428b      	cmp	r3, r1
 8010c0c:	bf86      	itte	hi
 8010c0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010cac <_strtod_l+0x5b4>
 8010c12:	f04f 3aff 	movhi.w	sl, #4294967295
 8010c16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	9304      	str	r3, [sp, #16]
 8010c1e:	e084      	b.n	8010d2a <_strtod_l+0x632>
 8010c20:	f018 0f01 	tst.w	r8, #1
 8010c24:	d005      	beq.n	8010c32 <_strtod_l+0x53a>
 8010c26:	9b04      	ldr	r3, [sp, #16]
 8010c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2c:	f7ef fcf4 	bl	8000618 <__aeabi_dmul>
 8010c30:	2301      	movs	r3, #1
 8010c32:	9a04      	ldr	r2, [sp, #16]
 8010c34:	3208      	adds	r2, #8
 8010c36:	f109 0901 	add.w	r9, r9, #1
 8010c3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010c3e:	9204      	str	r2, [sp, #16]
 8010c40:	e7c9      	b.n	8010bd6 <_strtod_l+0x4de>
 8010c42:	d0ea      	beq.n	8010c1a <_strtod_l+0x522>
 8010c44:	f1c8 0800 	rsb	r8, r8, #0
 8010c48:	f018 020f 	ands.w	r2, r8, #15
 8010c4c:	d00a      	beq.n	8010c64 <_strtod_l+0x56c>
 8010c4e:	4b13      	ldr	r3, [pc, #76]	; (8010c9c <_strtod_l+0x5a4>)
 8010c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c54:	4650      	mov	r0, sl
 8010c56:	4659      	mov	r1, fp
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	f7ef fe06 	bl	800086c <__aeabi_ddiv>
 8010c60:	4682      	mov	sl, r0
 8010c62:	468b      	mov	fp, r1
 8010c64:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010c68:	d0d7      	beq.n	8010c1a <_strtod_l+0x522>
 8010c6a:	f1b8 0f1f 	cmp.w	r8, #31
 8010c6e:	dd1f      	ble.n	8010cb0 <_strtod_l+0x5b8>
 8010c70:	2500      	movs	r5, #0
 8010c72:	462e      	mov	r6, r5
 8010c74:	9507      	str	r5, [sp, #28]
 8010c76:	9505      	str	r5, [sp, #20]
 8010c78:	2322      	movs	r3, #34	; 0x22
 8010c7a:	f04f 0a00 	mov.w	sl, #0
 8010c7e:	f04f 0b00 	mov.w	fp, #0
 8010c82:	6023      	str	r3, [r4, #0]
 8010c84:	e786      	b.n	8010b94 <_strtod_l+0x49c>
 8010c86:	bf00      	nop
 8010c88:	08014142 	.word	0x08014142
 8010c8c:	0801415c 	.word	0x0801415c
 8010c90:	08014139 	.word	0x08014139
 8010c94:	0801413c 	.word	0x0801413c
 8010c98:	08014585 	.word	0x08014585
 8010c9c:	08014428 	.word	0x08014428
 8010ca0:	08014400 	.word	0x08014400
 8010ca4:	7ff00000 	.word	0x7ff00000
 8010ca8:	7ca00000 	.word	0x7ca00000
 8010cac:	7fefffff 	.word	0x7fefffff
 8010cb0:	f018 0310 	ands.w	r3, r8, #16
 8010cb4:	bf18      	it	ne
 8010cb6:	236a      	movne	r3, #106	; 0x6a
 8010cb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011068 <_strtod_l+0x970>
 8010cbc:	9304      	str	r3, [sp, #16]
 8010cbe:	4650      	mov	r0, sl
 8010cc0:	4659      	mov	r1, fp
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	f018 0f01 	tst.w	r8, #1
 8010cc8:	d004      	beq.n	8010cd4 <_strtod_l+0x5dc>
 8010cca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010cce:	f7ef fca3 	bl	8000618 <__aeabi_dmul>
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010cd8:	f109 0908 	add.w	r9, r9, #8
 8010cdc:	d1f2      	bne.n	8010cc4 <_strtod_l+0x5cc>
 8010cde:	b10b      	cbz	r3, 8010ce4 <_strtod_l+0x5ec>
 8010ce0:	4682      	mov	sl, r0
 8010ce2:	468b      	mov	fp, r1
 8010ce4:	9b04      	ldr	r3, [sp, #16]
 8010ce6:	b1c3      	cbz	r3, 8010d1a <_strtod_l+0x622>
 8010ce8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010cec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	4659      	mov	r1, fp
 8010cf4:	dd11      	ble.n	8010d1a <_strtod_l+0x622>
 8010cf6:	2b1f      	cmp	r3, #31
 8010cf8:	f340 8124 	ble.w	8010f44 <_strtod_l+0x84c>
 8010cfc:	2b34      	cmp	r3, #52	; 0x34
 8010cfe:	bfde      	ittt	le
 8010d00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010d04:	f04f 33ff 	movle.w	r3, #4294967295
 8010d08:	fa03 f202 	lslle.w	r2, r3, r2
 8010d0c:	f04f 0a00 	mov.w	sl, #0
 8010d10:	bfcc      	ite	gt
 8010d12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010d16:	ea02 0b01 	andle.w	fp, r2, r1
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	4650      	mov	r0, sl
 8010d20:	4659      	mov	r1, fp
 8010d22:	f7ef fee1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d26:	2800      	cmp	r0, #0
 8010d28:	d1a2      	bne.n	8010c70 <_strtod_l+0x578>
 8010d2a:	9b07      	ldr	r3, [sp, #28]
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	9908      	ldr	r1, [sp, #32]
 8010d30:	462b      	mov	r3, r5
 8010d32:	463a      	mov	r2, r7
 8010d34:	4620      	mov	r0, r4
 8010d36:	f001 fab9 	bl	80122ac <__s2b>
 8010d3a:	9007      	str	r0, [sp, #28]
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	f43f af1f 	beq.w	8010b80 <_strtod_l+0x488>
 8010d42:	9b05      	ldr	r3, [sp, #20]
 8010d44:	1b9e      	subs	r6, r3, r6
 8010d46:	9b06      	ldr	r3, [sp, #24]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	bfb4      	ite	lt
 8010d4c:	4633      	movlt	r3, r6
 8010d4e:	2300      	movge	r3, #0
 8010d50:	930c      	str	r3, [sp, #48]	; 0x30
 8010d52:	9b06      	ldr	r3, [sp, #24]
 8010d54:	2500      	movs	r5, #0
 8010d56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d5a:	9312      	str	r3, [sp, #72]	; 0x48
 8010d5c:	462e      	mov	r6, r5
 8010d5e:	9b07      	ldr	r3, [sp, #28]
 8010d60:	4620      	mov	r0, r4
 8010d62:	6859      	ldr	r1, [r3, #4]
 8010d64:	f001 f9fa 	bl	801215c <_Balloc>
 8010d68:	9005      	str	r0, [sp, #20]
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	f43f af0c 	beq.w	8010b88 <_strtod_l+0x490>
 8010d70:	9b07      	ldr	r3, [sp, #28]
 8010d72:	691a      	ldr	r2, [r3, #16]
 8010d74:	3202      	adds	r2, #2
 8010d76:	f103 010c 	add.w	r1, r3, #12
 8010d7a:	0092      	lsls	r2, r2, #2
 8010d7c:	300c      	adds	r0, #12
 8010d7e:	f7ff f867 	bl	800fe50 <memcpy>
 8010d82:	ec4b ab10 	vmov	d0, sl, fp
 8010d86:	aa1a      	add	r2, sp, #104	; 0x68
 8010d88:	a919      	add	r1, sp, #100	; 0x64
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f001 fdd4 	bl	8012938 <__d2b>
 8010d90:	ec4b ab18 	vmov	d8, sl, fp
 8010d94:	9018      	str	r0, [sp, #96]	; 0x60
 8010d96:	2800      	cmp	r0, #0
 8010d98:	f43f aef6 	beq.w	8010b88 <_strtod_l+0x490>
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f001 fb1e 	bl	80123e0 <__i2b>
 8010da4:	4606      	mov	r6, r0
 8010da6:	2800      	cmp	r0, #0
 8010da8:	f43f aeee 	beq.w	8010b88 <_strtod_l+0x490>
 8010dac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010dae:	9904      	ldr	r1, [sp, #16]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	bfab      	itete	ge
 8010db4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010db6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010db8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010dba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010dbe:	bfac      	ite	ge
 8010dc0:	eb03 0902 	addge.w	r9, r3, r2
 8010dc4:	1ad7      	sublt	r7, r2, r3
 8010dc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010dc8:	eba3 0801 	sub.w	r8, r3, r1
 8010dcc:	4490      	add	r8, r2
 8010dce:	4ba1      	ldr	r3, [pc, #644]	; (8011054 <_strtod_l+0x95c>)
 8010dd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8010dd4:	4598      	cmp	r8, r3
 8010dd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010dda:	f280 80c7 	bge.w	8010f6c <_strtod_l+0x874>
 8010dde:	eba3 0308 	sub.w	r3, r3, r8
 8010de2:	2b1f      	cmp	r3, #31
 8010de4:	eba2 0203 	sub.w	r2, r2, r3
 8010de8:	f04f 0101 	mov.w	r1, #1
 8010dec:	f300 80b1 	bgt.w	8010f52 <_strtod_l+0x85a>
 8010df0:	fa01 f303 	lsl.w	r3, r1, r3
 8010df4:	930d      	str	r3, [sp, #52]	; 0x34
 8010df6:	2300      	movs	r3, #0
 8010df8:	9308      	str	r3, [sp, #32]
 8010dfa:	eb09 0802 	add.w	r8, r9, r2
 8010dfe:	9b04      	ldr	r3, [sp, #16]
 8010e00:	45c1      	cmp	r9, r8
 8010e02:	4417      	add	r7, r2
 8010e04:	441f      	add	r7, r3
 8010e06:	464b      	mov	r3, r9
 8010e08:	bfa8      	it	ge
 8010e0a:	4643      	movge	r3, r8
 8010e0c:	42bb      	cmp	r3, r7
 8010e0e:	bfa8      	it	ge
 8010e10:	463b      	movge	r3, r7
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	bfc2      	ittt	gt
 8010e16:	eba8 0803 	subgt.w	r8, r8, r3
 8010e1a:	1aff      	subgt	r7, r7, r3
 8010e1c:	eba9 0903 	subgt.w	r9, r9, r3
 8010e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	dd17      	ble.n	8010e56 <_strtod_l+0x75e>
 8010e26:	4631      	mov	r1, r6
 8010e28:	461a      	mov	r2, r3
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f001 fb98 	bl	8012560 <__pow5mult>
 8010e30:	4606      	mov	r6, r0
 8010e32:	2800      	cmp	r0, #0
 8010e34:	f43f aea8 	beq.w	8010b88 <_strtod_l+0x490>
 8010e38:	4601      	mov	r1, r0
 8010e3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f001 fae5 	bl	801240c <__multiply>
 8010e42:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e44:	2800      	cmp	r0, #0
 8010e46:	f43f ae9f 	beq.w	8010b88 <_strtod_l+0x490>
 8010e4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f001 f9c5 	bl	80121dc <_Bfree>
 8010e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e54:	9318      	str	r3, [sp, #96]	; 0x60
 8010e56:	f1b8 0f00 	cmp.w	r8, #0
 8010e5a:	f300 808c 	bgt.w	8010f76 <_strtod_l+0x87e>
 8010e5e:	9b06      	ldr	r3, [sp, #24]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	dd08      	ble.n	8010e76 <_strtod_l+0x77e>
 8010e64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e66:	9905      	ldr	r1, [sp, #20]
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f001 fb79 	bl	8012560 <__pow5mult>
 8010e6e:	9005      	str	r0, [sp, #20]
 8010e70:	2800      	cmp	r0, #0
 8010e72:	f43f ae89 	beq.w	8010b88 <_strtod_l+0x490>
 8010e76:	2f00      	cmp	r7, #0
 8010e78:	dd08      	ble.n	8010e8c <_strtod_l+0x794>
 8010e7a:	9905      	ldr	r1, [sp, #20]
 8010e7c:	463a      	mov	r2, r7
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f001 fbc8 	bl	8012614 <__lshift>
 8010e84:	9005      	str	r0, [sp, #20]
 8010e86:	2800      	cmp	r0, #0
 8010e88:	f43f ae7e 	beq.w	8010b88 <_strtod_l+0x490>
 8010e8c:	f1b9 0f00 	cmp.w	r9, #0
 8010e90:	dd08      	ble.n	8010ea4 <_strtod_l+0x7ac>
 8010e92:	4631      	mov	r1, r6
 8010e94:	464a      	mov	r2, r9
 8010e96:	4620      	mov	r0, r4
 8010e98:	f001 fbbc 	bl	8012614 <__lshift>
 8010e9c:	4606      	mov	r6, r0
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	f43f ae72 	beq.w	8010b88 <_strtod_l+0x490>
 8010ea4:	9a05      	ldr	r2, [sp, #20]
 8010ea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f001 fc3f 	bl	801272c <__mdiff>
 8010eae:	4605      	mov	r5, r0
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	f43f ae69 	beq.w	8010b88 <_strtod_l+0x490>
 8010eb6:	68c3      	ldr	r3, [r0, #12]
 8010eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eba:	2300      	movs	r3, #0
 8010ebc:	60c3      	str	r3, [r0, #12]
 8010ebe:	4631      	mov	r1, r6
 8010ec0:	f001 fc18 	bl	80126f4 <__mcmp>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	da60      	bge.n	8010f8a <_strtod_l+0x892>
 8010ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eca:	ea53 030a 	orrs.w	r3, r3, sl
 8010ece:	f040 8082 	bne.w	8010fd6 <_strtod_l+0x8de>
 8010ed2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d17d      	bne.n	8010fd6 <_strtod_l+0x8de>
 8010eda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ede:	0d1b      	lsrs	r3, r3, #20
 8010ee0:	051b      	lsls	r3, r3, #20
 8010ee2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010ee6:	d976      	bls.n	8010fd6 <_strtod_l+0x8de>
 8010ee8:	696b      	ldr	r3, [r5, #20]
 8010eea:	b913      	cbnz	r3, 8010ef2 <_strtod_l+0x7fa>
 8010eec:	692b      	ldr	r3, [r5, #16]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	dd71      	ble.n	8010fd6 <_strtod_l+0x8de>
 8010ef2:	4629      	mov	r1, r5
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f001 fb8c 	bl	8012614 <__lshift>
 8010efc:	4631      	mov	r1, r6
 8010efe:	4605      	mov	r5, r0
 8010f00:	f001 fbf8 	bl	80126f4 <__mcmp>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	dd66      	ble.n	8010fd6 <_strtod_l+0x8de>
 8010f08:	9904      	ldr	r1, [sp, #16]
 8010f0a:	4a53      	ldr	r2, [pc, #332]	; (8011058 <_strtod_l+0x960>)
 8010f0c:	465b      	mov	r3, fp
 8010f0e:	2900      	cmp	r1, #0
 8010f10:	f000 8081 	beq.w	8011016 <_strtod_l+0x91e>
 8010f14:	ea02 010b 	and.w	r1, r2, fp
 8010f18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f1c:	dc7b      	bgt.n	8011016 <_strtod_l+0x91e>
 8010f1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f22:	f77f aea9 	ble.w	8010c78 <_strtod_l+0x580>
 8010f26:	4b4d      	ldr	r3, [pc, #308]	; (801105c <_strtod_l+0x964>)
 8010f28:	4650      	mov	r0, sl
 8010f2a:	4659      	mov	r1, fp
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f7ef fb73 	bl	8000618 <__aeabi_dmul>
 8010f32:	460b      	mov	r3, r1
 8010f34:	4303      	orrs	r3, r0
 8010f36:	bf08      	it	eq
 8010f38:	2322      	moveq	r3, #34	; 0x22
 8010f3a:	4682      	mov	sl, r0
 8010f3c:	468b      	mov	fp, r1
 8010f3e:	bf08      	it	eq
 8010f40:	6023      	streq	r3, [r4, #0]
 8010f42:	e62b      	b.n	8010b9c <_strtod_l+0x4a4>
 8010f44:	f04f 32ff 	mov.w	r2, #4294967295
 8010f48:	fa02 f303 	lsl.w	r3, r2, r3
 8010f4c:	ea03 0a0a 	and.w	sl, r3, sl
 8010f50:	e6e3      	b.n	8010d1a <_strtod_l+0x622>
 8010f52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010f56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010f5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010f5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010f62:	fa01 f308 	lsl.w	r3, r1, r8
 8010f66:	9308      	str	r3, [sp, #32]
 8010f68:	910d      	str	r1, [sp, #52]	; 0x34
 8010f6a:	e746      	b.n	8010dfa <_strtod_l+0x702>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	9308      	str	r3, [sp, #32]
 8010f70:	2301      	movs	r3, #1
 8010f72:	930d      	str	r3, [sp, #52]	; 0x34
 8010f74:	e741      	b.n	8010dfa <_strtod_l+0x702>
 8010f76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f78:	4642      	mov	r2, r8
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f001 fb4a 	bl	8012614 <__lshift>
 8010f80:	9018      	str	r0, [sp, #96]	; 0x60
 8010f82:	2800      	cmp	r0, #0
 8010f84:	f47f af6b 	bne.w	8010e5e <_strtod_l+0x766>
 8010f88:	e5fe      	b.n	8010b88 <_strtod_l+0x490>
 8010f8a:	465f      	mov	r7, fp
 8010f8c:	d16e      	bne.n	801106c <_strtod_l+0x974>
 8010f8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f94:	b342      	cbz	r2, 8010fe8 <_strtod_l+0x8f0>
 8010f96:	4a32      	ldr	r2, [pc, #200]	; (8011060 <_strtod_l+0x968>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d128      	bne.n	8010fee <_strtod_l+0x8f6>
 8010f9c:	9b04      	ldr	r3, [sp, #16]
 8010f9e:	4651      	mov	r1, sl
 8010fa0:	b1eb      	cbz	r3, 8010fde <_strtod_l+0x8e6>
 8010fa2:	4b2d      	ldr	r3, [pc, #180]	; (8011058 <_strtod_l+0x960>)
 8010fa4:	403b      	ands	r3, r7
 8010fa6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010faa:	f04f 32ff 	mov.w	r2, #4294967295
 8010fae:	d819      	bhi.n	8010fe4 <_strtod_l+0x8ec>
 8010fb0:	0d1b      	lsrs	r3, r3, #20
 8010fb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fba:	4299      	cmp	r1, r3
 8010fbc:	d117      	bne.n	8010fee <_strtod_l+0x8f6>
 8010fbe:	4b29      	ldr	r3, [pc, #164]	; (8011064 <_strtod_l+0x96c>)
 8010fc0:	429f      	cmp	r7, r3
 8010fc2:	d102      	bne.n	8010fca <_strtod_l+0x8d2>
 8010fc4:	3101      	adds	r1, #1
 8010fc6:	f43f addf 	beq.w	8010b88 <_strtod_l+0x490>
 8010fca:	4b23      	ldr	r3, [pc, #140]	; (8011058 <_strtod_l+0x960>)
 8010fcc:	403b      	ands	r3, r7
 8010fce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010fd2:	f04f 0a00 	mov.w	sl, #0
 8010fd6:	9b04      	ldr	r3, [sp, #16]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d1a4      	bne.n	8010f26 <_strtod_l+0x82e>
 8010fdc:	e5de      	b.n	8010b9c <_strtod_l+0x4a4>
 8010fde:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe2:	e7ea      	b.n	8010fba <_strtod_l+0x8c2>
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	e7e8      	b.n	8010fba <_strtod_l+0x8c2>
 8010fe8:	ea53 030a 	orrs.w	r3, r3, sl
 8010fec:	d08c      	beq.n	8010f08 <_strtod_l+0x810>
 8010fee:	9b08      	ldr	r3, [sp, #32]
 8010ff0:	b1db      	cbz	r3, 801102a <_strtod_l+0x932>
 8010ff2:	423b      	tst	r3, r7
 8010ff4:	d0ef      	beq.n	8010fd6 <_strtod_l+0x8de>
 8010ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff8:	9a04      	ldr	r2, [sp, #16]
 8010ffa:	4650      	mov	r0, sl
 8010ffc:	4659      	mov	r1, fp
 8010ffe:	b1c3      	cbz	r3, 8011032 <_strtod_l+0x93a>
 8011000:	f7ff fb5d 	bl	80106be <sulp>
 8011004:	4602      	mov	r2, r0
 8011006:	460b      	mov	r3, r1
 8011008:	ec51 0b18 	vmov	r0, r1, d8
 801100c:	f7ef f94e 	bl	80002ac <__adddf3>
 8011010:	4682      	mov	sl, r0
 8011012:	468b      	mov	fp, r1
 8011014:	e7df      	b.n	8010fd6 <_strtod_l+0x8de>
 8011016:	4013      	ands	r3, r2
 8011018:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801101c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011020:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011024:	f04f 3aff 	mov.w	sl, #4294967295
 8011028:	e7d5      	b.n	8010fd6 <_strtod_l+0x8de>
 801102a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801102c:	ea13 0f0a 	tst.w	r3, sl
 8011030:	e7e0      	b.n	8010ff4 <_strtod_l+0x8fc>
 8011032:	f7ff fb44 	bl	80106be <sulp>
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	ec51 0b18 	vmov	r0, r1, d8
 801103e:	f7ef f933 	bl	80002a8 <__aeabi_dsub>
 8011042:	2200      	movs	r2, #0
 8011044:	2300      	movs	r3, #0
 8011046:	4682      	mov	sl, r0
 8011048:	468b      	mov	fp, r1
 801104a:	f7ef fd4d 	bl	8000ae8 <__aeabi_dcmpeq>
 801104e:	2800      	cmp	r0, #0
 8011050:	d0c1      	beq.n	8010fd6 <_strtod_l+0x8de>
 8011052:	e611      	b.n	8010c78 <_strtod_l+0x580>
 8011054:	fffffc02 	.word	0xfffffc02
 8011058:	7ff00000 	.word	0x7ff00000
 801105c:	39500000 	.word	0x39500000
 8011060:	000fffff 	.word	0x000fffff
 8011064:	7fefffff 	.word	0x7fefffff
 8011068:	08014170 	.word	0x08014170
 801106c:	4631      	mov	r1, r6
 801106e:	4628      	mov	r0, r5
 8011070:	f001 fcbe 	bl	80129f0 <__ratio>
 8011074:	ec59 8b10 	vmov	r8, r9, d0
 8011078:	ee10 0a10 	vmov	r0, s0
 801107c:	2200      	movs	r2, #0
 801107e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011082:	4649      	mov	r1, r9
 8011084:	f7ef fd44 	bl	8000b10 <__aeabi_dcmple>
 8011088:	2800      	cmp	r0, #0
 801108a:	d07a      	beq.n	8011182 <_strtod_l+0xa8a>
 801108c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801108e:	2b00      	cmp	r3, #0
 8011090:	d04a      	beq.n	8011128 <_strtod_l+0xa30>
 8011092:	4b95      	ldr	r3, [pc, #596]	; (80112e8 <_strtod_l+0xbf0>)
 8011094:	2200      	movs	r2, #0
 8011096:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801109a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80112e8 <_strtod_l+0xbf0>
 801109e:	f04f 0800 	mov.w	r8, #0
 80110a2:	4b92      	ldr	r3, [pc, #584]	; (80112ec <_strtod_l+0xbf4>)
 80110a4:	403b      	ands	r3, r7
 80110a6:	930d      	str	r3, [sp, #52]	; 0x34
 80110a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110aa:	4b91      	ldr	r3, [pc, #580]	; (80112f0 <_strtod_l+0xbf8>)
 80110ac:	429a      	cmp	r2, r3
 80110ae:	f040 80b0 	bne.w	8011212 <_strtod_l+0xb1a>
 80110b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80110ba:	ec4b ab10 	vmov	d0, sl, fp
 80110be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110c2:	f001 fbbd 	bl	8012840 <__ulp>
 80110c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110ca:	ec53 2b10 	vmov	r2, r3, d0
 80110ce:	f7ef faa3 	bl	8000618 <__aeabi_dmul>
 80110d2:	4652      	mov	r2, sl
 80110d4:	465b      	mov	r3, fp
 80110d6:	f7ef f8e9 	bl	80002ac <__adddf3>
 80110da:	460b      	mov	r3, r1
 80110dc:	4983      	ldr	r1, [pc, #524]	; (80112ec <_strtod_l+0xbf4>)
 80110de:	4a85      	ldr	r2, [pc, #532]	; (80112f4 <_strtod_l+0xbfc>)
 80110e0:	4019      	ands	r1, r3
 80110e2:	4291      	cmp	r1, r2
 80110e4:	4682      	mov	sl, r0
 80110e6:	d960      	bls.n	80111aa <_strtod_l+0xab2>
 80110e8:	ee18 3a90 	vmov	r3, s17
 80110ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d104      	bne.n	80110fe <_strtod_l+0xa06>
 80110f4:	ee18 3a10 	vmov	r3, s16
 80110f8:	3301      	adds	r3, #1
 80110fa:	f43f ad45 	beq.w	8010b88 <_strtod_l+0x490>
 80110fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011300 <_strtod_l+0xc08>
 8011102:	f04f 3aff 	mov.w	sl, #4294967295
 8011106:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011108:	4620      	mov	r0, r4
 801110a:	f001 f867 	bl	80121dc <_Bfree>
 801110e:	9905      	ldr	r1, [sp, #20]
 8011110:	4620      	mov	r0, r4
 8011112:	f001 f863 	bl	80121dc <_Bfree>
 8011116:	4631      	mov	r1, r6
 8011118:	4620      	mov	r0, r4
 801111a:	f001 f85f 	bl	80121dc <_Bfree>
 801111e:	4629      	mov	r1, r5
 8011120:	4620      	mov	r0, r4
 8011122:	f001 f85b 	bl	80121dc <_Bfree>
 8011126:	e61a      	b.n	8010d5e <_strtod_l+0x666>
 8011128:	f1ba 0f00 	cmp.w	sl, #0
 801112c:	d11b      	bne.n	8011166 <_strtod_l+0xa6e>
 801112e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011132:	b9f3      	cbnz	r3, 8011172 <_strtod_l+0xa7a>
 8011134:	4b6c      	ldr	r3, [pc, #432]	; (80112e8 <_strtod_l+0xbf0>)
 8011136:	2200      	movs	r2, #0
 8011138:	4640      	mov	r0, r8
 801113a:	4649      	mov	r1, r9
 801113c:	f7ef fcde 	bl	8000afc <__aeabi_dcmplt>
 8011140:	b9d0      	cbnz	r0, 8011178 <_strtod_l+0xa80>
 8011142:	4640      	mov	r0, r8
 8011144:	4649      	mov	r1, r9
 8011146:	4b6c      	ldr	r3, [pc, #432]	; (80112f8 <_strtod_l+0xc00>)
 8011148:	2200      	movs	r2, #0
 801114a:	f7ef fa65 	bl	8000618 <__aeabi_dmul>
 801114e:	4680      	mov	r8, r0
 8011150:	4689      	mov	r9, r1
 8011152:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011156:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801115a:	9315      	str	r3, [sp, #84]	; 0x54
 801115c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011160:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011164:	e79d      	b.n	80110a2 <_strtod_l+0x9aa>
 8011166:	f1ba 0f01 	cmp.w	sl, #1
 801116a:	d102      	bne.n	8011172 <_strtod_l+0xa7a>
 801116c:	2f00      	cmp	r7, #0
 801116e:	f43f ad83 	beq.w	8010c78 <_strtod_l+0x580>
 8011172:	4b62      	ldr	r3, [pc, #392]	; (80112fc <_strtod_l+0xc04>)
 8011174:	2200      	movs	r2, #0
 8011176:	e78e      	b.n	8011096 <_strtod_l+0x99e>
 8011178:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80112f8 <_strtod_l+0xc00>
 801117c:	f04f 0800 	mov.w	r8, #0
 8011180:	e7e7      	b.n	8011152 <_strtod_l+0xa5a>
 8011182:	4b5d      	ldr	r3, [pc, #372]	; (80112f8 <_strtod_l+0xc00>)
 8011184:	4640      	mov	r0, r8
 8011186:	4649      	mov	r1, r9
 8011188:	2200      	movs	r2, #0
 801118a:	f7ef fa45 	bl	8000618 <__aeabi_dmul>
 801118e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011190:	4680      	mov	r8, r0
 8011192:	4689      	mov	r9, r1
 8011194:	b933      	cbnz	r3, 80111a4 <_strtod_l+0xaac>
 8011196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801119a:	900e      	str	r0, [sp, #56]	; 0x38
 801119c:	930f      	str	r3, [sp, #60]	; 0x3c
 801119e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80111a2:	e7dd      	b.n	8011160 <_strtod_l+0xa68>
 80111a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80111a8:	e7f9      	b.n	801119e <_strtod_l+0xaa6>
 80111aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80111ae:	9b04      	ldr	r3, [sp, #16]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1a8      	bne.n	8011106 <_strtod_l+0xa0e>
 80111b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111ba:	0d1b      	lsrs	r3, r3, #20
 80111bc:	051b      	lsls	r3, r3, #20
 80111be:	429a      	cmp	r2, r3
 80111c0:	d1a1      	bne.n	8011106 <_strtod_l+0xa0e>
 80111c2:	4640      	mov	r0, r8
 80111c4:	4649      	mov	r1, r9
 80111c6:	f7ef fd87 	bl	8000cd8 <__aeabi_d2lz>
 80111ca:	f7ef f9f7 	bl	80005bc <__aeabi_l2d>
 80111ce:	4602      	mov	r2, r0
 80111d0:	460b      	mov	r3, r1
 80111d2:	4640      	mov	r0, r8
 80111d4:	4649      	mov	r1, r9
 80111d6:	f7ef f867 	bl	80002a8 <__aeabi_dsub>
 80111da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111e0:	ea43 030a 	orr.w	r3, r3, sl
 80111e4:	4313      	orrs	r3, r2
 80111e6:	4680      	mov	r8, r0
 80111e8:	4689      	mov	r9, r1
 80111ea:	d055      	beq.n	8011298 <_strtod_l+0xba0>
 80111ec:	a336      	add	r3, pc, #216	; (adr r3, 80112c8 <_strtod_l+0xbd0>)
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	f7ef fc83 	bl	8000afc <__aeabi_dcmplt>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	f47f acd0 	bne.w	8010b9c <_strtod_l+0x4a4>
 80111fc:	a334      	add	r3, pc, #208	; (adr r3, 80112d0 <_strtod_l+0xbd8>)
 80111fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011202:	4640      	mov	r0, r8
 8011204:	4649      	mov	r1, r9
 8011206:	f7ef fc97 	bl	8000b38 <__aeabi_dcmpgt>
 801120a:	2800      	cmp	r0, #0
 801120c:	f43f af7b 	beq.w	8011106 <_strtod_l+0xa0e>
 8011210:	e4c4      	b.n	8010b9c <_strtod_l+0x4a4>
 8011212:	9b04      	ldr	r3, [sp, #16]
 8011214:	b333      	cbz	r3, 8011264 <_strtod_l+0xb6c>
 8011216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011218:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801121c:	d822      	bhi.n	8011264 <_strtod_l+0xb6c>
 801121e:	a32e      	add	r3, pc, #184	; (adr r3, 80112d8 <_strtod_l+0xbe0>)
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	4640      	mov	r0, r8
 8011226:	4649      	mov	r1, r9
 8011228:	f7ef fc72 	bl	8000b10 <__aeabi_dcmple>
 801122c:	b1a0      	cbz	r0, 8011258 <_strtod_l+0xb60>
 801122e:	4649      	mov	r1, r9
 8011230:	4640      	mov	r0, r8
 8011232:	f7ef fcc9 	bl	8000bc8 <__aeabi_d2uiz>
 8011236:	2801      	cmp	r0, #1
 8011238:	bf38      	it	cc
 801123a:	2001      	movcc	r0, #1
 801123c:	f7ef f972 	bl	8000524 <__aeabi_ui2d>
 8011240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011242:	4680      	mov	r8, r0
 8011244:	4689      	mov	r9, r1
 8011246:	bb23      	cbnz	r3, 8011292 <_strtod_l+0xb9a>
 8011248:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801124c:	9010      	str	r0, [sp, #64]	; 0x40
 801124e:	9311      	str	r3, [sp, #68]	; 0x44
 8011250:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011254:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801125a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801125c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	9309      	str	r3, [sp, #36]	; 0x24
 8011264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011268:	eeb0 0a48 	vmov.f32	s0, s16
 801126c:	eef0 0a68 	vmov.f32	s1, s17
 8011270:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011274:	f001 fae4 	bl	8012840 <__ulp>
 8011278:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801127c:	ec53 2b10 	vmov	r2, r3, d0
 8011280:	f7ef f9ca 	bl	8000618 <__aeabi_dmul>
 8011284:	ec53 2b18 	vmov	r2, r3, d8
 8011288:	f7ef f810 	bl	80002ac <__adddf3>
 801128c:	4682      	mov	sl, r0
 801128e:	468b      	mov	fp, r1
 8011290:	e78d      	b.n	80111ae <_strtod_l+0xab6>
 8011292:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011296:	e7db      	b.n	8011250 <_strtod_l+0xb58>
 8011298:	a311      	add	r3, pc, #68	; (adr r3, 80112e0 <_strtod_l+0xbe8>)
 801129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129e:	f7ef fc2d 	bl	8000afc <__aeabi_dcmplt>
 80112a2:	e7b2      	b.n	801120a <_strtod_l+0xb12>
 80112a4:	2300      	movs	r3, #0
 80112a6:	930a      	str	r3, [sp, #40]	; 0x28
 80112a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80112aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112ac:	6013      	str	r3, [r2, #0]
 80112ae:	f7ff ba6b 	b.w	8010788 <_strtod_l+0x90>
 80112b2:	2a65      	cmp	r2, #101	; 0x65
 80112b4:	f43f ab5f 	beq.w	8010976 <_strtod_l+0x27e>
 80112b8:	2a45      	cmp	r2, #69	; 0x45
 80112ba:	f43f ab5c 	beq.w	8010976 <_strtod_l+0x27e>
 80112be:	2301      	movs	r3, #1
 80112c0:	f7ff bb94 	b.w	80109ec <_strtod_l+0x2f4>
 80112c4:	f3af 8000 	nop.w
 80112c8:	94a03595 	.word	0x94a03595
 80112cc:	3fdfffff 	.word	0x3fdfffff
 80112d0:	35afe535 	.word	0x35afe535
 80112d4:	3fe00000 	.word	0x3fe00000
 80112d8:	ffc00000 	.word	0xffc00000
 80112dc:	41dfffff 	.word	0x41dfffff
 80112e0:	94a03595 	.word	0x94a03595
 80112e4:	3fcfffff 	.word	0x3fcfffff
 80112e8:	3ff00000 	.word	0x3ff00000
 80112ec:	7ff00000 	.word	0x7ff00000
 80112f0:	7fe00000 	.word	0x7fe00000
 80112f4:	7c9fffff 	.word	0x7c9fffff
 80112f8:	3fe00000 	.word	0x3fe00000
 80112fc:	bff00000 	.word	0xbff00000
 8011300:	7fefffff 	.word	0x7fefffff

08011304 <_strtod_r>:
 8011304:	4b01      	ldr	r3, [pc, #4]	; (801130c <_strtod_r+0x8>)
 8011306:	f7ff b9f7 	b.w	80106f8 <_strtod_l>
 801130a:	bf00      	nop
 801130c:	20000078 	.word	0x20000078

08011310 <_strtol_l.constprop.0>:
 8011310:	2b01      	cmp	r3, #1
 8011312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011316:	d001      	beq.n	801131c <_strtol_l.constprop.0+0xc>
 8011318:	2b24      	cmp	r3, #36	; 0x24
 801131a:	d906      	bls.n	801132a <_strtol_l.constprop.0+0x1a>
 801131c:	f7fe fd5e 	bl	800fddc <__errno>
 8011320:	2316      	movs	r3, #22
 8011322:	6003      	str	r3, [r0, #0]
 8011324:	2000      	movs	r0, #0
 8011326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011410 <_strtol_l.constprop.0+0x100>
 801132e:	460d      	mov	r5, r1
 8011330:	462e      	mov	r6, r5
 8011332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011336:	f814 700c 	ldrb.w	r7, [r4, ip]
 801133a:	f017 0708 	ands.w	r7, r7, #8
 801133e:	d1f7      	bne.n	8011330 <_strtol_l.constprop.0+0x20>
 8011340:	2c2d      	cmp	r4, #45	; 0x2d
 8011342:	d132      	bne.n	80113aa <_strtol_l.constprop.0+0x9a>
 8011344:	782c      	ldrb	r4, [r5, #0]
 8011346:	2701      	movs	r7, #1
 8011348:	1cb5      	adds	r5, r6, #2
 801134a:	2b00      	cmp	r3, #0
 801134c:	d05b      	beq.n	8011406 <_strtol_l.constprop.0+0xf6>
 801134e:	2b10      	cmp	r3, #16
 8011350:	d109      	bne.n	8011366 <_strtol_l.constprop.0+0x56>
 8011352:	2c30      	cmp	r4, #48	; 0x30
 8011354:	d107      	bne.n	8011366 <_strtol_l.constprop.0+0x56>
 8011356:	782c      	ldrb	r4, [r5, #0]
 8011358:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801135c:	2c58      	cmp	r4, #88	; 0x58
 801135e:	d14d      	bne.n	80113fc <_strtol_l.constprop.0+0xec>
 8011360:	786c      	ldrb	r4, [r5, #1]
 8011362:	2310      	movs	r3, #16
 8011364:	3502      	adds	r5, #2
 8011366:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801136a:	f108 38ff 	add.w	r8, r8, #4294967295
 801136e:	f04f 0c00 	mov.w	ip, #0
 8011372:	fbb8 f9f3 	udiv	r9, r8, r3
 8011376:	4666      	mov	r6, ip
 8011378:	fb03 8a19 	mls	sl, r3, r9, r8
 801137c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011380:	f1be 0f09 	cmp.w	lr, #9
 8011384:	d816      	bhi.n	80113b4 <_strtol_l.constprop.0+0xa4>
 8011386:	4674      	mov	r4, lr
 8011388:	42a3      	cmp	r3, r4
 801138a:	dd24      	ble.n	80113d6 <_strtol_l.constprop.0+0xc6>
 801138c:	f1bc 0f00 	cmp.w	ip, #0
 8011390:	db1e      	blt.n	80113d0 <_strtol_l.constprop.0+0xc0>
 8011392:	45b1      	cmp	r9, r6
 8011394:	d31c      	bcc.n	80113d0 <_strtol_l.constprop.0+0xc0>
 8011396:	d101      	bne.n	801139c <_strtol_l.constprop.0+0x8c>
 8011398:	45a2      	cmp	sl, r4
 801139a:	db19      	blt.n	80113d0 <_strtol_l.constprop.0+0xc0>
 801139c:	fb06 4603 	mla	r6, r6, r3, r4
 80113a0:	f04f 0c01 	mov.w	ip, #1
 80113a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113a8:	e7e8      	b.n	801137c <_strtol_l.constprop.0+0x6c>
 80113aa:	2c2b      	cmp	r4, #43	; 0x2b
 80113ac:	bf04      	itt	eq
 80113ae:	782c      	ldrbeq	r4, [r5, #0]
 80113b0:	1cb5      	addeq	r5, r6, #2
 80113b2:	e7ca      	b.n	801134a <_strtol_l.constprop.0+0x3a>
 80113b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80113b8:	f1be 0f19 	cmp.w	lr, #25
 80113bc:	d801      	bhi.n	80113c2 <_strtol_l.constprop.0+0xb2>
 80113be:	3c37      	subs	r4, #55	; 0x37
 80113c0:	e7e2      	b.n	8011388 <_strtol_l.constprop.0+0x78>
 80113c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80113c6:	f1be 0f19 	cmp.w	lr, #25
 80113ca:	d804      	bhi.n	80113d6 <_strtol_l.constprop.0+0xc6>
 80113cc:	3c57      	subs	r4, #87	; 0x57
 80113ce:	e7db      	b.n	8011388 <_strtol_l.constprop.0+0x78>
 80113d0:	f04f 3cff 	mov.w	ip, #4294967295
 80113d4:	e7e6      	b.n	80113a4 <_strtol_l.constprop.0+0x94>
 80113d6:	f1bc 0f00 	cmp.w	ip, #0
 80113da:	da05      	bge.n	80113e8 <_strtol_l.constprop.0+0xd8>
 80113dc:	2322      	movs	r3, #34	; 0x22
 80113de:	6003      	str	r3, [r0, #0]
 80113e0:	4646      	mov	r6, r8
 80113e2:	b942      	cbnz	r2, 80113f6 <_strtol_l.constprop.0+0xe6>
 80113e4:	4630      	mov	r0, r6
 80113e6:	e79e      	b.n	8011326 <_strtol_l.constprop.0+0x16>
 80113e8:	b107      	cbz	r7, 80113ec <_strtol_l.constprop.0+0xdc>
 80113ea:	4276      	negs	r6, r6
 80113ec:	2a00      	cmp	r2, #0
 80113ee:	d0f9      	beq.n	80113e4 <_strtol_l.constprop.0+0xd4>
 80113f0:	f1bc 0f00 	cmp.w	ip, #0
 80113f4:	d000      	beq.n	80113f8 <_strtol_l.constprop.0+0xe8>
 80113f6:	1e69      	subs	r1, r5, #1
 80113f8:	6011      	str	r1, [r2, #0]
 80113fa:	e7f3      	b.n	80113e4 <_strtol_l.constprop.0+0xd4>
 80113fc:	2430      	movs	r4, #48	; 0x30
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1b1      	bne.n	8011366 <_strtol_l.constprop.0+0x56>
 8011402:	2308      	movs	r3, #8
 8011404:	e7af      	b.n	8011366 <_strtol_l.constprop.0+0x56>
 8011406:	2c30      	cmp	r4, #48	; 0x30
 8011408:	d0a5      	beq.n	8011356 <_strtol_l.constprop.0+0x46>
 801140a:	230a      	movs	r3, #10
 801140c:	e7ab      	b.n	8011366 <_strtol_l.constprop.0+0x56>
 801140e:	bf00      	nop
 8011410:	08014199 	.word	0x08014199

08011414 <_strtol_r>:
 8011414:	f7ff bf7c 	b.w	8011310 <_strtol_l.constprop.0>

08011418 <__swbuf_r>:
 8011418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141a:	460e      	mov	r6, r1
 801141c:	4614      	mov	r4, r2
 801141e:	4605      	mov	r5, r0
 8011420:	b118      	cbz	r0, 801142a <__swbuf_r+0x12>
 8011422:	6983      	ldr	r3, [r0, #24]
 8011424:	b90b      	cbnz	r3, 801142a <__swbuf_r+0x12>
 8011426:	f000 f9f3 	bl	8011810 <__sinit>
 801142a:	4b21      	ldr	r3, [pc, #132]	; (80114b0 <__swbuf_r+0x98>)
 801142c:	429c      	cmp	r4, r3
 801142e:	d12b      	bne.n	8011488 <__swbuf_r+0x70>
 8011430:	686c      	ldr	r4, [r5, #4]
 8011432:	69a3      	ldr	r3, [r4, #24]
 8011434:	60a3      	str	r3, [r4, #8]
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	071a      	lsls	r2, r3, #28
 801143a:	d52f      	bpl.n	801149c <__swbuf_r+0x84>
 801143c:	6923      	ldr	r3, [r4, #16]
 801143e:	b36b      	cbz	r3, 801149c <__swbuf_r+0x84>
 8011440:	6923      	ldr	r3, [r4, #16]
 8011442:	6820      	ldr	r0, [r4, #0]
 8011444:	1ac0      	subs	r0, r0, r3
 8011446:	6963      	ldr	r3, [r4, #20]
 8011448:	b2f6      	uxtb	r6, r6
 801144a:	4283      	cmp	r3, r0
 801144c:	4637      	mov	r7, r6
 801144e:	dc04      	bgt.n	801145a <__swbuf_r+0x42>
 8011450:	4621      	mov	r1, r4
 8011452:	4628      	mov	r0, r5
 8011454:	f000 f948 	bl	80116e8 <_fflush_r>
 8011458:	bb30      	cbnz	r0, 80114a8 <__swbuf_r+0x90>
 801145a:	68a3      	ldr	r3, [r4, #8]
 801145c:	3b01      	subs	r3, #1
 801145e:	60a3      	str	r3, [r4, #8]
 8011460:	6823      	ldr	r3, [r4, #0]
 8011462:	1c5a      	adds	r2, r3, #1
 8011464:	6022      	str	r2, [r4, #0]
 8011466:	701e      	strb	r6, [r3, #0]
 8011468:	6963      	ldr	r3, [r4, #20]
 801146a:	3001      	adds	r0, #1
 801146c:	4283      	cmp	r3, r0
 801146e:	d004      	beq.n	801147a <__swbuf_r+0x62>
 8011470:	89a3      	ldrh	r3, [r4, #12]
 8011472:	07db      	lsls	r3, r3, #31
 8011474:	d506      	bpl.n	8011484 <__swbuf_r+0x6c>
 8011476:	2e0a      	cmp	r6, #10
 8011478:	d104      	bne.n	8011484 <__swbuf_r+0x6c>
 801147a:	4621      	mov	r1, r4
 801147c:	4628      	mov	r0, r5
 801147e:	f000 f933 	bl	80116e8 <_fflush_r>
 8011482:	b988      	cbnz	r0, 80114a8 <__swbuf_r+0x90>
 8011484:	4638      	mov	r0, r7
 8011486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011488:	4b0a      	ldr	r3, [pc, #40]	; (80114b4 <__swbuf_r+0x9c>)
 801148a:	429c      	cmp	r4, r3
 801148c:	d101      	bne.n	8011492 <__swbuf_r+0x7a>
 801148e:	68ac      	ldr	r4, [r5, #8]
 8011490:	e7cf      	b.n	8011432 <__swbuf_r+0x1a>
 8011492:	4b09      	ldr	r3, [pc, #36]	; (80114b8 <__swbuf_r+0xa0>)
 8011494:	429c      	cmp	r4, r3
 8011496:	bf08      	it	eq
 8011498:	68ec      	ldreq	r4, [r5, #12]
 801149a:	e7ca      	b.n	8011432 <__swbuf_r+0x1a>
 801149c:	4621      	mov	r1, r4
 801149e:	4628      	mov	r0, r5
 80114a0:	f000 f81e 	bl	80114e0 <__swsetup_r>
 80114a4:	2800      	cmp	r0, #0
 80114a6:	d0cb      	beq.n	8011440 <__swbuf_r+0x28>
 80114a8:	f04f 37ff 	mov.w	r7, #4294967295
 80114ac:	e7ea      	b.n	8011484 <__swbuf_r+0x6c>
 80114ae:	bf00      	nop
 80114b0:	080142bc 	.word	0x080142bc
 80114b4:	080142dc 	.word	0x080142dc
 80114b8:	0801429c 	.word	0x0801429c

080114bc <_write_r>:
 80114bc:	b538      	push	{r3, r4, r5, lr}
 80114be:	4d07      	ldr	r5, [pc, #28]	; (80114dc <_write_r+0x20>)
 80114c0:	4604      	mov	r4, r0
 80114c2:	4608      	mov	r0, r1
 80114c4:	4611      	mov	r1, r2
 80114c6:	2200      	movs	r2, #0
 80114c8:	602a      	str	r2, [r5, #0]
 80114ca:	461a      	mov	r2, r3
 80114cc:	f7f2 ffa7 	bl	800441e <_write>
 80114d0:	1c43      	adds	r3, r0, #1
 80114d2:	d102      	bne.n	80114da <_write_r+0x1e>
 80114d4:	682b      	ldr	r3, [r5, #0]
 80114d6:	b103      	cbz	r3, 80114da <_write_r+0x1e>
 80114d8:	6023      	str	r3, [r4, #0]
 80114da:	bd38      	pop	{r3, r4, r5, pc}
 80114dc:	2000280c 	.word	0x2000280c

080114e0 <__swsetup_r>:
 80114e0:	4b32      	ldr	r3, [pc, #200]	; (80115ac <__swsetup_r+0xcc>)
 80114e2:	b570      	push	{r4, r5, r6, lr}
 80114e4:	681d      	ldr	r5, [r3, #0]
 80114e6:	4606      	mov	r6, r0
 80114e8:	460c      	mov	r4, r1
 80114ea:	b125      	cbz	r5, 80114f6 <__swsetup_r+0x16>
 80114ec:	69ab      	ldr	r3, [r5, #24]
 80114ee:	b913      	cbnz	r3, 80114f6 <__swsetup_r+0x16>
 80114f0:	4628      	mov	r0, r5
 80114f2:	f000 f98d 	bl	8011810 <__sinit>
 80114f6:	4b2e      	ldr	r3, [pc, #184]	; (80115b0 <__swsetup_r+0xd0>)
 80114f8:	429c      	cmp	r4, r3
 80114fa:	d10f      	bne.n	801151c <__swsetup_r+0x3c>
 80114fc:	686c      	ldr	r4, [r5, #4]
 80114fe:	89a3      	ldrh	r3, [r4, #12]
 8011500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011504:	0719      	lsls	r1, r3, #28
 8011506:	d42c      	bmi.n	8011562 <__swsetup_r+0x82>
 8011508:	06dd      	lsls	r5, r3, #27
 801150a:	d411      	bmi.n	8011530 <__swsetup_r+0x50>
 801150c:	2309      	movs	r3, #9
 801150e:	6033      	str	r3, [r6, #0]
 8011510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011514:	81a3      	strh	r3, [r4, #12]
 8011516:	f04f 30ff 	mov.w	r0, #4294967295
 801151a:	e03e      	b.n	801159a <__swsetup_r+0xba>
 801151c:	4b25      	ldr	r3, [pc, #148]	; (80115b4 <__swsetup_r+0xd4>)
 801151e:	429c      	cmp	r4, r3
 8011520:	d101      	bne.n	8011526 <__swsetup_r+0x46>
 8011522:	68ac      	ldr	r4, [r5, #8]
 8011524:	e7eb      	b.n	80114fe <__swsetup_r+0x1e>
 8011526:	4b24      	ldr	r3, [pc, #144]	; (80115b8 <__swsetup_r+0xd8>)
 8011528:	429c      	cmp	r4, r3
 801152a:	bf08      	it	eq
 801152c:	68ec      	ldreq	r4, [r5, #12]
 801152e:	e7e6      	b.n	80114fe <__swsetup_r+0x1e>
 8011530:	0758      	lsls	r0, r3, #29
 8011532:	d512      	bpl.n	801155a <__swsetup_r+0x7a>
 8011534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011536:	b141      	cbz	r1, 801154a <__swsetup_r+0x6a>
 8011538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801153c:	4299      	cmp	r1, r3
 801153e:	d002      	beq.n	8011546 <__swsetup_r+0x66>
 8011540:	4630      	mov	r0, r6
 8011542:	f7fe fc9b 	bl	800fe7c <_free_r>
 8011546:	2300      	movs	r3, #0
 8011548:	6363      	str	r3, [r4, #52]	; 0x34
 801154a:	89a3      	ldrh	r3, [r4, #12]
 801154c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011550:	81a3      	strh	r3, [r4, #12]
 8011552:	2300      	movs	r3, #0
 8011554:	6063      	str	r3, [r4, #4]
 8011556:	6923      	ldr	r3, [r4, #16]
 8011558:	6023      	str	r3, [r4, #0]
 801155a:	89a3      	ldrh	r3, [r4, #12]
 801155c:	f043 0308 	orr.w	r3, r3, #8
 8011560:	81a3      	strh	r3, [r4, #12]
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	b94b      	cbnz	r3, 801157a <__swsetup_r+0x9a>
 8011566:	89a3      	ldrh	r3, [r4, #12]
 8011568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801156c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011570:	d003      	beq.n	801157a <__swsetup_r+0x9a>
 8011572:	4621      	mov	r1, r4
 8011574:	4630      	mov	r0, r6
 8011576:	f000 fd93 	bl	80120a0 <__smakebuf_r>
 801157a:	89a0      	ldrh	r0, [r4, #12]
 801157c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011580:	f010 0301 	ands.w	r3, r0, #1
 8011584:	d00a      	beq.n	801159c <__swsetup_r+0xbc>
 8011586:	2300      	movs	r3, #0
 8011588:	60a3      	str	r3, [r4, #8]
 801158a:	6963      	ldr	r3, [r4, #20]
 801158c:	425b      	negs	r3, r3
 801158e:	61a3      	str	r3, [r4, #24]
 8011590:	6923      	ldr	r3, [r4, #16]
 8011592:	b943      	cbnz	r3, 80115a6 <__swsetup_r+0xc6>
 8011594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011598:	d1ba      	bne.n	8011510 <__swsetup_r+0x30>
 801159a:	bd70      	pop	{r4, r5, r6, pc}
 801159c:	0781      	lsls	r1, r0, #30
 801159e:	bf58      	it	pl
 80115a0:	6963      	ldrpl	r3, [r4, #20]
 80115a2:	60a3      	str	r3, [r4, #8]
 80115a4:	e7f4      	b.n	8011590 <__swsetup_r+0xb0>
 80115a6:	2000      	movs	r0, #0
 80115a8:	e7f7      	b.n	801159a <__swsetup_r+0xba>
 80115aa:	bf00      	nop
 80115ac:	20000010 	.word	0x20000010
 80115b0:	080142bc 	.word	0x080142bc
 80115b4:	080142dc 	.word	0x080142dc
 80115b8:	0801429c 	.word	0x0801429c

080115bc <_close_r>:
 80115bc:	b538      	push	{r3, r4, r5, lr}
 80115be:	4d06      	ldr	r5, [pc, #24]	; (80115d8 <_close_r+0x1c>)
 80115c0:	2300      	movs	r3, #0
 80115c2:	4604      	mov	r4, r0
 80115c4:	4608      	mov	r0, r1
 80115c6:	602b      	str	r3, [r5, #0]
 80115c8:	f7f2 ff45 	bl	8004456 <_close>
 80115cc:	1c43      	adds	r3, r0, #1
 80115ce:	d102      	bne.n	80115d6 <_close_r+0x1a>
 80115d0:	682b      	ldr	r3, [r5, #0]
 80115d2:	b103      	cbz	r3, 80115d6 <_close_r+0x1a>
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	bd38      	pop	{r3, r4, r5, pc}
 80115d8:	2000280c 	.word	0x2000280c

080115dc <__sflush_r>:
 80115dc:	898a      	ldrh	r2, [r1, #12]
 80115de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e2:	4605      	mov	r5, r0
 80115e4:	0710      	lsls	r0, r2, #28
 80115e6:	460c      	mov	r4, r1
 80115e8:	d458      	bmi.n	801169c <__sflush_r+0xc0>
 80115ea:	684b      	ldr	r3, [r1, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	dc05      	bgt.n	80115fc <__sflush_r+0x20>
 80115f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	dc02      	bgt.n	80115fc <__sflush_r+0x20>
 80115f6:	2000      	movs	r0, #0
 80115f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115fe:	2e00      	cmp	r6, #0
 8011600:	d0f9      	beq.n	80115f6 <__sflush_r+0x1a>
 8011602:	2300      	movs	r3, #0
 8011604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011608:	682f      	ldr	r7, [r5, #0]
 801160a:	602b      	str	r3, [r5, #0]
 801160c:	d032      	beq.n	8011674 <__sflush_r+0x98>
 801160e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011610:	89a3      	ldrh	r3, [r4, #12]
 8011612:	075a      	lsls	r2, r3, #29
 8011614:	d505      	bpl.n	8011622 <__sflush_r+0x46>
 8011616:	6863      	ldr	r3, [r4, #4]
 8011618:	1ac0      	subs	r0, r0, r3
 801161a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801161c:	b10b      	cbz	r3, 8011622 <__sflush_r+0x46>
 801161e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011620:	1ac0      	subs	r0, r0, r3
 8011622:	2300      	movs	r3, #0
 8011624:	4602      	mov	r2, r0
 8011626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011628:	6a21      	ldr	r1, [r4, #32]
 801162a:	4628      	mov	r0, r5
 801162c:	47b0      	blx	r6
 801162e:	1c43      	adds	r3, r0, #1
 8011630:	89a3      	ldrh	r3, [r4, #12]
 8011632:	d106      	bne.n	8011642 <__sflush_r+0x66>
 8011634:	6829      	ldr	r1, [r5, #0]
 8011636:	291d      	cmp	r1, #29
 8011638:	d82c      	bhi.n	8011694 <__sflush_r+0xb8>
 801163a:	4a2a      	ldr	r2, [pc, #168]	; (80116e4 <__sflush_r+0x108>)
 801163c:	40ca      	lsrs	r2, r1
 801163e:	07d6      	lsls	r6, r2, #31
 8011640:	d528      	bpl.n	8011694 <__sflush_r+0xb8>
 8011642:	2200      	movs	r2, #0
 8011644:	6062      	str	r2, [r4, #4]
 8011646:	04d9      	lsls	r1, r3, #19
 8011648:	6922      	ldr	r2, [r4, #16]
 801164a:	6022      	str	r2, [r4, #0]
 801164c:	d504      	bpl.n	8011658 <__sflush_r+0x7c>
 801164e:	1c42      	adds	r2, r0, #1
 8011650:	d101      	bne.n	8011656 <__sflush_r+0x7a>
 8011652:	682b      	ldr	r3, [r5, #0]
 8011654:	b903      	cbnz	r3, 8011658 <__sflush_r+0x7c>
 8011656:	6560      	str	r0, [r4, #84]	; 0x54
 8011658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801165a:	602f      	str	r7, [r5, #0]
 801165c:	2900      	cmp	r1, #0
 801165e:	d0ca      	beq.n	80115f6 <__sflush_r+0x1a>
 8011660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011664:	4299      	cmp	r1, r3
 8011666:	d002      	beq.n	801166e <__sflush_r+0x92>
 8011668:	4628      	mov	r0, r5
 801166a:	f7fe fc07 	bl	800fe7c <_free_r>
 801166e:	2000      	movs	r0, #0
 8011670:	6360      	str	r0, [r4, #52]	; 0x34
 8011672:	e7c1      	b.n	80115f8 <__sflush_r+0x1c>
 8011674:	6a21      	ldr	r1, [r4, #32]
 8011676:	2301      	movs	r3, #1
 8011678:	4628      	mov	r0, r5
 801167a:	47b0      	blx	r6
 801167c:	1c41      	adds	r1, r0, #1
 801167e:	d1c7      	bne.n	8011610 <__sflush_r+0x34>
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d0c4      	beq.n	8011610 <__sflush_r+0x34>
 8011686:	2b1d      	cmp	r3, #29
 8011688:	d001      	beq.n	801168e <__sflush_r+0xb2>
 801168a:	2b16      	cmp	r3, #22
 801168c:	d101      	bne.n	8011692 <__sflush_r+0xb6>
 801168e:	602f      	str	r7, [r5, #0]
 8011690:	e7b1      	b.n	80115f6 <__sflush_r+0x1a>
 8011692:	89a3      	ldrh	r3, [r4, #12]
 8011694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011698:	81a3      	strh	r3, [r4, #12]
 801169a:	e7ad      	b.n	80115f8 <__sflush_r+0x1c>
 801169c:	690f      	ldr	r7, [r1, #16]
 801169e:	2f00      	cmp	r7, #0
 80116a0:	d0a9      	beq.n	80115f6 <__sflush_r+0x1a>
 80116a2:	0793      	lsls	r3, r2, #30
 80116a4:	680e      	ldr	r6, [r1, #0]
 80116a6:	bf08      	it	eq
 80116a8:	694b      	ldreq	r3, [r1, #20]
 80116aa:	600f      	str	r7, [r1, #0]
 80116ac:	bf18      	it	ne
 80116ae:	2300      	movne	r3, #0
 80116b0:	eba6 0807 	sub.w	r8, r6, r7
 80116b4:	608b      	str	r3, [r1, #8]
 80116b6:	f1b8 0f00 	cmp.w	r8, #0
 80116ba:	dd9c      	ble.n	80115f6 <__sflush_r+0x1a>
 80116bc:	6a21      	ldr	r1, [r4, #32]
 80116be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116c0:	4643      	mov	r3, r8
 80116c2:	463a      	mov	r2, r7
 80116c4:	4628      	mov	r0, r5
 80116c6:	47b0      	blx	r6
 80116c8:	2800      	cmp	r0, #0
 80116ca:	dc06      	bgt.n	80116da <__sflush_r+0xfe>
 80116cc:	89a3      	ldrh	r3, [r4, #12]
 80116ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116d2:	81a3      	strh	r3, [r4, #12]
 80116d4:	f04f 30ff 	mov.w	r0, #4294967295
 80116d8:	e78e      	b.n	80115f8 <__sflush_r+0x1c>
 80116da:	4407      	add	r7, r0
 80116dc:	eba8 0800 	sub.w	r8, r8, r0
 80116e0:	e7e9      	b.n	80116b6 <__sflush_r+0xda>
 80116e2:	bf00      	nop
 80116e4:	20400001 	.word	0x20400001

080116e8 <_fflush_r>:
 80116e8:	b538      	push	{r3, r4, r5, lr}
 80116ea:	690b      	ldr	r3, [r1, #16]
 80116ec:	4605      	mov	r5, r0
 80116ee:	460c      	mov	r4, r1
 80116f0:	b913      	cbnz	r3, 80116f8 <_fflush_r+0x10>
 80116f2:	2500      	movs	r5, #0
 80116f4:	4628      	mov	r0, r5
 80116f6:	bd38      	pop	{r3, r4, r5, pc}
 80116f8:	b118      	cbz	r0, 8011702 <_fflush_r+0x1a>
 80116fa:	6983      	ldr	r3, [r0, #24]
 80116fc:	b90b      	cbnz	r3, 8011702 <_fflush_r+0x1a>
 80116fe:	f000 f887 	bl	8011810 <__sinit>
 8011702:	4b14      	ldr	r3, [pc, #80]	; (8011754 <_fflush_r+0x6c>)
 8011704:	429c      	cmp	r4, r3
 8011706:	d11b      	bne.n	8011740 <_fflush_r+0x58>
 8011708:	686c      	ldr	r4, [r5, #4]
 801170a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d0ef      	beq.n	80116f2 <_fflush_r+0xa>
 8011712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011714:	07d0      	lsls	r0, r2, #31
 8011716:	d404      	bmi.n	8011722 <_fflush_r+0x3a>
 8011718:	0599      	lsls	r1, r3, #22
 801171a:	d402      	bmi.n	8011722 <_fflush_r+0x3a>
 801171c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801171e:	f000 fc84 	bl	801202a <__retarget_lock_acquire_recursive>
 8011722:	4628      	mov	r0, r5
 8011724:	4621      	mov	r1, r4
 8011726:	f7ff ff59 	bl	80115dc <__sflush_r>
 801172a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801172c:	07da      	lsls	r2, r3, #31
 801172e:	4605      	mov	r5, r0
 8011730:	d4e0      	bmi.n	80116f4 <_fflush_r+0xc>
 8011732:	89a3      	ldrh	r3, [r4, #12]
 8011734:	059b      	lsls	r3, r3, #22
 8011736:	d4dd      	bmi.n	80116f4 <_fflush_r+0xc>
 8011738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801173a:	f000 fc77 	bl	801202c <__retarget_lock_release_recursive>
 801173e:	e7d9      	b.n	80116f4 <_fflush_r+0xc>
 8011740:	4b05      	ldr	r3, [pc, #20]	; (8011758 <_fflush_r+0x70>)
 8011742:	429c      	cmp	r4, r3
 8011744:	d101      	bne.n	801174a <_fflush_r+0x62>
 8011746:	68ac      	ldr	r4, [r5, #8]
 8011748:	e7df      	b.n	801170a <_fflush_r+0x22>
 801174a:	4b04      	ldr	r3, [pc, #16]	; (801175c <_fflush_r+0x74>)
 801174c:	429c      	cmp	r4, r3
 801174e:	bf08      	it	eq
 8011750:	68ec      	ldreq	r4, [r5, #12]
 8011752:	e7da      	b.n	801170a <_fflush_r+0x22>
 8011754:	080142bc 	.word	0x080142bc
 8011758:	080142dc 	.word	0x080142dc
 801175c:	0801429c 	.word	0x0801429c

08011760 <std>:
 8011760:	2300      	movs	r3, #0
 8011762:	b510      	push	{r4, lr}
 8011764:	4604      	mov	r4, r0
 8011766:	e9c0 3300 	strd	r3, r3, [r0]
 801176a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801176e:	6083      	str	r3, [r0, #8]
 8011770:	8181      	strh	r1, [r0, #12]
 8011772:	6643      	str	r3, [r0, #100]	; 0x64
 8011774:	81c2      	strh	r2, [r0, #14]
 8011776:	6183      	str	r3, [r0, #24]
 8011778:	4619      	mov	r1, r3
 801177a:	2208      	movs	r2, #8
 801177c:	305c      	adds	r0, #92	; 0x5c
 801177e:	f7fe fb75 	bl	800fe6c <memset>
 8011782:	4b05      	ldr	r3, [pc, #20]	; (8011798 <std+0x38>)
 8011784:	6263      	str	r3, [r4, #36]	; 0x24
 8011786:	4b05      	ldr	r3, [pc, #20]	; (801179c <std+0x3c>)
 8011788:	62a3      	str	r3, [r4, #40]	; 0x28
 801178a:	4b05      	ldr	r3, [pc, #20]	; (80117a0 <std+0x40>)
 801178c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801178e:	4b05      	ldr	r3, [pc, #20]	; (80117a4 <std+0x44>)
 8011790:	6224      	str	r4, [r4, #32]
 8011792:	6323      	str	r3, [r4, #48]	; 0x30
 8011794:	bd10      	pop	{r4, pc}
 8011796:	bf00      	nop
 8011798:	0801060d 	.word	0x0801060d
 801179c:	08010633 	.word	0x08010633
 80117a0:	0801066b 	.word	0x0801066b
 80117a4:	0801068f 	.word	0x0801068f

080117a8 <_cleanup_r>:
 80117a8:	4901      	ldr	r1, [pc, #4]	; (80117b0 <_cleanup_r+0x8>)
 80117aa:	f000 b8af 	b.w	801190c <_fwalk_reent>
 80117ae:	bf00      	nop
 80117b0:	080116e9 	.word	0x080116e9

080117b4 <__sfmoreglue>:
 80117b4:	b570      	push	{r4, r5, r6, lr}
 80117b6:	2268      	movs	r2, #104	; 0x68
 80117b8:	1e4d      	subs	r5, r1, #1
 80117ba:	4355      	muls	r5, r2
 80117bc:	460e      	mov	r6, r1
 80117be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117c2:	f7fe fbc7 	bl	800ff54 <_malloc_r>
 80117c6:	4604      	mov	r4, r0
 80117c8:	b140      	cbz	r0, 80117dc <__sfmoreglue+0x28>
 80117ca:	2100      	movs	r1, #0
 80117cc:	e9c0 1600 	strd	r1, r6, [r0]
 80117d0:	300c      	adds	r0, #12
 80117d2:	60a0      	str	r0, [r4, #8]
 80117d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117d8:	f7fe fb48 	bl	800fe6c <memset>
 80117dc:	4620      	mov	r0, r4
 80117de:	bd70      	pop	{r4, r5, r6, pc}

080117e0 <__sfp_lock_acquire>:
 80117e0:	4801      	ldr	r0, [pc, #4]	; (80117e8 <__sfp_lock_acquire+0x8>)
 80117e2:	f000 bc22 	b.w	801202a <__retarget_lock_acquire_recursive>
 80117e6:	bf00      	nop
 80117e8:	20002809 	.word	0x20002809

080117ec <__sfp_lock_release>:
 80117ec:	4801      	ldr	r0, [pc, #4]	; (80117f4 <__sfp_lock_release+0x8>)
 80117ee:	f000 bc1d 	b.w	801202c <__retarget_lock_release_recursive>
 80117f2:	bf00      	nop
 80117f4:	20002809 	.word	0x20002809

080117f8 <__sinit_lock_acquire>:
 80117f8:	4801      	ldr	r0, [pc, #4]	; (8011800 <__sinit_lock_acquire+0x8>)
 80117fa:	f000 bc16 	b.w	801202a <__retarget_lock_acquire_recursive>
 80117fe:	bf00      	nop
 8011800:	2000280a 	.word	0x2000280a

08011804 <__sinit_lock_release>:
 8011804:	4801      	ldr	r0, [pc, #4]	; (801180c <__sinit_lock_release+0x8>)
 8011806:	f000 bc11 	b.w	801202c <__retarget_lock_release_recursive>
 801180a:	bf00      	nop
 801180c:	2000280a 	.word	0x2000280a

08011810 <__sinit>:
 8011810:	b510      	push	{r4, lr}
 8011812:	4604      	mov	r4, r0
 8011814:	f7ff fff0 	bl	80117f8 <__sinit_lock_acquire>
 8011818:	69a3      	ldr	r3, [r4, #24]
 801181a:	b11b      	cbz	r3, 8011824 <__sinit+0x14>
 801181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011820:	f7ff bff0 	b.w	8011804 <__sinit_lock_release>
 8011824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011828:	6523      	str	r3, [r4, #80]	; 0x50
 801182a:	4b13      	ldr	r3, [pc, #76]	; (8011878 <__sinit+0x68>)
 801182c:	4a13      	ldr	r2, [pc, #76]	; (801187c <__sinit+0x6c>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	62a2      	str	r2, [r4, #40]	; 0x28
 8011832:	42a3      	cmp	r3, r4
 8011834:	bf04      	itt	eq
 8011836:	2301      	moveq	r3, #1
 8011838:	61a3      	streq	r3, [r4, #24]
 801183a:	4620      	mov	r0, r4
 801183c:	f000 f820 	bl	8011880 <__sfp>
 8011840:	6060      	str	r0, [r4, #4]
 8011842:	4620      	mov	r0, r4
 8011844:	f000 f81c 	bl	8011880 <__sfp>
 8011848:	60a0      	str	r0, [r4, #8]
 801184a:	4620      	mov	r0, r4
 801184c:	f000 f818 	bl	8011880 <__sfp>
 8011850:	2200      	movs	r2, #0
 8011852:	60e0      	str	r0, [r4, #12]
 8011854:	2104      	movs	r1, #4
 8011856:	6860      	ldr	r0, [r4, #4]
 8011858:	f7ff ff82 	bl	8011760 <std>
 801185c:	68a0      	ldr	r0, [r4, #8]
 801185e:	2201      	movs	r2, #1
 8011860:	2109      	movs	r1, #9
 8011862:	f7ff ff7d 	bl	8011760 <std>
 8011866:	68e0      	ldr	r0, [r4, #12]
 8011868:	2202      	movs	r2, #2
 801186a:	2112      	movs	r1, #18
 801186c:	f7ff ff78 	bl	8011760 <std>
 8011870:	2301      	movs	r3, #1
 8011872:	61a3      	str	r3, [r4, #24]
 8011874:	e7d2      	b.n	801181c <__sinit+0xc>
 8011876:	bf00      	nop
 8011878:	08014130 	.word	0x08014130
 801187c:	080117a9 	.word	0x080117a9

08011880 <__sfp>:
 8011880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011882:	4607      	mov	r7, r0
 8011884:	f7ff ffac 	bl	80117e0 <__sfp_lock_acquire>
 8011888:	4b1e      	ldr	r3, [pc, #120]	; (8011904 <__sfp+0x84>)
 801188a:	681e      	ldr	r6, [r3, #0]
 801188c:	69b3      	ldr	r3, [r6, #24]
 801188e:	b913      	cbnz	r3, 8011896 <__sfp+0x16>
 8011890:	4630      	mov	r0, r6
 8011892:	f7ff ffbd 	bl	8011810 <__sinit>
 8011896:	3648      	adds	r6, #72	; 0x48
 8011898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801189c:	3b01      	subs	r3, #1
 801189e:	d503      	bpl.n	80118a8 <__sfp+0x28>
 80118a0:	6833      	ldr	r3, [r6, #0]
 80118a2:	b30b      	cbz	r3, 80118e8 <__sfp+0x68>
 80118a4:	6836      	ldr	r6, [r6, #0]
 80118a6:	e7f7      	b.n	8011898 <__sfp+0x18>
 80118a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80118ac:	b9d5      	cbnz	r5, 80118e4 <__sfp+0x64>
 80118ae:	4b16      	ldr	r3, [pc, #88]	; (8011908 <__sfp+0x88>)
 80118b0:	60e3      	str	r3, [r4, #12]
 80118b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80118b6:	6665      	str	r5, [r4, #100]	; 0x64
 80118b8:	f000 fbb6 	bl	8012028 <__retarget_lock_init_recursive>
 80118bc:	f7ff ff96 	bl	80117ec <__sfp_lock_release>
 80118c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80118c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80118c8:	6025      	str	r5, [r4, #0]
 80118ca:	61a5      	str	r5, [r4, #24]
 80118cc:	2208      	movs	r2, #8
 80118ce:	4629      	mov	r1, r5
 80118d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118d4:	f7fe faca 	bl	800fe6c <memset>
 80118d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118e0:	4620      	mov	r0, r4
 80118e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e4:	3468      	adds	r4, #104	; 0x68
 80118e6:	e7d9      	b.n	801189c <__sfp+0x1c>
 80118e8:	2104      	movs	r1, #4
 80118ea:	4638      	mov	r0, r7
 80118ec:	f7ff ff62 	bl	80117b4 <__sfmoreglue>
 80118f0:	4604      	mov	r4, r0
 80118f2:	6030      	str	r0, [r6, #0]
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d1d5      	bne.n	80118a4 <__sfp+0x24>
 80118f8:	f7ff ff78 	bl	80117ec <__sfp_lock_release>
 80118fc:	230c      	movs	r3, #12
 80118fe:	603b      	str	r3, [r7, #0]
 8011900:	e7ee      	b.n	80118e0 <__sfp+0x60>
 8011902:	bf00      	nop
 8011904:	08014130 	.word	0x08014130
 8011908:	ffff0001 	.word	0xffff0001

0801190c <_fwalk_reent>:
 801190c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011910:	4606      	mov	r6, r0
 8011912:	4688      	mov	r8, r1
 8011914:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011918:	2700      	movs	r7, #0
 801191a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801191e:	f1b9 0901 	subs.w	r9, r9, #1
 8011922:	d505      	bpl.n	8011930 <_fwalk_reent+0x24>
 8011924:	6824      	ldr	r4, [r4, #0]
 8011926:	2c00      	cmp	r4, #0
 8011928:	d1f7      	bne.n	801191a <_fwalk_reent+0xe>
 801192a:	4638      	mov	r0, r7
 801192c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011930:	89ab      	ldrh	r3, [r5, #12]
 8011932:	2b01      	cmp	r3, #1
 8011934:	d907      	bls.n	8011946 <_fwalk_reent+0x3a>
 8011936:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801193a:	3301      	adds	r3, #1
 801193c:	d003      	beq.n	8011946 <_fwalk_reent+0x3a>
 801193e:	4629      	mov	r1, r5
 8011940:	4630      	mov	r0, r6
 8011942:	47c0      	blx	r8
 8011944:	4307      	orrs	r7, r0
 8011946:	3568      	adds	r5, #104	; 0x68
 8011948:	e7e9      	b.n	801191e <_fwalk_reent+0x12>

0801194a <rshift>:
 801194a:	6903      	ldr	r3, [r0, #16]
 801194c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011954:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011958:	f100 0414 	add.w	r4, r0, #20
 801195c:	dd45      	ble.n	80119ea <rshift+0xa0>
 801195e:	f011 011f 	ands.w	r1, r1, #31
 8011962:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011966:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801196a:	d10c      	bne.n	8011986 <rshift+0x3c>
 801196c:	f100 0710 	add.w	r7, r0, #16
 8011970:	4629      	mov	r1, r5
 8011972:	42b1      	cmp	r1, r6
 8011974:	d334      	bcc.n	80119e0 <rshift+0x96>
 8011976:	1a9b      	subs	r3, r3, r2
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	1eea      	subs	r2, r5, #3
 801197c:	4296      	cmp	r6, r2
 801197e:	bf38      	it	cc
 8011980:	2300      	movcc	r3, #0
 8011982:	4423      	add	r3, r4
 8011984:	e015      	b.n	80119b2 <rshift+0x68>
 8011986:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801198a:	f1c1 0820 	rsb	r8, r1, #32
 801198e:	40cf      	lsrs	r7, r1
 8011990:	f105 0e04 	add.w	lr, r5, #4
 8011994:	46a1      	mov	r9, r4
 8011996:	4576      	cmp	r6, lr
 8011998:	46f4      	mov	ip, lr
 801199a:	d815      	bhi.n	80119c8 <rshift+0x7e>
 801199c:	1a9a      	subs	r2, r3, r2
 801199e:	0092      	lsls	r2, r2, #2
 80119a0:	3a04      	subs	r2, #4
 80119a2:	3501      	adds	r5, #1
 80119a4:	42ae      	cmp	r6, r5
 80119a6:	bf38      	it	cc
 80119a8:	2200      	movcc	r2, #0
 80119aa:	18a3      	adds	r3, r4, r2
 80119ac:	50a7      	str	r7, [r4, r2]
 80119ae:	b107      	cbz	r7, 80119b2 <rshift+0x68>
 80119b0:	3304      	adds	r3, #4
 80119b2:	1b1a      	subs	r2, r3, r4
 80119b4:	42a3      	cmp	r3, r4
 80119b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80119ba:	bf08      	it	eq
 80119bc:	2300      	moveq	r3, #0
 80119be:	6102      	str	r2, [r0, #16]
 80119c0:	bf08      	it	eq
 80119c2:	6143      	streq	r3, [r0, #20]
 80119c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119c8:	f8dc c000 	ldr.w	ip, [ip]
 80119cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80119d0:	ea4c 0707 	orr.w	r7, ip, r7
 80119d4:	f849 7b04 	str.w	r7, [r9], #4
 80119d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80119dc:	40cf      	lsrs	r7, r1
 80119de:	e7da      	b.n	8011996 <rshift+0x4c>
 80119e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80119e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80119e8:	e7c3      	b.n	8011972 <rshift+0x28>
 80119ea:	4623      	mov	r3, r4
 80119ec:	e7e1      	b.n	80119b2 <rshift+0x68>

080119ee <__hexdig_fun>:
 80119ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80119f2:	2b09      	cmp	r3, #9
 80119f4:	d802      	bhi.n	80119fc <__hexdig_fun+0xe>
 80119f6:	3820      	subs	r0, #32
 80119f8:	b2c0      	uxtb	r0, r0
 80119fa:	4770      	bx	lr
 80119fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011a00:	2b05      	cmp	r3, #5
 8011a02:	d801      	bhi.n	8011a08 <__hexdig_fun+0x1a>
 8011a04:	3847      	subs	r0, #71	; 0x47
 8011a06:	e7f7      	b.n	80119f8 <__hexdig_fun+0xa>
 8011a08:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011a0c:	2b05      	cmp	r3, #5
 8011a0e:	d801      	bhi.n	8011a14 <__hexdig_fun+0x26>
 8011a10:	3827      	subs	r0, #39	; 0x27
 8011a12:	e7f1      	b.n	80119f8 <__hexdig_fun+0xa>
 8011a14:	2000      	movs	r0, #0
 8011a16:	4770      	bx	lr

08011a18 <__gethex>:
 8011a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a1c:	ed2d 8b02 	vpush	{d8}
 8011a20:	b089      	sub	sp, #36	; 0x24
 8011a22:	ee08 0a10 	vmov	s16, r0
 8011a26:	9304      	str	r3, [sp, #16]
 8011a28:	4bb4      	ldr	r3, [pc, #720]	; (8011cfc <__gethex+0x2e4>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	9301      	str	r3, [sp, #4]
 8011a2e:	4618      	mov	r0, r3
 8011a30:	468b      	mov	fp, r1
 8011a32:	4690      	mov	r8, r2
 8011a34:	f7ee fbd6 	bl	80001e4 <strlen>
 8011a38:	9b01      	ldr	r3, [sp, #4]
 8011a3a:	f8db 2000 	ldr.w	r2, [fp]
 8011a3e:	4403      	add	r3, r0
 8011a40:	4682      	mov	sl, r0
 8011a42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011a46:	9305      	str	r3, [sp, #20]
 8011a48:	1c93      	adds	r3, r2, #2
 8011a4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011a4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011a52:	32fe      	adds	r2, #254	; 0xfe
 8011a54:	18d1      	adds	r1, r2, r3
 8011a56:	461f      	mov	r7, r3
 8011a58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011a5c:	9100      	str	r1, [sp, #0]
 8011a5e:	2830      	cmp	r0, #48	; 0x30
 8011a60:	d0f8      	beq.n	8011a54 <__gethex+0x3c>
 8011a62:	f7ff ffc4 	bl	80119ee <__hexdig_fun>
 8011a66:	4604      	mov	r4, r0
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	d13a      	bne.n	8011ae2 <__gethex+0xca>
 8011a6c:	9901      	ldr	r1, [sp, #4]
 8011a6e:	4652      	mov	r2, sl
 8011a70:	4638      	mov	r0, r7
 8011a72:	f7fe fe10 	bl	8010696 <strncmp>
 8011a76:	4605      	mov	r5, r0
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d168      	bne.n	8011b4e <__gethex+0x136>
 8011a7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011a80:	eb07 060a 	add.w	r6, r7, sl
 8011a84:	f7ff ffb3 	bl	80119ee <__hexdig_fun>
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	d062      	beq.n	8011b52 <__gethex+0x13a>
 8011a8c:	4633      	mov	r3, r6
 8011a8e:	7818      	ldrb	r0, [r3, #0]
 8011a90:	2830      	cmp	r0, #48	; 0x30
 8011a92:	461f      	mov	r7, r3
 8011a94:	f103 0301 	add.w	r3, r3, #1
 8011a98:	d0f9      	beq.n	8011a8e <__gethex+0x76>
 8011a9a:	f7ff ffa8 	bl	80119ee <__hexdig_fun>
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	fab0 f480 	clz	r4, r0
 8011aa4:	0964      	lsrs	r4, r4, #5
 8011aa6:	4635      	mov	r5, r6
 8011aa8:	9300      	str	r3, [sp, #0]
 8011aaa:	463a      	mov	r2, r7
 8011aac:	4616      	mov	r6, r2
 8011aae:	3201      	adds	r2, #1
 8011ab0:	7830      	ldrb	r0, [r6, #0]
 8011ab2:	f7ff ff9c 	bl	80119ee <__hexdig_fun>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	d1f8      	bne.n	8011aac <__gethex+0x94>
 8011aba:	9901      	ldr	r1, [sp, #4]
 8011abc:	4652      	mov	r2, sl
 8011abe:	4630      	mov	r0, r6
 8011ac0:	f7fe fde9 	bl	8010696 <strncmp>
 8011ac4:	b980      	cbnz	r0, 8011ae8 <__gethex+0xd0>
 8011ac6:	b94d      	cbnz	r5, 8011adc <__gethex+0xc4>
 8011ac8:	eb06 050a 	add.w	r5, r6, sl
 8011acc:	462a      	mov	r2, r5
 8011ace:	4616      	mov	r6, r2
 8011ad0:	3201      	adds	r2, #1
 8011ad2:	7830      	ldrb	r0, [r6, #0]
 8011ad4:	f7ff ff8b 	bl	80119ee <__hexdig_fun>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d1f8      	bne.n	8011ace <__gethex+0xb6>
 8011adc:	1bad      	subs	r5, r5, r6
 8011ade:	00ad      	lsls	r5, r5, #2
 8011ae0:	e004      	b.n	8011aec <__gethex+0xd4>
 8011ae2:	2400      	movs	r4, #0
 8011ae4:	4625      	mov	r5, r4
 8011ae6:	e7e0      	b.n	8011aaa <__gethex+0x92>
 8011ae8:	2d00      	cmp	r5, #0
 8011aea:	d1f7      	bne.n	8011adc <__gethex+0xc4>
 8011aec:	7833      	ldrb	r3, [r6, #0]
 8011aee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011af2:	2b50      	cmp	r3, #80	; 0x50
 8011af4:	d13b      	bne.n	8011b6e <__gethex+0x156>
 8011af6:	7873      	ldrb	r3, [r6, #1]
 8011af8:	2b2b      	cmp	r3, #43	; 0x2b
 8011afa:	d02c      	beq.n	8011b56 <__gethex+0x13e>
 8011afc:	2b2d      	cmp	r3, #45	; 0x2d
 8011afe:	d02e      	beq.n	8011b5e <__gethex+0x146>
 8011b00:	1c71      	adds	r1, r6, #1
 8011b02:	f04f 0900 	mov.w	r9, #0
 8011b06:	7808      	ldrb	r0, [r1, #0]
 8011b08:	f7ff ff71 	bl	80119ee <__hexdig_fun>
 8011b0c:	1e43      	subs	r3, r0, #1
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	2b18      	cmp	r3, #24
 8011b12:	d82c      	bhi.n	8011b6e <__gethex+0x156>
 8011b14:	f1a0 0210 	sub.w	r2, r0, #16
 8011b18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b1c:	f7ff ff67 	bl	80119ee <__hexdig_fun>
 8011b20:	1e43      	subs	r3, r0, #1
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	2b18      	cmp	r3, #24
 8011b26:	d91d      	bls.n	8011b64 <__gethex+0x14c>
 8011b28:	f1b9 0f00 	cmp.w	r9, #0
 8011b2c:	d000      	beq.n	8011b30 <__gethex+0x118>
 8011b2e:	4252      	negs	r2, r2
 8011b30:	4415      	add	r5, r2
 8011b32:	f8cb 1000 	str.w	r1, [fp]
 8011b36:	b1e4      	cbz	r4, 8011b72 <__gethex+0x15a>
 8011b38:	9b00      	ldr	r3, [sp, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	bf14      	ite	ne
 8011b3e:	2700      	movne	r7, #0
 8011b40:	2706      	moveq	r7, #6
 8011b42:	4638      	mov	r0, r7
 8011b44:	b009      	add	sp, #36	; 0x24
 8011b46:	ecbd 8b02 	vpop	{d8}
 8011b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b4e:	463e      	mov	r6, r7
 8011b50:	4625      	mov	r5, r4
 8011b52:	2401      	movs	r4, #1
 8011b54:	e7ca      	b.n	8011aec <__gethex+0xd4>
 8011b56:	f04f 0900 	mov.w	r9, #0
 8011b5a:	1cb1      	adds	r1, r6, #2
 8011b5c:	e7d3      	b.n	8011b06 <__gethex+0xee>
 8011b5e:	f04f 0901 	mov.w	r9, #1
 8011b62:	e7fa      	b.n	8011b5a <__gethex+0x142>
 8011b64:	230a      	movs	r3, #10
 8011b66:	fb03 0202 	mla	r2, r3, r2, r0
 8011b6a:	3a10      	subs	r2, #16
 8011b6c:	e7d4      	b.n	8011b18 <__gethex+0x100>
 8011b6e:	4631      	mov	r1, r6
 8011b70:	e7df      	b.n	8011b32 <__gethex+0x11a>
 8011b72:	1bf3      	subs	r3, r6, r7
 8011b74:	3b01      	subs	r3, #1
 8011b76:	4621      	mov	r1, r4
 8011b78:	2b07      	cmp	r3, #7
 8011b7a:	dc0b      	bgt.n	8011b94 <__gethex+0x17c>
 8011b7c:	ee18 0a10 	vmov	r0, s16
 8011b80:	f000 faec 	bl	801215c <_Balloc>
 8011b84:	4604      	mov	r4, r0
 8011b86:	b940      	cbnz	r0, 8011b9a <__gethex+0x182>
 8011b88:	4b5d      	ldr	r3, [pc, #372]	; (8011d00 <__gethex+0x2e8>)
 8011b8a:	4602      	mov	r2, r0
 8011b8c:	21de      	movs	r1, #222	; 0xde
 8011b8e:	485d      	ldr	r0, [pc, #372]	; (8011d04 <__gethex+0x2ec>)
 8011b90:	f001 fede 	bl	8013950 <__assert_func>
 8011b94:	3101      	adds	r1, #1
 8011b96:	105b      	asrs	r3, r3, #1
 8011b98:	e7ee      	b.n	8011b78 <__gethex+0x160>
 8011b9a:	f100 0914 	add.w	r9, r0, #20
 8011b9e:	f04f 0b00 	mov.w	fp, #0
 8011ba2:	f1ca 0301 	rsb	r3, sl, #1
 8011ba6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011baa:	f8cd b000 	str.w	fp, [sp]
 8011bae:	9306      	str	r3, [sp, #24]
 8011bb0:	42b7      	cmp	r7, r6
 8011bb2:	d340      	bcc.n	8011c36 <__gethex+0x21e>
 8011bb4:	9802      	ldr	r0, [sp, #8]
 8011bb6:	9b00      	ldr	r3, [sp, #0]
 8011bb8:	f840 3b04 	str.w	r3, [r0], #4
 8011bbc:	eba0 0009 	sub.w	r0, r0, r9
 8011bc0:	1080      	asrs	r0, r0, #2
 8011bc2:	0146      	lsls	r6, r0, #5
 8011bc4:	6120      	str	r0, [r4, #16]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 fbba 	bl	8012340 <__hi0bits>
 8011bcc:	1a30      	subs	r0, r6, r0
 8011bce:	f8d8 6000 	ldr.w	r6, [r8]
 8011bd2:	42b0      	cmp	r0, r6
 8011bd4:	dd63      	ble.n	8011c9e <__gethex+0x286>
 8011bd6:	1b87      	subs	r7, r0, r6
 8011bd8:	4639      	mov	r1, r7
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f000 ff5e 	bl	8012a9c <__any_on>
 8011be0:	4682      	mov	sl, r0
 8011be2:	b1a8      	cbz	r0, 8011c10 <__gethex+0x1f8>
 8011be4:	1e7b      	subs	r3, r7, #1
 8011be6:	1159      	asrs	r1, r3, #5
 8011be8:	f003 021f 	and.w	r2, r3, #31
 8011bec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011bf0:	f04f 0a01 	mov.w	sl, #1
 8011bf4:	fa0a f202 	lsl.w	r2, sl, r2
 8011bf8:	420a      	tst	r2, r1
 8011bfa:	d009      	beq.n	8011c10 <__gethex+0x1f8>
 8011bfc:	4553      	cmp	r3, sl
 8011bfe:	dd05      	ble.n	8011c0c <__gethex+0x1f4>
 8011c00:	1eb9      	subs	r1, r7, #2
 8011c02:	4620      	mov	r0, r4
 8011c04:	f000 ff4a 	bl	8012a9c <__any_on>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d145      	bne.n	8011c98 <__gethex+0x280>
 8011c0c:	f04f 0a02 	mov.w	sl, #2
 8011c10:	4639      	mov	r1, r7
 8011c12:	4620      	mov	r0, r4
 8011c14:	f7ff fe99 	bl	801194a <rshift>
 8011c18:	443d      	add	r5, r7
 8011c1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c1e:	42ab      	cmp	r3, r5
 8011c20:	da4c      	bge.n	8011cbc <__gethex+0x2a4>
 8011c22:	ee18 0a10 	vmov	r0, s16
 8011c26:	4621      	mov	r1, r4
 8011c28:	f000 fad8 	bl	80121dc <_Bfree>
 8011c2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c2e:	2300      	movs	r3, #0
 8011c30:	6013      	str	r3, [r2, #0]
 8011c32:	27a3      	movs	r7, #163	; 0xa3
 8011c34:	e785      	b.n	8011b42 <__gethex+0x12a>
 8011c36:	1e73      	subs	r3, r6, #1
 8011c38:	9a05      	ldr	r2, [sp, #20]
 8011c3a:	9303      	str	r3, [sp, #12]
 8011c3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d019      	beq.n	8011c78 <__gethex+0x260>
 8011c44:	f1bb 0f20 	cmp.w	fp, #32
 8011c48:	d107      	bne.n	8011c5a <__gethex+0x242>
 8011c4a:	9b02      	ldr	r3, [sp, #8]
 8011c4c:	9a00      	ldr	r2, [sp, #0]
 8011c4e:	f843 2b04 	str.w	r2, [r3], #4
 8011c52:	9302      	str	r3, [sp, #8]
 8011c54:	2300      	movs	r3, #0
 8011c56:	9300      	str	r3, [sp, #0]
 8011c58:	469b      	mov	fp, r3
 8011c5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011c5e:	f7ff fec6 	bl	80119ee <__hexdig_fun>
 8011c62:	9b00      	ldr	r3, [sp, #0]
 8011c64:	f000 000f 	and.w	r0, r0, #15
 8011c68:	fa00 f00b 	lsl.w	r0, r0, fp
 8011c6c:	4303      	orrs	r3, r0
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	f10b 0b04 	add.w	fp, fp, #4
 8011c74:	9b03      	ldr	r3, [sp, #12]
 8011c76:	e00d      	b.n	8011c94 <__gethex+0x27c>
 8011c78:	9b03      	ldr	r3, [sp, #12]
 8011c7a:	9a06      	ldr	r2, [sp, #24]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	42bb      	cmp	r3, r7
 8011c80:	d3e0      	bcc.n	8011c44 <__gethex+0x22c>
 8011c82:	4618      	mov	r0, r3
 8011c84:	9901      	ldr	r1, [sp, #4]
 8011c86:	9307      	str	r3, [sp, #28]
 8011c88:	4652      	mov	r2, sl
 8011c8a:	f7fe fd04 	bl	8010696 <strncmp>
 8011c8e:	9b07      	ldr	r3, [sp, #28]
 8011c90:	2800      	cmp	r0, #0
 8011c92:	d1d7      	bne.n	8011c44 <__gethex+0x22c>
 8011c94:	461e      	mov	r6, r3
 8011c96:	e78b      	b.n	8011bb0 <__gethex+0x198>
 8011c98:	f04f 0a03 	mov.w	sl, #3
 8011c9c:	e7b8      	b.n	8011c10 <__gethex+0x1f8>
 8011c9e:	da0a      	bge.n	8011cb6 <__gethex+0x29e>
 8011ca0:	1a37      	subs	r7, r6, r0
 8011ca2:	4621      	mov	r1, r4
 8011ca4:	ee18 0a10 	vmov	r0, s16
 8011ca8:	463a      	mov	r2, r7
 8011caa:	f000 fcb3 	bl	8012614 <__lshift>
 8011cae:	1bed      	subs	r5, r5, r7
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	f100 0914 	add.w	r9, r0, #20
 8011cb6:	f04f 0a00 	mov.w	sl, #0
 8011cba:	e7ae      	b.n	8011c1a <__gethex+0x202>
 8011cbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011cc0:	42a8      	cmp	r0, r5
 8011cc2:	dd72      	ble.n	8011daa <__gethex+0x392>
 8011cc4:	1b45      	subs	r5, r0, r5
 8011cc6:	42ae      	cmp	r6, r5
 8011cc8:	dc36      	bgt.n	8011d38 <__gethex+0x320>
 8011cca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011cce:	2b02      	cmp	r3, #2
 8011cd0:	d02a      	beq.n	8011d28 <__gethex+0x310>
 8011cd2:	2b03      	cmp	r3, #3
 8011cd4:	d02c      	beq.n	8011d30 <__gethex+0x318>
 8011cd6:	2b01      	cmp	r3, #1
 8011cd8:	d11c      	bne.n	8011d14 <__gethex+0x2fc>
 8011cda:	42ae      	cmp	r6, r5
 8011cdc:	d11a      	bne.n	8011d14 <__gethex+0x2fc>
 8011cde:	2e01      	cmp	r6, #1
 8011ce0:	d112      	bne.n	8011d08 <__gethex+0x2f0>
 8011ce2:	9a04      	ldr	r2, [sp, #16]
 8011ce4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011ce8:	6013      	str	r3, [r2, #0]
 8011cea:	2301      	movs	r3, #1
 8011cec:	6123      	str	r3, [r4, #16]
 8011cee:	f8c9 3000 	str.w	r3, [r9]
 8011cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011cf4:	2762      	movs	r7, #98	; 0x62
 8011cf6:	601c      	str	r4, [r3, #0]
 8011cf8:	e723      	b.n	8011b42 <__gethex+0x12a>
 8011cfa:	bf00      	nop
 8011cfc:	08014374 	.word	0x08014374
 8011d00:	080142fc 	.word	0x080142fc
 8011d04:	0801430d 	.word	0x0801430d
 8011d08:	1e71      	subs	r1, r6, #1
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 fec6 	bl	8012a9c <__any_on>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d1e6      	bne.n	8011ce2 <__gethex+0x2ca>
 8011d14:	ee18 0a10 	vmov	r0, s16
 8011d18:	4621      	mov	r1, r4
 8011d1a:	f000 fa5f 	bl	80121dc <_Bfree>
 8011d1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d20:	2300      	movs	r3, #0
 8011d22:	6013      	str	r3, [r2, #0]
 8011d24:	2750      	movs	r7, #80	; 0x50
 8011d26:	e70c      	b.n	8011b42 <__gethex+0x12a>
 8011d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d1f2      	bne.n	8011d14 <__gethex+0x2fc>
 8011d2e:	e7d8      	b.n	8011ce2 <__gethex+0x2ca>
 8011d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d1d5      	bne.n	8011ce2 <__gethex+0x2ca>
 8011d36:	e7ed      	b.n	8011d14 <__gethex+0x2fc>
 8011d38:	1e6f      	subs	r7, r5, #1
 8011d3a:	f1ba 0f00 	cmp.w	sl, #0
 8011d3e:	d131      	bne.n	8011da4 <__gethex+0x38c>
 8011d40:	b127      	cbz	r7, 8011d4c <__gethex+0x334>
 8011d42:	4639      	mov	r1, r7
 8011d44:	4620      	mov	r0, r4
 8011d46:	f000 fea9 	bl	8012a9c <__any_on>
 8011d4a:	4682      	mov	sl, r0
 8011d4c:	117b      	asrs	r3, r7, #5
 8011d4e:	2101      	movs	r1, #1
 8011d50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011d54:	f007 071f 	and.w	r7, r7, #31
 8011d58:	fa01 f707 	lsl.w	r7, r1, r7
 8011d5c:	421f      	tst	r7, r3
 8011d5e:	4629      	mov	r1, r5
 8011d60:	4620      	mov	r0, r4
 8011d62:	bf18      	it	ne
 8011d64:	f04a 0a02 	orrne.w	sl, sl, #2
 8011d68:	1b76      	subs	r6, r6, r5
 8011d6a:	f7ff fdee 	bl	801194a <rshift>
 8011d6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d72:	2702      	movs	r7, #2
 8011d74:	f1ba 0f00 	cmp.w	sl, #0
 8011d78:	d048      	beq.n	8011e0c <__gethex+0x3f4>
 8011d7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d7e:	2b02      	cmp	r3, #2
 8011d80:	d015      	beq.n	8011dae <__gethex+0x396>
 8011d82:	2b03      	cmp	r3, #3
 8011d84:	d017      	beq.n	8011db6 <__gethex+0x39e>
 8011d86:	2b01      	cmp	r3, #1
 8011d88:	d109      	bne.n	8011d9e <__gethex+0x386>
 8011d8a:	f01a 0f02 	tst.w	sl, #2
 8011d8e:	d006      	beq.n	8011d9e <__gethex+0x386>
 8011d90:	f8d9 0000 	ldr.w	r0, [r9]
 8011d94:	ea4a 0a00 	orr.w	sl, sl, r0
 8011d98:	f01a 0f01 	tst.w	sl, #1
 8011d9c:	d10e      	bne.n	8011dbc <__gethex+0x3a4>
 8011d9e:	f047 0710 	orr.w	r7, r7, #16
 8011da2:	e033      	b.n	8011e0c <__gethex+0x3f4>
 8011da4:	f04f 0a01 	mov.w	sl, #1
 8011da8:	e7d0      	b.n	8011d4c <__gethex+0x334>
 8011daa:	2701      	movs	r7, #1
 8011dac:	e7e2      	b.n	8011d74 <__gethex+0x35c>
 8011dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011db0:	f1c3 0301 	rsb	r3, r3, #1
 8011db4:	9315      	str	r3, [sp, #84]	; 0x54
 8011db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d0f0      	beq.n	8011d9e <__gethex+0x386>
 8011dbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011dc0:	f104 0314 	add.w	r3, r4, #20
 8011dc4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011dc8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011dcc:	f04f 0c00 	mov.w	ip, #0
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dd6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011dda:	d01c      	beq.n	8011e16 <__gethex+0x3fe>
 8011ddc:	3201      	adds	r2, #1
 8011dde:	6002      	str	r2, [r0, #0]
 8011de0:	2f02      	cmp	r7, #2
 8011de2:	f104 0314 	add.w	r3, r4, #20
 8011de6:	d13f      	bne.n	8011e68 <__gethex+0x450>
 8011de8:	f8d8 2000 	ldr.w	r2, [r8]
 8011dec:	3a01      	subs	r2, #1
 8011dee:	42b2      	cmp	r2, r6
 8011df0:	d10a      	bne.n	8011e08 <__gethex+0x3f0>
 8011df2:	1171      	asrs	r1, r6, #5
 8011df4:	2201      	movs	r2, #1
 8011df6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011dfa:	f006 061f 	and.w	r6, r6, #31
 8011dfe:	fa02 f606 	lsl.w	r6, r2, r6
 8011e02:	421e      	tst	r6, r3
 8011e04:	bf18      	it	ne
 8011e06:	4617      	movne	r7, r2
 8011e08:	f047 0720 	orr.w	r7, r7, #32
 8011e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e0e:	601c      	str	r4, [r3, #0]
 8011e10:	9b04      	ldr	r3, [sp, #16]
 8011e12:	601d      	str	r5, [r3, #0]
 8011e14:	e695      	b.n	8011b42 <__gethex+0x12a>
 8011e16:	4299      	cmp	r1, r3
 8011e18:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e1c:	d8d8      	bhi.n	8011dd0 <__gethex+0x3b8>
 8011e1e:	68a3      	ldr	r3, [r4, #8]
 8011e20:	459b      	cmp	fp, r3
 8011e22:	db19      	blt.n	8011e58 <__gethex+0x440>
 8011e24:	6861      	ldr	r1, [r4, #4]
 8011e26:	ee18 0a10 	vmov	r0, s16
 8011e2a:	3101      	adds	r1, #1
 8011e2c:	f000 f996 	bl	801215c <_Balloc>
 8011e30:	4681      	mov	r9, r0
 8011e32:	b918      	cbnz	r0, 8011e3c <__gethex+0x424>
 8011e34:	4b1a      	ldr	r3, [pc, #104]	; (8011ea0 <__gethex+0x488>)
 8011e36:	4602      	mov	r2, r0
 8011e38:	2184      	movs	r1, #132	; 0x84
 8011e3a:	e6a8      	b.n	8011b8e <__gethex+0x176>
 8011e3c:	6922      	ldr	r2, [r4, #16]
 8011e3e:	3202      	adds	r2, #2
 8011e40:	f104 010c 	add.w	r1, r4, #12
 8011e44:	0092      	lsls	r2, r2, #2
 8011e46:	300c      	adds	r0, #12
 8011e48:	f7fe f802 	bl	800fe50 <memcpy>
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	ee18 0a10 	vmov	r0, s16
 8011e52:	f000 f9c3 	bl	80121dc <_Bfree>
 8011e56:	464c      	mov	r4, r9
 8011e58:	6923      	ldr	r3, [r4, #16]
 8011e5a:	1c5a      	adds	r2, r3, #1
 8011e5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011e60:	6122      	str	r2, [r4, #16]
 8011e62:	2201      	movs	r2, #1
 8011e64:	615a      	str	r2, [r3, #20]
 8011e66:	e7bb      	b.n	8011de0 <__gethex+0x3c8>
 8011e68:	6922      	ldr	r2, [r4, #16]
 8011e6a:	455a      	cmp	r2, fp
 8011e6c:	dd0b      	ble.n	8011e86 <__gethex+0x46e>
 8011e6e:	2101      	movs	r1, #1
 8011e70:	4620      	mov	r0, r4
 8011e72:	f7ff fd6a 	bl	801194a <rshift>
 8011e76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e7a:	3501      	adds	r5, #1
 8011e7c:	42ab      	cmp	r3, r5
 8011e7e:	f6ff aed0 	blt.w	8011c22 <__gethex+0x20a>
 8011e82:	2701      	movs	r7, #1
 8011e84:	e7c0      	b.n	8011e08 <__gethex+0x3f0>
 8011e86:	f016 061f 	ands.w	r6, r6, #31
 8011e8a:	d0fa      	beq.n	8011e82 <__gethex+0x46a>
 8011e8c:	4453      	add	r3, sl
 8011e8e:	f1c6 0620 	rsb	r6, r6, #32
 8011e92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011e96:	f000 fa53 	bl	8012340 <__hi0bits>
 8011e9a:	42b0      	cmp	r0, r6
 8011e9c:	dbe7      	blt.n	8011e6e <__gethex+0x456>
 8011e9e:	e7f0      	b.n	8011e82 <__gethex+0x46a>
 8011ea0:	080142fc 	.word	0x080142fc

08011ea4 <L_shift>:
 8011ea4:	f1c2 0208 	rsb	r2, r2, #8
 8011ea8:	0092      	lsls	r2, r2, #2
 8011eaa:	b570      	push	{r4, r5, r6, lr}
 8011eac:	f1c2 0620 	rsb	r6, r2, #32
 8011eb0:	6843      	ldr	r3, [r0, #4]
 8011eb2:	6804      	ldr	r4, [r0, #0]
 8011eb4:	fa03 f506 	lsl.w	r5, r3, r6
 8011eb8:	432c      	orrs	r4, r5
 8011eba:	40d3      	lsrs	r3, r2
 8011ebc:	6004      	str	r4, [r0, #0]
 8011ebe:	f840 3f04 	str.w	r3, [r0, #4]!
 8011ec2:	4288      	cmp	r0, r1
 8011ec4:	d3f4      	bcc.n	8011eb0 <L_shift+0xc>
 8011ec6:	bd70      	pop	{r4, r5, r6, pc}

08011ec8 <__match>:
 8011ec8:	b530      	push	{r4, r5, lr}
 8011eca:	6803      	ldr	r3, [r0, #0]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ed2:	b914      	cbnz	r4, 8011eda <__match+0x12>
 8011ed4:	6003      	str	r3, [r0, #0]
 8011ed6:	2001      	movs	r0, #1
 8011ed8:	bd30      	pop	{r4, r5, pc}
 8011eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ede:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011ee2:	2d19      	cmp	r5, #25
 8011ee4:	bf98      	it	ls
 8011ee6:	3220      	addls	r2, #32
 8011ee8:	42a2      	cmp	r2, r4
 8011eea:	d0f0      	beq.n	8011ece <__match+0x6>
 8011eec:	2000      	movs	r0, #0
 8011eee:	e7f3      	b.n	8011ed8 <__match+0x10>

08011ef0 <__hexnan>:
 8011ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef4:	680b      	ldr	r3, [r1, #0]
 8011ef6:	115e      	asrs	r6, r3, #5
 8011ef8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011efc:	f013 031f 	ands.w	r3, r3, #31
 8011f00:	b087      	sub	sp, #28
 8011f02:	bf18      	it	ne
 8011f04:	3604      	addne	r6, #4
 8011f06:	2500      	movs	r5, #0
 8011f08:	1f37      	subs	r7, r6, #4
 8011f0a:	4690      	mov	r8, r2
 8011f0c:	6802      	ldr	r2, [r0, #0]
 8011f0e:	9301      	str	r3, [sp, #4]
 8011f10:	4682      	mov	sl, r0
 8011f12:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f16:	46b9      	mov	r9, r7
 8011f18:	463c      	mov	r4, r7
 8011f1a:	9502      	str	r5, [sp, #8]
 8011f1c:	46ab      	mov	fp, r5
 8011f1e:	7851      	ldrb	r1, [r2, #1]
 8011f20:	1c53      	adds	r3, r2, #1
 8011f22:	9303      	str	r3, [sp, #12]
 8011f24:	b341      	cbz	r1, 8011f78 <__hexnan+0x88>
 8011f26:	4608      	mov	r0, r1
 8011f28:	9205      	str	r2, [sp, #20]
 8011f2a:	9104      	str	r1, [sp, #16]
 8011f2c:	f7ff fd5f 	bl	80119ee <__hexdig_fun>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d14f      	bne.n	8011fd4 <__hexnan+0xe4>
 8011f34:	9904      	ldr	r1, [sp, #16]
 8011f36:	9a05      	ldr	r2, [sp, #20]
 8011f38:	2920      	cmp	r1, #32
 8011f3a:	d818      	bhi.n	8011f6e <__hexnan+0x7e>
 8011f3c:	9b02      	ldr	r3, [sp, #8]
 8011f3e:	459b      	cmp	fp, r3
 8011f40:	dd13      	ble.n	8011f6a <__hexnan+0x7a>
 8011f42:	454c      	cmp	r4, r9
 8011f44:	d206      	bcs.n	8011f54 <__hexnan+0x64>
 8011f46:	2d07      	cmp	r5, #7
 8011f48:	dc04      	bgt.n	8011f54 <__hexnan+0x64>
 8011f4a:	462a      	mov	r2, r5
 8011f4c:	4649      	mov	r1, r9
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f7ff ffa8 	bl	8011ea4 <L_shift>
 8011f54:	4544      	cmp	r4, r8
 8011f56:	d950      	bls.n	8011ffa <__hexnan+0x10a>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f1a4 0904 	sub.w	r9, r4, #4
 8011f5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f62:	f8cd b008 	str.w	fp, [sp, #8]
 8011f66:	464c      	mov	r4, r9
 8011f68:	461d      	mov	r5, r3
 8011f6a:	9a03      	ldr	r2, [sp, #12]
 8011f6c:	e7d7      	b.n	8011f1e <__hexnan+0x2e>
 8011f6e:	2929      	cmp	r1, #41	; 0x29
 8011f70:	d156      	bne.n	8012020 <__hexnan+0x130>
 8011f72:	3202      	adds	r2, #2
 8011f74:	f8ca 2000 	str.w	r2, [sl]
 8011f78:	f1bb 0f00 	cmp.w	fp, #0
 8011f7c:	d050      	beq.n	8012020 <__hexnan+0x130>
 8011f7e:	454c      	cmp	r4, r9
 8011f80:	d206      	bcs.n	8011f90 <__hexnan+0xa0>
 8011f82:	2d07      	cmp	r5, #7
 8011f84:	dc04      	bgt.n	8011f90 <__hexnan+0xa0>
 8011f86:	462a      	mov	r2, r5
 8011f88:	4649      	mov	r1, r9
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f7ff ff8a 	bl	8011ea4 <L_shift>
 8011f90:	4544      	cmp	r4, r8
 8011f92:	d934      	bls.n	8011ffe <__hexnan+0x10e>
 8011f94:	f1a8 0204 	sub.w	r2, r8, #4
 8011f98:	4623      	mov	r3, r4
 8011f9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011f9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011fa2:	429f      	cmp	r7, r3
 8011fa4:	d2f9      	bcs.n	8011f9a <__hexnan+0xaa>
 8011fa6:	1b3b      	subs	r3, r7, r4
 8011fa8:	f023 0303 	bic.w	r3, r3, #3
 8011fac:	3304      	adds	r3, #4
 8011fae:	3401      	adds	r4, #1
 8011fb0:	3e03      	subs	r6, #3
 8011fb2:	42b4      	cmp	r4, r6
 8011fb4:	bf88      	it	hi
 8011fb6:	2304      	movhi	r3, #4
 8011fb8:	4443      	add	r3, r8
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f843 2b04 	str.w	r2, [r3], #4
 8011fc0:	429f      	cmp	r7, r3
 8011fc2:	d2fb      	bcs.n	8011fbc <__hexnan+0xcc>
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	b91b      	cbnz	r3, 8011fd0 <__hexnan+0xe0>
 8011fc8:	4547      	cmp	r7, r8
 8011fca:	d127      	bne.n	801201c <__hexnan+0x12c>
 8011fcc:	2301      	movs	r3, #1
 8011fce:	603b      	str	r3, [r7, #0]
 8011fd0:	2005      	movs	r0, #5
 8011fd2:	e026      	b.n	8012022 <__hexnan+0x132>
 8011fd4:	3501      	adds	r5, #1
 8011fd6:	2d08      	cmp	r5, #8
 8011fd8:	f10b 0b01 	add.w	fp, fp, #1
 8011fdc:	dd06      	ble.n	8011fec <__hexnan+0xfc>
 8011fde:	4544      	cmp	r4, r8
 8011fe0:	d9c3      	bls.n	8011f6a <__hexnan+0x7a>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fe8:	2501      	movs	r5, #1
 8011fea:	3c04      	subs	r4, #4
 8011fec:	6822      	ldr	r2, [r4, #0]
 8011fee:	f000 000f 	and.w	r0, r0, #15
 8011ff2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011ff6:	6022      	str	r2, [r4, #0]
 8011ff8:	e7b7      	b.n	8011f6a <__hexnan+0x7a>
 8011ffa:	2508      	movs	r5, #8
 8011ffc:	e7b5      	b.n	8011f6a <__hexnan+0x7a>
 8011ffe:	9b01      	ldr	r3, [sp, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d0df      	beq.n	8011fc4 <__hexnan+0xd4>
 8012004:	f04f 32ff 	mov.w	r2, #4294967295
 8012008:	f1c3 0320 	rsb	r3, r3, #32
 801200c:	fa22 f303 	lsr.w	r3, r2, r3
 8012010:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012014:	401a      	ands	r2, r3
 8012016:	f846 2c04 	str.w	r2, [r6, #-4]
 801201a:	e7d3      	b.n	8011fc4 <__hexnan+0xd4>
 801201c:	3f04      	subs	r7, #4
 801201e:	e7d1      	b.n	8011fc4 <__hexnan+0xd4>
 8012020:	2004      	movs	r0, #4
 8012022:	b007      	add	sp, #28
 8012024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012028 <__retarget_lock_init_recursive>:
 8012028:	4770      	bx	lr

0801202a <__retarget_lock_acquire_recursive>:
 801202a:	4770      	bx	lr

0801202c <__retarget_lock_release_recursive>:
 801202c:	4770      	bx	lr
	...

08012030 <_lseek_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4d07      	ldr	r5, [pc, #28]	; (8012050 <_lseek_r+0x20>)
 8012034:	4604      	mov	r4, r0
 8012036:	4608      	mov	r0, r1
 8012038:	4611      	mov	r1, r2
 801203a:	2200      	movs	r2, #0
 801203c:	602a      	str	r2, [r5, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	f7f2 fa30 	bl	80044a4 <_lseek>
 8012044:	1c43      	adds	r3, r0, #1
 8012046:	d102      	bne.n	801204e <_lseek_r+0x1e>
 8012048:	682b      	ldr	r3, [r5, #0]
 801204a:	b103      	cbz	r3, 801204e <_lseek_r+0x1e>
 801204c:	6023      	str	r3, [r4, #0]
 801204e:	bd38      	pop	{r3, r4, r5, pc}
 8012050:	2000280c 	.word	0x2000280c

08012054 <__swhatbuf_r>:
 8012054:	b570      	push	{r4, r5, r6, lr}
 8012056:	460e      	mov	r6, r1
 8012058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801205c:	2900      	cmp	r1, #0
 801205e:	b096      	sub	sp, #88	; 0x58
 8012060:	4614      	mov	r4, r2
 8012062:	461d      	mov	r5, r3
 8012064:	da08      	bge.n	8012078 <__swhatbuf_r+0x24>
 8012066:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801206a:	2200      	movs	r2, #0
 801206c:	602a      	str	r2, [r5, #0]
 801206e:	061a      	lsls	r2, r3, #24
 8012070:	d410      	bmi.n	8012094 <__swhatbuf_r+0x40>
 8012072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012076:	e00e      	b.n	8012096 <__swhatbuf_r+0x42>
 8012078:	466a      	mov	r2, sp
 801207a:	f001 fc99 	bl	80139b0 <_fstat_r>
 801207e:	2800      	cmp	r0, #0
 8012080:	dbf1      	blt.n	8012066 <__swhatbuf_r+0x12>
 8012082:	9a01      	ldr	r2, [sp, #4]
 8012084:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012088:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801208c:	425a      	negs	r2, r3
 801208e:	415a      	adcs	r2, r3
 8012090:	602a      	str	r2, [r5, #0]
 8012092:	e7ee      	b.n	8012072 <__swhatbuf_r+0x1e>
 8012094:	2340      	movs	r3, #64	; 0x40
 8012096:	2000      	movs	r0, #0
 8012098:	6023      	str	r3, [r4, #0]
 801209a:	b016      	add	sp, #88	; 0x58
 801209c:	bd70      	pop	{r4, r5, r6, pc}
	...

080120a0 <__smakebuf_r>:
 80120a0:	898b      	ldrh	r3, [r1, #12]
 80120a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80120a4:	079d      	lsls	r5, r3, #30
 80120a6:	4606      	mov	r6, r0
 80120a8:	460c      	mov	r4, r1
 80120aa:	d507      	bpl.n	80120bc <__smakebuf_r+0x1c>
 80120ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120b0:	6023      	str	r3, [r4, #0]
 80120b2:	6123      	str	r3, [r4, #16]
 80120b4:	2301      	movs	r3, #1
 80120b6:	6163      	str	r3, [r4, #20]
 80120b8:	b002      	add	sp, #8
 80120ba:	bd70      	pop	{r4, r5, r6, pc}
 80120bc:	ab01      	add	r3, sp, #4
 80120be:	466a      	mov	r2, sp
 80120c0:	f7ff ffc8 	bl	8012054 <__swhatbuf_r>
 80120c4:	9900      	ldr	r1, [sp, #0]
 80120c6:	4605      	mov	r5, r0
 80120c8:	4630      	mov	r0, r6
 80120ca:	f7fd ff43 	bl	800ff54 <_malloc_r>
 80120ce:	b948      	cbnz	r0, 80120e4 <__smakebuf_r+0x44>
 80120d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120d4:	059a      	lsls	r2, r3, #22
 80120d6:	d4ef      	bmi.n	80120b8 <__smakebuf_r+0x18>
 80120d8:	f023 0303 	bic.w	r3, r3, #3
 80120dc:	f043 0302 	orr.w	r3, r3, #2
 80120e0:	81a3      	strh	r3, [r4, #12]
 80120e2:	e7e3      	b.n	80120ac <__smakebuf_r+0xc>
 80120e4:	4b0d      	ldr	r3, [pc, #52]	; (801211c <__smakebuf_r+0x7c>)
 80120e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80120e8:	89a3      	ldrh	r3, [r4, #12]
 80120ea:	6020      	str	r0, [r4, #0]
 80120ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120f0:	81a3      	strh	r3, [r4, #12]
 80120f2:	9b00      	ldr	r3, [sp, #0]
 80120f4:	6163      	str	r3, [r4, #20]
 80120f6:	9b01      	ldr	r3, [sp, #4]
 80120f8:	6120      	str	r0, [r4, #16]
 80120fa:	b15b      	cbz	r3, 8012114 <__smakebuf_r+0x74>
 80120fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012100:	4630      	mov	r0, r6
 8012102:	f001 fc67 	bl	80139d4 <_isatty_r>
 8012106:	b128      	cbz	r0, 8012114 <__smakebuf_r+0x74>
 8012108:	89a3      	ldrh	r3, [r4, #12]
 801210a:	f023 0303 	bic.w	r3, r3, #3
 801210e:	f043 0301 	orr.w	r3, r3, #1
 8012112:	81a3      	strh	r3, [r4, #12]
 8012114:	89a0      	ldrh	r0, [r4, #12]
 8012116:	4305      	orrs	r5, r0
 8012118:	81a5      	strh	r5, [r4, #12]
 801211a:	e7cd      	b.n	80120b8 <__smakebuf_r+0x18>
 801211c:	080117a9 	.word	0x080117a9

08012120 <__ascii_mbtowc>:
 8012120:	b082      	sub	sp, #8
 8012122:	b901      	cbnz	r1, 8012126 <__ascii_mbtowc+0x6>
 8012124:	a901      	add	r1, sp, #4
 8012126:	b142      	cbz	r2, 801213a <__ascii_mbtowc+0x1a>
 8012128:	b14b      	cbz	r3, 801213e <__ascii_mbtowc+0x1e>
 801212a:	7813      	ldrb	r3, [r2, #0]
 801212c:	600b      	str	r3, [r1, #0]
 801212e:	7812      	ldrb	r2, [r2, #0]
 8012130:	1e10      	subs	r0, r2, #0
 8012132:	bf18      	it	ne
 8012134:	2001      	movne	r0, #1
 8012136:	b002      	add	sp, #8
 8012138:	4770      	bx	lr
 801213a:	4610      	mov	r0, r2
 801213c:	e7fb      	b.n	8012136 <__ascii_mbtowc+0x16>
 801213e:	f06f 0001 	mvn.w	r0, #1
 8012142:	e7f8      	b.n	8012136 <__ascii_mbtowc+0x16>

08012144 <__malloc_lock>:
 8012144:	4801      	ldr	r0, [pc, #4]	; (801214c <__malloc_lock+0x8>)
 8012146:	f7ff bf70 	b.w	801202a <__retarget_lock_acquire_recursive>
 801214a:	bf00      	nop
 801214c:	20002808 	.word	0x20002808

08012150 <__malloc_unlock>:
 8012150:	4801      	ldr	r0, [pc, #4]	; (8012158 <__malloc_unlock+0x8>)
 8012152:	f7ff bf6b 	b.w	801202c <__retarget_lock_release_recursive>
 8012156:	bf00      	nop
 8012158:	20002808 	.word	0x20002808

0801215c <_Balloc>:
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012160:	4604      	mov	r4, r0
 8012162:	460d      	mov	r5, r1
 8012164:	b976      	cbnz	r6, 8012184 <_Balloc+0x28>
 8012166:	2010      	movs	r0, #16
 8012168:	f7fd fe62 	bl	800fe30 <malloc>
 801216c:	4602      	mov	r2, r0
 801216e:	6260      	str	r0, [r4, #36]	; 0x24
 8012170:	b920      	cbnz	r0, 801217c <_Balloc+0x20>
 8012172:	4b18      	ldr	r3, [pc, #96]	; (80121d4 <_Balloc+0x78>)
 8012174:	4818      	ldr	r0, [pc, #96]	; (80121d8 <_Balloc+0x7c>)
 8012176:	2166      	movs	r1, #102	; 0x66
 8012178:	f001 fbea 	bl	8013950 <__assert_func>
 801217c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012180:	6006      	str	r6, [r0, #0]
 8012182:	60c6      	str	r6, [r0, #12]
 8012184:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012186:	68f3      	ldr	r3, [r6, #12]
 8012188:	b183      	cbz	r3, 80121ac <_Balloc+0x50>
 801218a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012192:	b9b8      	cbnz	r0, 80121c4 <_Balloc+0x68>
 8012194:	2101      	movs	r1, #1
 8012196:	fa01 f605 	lsl.w	r6, r1, r5
 801219a:	1d72      	adds	r2, r6, #5
 801219c:	0092      	lsls	r2, r2, #2
 801219e:	4620      	mov	r0, r4
 80121a0:	f000 fc9d 	bl	8012ade <_calloc_r>
 80121a4:	b160      	cbz	r0, 80121c0 <_Balloc+0x64>
 80121a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80121aa:	e00e      	b.n	80121ca <_Balloc+0x6e>
 80121ac:	2221      	movs	r2, #33	; 0x21
 80121ae:	2104      	movs	r1, #4
 80121b0:	4620      	mov	r0, r4
 80121b2:	f000 fc94 	bl	8012ade <_calloc_r>
 80121b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121b8:	60f0      	str	r0, [r6, #12]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1e4      	bne.n	801218a <_Balloc+0x2e>
 80121c0:	2000      	movs	r0, #0
 80121c2:	bd70      	pop	{r4, r5, r6, pc}
 80121c4:	6802      	ldr	r2, [r0, #0]
 80121c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80121ca:	2300      	movs	r3, #0
 80121cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121d0:	e7f7      	b.n	80121c2 <_Balloc+0x66>
 80121d2:	bf00      	nop
 80121d4:	08014388 	.word	0x08014388
 80121d8:	0801439f 	.word	0x0801439f

080121dc <_Bfree>:
 80121dc:	b570      	push	{r4, r5, r6, lr}
 80121de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121e0:	4605      	mov	r5, r0
 80121e2:	460c      	mov	r4, r1
 80121e4:	b976      	cbnz	r6, 8012204 <_Bfree+0x28>
 80121e6:	2010      	movs	r0, #16
 80121e8:	f7fd fe22 	bl	800fe30 <malloc>
 80121ec:	4602      	mov	r2, r0
 80121ee:	6268      	str	r0, [r5, #36]	; 0x24
 80121f0:	b920      	cbnz	r0, 80121fc <_Bfree+0x20>
 80121f2:	4b09      	ldr	r3, [pc, #36]	; (8012218 <_Bfree+0x3c>)
 80121f4:	4809      	ldr	r0, [pc, #36]	; (801221c <_Bfree+0x40>)
 80121f6:	218a      	movs	r1, #138	; 0x8a
 80121f8:	f001 fbaa 	bl	8013950 <__assert_func>
 80121fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012200:	6006      	str	r6, [r0, #0]
 8012202:	60c6      	str	r6, [r0, #12]
 8012204:	b13c      	cbz	r4, 8012216 <_Bfree+0x3a>
 8012206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012208:	6862      	ldr	r2, [r4, #4]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012210:	6021      	str	r1, [r4, #0]
 8012212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012216:	bd70      	pop	{r4, r5, r6, pc}
 8012218:	08014388 	.word	0x08014388
 801221c:	0801439f 	.word	0x0801439f

08012220 <__multadd>:
 8012220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012224:	690d      	ldr	r5, [r1, #16]
 8012226:	4607      	mov	r7, r0
 8012228:	460c      	mov	r4, r1
 801222a:	461e      	mov	r6, r3
 801222c:	f101 0c14 	add.w	ip, r1, #20
 8012230:	2000      	movs	r0, #0
 8012232:	f8dc 3000 	ldr.w	r3, [ip]
 8012236:	b299      	uxth	r1, r3
 8012238:	fb02 6101 	mla	r1, r2, r1, r6
 801223c:	0c1e      	lsrs	r6, r3, #16
 801223e:	0c0b      	lsrs	r3, r1, #16
 8012240:	fb02 3306 	mla	r3, r2, r6, r3
 8012244:	b289      	uxth	r1, r1
 8012246:	3001      	adds	r0, #1
 8012248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801224c:	4285      	cmp	r5, r0
 801224e:	f84c 1b04 	str.w	r1, [ip], #4
 8012252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012256:	dcec      	bgt.n	8012232 <__multadd+0x12>
 8012258:	b30e      	cbz	r6, 801229e <__multadd+0x7e>
 801225a:	68a3      	ldr	r3, [r4, #8]
 801225c:	42ab      	cmp	r3, r5
 801225e:	dc19      	bgt.n	8012294 <__multadd+0x74>
 8012260:	6861      	ldr	r1, [r4, #4]
 8012262:	4638      	mov	r0, r7
 8012264:	3101      	adds	r1, #1
 8012266:	f7ff ff79 	bl	801215c <_Balloc>
 801226a:	4680      	mov	r8, r0
 801226c:	b928      	cbnz	r0, 801227a <__multadd+0x5a>
 801226e:	4602      	mov	r2, r0
 8012270:	4b0c      	ldr	r3, [pc, #48]	; (80122a4 <__multadd+0x84>)
 8012272:	480d      	ldr	r0, [pc, #52]	; (80122a8 <__multadd+0x88>)
 8012274:	21b5      	movs	r1, #181	; 0xb5
 8012276:	f001 fb6b 	bl	8013950 <__assert_func>
 801227a:	6922      	ldr	r2, [r4, #16]
 801227c:	3202      	adds	r2, #2
 801227e:	f104 010c 	add.w	r1, r4, #12
 8012282:	0092      	lsls	r2, r2, #2
 8012284:	300c      	adds	r0, #12
 8012286:	f7fd fde3 	bl	800fe50 <memcpy>
 801228a:	4621      	mov	r1, r4
 801228c:	4638      	mov	r0, r7
 801228e:	f7ff ffa5 	bl	80121dc <_Bfree>
 8012292:	4644      	mov	r4, r8
 8012294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012298:	3501      	adds	r5, #1
 801229a:	615e      	str	r6, [r3, #20]
 801229c:	6125      	str	r5, [r4, #16]
 801229e:	4620      	mov	r0, r4
 80122a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a4:	080142fc 	.word	0x080142fc
 80122a8:	0801439f 	.word	0x0801439f

080122ac <__s2b>:
 80122ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122b0:	460c      	mov	r4, r1
 80122b2:	4615      	mov	r5, r2
 80122b4:	461f      	mov	r7, r3
 80122b6:	2209      	movs	r2, #9
 80122b8:	3308      	adds	r3, #8
 80122ba:	4606      	mov	r6, r0
 80122bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80122c0:	2100      	movs	r1, #0
 80122c2:	2201      	movs	r2, #1
 80122c4:	429a      	cmp	r2, r3
 80122c6:	db09      	blt.n	80122dc <__s2b+0x30>
 80122c8:	4630      	mov	r0, r6
 80122ca:	f7ff ff47 	bl	801215c <_Balloc>
 80122ce:	b940      	cbnz	r0, 80122e2 <__s2b+0x36>
 80122d0:	4602      	mov	r2, r0
 80122d2:	4b19      	ldr	r3, [pc, #100]	; (8012338 <__s2b+0x8c>)
 80122d4:	4819      	ldr	r0, [pc, #100]	; (801233c <__s2b+0x90>)
 80122d6:	21ce      	movs	r1, #206	; 0xce
 80122d8:	f001 fb3a 	bl	8013950 <__assert_func>
 80122dc:	0052      	lsls	r2, r2, #1
 80122de:	3101      	adds	r1, #1
 80122e0:	e7f0      	b.n	80122c4 <__s2b+0x18>
 80122e2:	9b08      	ldr	r3, [sp, #32]
 80122e4:	6143      	str	r3, [r0, #20]
 80122e6:	2d09      	cmp	r5, #9
 80122e8:	f04f 0301 	mov.w	r3, #1
 80122ec:	6103      	str	r3, [r0, #16]
 80122ee:	dd16      	ble.n	801231e <__s2b+0x72>
 80122f0:	f104 0909 	add.w	r9, r4, #9
 80122f4:	46c8      	mov	r8, r9
 80122f6:	442c      	add	r4, r5
 80122f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80122fc:	4601      	mov	r1, r0
 80122fe:	3b30      	subs	r3, #48	; 0x30
 8012300:	220a      	movs	r2, #10
 8012302:	4630      	mov	r0, r6
 8012304:	f7ff ff8c 	bl	8012220 <__multadd>
 8012308:	45a0      	cmp	r8, r4
 801230a:	d1f5      	bne.n	80122f8 <__s2b+0x4c>
 801230c:	f1a5 0408 	sub.w	r4, r5, #8
 8012310:	444c      	add	r4, r9
 8012312:	1b2d      	subs	r5, r5, r4
 8012314:	1963      	adds	r3, r4, r5
 8012316:	42bb      	cmp	r3, r7
 8012318:	db04      	blt.n	8012324 <__s2b+0x78>
 801231a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801231e:	340a      	adds	r4, #10
 8012320:	2509      	movs	r5, #9
 8012322:	e7f6      	b.n	8012312 <__s2b+0x66>
 8012324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012328:	4601      	mov	r1, r0
 801232a:	3b30      	subs	r3, #48	; 0x30
 801232c:	220a      	movs	r2, #10
 801232e:	4630      	mov	r0, r6
 8012330:	f7ff ff76 	bl	8012220 <__multadd>
 8012334:	e7ee      	b.n	8012314 <__s2b+0x68>
 8012336:	bf00      	nop
 8012338:	080142fc 	.word	0x080142fc
 801233c:	0801439f 	.word	0x0801439f

08012340 <__hi0bits>:
 8012340:	0c03      	lsrs	r3, r0, #16
 8012342:	041b      	lsls	r3, r3, #16
 8012344:	b9d3      	cbnz	r3, 801237c <__hi0bits+0x3c>
 8012346:	0400      	lsls	r0, r0, #16
 8012348:	2310      	movs	r3, #16
 801234a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801234e:	bf04      	itt	eq
 8012350:	0200      	lsleq	r0, r0, #8
 8012352:	3308      	addeq	r3, #8
 8012354:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012358:	bf04      	itt	eq
 801235a:	0100      	lsleq	r0, r0, #4
 801235c:	3304      	addeq	r3, #4
 801235e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012362:	bf04      	itt	eq
 8012364:	0080      	lsleq	r0, r0, #2
 8012366:	3302      	addeq	r3, #2
 8012368:	2800      	cmp	r0, #0
 801236a:	db05      	blt.n	8012378 <__hi0bits+0x38>
 801236c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012370:	f103 0301 	add.w	r3, r3, #1
 8012374:	bf08      	it	eq
 8012376:	2320      	moveq	r3, #32
 8012378:	4618      	mov	r0, r3
 801237a:	4770      	bx	lr
 801237c:	2300      	movs	r3, #0
 801237e:	e7e4      	b.n	801234a <__hi0bits+0xa>

08012380 <__lo0bits>:
 8012380:	6803      	ldr	r3, [r0, #0]
 8012382:	f013 0207 	ands.w	r2, r3, #7
 8012386:	4601      	mov	r1, r0
 8012388:	d00b      	beq.n	80123a2 <__lo0bits+0x22>
 801238a:	07da      	lsls	r2, r3, #31
 801238c:	d423      	bmi.n	80123d6 <__lo0bits+0x56>
 801238e:	0798      	lsls	r0, r3, #30
 8012390:	bf49      	itett	mi
 8012392:	085b      	lsrmi	r3, r3, #1
 8012394:	089b      	lsrpl	r3, r3, #2
 8012396:	2001      	movmi	r0, #1
 8012398:	600b      	strmi	r3, [r1, #0]
 801239a:	bf5c      	itt	pl
 801239c:	600b      	strpl	r3, [r1, #0]
 801239e:	2002      	movpl	r0, #2
 80123a0:	4770      	bx	lr
 80123a2:	b298      	uxth	r0, r3
 80123a4:	b9a8      	cbnz	r0, 80123d2 <__lo0bits+0x52>
 80123a6:	0c1b      	lsrs	r3, r3, #16
 80123a8:	2010      	movs	r0, #16
 80123aa:	b2da      	uxtb	r2, r3
 80123ac:	b90a      	cbnz	r2, 80123b2 <__lo0bits+0x32>
 80123ae:	3008      	adds	r0, #8
 80123b0:	0a1b      	lsrs	r3, r3, #8
 80123b2:	071a      	lsls	r2, r3, #28
 80123b4:	bf04      	itt	eq
 80123b6:	091b      	lsreq	r3, r3, #4
 80123b8:	3004      	addeq	r0, #4
 80123ba:	079a      	lsls	r2, r3, #30
 80123bc:	bf04      	itt	eq
 80123be:	089b      	lsreq	r3, r3, #2
 80123c0:	3002      	addeq	r0, #2
 80123c2:	07da      	lsls	r2, r3, #31
 80123c4:	d403      	bmi.n	80123ce <__lo0bits+0x4e>
 80123c6:	085b      	lsrs	r3, r3, #1
 80123c8:	f100 0001 	add.w	r0, r0, #1
 80123cc:	d005      	beq.n	80123da <__lo0bits+0x5a>
 80123ce:	600b      	str	r3, [r1, #0]
 80123d0:	4770      	bx	lr
 80123d2:	4610      	mov	r0, r2
 80123d4:	e7e9      	b.n	80123aa <__lo0bits+0x2a>
 80123d6:	2000      	movs	r0, #0
 80123d8:	4770      	bx	lr
 80123da:	2020      	movs	r0, #32
 80123dc:	4770      	bx	lr
	...

080123e0 <__i2b>:
 80123e0:	b510      	push	{r4, lr}
 80123e2:	460c      	mov	r4, r1
 80123e4:	2101      	movs	r1, #1
 80123e6:	f7ff feb9 	bl	801215c <_Balloc>
 80123ea:	4602      	mov	r2, r0
 80123ec:	b928      	cbnz	r0, 80123fa <__i2b+0x1a>
 80123ee:	4b05      	ldr	r3, [pc, #20]	; (8012404 <__i2b+0x24>)
 80123f0:	4805      	ldr	r0, [pc, #20]	; (8012408 <__i2b+0x28>)
 80123f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80123f6:	f001 faab 	bl	8013950 <__assert_func>
 80123fa:	2301      	movs	r3, #1
 80123fc:	6144      	str	r4, [r0, #20]
 80123fe:	6103      	str	r3, [r0, #16]
 8012400:	bd10      	pop	{r4, pc}
 8012402:	bf00      	nop
 8012404:	080142fc 	.word	0x080142fc
 8012408:	0801439f 	.word	0x0801439f

0801240c <__multiply>:
 801240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012410:	4691      	mov	r9, r2
 8012412:	690a      	ldr	r2, [r1, #16]
 8012414:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012418:	429a      	cmp	r2, r3
 801241a:	bfb8      	it	lt
 801241c:	460b      	movlt	r3, r1
 801241e:	460c      	mov	r4, r1
 8012420:	bfbc      	itt	lt
 8012422:	464c      	movlt	r4, r9
 8012424:	4699      	movlt	r9, r3
 8012426:	6927      	ldr	r7, [r4, #16]
 8012428:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801242c:	68a3      	ldr	r3, [r4, #8]
 801242e:	6861      	ldr	r1, [r4, #4]
 8012430:	eb07 060a 	add.w	r6, r7, sl
 8012434:	42b3      	cmp	r3, r6
 8012436:	b085      	sub	sp, #20
 8012438:	bfb8      	it	lt
 801243a:	3101      	addlt	r1, #1
 801243c:	f7ff fe8e 	bl	801215c <_Balloc>
 8012440:	b930      	cbnz	r0, 8012450 <__multiply+0x44>
 8012442:	4602      	mov	r2, r0
 8012444:	4b44      	ldr	r3, [pc, #272]	; (8012558 <__multiply+0x14c>)
 8012446:	4845      	ldr	r0, [pc, #276]	; (801255c <__multiply+0x150>)
 8012448:	f240 115d 	movw	r1, #349	; 0x15d
 801244c:	f001 fa80 	bl	8013950 <__assert_func>
 8012450:	f100 0514 	add.w	r5, r0, #20
 8012454:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012458:	462b      	mov	r3, r5
 801245a:	2200      	movs	r2, #0
 801245c:	4543      	cmp	r3, r8
 801245e:	d321      	bcc.n	80124a4 <__multiply+0x98>
 8012460:	f104 0314 	add.w	r3, r4, #20
 8012464:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012468:	f109 0314 	add.w	r3, r9, #20
 801246c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012470:	9202      	str	r2, [sp, #8]
 8012472:	1b3a      	subs	r2, r7, r4
 8012474:	3a15      	subs	r2, #21
 8012476:	f022 0203 	bic.w	r2, r2, #3
 801247a:	3204      	adds	r2, #4
 801247c:	f104 0115 	add.w	r1, r4, #21
 8012480:	428f      	cmp	r7, r1
 8012482:	bf38      	it	cc
 8012484:	2204      	movcc	r2, #4
 8012486:	9201      	str	r2, [sp, #4]
 8012488:	9a02      	ldr	r2, [sp, #8]
 801248a:	9303      	str	r3, [sp, #12]
 801248c:	429a      	cmp	r2, r3
 801248e:	d80c      	bhi.n	80124aa <__multiply+0x9e>
 8012490:	2e00      	cmp	r6, #0
 8012492:	dd03      	ble.n	801249c <__multiply+0x90>
 8012494:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012498:	2b00      	cmp	r3, #0
 801249a:	d05a      	beq.n	8012552 <__multiply+0x146>
 801249c:	6106      	str	r6, [r0, #16]
 801249e:	b005      	add	sp, #20
 80124a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a4:	f843 2b04 	str.w	r2, [r3], #4
 80124a8:	e7d8      	b.n	801245c <__multiply+0x50>
 80124aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80124ae:	f1ba 0f00 	cmp.w	sl, #0
 80124b2:	d024      	beq.n	80124fe <__multiply+0xf2>
 80124b4:	f104 0e14 	add.w	lr, r4, #20
 80124b8:	46a9      	mov	r9, r5
 80124ba:	f04f 0c00 	mov.w	ip, #0
 80124be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80124c2:	f8d9 1000 	ldr.w	r1, [r9]
 80124c6:	fa1f fb82 	uxth.w	fp, r2
 80124ca:	b289      	uxth	r1, r1
 80124cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80124d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80124d4:	f8d9 2000 	ldr.w	r2, [r9]
 80124d8:	4461      	add	r1, ip
 80124da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80124de:	fb0a c20b 	mla	r2, sl, fp, ip
 80124e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80124e6:	b289      	uxth	r1, r1
 80124e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80124ec:	4577      	cmp	r7, lr
 80124ee:	f849 1b04 	str.w	r1, [r9], #4
 80124f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80124f6:	d8e2      	bhi.n	80124be <__multiply+0xb2>
 80124f8:	9a01      	ldr	r2, [sp, #4]
 80124fa:	f845 c002 	str.w	ip, [r5, r2]
 80124fe:	9a03      	ldr	r2, [sp, #12]
 8012500:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012504:	3304      	adds	r3, #4
 8012506:	f1b9 0f00 	cmp.w	r9, #0
 801250a:	d020      	beq.n	801254e <__multiply+0x142>
 801250c:	6829      	ldr	r1, [r5, #0]
 801250e:	f104 0c14 	add.w	ip, r4, #20
 8012512:	46ae      	mov	lr, r5
 8012514:	f04f 0a00 	mov.w	sl, #0
 8012518:	f8bc b000 	ldrh.w	fp, [ip]
 801251c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012520:	fb09 220b 	mla	r2, r9, fp, r2
 8012524:	4492      	add	sl, r2
 8012526:	b289      	uxth	r1, r1
 8012528:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801252c:	f84e 1b04 	str.w	r1, [lr], #4
 8012530:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012534:	f8be 1000 	ldrh.w	r1, [lr]
 8012538:	0c12      	lsrs	r2, r2, #16
 801253a:	fb09 1102 	mla	r1, r9, r2, r1
 801253e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012542:	4567      	cmp	r7, ip
 8012544:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012548:	d8e6      	bhi.n	8012518 <__multiply+0x10c>
 801254a:	9a01      	ldr	r2, [sp, #4]
 801254c:	50a9      	str	r1, [r5, r2]
 801254e:	3504      	adds	r5, #4
 8012550:	e79a      	b.n	8012488 <__multiply+0x7c>
 8012552:	3e01      	subs	r6, #1
 8012554:	e79c      	b.n	8012490 <__multiply+0x84>
 8012556:	bf00      	nop
 8012558:	080142fc 	.word	0x080142fc
 801255c:	0801439f 	.word	0x0801439f

08012560 <__pow5mult>:
 8012560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012564:	4615      	mov	r5, r2
 8012566:	f012 0203 	ands.w	r2, r2, #3
 801256a:	4606      	mov	r6, r0
 801256c:	460f      	mov	r7, r1
 801256e:	d007      	beq.n	8012580 <__pow5mult+0x20>
 8012570:	4c25      	ldr	r4, [pc, #148]	; (8012608 <__pow5mult+0xa8>)
 8012572:	3a01      	subs	r2, #1
 8012574:	2300      	movs	r3, #0
 8012576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801257a:	f7ff fe51 	bl	8012220 <__multadd>
 801257e:	4607      	mov	r7, r0
 8012580:	10ad      	asrs	r5, r5, #2
 8012582:	d03d      	beq.n	8012600 <__pow5mult+0xa0>
 8012584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012586:	b97c      	cbnz	r4, 80125a8 <__pow5mult+0x48>
 8012588:	2010      	movs	r0, #16
 801258a:	f7fd fc51 	bl	800fe30 <malloc>
 801258e:	4602      	mov	r2, r0
 8012590:	6270      	str	r0, [r6, #36]	; 0x24
 8012592:	b928      	cbnz	r0, 80125a0 <__pow5mult+0x40>
 8012594:	4b1d      	ldr	r3, [pc, #116]	; (801260c <__pow5mult+0xac>)
 8012596:	481e      	ldr	r0, [pc, #120]	; (8012610 <__pow5mult+0xb0>)
 8012598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801259c:	f001 f9d8 	bl	8013950 <__assert_func>
 80125a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125a4:	6004      	str	r4, [r0, #0]
 80125a6:	60c4      	str	r4, [r0, #12]
 80125a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80125ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125b0:	b94c      	cbnz	r4, 80125c6 <__pow5mult+0x66>
 80125b2:	f240 2171 	movw	r1, #625	; 0x271
 80125b6:	4630      	mov	r0, r6
 80125b8:	f7ff ff12 	bl	80123e0 <__i2b>
 80125bc:	2300      	movs	r3, #0
 80125be:	f8c8 0008 	str.w	r0, [r8, #8]
 80125c2:	4604      	mov	r4, r0
 80125c4:	6003      	str	r3, [r0, #0]
 80125c6:	f04f 0900 	mov.w	r9, #0
 80125ca:	07eb      	lsls	r3, r5, #31
 80125cc:	d50a      	bpl.n	80125e4 <__pow5mult+0x84>
 80125ce:	4639      	mov	r1, r7
 80125d0:	4622      	mov	r2, r4
 80125d2:	4630      	mov	r0, r6
 80125d4:	f7ff ff1a 	bl	801240c <__multiply>
 80125d8:	4639      	mov	r1, r7
 80125da:	4680      	mov	r8, r0
 80125dc:	4630      	mov	r0, r6
 80125de:	f7ff fdfd 	bl	80121dc <_Bfree>
 80125e2:	4647      	mov	r7, r8
 80125e4:	106d      	asrs	r5, r5, #1
 80125e6:	d00b      	beq.n	8012600 <__pow5mult+0xa0>
 80125e8:	6820      	ldr	r0, [r4, #0]
 80125ea:	b938      	cbnz	r0, 80125fc <__pow5mult+0x9c>
 80125ec:	4622      	mov	r2, r4
 80125ee:	4621      	mov	r1, r4
 80125f0:	4630      	mov	r0, r6
 80125f2:	f7ff ff0b 	bl	801240c <__multiply>
 80125f6:	6020      	str	r0, [r4, #0]
 80125f8:	f8c0 9000 	str.w	r9, [r0]
 80125fc:	4604      	mov	r4, r0
 80125fe:	e7e4      	b.n	80125ca <__pow5mult+0x6a>
 8012600:	4638      	mov	r0, r7
 8012602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012606:	bf00      	nop
 8012608:	080144f0 	.word	0x080144f0
 801260c:	08014388 	.word	0x08014388
 8012610:	0801439f 	.word	0x0801439f

08012614 <__lshift>:
 8012614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012618:	460c      	mov	r4, r1
 801261a:	6849      	ldr	r1, [r1, #4]
 801261c:	6923      	ldr	r3, [r4, #16]
 801261e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012622:	68a3      	ldr	r3, [r4, #8]
 8012624:	4607      	mov	r7, r0
 8012626:	4691      	mov	r9, r2
 8012628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801262c:	f108 0601 	add.w	r6, r8, #1
 8012630:	42b3      	cmp	r3, r6
 8012632:	db0b      	blt.n	801264c <__lshift+0x38>
 8012634:	4638      	mov	r0, r7
 8012636:	f7ff fd91 	bl	801215c <_Balloc>
 801263a:	4605      	mov	r5, r0
 801263c:	b948      	cbnz	r0, 8012652 <__lshift+0x3e>
 801263e:	4602      	mov	r2, r0
 8012640:	4b2a      	ldr	r3, [pc, #168]	; (80126ec <__lshift+0xd8>)
 8012642:	482b      	ldr	r0, [pc, #172]	; (80126f0 <__lshift+0xdc>)
 8012644:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012648:	f001 f982 	bl	8013950 <__assert_func>
 801264c:	3101      	adds	r1, #1
 801264e:	005b      	lsls	r3, r3, #1
 8012650:	e7ee      	b.n	8012630 <__lshift+0x1c>
 8012652:	2300      	movs	r3, #0
 8012654:	f100 0114 	add.w	r1, r0, #20
 8012658:	f100 0210 	add.w	r2, r0, #16
 801265c:	4618      	mov	r0, r3
 801265e:	4553      	cmp	r3, sl
 8012660:	db37      	blt.n	80126d2 <__lshift+0xbe>
 8012662:	6920      	ldr	r0, [r4, #16]
 8012664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012668:	f104 0314 	add.w	r3, r4, #20
 801266c:	f019 091f 	ands.w	r9, r9, #31
 8012670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012674:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012678:	d02f      	beq.n	80126da <__lshift+0xc6>
 801267a:	f1c9 0e20 	rsb	lr, r9, #32
 801267e:	468a      	mov	sl, r1
 8012680:	f04f 0c00 	mov.w	ip, #0
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	fa02 f209 	lsl.w	r2, r2, r9
 801268a:	ea42 020c 	orr.w	r2, r2, ip
 801268e:	f84a 2b04 	str.w	r2, [sl], #4
 8012692:	f853 2b04 	ldr.w	r2, [r3], #4
 8012696:	4298      	cmp	r0, r3
 8012698:	fa22 fc0e 	lsr.w	ip, r2, lr
 801269c:	d8f2      	bhi.n	8012684 <__lshift+0x70>
 801269e:	1b03      	subs	r3, r0, r4
 80126a0:	3b15      	subs	r3, #21
 80126a2:	f023 0303 	bic.w	r3, r3, #3
 80126a6:	3304      	adds	r3, #4
 80126a8:	f104 0215 	add.w	r2, r4, #21
 80126ac:	4290      	cmp	r0, r2
 80126ae:	bf38      	it	cc
 80126b0:	2304      	movcc	r3, #4
 80126b2:	f841 c003 	str.w	ip, [r1, r3]
 80126b6:	f1bc 0f00 	cmp.w	ip, #0
 80126ba:	d001      	beq.n	80126c0 <__lshift+0xac>
 80126bc:	f108 0602 	add.w	r6, r8, #2
 80126c0:	3e01      	subs	r6, #1
 80126c2:	4638      	mov	r0, r7
 80126c4:	612e      	str	r6, [r5, #16]
 80126c6:	4621      	mov	r1, r4
 80126c8:	f7ff fd88 	bl	80121dc <_Bfree>
 80126cc:	4628      	mov	r0, r5
 80126ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80126d6:	3301      	adds	r3, #1
 80126d8:	e7c1      	b.n	801265e <__lshift+0x4a>
 80126da:	3904      	subs	r1, #4
 80126dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80126e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80126e4:	4298      	cmp	r0, r3
 80126e6:	d8f9      	bhi.n	80126dc <__lshift+0xc8>
 80126e8:	e7ea      	b.n	80126c0 <__lshift+0xac>
 80126ea:	bf00      	nop
 80126ec:	080142fc 	.word	0x080142fc
 80126f0:	0801439f 	.word	0x0801439f

080126f4 <__mcmp>:
 80126f4:	b530      	push	{r4, r5, lr}
 80126f6:	6902      	ldr	r2, [r0, #16]
 80126f8:	690c      	ldr	r4, [r1, #16]
 80126fa:	1b12      	subs	r2, r2, r4
 80126fc:	d10e      	bne.n	801271c <__mcmp+0x28>
 80126fe:	f100 0314 	add.w	r3, r0, #20
 8012702:	3114      	adds	r1, #20
 8012704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801270c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012714:	42a5      	cmp	r5, r4
 8012716:	d003      	beq.n	8012720 <__mcmp+0x2c>
 8012718:	d305      	bcc.n	8012726 <__mcmp+0x32>
 801271a:	2201      	movs	r2, #1
 801271c:	4610      	mov	r0, r2
 801271e:	bd30      	pop	{r4, r5, pc}
 8012720:	4283      	cmp	r3, r0
 8012722:	d3f3      	bcc.n	801270c <__mcmp+0x18>
 8012724:	e7fa      	b.n	801271c <__mcmp+0x28>
 8012726:	f04f 32ff 	mov.w	r2, #4294967295
 801272a:	e7f7      	b.n	801271c <__mcmp+0x28>

0801272c <__mdiff>:
 801272c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012730:	460c      	mov	r4, r1
 8012732:	4606      	mov	r6, r0
 8012734:	4611      	mov	r1, r2
 8012736:	4620      	mov	r0, r4
 8012738:	4690      	mov	r8, r2
 801273a:	f7ff ffdb 	bl	80126f4 <__mcmp>
 801273e:	1e05      	subs	r5, r0, #0
 8012740:	d110      	bne.n	8012764 <__mdiff+0x38>
 8012742:	4629      	mov	r1, r5
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff fd09 	bl	801215c <_Balloc>
 801274a:	b930      	cbnz	r0, 801275a <__mdiff+0x2e>
 801274c:	4b3a      	ldr	r3, [pc, #232]	; (8012838 <__mdiff+0x10c>)
 801274e:	4602      	mov	r2, r0
 8012750:	f240 2132 	movw	r1, #562	; 0x232
 8012754:	4839      	ldr	r0, [pc, #228]	; (801283c <__mdiff+0x110>)
 8012756:	f001 f8fb 	bl	8013950 <__assert_func>
 801275a:	2301      	movs	r3, #1
 801275c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012764:	bfa4      	itt	ge
 8012766:	4643      	movge	r3, r8
 8012768:	46a0      	movge	r8, r4
 801276a:	4630      	mov	r0, r6
 801276c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012770:	bfa6      	itte	ge
 8012772:	461c      	movge	r4, r3
 8012774:	2500      	movge	r5, #0
 8012776:	2501      	movlt	r5, #1
 8012778:	f7ff fcf0 	bl	801215c <_Balloc>
 801277c:	b920      	cbnz	r0, 8012788 <__mdiff+0x5c>
 801277e:	4b2e      	ldr	r3, [pc, #184]	; (8012838 <__mdiff+0x10c>)
 8012780:	4602      	mov	r2, r0
 8012782:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012786:	e7e5      	b.n	8012754 <__mdiff+0x28>
 8012788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801278c:	6926      	ldr	r6, [r4, #16]
 801278e:	60c5      	str	r5, [r0, #12]
 8012790:	f104 0914 	add.w	r9, r4, #20
 8012794:	f108 0514 	add.w	r5, r8, #20
 8012798:	f100 0e14 	add.w	lr, r0, #20
 801279c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80127a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80127a4:	f108 0210 	add.w	r2, r8, #16
 80127a8:	46f2      	mov	sl, lr
 80127aa:	2100      	movs	r1, #0
 80127ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80127b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80127b4:	fa1f f883 	uxth.w	r8, r3
 80127b8:	fa11 f18b 	uxtah	r1, r1, fp
 80127bc:	0c1b      	lsrs	r3, r3, #16
 80127be:	eba1 0808 	sub.w	r8, r1, r8
 80127c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80127c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80127ca:	fa1f f888 	uxth.w	r8, r8
 80127ce:	1419      	asrs	r1, r3, #16
 80127d0:	454e      	cmp	r6, r9
 80127d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80127d6:	f84a 3b04 	str.w	r3, [sl], #4
 80127da:	d8e7      	bhi.n	80127ac <__mdiff+0x80>
 80127dc:	1b33      	subs	r3, r6, r4
 80127de:	3b15      	subs	r3, #21
 80127e0:	f023 0303 	bic.w	r3, r3, #3
 80127e4:	3304      	adds	r3, #4
 80127e6:	3415      	adds	r4, #21
 80127e8:	42a6      	cmp	r6, r4
 80127ea:	bf38      	it	cc
 80127ec:	2304      	movcc	r3, #4
 80127ee:	441d      	add	r5, r3
 80127f0:	4473      	add	r3, lr
 80127f2:	469e      	mov	lr, r3
 80127f4:	462e      	mov	r6, r5
 80127f6:	4566      	cmp	r6, ip
 80127f8:	d30e      	bcc.n	8012818 <__mdiff+0xec>
 80127fa:	f10c 0203 	add.w	r2, ip, #3
 80127fe:	1b52      	subs	r2, r2, r5
 8012800:	f022 0203 	bic.w	r2, r2, #3
 8012804:	3d03      	subs	r5, #3
 8012806:	45ac      	cmp	ip, r5
 8012808:	bf38      	it	cc
 801280a:	2200      	movcc	r2, #0
 801280c:	441a      	add	r2, r3
 801280e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012812:	b17b      	cbz	r3, 8012834 <__mdiff+0x108>
 8012814:	6107      	str	r7, [r0, #16]
 8012816:	e7a3      	b.n	8012760 <__mdiff+0x34>
 8012818:	f856 8b04 	ldr.w	r8, [r6], #4
 801281c:	fa11 f288 	uxtah	r2, r1, r8
 8012820:	1414      	asrs	r4, r2, #16
 8012822:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012826:	b292      	uxth	r2, r2
 8012828:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801282c:	f84e 2b04 	str.w	r2, [lr], #4
 8012830:	1421      	asrs	r1, r4, #16
 8012832:	e7e0      	b.n	80127f6 <__mdiff+0xca>
 8012834:	3f01      	subs	r7, #1
 8012836:	e7ea      	b.n	801280e <__mdiff+0xe2>
 8012838:	080142fc 	.word	0x080142fc
 801283c:	0801439f 	.word	0x0801439f

08012840 <__ulp>:
 8012840:	b082      	sub	sp, #8
 8012842:	ed8d 0b00 	vstr	d0, [sp]
 8012846:	9b01      	ldr	r3, [sp, #4]
 8012848:	4912      	ldr	r1, [pc, #72]	; (8012894 <__ulp+0x54>)
 801284a:	4019      	ands	r1, r3
 801284c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012850:	2900      	cmp	r1, #0
 8012852:	dd05      	ble.n	8012860 <__ulp+0x20>
 8012854:	2200      	movs	r2, #0
 8012856:	460b      	mov	r3, r1
 8012858:	ec43 2b10 	vmov	d0, r2, r3
 801285c:	b002      	add	sp, #8
 801285e:	4770      	bx	lr
 8012860:	4249      	negs	r1, r1
 8012862:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012866:	ea4f 5021 	mov.w	r0, r1, asr #20
 801286a:	f04f 0200 	mov.w	r2, #0
 801286e:	f04f 0300 	mov.w	r3, #0
 8012872:	da04      	bge.n	801287e <__ulp+0x3e>
 8012874:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012878:	fa41 f300 	asr.w	r3, r1, r0
 801287c:	e7ec      	b.n	8012858 <__ulp+0x18>
 801287e:	f1a0 0114 	sub.w	r1, r0, #20
 8012882:	291e      	cmp	r1, #30
 8012884:	bfda      	itte	le
 8012886:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801288a:	fa20 f101 	lsrle.w	r1, r0, r1
 801288e:	2101      	movgt	r1, #1
 8012890:	460a      	mov	r2, r1
 8012892:	e7e1      	b.n	8012858 <__ulp+0x18>
 8012894:	7ff00000 	.word	0x7ff00000

08012898 <__b2d>:
 8012898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801289a:	6905      	ldr	r5, [r0, #16]
 801289c:	f100 0714 	add.w	r7, r0, #20
 80128a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80128a4:	1f2e      	subs	r6, r5, #4
 80128a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80128aa:	4620      	mov	r0, r4
 80128ac:	f7ff fd48 	bl	8012340 <__hi0bits>
 80128b0:	f1c0 0320 	rsb	r3, r0, #32
 80128b4:	280a      	cmp	r0, #10
 80128b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012934 <__b2d+0x9c>
 80128ba:	600b      	str	r3, [r1, #0]
 80128bc:	dc14      	bgt.n	80128e8 <__b2d+0x50>
 80128be:	f1c0 0e0b 	rsb	lr, r0, #11
 80128c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80128c6:	42b7      	cmp	r7, r6
 80128c8:	ea41 030c 	orr.w	r3, r1, ip
 80128cc:	bf34      	ite	cc
 80128ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80128d2:	2100      	movcs	r1, #0
 80128d4:	3015      	adds	r0, #21
 80128d6:	fa04 f000 	lsl.w	r0, r4, r0
 80128da:	fa21 f10e 	lsr.w	r1, r1, lr
 80128de:	ea40 0201 	orr.w	r2, r0, r1
 80128e2:	ec43 2b10 	vmov	d0, r2, r3
 80128e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128e8:	42b7      	cmp	r7, r6
 80128ea:	bf3a      	itte	cc
 80128ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80128f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80128f4:	2100      	movcs	r1, #0
 80128f6:	380b      	subs	r0, #11
 80128f8:	d017      	beq.n	801292a <__b2d+0x92>
 80128fa:	f1c0 0c20 	rsb	ip, r0, #32
 80128fe:	fa04 f500 	lsl.w	r5, r4, r0
 8012902:	42be      	cmp	r6, r7
 8012904:	fa21 f40c 	lsr.w	r4, r1, ip
 8012908:	ea45 0504 	orr.w	r5, r5, r4
 801290c:	bf8c      	ite	hi
 801290e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012912:	2400      	movls	r4, #0
 8012914:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012918:	fa01 f000 	lsl.w	r0, r1, r0
 801291c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012920:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012924:	ea40 0204 	orr.w	r2, r0, r4
 8012928:	e7db      	b.n	80128e2 <__b2d+0x4a>
 801292a:	ea44 030c 	orr.w	r3, r4, ip
 801292e:	460a      	mov	r2, r1
 8012930:	e7d7      	b.n	80128e2 <__b2d+0x4a>
 8012932:	bf00      	nop
 8012934:	3ff00000 	.word	0x3ff00000

08012938 <__d2b>:
 8012938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801293c:	4689      	mov	r9, r1
 801293e:	2101      	movs	r1, #1
 8012940:	ec57 6b10 	vmov	r6, r7, d0
 8012944:	4690      	mov	r8, r2
 8012946:	f7ff fc09 	bl	801215c <_Balloc>
 801294a:	4604      	mov	r4, r0
 801294c:	b930      	cbnz	r0, 801295c <__d2b+0x24>
 801294e:	4602      	mov	r2, r0
 8012950:	4b25      	ldr	r3, [pc, #148]	; (80129e8 <__d2b+0xb0>)
 8012952:	4826      	ldr	r0, [pc, #152]	; (80129ec <__d2b+0xb4>)
 8012954:	f240 310a 	movw	r1, #778	; 0x30a
 8012958:	f000 fffa 	bl	8013950 <__assert_func>
 801295c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012964:	bb35      	cbnz	r5, 80129b4 <__d2b+0x7c>
 8012966:	2e00      	cmp	r6, #0
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	d028      	beq.n	80129be <__d2b+0x86>
 801296c:	4668      	mov	r0, sp
 801296e:	9600      	str	r6, [sp, #0]
 8012970:	f7ff fd06 	bl	8012380 <__lo0bits>
 8012974:	9900      	ldr	r1, [sp, #0]
 8012976:	b300      	cbz	r0, 80129ba <__d2b+0x82>
 8012978:	9a01      	ldr	r2, [sp, #4]
 801297a:	f1c0 0320 	rsb	r3, r0, #32
 801297e:	fa02 f303 	lsl.w	r3, r2, r3
 8012982:	430b      	orrs	r3, r1
 8012984:	40c2      	lsrs	r2, r0
 8012986:	6163      	str	r3, [r4, #20]
 8012988:	9201      	str	r2, [sp, #4]
 801298a:	9b01      	ldr	r3, [sp, #4]
 801298c:	61a3      	str	r3, [r4, #24]
 801298e:	2b00      	cmp	r3, #0
 8012990:	bf14      	ite	ne
 8012992:	2202      	movne	r2, #2
 8012994:	2201      	moveq	r2, #1
 8012996:	6122      	str	r2, [r4, #16]
 8012998:	b1d5      	cbz	r5, 80129d0 <__d2b+0x98>
 801299a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801299e:	4405      	add	r5, r0
 80129a0:	f8c9 5000 	str.w	r5, [r9]
 80129a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80129a8:	f8c8 0000 	str.w	r0, [r8]
 80129ac:	4620      	mov	r0, r4
 80129ae:	b003      	add	sp, #12
 80129b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129b8:	e7d5      	b.n	8012966 <__d2b+0x2e>
 80129ba:	6161      	str	r1, [r4, #20]
 80129bc:	e7e5      	b.n	801298a <__d2b+0x52>
 80129be:	a801      	add	r0, sp, #4
 80129c0:	f7ff fcde 	bl	8012380 <__lo0bits>
 80129c4:	9b01      	ldr	r3, [sp, #4]
 80129c6:	6163      	str	r3, [r4, #20]
 80129c8:	2201      	movs	r2, #1
 80129ca:	6122      	str	r2, [r4, #16]
 80129cc:	3020      	adds	r0, #32
 80129ce:	e7e3      	b.n	8012998 <__d2b+0x60>
 80129d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80129d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80129d8:	f8c9 0000 	str.w	r0, [r9]
 80129dc:	6918      	ldr	r0, [r3, #16]
 80129de:	f7ff fcaf 	bl	8012340 <__hi0bits>
 80129e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80129e6:	e7df      	b.n	80129a8 <__d2b+0x70>
 80129e8:	080142fc 	.word	0x080142fc
 80129ec:	0801439f 	.word	0x0801439f

080129f0 <__ratio>:
 80129f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	4688      	mov	r8, r1
 80129f6:	4669      	mov	r1, sp
 80129f8:	4681      	mov	r9, r0
 80129fa:	f7ff ff4d 	bl	8012898 <__b2d>
 80129fe:	a901      	add	r1, sp, #4
 8012a00:	4640      	mov	r0, r8
 8012a02:	ec55 4b10 	vmov	r4, r5, d0
 8012a06:	f7ff ff47 	bl	8012898 <__b2d>
 8012a0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012a12:	eba3 0c02 	sub.w	ip, r3, r2
 8012a16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a1a:	1a9b      	subs	r3, r3, r2
 8012a1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012a20:	ec51 0b10 	vmov	r0, r1, d0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	bfd6      	itet	le
 8012a28:	460a      	movle	r2, r1
 8012a2a:	462a      	movgt	r2, r5
 8012a2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012a30:	468b      	mov	fp, r1
 8012a32:	462f      	mov	r7, r5
 8012a34:	bfd4      	ite	le
 8012a36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012a3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012a3e:	4620      	mov	r0, r4
 8012a40:	ee10 2a10 	vmov	r2, s0
 8012a44:	465b      	mov	r3, fp
 8012a46:	4639      	mov	r1, r7
 8012a48:	f7ed ff10 	bl	800086c <__aeabi_ddiv>
 8012a4c:	ec41 0b10 	vmov	d0, r0, r1
 8012a50:	b003      	add	sp, #12
 8012a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012a56 <__copybits>:
 8012a56:	3901      	subs	r1, #1
 8012a58:	b570      	push	{r4, r5, r6, lr}
 8012a5a:	1149      	asrs	r1, r1, #5
 8012a5c:	6914      	ldr	r4, [r2, #16]
 8012a5e:	3101      	adds	r1, #1
 8012a60:	f102 0314 	add.w	r3, r2, #20
 8012a64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012a68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012a6c:	1f05      	subs	r5, r0, #4
 8012a6e:	42a3      	cmp	r3, r4
 8012a70:	d30c      	bcc.n	8012a8c <__copybits+0x36>
 8012a72:	1aa3      	subs	r3, r4, r2
 8012a74:	3b11      	subs	r3, #17
 8012a76:	f023 0303 	bic.w	r3, r3, #3
 8012a7a:	3211      	adds	r2, #17
 8012a7c:	42a2      	cmp	r2, r4
 8012a7e:	bf88      	it	hi
 8012a80:	2300      	movhi	r3, #0
 8012a82:	4418      	add	r0, r3
 8012a84:	2300      	movs	r3, #0
 8012a86:	4288      	cmp	r0, r1
 8012a88:	d305      	bcc.n	8012a96 <__copybits+0x40>
 8012a8a:	bd70      	pop	{r4, r5, r6, pc}
 8012a8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012a90:	f845 6f04 	str.w	r6, [r5, #4]!
 8012a94:	e7eb      	b.n	8012a6e <__copybits+0x18>
 8012a96:	f840 3b04 	str.w	r3, [r0], #4
 8012a9a:	e7f4      	b.n	8012a86 <__copybits+0x30>

08012a9c <__any_on>:
 8012a9c:	f100 0214 	add.w	r2, r0, #20
 8012aa0:	6900      	ldr	r0, [r0, #16]
 8012aa2:	114b      	asrs	r3, r1, #5
 8012aa4:	4298      	cmp	r0, r3
 8012aa6:	b510      	push	{r4, lr}
 8012aa8:	db11      	blt.n	8012ace <__any_on+0x32>
 8012aaa:	dd0a      	ble.n	8012ac2 <__any_on+0x26>
 8012aac:	f011 011f 	ands.w	r1, r1, #31
 8012ab0:	d007      	beq.n	8012ac2 <__any_on+0x26>
 8012ab2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012ab6:	fa24 f001 	lsr.w	r0, r4, r1
 8012aba:	fa00 f101 	lsl.w	r1, r0, r1
 8012abe:	428c      	cmp	r4, r1
 8012ac0:	d10b      	bne.n	8012ada <__any_on+0x3e>
 8012ac2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d803      	bhi.n	8012ad2 <__any_on+0x36>
 8012aca:	2000      	movs	r0, #0
 8012acc:	bd10      	pop	{r4, pc}
 8012ace:	4603      	mov	r3, r0
 8012ad0:	e7f7      	b.n	8012ac2 <__any_on+0x26>
 8012ad2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012ad6:	2900      	cmp	r1, #0
 8012ad8:	d0f5      	beq.n	8012ac6 <__any_on+0x2a>
 8012ada:	2001      	movs	r0, #1
 8012adc:	e7f6      	b.n	8012acc <__any_on+0x30>

08012ade <_calloc_r>:
 8012ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ae0:	fba1 2402 	umull	r2, r4, r1, r2
 8012ae4:	b94c      	cbnz	r4, 8012afa <_calloc_r+0x1c>
 8012ae6:	4611      	mov	r1, r2
 8012ae8:	9201      	str	r2, [sp, #4]
 8012aea:	f7fd fa33 	bl	800ff54 <_malloc_r>
 8012aee:	9a01      	ldr	r2, [sp, #4]
 8012af0:	4605      	mov	r5, r0
 8012af2:	b930      	cbnz	r0, 8012b02 <_calloc_r+0x24>
 8012af4:	4628      	mov	r0, r5
 8012af6:	b003      	add	sp, #12
 8012af8:	bd30      	pop	{r4, r5, pc}
 8012afa:	220c      	movs	r2, #12
 8012afc:	6002      	str	r2, [r0, #0]
 8012afe:	2500      	movs	r5, #0
 8012b00:	e7f8      	b.n	8012af4 <_calloc_r+0x16>
 8012b02:	4621      	mov	r1, r4
 8012b04:	f7fd f9b2 	bl	800fe6c <memset>
 8012b08:	e7f4      	b.n	8012af4 <_calloc_r+0x16>

08012b0a <__ssputs_r>:
 8012b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b0e:	688e      	ldr	r6, [r1, #8]
 8012b10:	429e      	cmp	r6, r3
 8012b12:	4682      	mov	sl, r0
 8012b14:	460c      	mov	r4, r1
 8012b16:	4690      	mov	r8, r2
 8012b18:	461f      	mov	r7, r3
 8012b1a:	d838      	bhi.n	8012b8e <__ssputs_r+0x84>
 8012b1c:	898a      	ldrh	r2, [r1, #12]
 8012b1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b22:	d032      	beq.n	8012b8a <__ssputs_r+0x80>
 8012b24:	6825      	ldr	r5, [r4, #0]
 8012b26:	6909      	ldr	r1, [r1, #16]
 8012b28:	eba5 0901 	sub.w	r9, r5, r1
 8012b2c:	6965      	ldr	r5, [r4, #20]
 8012b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b36:	3301      	adds	r3, #1
 8012b38:	444b      	add	r3, r9
 8012b3a:	106d      	asrs	r5, r5, #1
 8012b3c:	429d      	cmp	r5, r3
 8012b3e:	bf38      	it	cc
 8012b40:	461d      	movcc	r5, r3
 8012b42:	0553      	lsls	r3, r2, #21
 8012b44:	d531      	bpl.n	8012baa <__ssputs_r+0xa0>
 8012b46:	4629      	mov	r1, r5
 8012b48:	f7fd fa04 	bl	800ff54 <_malloc_r>
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	b950      	cbnz	r0, 8012b66 <__ssputs_r+0x5c>
 8012b50:	230c      	movs	r3, #12
 8012b52:	f8ca 3000 	str.w	r3, [sl]
 8012b56:	89a3      	ldrh	r3, [r4, #12]
 8012b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b5c:	81a3      	strh	r3, [r4, #12]
 8012b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b66:	6921      	ldr	r1, [r4, #16]
 8012b68:	464a      	mov	r2, r9
 8012b6a:	f7fd f971 	bl	800fe50 <memcpy>
 8012b6e:	89a3      	ldrh	r3, [r4, #12]
 8012b70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b78:	81a3      	strh	r3, [r4, #12]
 8012b7a:	6126      	str	r6, [r4, #16]
 8012b7c:	6165      	str	r5, [r4, #20]
 8012b7e:	444e      	add	r6, r9
 8012b80:	eba5 0509 	sub.w	r5, r5, r9
 8012b84:	6026      	str	r6, [r4, #0]
 8012b86:	60a5      	str	r5, [r4, #8]
 8012b88:	463e      	mov	r6, r7
 8012b8a:	42be      	cmp	r6, r7
 8012b8c:	d900      	bls.n	8012b90 <__ssputs_r+0x86>
 8012b8e:	463e      	mov	r6, r7
 8012b90:	6820      	ldr	r0, [r4, #0]
 8012b92:	4632      	mov	r2, r6
 8012b94:	4641      	mov	r1, r8
 8012b96:	f000 ff2d 	bl	80139f4 <memmove>
 8012b9a:	68a3      	ldr	r3, [r4, #8]
 8012b9c:	1b9b      	subs	r3, r3, r6
 8012b9e:	60a3      	str	r3, [r4, #8]
 8012ba0:	6823      	ldr	r3, [r4, #0]
 8012ba2:	4433      	add	r3, r6
 8012ba4:	6023      	str	r3, [r4, #0]
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	e7db      	b.n	8012b62 <__ssputs_r+0x58>
 8012baa:	462a      	mov	r2, r5
 8012bac:	f000 ff3c 	bl	8013a28 <_realloc_r>
 8012bb0:	4606      	mov	r6, r0
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	d1e1      	bne.n	8012b7a <__ssputs_r+0x70>
 8012bb6:	6921      	ldr	r1, [r4, #16]
 8012bb8:	4650      	mov	r0, sl
 8012bba:	f7fd f95f 	bl	800fe7c <_free_r>
 8012bbe:	e7c7      	b.n	8012b50 <__ssputs_r+0x46>

08012bc0 <_svfiprintf_r>:
 8012bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc4:	4698      	mov	r8, r3
 8012bc6:	898b      	ldrh	r3, [r1, #12]
 8012bc8:	061b      	lsls	r3, r3, #24
 8012bca:	b09d      	sub	sp, #116	; 0x74
 8012bcc:	4607      	mov	r7, r0
 8012bce:	460d      	mov	r5, r1
 8012bd0:	4614      	mov	r4, r2
 8012bd2:	d50e      	bpl.n	8012bf2 <_svfiprintf_r+0x32>
 8012bd4:	690b      	ldr	r3, [r1, #16]
 8012bd6:	b963      	cbnz	r3, 8012bf2 <_svfiprintf_r+0x32>
 8012bd8:	2140      	movs	r1, #64	; 0x40
 8012bda:	f7fd f9bb 	bl	800ff54 <_malloc_r>
 8012bde:	6028      	str	r0, [r5, #0]
 8012be0:	6128      	str	r0, [r5, #16]
 8012be2:	b920      	cbnz	r0, 8012bee <_svfiprintf_r+0x2e>
 8012be4:	230c      	movs	r3, #12
 8012be6:	603b      	str	r3, [r7, #0]
 8012be8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bec:	e0d1      	b.n	8012d92 <_svfiprintf_r+0x1d2>
 8012bee:	2340      	movs	r3, #64	; 0x40
 8012bf0:	616b      	str	r3, [r5, #20]
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8012bf6:	2320      	movs	r3, #32
 8012bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c00:	2330      	movs	r3, #48	; 0x30
 8012c02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012dac <_svfiprintf_r+0x1ec>
 8012c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c0a:	f04f 0901 	mov.w	r9, #1
 8012c0e:	4623      	mov	r3, r4
 8012c10:	469a      	mov	sl, r3
 8012c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c16:	b10a      	cbz	r2, 8012c1c <_svfiprintf_r+0x5c>
 8012c18:	2a25      	cmp	r2, #37	; 0x25
 8012c1a:	d1f9      	bne.n	8012c10 <_svfiprintf_r+0x50>
 8012c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8012c20:	d00b      	beq.n	8012c3a <_svfiprintf_r+0x7a>
 8012c22:	465b      	mov	r3, fp
 8012c24:	4622      	mov	r2, r4
 8012c26:	4629      	mov	r1, r5
 8012c28:	4638      	mov	r0, r7
 8012c2a:	f7ff ff6e 	bl	8012b0a <__ssputs_r>
 8012c2e:	3001      	adds	r0, #1
 8012c30:	f000 80aa 	beq.w	8012d88 <_svfiprintf_r+0x1c8>
 8012c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c36:	445a      	add	r2, fp
 8012c38:	9209      	str	r2, [sp, #36]	; 0x24
 8012c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f000 80a2 	beq.w	8012d88 <_svfiprintf_r+0x1c8>
 8012c44:	2300      	movs	r3, #0
 8012c46:	f04f 32ff 	mov.w	r2, #4294967295
 8012c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c4e:	f10a 0a01 	add.w	sl, sl, #1
 8012c52:	9304      	str	r3, [sp, #16]
 8012c54:	9307      	str	r3, [sp, #28]
 8012c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8012c5c:	4654      	mov	r4, sl
 8012c5e:	2205      	movs	r2, #5
 8012c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c64:	4851      	ldr	r0, [pc, #324]	; (8012dac <_svfiprintf_r+0x1ec>)
 8012c66:	f7ed facb 	bl	8000200 <memchr>
 8012c6a:	9a04      	ldr	r2, [sp, #16]
 8012c6c:	b9d8      	cbnz	r0, 8012ca6 <_svfiprintf_r+0xe6>
 8012c6e:	06d0      	lsls	r0, r2, #27
 8012c70:	bf44      	itt	mi
 8012c72:	2320      	movmi	r3, #32
 8012c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c78:	0711      	lsls	r1, r2, #28
 8012c7a:	bf44      	itt	mi
 8012c7c:	232b      	movmi	r3, #43	; 0x2b
 8012c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c82:	f89a 3000 	ldrb.w	r3, [sl]
 8012c86:	2b2a      	cmp	r3, #42	; 0x2a
 8012c88:	d015      	beq.n	8012cb6 <_svfiprintf_r+0xf6>
 8012c8a:	9a07      	ldr	r2, [sp, #28]
 8012c8c:	4654      	mov	r4, sl
 8012c8e:	2000      	movs	r0, #0
 8012c90:	f04f 0c0a 	mov.w	ip, #10
 8012c94:	4621      	mov	r1, r4
 8012c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c9a:	3b30      	subs	r3, #48	; 0x30
 8012c9c:	2b09      	cmp	r3, #9
 8012c9e:	d94e      	bls.n	8012d3e <_svfiprintf_r+0x17e>
 8012ca0:	b1b0      	cbz	r0, 8012cd0 <_svfiprintf_r+0x110>
 8012ca2:	9207      	str	r2, [sp, #28]
 8012ca4:	e014      	b.n	8012cd0 <_svfiprintf_r+0x110>
 8012ca6:	eba0 0308 	sub.w	r3, r0, r8
 8012caa:	fa09 f303 	lsl.w	r3, r9, r3
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	9304      	str	r3, [sp, #16]
 8012cb2:	46a2      	mov	sl, r4
 8012cb4:	e7d2      	b.n	8012c5c <_svfiprintf_r+0x9c>
 8012cb6:	9b03      	ldr	r3, [sp, #12]
 8012cb8:	1d19      	adds	r1, r3, #4
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	9103      	str	r1, [sp, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	bfbb      	ittet	lt
 8012cc2:	425b      	neglt	r3, r3
 8012cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8012cc8:	9307      	strge	r3, [sp, #28]
 8012cca:	9307      	strlt	r3, [sp, #28]
 8012ccc:	bfb8      	it	lt
 8012cce:	9204      	strlt	r2, [sp, #16]
 8012cd0:	7823      	ldrb	r3, [r4, #0]
 8012cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8012cd4:	d10c      	bne.n	8012cf0 <_svfiprintf_r+0x130>
 8012cd6:	7863      	ldrb	r3, [r4, #1]
 8012cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8012cda:	d135      	bne.n	8012d48 <_svfiprintf_r+0x188>
 8012cdc:	9b03      	ldr	r3, [sp, #12]
 8012cde:	1d1a      	adds	r2, r3, #4
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	9203      	str	r2, [sp, #12]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	bfb8      	it	lt
 8012ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cec:	3402      	adds	r4, #2
 8012cee:	9305      	str	r3, [sp, #20]
 8012cf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012dbc <_svfiprintf_r+0x1fc>
 8012cf4:	7821      	ldrb	r1, [r4, #0]
 8012cf6:	2203      	movs	r2, #3
 8012cf8:	4650      	mov	r0, sl
 8012cfa:	f7ed fa81 	bl	8000200 <memchr>
 8012cfe:	b140      	cbz	r0, 8012d12 <_svfiprintf_r+0x152>
 8012d00:	2340      	movs	r3, #64	; 0x40
 8012d02:	eba0 000a 	sub.w	r0, r0, sl
 8012d06:	fa03 f000 	lsl.w	r0, r3, r0
 8012d0a:	9b04      	ldr	r3, [sp, #16]
 8012d0c:	4303      	orrs	r3, r0
 8012d0e:	3401      	adds	r4, #1
 8012d10:	9304      	str	r3, [sp, #16]
 8012d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d16:	4826      	ldr	r0, [pc, #152]	; (8012db0 <_svfiprintf_r+0x1f0>)
 8012d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d1c:	2206      	movs	r2, #6
 8012d1e:	f7ed fa6f 	bl	8000200 <memchr>
 8012d22:	2800      	cmp	r0, #0
 8012d24:	d038      	beq.n	8012d98 <_svfiprintf_r+0x1d8>
 8012d26:	4b23      	ldr	r3, [pc, #140]	; (8012db4 <_svfiprintf_r+0x1f4>)
 8012d28:	bb1b      	cbnz	r3, 8012d72 <_svfiprintf_r+0x1b2>
 8012d2a:	9b03      	ldr	r3, [sp, #12]
 8012d2c:	3307      	adds	r3, #7
 8012d2e:	f023 0307 	bic.w	r3, r3, #7
 8012d32:	3308      	adds	r3, #8
 8012d34:	9303      	str	r3, [sp, #12]
 8012d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d38:	4433      	add	r3, r6
 8012d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d3c:	e767      	b.n	8012c0e <_svfiprintf_r+0x4e>
 8012d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d42:	460c      	mov	r4, r1
 8012d44:	2001      	movs	r0, #1
 8012d46:	e7a5      	b.n	8012c94 <_svfiprintf_r+0xd4>
 8012d48:	2300      	movs	r3, #0
 8012d4a:	3401      	adds	r4, #1
 8012d4c:	9305      	str	r3, [sp, #20]
 8012d4e:	4619      	mov	r1, r3
 8012d50:	f04f 0c0a 	mov.w	ip, #10
 8012d54:	4620      	mov	r0, r4
 8012d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d5a:	3a30      	subs	r2, #48	; 0x30
 8012d5c:	2a09      	cmp	r2, #9
 8012d5e:	d903      	bls.n	8012d68 <_svfiprintf_r+0x1a8>
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d0c5      	beq.n	8012cf0 <_svfiprintf_r+0x130>
 8012d64:	9105      	str	r1, [sp, #20]
 8012d66:	e7c3      	b.n	8012cf0 <_svfiprintf_r+0x130>
 8012d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e7f0      	b.n	8012d54 <_svfiprintf_r+0x194>
 8012d72:	ab03      	add	r3, sp, #12
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	462a      	mov	r2, r5
 8012d78:	4b0f      	ldr	r3, [pc, #60]	; (8012db8 <_svfiprintf_r+0x1f8>)
 8012d7a:	a904      	add	r1, sp, #16
 8012d7c:	4638      	mov	r0, r7
 8012d7e:	f3af 8000 	nop.w
 8012d82:	1c42      	adds	r2, r0, #1
 8012d84:	4606      	mov	r6, r0
 8012d86:	d1d6      	bne.n	8012d36 <_svfiprintf_r+0x176>
 8012d88:	89ab      	ldrh	r3, [r5, #12]
 8012d8a:	065b      	lsls	r3, r3, #25
 8012d8c:	f53f af2c 	bmi.w	8012be8 <_svfiprintf_r+0x28>
 8012d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d92:	b01d      	add	sp, #116	; 0x74
 8012d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d98:	ab03      	add	r3, sp, #12
 8012d9a:	9300      	str	r3, [sp, #0]
 8012d9c:	462a      	mov	r2, r5
 8012d9e:	4b06      	ldr	r3, [pc, #24]	; (8012db8 <_svfiprintf_r+0x1f8>)
 8012da0:	a904      	add	r1, sp, #16
 8012da2:	4638      	mov	r0, r7
 8012da4:	f000 fa4c 	bl	8013240 <_printf_i>
 8012da8:	e7eb      	b.n	8012d82 <_svfiprintf_r+0x1c2>
 8012daa:	bf00      	nop
 8012dac:	080144fc 	.word	0x080144fc
 8012db0:	08014506 	.word	0x08014506
 8012db4:	00000000 	.word	0x00000000
 8012db8:	08012b0b 	.word	0x08012b0b
 8012dbc:	08014502 	.word	0x08014502

08012dc0 <_sungetc_r>:
 8012dc0:	b538      	push	{r3, r4, r5, lr}
 8012dc2:	1c4b      	adds	r3, r1, #1
 8012dc4:	4614      	mov	r4, r2
 8012dc6:	d103      	bne.n	8012dd0 <_sungetc_r+0x10>
 8012dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8012dcc:	4628      	mov	r0, r5
 8012dce:	bd38      	pop	{r3, r4, r5, pc}
 8012dd0:	8993      	ldrh	r3, [r2, #12]
 8012dd2:	f023 0320 	bic.w	r3, r3, #32
 8012dd6:	8193      	strh	r3, [r2, #12]
 8012dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012dda:	6852      	ldr	r2, [r2, #4]
 8012ddc:	b2cd      	uxtb	r5, r1
 8012dde:	b18b      	cbz	r3, 8012e04 <_sungetc_r+0x44>
 8012de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012de2:	4293      	cmp	r3, r2
 8012de4:	dd08      	ble.n	8012df8 <_sungetc_r+0x38>
 8012de6:	6823      	ldr	r3, [r4, #0]
 8012de8:	1e5a      	subs	r2, r3, #1
 8012dea:	6022      	str	r2, [r4, #0]
 8012dec:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012df0:	6863      	ldr	r3, [r4, #4]
 8012df2:	3301      	adds	r3, #1
 8012df4:	6063      	str	r3, [r4, #4]
 8012df6:	e7e9      	b.n	8012dcc <_sungetc_r+0xc>
 8012df8:	4621      	mov	r1, r4
 8012dfa:	f000 fd61 	bl	80138c0 <__submore>
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	d0f1      	beq.n	8012de6 <_sungetc_r+0x26>
 8012e02:	e7e1      	b.n	8012dc8 <_sungetc_r+0x8>
 8012e04:	6921      	ldr	r1, [r4, #16]
 8012e06:	6823      	ldr	r3, [r4, #0]
 8012e08:	b151      	cbz	r1, 8012e20 <_sungetc_r+0x60>
 8012e0a:	4299      	cmp	r1, r3
 8012e0c:	d208      	bcs.n	8012e20 <_sungetc_r+0x60>
 8012e0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012e12:	42a9      	cmp	r1, r5
 8012e14:	d104      	bne.n	8012e20 <_sungetc_r+0x60>
 8012e16:	3b01      	subs	r3, #1
 8012e18:	3201      	adds	r2, #1
 8012e1a:	6023      	str	r3, [r4, #0]
 8012e1c:	6062      	str	r2, [r4, #4]
 8012e1e:	e7d5      	b.n	8012dcc <_sungetc_r+0xc>
 8012e20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e28:	6363      	str	r3, [r4, #52]	; 0x34
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8012e2e:	4623      	mov	r3, r4
 8012e30:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	2301      	movs	r3, #1
 8012e38:	e7dc      	b.n	8012df4 <_sungetc_r+0x34>

08012e3a <__ssrefill_r>:
 8012e3a:	b510      	push	{r4, lr}
 8012e3c:	460c      	mov	r4, r1
 8012e3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012e40:	b169      	cbz	r1, 8012e5e <__ssrefill_r+0x24>
 8012e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e46:	4299      	cmp	r1, r3
 8012e48:	d001      	beq.n	8012e4e <__ssrefill_r+0x14>
 8012e4a:	f7fd f817 	bl	800fe7c <_free_r>
 8012e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e50:	6063      	str	r3, [r4, #4]
 8012e52:	2000      	movs	r0, #0
 8012e54:	6360      	str	r0, [r4, #52]	; 0x34
 8012e56:	b113      	cbz	r3, 8012e5e <__ssrefill_r+0x24>
 8012e58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012e5a:	6023      	str	r3, [r4, #0]
 8012e5c:	bd10      	pop	{r4, pc}
 8012e5e:	6923      	ldr	r3, [r4, #16]
 8012e60:	6023      	str	r3, [r4, #0]
 8012e62:	2300      	movs	r3, #0
 8012e64:	6063      	str	r3, [r4, #4]
 8012e66:	89a3      	ldrh	r3, [r4, #12]
 8012e68:	f043 0320 	orr.w	r3, r3, #32
 8012e6c:	81a3      	strh	r3, [r4, #12]
 8012e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e72:	e7f3      	b.n	8012e5c <__ssrefill_r+0x22>

08012e74 <__ssvfiscanf_r>:
 8012e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e78:	460c      	mov	r4, r1
 8012e7a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012e7e:	2100      	movs	r1, #0
 8012e80:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012e84:	49a6      	ldr	r1, [pc, #664]	; (8013120 <__ssvfiscanf_r+0x2ac>)
 8012e86:	91a0      	str	r1, [sp, #640]	; 0x280
 8012e88:	f10d 0804 	add.w	r8, sp, #4
 8012e8c:	49a5      	ldr	r1, [pc, #660]	; (8013124 <__ssvfiscanf_r+0x2b0>)
 8012e8e:	4fa6      	ldr	r7, [pc, #664]	; (8013128 <__ssvfiscanf_r+0x2b4>)
 8012e90:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801312c <__ssvfiscanf_r+0x2b8>
 8012e94:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012e98:	4606      	mov	r6, r0
 8012e9a:	91a1      	str	r1, [sp, #644]	; 0x284
 8012e9c:	9300      	str	r3, [sp, #0]
 8012e9e:	7813      	ldrb	r3, [r2, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f000 815a 	beq.w	801315a <__ssvfiscanf_r+0x2e6>
 8012ea6:	5dd9      	ldrb	r1, [r3, r7]
 8012ea8:	f011 0108 	ands.w	r1, r1, #8
 8012eac:	f102 0501 	add.w	r5, r2, #1
 8012eb0:	d019      	beq.n	8012ee6 <__ssvfiscanf_r+0x72>
 8012eb2:	6863      	ldr	r3, [r4, #4]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	dd0f      	ble.n	8012ed8 <__ssvfiscanf_r+0x64>
 8012eb8:	6823      	ldr	r3, [r4, #0]
 8012eba:	781a      	ldrb	r2, [r3, #0]
 8012ebc:	5cba      	ldrb	r2, [r7, r2]
 8012ebe:	0712      	lsls	r2, r2, #28
 8012ec0:	d401      	bmi.n	8012ec6 <__ssvfiscanf_r+0x52>
 8012ec2:	462a      	mov	r2, r5
 8012ec4:	e7eb      	b.n	8012e9e <__ssvfiscanf_r+0x2a>
 8012ec6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012ec8:	3201      	adds	r2, #1
 8012eca:	9245      	str	r2, [sp, #276]	; 0x114
 8012ecc:	6862      	ldr	r2, [r4, #4]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	3a01      	subs	r2, #1
 8012ed2:	6062      	str	r2, [r4, #4]
 8012ed4:	6023      	str	r3, [r4, #0]
 8012ed6:	e7ec      	b.n	8012eb2 <__ssvfiscanf_r+0x3e>
 8012ed8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012eda:	4621      	mov	r1, r4
 8012edc:	4630      	mov	r0, r6
 8012ede:	4798      	blx	r3
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	d0e9      	beq.n	8012eb8 <__ssvfiscanf_r+0x44>
 8012ee4:	e7ed      	b.n	8012ec2 <__ssvfiscanf_r+0x4e>
 8012ee6:	2b25      	cmp	r3, #37	; 0x25
 8012ee8:	d012      	beq.n	8012f10 <__ssvfiscanf_r+0x9c>
 8012eea:	469a      	mov	sl, r3
 8012eec:	6863      	ldr	r3, [r4, #4]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f340 8091 	ble.w	8013016 <__ssvfiscanf_r+0x1a2>
 8012ef4:	6822      	ldr	r2, [r4, #0]
 8012ef6:	7813      	ldrb	r3, [r2, #0]
 8012ef8:	4553      	cmp	r3, sl
 8012efa:	f040 812e 	bne.w	801315a <__ssvfiscanf_r+0x2e6>
 8012efe:	6863      	ldr	r3, [r4, #4]
 8012f00:	3b01      	subs	r3, #1
 8012f02:	6063      	str	r3, [r4, #4]
 8012f04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012f06:	3201      	adds	r2, #1
 8012f08:	3301      	adds	r3, #1
 8012f0a:	6022      	str	r2, [r4, #0]
 8012f0c:	9345      	str	r3, [sp, #276]	; 0x114
 8012f0e:	e7d8      	b.n	8012ec2 <__ssvfiscanf_r+0x4e>
 8012f10:	9141      	str	r1, [sp, #260]	; 0x104
 8012f12:	9143      	str	r1, [sp, #268]	; 0x10c
 8012f14:	7853      	ldrb	r3, [r2, #1]
 8012f16:	2b2a      	cmp	r3, #42	; 0x2a
 8012f18:	bf02      	ittt	eq
 8012f1a:	2310      	moveq	r3, #16
 8012f1c:	1c95      	addeq	r5, r2, #2
 8012f1e:	9341      	streq	r3, [sp, #260]	; 0x104
 8012f20:	220a      	movs	r2, #10
 8012f22:	46aa      	mov	sl, r5
 8012f24:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012f28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012f2c:	2b09      	cmp	r3, #9
 8012f2e:	d91d      	bls.n	8012f6c <__ssvfiscanf_r+0xf8>
 8012f30:	487e      	ldr	r0, [pc, #504]	; (801312c <__ssvfiscanf_r+0x2b8>)
 8012f32:	2203      	movs	r2, #3
 8012f34:	f7ed f964 	bl	8000200 <memchr>
 8012f38:	b140      	cbz	r0, 8012f4c <__ssvfiscanf_r+0xd8>
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	eba0 0009 	sub.w	r0, r0, r9
 8012f40:	fa03 f000 	lsl.w	r0, r3, r0
 8012f44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012f46:	4318      	orrs	r0, r3
 8012f48:	9041      	str	r0, [sp, #260]	; 0x104
 8012f4a:	4655      	mov	r5, sl
 8012f4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012f50:	2b78      	cmp	r3, #120	; 0x78
 8012f52:	d806      	bhi.n	8012f62 <__ssvfiscanf_r+0xee>
 8012f54:	2b57      	cmp	r3, #87	; 0x57
 8012f56:	d810      	bhi.n	8012f7a <__ssvfiscanf_r+0x106>
 8012f58:	2b25      	cmp	r3, #37	; 0x25
 8012f5a:	d0c6      	beq.n	8012eea <__ssvfiscanf_r+0x76>
 8012f5c:	d856      	bhi.n	801300c <__ssvfiscanf_r+0x198>
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d064      	beq.n	801302c <__ssvfiscanf_r+0x1b8>
 8012f62:	2303      	movs	r3, #3
 8012f64:	9347      	str	r3, [sp, #284]	; 0x11c
 8012f66:	230a      	movs	r3, #10
 8012f68:	9342      	str	r3, [sp, #264]	; 0x108
 8012f6a:	e071      	b.n	8013050 <__ssvfiscanf_r+0x1dc>
 8012f6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012f6e:	fb02 1103 	mla	r1, r2, r3, r1
 8012f72:	3930      	subs	r1, #48	; 0x30
 8012f74:	9143      	str	r1, [sp, #268]	; 0x10c
 8012f76:	4655      	mov	r5, sl
 8012f78:	e7d3      	b.n	8012f22 <__ssvfiscanf_r+0xae>
 8012f7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012f7e:	2a20      	cmp	r2, #32
 8012f80:	d8ef      	bhi.n	8012f62 <__ssvfiscanf_r+0xee>
 8012f82:	a101      	add	r1, pc, #4	; (adr r1, 8012f88 <__ssvfiscanf_r+0x114>)
 8012f84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012f88:	0801303b 	.word	0x0801303b
 8012f8c:	08012f63 	.word	0x08012f63
 8012f90:	08012f63 	.word	0x08012f63
 8012f94:	08013099 	.word	0x08013099
 8012f98:	08012f63 	.word	0x08012f63
 8012f9c:	08012f63 	.word	0x08012f63
 8012fa0:	08012f63 	.word	0x08012f63
 8012fa4:	08012f63 	.word	0x08012f63
 8012fa8:	08012f63 	.word	0x08012f63
 8012fac:	08012f63 	.word	0x08012f63
 8012fb0:	08012f63 	.word	0x08012f63
 8012fb4:	080130af 	.word	0x080130af
 8012fb8:	08013085 	.word	0x08013085
 8012fbc:	08013013 	.word	0x08013013
 8012fc0:	08013013 	.word	0x08013013
 8012fc4:	08013013 	.word	0x08013013
 8012fc8:	08012f63 	.word	0x08012f63
 8012fcc:	08013089 	.word	0x08013089
 8012fd0:	08012f63 	.word	0x08012f63
 8012fd4:	08012f63 	.word	0x08012f63
 8012fd8:	08012f63 	.word	0x08012f63
 8012fdc:	08012f63 	.word	0x08012f63
 8012fe0:	080130bf 	.word	0x080130bf
 8012fe4:	08013091 	.word	0x08013091
 8012fe8:	08013033 	.word	0x08013033
 8012fec:	08012f63 	.word	0x08012f63
 8012ff0:	08012f63 	.word	0x08012f63
 8012ff4:	080130bb 	.word	0x080130bb
 8012ff8:	08012f63 	.word	0x08012f63
 8012ffc:	08013085 	.word	0x08013085
 8013000:	08012f63 	.word	0x08012f63
 8013004:	08012f63 	.word	0x08012f63
 8013008:	0801303b 	.word	0x0801303b
 801300c:	3b45      	subs	r3, #69	; 0x45
 801300e:	2b02      	cmp	r3, #2
 8013010:	d8a7      	bhi.n	8012f62 <__ssvfiscanf_r+0xee>
 8013012:	2305      	movs	r3, #5
 8013014:	e01b      	b.n	801304e <__ssvfiscanf_r+0x1da>
 8013016:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013018:	4621      	mov	r1, r4
 801301a:	4630      	mov	r0, r6
 801301c:	4798      	blx	r3
 801301e:	2800      	cmp	r0, #0
 8013020:	f43f af68 	beq.w	8012ef4 <__ssvfiscanf_r+0x80>
 8013024:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013026:	2800      	cmp	r0, #0
 8013028:	f040 808d 	bne.w	8013146 <__ssvfiscanf_r+0x2d2>
 801302c:	f04f 30ff 	mov.w	r0, #4294967295
 8013030:	e08f      	b.n	8013152 <__ssvfiscanf_r+0x2de>
 8013032:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013034:	f042 0220 	orr.w	r2, r2, #32
 8013038:	9241      	str	r2, [sp, #260]	; 0x104
 801303a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801303c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013040:	9241      	str	r2, [sp, #260]	; 0x104
 8013042:	2210      	movs	r2, #16
 8013044:	2b6f      	cmp	r3, #111	; 0x6f
 8013046:	9242      	str	r2, [sp, #264]	; 0x108
 8013048:	bf34      	ite	cc
 801304a:	2303      	movcc	r3, #3
 801304c:	2304      	movcs	r3, #4
 801304e:	9347      	str	r3, [sp, #284]	; 0x11c
 8013050:	6863      	ldr	r3, [r4, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	dd42      	ble.n	80130dc <__ssvfiscanf_r+0x268>
 8013056:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013058:	0659      	lsls	r1, r3, #25
 801305a:	d404      	bmi.n	8013066 <__ssvfiscanf_r+0x1f2>
 801305c:	6823      	ldr	r3, [r4, #0]
 801305e:	781a      	ldrb	r2, [r3, #0]
 8013060:	5cba      	ldrb	r2, [r7, r2]
 8013062:	0712      	lsls	r2, r2, #28
 8013064:	d441      	bmi.n	80130ea <__ssvfiscanf_r+0x276>
 8013066:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013068:	2b02      	cmp	r3, #2
 801306a:	dc50      	bgt.n	801310e <__ssvfiscanf_r+0x29a>
 801306c:	466b      	mov	r3, sp
 801306e:	4622      	mov	r2, r4
 8013070:	a941      	add	r1, sp, #260	; 0x104
 8013072:	4630      	mov	r0, r6
 8013074:	f000 fa0a 	bl	801348c <_scanf_chars>
 8013078:	2801      	cmp	r0, #1
 801307a:	d06e      	beq.n	801315a <__ssvfiscanf_r+0x2e6>
 801307c:	2802      	cmp	r0, #2
 801307e:	f47f af20 	bne.w	8012ec2 <__ssvfiscanf_r+0x4e>
 8013082:	e7cf      	b.n	8013024 <__ssvfiscanf_r+0x1b0>
 8013084:	220a      	movs	r2, #10
 8013086:	e7dd      	b.n	8013044 <__ssvfiscanf_r+0x1d0>
 8013088:	2300      	movs	r3, #0
 801308a:	9342      	str	r3, [sp, #264]	; 0x108
 801308c:	2303      	movs	r3, #3
 801308e:	e7de      	b.n	801304e <__ssvfiscanf_r+0x1da>
 8013090:	2308      	movs	r3, #8
 8013092:	9342      	str	r3, [sp, #264]	; 0x108
 8013094:	2304      	movs	r3, #4
 8013096:	e7da      	b.n	801304e <__ssvfiscanf_r+0x1da>
 8013098:	4629      	mov	r1, r5
 801309a:	4640      	mov	r0, r8
 801309c:	f000 fb64 	bl	8013768 <__sccl>
 80130a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80130a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130a6:	9341      	str	r3, [sp, #260]	; 0x104
 80130a8:	4605      	mov	r5, r0
 80130aa:	2301      	movs	r3, #1
 80130ac:	e7cf      	b.n	801304e <__ssvfiscanf_r+0x1da>
 80130ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80130b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130b4:	9341      	str	r3, [sp, #260]	; 0x104
 80130b6:	2300      	movs	r3, #0
 80130b8:	e7c9      	b.n	801304e <__ssvfiscanf_r+0x1da>
 80130ba:	2302      	movs	r3, #2
 80130bc:	e7c7      	b.n	801304e <__ssvfiscanf_r+0x1da>
 80130be:	9841      	ldr	r0, [sp, #260]	; 0x104
 80130c0:	06c3      	lsls	r3, r0, #27
 80130c2:	f53f aefe 	bmi.w	8012ec2 <__ssvfiscanf_r+0x4e>
 80130c6:	9b00      	ldr	r3, [sp, #0]
 80130c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80130ca:	1d19      	adds	r1, r3, #4
 80130cc:	9100      	str	r1, [sp, #0]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f010 0f01 	tst.w	r0, #1
 80130d4:	bf14      	ite	ne
 80130d6:	801a      	strhne	r2, [r3, #0]
 80130d8:	601a      	streq	r2, [r3, #0]
 80130da:	e6f2      	b.n	8012ec2 <__ssvfiscanf_r+0x4e>
 80130dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130de:	4621      	mov	r1, r4
 80130e0:	4630      	mov	r0, r6
 80130e2:	4798      	blx	r3
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d0b6      	beq.n	8013056 <__ssvfiscanf_r+0x1e2>
 80130e8:	e79c      	b.n	8013024 <__ssvfiscanf_r+0x1b0>
 80130ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80130ec:	3201      	adds	r2, #1
 80130ee:	9245      	str	r2, [sp, #276]	; 0x114
 80130f0:	6862      	ldr	r2, [r4, #4]
 80130f2:	3a01      	subs	r2, #1
 80130f4:	2a00      	cmp	r2, #0
 80130f6:	6062      	str	r2, [r4, #4]
 80130f8:	dd02      	ble.n	8013100 <__ssvfiscanf_r+0x28c>
 80130fa:	3301      	adds	r3, #1
 80130fc:	6023      	str	r3, [r4, #0]
 80130fe:	e7ad      	b.n	801305c <__ssvfiscanf_r+0x1e8>
 8013100:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013102:	4621      	mov	r1, r4
 8013104:	4630      	mov	r0, r6
 8013106:	4798      	blx	r3
 8013108:	2800      	cmp	r0, #0
 801310a:	d0a7      	beq.n	801305c <__ssvfiscanf_r+0x1e8>
 801310c:	e78a      	b.n	8013024 <__ssvfiscanf_r+0x1b0>
 801310e:	2b04      	cmp	r3, #4
 8013110:	dc0e      	bgt.n	8013130 <__ssvfiscanf_r+0x2bc>
 8013112:	466b      	mov	r3, sp
 8013114:	4622      	mov	r2, r4
 8013116:	a941      	add	r1, sp, #260	; 0x104
 8013118:	4630      	mov	r0, r6
 801311a:	f000 fa11 	bl	8013540 <_scanf_i>
 801311e:	e7ab      	b.n	8013078 <__ssvfiscanf_r+0x204>
 8013120:	08012dc1 	.word	0x08012dc1
 8013124:	08012e3b 	.word	0x08012e3b
 8013128:	08014199 	.word	0x08014199
 801312c:	08014502 	.word	0x08014502
 8013130:	4b0b      	ldr	r3, [pc, #44]	; (8013160 <__ssvfiscanf_r+0x2ec>)
 8013132:	2b00      	cmp	r3, #0
 8013134:	f43f aec5 	beq.w	8012ec2 <__ssvfiscanf_r+0x4e>
 8013138:	466b      	mov	r3, sp
 801313a:	4622      	mov	r2, r4
 801313c:	a941      	add	r1, sp, #260	; 0x104
 801313e:	4630      	mov	r0, r6
 8013140:	f7fc ff7c 	bl	801003c <_scanf_float>
 8013144:	e798      	b.n	8013078 <__ssvfiscanf_r+0x204>
 8013146:	89a3      	ldrh	r3, [r4, #12]
 8013148:	f013 0f40 	tst.w	r3, #64	; 0x40
 801314c:	bf18      	it	ne
 801314e:	f04f 30ff 	movne.w	r0, #4294967295
 8013152:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801315a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801315c:	e7f9      	b.n	8013152 <__ssvfiscanf_r+0x2de>
 801315e:	bf00      	nop
 8013160:	0801003d 	.word	0x0801003d

08013164 <_printf_common>:
 8013164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013168:	4616      	mov	r6, r2
 801316a:	4699      	mov	r9, r3
 801316c:	688a      	ldr	r2, [r1, #8]
 801316e:	690b      	ldr	r3, [r1, #16]
 8013170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013174:	4293      	cmp	r3, r2
 8013176:	bfb8      	it	lt
 8013178:	4613      	movlt	r3, r2
 801317a:	6033      	str	r3, [r6, #0]
 801317c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013180:	4607      	mov	r7, r0
 8013182:	460c      	mov	r4, r1
 8013184:	b10a      	cbz	r2, 801318a <_printf_common+0x26>
 8013186:	3301      	adds	r3, #1
 8013188:	6033      	str	r3, [r6, #0]
 801318a:	6823      	ldr	r3, [r4, #0]
 801318c:	0699      	lsls	r1, r3, #26
 801318e:	bf42      	ittt	mi
 8013190:	6833      	ldrmi	r3, [r6, #0]
 8013192:	3302      	addmi	r3, #2
 8013194:	6033      	strmi	r3, [r6, #0]
 8013196:	6825      	ldr	r5, [r4, #0]
 8013198:	f015 0506 	ands.w	r5, r5, #6
 801319c:	d106      	bne.n	80131ac <_printf_common+0x48>
 801319e:	f104 0a19 	add.w	sl, r4, #25
 80131a2:	68e3      	ldr	r3, [r4, #12]
 80131a4:	6832      	ldr	r2, [r6, #0]
 80131a6:	1a9b      	subs	r3, r3, r2
 80131a8:	42ab      	cmp	r3, r5
 80131aa:	dc26      	bgt.n	80131fa <_printf_common+0x96>
 80131ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80131b0:	1e13      	subs	r3, r2, #0
 80131b2:	6822      	ldr	r2, [r4, #0]
 80131b4:	bf18      	it	ne
 80131b6:	2301      	movne	r3, #1
 80131b8:	0692      	lsls	r2, r2, #26
 80131ba:	d42b      	bmi.n	8013214 <_printf_common+0xb0>
 80131bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131c0:	4649      	mov	r1, r9
 80131c2:	4638      	mov	r0, r7
 80131c4:	47c0      	blx	r8
 80131c6:	3001      	adds	r0, #1
 80131c8:	d01e      	beq.n	8013208 <_printf_common+0xa4>
 80131ca:	6823      	ldr	r3, [r4, #0]
 80131cc:	68e5      	ldr	r5, [r4, #12]
 80131ce:	6832      	ldr	r2, [r6, #0]
 80131d0:	f003 0306 	and.w	r3, r3, #6
 80131d4:	2b04      	cmp	r3, #4
 80131d6:	bf08      	it	eq
 80131d8:	1aad      	subeq	r5, r5, r2
 80131da:	68a3      	ldr	r3, [r4, #8]
 80131dc:	6922      	ldr	r2, [r4, #16]
 80131de:	bf0c      	ite	eq
 80131e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80131e4:	2500      	movne	r5, #0
 80131e6:	4293      	cmp	r3, r2
 80131e8:	bfc4      	itt	gt
 80131ea:	1a9b      	subgt	r3, r3, r2
 80131ec:	18ed      	addgt	r5, r5, r3
 80131ee:	2600      	movs	r6, #0
 80131f0:	341a      	adds	r4, #26
 80131f2:	42b5      	cmp	r5, r6
 80131f4:	d11a      	bne.n	801322c <_printf_common+0xc8>
 80131f6:	2000      	movs	r0, #0
 80131f8:	e008      	b.n	801320c <_printf_common+0xa8>
 80131fa:	2301      	movs	r3, #1
 80131fc:	4652      	mov	r2, sl
 80131fe:	4649      	mov	r1, r9
 8013200:	4638      	mov	r0, r7
 8013202:	47c0      	blx	r8
 8013204:	3001      	adds	r0, #1
 8013206:	d103      	bne.n	8013210 <_printf_common+0xac>
 8013208:	f04f 30ff 	mov.w	r0, #4294967295
 801320c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013210:	3501      	adds	r5, #1
 8013212:	e7c6      	b.n	80131a2 <_printf_common+0x3e>
 8013214:	18e1      	adds	r1, r4, r3
 8013216:	1c5a      	adds	r2, r3, #1
 8013218:	2030      	movs	r0, #48	; 0x30
 801321a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801321e:	4422      	add	r2, r4
 8013220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013228:	3302      	adds	r3, #2
 801322a:	e7c7      	b.n	80131bc <_printf_common+0x58>
 801322c:	2301      	movs	r3, #1
 801322e:	4622      	mov	r2, r4
 8013230:	4649      	mov	r1, r9
 8013232:	4638      	mov	r0, r7
 8013234:	47c0      	blx	r8
 8013236:	3001      	adds	r0, #1
 8013238:	d0e6      	beq.n	8013208 <_printf_common+0xa4>
 801323a:	3601      	adds	r6, #1
 801323c:	e7d9      	b.n	80131f2 <_printf_common+0x8e>
	...

08013240 <_printf_i>:
 8013240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013244:	7e0f      	ldrb	r7, [r1, #24]
 8013246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013248:	2f78      	cmp	r7, #120	; 0x78
 801324a:	4691      	mov	r9, r2
 801324c:	4680      	mov	r8, r0
 801324e:	460c      	mov	r4, r1
 8013250:	469a      	mov	sl, r3
 8013252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013256:	d807      	bhi.n	8013268 <_printf_i+0x28>
 8013258:	2f62      	cmp	r7, #98	; 0x62
 801325a:	d80a      	bhi.n	8013272 <_printf_i+0x32>
 801325c:	2f00      	cmp	r7, #0
 801325e:	f000 80d8 	beq.w	8013412 <_printf_i+0x1d2>
 8013262:	2f58      	cmp	r7, #88	; 0x58
 8013264:	f000 80a3 	beq.w	80133ae <_printf_i+0x16e>
 8013268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801326c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013270:	e03a      	b.n	80132e8 <_printf_i+0xa8>
 8013272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013276:	2b15      	cmp	r3, #21
 8013278:	d8f6      	bhi.n	8013268 <_printf_i+0x28>
 801327a:	a101      	add	r1, pc, #4	; (adr r1, 8013280 <_printf_i+0x40>)
 801327c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013280:	080132d9 	.word	0x080132d9
 8013284:	080132ed 	.word	0x080132ed
 8013288:	08013269 	.word	0x08013269
 801328c:	08013269 	.word	0x08013269
 8013290:	08013269 	.word	0x08013269
 8013294:	08013269 	.word	0x08013269
 8013298:	080132ed 	.word	0x080132ed
 801329c:	08013269 	.word	0x08013269
 80132a0:	08013269 	.word	0x08013269
 80132a4:	08013269 	.word	0x08013269
 80132a8:	08013269 	.word	0x08013269
 80132ac:	080133f9 	.word	0x080133f9
 80132b0:	0801331d 	.word	0x0801331d
 80132b4:	080133db 	.word	0x080133db
 80132b8:	08013269 	.word	0x08013269
 80132bc:	08013269 	.word	0x08013269
 80132c0:	0801341b 	.word	0x0801341b
 80132c4:	08013269 	.word	0x08013269
 80132c8:	0801331d 	.word	0x0801331d
 80132cc:	08013269 	.word	0x08013269
 80132d0:	08013269 	.word	0x08013269
 80132d4:	080133e3 	.word	0x080133e3
 80132d8:	682b      	ldr	r3, [r5, #0]
 80132da:	1d1a      	adds	r2, r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	602a      	str	r2, [r5, #0]
 80132e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80132e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80132e8:	2301      	movs	r3, #1
 80132ea:	e0a3      	b.n	8013434 <_printf_i+0x1f4>
 80132ec:	6820      	ldr	r0, [r4, #0]
 80132ee:	6829      	ldr	r1, [r5, #0]
 80132f0:	0606      	lsls	r6, r0, #24
 80132f2:	f101 0304 	add.w	r3, r1, #4
 80132f6:	d50a      	bpl.n	801330e <_printf_i+0xce>
 80132f8:	680e      	ldr	r6, [r1, #0]
 80132fa:	602b      	str	r3, [r5, #0]
 80132fc:	2e00      	cmp	r6, #0
 80132fe:	da03      	bge.n	8013308 <_printf_i+0xc8>
 8013300:	232d      	movs	r3, #45	; 0x2d
 8013302:	4276      	negs	r6, r6
 8013304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013308:	485e      	ldr	r0, [pc, #376]	; (8013484 <_printf_i+0x244>)
 801330a:	230a      	movs	r3, #10
 801330c:	e019      	b.n	8013342 <_printf_i+0x102>
 801330e:	680e      	ldr	r6, [r1, #0]
 8013310:	602b      	str	r3, [r5, #0]
 8013312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013316:	bf18      	it	ne
 8013318:	b236      	sxthne	r6, r6
 801331a:	e7ef      	b.n	80132fc <_printf_i+0xbc>
 801331c:	682b      	ldr	r3, [r5, #0]
 801331e:	6820      	ldr	r0, [r4, #0]
 8013320:	1d19      	adds	r1, r3, #4
 8013322:	6029      	str	r1, [r5, #0]
 8013324:	0601      	lsls	r1, r0, #24
 8013326:	d501      	bpl.n	801332c <_printf_i+0xec>
 8013328:	681e      	ldr	r6, [r3, #0]
 801332a:	e002      	b.n	8013332 <_printf_i+0xf2>
 801332c:	0646      	lsls	r6, r0, #25
 801332e:	d5fb      	bpl.n	8013328 <_printf_i+0xe8>
 8013330:	881e      	ldrh	r6, [r3, #0]
 8013332:	4854      	ldr	r0, [pc, #336]	; (8013484 <_printf_i+0x244>)
 8013334:	2f6f      	cmp	r7, #111	; 0x6f
 8013336:	bf0c      	ite	eq
 8013338:	2308      	moveq	r3, #8
 801333a:	230a      	movne	r3, #10
 801333c:	2100      	movs	r1, #0
 801333e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013342:	6865      	ldr	r5, [r4, #4]
 8013344:	60a5      	str	r5, [r4, #8]
 8013346:	2d00      	cmp	r5, #0
 8013348:	bfa2      	ittt	ge
 801334a:	6821      	ldrge	r1, [r4, #0]
 801334c:	f021 0104 	bicge.w	r1, r1, #4
 8013350:	6021      	strge	r1, [r4, #0]
 8013352:	b90e      	cbnz	r6, 8013358 <_printf_i+0x118>
 8013354:	2d00      	cmp	r5, #0
 8013356:	d04d      	beq.n	80133f4 <_printf_i+0x1b4>
 8013358:	4615      	mov	r5, r2
 801335a:	fbb6 f1f3 	udiv	r1, r6, r3
 801335e:	fb03 6711 	mls	r7, r3, r1, r6
 8013362:	5dc7      	ldrb	r7, [r0, r7]
 8013364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013368:	4637      	mov	r7, r6
 801336a:	42bb      	cmp	r3, r7
 801336c:	460e      	mov	r6, r1
 801336e:	d9f4      	bls.n	801335a <_printf_i+0x11a>
 8013370:	2b08      	cmp	r3, #8
 8013372:	d10b      	bne.n	801338c <_printf_i+0x14c>
 8013374:	6823      	ldr	r3, [r4, #0]
 8013376:	07de      	lsls	r6, r3, #31
 8013378:	d508      	bpl.n	801338c <_printf_i+0x14c>
 801337a:	6923      	ldr	r3, [r4, #16]
 801337c:	6861      	ldr	r1, [r4, #4]
 801337e:	4299      	cmp	r1, r3
 8013380:	bfde      	ittt	le
 8013382:	2330      	movle	r3, #48	; 0x30
 8013384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013388:	f105 35ff 	addle.w	r5, r5, #4294967295
 801338c:	1b52      	subs	r2, r2, r5
 801338e:	6122      	str	r2, [r4, #16]
 8013390:	f8cd a000 	str.w	sl, [sp]
 8013394:	464b      	mov	r3, r9
 8013396:	aa03      	add	r2, sp, #12
 8013398:	4621      	mov	r1, r4
 801339a:	4640      	mov	r0, r8
 801339c:	f7ff fee2 	bl	8013164 <_printf_common>
 80133a0:	3001      	adds	r0, #1
 80133a2:	d14c      	bne.n	801343e <_printf_i+0x1fe>
 80133a4:	f04f 30ff 	mov.w	r0, #4294967295
 80133a8:	b004      	add	sp, #16
 80133aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ae:	4835      	ldr	r0, [pc, #212]	; (8013484 <_printf_i+0x244>)
 80133b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80133b4:	6829      	ldr	r1, [r5, #0]
 80133b6:	6823      	ldr	r3, [r4, #0]
 80133b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80133bc:	6029      	str	r1, [r5, #0]
 80133be:	061d      	lsls	r5, r3, #24
 80133c0:	d514      	bpl.n	80133ec <_printf_i+0x1ac>
 80133c2:	07df      	lsls	r7, r3, #31
 80133c4:	bf44      	itt	mi
 80133c6:	f043 0320 	orrmi.w	r3, r3, #32
 80133ca:	6023      	strmi	r3, [r4, #0]
 80133cc:	b91e      	cbnz	r6, 80133d6 <_printf_i+0x196>
 80133ce:	6823      	ldr	r3, [r4, #0]
 80133d0:	f023 0320 	bic.w	r3, r3, #32
 80133d4:	6023      	str	r3, [r4, #0]
 80133d6:	2310      	movs	r3, #16
 80133d8:	e7b0      	b.n	801333c <_printf_i+0xfc>
 80133da:	6823      	ldr	r3, [r4, #0]
 80133dc:	f043 0320 	orr.w	r3, r3, #32
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	2378      	movs	r3, #120	; 0x78
 80133e4:	4828      	ldr	r0, [pc, #160]	; (8013488 <_printf_i+0x248>)
 80133e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133ea:	e7e3      	b.n	80133b4 <_printf_i+0x174>
 80133ec:	0659      	lsls	r1, r3, #25
 80133ee:	bf48      	it	mi
 80133f0:	b2b6      	uxthmi	r6, r6
 80133f2:	e7e6      	b.n	80133c2 <_printf_i+0x182>
 80133f4:	4615      	mov	r5, r2
 80133f6:	e7bb      	b.n	8013370 <_printf_i+0x130>
 80133f8:	682b      	ldr	r3, [r5, #0]
 80133fa:	6826      	ldr	r6, [r4, #0]
 80133fc:	6961      	ldr	r1, [r4, #20]
 80133fe:	1d18      	adds	r0, r3, #4
 8013400:	6028      	str	r0, [r5, #0]
 8013402:	0635      	lsls	r5, r6, #24
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	d501      	bpl.n	801340c <_printf_i+0x1cc>
 8013408:	6019      	str	r1, [r3, #0]
 801340a:	e002      	b.n	8013412 <_printf_i+0x1d2>
 801340c:	0670      	lsls	r0, r6, #25
 801340e:	d5fb      	bpl.n	8013408 <_printf_i+0x1c8>
 8013410:	8019      	strh	r1, [r3, #0]
 8013412:	2300      	movs	r3, #0
 8013414:	6123      	str	r3, [r4, #16]
 8013416:	4615      	mov	r5, r2
 8013418:	e7ba      	b.n	8013390 <_printf_i+0x150>
 801341a:	682b      	ldr	r3, [r5, #0]
 801341c:	1d1a      	adds	r2, r3, #4
 801341e:	602a      	str	r2, [r5, #0]
 8013420:	681d      	ldr	r5, [r3, #0]
 8013422:	6862      	ldr	r2, [r4, #4]
 8013424:	2100      	movs	r1, #0
 8013426:	4628      	mov	r0, r5
 8013428:	f7ec feea 	bl	8000200 <memchr>
 801342c:	b108      	cbz	r0, 8013432 <_printf_i+0x1f2>
 801342e:	1b40      	subs	r0, r0, r5
 8013430:	6060      	str	r0, [r4, #4]
 8013432:	6863      	ldr	r3, [r4, #4]
 8013434:	6123      	str	r3, [r4, #16]
 8013436:	2300      	movs	r3, #0
 8013438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801343c:	e7a8      	b.n	8013390 <_printf_i+0x150>
 801343e:	6923      	ldr	r3, [r4, #16]
 8013440:	462a      	mov	r2, r5
 8013442:	4649      	mov	r1, r9
 8013444:	4640      	mov	r0, r8
 8013446:	47d0      	blx	sl
 8013448:	3001      	adds	r0, #1
 801344a:	d0ab      	beq.n	80133a4 <_printf_i+0x164>
 801344c:	6823      	ldr	r3, [r4, #0]
 801344e:	079b      	lsls	r3, r3, #30
 8013450:	d413      	bmi.n	801347a <_printf_i+0x23a>
 8013452:	68e0      	ldr	r0, [r4, #12]
 8013454:	9b03      	ldr	r3, [sp, #12]
 8013456:	4298      	cmp	r0, r3
 8013458:	bfb8      	it	lt
 801345a:	4618      	movlt	r0, r3
 801345c:	e7a4      	b.n	80133a8 <_printf_i+0x168>
 801345e:	2301      	movs	r3, #1
 8013460:	4632      	mov	r2, r6
 8013462:	4649      	mov	r1, r9
 8013464:	4640      	mov	r0, r8
 8013466:	47d0      	blx	sl
 8013468:	3001      	adds	r0, #1
 801346a:	d09b      	beq.n	80133a4 <_printf_i+0x164>
 801346c:	3501      	adds	r5, #1
 801346e:	68e3      	ldr	r3, [r4, #12]
 8013470:	9903      	ldr	r1, [sp, #12]
 8013472:	1a5b      	subs	r3, r3, r1
 8013474:	42ab      	cmp	r3, r5
 8013476:	dcf2      	bgt.n	801345e <_printf_i+0x21e>
 8013478:	e7eb      	b.n	8013452 <_printf_i+0x212>
 801347a:	2500      	movs	r5, #0
 801347c:	f104 0619 	add.w	r6, r4, #25
 8013480:	e7f5      	b.n	801346e <_printf_i+0x22e>
 8013482:	bf00      	nop
 8013484:	0801450d 	.word	0x0801450d
 8013488:	0801451e 	.word	0x0801451e

0801348c <_scanf_chars>:
 801348c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013490:	4615      	mov	r5, r2
 8013492:	688a      	ldr	r2, [r1, #8]
 8013494:	4680      	mov	r8, r0
 8013496:	460c      	mov	r4, r1
 8013498:	b932      	cbnz	r2, 80134a8 <_scanf_chars+0x1c>
 801349a:	698a      	ldr	r2, [r1, #24]
 801349c:	2a00      	cmp	r2, #0
 801349e:	bf0c      	ite	eq
 80134a0:	2201      	moveq	r2, #1
 80134a2:	f04f 32ff 	movne.w	r2, #4294967295
 80134a6:	608a      	str	r2, [r1, #8]
 80134a8:	6822      	ldr	r2, [r4, #0]
 80134aa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801353c <_scanf_chars+0xb0>
 80134ae:	06d1      	lsls	r1, r2, #27
 80134b0:	bf5f      	itttt	pl
 80134b2:	681a      	ldrpl	r2, [r3, #0]
 80134b4:	1d11      	addpl	r1, r2, #4
 80134b6:	6019      	strpl	r1, [r3, #0]
 80134b8:	6816      	ldrpl	r6, [r2, #0]
 80134ba:	2700      	movs	r7, #0
 80134bc:	69a0      	ldr	r0, [r4, #24]
 80134be:	b188      	cbz	r0, 80134e4 <_scanf_chars+0x58>
 80134c0:	2801      	cmp	r0, #1
 80134c2:	d107      	bne.n	80134d4 <_scanf_chars+0x48>
 80134c4:	682a      	ldr	r2, [r5, #0]
 80134c6:	7811      	ldrb	r1, [r2, #0]
 80134c8:	6962      	ldr	r2, [r4, #20]
 80134ca:	5c52      	ldrb	r2, [r2, r1]
 80134cc:	b952      	cbnz	r2, 80134e4 <_scanf_chars+0x58>
 80134ce:	2f00      	cmp	r7, #0
 80134d0:	d031      	beq.n	8013536 <_scanf_chars+0xaa>
 80134d2:	e022      	b.n	801351a <_scanf_chars+0x8e>
 80134d4:	2802      	cmp	r0, #2
 80134d6:	d120      	bne.n	801351a <_scanf_chars+0x8e>
 80134d8:	682b      	ldr	r3, [r5, #0]
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80134e0:	071b      	lsls	r3, r3, #28
 80134e2:	d41a      	bmi.n	801351a <_scanf_chars+0x8e>
 80134e4:	6823      	ldr	r3, [r4, #0]
 80134e6:	06da      	lsls	r2, r3, #27
 80134e8:	bf5e      	ittt	pl
 80134ea:	682b      	ldrpl	r3, [r5, #0]
 80134ec:	781b      	ldrbpl	r3, [r3, #0]
 80134ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80134f2:	682a      	ldr	r2, [r5, #0]
 80134f4:	686b      	ldr	r3, [r5, #4]
 80134f6:	3201      	adds	r2, #1
 80134f8:	602a      	str	r2, [r5, #0]
 80134fa:	68a2      	ldr	r2, [r4, #8]
 80134fc:	3b01      	subs	r3, #1
 80134fe:	3a01      	subs	r2, #1
 8013500:	606b      	str	r3, [r5, #4]
 8013502:	3701      	adds	r7, #1
 8013504:	60a2      	str	r2, [r4, #8]
 8013506:	b142      	cbz	r2, 801351a <_scanf_chars+0x8e>
 8013508:	2b00      	cmp	r3, #0
 801350a:	dcd7      	bgt.n	80134bc <_scanf_chars+0x30>
 801350c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013510:	4629      	mov	r1, r5
 8013512:	4640      	mov	r0, r8
 8013514:	4798      	blx	r3
 8013516:	2800      	cmp	r0, #0
 8013518:	d0d0      	beq.n	80134bc <_scanf_chars+0x30>
 801351a:	6823      	ldr	r3, [r4, #0]
 801351c:	f013 0310 	ands.w	r3, r3, #16
 8013520:	d105      	bne.n	801352e <_scanf_chars+0xa2>
 8013522:	68e2      	ldr	r2, [r4, #12]
 8013524:	3201      	adds	r2, #1
 8013526:	60e2      	str	r2, [r4, #12]
 8013528:	69a2      	ldr	r2, [r4, #24]
 801352a:	b102      	cbz	r2, 801352e <_scanf_chars+0xa2>
 801352c:	7033      	strb	r3, [r6, #0]
 801352e:	6923      	ldr	r3, [r4, #16]
 8013530:	443b      	add	r3, r7
 8013532:	6123      	str	r3, [r4, #16]
 8013534:	2000      	movs	r0, #0
 8013536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801353a:	bf00      	nop
 801353c:	08014199 	.word	0x08014199

08013540 <_scanf_i>:
 8013540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013544:	4698      	mov	r8, r3
 8013546:	4b76      	ldr	r3, [pc, #472]	; (8013720 <_scanf_i+0x1e0>)
 8013548:	460c      	mov	r4, r1
 801354a:	4682      	mov	sl, r0
 801354c:	4616      	mov	r6, r2
 801354e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013552:	b087      	sub	sp, #28
 8013554:	ab03      	add	r3, sp, #12
 8013556:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801355a:	4b72      	ldr	r3, [pc, #456]	; (8013724 <_scanf_i+0x1e4>)
 801355c:	69a1      	ldr	r1, [r4, #24]
 801355e:	4a72      	ldr	r2, [pc, #456]	; (8013728 <_scanf_i+0x1e8>)
 8013560:	2903      	cmp	r1, #3
 8013562:	bf18      	it	ne
 8013564:	461a      	movne	r2, r3
 8013566:	68a3      	ldr	r3, [r4, #8]
 8013568:	9201      	str	r2, [sp, #4]
 801356a:	1e5a      	subs	r2, r3, #1
 801356c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013570:	bf88      	it	hi
 8013572:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013576:	4627      	mov	r7, r4
 8013578:	bf82      	ittt	hi
 801357a:	eb03 0905 	addhi.w	r9, r3, r5
 801357e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013582:	60a3      	strhi	r3, [r4, #8]
 8013584:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013588:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801358c:	bf98      	it	ls
 801358e:	f04f 0900 	movls.w	r9, #0
 8013592:	6023      	str	r3, [r4, #0]
 8013594:	463d      	mov	r5, r7
 8013596:	f04f 0b00 	mov.w	fp, #0
 801359a:	6831      	ldr	r1, [r6, #0]
 801359c:	ab03      	add	r3, sp, #12
 801359e:	7809      	ldrb	r1, [r1, #0]
 80135a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80135a4:	2202      	movs	r2, #2
 80135a6:	f7ec fe2b 	bl	8000200 <memchr>
 80135aa:	b328      	cbz	r0, 80135f8 <_scanf_i+0xb8>
 80135ac:	f1bb 0f01 	cmp.w	fp, #1
 80135b0:	d159      	bne.n	8013666 <_scanf_i+0x126>
 80135b2:	6862      	ldr	r2, [r4, #4]
 80135b4:	b92a      	cbnz	r2, 80135c2 <_scanf_i+0x82>
 80135b6:	6822      	ldr	r2, [r4, #0]
 80135b8:	2308      	movs	r3, #8
 80135ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135be:	6063      	str	r3, [r4, #4]
 80135c0:	6022      	str	r2, [r4, #0]
 80135c2:	6822      	ldr	r2, [r4, #0]
 80135c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80135c8:	6022      	str	r2, [r4, #0]
 80135ca:	68a2      	ldr	r2, [r4, #8]
 80135cc:	1e51      	subs	r1, r2, #1
 80135ce:	60a1      	str	r1, [r4, #8]
 80135d0:	b192      	cbz	r2, 80135f8 <_scanf_i+0xb8>
 80135d2:	6832      	ldr	r2, [r6, #0]
 80135d4:	1c51      	adds	r1, r2, #1
 80135d6:	6031      	str	r1, [r6, #0]
 80135d8:	7812      	ldrb	r2, [r2, #0]
 80135da:	f805 2b01 	strb.w	r2, [r5], #1
 80135de:	6872      	ldr	r2, [r6, #4]
 80135e0:	3a01      	subs	r2, #1
 80135e2:	2a00      	cmp	r2, #0
 80135e4:	6072      	str	r2, [r6, #4]
 80135e6:	dc07      	bgt.n	80135f8 <_scanf_i+0xb8>
 80135e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80135ec:	4631      	mov	r1, r6
 80135ee:	4650      	mov	r0, sl
 80135f0:	4790      	blx	r2
 80135f2:	2800      	cmp	r0, #0
 80135f4:	f040 8085 	bne.w	8013702 <_scanf_i+0x1c2>
 80135f8:	f10b 0b01 	add.w	fp, fp, #1
 80135fc:	f1bb 0f03 	cmp.w	fp, #3
 8013600:	d1cb      	bne.n	801359a <_scanf_i+0x5a>
 8013602:	6863      	ldr	r3, [r4, #4]
 8013604:	b90b      	cbnz	r3, 801360a <_scanf_i+0xca>
 8013606:	230a      	movs	r3, #10
 8013608:	6063      	str	r3, [r4, #4]
 801360a:	6863      	ldr	r3, [r4, #4]
 801360c:	4947      	ldr	r1, [pc, #284]	; (801372c <_scanf_i+0x1ec>)
 801360e:	6960      	ldr	r0, [r4, #20]
 8013610:	1ac9      	subs	r1, r1, r3
 8013612:	f000 f8a9 	bl	8013768 <__sccl>
 8013616:	f04f 0b00 	mov.w	fp, #0
 801361a:	68a3      	ldr	r3, [r4, #8]
 801361c:	6822      	ldr	r2, [r4, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d03d      	beq.n	801369e <_scanf_i+0x15e>
 8013622:	6831      	ldr	r1, [r6, #0]
 8013624:	6960      	ldr	r0, [r4, #20]
 8013626:	f891 c000 	ldrb.w	ip, [r1]
 801362a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801362e:	2800      	cmp	r0, #0
 8013630:	d035      	beq.n	801369e <_scanf_i+0x15e>
 8013632:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013636:	d124      	bne.n	8013682 <_scanf_i+0x142>
 8013638:	0510      	lsls	r0, r2, #20
 801363a:	d522      	bpl.n	8013682 <_scanf_i+0x142>
 801363c:	f10b 0b01 	add.w	fp, fp, #1
 8013640:	f1b9 0f00 	cmp.w	r9, #0
 8013644:	d003      	beq.n	801364e <_scanf_i+0x10e>
 8013646:	3301      	adds	r3, #1
 8013648:	f109 39ff 	add.w	r9, r9, #4294967295
 801364c:	60a3      	str	r3, [r4, #8]
 801364e:	6873      	ldr	r3, [r6, #4]
 8013650:	3b01      	subs	r3, #1
 8013652:	2b00      	cmp	r3, #0
 8013654:	6073      	str	r3, [r6, #4]
 8013656:	dd1b      	ble.n	8013690 <_scanf_i+0x150>
 8013658:	6833      	ldr	r3, [r6, #0]
 801365a:	3301      	adds	r3, #1
 801365c:	6033      	str	r3, [r6, #0]
 801365e:	68a3      	ldr	r3, [r4, #8]
 8013660:	3b01      	subs	r3, #1
 8013662:	60a3      	str	r3, [r4, #8]
 8013664:	e7d9      	b.n	801361a <_scanf_i+0xda>
 8013666:	f1bb 0f02 	cmp.w	fp, #2
 801366a:	d1ae      	bne.n	80135ca <_scanf_i+0x8a>
 801366c:	6822      	ldr	r2, [r4, #0]
 801366e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013672:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013676:	d1bf      	bne.n	80135f8 <_scanf_i+0xb8>
 8013678:	2310      	movs	r3, #16
 801367a:	6063      	str	r3, [r4, #4]
 801367c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013680:	e7a2      	b.n	80135c8 <_scanf_i+0x88>
 8013682:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013686:	6022      	str	r2, [r4, #0]
 8013688:	780b      	ldrb	r3, [r1, #0]
 801368a:	f805 3b01 	strb.w	r3, [r5], #1
 801368e:	e7de      	b.n	801364e <_scanf_i+0x10e>
 8013690:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013694:	4631      	mov	r1, r6
 8013696:	4650      	mov	r0, sl
 8013698:	4798      	blx	r3
 801369a:	2800      	cmp	r0, #0
 801369c:	d0df      	beq.n	801365e <_scanf_i+0x11e>
 801369e:	6823      	ldr	r3, [r4, #0]
 80136a0:	05db      	lsls	r3, r3, #23
 80136a2:	d50d      	bpl.n	80136c0 <_scanf_i+0x180>
 80136a4:	42bd      	cmp	r5, r7
 80136a6:	d909      	bls.n	80136bc <_scanf_i+0x17c>
 80136a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80136ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136b0:	4632      	mov	r2, r6
 80136b2:	4650      	mov	r0, sl
 80136b4:	4798      	blx	r3
 80136b6:	f105 39ff 	add.w	r9, r5, #4294967295
 80136ba:	464d      	mov	r5, r9
 80136bc:	42bd      	cmp	r5, r7
 80136be:	d02d      	beq.n	801371c <_scanf_i+0x1dc>
 80136c0:	6822      	ldr	r2, [r4, #0]
 80136c2:	f012 0210 	ands.w	r2, r2, #16
 80136c6:	d113      	bne.n	80136f0 <_scanf_i+0x1b0>
 80136c8:	702a      	strb	r2, [r5, #0]
 80136ca:	6863      	ldr	r3, [r4, #4]
 80136cc:	9e01      	ldr	r6, [sp, #4]
 80136ce:	4639      	mov	r1, r7
 80136d0:	4650      	mov	r0, sl
 80136d2:	47b0      	blx	r6
 80136d4:	6821      	ldr	r1, [r4, #0]
 80136d6:	f8d8 3000 	ldr.w	r3, [r8]
 80136da:	f011 0f20 	tst.w	r1, #32
 80136de:	d013      	beq.n	8013708 <_scanf_i+0x1c8>
 80136e0:	1d1a      	adds	r2, r3, #4
 80136e2:	f8c8 2000 	str.w	r2, [r8]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	6018      	str	r0, [r3, #0]
 80136ea:	68e3      	ldr	r3, [r4, #12]
 80136ec:	3301      	adds	r3, #1
 80136ee:	60e3      	str	r3, [r4, #12]
 80136f0:	1bed      	subs	r5, r5, r7
 80136f2:	44ab      	add	fp, r5
 80136f4:	6925      	ldr	r5, [r4, #16]
 80136f6:	445d      	add	r5, fp
 80136f8:	6125      	str	r5, [r4, #16]
 80136fa:	2000      	movs	r0, #0
 80136fc:	b007      	add	sp, #28
 80136fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013702:	f04f 0b00 	mov.w	fp, #0
 8013706:	e7ca      	b.n	801369e <_scanf_i+0x15e>
 8013708:	1d1a      	adds	r2, r3, #4
 801370a:	f8c8 2000 	str.w	r2, [r8]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f011 0f01 	tst.w	r1, #1
 8013714:	bf14      	ite	ne
 8013716:	8018      	strhne	r0, [r3, #0]
 8013718:	6018      	streq	r0, [r3, #0]
 801371a:	e7e6      	b.n	80136ea <_scanf_i+0x1aa>
 801371c:	2001      	movs	r0, #1
 801371e:	e7ed      	b.n	80136fc <_scanf_i+0x1bc>
 8013720:	08013fdc 	.word	0x08013fdc
 8013724:	080138bd 	.word	0x080138bd
 8013728:	08011415 	.word	0x08011415
 801372c:	08014548 	.word	0x08014548

08013730 <_read_r>:
 8013730:	b538      	push	{r3, r4, r5, lr}
 8013732:	4d07      	ldr	r5, [pc, #28]	; (8013750 <_read_r+0x20>)
 8013734:	4604      	mov	r4, r0
 8013736:	4608      	mov	r0, r1
 8013738:	4611      	mov	r1, r2
 801373a:	2200      	movs	r2, #0
 801373c:	602a      	str	r2, [r5, #0]
 801373e:	461a      	mov	r2, r3
 8013740:	f7f0 fe50 	bl	80043e4 <_read>
 8013744:	1c43      	adds	r3, r0, #1
 8013746:	d102      	bne.n	801374e <_read_r+0x1e>
 8013748:	682b      	ldr	r3, [r5, #0]
 801374a:	b103      	cbz	r3, 801374e <_read_r+0x1e>
 801374c:	6023      	str	r3, [r4, #0]
 801374e:	bd38      	pop	{r3, r4, r5, pc}
 8013750:	2000280c 	.word	0x2000280c
 8013754:	00000000 	.word	0x00000000

08013758 <nan>:
 8013758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013760 <nan+0x8>
 801375c:	4770      	bx	lr
 801375e:	bf00      	nop
 8013760:	00000000 	.word	0x00000000
 8013764:	7ff80000 	.word	0x7ff80000

08013768 <__sccl>:
 8013768:	b570      	push	{r4, r5, r6, lr}
 801376a:	780b      	ldrb	r3, [r1, #0]
 801376c:	4604      	mov	r4, r0
 801376e:	2b5e      	cmp	r3, #94	; 0x5e
 8013770:	bf0b      	itete	eq
 8013772:	784b      	ldrbeq	r3, [r1, #1]
 8013774:	1c48      	addne	r0, r1, #1
 8013776:	1c88      	addeq	r0, r1, #2
 8013778:	2200      	movne	r2, #0
 801377a:	bf08      	it	eq
 801377c:	2201      	moveq	r2, #1
 801377e:	1e61      	subs	r1, r4, #1
 8013780:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013784:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013788:	42a9      	cmp	r1, r5
 801378a:	d1fb      	bne.n	8013784 <__sccl+0x1c>
 801378c:	b90b      	cbnz	r3, 8013792 <__sccl+0x2a>
 801378e:	3801      	subs	r0, #1
 8013790:	bd70      	pop	{r4, r5, r6, pc}
 8013792:	f082 0201 	eor.w	r2, r2, #1
 8013796:	54e2      	strb	r2, [r4, r3]
 8013798:	4605      	mov	r5, r0
 801379a:	4628      	mov	r0, r5
 801379c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80137a0:	292d      	cmp	r1, #45	; 0x2d
 80137a2:	d006      	beq.n	80137b2 <__sccl+0x4a>
 80137a4:	295d      	cmp	r1, #93	; 0x5d
 80137a6:	d0f3      	beq.n	8013790 <__sccl+0x28>
 80137a8:	b909      	cbnz	r1, 80137ae <__sccl+0x46>
 80137aa:	4628      	mov	r0, r5
 80137ac:	e7f0      	b.n	8013790 <__sccl+0x28>
 80137ae:	460b      	mov	r3, r1
 80137b0:	e7f1      	b.n	8013796 <__sccl+0x2e>
 80137b2:	786e      	ldrb	r6, [r5, #1]
 80137b4:	2e5d      	cmp	r6, #93	; 0x5d
 80137b6:	d0fa      	beq.n	80137ae <__sccl+0x46>
 80137b8:	42b3      	cmp	r3, r6
 80137ba:	dcf8      	bgt.n	80137ae <__sccl+0x46>
 80137bc:	3502      	adds	r5, #2
 80137be:	4619      	mov	r1, r3
 80137c0:	3101      	adds	r1, #1
 80137c2:	428e      	cmp	r6, r1
 80137c4:	5462      	strb	r2, [r4, r1]
 80137c6:	dcfb      	bgt.n	80137c0 <__sccl+0x58>
 80137c8:	1af1      	subs	r1, r6, r3
 80137ca:	3901      	subs	r1, #1
 80137cc:	1c58      	adds	r0, r3, #1
 80137ce:	42b3      	cmp	r3, r6
 80137d0:	bfa8      	it	ge
 80137d2:	2100      	movge	r1, #0
 80137d4:	1843      	adds	r3, r0, r1
 80137d6:	e7e0      	b.n	801379a <__sccl+0x32>

080137d8 <_strtoul_l.constprop.0>:
 80137d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137dc:	4f36      	ldr	r7, [pc, #216]	; (80138b8 <_strtoul_l.constprop.0+0xe0>)
 80137de:	4686      	mov	lr, r0
 80137e0:	460d      	mov	r5, r1
 80137e2:	4628      	mov	r0, r5
 80137e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137e8:	5de6      	ldrb	r6, [r4, r7]
 80137ea:	f016 0608 	ands.w	r6, r6, #8
 80137ee:	d1f8      	bne.n	80137e2 <_strtoul_l.constprop.0+0xa>
 80137f0:	2c2d      	cmp	r4, #45	; 0x2d
 80137f2:	d12f      	bne.n	8013854 <_strtoul_l.constprop.0+0x7c>
 80137f4:	782c      	ldrb	r4, [r5, #0]
 80137f6:	2601      	movs	r6, #1
 80137f8:	1c85      	adds	r5, r0, #2
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d057      	beq.n	80138ae <_strtoul_l.constprop.0+0xd6>
 80137fe:	2b10      	cmp	r3, #16
 8013800:	d109      	bne.n	8013816 <_strtoul_l.constprop.0+0x3e>
 8013802:	2c30      	cmp	r4, #48	; 0x30
 8013804:	d107      	bne.n	8013816 <_strtoul_l.constprop.0+0x3e>
 8013806:	7828      	ldrb	r0, [r5, #0]
 8013808:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801380c:	2858      	cmp	r0, #88	; 0x58
 801380e:	d149      	bne.n	80138a4 <_strtoul_l.constprop.0+0xcc>
 8013810:	786c      	ldrb	r4, [r5, #1]
 8013812:	2310      	movs	r3, #16
 8013814:	3502      	adds	r5, #2
 8013816:	f04f 38ff 	mov.w	r8, #4294967295
 801381a:	2700      	movs	r7, #0
 801381c:	fbb8 f8f3 	udiv	r8, r8, r3
 8013820:	fb03 f908 	mul.w	r9, r3, r8
 8013824:	ea6f 0909 	mvn.w	r9, r9
 8013828:	4638      	mov	r0, r7
 801382a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801382e:	f1bc 0f09 	cmp.w	ip, #9
 8013832:	d814      	bhi.n	801385e <_strtoul_l.constprop.0+0x86>
 8013834:	4664      	mov	r4, ip
 8013836:	42a3      	cmp	r3, r4
 8013838:	dd22      	ble.n	8013880 <_strtoul_l.constprop.0+0xa8>
 801383a:	2f00      	cmp	r7, #0
 801383c:	db1d      	blt.n	801387a <_strtoul_l.constprop.0+0xa2>
 801383e:	4580      	cmp	r8, r0
 8013840:	d31b      	bcc.n	801387a <_strtoul_l.constprop.0+0xa2>
 8013842:	d101      	bne.n	8013848 <_strtoul_l.constprop.0+0x70>
 8013844:	45a1      	cmp	r9, r4
 8013846:	db18      	blt.n	801387a <_strtoul_l.constprop.0+0xa2>
 8013848:	fb00 4003 	mla	r0, r0, r3, r4
 801384c:	2701      	movs	r7, #1
 801384e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013852:	e7ea      	b.n	801382a <_strtoul_l.constprop.0+0x52>
 8013854:	2c2b      	cmp	r4, #43	; 0x2b
 8013856:	bf04      	itt	eq
 8013858:	782c      	ldrbeq	r4, [r5, #0]
 801385a:	1c85      	addeq	r5, r0, #2
 801385c:	e7cd      	b.n	80137fa <_strtoul_l.constprop.0+0x22>
 801385e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013862:	f1bc 0f19 	cmp.w	ip, #25
 8013866:	d801      	bhi.n	801386c <_strtoul_l.constprop.0+0x94>
 8013868:	3c37      	subs	r4, #55	; 0x37
 801386a:	e7e4      	b.n	8013836 <_strtoul_l.constprop.0+0x5e>
 801386c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013870:	f1bc 0f19 	cmp.w	ip, #25
 8013874:	d804      	bhi.n	8013880 <_strtoul_l.constprop.0+0xa8>
 8013876:	3c57      	subs	r4, #87	; 0x57
 8013878:	e7dd      	b.n	8013836 <_strtoul_l.constprop.0+0x5e>
 801387a:	f04f 37ff 	mov.w	r7, #4294967295
 801387e:	e7e6      	b.n	801384e <_strtoul_l.constprop.0+0x76>
 8013880:	2f00      	cmp	r7, #0
 8013882:	da07      	bge.n	8013894 <_strtoul_l.constprop.0+0xbc>
 8013884:	2322      	movs	r3, #34	; 0x22
 8013886:	f8ce 3000 	str.w	r3, [lr]
 801388a:	f04f 30ff 	mov.w	r0, #4294967295
 801388e:	b932      	cbnz	r2, 801389e <_strtoul_l.constprop.0+0xc6>
 8013890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013894:	b106      	cbz	r6, 8013898 <_strtoul_l.constprop.0+0xc0>
 8013896:	4240      	negs	r0, r0
 8013898:	2a00      	cmp	r2, #0
 801389a:	d0f9      	beq.n	8013890 <_strtoul_l.constprop.0+0xb8>
 801389c:	b107      	cbz	r7, 80138a0 <_strtoul_l.constprop.0+0xc8>
 801389e:	1e69      	subs	r1, r5, #1
 80138a0:	6011      	str	r1, [r2, #0]
 80138a2:	e7f5      	b.n	8013890 <_strtoul_l.constprop.0+0xb8>
 80138a4:	2430      	movs	r4, #48	; 0x30
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d1b5      	bne.n	8013816 <_strtoul_l.constprop.0+0x3e>
 80138aa:	2308      	movs	r3, #8
 80138ac:	e7b3      	b.n	8013816 <_strtoul_l.constprop.0+0x3e>
 80138ae:	2c30      	cmp	r4, #48	; 0x30
 80138b0:	d0a9      	beq.n	8013806 <_strtoul_l.constprop.0+0x2e>
 80138b2:	230a      	movs	r3, #10
 80138b4:	e7af      	b.n	8013816 <_strtoul_l.constprop.0+0x3e>
 80138b6:	bf00      	nop
 80138b8:	08014199 	.word	0x08014199

080138bc <_strtoul_r>:
 80138bc:	f7ff bf8c 	b.w	80137d8 <_strtoul_l.constprop.0>

080138c0 <__submore>:
 80138c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c4:	460c      	mov	r4, r1
 80138c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80138c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138cc:	4299      	cmp	r1, r3
 80138ce:	d11d      	bne.n	801390c <__submore+0x4c>
 80138d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80138d4:	f7fc fb3e 	bl	800ff54 <_malloc_r>
 80138d8:	b918      	cbnz	r0, 80138e2 <__submore+0x22>
 80138da:	f04f 30ff 	mov.w	r0, #4294967295
 80138de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80138e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80138ec:	6360      	str	r0, [r4, #52]	; 0x34
 80138ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80138f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80138f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80138fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80138fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013902:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013906:	6020      	str	r0, [r4, #0]
 8013908:	2000      	movs	r0, #0
 801390a:	e7e8      	b.n	80138de <__submore+0x1e>
 801390c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801390e:	0077      	lsls	r7, r6, #1
 8013910:	463a      	mov	r2, r7
 8013912:	f000 f889 	bl	8013a28 <_realloc_r>
 8013916:	4605      	mov	r5, r0
 8013918:	2800      	cmp	r0, #0
 801391a:	d0de      	beq.n	80138da <__submore+0x1a>
 801391c:	eb00 0806 	add.w	r8, r0, r6
 8013920:	4601      	mov	r1, r0
 8013922:	4632      	mov	r2, r6
 8013924:	4640      	mov	r0, r8
 8013926:	f7fc fa93 	bl	800fe50 <memcpy>
 801392a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801392e:	f8c4 8000 	str.w	r8, [r4]
 8013932:	e7e9      	b.n	8013908 <__submore+0x48>

08013934 <__ascii_wctomb>:
 8013934:	b149      	cbz	r1, 801394a <__ascii_wctomb+0x16>
 8013936:	2aff      	cmp	r2, #255	; 0xff
 8013938:	bf85      	ittet	hi
 801393a:	238a      	movhi	r3, #138	; 0x8a
 801393c:	6003      	strhi	r3, [r0, #0]
 801393e:	700a      	strbls	r2, [r1, #0]
 8013940:	f04f 30ff 	movhi.w	r0, #4294967295
 8013944:	bf98      	it	ls
 8013946:	2001      	movls	r0, #1
 8013948:	4770      	bx	lr
 801394a:	4608      	mov	r0, r1
 801394c:	4770      	bx	lr
	...

08013950 <__assert_func>:
 8013950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013952:	4614      	mov	r4, r2
 8013954:	461a      	mov	r2, r3
 8013956:	4b09      	ldr	r3, [pc, #36]	; (801397c <__assert_func+0x2c>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4605      	mov	r5, r0
 801395c:	68d8      	ldr	r0, [r3, #12]
 801395e:	b14c      	cbz	r4, 8013974 <__assert_func+0x24>
 8013960:	4b07      	ldr	r3, [pc, #28]	; (8013980 <__assert_func+0x30>)
 8013962:	9100      	str	r1, [sp, #0]
 8013964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013968:	4906      	ldr	r1, [pc, #24]	; (8013984 <__assert_func+0x34>)
 801396a:	462b      	mov	r3, r5
 801396c:	f000 f80e 	bl	801398c <fiprintf>
 8013970:	f000 f9e2 	bl	8013d38 <abort>
 8013974:	4b04      	ldr	r3, [pc, #16]	; (8013988 <__assert_func+0x38>)
 8013976:	461c      	mov	r4, r3
 8013978:	e7f3      	b.n	8013962 <__assert_func+0x12>
 801397a:	bf00      	nop
 801397c:	20000010 	.word	0x20000010
 8013980:	0801454a 	.word	0x0801454a
 8013984:	08014557 	.word	0x08014557
 8013988:	08014585 	.word	0x08014585

0801398c <fiprintf>:
 801398c:	b40e      	push	{r1, r2, r3}
 801398e:	b503      	push	{r0, r1, lr}
 8013990:	4601      	mov	r1, r0
 8013992:	ab03      	add	r3, sp, #12
 8013994:	4805      	ldr	r0, [pc, #20]	; (80139ac <fiprintf+0x20>)
 8013996:	f853 2b04 	ldr.w	r2, [r3], #4
 801399a:	6800      	ldr	r0, [r0, #0]
 801399c:	9301      	str	r3, [sp, #4]
 801399e:	f000 f89b 	bl	8013ad8 <_vfiprintf_r>
 80139a2:	b002      	add	sp, #8
 80139a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80139a8:	b003      	add	sp, #12
 80139aa:	4770      	bx	lr
 80139ac:	20000010 	.word	0x20000010

080139b0 <_fstat_r>:
 80139b0:	b538      	push	{r3, r4, r5, lr}
 80139b2:	4d07      	ldr	r5, [pc, #28]	; (80139d0 <_fstat_r+0x20>)
 80139b4:	2300      	movs	r3, #0
 80139b6:	4604      	mov	r4, r0
 80139b8:	4608      	mov	r0, r1
 80139ba:	4611      	mov	r1, r2
 80139bc:	602b      	str	r3, [r5, #0]
 80139be:	f7f0 fd56 	bl	800446e <_fstat>
 80139c2:	1c43      	adds	r3, r0, #1
 80139c4:	d102      	bne.n	80139cc <_fstat_r+0x1c>
 80139c6:	682b      	ldr	r3, [r5, #0]
 80139c8:	b103      	cbz	r3, 80139cc <_fstat_r+0x1c>
 80139ca:	6023      	str	r3, [r4, #0]
 80139cc:	bd38      	pop	{r3, r4, r5, pc}
 80139ce:	bf00      	nop
 80139d0:	2000280c 	.word	0x2000280c

080139d4 <_isatty_r>:
 80139d4:	b538      	push	{r3, r4, r5, lr}
 80139d6:	4d06      	ldr	r5, [pc, #24]	; (80139f0 <_isatty_r+0x1c>)
 80139d8:	2300      	movs	r3, #0
 80139da:	4604      	mov	r4, r0
 80139dc:	4608      	mov	r0, r1
 80139de:	602b      	str	r3, [r5, #0]
 80139e0:	f7f0 fd55 	bl	800448e <_isatty>
 80139e4:	1c43      	adds	r3, r0, #1
 80139e6:	d102      	bne.n	80139ee <_isatty_r+0x1a>
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	b103      	cbz	r3, 80139ee <_isatty_r+0x1a>
 80139ec:	6023      	str	r3, [r4, #0]
 80139ee:	bd38      	pop	{r3, r4, r5, pc}
 80139f0:	2000280c 	.word	0x2000280c

080139f4 <memmove>:
 80139f4:	4288      	cmp	r0, r1
 80139f6:	b510      	push	{r4, lr}
 80139f8:	eb01 0402 	add.w	r4, r1, r2
 80139fc:	d902      	bls.n	8013a04 <memmove+0x10>
 80139fe:	4284      	cmp	r4, r0
 8013a00:	4623      	mov	r3, r4
 8013a02:	d807      	bhi.n	8013a14 <memmove+0x20>
 8013a04:	1e43      	subs	r3, r0, #1
 8013a06:	42a1      	cmp	r1, r4
 8013a08:	d008      	beq.n	8013a1c <memmove+0x28>
 8013a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a12:	e7f8      	b.n	8013a06 <memmove+0x12>
 8013a14:	4402      	add	r2, r0
 8013a16:	4601      	mov	r1, r0
 8013a18:	428a      	cmp	r2, r1
 8013a1a:	d100      	bne.n	8013a1e <memmove+0x2a>
 8013a1c:	bd10      	pop	{r4, pc}
 8013a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a26:	e7f7      	b.n	8013a18 <memmove+0x24>

08013a28 <_realloc_r>:
 8013a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2c:	4680      	mov	r8, r0
 8013a2e:	4614      	mov	r4, r2
 8013a30:	460e      	mov	r6, r1
 8013a32:	b921      	cbnz	r1, 8013a3e <_realloc_r+0x16>
 8013a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a38:	4611      	mov	r1, r2
 8013a3a:	f7fc ba8b 	b.w	800ff54 <_malloc_r>
 8013a3e:	b92a      	cbnz	r2, 8013a4c <_realloc_r+0x24>
 8013a40:	f7fc fa1c 	bl	800fe7c <_free_r>
 8013a44:	4625      	mov	r5, r4
 8013a46:	4628      	mov	r0, r5
 8013a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a4c:	f000 f97b 	bl	8013d46 <_malloc_usable_size_r>
 8013a50:	4284      	cmp	r4, r0
 8013a52:	4607      	mov	r7, r0
 8013a54:	d802      	bhi.n	8013a5c <_realloc_r+0x34>
 8013a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a5a:	d812      	bhi.n	8013a82 <_realloc_r+0x5a>
 8013a5c:	4621      	mov	r1, r4
 8013a5e:	4640      	mov	r0, r8
 8013a60:	f7fc fa78 	bl	800ff54 <_malloc_r>
 8013a64:	4605      	mov	r5, r0
 8013a66:	2800      	cmp	r0, #0
 8013a68:	d0ed      	beq.n	8013a46 <_realloc_r+0x1e>
 8013a6a:	42bc      	cmp	r4, r7
 8013a6c:	4622      	mov	r2, r4
 8013a6e:	4631      	mov	r1, r6
 8013a70:	bf28      	it	cs
 8013a72:	463a      	movcs	r2, r7
 8013a74:	f7fc f9ec 	bl	800fe50 <memcpy>
 8013a78:	4631      	mov	r1, r6
 8013a7a:	4640      	mov	r0, r8
 8013a7c:	f7fc f9fe 	bl	800fe7c <_free_r>
 8013a80:	e7e1      	b.n	8013a46 <_realloc_r+0x1e>
 8013a82:	4635      	mov	r5, r6
 8013a84:	e7df      	b.n	8013a46 <_realloc_r+0x1e>

08013a86 <__sfputc_r>:
 8013a86:	6893      	ldr	r3, [r2, #8]
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	b410      	push	{r4}
 8013a8e:	6093      	str	r3, [r2, #8]
 8013a90:	da08      	bge.n	8013aa4 <__sfputc_r+0x1e>
 8013a92:	6994      	ldr	r4, [r2, #24]
 8013a94:	42a3      	cmp	r3, r4
 8013a96:	db01      	blt.n	8013a9c <__sfputc_r+0x16>
 8013a98:	290a      	cmp	r1, #10
 8013a9a:	d103      	bne.n	8013aa4 <__sfputc_r+0x1e>
 8013a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013aa0:	f7fd bcba 	b.w	8011418 <__swbuf_r>
 8013aa4:	6813      	ldr	r3, [r2, #0]
 8013aa6:	1c58      	adds	r0, r3, #1
 8013aa8:	6010      	str	r0, [r2, #0]
 8013aaa:	7019      	strb	r1, [r3, #0]
 8013aac:	4608      	mov	r0, r1
 8013aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <__sfputs_r>:
 8013ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ab6:	4606      	mov	r6, r0
 8013ab8:	460f      	mov	r7, r1
 8013aba:	4614      	mov	r4, r2
 8013abc:	18d5      	adds	r5, r2, r3
 8013abe:	42ac      	cmp	r4, r5
 8013ac0:	d101      	bne.n	8013ac6 <__sfputs_r+0x12>
 8013ac2:	2000      	movs	r0, #0
 8013ac4:	e007      	b.n	8013ad6 <__sfputs_r+0x22>
 8013ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013aca:	463a      	mov	r2, r7
 8013acc:	4630      	mov	r0, r6
 8013ace:	f7ff ffda 	bl	8013a86 <__sfputc_r>
 8013ad2:	1c43      	adds	r3, r0, #1
 8013ad4:	d1f3      	bne.n	8013abe <__sfputs_r+0xa>
 8013ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ad8 <_vfiprintf_r>:
 8013ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013adc:	460d      	mov	r5, r1
 8013ade:	b09d      	sub	sp, #116	; 0x74
 8013ae0:	4614      	mov	r4, r2
 8013ae2:	4698      	mov	r8, r3
 8013ae4:	4606      	mov	r6, r0
 8013ae6:	b118      	cbz	r0, 8013af0 <_vfiprintf_r+0x18>
 8013ae8:	6983      	ldr	r3, [r0, #24]
 8013aea:	b90b      	cbnz	r3, 8013af0 <_vfiprintf_r+0x18>
 8013aec:	f7fd fe90 	bl	8011810 <__sinit>
 8013af0:	4b89      	ldr	r3, [pc, #548]	; (8013d18 <_vfiprintf_r+0x240>)
 8013af2:	429d      	cmp	r5, r3
 8013af4:	d11b      	bne.n	8013b2e <_vfiprintf_r+0x56>
 8013af6:	6875      	ldr	r5, [r6, #4]
 8013af8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013afa:	07d9      	lsls	r1, r3, #31
 8013afc:	d405      	bmi.n	8013b0a <_vfiprintf_r+0x32>
 8013afe:	89ab      	ldrh	r3, [r5, #12]
 8013b00:	059a      	lsls	r2, r3, #22
 8013b02:	d402      	bmi.n	8013b0a <_vfiprintf_r+0x32>
 8013b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b06:	f7fe fa90 	bl	801202a <__retarget_lock_acquire_recursive>
 8013b0a:	89ab      	ldrh	r3, [r5, #12]
 8013b0c:	071b      	lsls	r3, r3, #28
 8013b0e:	d501      	bpl.n	8013b14 <_vfiprintf_r+0x3c>
 8013b10:	692b      	ldr	r3, [r5, #16]
 8013b12:	b9eb      	cbnz	r3, 8013b50 <_vfiprintf_r+0x78>
 8013b14:	4629      	mov	r1, r5
 8013b16:	4630      	mov	r0, r6
 8013b18:	f7fd fce2 	bl	80114e0 <__swsetup_r>
 8013b1c:	b1c0      	cbz	r0, 8013b50 <_vfiprintf_r+0x78>
 8013b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b20:	07dc      	lsls	r4, r3, #31
 8013b22:	d50e      	bpl.n	8013b42 <_vfiprintf_r+0x6a>
 8013b24:	f04f 30ff 	mov.w	r0, #4294967295
 8013b28:	b01d      	add	sp, #116	; 0x74
 8013b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b2e:	4b7b      	ldr	r3, [pc, #492]	; (8013d1c <_vfiprintf_r+0x244>)
 8013b30:	429d      	cmp	r5, r3
 8013b32:	d101      	bne.n	8013b38 <_vfiprintf_r+0x60>
 8013b34:	68b5      	ldr	r5, [r6, #8]
 8013b36:	e7df      	b.n	8013af8 <_vfiprintf_r+0x20>
 8013b38:	4b79      	ldr	r3, [pc, #484]	; (8013d20 <_vfiprintf_r+0x248>)
 8013b3a:	429d      	cmp	r5, r3
 8013b3c:	bf08      	it	eq
 8013b3e:	68f5      	ldreq	r5, [r6, #12]
 8013b40:	e7da      	b.n	8013af8 <_vfiprintf_r+0x20>
 8013b42:	89ab      	ldrh	r3, [r5, #12]
 8013b44:	0598      	lsls	r0, r3, #22
 8013b46:	d4ed      	bmi.n	8013b24 <_vfiprintf_r+0x4c>
 8013b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b4a:	f7fe fa6f 	bl	801202c <__retarget_lock_release_recursive>
 8013b4e:	e7e9      	b.n	8013b24 <_vfiprintf_r+0x4c>
 8013b50:	2300      	movs	r3, #0
 8013b52:	9309      	str	r3, [sp, #36]	; 0x24
 8013b54:	2320      	movs	r3, #32
 8013b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b5e:	2330      	movs	r3, #48	; 0x30
 8013b60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d24 <_vfiprintf_r+0x24c>
 8013b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b68:	f04f 0901 	mov.w	r9, #1
 8013b6c:	4623      	mov	r3, r4
 8013b6e:	469a      	mov	sl, r3
 8013b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b74:	b10a      	cbz	r2, 8013b7a <_vfiprintf_r+0xa2>
 8013b76:	2a25      	cmp	r2, #37	; 0x25
 8013b78:	d1f9      	bne.n	8013b6e <_vfiprintf_r+0x96>
 8013b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8013b7e:	d00b      	beq.n	8013b98 <_vfiprintf_r+0xc0>
 8013b80:	465b      	mov	r3, fp
 8013b82:	4622      	mov	r2, r4
 8013b84:	4629      	mov	r1, r5
 8013b86:	4630      	mov	r0, r6
 8013b88:	f7ff ff94 	bl	8013ab4 <__sfputs_r>
 8013b8c:	3001      	adds	r0, #1
 8013b8e:	f000 80aa 	beq.w	8013ce6 <_vfiprintf_r+0x20e>
 8013b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b94:	445a      	add	r2, fp
 8013b96:	9209      	str	r2, [sp, #36]	; 0x24
 8013b98:	f89a 3000 	ldrb.w	r3, [sl]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f000 80a2 	beq.w	8013ce6 <_vfiprintf_r+0x20e>
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bac:	f10a 0a01 	add.w	sl, sl, #1
 8013bb0:	9304      	str	r3, [sp, #16]
 8013bb2:	9307      	str	r3, [sp, #28]
 8013bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8013bba:	4654      	mov	r4, sl
 8013bbc:	2205      	movs	r2, #5
 8013bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bc2:	4858      	ldr	r0, [pc, #352]	; (8013d24 <_vfiprintf_r+0x24c>)
 8013bc4:	f7ec fb1c 	bl	8000200 <memchr>
 8013bc8:	9a04      	ldr	r2, [sp, #16]
 8013bca:	b9d8      	cbnz	r0, 8013c04 <_vfiprintf_r+0x12c>
 8013bcc:	06d1      	lsls	r1, r2, #27
 8013bce:	bf44      	itt	mi
 8013bd0:	2320      	movmi	r3, #32
 8013bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bd6:	0713      	lsls	r3, r2, #28
 8013bd8:	bf44      	itt	mi
 8013bda:	232b      	movmi	r3, #43	; 0x2b
 8013bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013be0:	f89a 3000 	ldrb.w	r3, [sl]
 8013be4:	2b2a      	cmp	r3, #42	; 0x2a
 8013be6:	d015      	beq.n	8013c14 <_vfiprintf_r+0x13c>
 8013be8:	9a07      	ldr	r2, [sp, #28]
 8013bea:	4654      	mov	r4, sl
 8013bec:	2000      	movs	r0, #0
 8013bee:	f04f 0c0a 	mov.w	ip, #10
 8013bf2:	4621      	mov	r1, r4
 8013bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bf8:	3b30      	subs	r3, #48	; 0x30
 8013bfa:	2b09      	cmp	r3, #9
 8013bfc:	d94e      	bls.n	8013c9c <_vfiprintf_r+0x1c4>
 8013bfe:	b1b0      	cbz	r0, 8013c2e <_vfiprintf_r+0x156>
 8013c00:	9207      	str	r2, [sp, #28]
 8013c02:	e014      	b.n	8013c2e <_vfiprintf_r+0x156>
 8013c04:	eba0 0308 	sub.w	r3, r0, r8
 8013c08:	fa09 f303 	lsl.w	r3, r9, r3
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	9304      	str	r3, [sp, #16]
 8013c10:	46a2      	mov	sl, r4
 8013c12:	e7d2      	b.n	8013bba <_vfiprintf_r+0xe2>
 8013c14:	9b03      	ldr	r3, [sp, #12]
 8013c16:	1d19      	adds	r1, r3, #4
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	9103      	str	r1, [sp, #12]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	bfbb      	ittet	lt
 8013c20:	425b      	neglt	r3, r3
 8013c22:	f042 0202 	orrlt.w	r2, r2, #2
 8013c26:	9307      	strge	r3, [sp, #28]
 8013c28:	9307      	strlt	r3, [sp, #28]
 8013c2a:	bfb8      	it	lt
 8013c2c:	9204      	strlt	r2, [sp, #16]
 8013c2e:	7823      	ldrb	r3, [r4, #0]
 8013c30:	2b2e      	cmp	r3, #46	; 0x2e
 8013c32:	d10c      	bne.n	8013c4e <_vfiprintf_r+0x176>
 8013c34:	7863      	ldrb	r3, [r4, #1]
 8013c36:	2b2a      	cmp	r3, #42	; 0x2a
 8013c38:	d135      	bne.n	8013ca6 <_vfiprintf_r+0x1ce>
 8013c3a:	9b03      	ldr	r3, [sp, #12]
 8013c3c:	1d1a      	adds	r2, r3, #4
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	9203      	str	r2, [sp, #12]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	bfb8      	it	lt
 8013c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c4a:	3402      	adds	r4, #2
 8013c4c:	9305      	str	r3, [sp, #20]
 8013c4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d34 <_vfiprintf_r+0x25c>
 8013c52:	7821      	ldrb	r1, [r4, #0]
 8013c54:	2203      	movs	r2, #3
 8013c56:	4650      	mov	r0, sl
 8013c58:	f7ec fad2 	bl	8000200 <memchr>
 8013c5c:	b140      	cbz	r0, 8013c70 <_vfiprintf_r+0x198>
 8013c5e:	2340      	movs	r3, #64	; 0x40
 8013c60:	eba0 000a 	sub.w	r0, r0, sl
 8013c64:	fa03 f000 	lsl.w	r0, r3, r0
 8013c68:	9b04      	ldr	r3, [sp, #16]
 8013c6a:	4303      	orrs	r3, r0
 8013c6c:	3401      	adds	r4, #1
 8013c6e:	9304      	str	r3, [sp, #16]
 8013c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c74:	482c      	ldr	r0, [pc, #176]	; (8013d28 <_vfiprintf_r+0x250>)
 8013c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c7a:	2206      	movs	r2, #6
 8013c7c:	f7ec fac0 	bl	8000200 <memchr>
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d03f      	beq.n	8013d04 <_vfiprintf_r+0x22c>
 8013c84:	4b29      	ldr	r3, [pc, #164]	; (8013d2c <_vfiprintf_r+0x254>)
 8013c86:	bb1b      	cbnz	r3, 8013cd0 <_vfiprintf_r+0x1f8>
 8013c88:	9b03      	ldr	r3, [sp, #12]
 8013c8a:	3307      	adds	r3, #7
 8013c8c:	f023 0307 	bic.w	r3, r3, #7
 8013c90:	3308      	adds	r3, #8
 8013c92:	9303      	str	r3, [sp, #12]
 8013c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c96:	443b      	add	r3, r7
 8013c98:	9309      	str	r3, [sp, #36]	; 0x24
 8013c9a:	e767      	b.n	8013b6c <_vfiprintf_r+0x94>
 8013c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ca0:	460c      	mov	r4, r1
 8013ca2:	2001      	movs	r0, #1
 8013ca4:	e7a5      	b.n	8013bf2 <_vfiprintf_r+0x11a>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	3401      	adds	r4, #1
 8013caa:	9305      	str	r3, [sp, #20]
 8013cac:	4619      	mov	r1, r3
 8013cae:	f04f 0c0a 	mov.w	ip, #10
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cb8:	3a30      	subs	r2, #48	; 0x30
 8013cba:	2a09      	cmp	r2, #9
 8013cbc:	d903      	bls.n	8013cc6 <_vfiprintf_r+0x1ee>
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d0c5      	beq.n	8013c4e <_vfiprintf_r+0x176>
 8013cc2:	9105      	str	r1, [sp, #20]
 8013cc4:	e7c3      	b.n	8013c4e <_vfiprintf_r+0x176>
 8013cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cca:	4604      	mov	r4, r0
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e7f0      	b.n	8013cb2 <_vfiprintf_r+0x1da>
 8013cd0:	ab03      	add	r3, sp, #12
 8013cd2:	9300      	str	r3, [sp, #0]
 8013cd4:	462a      	mov	r2, r5
 8013cd6:	4b16      	ldr	r3, [pc, #88]	; (8013d30 <_vfiprintf_r+0x258>)
 8013cd8:	a904      	add	r1, sp, #16
 8013cda:	4630      	mov	r0, r6
 8013cdc:	f3af 8000 	nop.w
 8013ce0:	4607      	mov	r7, r0
 8013ce2:	1c78      	adds	r0, r7, #1
 8013ce4:	d1d6      	bne.n	8013c94 <_vfiprintf_r+0x1bc>
 8013ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ce8:	07d9      	lsls	r1, r3, #31
 8013cea:	d405      	bmi.n	8013cf8 <_vfiprintf_r+0x220>
 8013cec:	89ab      	ldrh	r3, [r5, #12]
 8013cee:	059a      	lsls	r2, r3, #22
 8013cf0:	d402      	bmi.n	8013cf8 <_vfiprintf_r+0x220>
 8013cf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cf4:	f7fe f99a 	bl	801202c <__retarget_lock_release_recursive>
 8013cf8:	89ab      	ldrh	r3, [r5, #12]
 8013cfa:	065b      	lsls	r3, r3, #25
 8013cfc:	f53f af12 	bmi.w	8013b24 <_vfiprintf_r+0x4c>
 8013d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d02:	e711      	b.n	8013b28 <_vfiprintf_r+0x50>
 8013d04:	ab03      	add	r3, sp, #12
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	462a      	mov	r2, r5
 8013d0a:	4b09      	ldr	r3, [pc, #36]	; (8013d30 <_vfiprintf_r+0x258>)
 8013d0c:	a904      	add	r1, sp, #16
 8013d0e:	4630      	mov	r0, r6
 8013d10:	f7ff fa96 	bl	8013240 <_printf_i>
 8013d14:	e7e4      	b.n	8013ce0 <_vfiprintf_r+0x208>
 8013d16:	bf00      	nop
 8013d18:	080142bc 	.word	0x080142bc
 8013d1c:	080142dc 	.word	0x080142dc
 8013d20:	0801429c 	.word	0x0801429c
 8013d24:	080144fc 	.word	0x080144fc
 8013d28:	08014506 	.word	0x08014506
 8013d2c:	00000000 	.word	0x00000000
 8013d30:	08013ab5 	.word	0x08013ab5
 8013d34:	08014502 	.word	0x08014502

08013d38 <abort>:
 8013d38:	b508      	push	{r3, lr}
 8013d3a:	2006      	movs	r0, #6
 8013d3c:	f000 f834 	bl	8013da8 <raise>
 8013d40:	2001      	movs	r0, #1
 8013d42:	f7f0 fb45 	bl	80043d0 <_exit>

08013d46 <_malloc_usable_size_r>:
 8013d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d4a:	1f18      	subs	r0, r3, #4
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	bfbc      	itt	lt
 8013d50:	580b      	ldrlt	r3, [r1, r0]
 8013d52:	18c0      	addlt	r0, r0, r3
 8013d54:	4770      	bx	lr

08013d56 <_raise_r>:
 8013d56:	291f      	cmp	r1, #31
 8013d58:	b538      	push	{r3, r4, r5, lr}
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	460d      	mov	r5, r1
 8013d5e:	d904      	bls.n	8013d6a <_raise_r+0x14>
 8013d60:	2316      	movs	r3, #22
 8013d62:	6003      	str	r3, [r0, #0]
 8013d64:	f04f 30ff 	mov.w	r0, #4294967295
 8013d68:	bd38      	pop	{r3, r4, r5, pc}
 8013d6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013d6c:	b112      	cbz	r2, 8013d74 <_raise_r+0x1e>
 8013d6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d72:	b94b      	cbnz	r3, 8013d88 <_raise_r+0x32>
 8013d74:	4620      	mov	r0, r4
 8013d76:	f000 f831 	bl	8013ddc <_getpid_r>
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	4601      	mov	r1, r0
 8013d7e:	4620      	mov	r0, r4
 8013d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d84:	f000 b818 	b.w	8013db8 <_kill_r>
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d00a      	beq.n	8013da2 <_raise_r+0x4c>
 8013d8c:	1c59      	adds	r1, r3, #1
 8013d8e:	d103      	bne.n	8013d98 <_raise_r+0x42>
 8013d90:	2316      	movs	r3, #22
 8013d92:	6003      	str	r3, [r0, #0]
 8013d94:	2001      	movs	r0, #1
 8013d96:	e7e7      	b.n	8013d68 <_raise_r+0x12>
 8013d98:	2400      	movs	r4, #0
 8013d9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013d9e:	4628      	mov	r0, r5
 8013da0:	4798      	blx	r3
 8013da2:	2000      	movs	r0, #0
 8013da4:	e7e0      	b.n	8013d68 <_raise_r+0x12>
	...

08013da8 <raise>:
 8013da8:	4b02      	ldr	r3, [pc, #8]	; (8013db4 <raise+0xc>)
 8013daa:	4601      	mov	r1, r0
 8013dac:	6818      	ldr	r0, [r3, #0]
 8013dae:	f7ff bfd2 	b.w	8013d56 <_raise_r>
 8013db2:	bf00      	nop
 8013db4:	20000010 	.word	0x20000010

08013db8 <_kill_r>:
 8013db8:	b538      	push	{r3, r4, r5, lr}
 8013dba:	4d07      	ldr	r5, [pc, #28]	; (8013dd8 <_kill_r+0x20>)
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	4608      	mov	r0, r1
 8013dc2:	4611      	mov	r1, r2
 8013dc4:	602b      	str	r3, [r5, #0]
 8013dc6:	f7f0 faf3 	bl	80043b0 <_kill>
 8013dca:	1c43      	adds	r3, r0, #1
 8013dcc:	d102      	bne.n	8013dd4 <_kill_r+0x1c>
 8013dce:	682b      	ldr	r3, [r5, #0]
 8013dd0:	b103      	cbz	r3, 8013dd4 <_kill_r+0x1c>
 8013dd2:	6023      	str	r3, [r4, #0]
 8013dd4:	bd38      	pop	{r3, r4, r5, pc}
 8013dd6:	bf00      	nop
 8013dd8:	2000280c 	.word	0x2000280c

08013ddc <_getpid_r>:
 8013ddc:	f7f0 bae0 	b.w	80043a0 <_getpid>

08013de0 <floor>:
 8013de0:	ec51 0b10 	vmov	r0, r1, d0
 8013de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013dec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013df0:	2e13      	cmp	r6, #19
 8013df2:	ee10 5a10 	vmov	r5, s0
 8013df6:	ee10 8a10 	vmov	r8, s0
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	dc32      	bgt.n	8013e64 <floor+0x84>
 8013dfe:	2e00      	cmp	r6, #0
 8013e00:	da14      	bge.n	8013e2c <floor+0x4c>
 8013e02:	a333      	add	r3, pc, #204	; (adr r3, 8013ed0 <floor+0xf0>)
 8013e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e08:	f7ec fa50 	bl	80002ac <__adddf3>
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f7ec fe92 	bl	8000b38 <__aeabi_dcmpgt>
 8013e14:	b138      	cbz	r0, 8013e26 <floor+0x46>
 8013e16:	2c00      	cmp	r4, #0
 8013e18:	da57      	bge.n	8013eca <floor+0xea>
 8013e1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013e1e:	431d      	orrs	r5, r3
 8013e20:	d001      	beq.n	8013e26 <floor+0x46>
 8013e22:	4c2d      	ldr	r4, [pc, #180]	; (8013ed8 <floor+0xf8>)
 8013e24:	2500      	movs	r5, #0
 8013e26:	4621      	mov	r1, r4
 8013e28:	4628      	mov	r0, r5
 8013e2a:	e025      	b.n	8013e78 <floor+0x98>
 8013e2c:	4f2b      	ldr	r7, [pc, #172]	; (8013edc <floor+0xfc>)
 8013e2e:	4137      	asrs	r7, r6
 8013e30:	ea01 0307 	and.w	r3, r1, r7
 8013e34:	4303      	orrs	r3, r0
 8013e36:	d01f      	beq.n	8013e78 <floor+0x98>
 8013e38:	a325      	add	r3, pc, #148	; (adr r3, 8013ed0 <floor+0xf0>)
 8013e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3e:	f7ec fa35 	bl	80002ac <__adddf3>
 8013e42:	2200      	movs	r2, #0
 8013e44:	2300      	movs	r3, #0
 8013e46:	f7ec fe77 	bl	8000b38 <__aeabi_dcmpgt>
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	d0eb      	beq.n	8013e26 <floor+0x46>
 8013e4e:	2c00      	cmp	r4, #0
 8013e50:	bfbe      	ittt	lt
 8013e52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013e56:	fa43 f606 	asrlt.w	r6, r3, r6
 8013e5a:	19a4      	addlt	r4, r4, r6
 8013e5c:	ea24 0407 	bic.w	r4, r4, r7
 8013e60:	2500      	movs	r5, #0
 8013e62:	e7e0      	b.n	8013e26 <floor+0x46>
 8013e64:	2e33      	cmp	r6, #51	; 0x33
 8013e66:	dd0b      	ble.n	8013e80 <floor+0xa0>
 8013e68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013e6c:	d104      	bne.n	8013e78 <floor+0x98>
 8013e6e:	ee10 2a10 	vmov	r2, s0
 8013e72:	460b      	mov	r3, r1
 8013e74:	f7ec fa1a 	bl	80002ac <__adddf3>
 8013e78:	ec41 0b10 	vmov	d0, r0, r1
 8013e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013e84:	f04f 33ff 	mov.w	r3, #4294967295
 8013e88:	fa23 f707 	lsr.w	r7, r3, r7
 8013e8c:	4207      	tst	r7, r0
 8013e8e:	d0f3      	beq.n	8013e78 <floor+0x98>
 8013e90:	a30f      	add	r3, pc, #60	; (adr r3, 8013ed0 <floor+0xf0>)
 8013e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e96:	f7ec fa09 	bl	80002ac <__adddf3>
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	f7ec fe4b 	bl	8000b38 <__aeabi_dcmpgt>
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d0bf      	beq.n	8013e26 <floor+0x46>
 8013ea6:	2c00      	cmp	r4, #0
 8013ea8:	da02      	bge.n	8013eb0 <floor+0xd0>
 8013eaa:	2e14      	cmp	r6, #20
 8013eac:	d103      	bne.n	8013eb6 <floor+0xd6>
 8013eae:	3401      	adds	r4, #1
 8013eb0:	ea25 0507 	bic.w	r5, r5, r7
 8013eb4:	e7b7      	b.n	8013e26 <floor+0x46>
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013ebc:	fa03 f606 	lsl.w	r6, r3, r6
 8013ec0:	4435      	add	r5, r6
 8013ec2:	4545      	cmp	r5, r8
 8013ec4:	bf38      	it	cc
 8013ec6:	18e4      	addcc	r4, r4, r3
 8013ec8:	e7f2      	b.n	8013eb0 <floor+0xd0>
 8013eca:	2500      	movs	r5, #0
 8013ecc:	462c      	mov	r4, r5
 8013ece:	e7aa      	b.n	8013e26 <floor+0x46>
 8013ed0:	8800759c 	.word	0x8800759c
 8013ed4:	7e37e43c 	.word	0x7e37e43c
 8013ed8:	bff00000 	.word	0xbff00000
 8013edc:	000fffff 	.word	0x000fffff

08013ee0 <_init>:
 8013ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ee2:	bf00      	nop
 8013ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ee6:	bc08      	pop	{r3}
 8013ee8:	469e      	mov	lr, r3
 8013eea:	4770      	bx	lr

08013eec <_fini>:
 8013eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eee:	bf00      	nop
 8013ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ef2:	bc08      	pop	{r3}
 8013ef4:	469e      	mov	lr, r3
 8013ef6:	4770      	bx	lr
