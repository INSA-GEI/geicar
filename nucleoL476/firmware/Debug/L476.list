
L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b388  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800b518  0800b518  0001b518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba5c  0800ba5c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba64  0800ba64  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba64  0800ba64  0001ba64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ba6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  200001f0  0800bc5c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800bc5c  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045ce7  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000489d  00000000  00000000  00065f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef0  00000000  00000000  0006a7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00007268  00000000  00000000  0006c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fe5  00000000  00000000  00073900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a90f  00000000  00000000  0009d8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9c89  00000000  00000000  000c81f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089ac  00000000  00000000  001c1ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000363aa  00000000  00000000  001ca87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b500 	.word	0x0800b500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800b500 	.word	0x0800b500

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 8001018:	b410      	push	{r4}
	current_pressure_hPa=0.0;
 800101a:	4c0f      	ldr	r4, [pc, #60]	; (8001058 <GLOBVAR_Init+0x40>)

	current_magnetic_mG.x=0.0;
	current_magnetic_mG.y=0.0;
	current_magnetic_mG.z=0.0;

	gpsCoords.alt=0.0;
 800101c:	4a0f      	ldr	r2, [pc, #60]	; (800105c <GLOBVAR_Init+0x44>)
	current_pressure_hPa=0.0;
 800101e:	2300      	movs	r3, #0
 8001020:	6023      	str	r3, [r4, #0]
	current_temperature_degC=0.0;
 8001022:	4c0f      	ldr	r4, [pc, #60]	; (8001060 <GLOBVAR_Init+0x48>)
	gpsCoords.alt=0.0;
 8001024:	2000      	movs	r0, #0
 8001026:	2100      	movs	r1, #0
	gpsCoords.lat=0.0;
 8001028:	e9c2 0100 	strd	r0, r1, [r2]
	gpsCoords.lon=0.0;
 800102c:	e9c2 0102 	strd	r0, r1, [r2, #8]
	gpsCoords.alt=0.0;
 8001030:	e9c2 0104 	strd	r0, r1, [r2, #16]
	current_temperature_degC=0.0;
 8001034:	6023      	str	r3, [r4, #0]
	current_acceleration_mg.x=0.0;
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <GLOBVAR_Init+0x4c>)
	current_angular_rate_mdps.x=0.0;
 8001038:	490b      	ldr	r1, [pc, #44]	; (8001068 <GLOBVAR_Init+0x50>)
	current_magnetic_mG.x=0.0;
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <GLOBVAR_Init+0x54>)
	current_humidity_perc=0.0;
 800103c:	4c0c      	ldr	r4, [pc, #48]	; (8001070 <GLOBVAR_Init+0x58>)
	current_acceleration_mg.x=0.0;
 800103e:	6003      	str	r3, [r0, #0]
	current_humidity_perc=0.0;
 8001040:	6023      	str	r3, [r4, #0]
	current_acceleration_mg.y=0.0;
 8001042:	6043      	str	r3, [r0, #4]

}
 8001044:	f85d 4b04 	ldr.w	r4, [sp], #4
	current_acceleration_mg.z=0.0;
 8001048:	6083      	str	r3, [r0, #8]
	current_angular_rate_mdps.x=0.0;
 800104a:	600b      	str	r3, [r1, #0]
	current_angular_rate_mdps.y=0.0;
 800104c:	604b      	str	r3, [r1, #4]
	current_angular_rate_mdps.z=0.0;
 800104e:	608b      	str	r3, [r1, #8]
	current_magnetic_mG.x=0.0;
 8001050:	6013      	str	r3, [r2, #0]
	current_magnetic_mG.y=0.0;
 8001052:	6053      	str	r3, [r2, #4]
	current_magnetic_mG.z=0.0;
 8001054:	6093      	str	r3, [r2, #8]
}
 8001056:	4770      	bx	lr
 8001058:	20000234 	.word	0x20000234
 800105c:	20000240 	.word	0x20000240
 8001060:	20000238 	.word	0x20000238
 8001064:	2000020c 	.word	0x2000020c
 8001068:	20000218 	.word	0x20000218
 800106c:	20000228 	.word	0x20000228
 8001070:	20000224 	.word	0x20000224

08001074 <ProcessNMEALine>:
  int x;


  // Check the line synchronization

  if (s[0] != '$')
 8001074:	7803      	ldrb	r3, [r0, #0]
 8001076:	2b24      	cmp	r3, #36	; 0x24
 8001078:	d148      	bne.n	800110c <ProcessNMEALine+0x98>
{
 800107a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  c = 0; // checksum

  i = 1; // Xor bytes between $ and *, but not including those bytes

  while((s[i] != 0) && (s[i] != '*'))
 800107e:	7843      	ldrb	r3, [r0, #1]
{
 8001080:	b0a2      	sub	sp, #136	; 0x88
 8001082:	4605      	mov	r5, r0
  while((s[i] != 0) && (s[i] != '*'))
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03e      	beq.n	8001106 <ProcessNMEALine+0x92>
 8001088:	460c      	mov	r4, r1
 800108a:	4617      	mov	r7, r2
 800108c:	1c81      	adds	r1, r0, #2
  c = 0; // checksum
 800108e:	2600      	movs	r6, #0
 8001090:	43c2      	mvns	r2, r0
 8001092:	e003      	b.n	800109c <ProcessNMEALine+0x28>
    c ^= s[i++];
 8001094:	405e      	eors	r6, r3
  while((s[i] != 0) && (s[i] != '*'))
 8001096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800109a:	b3a3      	cbz	r3, 8001106 <ProcessNMEALine+0x92>
 800109c:	2b2a      	cmp	r3, #42	; 0x2a
 800109e:	eb02 0001 	add.w	r0, r2, r1
 80010a2:	d1f7      	bne.n	8001094 <ProcessNMEALine+0x20>

  if (s[i] == 0)
    return;

  sscanf(&s[i + 1],"%x",&x); // Checksum byte - Note sscanf needs this to be an int, rather than a single byte
 80010a4:	3001      	adds	r0, #1
 80010a6:	498a      	ldr	r1, [pc, #552]	; (80012d0 <ProcessNMEALine+0x25c>)
 80010a8:	4428      	add	r0, r5
 80010aa:	466a      	mov	r2, sp
 80010ac:	f005 ffae 	bl	800700c <siscanf>

  if (c != (char)(x & 0xFF)) // Leave if checksum fails
 80010b0:	f89d 3000 	ldrb.w	r3, [sp]
 80010b4:	42b3      	cmp	r3, r6
 80010b6:	d126      	bne.n	8001106 <ProcessNMEALine+0x92>
    return;

  // Parse out fields on , and *

  f = 0;
 80010b8:	2600      	movs	r6, #0
  if (c != (char)(x & 0xFF)) // Leave if checksum fails
 80010ba:	aa0e      	add	r2, sp, #56	; 0x38
      *s = 0;
      field[f] = NULL;
      break;
    }

    *s++ = 0;
 80010bc:	4630      	mov	r0, r6
    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 80010be:	782b      	ldrb	r3, [r5, #0]
    field[f++] = s;
 80010c0:	f842 5b04 	str.w	r5, [r2], #4
 80010c4:	3601      	adds	r6, #1
    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 80010c6:	b93b      	cbnz	r3, 80010d8 <ProcessNMEALine+0x64>
 80010c8:	e00f      	b.n	80010ea <ProcessNMEALine+0x76>
 80010ca:	2b0d      	cmp	r3, #13
 80010cc:	d00d      	beq.n	80010ea <ProcessNMEALine+0x76>
 80010ce:	290a      	cmp	r1, #10
 80010d0:	d00b      	beq.n	80010ea <ProcessNMEALine+0x76>
 80010d2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80010d6:	b143      	cbz	r3, 80010ea <ProcessNMEALine+0x76>
 80010d8:	2b2c      	cmp	r3, #44	; 0x2c
 80010da:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80010de:	d1f4      	bne.n	80010ca <ProcessNMEALine+0x56>
    if ((*s == 0) || (*s == '*') || (*s == 0x0D) || (*s == 0x0A) || (f == (FIELD_MAX - 1)))
 80010e0:	2e13      	cmp	r6, #19
 80010e2:	d002      	beq.n	80010ea <ProcessNMEALine+0x76>
    *s++ = 0;
 80010e4:	f805 0b01 	strb.w	r0, [r5], #1
    field[f++] = s;
 80010e8:	e7e9      	b.n	80010be <ProcessNMEALine+0x4a>
      *s = 0;
 80010ea:	2300      	movs	r3, #0
      field[f] = NULL;
 80010ec:	aa22      	add	r2, sp, #136	; 0x88
      *s = 0;
 80010ee:	702b      	strb	r3, [r5, #0]
      field[f] = NULL;
 80010f0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
  }


  // Process a couple of NMEA sentences for illustration

  if (strncmp(field[0],"$G",2) == 0) // Allow for different Talker ID's ie $GP, $GN, $GL, etc
 80010f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
      field[f] = NULL;
 80010f6:	f842 3c50 	str.w	r3, [r2, #-80]
  if (strncmp(field[0],"$G",2) == 0) // Allow for different Talker ID's ie $GP, $GN, $GL, etc
 80010fa:	782b      	ldrb	r3, [r5, #0]
 80010fc:	2b24      	cmp	r3, #36	; 0x24
 80010fe:	d102      	bne.n	8001106 <ProcessNMEALine+0x92>
 8001100:	786b      	ldrb	r3, [r5, #1]
 8001102:	2b47      	cmp	r3, #71	; 0x47
 8001104:	d003      	beq.n	800110e <ProcessNMEALine+0x9a>
        coords->alt=alt;
      }
    }
  }
  return;
}
 8001106:	b022      	add	sp, #136	; 0x88
 8001108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110c:	4770      	bx	lr
    if ((strcmp(&field[0][3],"GLL") == 0) && (f > 6)) // Geographic Position, Latitude, Longitude and Time
 800110e:	3503      	adds	r5, #3
 8001110:	4970      	ldr	r1, [pc, #448]	; (80012d4 <ProcessNMEALine+0x260>)
 8001112:	4628      	mov	r0, r5
 8001114:	f7ff f85c 	bl	80001d0 <strcmp>
 8001118:	2800      	cmp	r0, #0
 800111a:	d179      	bne.n	8001210 <ProcessNMEALine+0x19c>
 800111c:	2e06      	cmp	r6, #6
 800111e:	dd77      	ble.n	8001210 <ProcessNMEALine+0x19c>
      sscanf(field[1],"%lf",&lat);
 8001120:	496d      	ldr	r1, [pc, #436]	; (80012d8 <ProcessNMEALine+0x264>)
 8001122:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001124:	aa08      	add	r2, sp, #32
 8001126:	f005 ff71 	bl	800700c <siscanf>
      lat_hemi = field[2][0];
 800112a:	9b10      	ldr	r3, [sp, #64]	; 0x40
      sscanf(field[3],"%lf",&lon);
 800112c:	496a      	ldr	r1, [pc, #424]	; (80012d8 <ProcessNMEALine+0x264>)
 800112e:	9811      	ldr	r0, [sp, #68]	; 0x44
      lat_hemi = field[2][0];
 8001130:	f893 a000 	ldrb.w	sl, [r3]
      sscanf(field[3],"%lf",&lon);
 8001134:	aa0a      	add	r2, sp, #40	; 0x28
 8001136:	f005 ff69 	bl	800700c <siscanf>
      lon_hemi = field[4][0];
 800113a:	9b12      	ldr	r3, [sp, #72]	; 0x48
      sscanf(field[5],"%lf",&fix_time);
 800113c:	4966      	ldr	r1, [pc, #408]	; (80012d8 <ProcessNMEALine+0x264>)
 800113e:	9813      	ldr	r0, [sp, #76]	; 0x4c
      lon_hemi = field[4][0];
 8001140:	781d      	ldrb	r5, [r3, #0]
      sscanf(field[5],"%lf",&fix_time);
 8001142:	aa0c      	add	r2, sp, #48	; 0x30
 8001144:	f005 ff62 	bl	800700c <siscanf>
      valid = field[6][0];
 8001148:	9b14      	ldr	r3, [sp, #80]	; 0x50
      if (valid == 'A')
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b41      	cmp	r3, #65	; 0x41
 800114e:	d1da      	bne.n	8001106 <ProcessNMEALine+0x92>
        lat_deg = (int)lat / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 8001150:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8001154:	4649      	mov	r1, r9
 8001156:	4640      	mov	r0, r8
 8001158:	f7ff fd0e 	bl	8000b78 <__aeabi_d2iz>
 800115c:	4e5f      	ldr	r6, [pc, #380]	; (80012dc <ProcessNMEALine+0x268>)
 800115e:	fb86 3600 	smull	r3, r6, r6, r0
 8001162:	17c0      	asrs	r0, r0, #31
 8001164:	ebc0 1666 	rsb	r6, r0, r6, asr #5
        lat_min = lat - (lat_deg * 100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	fb06 f000 	mul.w	r0, r6, r0
 800116e:	f7ff f9e9 	bl	8000544 <__aeabi_i2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4640      	mov	r0, r8
 8001178:	4649      	mov	r1, r9
 800117a:	f7ff f895 	bl	80002a8 <__aeabi_dsub>
        lat = (double)lat_deg + (lat_min / 60.0); // Computed Latitude in DECIMAL DEGREES
 800117e:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <ProcessNMEALine+0x26c>)
 8001180:	2200      	movs	r2, #0
 8001182:	f7ff fb73 	bl	800086c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	4630      	mov	r0, r6
 800118a:	460f      	mov	r7, r1
 800118c:	4616      	mov	r6, r2
 800118e:	f7ff f9d9 	bl	8000544 <__aeabi_i2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4630      	mov	r0, r6
 8001198:	4639      	mov	r1, r7
 800119a:	f7ff f887 	bl	80002ac <__adddf3>
        if (lat_hemi == 'S')
 800119e:	f1ba 0f53 	cmp.w	sl, #83	; 0x53
        lat = (double)lat_deg + (lat_min / 60.0); // Computed Latitude in DECIMAL DEGREES
 80011a2:	4606      	mov	r6, r0
 80011a4:	460f      	mov	r7, r1
        if (lat_hemi == 'S')
 80011a6:	d102      	bne.n	80011ae <ProcessNMEALine+0x13a>
          lat = -lat;
 80011a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80011ac:	461f      	mov	r7, r3
        lon_deg = (int)lon / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 80011ae:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80011b2:	4649      	mov	r1, r9
 80011b4:	4640      	mov	r0, r8
 80011b6:	f7ff fcdf 	bl	8000b78 <__aeabi_d2iz>
 80011ba:	f8df a120 	ldr.w	sl, [pc, #288]	; 80012dc <ProcessNMEALine+0x268>
 80011be:	fb8a 3a00 	smull	r3, sl, sl, r0
 80011c2:	17c0      	asrs	r0, r0, #31
 80011c4:	ebc0 1a6a 	rsb	sl, r0, sl, asr #5
        lon_min = lon - (lon_deg * 100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	fb00 f00a 	mul.w	r0, r0, sl
 80011ce:	f7ff f9b9 	bl	8000544 <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff f865 	bl	80002a8 <__aeabi_dsub>
        lon = (double)lon_deg + (lon_min / 60.0); // Computed Longitude in DECIMAL DEGREES
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <ProcessNMEALine+0x26c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f7ff fb43 	bl	800086c <__aeabi_ddiv>
 80011e6:	4680      	mov	r8, r0
 80011e8:	4650      	mov	r0, sl
 80011ea:	4689      	mov	r9, r1
 80011ec:	f7ff f9aa 	bl	8000544 <__aeabi_i2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4640      	mov	r0, r8
 80011f6:	4649      	mov	r1, r9
 80011f8:	f7ff f858 	bl	80002ac <__adddf3>
        if (lon_hemi == 'W')
 80011fc:	2d57      	cmp	r5, #87	; 0x57
 80011fe:	d102      	bne.n	8001206 <ProcessNMEALine+0x192>
          lon = -lon;
 8001200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001204:	4619      	mov	r1, r3
        coords->lat=lat;
 8001206:	e9c4 6700 	strd	r6, r7, [r4]
        coords->lon=lon;
 800120a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    {
 800120e:	e77a      	b.n	8001106 <ProcessNMEALine+0x92>
    else if ((strcmp(&field[0][3],"GSA") == 0) && (f > 17)) // GPS DOP and Active Satellites
 8001210:	4934      	ldr	r1, [pc, #208]	; (80012e4 <ProcessNMEALine+0x270>)
 8001212:	4628      	mov	r0, r5
 8001214:	f7fe ffdc 	bl	80001d0 <strcmp>
 8001218:	bb08      	cbnz	r0, 800125e <ProcessNMEALine+0x1ea>
 800121a:	2e11      	cmp	r6, #17
 800121c:	dd1f      	ble.n	800125e <ProcessNMEALine+0x1ea>
      sscanf(field[15],"%lf",&pdop); // Position Dilution of precision (PDOP)
 800121e:	492e      	ldr	r1, [pc, #184]	; (80012d8 <ProcessNMEALine+0x264>)
 8001220:	981d      	ldr	r0, [sp, #116]	; 0x74
          sscanf(field[3+i],"%d",&sv);
 8001222:	4e31      	ldr	r6, [pc, #196]	; (80012e8 <ProcessNMEALine+0x274>)
      sscanf(field[15],"%lf",&pdop); // Position Dilution of precision (PDOP)
 8001224:	aa08      	add	r2, sp, #32
 8001226:	f005 fef1 	bl	800700c <siscanf>
      sscanf(field[16],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 800122a:	492b      	ldr	r1, [pc, #172]	; (80012d8 <ProcessNMEALine+0x264>)
 800122c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800122e:	aa0a      	add	r2, sp, #40	; 0x28
 8001230:	f005 feec 	bl	800700c <siscanf>
      sscanf(field[17],"%lf",&vdop); // Vertical Dilution of precision (VDOP)
 8001234:	4928      	ldr	r1, [pc, #160]	; (80012d8 <ProcessNMEALine+0x264>)
 8001236:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8001238:	aa0c      	add	r2, sp, #48	; 0x30
 800123a:	f005 fee7 	bl	800700c <siscanf>
      for(i=0; i<12; i++)
 800123e:	ac10      	add	r4, sp, #64	; 0x40
 8001240:	ad1c      	add	r5, sp, #112	; 0x70
 8001242:	e002      	b.n	800124a <ProcessNMEALine+0x1d6>
 8001244:	42ac      	cmp	r4, r5
 8001246:	f43f af5e 	beq.w	8001106 <ProcessNMEALine+0x92>
        if (field[3+i][0])
 800124a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800124e:	7803      	ldrb	r3, [r0, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f7      	beq.n	8001244 <ProcessNMEALine+0x1d0>
          sscanf(field[3+i],"%d",&sv);
 8001254:	aa06      	add	r2, sp, #24
 8001256:	4631      	mov	r1, r6
 8001258:	f005 fed8 	bl	800700c <siscanf>
 800125c:	e7f2      	b.n	8001244 <ProcessNMEALine+0x1d0>
    else  if ((strcmp(&field[0][3],"GGA") == 0) && (f > 14))
 800125e:	4923      	ldr	r1, [pc, #140]	; (80012ec <ProcessNMEALine+0x278>)
 8001260:	4628      	mov	r0, r5
 8001262:	f7fe ffb5 	bl	80001d0 <strcmp>
 8001266:	2800      	cmp	r0, #0
 8001268:	f47f af4d 	bne.w	8001106 <ProcessNMEALine+0x92>
 800126c:	2e0e      	cmp	r6, #14
 800126e:	f77f af4a 	ble.w	8001106 <ProcessNMEALine+0x92>
      sscanf(field[2],"%lf",&lat);
 8001272:	4919      	ldr	r1, [pc, #100]	; (80012d8 <ProcessNMEALine+0x264>)
 8001274:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001276:	aa02      	add	r2, sp, #8
 8001278:	f005 fec8 	bl	800700c <siscanf>
      lat_hemi = field[3][0];
 800127c:	9b11      	ldr	r3, [sp, #68]	; 0x44
      sscanf(field[4],"%lf",&lon);
 800127e:	4916      	ldr	r1, [pc, #88]	; (80012d8 <ProcessNMEALine+0x264>)
 8001280:	9812      	ldr	r0, [sp, #72]	; 0x48
      lat_hemi = field[3][0];
 8001282:	f893 8000 	ldrb.w	r8, [r3]
      sscanf(field[4],"%lf",&lon);
 8001286:	aa04      	add	r2, sp, #16
 8001288:	f005 fec0 	bl	800700c <siscanf>
      lon_hemi = field[5][0];
 800128c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      sscanf(field[9],"%lf",&msl);
 800128e:	4912      	ldr	r1, [pc, #72]	; (80012d8 <ProcessNMEALine+0x264>)
 8001290:	9817      	ldr	r0, [sp, #92]	; 0x5c
      lon_hemi = field[5][0];
 8001292:	781d      	ldrb	r5, [r3, #0]
      sscanf(field[9],"%lf",&msl);
 8001294:	aa08      	add	r2, sp, #32
 8001296:	f005 feb9 	bl	800700c <siscanf>
      sscanf(field[11],"%lf",&alt);
 800129a:	490f      	ldr	r1, [pc, #60]	; (80012d8 <ProcessNMEALine+0x264>)
 800129c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800129e:	aa06      	add	r2, sp, #24
 80012a0:	f005 feb4 	bl	800700c <siscanf>
      sscanf(field[1],"%lf",&fix_time);
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <ProcessNMEALine+0x264>)
 80012a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80012a8:	aa0a      	add	r2, sp, #40	; 0x28
 80012aa:	f005 feaf 	bl	800700c <siscanf>
      if (sscanf(field[6],"%d",quality) == 0)// 0=Fix Not available, 1=GPS SPS, 2=GPS SPS DIFF
 80012ae:	490e      	ldr	r1, [pc, #56]	; (80012e8 <ProcessNMEALine+0x274>)
 80012b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80012b2:	463a      	mov	r2, r7
 80012b4:	f005 feaa 	bl	800700c <siscanf>
 80012b8:	b9d0      	cbnz	r0, 80012f0 <ProcessNMEALine+0x27c>
      sscanf(field[7],"%d",&sv);    // Satellites used (or in view, depends on receiver)
 80012ba:	aa01      	add	r2, sp, #4
 80012bc:	490a      	ldr	r1, [pc, #40]	; (80012e8 <ProcessNMEALine+0x274>)
 80012be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80012c0:	f005 fea4 	bl	800700c <siscanf>
      sscanf(field[8],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 80012c4:	4904      	ldr	r1, [pc, #16]	; (80012d8 <ProcessNMEALine+0x264>)
 80012c6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80012c8:	aa0c      	add	r2, sp, #48	; 0x30
 80012ca:	f005 fe9f 	bl	800700c <siscanf>
      if (valid != 0)
 80012ce:	e71a      	b.n	8001106 <ProcessNMEALine+0x92>
 80012d0:	0800b538 	.word	0x0800b538
 80012d4:	0800b524 	.word	0x0800b524
 80012d8:	0800b528 	.word	0x0800b528
 80012dc:	51eb851f 	.word	0x51eb851f
 80012e0:	404e0000 	.word	0x404e0000
 80012e4:	0800b52c 	.word	0x0800b52c
 80012e8:	0800b530 	.word	0x0800b530
 80012ec:	0800b534 	.word	0x0800b534
      sscanf(field[7],"%d",&sv);    // Satellites used (or in view, depends on receiver)
 80012f0:	4939      	ldr	r1, [pc, #228]	; (80013d8 <ProcessNMEALine+0x364>)
 80012f2:	9815      	ldr	r0, [sp, #84]	; 0x54
        lat_deg = (int)lat / 100;
 80012f4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80013e4 <ProcessNMEALine+0x370>
      sscanf(field[7],"%d",&sv);    // Satellites used (or in view, depends on receiver)
 80012f8:	aa01      	add	r2, sp, #4
 80012fa:	f005 fe87 	bl	800700c <siscanf>
      sscanf(field[8],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 80012fe:	aa0c      	add	r2, sp, #48	; 0x30
 8001300:	4936      	ldr	r1, [pc, #216]	; (80013dc <ProcessNMEALine+0x368>)
 8001302:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001304:	f005 fe82 	bl	800700c <siscanf>
        lat_deg = (int)lat / 100;
 8001308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800130c:	4639      	mov	r1, r7
 800130e:	4630      	mov	r0, r6
 8001310:	f7ff fc32 	bl	8000b78 <__aeabi_d2iz>
 8001314:	fb89 3900 	smull	r3, r9, r9, r0
 8001318:	17c0      	asrs	r0, r0, #31
 800131a:	ebc0 1969 	rsb	r9, r0, r9, asr #5
        lat_min = lat - (lat_deg * 100);
 800131e:	2064      	movs	r0, #100	; 0x64
 8001320:	fb00 f009 	mul.w	r0, r0, r9
 8001324:	f7ff f90e 	bl	8000544 <__aeabi_i2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4630      	mov	r0, r6
 800132e:	4639      	mov	r1, r7
 8001330:	f7fe ffba 	bl	80002a8 <__aeabi_dsub>
        lat = (double)lat_deg + (lat_min / 60.0);
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <ProcessNMEALine+0x36c>)
 8001336:	2200      	movs	r2, #0
 8001338:	f7ff fa98 	bl	800086c <__aeabi_ddiv>
 800133c:	4606      	mov	r6, r0
 800133e:	4648      	mov	r0, r9
 8001340:	460f      	mov	r7, r1
 8001342:	f7ff f8ff 	bl	8000544 <__aeabi_i2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4630      	mov	r0, r6
 800134c:	4639      	mov	r1, r7
 800134e:	f7fe ffad 	bl	80002ac <__adddf3>
        if (lat_hemi == 'S')
 8001352:	f1b8 0f53 	cmp.w	r8, #83	; 0x53
        lat = (double)lat_deg + (lat_min / 60.0);
 8001356:	4606      	mov	r6, r0
 8001358:	460f      	mov	r7, r1
        if (lat_hemi == 'S')
 800135a:	d102      	bne.n	8001362 <ProcessNMEALine+0x2ee>
          lat = -lat;
 800135c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8001360:	461f      	mov	r7, r3
        lon_deg = (int)lon / 100;
 8001362:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8001366:	4649      	mov	r1, r9
 8001368:	4640      	mov	r0, r8
 800136a:	f7ff fc05 	bl	8000b78 <__aeabi_d2iz>
 800136e:	f8df a074 	ldr.w	sl, [pc, #116]	; 80013e4 <ProcessNMEALine+0x370>
 8001372:	fb8a 3a00 	smull	r3, sl, sl, r0
 8001376:	17c0      	asrs	r0, r0, #31
 8001378:	ebc0 1a6a 	rsb	sl, r0, sl, asr #5
        lon_min = lon - (lon_deg * 100);
 800137c:	2064      	movs	r0, #100	; 0x64
 800137e:	fb00 f00a 	mul.w	r0, r0, sl
 8001382:	f7ff f8df 	bl	8000544 <__aeabi_i2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4640      	mov	r0, r8
 800138c:	4649      	mov	r1, r9
 800138e:	f7fe ff8b 	bl	80002a8 <__aeabi_dsub>
        lon = (double)lon_deg + (lon_min / 60.0);
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <ProcessNMEALine+0x36c>)
 8001394:	2200      	movs	r2, #0
 8001396:	f7ff fa69 	bl	800086c <__aeabi_ddiv>
 800139a:	4680      	mov	r8, r0
 800139c:	4650      	mov	r0, sl
 800139e:	4689      	mov	r9, r1
 80013a0:	f7ff f8d0 	bl	8000544 <__aeabi_i2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4640      	mov	r0, r8
 80013aa:	4649      	mov	r1, r9
 80013ac:	f7fe ff7e 	bl	80002ac <__adddf3>
        if (lon_hemi == 'W')
 80013b0:	2d57      	cmp	r5, #87	; 0x57
        lon = (double)lon_deg + (lon_min / 60.0);
 80013b2:	4680      	mov	r8, r0
 80013b4:	4689      	mov	r9, r1
        if (lon_hemi == 'W')
 80013b6:	d102      	bne.n	80013be <ProcessNMEALine+0x34a>
          lon = -lon;
 80013b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80013bc:	4699      	mov	r9, r3
        alt += msl; // Convert to height above datum
 80013be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80013c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80013c6:	f7fe ff71 	bl	80002ac <__adddf3>
        coords->lat=lat;
 80013ca:	e9c4 6700 	strd	r6, r7, [r4]
        coords->lon=lon;
 80013ce:	e9c4 8902 	strd	r8, r9, [r4, #8]
        coords->alt=alt;
 80013d2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80013d6:	e696      	b.n	8001106 <ProcessNMEALine+0x92>
 80013d8:	0800b530 	.word	0x0800b530
 80013dc:	0800b528 	.word	0x0800b528
 80013e0:	404e0000 	.word	0x404e0000
 80013e4:	51eb851f 	.word	0x51eb851f

080013e8 <UBX_Fletcher_Checksum>:
 *	sure to mask both CK_A and CK_B with 0xFF after both operations in the loop.
 */
void UBX_Fletcher_Checksum (uint8_t *data, int count, uint8_t * cka, uint8_t * ckb){
	int i;

	*cka = 0;
 80013e8:	f04f 0c00 	mov.w	ip, #0
	*ckb = 0;

	for (i = 0; i < count; i++)
 80013ec:	2900      	cmp	r1, #0
	*cka = 0;
 80013ee:	f882 c000 	strb.w	ip, [r2]
	*ckb = 0;
 80013f2:	f883 c000 	strb.w	ip, [r3]
	for (i = 0; i < count; i++)
 80013f6:	dd11      	ble.n	800141c <UBX_Fletcher_Checksum+0x34>
 80013f8:	3801      	subs	r0, #1
void UBX_Fletcher_Checksum (uint8_t *data, int count, uint8_t * cka, uint8_t * ckb){
 80013fa:	b500      	push	{lr}
 80013fc:	eb00 0e01 	add.w	lr, r0, r1
	{
		*cka = *cka + data[i];
 8001400:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8001404:	7811      	ldrb	r1, [r2, #0]
 8001406:	4461      	add	r1, ip
 8001408:	b2c9      	uxtb	r1, r1
 800140a:	7011      	strb	r1, [r2, #0]
		*ckb = *ckb + *cka;
 800140c:	f893 c000 	ldrb.w	ip, [r3]
	for (i = 0; i < count; i++)
 8001410:	4586      	cmp	lr, r0
		*ckb = *ckb + *cka;
 8001412:	4461      	add	r1, ip
 8001414:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < count; i++)
 8001416:	d1f3      	bne.n	8001400 <UBX_Fletcher_Checksum+0x18>
	}
}
 8001418:	f85d fb04 	ldr.w	pc, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <UBX_Parse_Raw_To_NAV_PVT>:

bool UBX_Parse_Raw_To_NAV_PVT(char* buffer, uint32_t len, ubx_nav_pvt_msg_t * dest)
{
    /* Length must be 92 */
    if (len != UBX_PAYLOAD_LENGTH)
 8001420:	295c      	cmp	r1, #92	; 0x5c
{
 8001422:	4603      	mov	r3, r0
    if (len != UBX_PAYLOAD_LENGTH)
 8001424:	d177      	bne.n	8001516 <UBX_Parse_Raw_To_NAV_PVT+0xf6>
    {
        //todo: assert/error handler?
        return false;
    }

    dest->iTOW 	 = (buffer[3] << 24) | (buffer[2] << 16) | (buffer [1] << 8) | buffer[0] ;
 8001426:	6801      	ldr	r1, [r0, #0]
 8001428:	6011      	str	r1, [r2, #0]
    dest->year 	 = (buffer[5] << 8 ) | (buffer[4]) ;
 800142a:	8881      	ldrh	r1, [r0, #4]
 800142c:	8091      	strh	r1, [r2, #4]
    dest->month	 =  buffer[6] ;
 800142e:	7981      	ldrb	r1, [r0, #6]
 8001430:	7191      	strb	r1, [r2, #6]
    dest->day	 =  buffer[7] ;
 8001432:	79c1      	ldrb	r1, [r0, #7]
 8001434:	71d1      	strb	r1, [r2, #7]
    dest->hour	 =  buffer[8] ;
 8001436:	7a01      	ldrb	r1, [r0, #8]
 8001438:	7211      	strb	r1, [r2, #8]
    dest->min	 =  buffer[9] ;
 800143a:	7a41      	ldrb	r1, [r0, #9]
 800143c:	7251      	strb	r1, [r2, #9]
    dest->sec	 =  buffer[10];
 800143e:	7a81      	ldrb	r1, [r0, #10]
 8001440:	7291      	strb	r1, [r2, #10]

    /* Handle the 'validity flags' in byte 11 */
    dest->validDate 		=  buffer[11] 	    & 0b00000001;
 8001442:	7ac1      	ldrb	r1, [r0, #11]
    dest->headVeh = (buffer[87] << 24) | (buffer[86] << 16) | (buffer [85] << 8) | buffer[84] ;
    dest->magDec  = (buffer[89] << 8 ) | (buffer[88]) ;
    dest->magAcc  = (buffer[91] << 8 ) | (buffer[90]) ;


    return true;
 8001444:	2001      	movs	r0, #1
    dest->validDate 		=  buffer[11] 	    & 0b00000001;
 8001446:	4001      	ands	r1, r0
 8001448:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    dest->validTime 		= (buffer[11] >> 1) & 0b00000001;
 800144c:	7ad9      	ldrb	r1, [r3, #11]
 800144e:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8001452:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    dest->fullyResolved	= (buffer[11] >> 2) & 0b00000001;
 8001456:	7ad9      	ldrb	r1, [r3, #11]
 8001458:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800145c:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    dest->validMag		= (buffer[11] >> 3) & 0b00000001;
 8001460:	7ad9      	ldrb	r1, [r3, #11]
 8001462:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8001466:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    dest->tAcc    = (buffer[15] << 24) | (buffer[14] << 16) | (buffer [13] << 8) | buffer[12] ;
 800146a:	68d9      	ldr	r1, [r3, #12]
 800146c:	60d1      	str	r1, [r2, #12]
    dest->nano	  = (buffer[19] << 24) | (buffer[18] << 16) | (buffer [17] << 8) | buffer[16] ;
 800146e:	6919      	ldr	r1, [r3, #16]
 8001470:	6111      	str	r1, [r2, #16]
    dest->fixType =  buffer[20] ;
 8001472:	7d19      	ldrb	r1, [r3, #20]
 8001474:	7511      	strb	r1, [r2, #20]
    dest->gnssFixOK		=  buffer[21] 	    & 0b00000001;
 8001476:	7d59      	ldrb	r1, [r3, #21]
 8001478:	4001      	ands	r1, r0
 800147a:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    dest->diffSoln		= (buffer[21] >> 1) & 0b00000001;
 800147e:	7d59      	ldrb	r1, [r3, #21]
 8001480:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8001484:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    dest->psmState		= (buffer[21] >> 2) & 0b00000111;
 8001488:	7d59      	ldrb	r1, [r3, #21]
 800148a:	f3c1 0182 	ubfx	r1, r1, #2, #3
 800148e:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    dest->headVehValid  = (buffer[21] >> 5) & 0b00000001;
 8001492:	7d59      	ldrb	r1, [r3, #21]
 8001494:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001498:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    dest->carrSoln		= (buffer[21] >> 6) & 0b00000011;
 800149c:	7d59      	ldrb	r1, [r3, #21]
 800149e:	0989      	lsrs	r1, r1, #6
 80014a0:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    dest->confirmedAvai = (buffer[22] >> 5) & 0b00000001;
 80014a4:	7d99      	ldrb	r1, [r3, #22]
 80014a6:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80014aa:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    dest->confirmedDate = (buffer[22] >> 6) & 0b00000001;
 80014ae:	7d99      	ldrb	r1, [r3, #22]
 80014b0:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80014b4:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    dest->confirmedTime = (buffer[22] >> 7) & 0b00000001;
 80014b8:	7d99      	ldrb	r1, [r3, #22]
 80014ba:	09c9      	lsrs	r1, r1, #7
 80014bc:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    dest->numSV 	  =  buffer[23];
 80014c0:	7dd9      	ldrb	r1, [r3, #23]
 80014c2:	75d1      	strb	r1, [r2, #23]
    dest->lon	  = (buffer[27] << 24) | (buffer[26] << 16) | (buffer [25] << 8) | buffer[24] ;
 80014c4:	6999      	ldr	r1, [r3, #24]
 80014c6:	6191      	str	r1, [r2, #24]
    dest->lat	  = (buffer[31] << 24) | (buffer[30] << 16) | (buffer [29] << 8) | buffer[28] ;
 80014c8:	69d9      	ldr	r1, [r3, #28]
 80014ca:	61d1      	str	r1, [r2, #28]
    dest->height  = (buffer[35] << 24) | (buffer[34] << 16) | (buffer [33] << 8) | buffer[32] ;
 80014cc:	6a19      	ldr	r1, [r3, #32]
 80014ce:	6211      	str	r1, [r2, #32]
    dest->hMSL    = (buffer[39] << 24) | (buffer[38] << 16) | (buffer [37] << 8) | buffer[36] ;
 80014d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80014d2:	6251      	str	r1, [r2, #36]	; 0x24
    dest->hAcc    = (buffer[43] << 24) | (buffer[42] << 16) | (buffer [41] << 8) | buffer[40] ;
 80014d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014d6:	6291      	str	r1, [r2, #40]	; 0x28
    dest->vAcc    = (buffer[47] << 24) | (buffer[46] << 16) | (buffer [45] << 8) | buffer[44] ;
 80014d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014da:	62d1      	str	r1, [r2, #44]	; 0x2c
    dest->velN    = (buffer[51] << 24) | (buffer[50] << 16) | (buffer [49] << 8) | buffer[48] ;
 80014dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014de:	6311      	str	r1, [r2, #48]	; 0x30
    dest->velE    = (buffer[55] << 24) | (buffer[54] << 16) | (buffer [53] << 8) | buffer[52] ;
 80014e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e2:	6351      	str	r1, [r2, #52]	; 0x34
    dest->velD    = (buffer[59] << 24) | (buffer[58] << 16) | (buffer [57] << 8) | buffer[56] ;
 80014e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014e6:	6391      	str	r1, [r2, #56]	; 0x38
    dest->gSpeed  = (buffer[63] << 24) | (buffer[62] << 16) | (buffer [61] << 8) | buffer[60] ;
 80014e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014ea:	63d1      	str	r1, [r2, #60]	; 0x3c
    dest->headMot = (buffer[67] << 24) | (buffer[66] << 16) | (buffer [65] << 8) | buffer[64] ;
 80014ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80014ee:	6411      	str	r1, [r2, #64]	; 0x40
    dest->sAcc    = (buffer[71] << 24) | (buffer[70] << 16) | (buffer [69] << 8) | buffer[68] ;
 80014f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014f2:	6451      	str	r1, [r2, #68]	; 0x44
    dest->headAcc = (buffer[75] << 24) | (buffer[74] << 16) | (buffer [73] << 8) | buffer[72] ;
 80014f4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80014f6:	6491      	str	r1, [r2, #72]	; 0x48
    dest->pDOP	  = (buffer[77] << 8 ) | (buffer[76]) ;
 80014f8:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 80014fc:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    dest->headVeh = (buffer[87] << 24) | (buffer[86] << 16) | (buffer [85] << 8) | buffer[84] ;
 8001500:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001502:	6511      	str	r1, [r2, #80]	; 0x50
    dest->magDec  = (buffer[89] << 8 ) | (buffer[88]) ;
 8001504:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8001508:	f8a2 1054 	strh.w	r1, [r2, #84]	; 0x54
    dest->magAcc  = (buffer[91] << 8 ) | (buffer[90]) ;
 800150c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001510:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    return true;
 8001514:	4770      	bx	lr
        return false;
 8001516:	2000      	movs	r0, #0

}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <CAN_FIFO_0_Callback>:

/* USER CODE BEGIN 4 */
void CAN_FIFO_0_Callback(CAN_RxHeaderTypeDef *rxHeader, uint8_t data[])
{

}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <SystemClock_Config>:
{
 8001520:	b510      	push	{r4, lr}
 8001522:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001524:	2244      	movs	r2, #68	; 0x44
 8001526:	2100      	movs	r1, #0
 8001528:	a805      	add	r0, sp, #20
 800152a:	f004 fec7 	bl	80062bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152e:	2300      	movs	r3, #0
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001530:	f44f 7000 	mov.w	r0, #512	; 0x200
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	e9cd 3300 	strd	r3, r3, [sp]
 8001538:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800153c:	9304      	str	r3, [sp, #16]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800153e:	f003 f997 	bl	8004870 <HAL_PWREx_ControlVoltageScaling>
 8001542:	b108      	cbz	r0, 8001548 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001546:	e7fe      	b.n	8001546 <SystemClock_Config+0x26>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001548:	f44f 7180 	mov.w	r1, #256	; 0x100
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154c:	2210      	movs	r2, #16
 800154e:	e9cd 1208 	strd	r1, r2, [sp, #32]
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001552:	2101      	movs	r1, #1
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001554:	220a      	movs	r2, #10
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001556:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001558:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800155e:	2207      	movs	r2, #7
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001560:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001564:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001568:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800156a:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f003 fa62 	bl	8004a34 <HAL_RCC_OscConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	b108      	cbz	r0, 8001578 <SystemClock_Config+0x58>
 8001574:	b672      	cpsid	i
	while (1)
 8001576:	e7fe      	b.n	8001576 <SystemClock_Config+0x56>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	240f      	movs	r4, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2203      	movs	r2, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800157c:	2104      	movs	r1, #4
 800157e:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001580:	e9cd 4200 	strd	r4, r2, [sp]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001584:	e9cd 3302 	strd	r3, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800158a:	f003 fd41 	bl	8005010 <HAL_RCC_ClockConfig>
 800158e:	b108      	cbz	r0, 8001594 <SystemClock_Config+0x74>
 8001590:	b672      	cpsid	i
	while (1)
 8001592:	e7fe      	b.n	8001592 <SystemClock_Config+0x72>
}
 8001594:	b016      	add	sp, #88	; 0x58
 8001596:	bd10      	pop	{r4, pc}

08001598 <main>:
{
 8001598:	b500      	push	{lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	2400      	movs	r4, #0
{
 800159c:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 800159e:	f001 ffff 	bl	80035a0 <HAL_Init>
	SystemClock_Config();
 80015a2:	f7ff ffbd 	bl	8001520 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80015aa:	e9cd 4407 	strd	r4, r4, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <main+0x168>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	9409      	str	r4, [sp, #36]	; 0x24
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	hi2c1.Instance = I2C1;
 80015b4:	4d53      	ldr	r5, [pc, #332]	; (8001704 <main+0x16c>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	f041 0104 	orr.w	r1, r1, #4
 80015ba:	64d9      	str	r1, [r3, #76]	; 0x4c
 80015bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015be:	f001 0104 	and.w	r1, r1, #4
 80015c2:	9101      	str	r1, [sp, #4]
 80015c4:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80015cc:	64d9      	str	r1, [r3, #76]	; 0x4c
 80015ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015d0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80015d4:	9102      	str	r1, [sp, #8]
 80015d6:	9902      	ldr	r1, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015da:	f041 0101 	orr.w	r1, r1, #1
 80015de:	64d9      	str	r1, [r3, #76]	; 0x4c
 80015e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015e2:	f001 0101 	and.w	r1, r1, #1
 80015e6:	9103      	str	r1, [sp, #12]
 80015e8:	9903      	ldr	r1, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015ec:	f041 0102 	orr.w	r1, r1, #2
 80015f0:	64d9      	str	r1, [r3, #76]	; 0x4c
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80015f8:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80015fc:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001606:	f002 fd2d 	bl	8004064 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <main+0x170>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800160c:	483f      	ldr	r0, [pc, #252]	; (800170c <main+0x174>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pin = B1_Pin;
 8001610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001614:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001616:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2601      	movs	r6, #1
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f002 fc1c 	bl	8003e58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001620:	f44f 7390 	mov.w	r3, #288	; 0x120
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	a905      	add	r1, sp, #20
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800162a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	e9cd 6406 	strd	r6, r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f002 fc11 	bl	8003e58 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <main+0x178>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	4836      	ldr	r0, [pc, #216]	; (8001714 <main+0x17c>)
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800163a:	2230      	movs	r2, #48	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	e9cd 3406 	strd	r3, r4, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001642:	9205      	str	r2, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f002 fc08 	bl	8003e58 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001648:	4622      	mov	r2, r4
 800164a:	4621      	mov	r1, r4
 800164c:	200a      	movs	r0, #10
 800164e:	f002 fb4d 	bl	8003cec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001652:	200a      	movs	r0, #10
 8001654:	f002 fb88 	bl	8003d68 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001658:	4622      	mov	r2, r4
 800165a:	4621      	mov	r1, r4
 800165c:	2017      	movs	r0, #23
 800165e:	f002 fb45 	bl	8003cec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001662:	2017      	movs	r0, #23
 8001664:	f002 fb80 	bl	8003d68 <HAL_NVIC_EnableIRQ>
	hi2c1.Init.Timing = 0x00702991;
 8001668:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <main+0x180>)
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <main+0x184>)
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166c:	622c      	str	r4, [r5, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166e:	4628      	mov	r0, r5
	hi2c1.Init.Timing = 0x00702991;
 8001670:	e9c5 2300 	strd	r2, r3, [r5]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001674:	e9c5 4602 	strd	r4, r6, [r5, #8]
	hi2c1.Init.OwnAddress2 = 0;
 8001678:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167c:	e9c5 4406 	strd	r4, r4, [r5, #24]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	f002 fe4e 	bl	8004320 <HAL_I2C_Init>
 8001684:	b108      	cbz	r0, 800168a <main+0xf2>
 8001686:	b672      	cpsid	i
	while (1)
 8001688:	e7fe      	b.n	8001688 <main+0xf0>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800168a:	4601      	mov	r1, r0
 800168c:	4628      	mov	r0, r5
 800168e:	f003 f891 	bl	80047b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001692:	b108      	cbz	r0, 8001698 <main+0x100>
 8001694:	b672      	cpsid	i
	while (1)
 8001696:	e7fe      	b.n	8001696 <main+0xfe>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001698:	4601      	mov	r1, r0
 800169a:	4628      	mov	r0, r5
 800169c:	f003 f8b4 	bl	8004808 <HAL_I2CEx_ConfigDigitalFilter>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b108      	cbz	r0, 80016a8 <main+0x110>
 80016a4:	b672      	cpsid	i
	while (1)
 80016a6:	e7fe      	b.n	80016a6 <main+0x10e>
  huart2.Instance = USART2;
 80016a8:	4c1d      	ldr	r4, [pc, #116]	; (8001720 <main+0x188>)
  huart2.Init.BaudRate = 115200;
 80016aa:	491e      	ldr	r1, [pc, #120]	; (8001724 <main+0x18c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b4:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b6:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016bc:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c4:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c8:	f004 fd0a 	bl	80060e0 <HAL_UART_Init>
 80016cc:	b108      	cbz	r0, 80016d2 <main+0x13a>
 80016ce:	b672      	cpsid	i
	while (1)
 80016d0:	e7fe      	b.n	80016d0 <main+0x138>
  HAL_UART_Receive_IT(&huart2, &rxBufferGNSS, 1);
 80016d2:	4915      	ldr	r1, [pc, #84]	; (8001728 <main+0x190>)
 80016d4:	4632      	mov	r2, r6
 80016d6:	4620      	mov	r0, r4
 80016d8:	f004 fd92 	bl	8006200 <HAL_UART_Receive_IT>
	if (IKS01A2_Init()) {
 80016dc:	f001 f8c6 	bl	800286c <IKS01A2_Init>
 80016e0:	b108      	cbz	r0, 80016e6 <main+0x14e>
		imuInit = 1; // IMU initialize correctly
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <main+0x194>)
 80016e4:	601e      	str	r6, [r3, #0]
	CAN_Init();
 80016e6:	f000 ff55 	bl	8002594 <CAN_Init>
	CAN_AddRXCallback(CAN_FIFO_0_Callback);
 80016ea:	4811      	ldr	r0, [pc, #68]	; (8001730 <main+0x198>)
 80016ec:	f000 fff6 	bl	80026dc <CAN_AddRXCallback>
	GLOBVAR_Init();
 80016f0:	f7ff fc92 	bl	8001018 <GLOBVAR_Init>
	SCHEDULER_Init();
 80016f4:	f000 fb8a 	bl	8001e0c <SCHEDULER_Init>
	SCHEDULER_Run();
 80016f8:	f000 fcec 	bl	80020d4 <SCHEDULER_Run>
	while (1)
 80016fc:	e7fe      	b.n	80016fc <main+0x164>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	200002c0 	.word	0x200002c0
 8001708:	10210000 	.word	0x10210000
 800170c:	48000800 	.word	0x48000800
 8001710:	10110000 	.word	0x10110000
 8001714:	48000400 	.word	0x48000400
 8001718:	40005400 	.word	0x40005400
 800171c:	00702991 	.word	0x00702991
 8001720:	2000030c 	.word	0x2000030c
 8001724:	40004400 	.word	0x40004400
 8001728:	20000464 	.word	0x20000464
 800172c:	20000390 	.word	0x20000390
 8001730:	0800151d 	.word	0x0800151d

08001734 <HAL_UART_RxCpltCallback>:
    if (huart -> Instance == USART2)
 8001734:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_UART_RxCpltCallback+0x1cc>)
 8001736:	6802      	ldr	r2, [r0, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d000      	beq.n	800173e <HAL_UART_RxCpltCallback+0xa>
 800173c:	4770      	bx	lr
{
 800173e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    	if (processUbxFrame){	//Decoding UBX frame
 8001742:	4d70      	ldr	r5, [pc, #448]	; (8001904 <HAL_UART_RxCpltCallback+0x1d0>)
{
 8001744:	b082      	sub	sp, #8
    	if (processUbxFrame){	//Decoding UBX frame
 8001746:	682b      	ldr	r3, [r5, #0]
{
 8001748:	af00      	add	r7, sp, #0
    	if (processUbxFrame){	//Decoding UBX frame
 800174a:	b1ab      	cbz	r3, 8001778 <HAL_UART_RxCpltCallback+0x44>
    		if (rx_index_ubx == 2) {
 800174c:	496e      	ldr	r1, [pc, #440]	; (8001908 <HAL_UART_RxCpltCallback+0x1d4>)
 800174e:	680b      	ldr	r3, [r1, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d032      	beq.n	80017ba <HAL_UART_RxCpltCallback+0x86>
    		else if (rx_index_ubx == 3){
 8001754:	2b03      	cmp	r3, #3
 8001756:	d057      	beq.n	8001808 <HAL_UART_RxCpltCallback+0xd4>
    		else if (rx_index_ubx == 4){
 8001758:	2b04      	cmp	r3, #4
 800175a:	d04e      	beq.n	80017fa <HAL_UART_RxCpltCallback+0xc6>
    		}else if (rx_index_ubx == 5){
 800175c:	2b05      	cmp	r3, #5
 800175e:	d06a      	beq.n	8001836 <HAL_UART_RxCpltCallback+0x102>
    		}else if (rx_index_ubx>=6 && (rx_index_ubx < 6 + rxUbxFrame.length)){	//Payload
 8001760:	4e6a      	ldr	r6, [pc, #424]	; (800190c <HAL_UART_RxCpltCallback+0x1d8>)
 8001762:	88b2      	ldrh	r2, [r6, #4]
 8001764:	dd76      	ble.n	8001854 <HAL_UART_RxCpltCallback+0x120>
 8001766:	1d50      	adds	r0, r2, #5
 8001768:	4283      	cmp	r3, r0
 800176a:	dc79      	bgt.n	8001860 <HAL_UART_RxCpltCallback+0x12c>
    			rxUbxFrame.payload[rx_index_ubx - 6] = rxBufferGNSS;
 800176c:	4868      	ldr	r0, [pc, #416]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
    			rx_index_ubx++;
 800176e:	1c5a      	adds	r2, r3, #1
    			rxUbxFrame.payload[rx_index_ubx - 6] = rxBufferGNSS;
 8001770:	7804      	ldrb	r4, [r0, #0]
 8001772:	54f4      	strb	r4, [r6, r3]
    			rx_index_ubx++;
 8001774:	600a      	str	r2, [r1, #0]
 8001776:	e026      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
			if ((rxBufferGNSS == '\r') || (rxBufferGNSS == '\n')) // Is this an end-of-line condition, either will suffice?
 8001778:	4a65      	ldr	r2, [pc, #404]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
 800177a:	7814      	ldrb	r4, [r2, #0]
 800177c:	2c0d      	cmp	r4, #13
 800177e:	d00d      	beq.n	800179c <HAL_UART_RxCpltCallback+0x68>
 8001780:	2c0a      	cmp	r4, #10
 8001782:	d00b      	beq.n	800179c <HAL_UART_RxCpltCallback+0x68>
			  if ((rxBufferGNSS == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8001784:	2c24      	cmp	r4, #36	; 0x24
 8001786:	4a63      	ldr	r2, [pc, #396]	; (8001914 <HAL_UART_RxCpltCallback+0x1e0>)
 8001788:	d035      	beq.n	80017f6 <HAL_UART_RxCpltCallback+0xc2>
 800178a:	6811      	ldr	r1, [r2, #0]
 800178c:	29c8      	cmp	r1, #200	; 0xc8
 800178e:	d032      	beq.n	80017f6 <HAL_UART_RxCpltCallback+0xc2>
			  rx_buffer[rx_index++] = rxBufferGNSS; // Copy to buffer and increment
 8001790:	1c48      	adds	r0, r1, #1
 8001792:	460b      	mov	r3, r1
 8001794:	4960      	ldr	r1, [pc, #384]	; (8001918 <HAL_UART_RxCpltCallback+0x1e4>)
 8001796:	6010      	str	r0, [r2, #0]
 8001798:	54cc      	strb	r4, [r1, r3]
 800179a:	e014      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
			  if (rx_index != 0) // Line has some content
 800179c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001914 <HAL_UART_RxCpltCallback+0x1e0>
 80017a0:	f8d8 6000 	ldr.w	r6, [r8]
 80017a4:	2e00      	cmp	r6, #0
 80017a6:	d136      	bne.n	8001816 <HAL_UART_RxCpltCallback+0xe2>
    	HAL_UART_Receive_IT(&huart2, &rxBufferGNSS, 1);
 80017a8:	4959      	ldr	r1, [pc, #356]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
 80017aa:	485c      	ldr	r0, [pc, #368]	; (800191c <HAL_UART_RxCpltCallback+0x1e8>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	f004 fd27 	bl	8006200 <HAL_UART_Receive_IT>
}
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    			rxUbxFrame.class = rxBufferGNSS;
 80017ba:	4b55      	ldr	r3, [pc, #340]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
 80017bc:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_UART_RxCpltCallback+0x1d8>)
 80017be:	781c      	ldrb	r4, [r3, #0]
 80017c0:	7094      	strb	r4, [r2, #2]
    			rx_index_ubx++;
 80017c2:	2303      	movs	r3, #3
 80017c4:	600b      	str	r3, [r1, #0]
    	if (rxBufferGNSS == UBX_SYNC_CHAR2 && ubxSync1Received){
 80017c6:	2c62      	cmp	r4, #98	; 0x62
 80017c8:	d005      	beq.n	80017d6 <HAL_UART_RxCpltCallback+0xa2>
		if (rxBufferGNSS == UBX_SYNC_CHAR1){
 80017ca:	2cb5      	cmp	r4, #181	; 0xb5
 80017cc:	d1ec      	bne.n	80017a8 <HAL_UART_RxCpltCallback+0x74>
			ubxSync1Received = 1;
 80017ce:	4b54      	ldr	r3, [pc, #336]	; (8001920 <HAL_UART_RxCpltCallback+0x1ec>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e7e8      	b.n	80017a8 <HAL_UART_RxCpltCallback+0x74>
    	if (rxBufferGNSS == UBX_SYNC_CHAR2 && ubxSync1Received){
 80017d6:	4b52      	ldr	r3, [pc, #328]	; (8001920 <HAL_UART_RxCpltCallback+0x1ec>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d0e4      	beq.n	80017a8 <HAL_UART_RxCpltCallback+0x74>
    		rxUbxFrame.syncChar1 = UBX_SYNC_CHAR1;
 80017de:	4a4b      	ldr	r2, [pc, #300]	; (800190c <HAL_UART_RxCpltCallback+0x1d8>)
			rx_index_ubx=2;
 80017e0:	4949      	ldr	r1, [pc, #292]	; (8001908 <HAL_UART_RxCpltCallback+0x1d4>)
    		rxUbxFrame.syncChar1 = UBX_SYNC_CHAR1;
 80017e2:	f246 20b5 	movw	r0, #25269	; 0x62b5
 80017e6:	8010      	strh	r0, [r2, #0]
			processUbxFrame = 1;	//We are receiving a UBX frame
 80017e8:	2401      	movs	r4, #1
			rx_index_ubx=2;
 80017ea:	2002      	movs	r0, #2
			ubxSync1Received = 0;
 80017ec:	2200      	movs	r2, #0
			processUbxFrame = 1;	//We are receiving a UBX frame
 80017ee:	602c      	str	r4, [r5, #0]
			rx_index_ubx=2;
 80017f0:	6008      	str	r0, [r1, #0]
			ubxSync1Received = 0;
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e7d8      	b.n	80017a8 <HAL_UART_RxCpltCallback+0x74>
 80017f6:	2001      	movs	r0, #1
 80017f8:	e7cc      	b.n	8001794 <HAL_UART_RxCpltCallback+0x60>
    		    rxUbxFrame.length = rxBufferGNSS;
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
 80017fc:	4a43      	ldr	r2, [pc, #268]	; (800190c <HAL_UART_RxCpltCallback+0x1d8>)
 80017fe:	781c      	ldrb	r4, [r3, #0]
 8001800:	8094      	strh	r4, [r2, #4]
    		    rx_index_ubx++;
 8001802:	2305      	movs	r3, #5
 8001804:	600b      	str	r3, [r1, #0]
 8001806:	e7de      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
    			rxUbxFrame.id = rxBufferGNSS;
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <HAL_UART_RxCpltCallback+0x1d8>)
 800180c:	781c      	ldrb	r4, [r3, #0]
 800180e:	70d4      	strb	r4, [r2, #3]
    			rx_index_ubx++;
 8001810:	2304      	movs	r3, #4
 8001812:	600b      	str	r3, [r1, #0]
 8001814:	e7d7      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
				memcpy((void *)nmeaFrame, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 8001816:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001934 <HAL_UART_RxCpltCallback+0x200>
 800181a:	493f      	ldr	r1, [pc, #252]	; (8001918 <HAL_UART_RxCpltCallback+0x1e4>)
 800181c:	4632      	mov	r2, r6
 800181e:	4648      	mov	r0, r9
 8001820:	f004 fd3e 	bl	80062a0 <memcpy>
				nmeaFrameValid = 1; // flag new line valid for processing
 8001824:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_UART_RxCpltCallback+0x1f0>)
				nmeaFrame[rx_index] = 0; // Add terminating NUL
 8001826:	2300      	movs	r3, #0
				nmeaFrameValid = 1; // flag new line valid for processing
 8001828:	2101      	movs	r1, #1
				nmeaFrame[rx_index] = 0; // Add terminating NUL
 800182a:	f809 3006 	strb.w	r3, [r9, r6]
				nmeaFrameValid = 1; // flag new line valid for processing
 800182e:	6011      	str	r1, [r2, #0]
				rx_index = 0; // Reset content pointer
 8001830:	f8c8 3000 	str.w	r3, [r8]
 8001834:	e7c7      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
    		    rxUbxFrame.length = (rxBufferGNSS << 8) + rxUbxFrame.length;
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <HAL_UART_RxCpltCallback+0x1d8>)
 8001838:	4835      	ldr	r0, [pc, #212]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
 800183a:	8893      	ldrh	r3, [r2, #4]
 800183c:	7804      	ldrb	r4, [r0, #0]
 800183e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001842:	b29b      	uxth	r3, r3
    		    if (rxUbxFrame.length != UBX_PAYLOAD_LENGTH){
 8001844:	2b5c      	cmp	r3, #92	; 0x5c
    		    rxUbxFrame.length = (rxBufferGNSS << 8) + rxUbxFrame.length;
 8001846:	8093      	strh	r3, [r2, #4]
    		    	processUbxFrame = 0;
 8001848:	bf1c      	itt	ne
 800184a:	2300      	movne	r3, #0
 800184c:	602b      	strne	r3, [r5, #0]
    		    rx_index_ubx++;
 800184e:	2306      	movs	r3, #6
 8001850:	600b      	str	r3, [r1, #0]
 8001852:	e7b8      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
    		}else if (rx_index_ubx == 7 + rxUbxFrame.length){
 8001854:	1dd0      	adds	r0, r2, #7
 8001856:	4283      	cmp	r3, r0
 8001858:	d00c      	beq.n	8001874 <HAL_UART_RxCpltCallback+0x140>
    	if (rxBufferGNSS == UBX_SYNC_CHAR2 && ubxSync1Received){
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
 800185c:	781c      	ldrb	r4, [r3, #0]
 800185e:	e7b2      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
    		}else if (rx_index_ubx == 6 + rxUbxFrame.length){
 8001860:	1d90      	adds	r0, r2, #6
 8001862:	4283      	cmp	r3, r0
 8001864:	d1f6      	bne.n	8001854 <HAL_UART_RxCpltCallback+0x120>
    			rxUbxFrame.checksumA = rxBufferGNSS;
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_UART_RxCpltCallback+0x1dc>)
    			rx_index_ubx++;
 8001868:	3207      	adds	r2, #7
    			rxUbxFrame.checksumA = rxBufferGNSS;
 800186a:	781c      	ldrb	r4, [r3, #0]
 800186c:	f886 4062 	strb.w	r4, [r6, #98]	; 0x62
    			rx_index_ubx++;
 8001870:	600a      	str	r2, [r1, #0]
 8001872:	e7a8      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
    			rx_index_ubx = 0;
 8001874:	2300      	movs	r3, #0
    			rxUbxFrame.checksumB = rxBufferGNSS;
 8001876:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001910 <HAL_UART_RxCpltCallback+0x1dc>
    			if (rxUbxFrame.class == 0x1 && rxUbxFrame.id==0x7){ //Check if UBX-NAV-PVT frame
 800187a:	8870      	ldrh	r0, [r6, #2]
    			rx_index_ubx = 0;
 800187c:	600b      	str	r3, [r1, #0]
    			processUbxFrame = 0;	//End of UBX frame
 800187e:	602b      	str	r3, [r5, #0]
    			if (rxUbxFrame.class == 0x1 && rxUbxFrame.id==0x7){ //Check if UBX-NAV-PVT frame
 8001880:	f240 7301 	movw	r3, #1793	; 0x701
    			rxUbxFrame.checksumB = rxBufferGNSS;
 8001884:	f898 4000 	ldrb.w	r4, [r8]
 8001888:	f886 4063 	strb.w	r4, [r6, #99]	; 0x63
    			if (rxUbxFrame.class == 0x1 && rxUbxFrame.id==0x7){ //Check if UBX-NAV-PVT frame
 800188c:	4298      	cmp	r0, r3
 800188e:	d19a      	bne.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
    				uint8_t  checksumData[rxUbxFrame.length + 4];
 8001890:	f102 030b 	add.w	r3, r2, #11
 8001894:	f023 0307 	bic.w	r3, r3, #7
    			if (rxUbxFrame.class == 0x1 && rxUbxFrame.id==0x7){ //Check if UBX-NAV-PVT frame
 8001898:	466c      	mov	r4, sp
    				uint8_t  checksumData[rxUbxFrame.length + 4];
 800189a:	ebad 0d03 	sub.w	sp, sp, r3
    				checksumData[0] = rxUbxFrame.class;
 800189e:	78b3      	ldrb	r3, [r6, #2]
 80018a0:	f88d 3000 	strb.w	r3, [sp]
    				checksumData[1] = rxUbxFrame.id;
 80018a4:	78f3      	ldrb	r3, [r6, #3]
 80018a6:	f88d 3001 	strb.w	r3, [sp, #1]
    				checksumData[3] = rxUbxFrame.length >> 8;
 80018aa:	0a13      	lsrs	r3, r2, #8
    				uint8_t  checksumData[rxUbxFrame.length + 4];
 80018ac:	f102 0904 	add.w	r9, r2, #4
    				checksumData[2] = rxUbxFrame.length;
 80018b0:	f88d 2002 	strb.w	r2, [sp, #2]
    				checksumData[3] = rxUbxFrame.length >> 8;
 80018b4:	f88d 3003 	strb.w	r3, [sp, #3]
    				uint8_t  checksumData[rxUbxFrame.length + 4];
 80018b8:	46ea      	mov	sl, sp
    				for (int i = 4; i<= 3 + rxUbxFrame.length; i++){
 80018ba:	b11a      	cbz	r2, 80018c4 <HAL_UART_RxCpltCallback+0x190>
    					checksumData[i] = (uint8_t)rxUbxFrame.payload[i-4];
 80018bc:	491a      	ldr	r1, [pc, #104]	; (8001928 <HAL_UART_RxCpltCallback+0x1f4>)
 80018be:	a801      	add	r0, sp, #4
 80018c0:	f004 fcee 	bl	80062a0 <memcpy>
    				UBX_Fletcher_Checksum (checksumData,4 + rxUbxFrame.length, &cka, &ckb);
 80018c4:	1dfb      	adds	r3, r7, #7
 80018c6:	1dba      	adds	r2, r7, #6
 80018c8:	4649      	mov	r1, r9
 80018ca:	4650      	mov	r0, sl
 80018cc:	f7ff fd8c 	bl	80013e8 <UBX_Fletcher_Checksum>
    				if (cka == rxUbxFrame.checksumA && ckb == rxUbxFrame.checksumB){
 80018d0:	f896 2062 	ldrb.w	r2, [r6, #98]	; 0x62
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d003      	beq.n	80018e2 <HAL_UART_RxCpltCallback+0x1ae>
 80018da:	46a5      	mov	sp, r4
    	if (rxBufferGNSS == UBX_SYNC_CHAR2 && ubxSync1Received){
 80018dc:	f898 4000 	ldrb.w	r4, [r8]
 80018e0:	e771      	b.n	80017c6 <HAL_UART_RxCpltCallback+0x92>
    				if (cka == rxUbxFrame.checksumA && ckb == rxUbxFrame.checksumB){
 80018e2:	f896 2063 	ldrb.w	r2, [r6, #99]	; 0x63
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1f6      	bne.n	80018da <HAL_UART_RxCpltCallback+0x1a6>
    					ubxFrame = rxUbxFrame;	//Copy "dynamic" frame to "static" frame
 80018ec:	2264      	movs	r2, #100	; 0x64
 80018ee:	4907      	ldr	r1, [pc, #28]	; (800190c <HAL_UART_RxCpltCallback+0x1d8>)
 80018f0:	480e      	ldr	r0, [pc, #56]	; (800192c <HAL_UART_RxCpltCallback+0x1f8>)
 80018f2:	f004 fcd5 	bl	80062a0 <memcpy>
    					ubxFrameValid = 1;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_UART_RxCpltCallback+0x1fc>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e7ed      	b.n	80018da <HAL_UART_RxCpltCallback+0x1a6>
 80018fe:	bf00      	nop
 8001900:	40004400 	.word	0x40004400
 8001904:	20000460 	.word	0x20000460
 8001908:	20000598 	.word	0x20000598
 800190c:	20000468 	.word	0x20000468
 8001910:	20000464 	.word	0x20000464
 8001914:	20000594 	.word	0x20000594
 8001918:	200004cc 	.word	0x200004cc
 800191c:	2000030c 	.word	0x2000030c
 8001920:	20000604 	.word	0x20000604
 8001924:	2000045c 	.word	0x2000045c
 8001928:	2000046e 	.word	0x2000046e
 800192c:	2000059c 	.word	0x2000059c
 8001930:	20000600 	.word	0x20000600
 8001934:	20000394 	.word	0x20000394

08001938 <Error_Handler>:
 8001938:	b672      	cpsid	i
	while (1)
 800193a:	e7fe      	b.n	800193a <Error_Handler+0x2>

0800193c <task_send_values_GPS.part.0>:
	CAN_Send(IMU4,CAN_ID_IMU4);


}

void task_send_values_GPS (void) {
 800193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if (gpsSend){
		//Latitude
		double computing = gpsCoords.lat;
 8001940:	4dea      	ldr	r5, [pc, #936]	; (8001cec <task_send_values_GPS.part.0+0x3b0>)
		computing = 100.0*(computing-(double)Lat2);
		int Lat1 = floor(computing);
		computing = 100.0*(computing-(double)Lat1);
		int Lat0 = floor(computing);

		gps_data[0] = Lat7;
 8001942:	4ceb      	ldr	r4, [pc, #940]	; (8001cf0 <task_send_values_GPS.part.0+0x3b4>)
		double computing = gpsCoords.lat;
 8001944:	e9d5 6700 	ldrd	r6, r7, [r5]
void task_send_values_GPS (void) {
 8001948:	b085      	sub	sp, #20
		int Lat7 = floor(computing);
 800194a:	ec47 6b10 	vmov	d0, r6, r7
 800194e:	f009 fd57 	bl	800b400 <floor>
 8001952:	ec51 0b10 	vmov	r0, r1, d0
 8001956:	f7ff f90f 	bl	8000b78 <__aeabi_d2iz>
 800195a:	4680      	mov	r8, r0
		computing = 100.0*(computing-(double)Lat7);
 800195c:	f7fe fdf2 	bl	8000544 <__aeabi_i2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4630      	mov	r0, r6
 8001966:	4639      	mov	r1, r7
 8001968:	f7fe fc9e 	bl	80002a8 <__aeabi_dsub>
 800196c:	4be1      	ldr	r3, [pc, #900]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 800196e:	2200      	movs	r2, #0
 8001970:	f7fe fe52 	bl	8000618 <__aeabi_dmul>
 8001974:	4606      	mov	r6, r0
 8001976:	460f      	mov	r7, r1
		int Lat6 = floor(computing);
 8001978:	ec47 6b10 	vmov	d0, r6, r7
 800197c:	f009 fd40 	bl	800b400 <floor>
 8001980:	ec51 0b10 	vmov	r0, r1, d0
 8001984:	f7ff f8f8 	bl	8000b78 <__aeabi_d2iz>
 8001988:	4681      	mov	r9, r0
		computing = 100.0*(computing-(double)Lat6);
 800198a:	f7fe fddb 	bl	8000544 <__aeabi_i2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4630      	mov	r0, r6
 8001994:	4639      	mov	r1, r7
 8001996:	f7fe fc87 	bl	80002a8 <__aeabi_dsub>
 800199a:	4bd6      	ldr	r3, [pc, #856]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 800199c:	2200      	movs	r2, #0
 800199e:	f7fe fe3b 	bl	8000618 <__aeabi_dmul>
 80019a2:	4606      	mov	r6, r0
 80019a4:	460f      	mov	r7, r1
		int Lat5 = floor(computing);
 80019a6:	ec47 6b10 	vmov	d0, r6, r7
 80019aa:	f009 fd29 	bl	800b400 <floor>
 80019ae:	ec51 0b10 	vmov	r0, r1, d0
 80019b2:	f7ff f8e1 	bl	8000b78 <__aeabi_d2iz>
 80019b6:	4682      	mov	sl, r0
		computing = 100.0*(computing-(double)Lat5);
 80019b8:	f7fe fdc4 	bl	8000544 <__aeabi_i2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4630      	mov	r0, r6
 80019c2:	4639      	mov	r1, r7
 80019c4:	f7fe fc70 	bl	80002a8 <__aeabi_dsub>
 80019c8:	4bca      	ldr	r3, [pc, #808]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	f7fe fe24 	bl	8000618 <__aeabi_dmul>
 80019d0:	4606      	mov	r6, r0
 80019d2:	460f      	mov	r7, r1
		int Lat4 = floor(computing);
 80019d4:	ec47 6b10 	vmov	d0, r6, r7
 80019d8:	f009 fd12 	bl	800b400 <floor>
 80019dc:	ec51 0b10 	vmov	r0, r1, d0
 80019e0:	f7ff f8ca 	bl	8000b78 <__aeabi_d2iz>
 80019e4:	4683      	mov	fp, r0
		computing = 100.0*(computing-(double)Lat4);
 80019e6:	f7fe fdad 	bl	8000544 <__aeabi_i2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4630      	mov	r0, r6
 80019f0:	4639      	mov	r1, r7
 80019f2:	f7fe fc59 	bl	80002a8 <__aeabi_dsub>
 80019f6:	4bbf      	ldr	r3, [pc, #764]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	f7fe fe0d 	bl	8000618 <__aeabi_dmul>
 80019fe:	4606      	mov	r6, r0
 8001a00:	460f      	mov	r7, r1
		int Lat3 = floor(computing);
 8001a02:	ec47 6b10 	vmov	d0, r6, r7
 8001a06:	f009 fcfb 	bl	800b400 <floor>
 8001a0a:	ec51 0b10 	vmov	r0, r1, d0
 8001a0e:	f7ff f8b3 	bl	8000b78 <__aeabi_d2iz>
 8001a12:	9001      	str	r0, [sp, #4]
		computing = 100.0*(computing-(double)Lat3);
 8001a14:	f7fe fd96 	bl	8000544 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	4639      	mov	r1, r7
 8001a20:	f7fe fc42 	bl	80002a8 <__aeabi_dsub>
 8001a24:	4bb3      	ldr	r3, [pc, #716]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f7fe fdf6 	bl	8000618 <__aeabi_dmul>
 8001a2c:	4606      	mov	r6, r0
 8001a2e:	460f      	mov	r7, r1
		int Lat2 = floor(computing);
 8001a30:	ec47 6b10 	vmov	d0, r6, r7
 8001a34:	f009 fce4 	bl	800b400 <floor>
 8001a38:	ec51 0b10 	vmov	r0, r1, d0
 8001a3c:	f7ff f89c 	bl	8000b78 <__aeabi_d2iz>
 8001a40:	9002      	str	r0, [sp, #8]
		computing = 100.0*(computing-(double)Lat2);
 8001a42:	f7fe fd7f 	bl	8000544 <__aeabi_i2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	4639      	mov	r1, r7
 8001a4e:	f7fe fc2b 	bl	80002a8 <__aeabi_dsub>
 8001a52:	4ba8      	ldr	r3, [pc, #672]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	f7fe fddf 	bl	8000618 <__aeabi_dmul>
 8001a5a:	4606      	mov	r6, r0
 8001a5c:	460f      	mov	r7, r1
		int Lat1 = floor(computing);
 8001a5e:	ec47 6b10 	vmov	d0, r6, r7
 8001a62:	f009 fccd 	bl	800b400 <floor>
 8001a66:	ec51 0b10 	vmov	r0, r1, d0
 8001a6a:	f7ff f885 	bl	8000b78 <__aeabi_d2iz>
 8001a6e:	9003      	str	r0, [sp, #12]
		computing = 100.0*(computing-(double)Lat1);
 8001a70:	f7fe fd68 	bl	8000544 <__aeabi_i2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4630      	mov	r0, r6
 8001a7a:	4639      	mov	r1, r7
 8001a7c:	f7fe fc14 	bl	80002a8 <__aeabi_dsub>
 8001a80:	2200      	movs	r2, #0
 8001a82:	4b9c      	ldr	r3, [pc, #624]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001a84:	f7fe fdc8 	bl	8000618 <__aeabi_dmul>
		int Lat0 = floor(computing);
 8001a88:	ec41 0b10 	vmov	d0, r0, r1
 8001a8c:	f009 fcb8 	bl	800b400 <floor>
		gps_data[1] = Lat6;
		gps_data[2] = Lat5;
		gps_data[3] = Lat4;
		gps_data[4] = Lat3;
 8001a90:	9b01      	ldr	r3, [sp, #4]
 8001a92:	7123      	strb	r3, [r4, #4]
		gps_data[5] = Lat2;
 8001a94:	9b02      	ldr	r3, [sp, #8]
 8001a96:	7163      	strb	r3, [r4, #5]
		int Lat0 = floor(computing);
 8001a98:	ec51 0b10 	vmov	r0, r1, d0
		gps_data[6] = Lat1;
 8001a9c:	9b03      	ldr	r3, [sp, #12]
		gps_data[0] = Lat7;
 8001a9e:	f884 8000 	strb.w	r8, [r4]
		gps_data[1] = Lat6;
 8001aa2:	f884 9001 	strb.w	r9, [r4, #1]
		gps_data[2] = Lat5;
 8001aa6:	f884 a002 	strb.w	sl, [r4, #2]
		gps_data[3] = Lat4;
 8001aaa:	f884 b003 	strb.w	fp, [r4, #3]
		gps_data[6] = Lat1;
 8001aae:	71a3      	strb	r3, [r4, #6]
		int Lat0 = floor(computing);
 8001ab0:	f7ff f862 	bl	8000b78 <__aeabi_d2iz>
		gps_data[7] = Lat0;
		CAN_Send(gps_data, CAN_ID_GPS1);
 8001ab4:	f240 2172 	movw	r1, #626	; 0x272
		int Lat0 = floor(computing);
 8001ab8:	4603      	mov	r3, r0
		CAN_Send(gps_data, CAN_ID_GPS1);
 8001aba:	4620      	mov	r0, r4
		gps_data[7] = Lat0;
 8001abc:	71e3      	strb	r3, [r4, #7]
		CAN_Send(gps_data, CAN_ID_GPS1);
 8001abe:	f000 fde3 	bl	8002688 <CAN_Send>

		//Longitude
		computing = gpsCoords.lon;
 8001ac2:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
		int Lon7 = floor(computing);
 8001ac6:	ec47 6b10 	vmov	d0, r6, r7
 8001aca:	f009 fc99 	bl	800b400 <floor>
 8001ace:	ec51 0b10 	vmov	r0, r1, d0
 8001ad2:	f7ff f851 	bl	8000b78 <__aeabi_d2iz>
 8001ad6:	4680      	mov	r8, r0
		computing = 100.0*(computing-(double)Lon7);
 8001ad8:	f7fe fd34 	bl	8000544 <__aeabi_i2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	4639      	mov	r1, r7
 8001ae4:	f7fe fbe0 	bl	80002a8 <__aeabi_dsub>
 8001ae8:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	f7fe fd94 	bl	8000618 <__aeabi_dmul>
 8001af0:	4606      	mov	r6, r0
 8001af2:	460f      	mov	r7, r1
		int Lon6 = floor(computing);
 8001af4:	ec47 6b10 	vmov	d0, r6, r7
 8001af8:	f009 fc82 	bl	800b400 <floor>
 8001afc:	ec51 0b10 	vmov	r0, r1, d0
 8001b00:	f7ff f83a 	bl	8000b78 <__aeabi_d2iz>
 8001b04:	4681      	mov	r9, r0
		computing = 100.0*(computing-(double)Lon6);
 8001b06:	f7fe fd1d 	bl	8000544 <__aeabi_i2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4630      	mov	r0, r6
 8001b10:	4639      	mov	r1, r7
 8001b12:	f7fe fbc9 	bl	80002a8 <__aeabi_dsub>
 8001b16:	4b77      	ldr	r3, [pc, #476]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f7fe fd7d 	bl	8000618 <__aeabi_dmul>
 8001b1e:	4606      	mov	r6, r0
 8001b20:	460f      	mov	r7, r1
		int Lon5 = floor(computing);
 8001b22:	ec47 6b10 	vmov	d0, r6, r7
 8001b26:	f009 fc6b 	bl	800b400 <floor>
 8001b2a:	ec51 0b10 	vmov	r0, r1, d0
 8001b2e:	f7ff f823 	bl	8000b78 <__aeabi_d2iz>
 8001b32:	4682      	mov	sl, r0
		computing = 100.0*(computing-(double)Lon5);
 8001b34:	f7fe fd06 	bl	8000544 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	4639      	mov	r1, r7
 8001b40:	f7fe fbb2 	bl	80002a8 <__aeabi_dsub>
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f7fe fd66 	bl	8000618 <__aeabi_dmul>
 8001b4c:	4606      	mov	r6, r0
 8001b4e:	460f      	mov	r7, r1
		int Lon4 = floor(computing);
 8001b50:	ec47 6b10 	vmov	d0, r6, r7
 8001b54:	f009 fc54 	bl	800b400 <floor>
 8001b58:	ec51 0b10 	vmov	r0, r1, d0
 8001b5c:	f7ff f80c 	bl	8000b78 <__aeabi_d2iz>
 8001b60:	4683      	mov	fp, r0
		computing = 100.0*(computing-(double)Lon4);
 8001b62:	f7fe fcef 	bl	8000544 <__aeabi_i2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	4639      	mov	r1, r7
 8001b6e:	f7fe fb9b 	bl	80002a8 <__aeabi_dsub>
 8001b72:	4b60      	ldr	r3, [pc, #384]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	f7fe fd4f 	bl	8000618 <__aeabi_dmul>
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	460f      	mov	r7, r1
		int Lon3 = floor(computing);
 8001b7e:	ec47 6b10 	vmov	d0, r6, r7
 8001b82:	f009 fc3d 	bl	800b400 <floor>
 8001b86:	ec51 0b10 	vmov	r0, r1, d0
 8001b8a:	f7fe fff5 	bl	8000b78 <__aeabi_d2iz>
 8001b8e:	9001      	str	r0, [sp, #4]
		computing = 100.0*(computing-(double)Lon3);
 8001b90:	f7fe fcd8 	bl	8000544 <__aeabi_i2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4630      	mov	r0, r6
 8001b9a:	4639      	mov	r1, r7
 8001b9c:	f7fe fb84 	bl	80002a8 <__aeabi_dsub>
 8001ba0:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f7fe fd38 	bl	8000618 <__aeabi_dmul>
 8001ba8:	4606      	mov	r6, r0
 8001baa:	460f      	mov	r7, r1
		int Lon2 = floor(computing);
 8001bac:	ec47 6b10 	vmov	d0, r6, r7
 8001bb0:	f009 fc26 	bl	800b400 <floor>
 8001bb4:	ec51 0b10 	vmov	r0, r1, d0
 8001bb8:	f7fe ffde 	bl	8000b78 <__aeabi_d2iz>
 8001bbc:	9002      	str	r0, [sp, #8]
		computing = 100.0*(computing-(double)Lon2);
 8001bbe:	f7fe fcc1 	bl	8000544 <__aeabi_i2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	4639      	mov	r1, r7
 8001bca:	f7fe fb6d 	bl	80002a8 <__aeabi_dsub>
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f7fe fd21 	bl	8000618 <__aeabi_dmul>
 8001bd6:	4606      	mov	r6, r0
 8001bd8:	460f      	mov	r7, r1
		int Lon1 = floor(computing);
 8001bda:	ec47 6b10 	vmov	d0, r6, r7
 8001bde:	f009 fc0f 	bl	800b400 <floor>
 8001be2:	ec51 0b10 	vmov	r0, r1, d0
 8001be6:	f7fe ffc7 	bl	8000b78 <__aeabi_d2iz>
 8001bea:	9003      	str	r0, [sp, #12]
		computing = 100.0*(computing-(double)Lon1);
 8001bec:	f7fe fcaa 	bl	8000544 <__aeabi_i2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	4639      	mov	r1, r7
 8001bf8:	f7fe fb56 	bl	80002a8 <__aeabi_dsub>
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001c00:	f7fe fd0a 	bl	8000618 <__aeabi_dmul>
		int Lon0 = floor(computing);
 8001c04:	ec41 0b10 	vmov	d0, r0, r1
 8001c08:	f009 fbfa 	bl	800b400 <floor>

		gps_data[0] = Lon7;
		gps_data[1] = Lon6;
		gps_data[2] = Lon5;
		gps_data[3] = Lon4;
		gps_data[4] = Lon3;
 8001c0c:	9b01      	ldr	r3, [sp, #4]
 8001c0e:	7123      	strb	r3, [r4, #4]
		gps_data[5] = Lon2;
 8001c10:	9b02      	ldr	r3, [sp, #8]
 8001c12:	7163      	strb	r3, [r4, #5]
		int Lon0 = floor(computing);
 8001c14:	ec51 0b10 	vmov	r0, r1, d0
		gps_data[6] = Lon1;
 8001c18:	9b03      	ldr	r3, [sp, #12]
		gps_data[0] = Lon7;
 8001c1a:	f884 8000 	strb.w	r8, [r4]
		gps_data[1] = Lon6;
 8001c1e:	f884 9001 	strb.w	r9, [r4, #1]
		gps_data[2] = Lon5;
 8001c22:	f884 a002 	strb.w	sl, [r4, #2]
		gps_data[3] = Lon4;
 8001c26:	f884 b003 	strb.w	fp, [r4, #3]
		gps_data[6] = Lon1;
 8001c2a:	71a3      	strb	r3, [r4, #6]
		int Lon0 = floor(computing);
 8001c2c:	f7fe ffa4 	bl	8000b78 <__aeabi_d2iz>
		gps_data[7] = Lon0;
		CAN_Send(gps_data, CAN_ID_GPS2);
 8001c30:	f240 2182 	movw	r1, #642	; 0x282
		int Lon0 = floor(computing);
 8001c34:	4603      	mov	r3, r0
		CAN_Send(gps_data, CAN_ID_GPS2);
 8001c36:	4620      	mov	r0, r4
		gps_data[7] = Lon0;
 8001c38:	71e3      	strb	r3, [r4, #7]
		CAN_Send(gps_data, CAN_ID_GPS2);
 8001c3a:	f000 fd25 	bl	8002688 <CAN_Send>

		//Altitude
		computing = gpsCoords.alt;
 8001c3e:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
		int Alt7 = floor(computing);
 8001c42:	ec47 6b10 	vmov	d0, r6, r7
 8001c46:	f009 fbdb 	bl	800b400 <floor>
 8001c4a:	ec51 0b10 	vmov	r0, r1, d0
 8001c4e:	f7fe ff93 	bl	8000b78 <__aeabi_d2iz>
 8001c52:	4680      	mov	r8, r0
		computing = 100.0*(computing-(double)Alt7);
 8001c54:	f7fe fc76 	bl	8000544 <__aeabi_i2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	4639      	mov	r1, r7
 8001c60:	f7fe fb22 	bl	80002a8 <__aeabi_dsub>
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	f7fe fcd6 	bl	8000618 <__aeabi_dmul>
 8001c6c:	4606      	mov	r6, r0
 8001c6e:	460f      	mov	r7, r1
		int Alt6 = floor(computing);
 8001c70:	ec47 6b10 	vmov	d0, r6, r7
 8001c74:	f009 fbc4 	bl	800b400 <floor>
 8001c78:	ec51 0b10 	vmov	r0, r1, d0
 8001c7c:	f7fe ff7c 	bl	8000b78 <__aeabi_d2iz>
 8001c80:	4605      	mov	r5, r0
		computing = 100.0*(computing-(double)Alt6);
 8001c82:	f7fe fc5f 	bl	8000544 <__aeabi_i2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	4639      	mov	r1, r7
 8001c8e:	f7fe fb0b 	bl	80002a8 <__aeabi_dsub>
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f7fe fcbf 	bl	8000618 <__aeabi_dmul>
 8001c9a:	4606      	mov	r6, r0
 8001c9c:	460f      	mov	r7, r1
		int Alt5 = floor(computing);
 8001c9e:	ec47 6b10 	vmov	d0, r6, r7
 8001ca2:	f009 fbad 	bl	800b400 <floor>
 8001ca6:	ec51 0b10 	vmov	r0, r1, d0
 8001caa:	f7fe ff65 	bl	8000b78 <__aeabi_d2iz>
 8001cae:	4681      	mov	r9, r0
		computing = 100.0*(computing-(double)Alt5);
 8001cb0:	f7fe fc48 	bl	8000544 <__aeabi_i2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4630      	mov	r0, r6
 8001cba:	4639      	mov	r1, r7
 8001cbc:	f7fe faf4 	bl	80002a8 <__aeabi_dsub>
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <task_send_values_GPS.part.0+0x3b8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f7fe fca8 	bl	8000618 <__aeabi_dmul>
 8001cc8:	4606      	mov	r6, r0
 8001cca:	460f      	mov	r7, r1
		int Alt4 = floor(computing);
 8001ccc:	ec47 6b10 	vmov	d0, r6, r7
 8001cd0:	f009 fb96 	bl	800b400 <floor>
 8001cd4:	ec51 0b10 	vmov	r0, r1, d0
 8001cd8:	f7fe ff4e 	bl	8000b78 <__aeabi_d2iz>
 8001cdc:	4682      	mov	sl, r0
		computing = 100.0*(computing-(double)Alt4);
 8001cde:	f7fe fc31 	bl	8000544 <__aeabi_i2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	4639      	mov	r1, r7
 8001cea:	e005      	b.n	8001cf8 <task_send_values_GPS.part.0+0x3bc>
 8001cec:	20000240 	.word	0x20000240
 8001cf0:	20000654 	.word	0x20000654
 8001cf4:	40590000 	.word	0x40590000
 8001cf8:	f7fe fad6 	bl	80002a8 <__aeabi_dsub>
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <task_send_values_GPS.part.0+0x4c0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f7fe fc8a 	bl	8000618 <__aeabi_dmul>
 8001d04:	4606      	mov	r6, r0
 8001d06:	460f      	mov	r7, r1
		int Alt3 = floor(computing);
 8001d08:	ec47 6b10 	vmov	d0, r6, r7
 8001d0c:	f009 fb78 	bl	800b400 <floor>
 8001d10:	ec51 0b10 	vmov	r0, r1, d0
 8001d14:	f7fe ff30 	bl	8000b78 <__aeabi_d2iz>
 8001d18:	4683      	mov	fp, r0
		computing = 100.0*(computing-(double)Alt3);
 8001d1a:	f7fe fc13 	bl	8000544 <__aeabi_i2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4630      	mov	r0, r6
 8001d24:	4639      	mov	r1, r7
 8001d26:	f7fe fabf 	bl	80002a8 <__aeabi_dsub>
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <task_send_values_GPS.part.0+0x4c0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f7fe fc73 	bl	8000618 <__aeabi_dmul>
 8001d32:	4606      	mov	r6, r0
 8001d34:	460f      	mov	r7, r1
		int Alt2 = floor(computing);
 8001d36:	ec47 6b10 	vmov	d0, r6, r7
 8001d3a:	f009 fb61 	bl	800b400 <floor>
 8001d3e:	ec51 0b10 	vmov	r0, r1, d0
 8001d42:	f7fe ff19 	bl	8000b78 <__aeabi_d2iz>
 8001d46:	9001      	str	r0, [sp, #4]
		computing = 100.0*(computing-(double)Alt2);
 8001d48:	f7fe fbfc 	bl	8000544 <__aeabi_i2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4630      	mov	r0, r6
 8001d52:	4639      	mov	r1, r7
 8001d54:	f7fe faa8 	bl	80002a8 <__aeabi_dsub>
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <task_send_values_GPS.part.0+0x4c0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f7fe fc5c 	bl	8000618 <__aeabi_dmul>
 8001d60:	4606      	mov	r6, r0
 8001d62:	460f      	mov	r7, r1
		int Alt1 = floor(computing);
 8001d64:	ec47 6b10 	vmov	d0, r6, r7
 8001d68:	f009 fb4a 	bl	800b400 <floor>
 8001d6c:	ec51 0b10 	vmov	r0, r1, d0
 8001d70:	f7fe ff02 	bl	8000b78 <__aeabi_d2iz>
 8001d74:	9002      	str	r0, [sp, #8]
		computing = 100.0*(computing-(double)Alt1);
 8001d76:	f7fe fbe5 	bl	8000544 <__aeabi_i2d>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4630      	mov	r0, r6
 8001d80:	4639      	mov	r1, r7
 8001d82:	f7fe fa91 	bl	80002a8 <__aeabi_dsub>
 8001d86:	2200      	movs	r2, #0
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <task_send_values_GPS.part.0+0x4c0>)
 8001d8a:	f7fe fc45 	bl	8000618 <__aeabi_dmul>
		int Alt0 = floor(computing);
 8001d8e:	ec41 0b10 	vmov	d0, r0, r1
 8001d92:	f009 fb35 	bl	800b400 <floor>
		gps_data[0] = Alt7;
		gps_data[1] = Alt6;
		gps_data[2] = Alt5;
		gps_data[3] = Alt4;
		gps_data[4] = Alt3;
		gps_data[5] = Alt2;
 8001d96:	9b01      	ldr	r3, [sp, #4]
 8001d98:	7163      	strb	r3, [r4, #5]
		int Alt0 = floor(computing);
 8001d9a:	ec51 0b10 	vmov	r0, r1, d0
		gps_data[6] = Alt1;
 8001d9e:	9b02      	ldr	r3, [sp, #8]
		gps_data[1] = Alt6;
 8001da0:	7065      	strb	r5, [r4, #1]
		gps_data[6] = Alt1;
 8001da2:	71a3      	strb	r3, [r4, #6]
		gps_data[0] = Alt7;
 8001da4:	f884 8000 	strb.w	r8, [r4]
		gps_data[2] = Alt5;
 8001da8:	f884 9002 	strb.w	r9, [r4, #2]
		gps_data[3] = Alt4;
 8001dac:	f884 a003 	strb.w	sl, [r4, #3]
		gps_data[4] = Alt3;
 8001db0:	f884 b004 	strb.w	fp, [r4, #4]
		int Alt0 = floor(computing);
 8001db4:	f7fe fee0 	bl	8000b78 <__aeabi_d2iz>
		gps_data[7] = Alt0;
		CAN_Send(gps_data, CAN_ID_GPS3);
 8001db8:	f240 2192 	movw	r1, #658	; 0x292
		int Alt0 = floor(computing);
 8001dbc:	4603      	mov	r3, r0
		CAN_Send(gps_data, CAN_ID_GPS3);
 8001dbe:	4620      	mov	r0, r4
		gps_data[7] = Alt0;
 8001dc0:	71e3      	strb	r3, [r4, #7]
		CAN_Send(gps_data, CAN_ID_GPS3);
 8001dc2:	f000 fc61 	bl	8002688 <CAN_Send>


		//Status
		gps_data[0] = gpsQuality;
 8001dc6:	490e      	ldr	r1, [pc, #56]	; (8001e00 <task_send_values_GPS.part.0+0x4c4>)
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <task_send_values_GPS.part.0+0x4c8>)
		gps_data[1] = (ubx_nav_pvt_msg.hAcc & 0xff0000) >> 16;
		gps_data[2] = (ubx_nav_pvt_msg.hAcc & 0xff00) >> 8;
		gps_data[3] = ubx_nav_pvt_msg.hAcc & 0xff;
		gps_data[4] = (ubx_nav_pvt_msg.vAcc & 0xff0000) >> 16;
 8001dca:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001dcc:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		gps_data[0] = gpsQuality;
 8001dce:	6805      	ldr	r5, [r0, #0]
		gps_data[1] = (ubx_nav_pvt_msg.hAcc & 0xff0000) >> 16;
 8001dd0:	f9b1 102a 	ldrsh.w	r1, [r1, #42]	; 0x2a
 8001dd4:	7061      	strb	r1, [r4, #1]
		gps_data[4] = (ubx_nav_pvt_msg.vAcc & 0xff0000) >> 16;
 8001dd6:	0c18      	lsrs	r0, r3, #16
 8001dd8:	ba52      	rev16	r2, r2
		gps_data[2] = (ubx_nav_pvt_msg.hAcc & 0xff00) >> 8;
 8001dda:	8062      	strh	r2, [r4, #2]
		gps_data[4] = (ubx_nav_pvt_msg.vAcc & 0xff0000) >> 16;
 8001ddc:	7120      	strb	r0, [r4, #4]
		gps_data[5] = (ubx_nav_pvt_msg.vAcc & 0xff00) >> 8;
 8001dde:	0a1a      	lsrs	r2, r3, #8
		gps_data[6] = ubx_nav_pvt_msg.vAcc & 0xff;
		CAN_Send(gps_data, CAN_ID_GPS4);
 8001de0:	f240 3102 	movw	r1, #770	; 0x302
 8001de4:	4620      	mov	r0, r4
		gps_data[5] = (ubx_nav_pvt_msg.vAcc & 0xff00) >> 8;
 8001de6:	7162      	strb	r2, [r4, #5]
		gps_data[6] = ubx_nav_pvt_msg.vAcc & 0xff;
 8001de8:	71a3      	strb	r3, [r4, #6]
		gps_data[0] = gpsQuality;
 8001dea:	7025      	strb	r5, [r4, #0]
		CAN_Send(gps_data, CAN_ID_GPS4);
 8001dec:	f000 fc4c 	bl	8002688 <CAN_Send>

		gpsSend = 0;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <task_send_values_GPS.part.0+0x4cc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
	}


}
 8001df6:	b005      	add	sp, #20
 8001df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dfc:	40590000 	.word	0x40590000
 8001e00:	2000025c 	.word	0x2000025c
 8001e04:	20000258 	.word	0x20000258
 8001e08:	20000650 	.word	0x20000650

08001e0c <SCHEDULER_Init>:
	counter_task_send_values_IMU=0;
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <SCHEDULER_Init+0x34>)
	counter_task_get_acceleration=0;
 8001e0e:	480d      	ldr	r0, [pc, #52]	; (8001e44 <SCHEDULER_Init+0x38>)
	counter_task_get_rotation=0;
 8001e10:	490d      	ldr	r1, [pc, #52]	; (8001e48 <SCHEDULER_Init+0x3c>)
uint32_t SCHEDULER_Init(void) {
 8001e12:	b430      	push	{r4, r5}
	flag_1ms =0;
 8001e14:	2300      	movs	r3, #0
	counter_task_send_values_IMU=0;
 8001e16:	6013      	str	r3, [r2, #0]
	counter_task_send_values_GPS=0;
 8001e18:	4c0c      	ldr	r4, [pc, #48]	; (8001e4c <SCHEDULER_Init+0x40>)
	counter_task_get_magnetic=0;
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <SCHEDULER_Init+0x44>)
	flag_1ms =0;
 8001e1c:	4d0d      	ldr	r5, [pc, #52]	; (8001e54 <SCHEDULER_Init+0x48>)
	counter_task_send_values_GPS=0;
 8001e1e:	6023      	str	r3, [r4, #0]
	counter_task_get_acceleration=0;
 8001e20:	6003      	str	r3, [r0, #0]
	counter_task_get_pressure=0;
 8001e22:	4c0d      	ldr	r4, [pc, #52]	; (8001e58 <SCHEDULER_Init+0x4c>)
	counter_task_get_humidity=0;
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <SCHEDULER_Init+0x50>)
	counter_task_get_rotation=0;
 8001e26:	600b      	str	r3, [r1, #0]
	counter_task_get_magnetic=0;
 8001e28:	6013      	str	r3, [r2, #0]
	counter_task_get_temperature=0;
 8001e2a:	490d      	ldr	r1, [pc, #52]	; (8001e60 <SCHEDULER_Init+0x54>)
	counter_task_update_gps=0;
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <SCHEDULER_Init+0x58>)
	flag_1ms =0;
 8001e2e:	702b      	strb	r3, [r5, #0]
	counter_task_get_pressure=0;
 8001e30:	6023      	str	r3, [r4, #0]
	counter_task_get_humidity=0;
 8001e32:	6003      	str	r3, [r0, #0]
}
 8001e34:	bc30      	pop	{r4, r5}
 8001e36:	2001      	movs	r0, #1
	counter_task_get_temperature=0;
 8001e38:	600b      	str	r3, [r1, #0]
	counter_task_update_gps=0;
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000644 	.word	0x20000644
 8001e44:	20000628 	.word	0x20000628
 8001e48:	20000638 	.word	0x20000638
 8001e4c:	20000640 	.word	0x20000640
 8001e50:	20000630 	.word	0x20000630
 8001e54:	2000064c 	.word	0x2000064c
 8001e58:	20000634 	.word	0x20000634
 8001e5c:	2000062c 	.word	0x2000062c
 8001e60:	2000063c 	.word	0x2000063c
 8001e64:	20000648 	.word	0x20000648

08001e68 <task_send_values_IMU>:
void task_send_values_IMU (void) {
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMU1[6] = 4*sign(current_magnetic_mG.x) + 2*sign(current_magnetic_mG.y) + 1*sign(current_magnetic_mG.z);
 8001e6a:	4b78      	ldr	r3, [pc, #480]	; (800204c <task_send_values_IMU+0x1e4>)
	IMU2[6] = 4*sign(current_angular_rate_mdps.x) + 2*sign(current_angular_rate_mdps.y) + 1*sign(current_angular_rate_mdps.z);
 8001e6c:	4e78      	ldr	r6, [pc, #480]	; (8002050 <task_send_values_IMU+0x1e8>)
	IMU1[6] = 4*sign(current_magnetic_mG.x) + 2*sign(current_magnetic_mG.y) + 1*sign(current_magnetic_mG.z);
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e76:	edd3 6a02 	vldr	s13, [r3, #8]
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001e7a:	4876      	ldr	r0, [pc, #472]	; (8002054 <task_send_values_IMU+0x1ec>)
	IMU2[6] = 4*sign(current_angular_rate_mdps.x) + 2*sign(current_angular_rate_mdps.y) + 1*sign(current_angular_rate_mdps.z);
 8001e7c:	edd6 4a00 	vldr	s9, [r6]
 8001e80:	ed96 5a01 	vldr	s10, [r6, #4]
 8001e84:	edd6 5a02 	vldr	s11, [r6, #8]
	if (n>=0){
 8001e88:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	int mag_x = abs(current_magnetic_mG.x);
 8001e94:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	int mag_y = abs(current_magnetic_mG.y);
 8001e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		return 0;
 8001e9c:	bfb4      	ite	lt
 8001e9e:	2501      	movlt	r5, #1
 8001ea0:	2500      	movge	r5, #0
	if (n>=0){
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return 0;
 8001ea6:	bfb4      	ite	lt
 8001ea8:	2101      	movlt	r1, #1
 8001eaa:	2100      	movge	r1, #0
	int mag_x = abs(current_magnetic_mG.x);
 8001eac:	ee17 2a10 	vmov	r2, s14
	int mag_y = abs(current_magnetic_mG.y);
 8001eb0:	ee17 3a90 	vmov	r3, s15
	if (n>=0){
 8001eb4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	int mag_z = abs(current_magnetic_mG.z);
 8001eb8:	eefd 7ae6 	vcvt.s32.f32	s15, s13
	IMU1[6] = 4*sign(current_magnetic_mG.x) + 2*sign(current_magnetic_mG.y) + 1*sign(current_magnetic_mG.z);
 8001ebc:	eb01 0545 	add.w	r5, r1, r5, lsl #1
	int temp = (int)current_temperature_degC*10;
 8001ec0:	4965      	ldr	r1, [pc, #404]	; (8002058 <task_send_values_IMU+0x1f0>)
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001ec2:	edd0 6a00 	vldr	s13, [r0]
	int temp = (int)current_temperature_degC*10;
 8001ec6:	ed91 6a00 	vldr	s12, [r1]
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001eca:	ed90 7a01 	vldr	s14, [r0, #4]
	if (n>=0){
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int mag_z = abs(current_magnetic_mG.z);
 8001ed2:	ee17 4a90 	vmov	r4, s15
	if (n>=0){
 8001ed6:	bfb4      	ite	lt
 8001ed8:	2101      	movlt	r1, #1
 8001eda:	2100      	movge	r1, #0
	int mag_x = abs(current_magnetic_mG.x);
 8001edc:	2a00      	cmp	r2, #0
 8001ede:	bfb8      	it	lt
 8001ee0:	4252      	neglt	r2, r2
	int mag_y = abs(current_magnetic_mG.y);
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bfb8      	it	lt
 8001ee6:	425b      	neglt	r3, r3
	int mag_z = abs(current_magnetic_mG.z);
 8001ee8:	2c00      	cmp	r4, #0
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001eea:	edd0 7a02 	vldr	s15, [r0, #8]
	IMU1[6] = 4*sign(current_magnetic_mG.x) + 2*sign(current_magnetic_mG.y) + 1*sign(current_magnetic_mG.z);
 8001eee:	485b      	ldr	r0, [pc, #364]	; (800205c <task_send_values_IMU+0x1f4>)
	int mag_z = abs(current_magnetic_mG.z);
 8001ef0:	bfb8      	it	lt
 8001ef2:	4264      	neglt	r4, r4
	if (n>=0){
 8001ef4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
	IMU1[4]= (mag_z & 0xff00)>>8;
 8001ef8:	ba64      	rev16	r4, r4
	if (n>=0){
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	IMU1[4]= (mag_z & 0xff00)>>8;
 8001efe:	8084      	strh	r4, [r0, #4]
	if (n>=0){
 8001f00:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
	int pressure = current_pressure_hPa;
 8001f04:	4c56      	ldr	r4, [pc, #344]	; (8002060 <task_send_values_IMU+0x1f8>)
	int ang_y = abs(current_angular_rate_mdps.y);
 8001f06:	eebd 5ac5 	vcvt.s32.f32	s10, s10
	int ang_x = abs(current_angular_rate_mdps.x);
 8001f0a:	eefd 4ae4 	vcvt.s32.f32	s9, s9
	IMU1[0]= (mag_x & 0xff00)>>8;
 8001f0e:	ba52      	rev16	r2, r2
		return 0;
 8001f10:	bfb4      	ite	lt
 8001f12:	2601      	movlt	r6, #1
 8001f14:	2600      	movge	r6, #0
	if (n>=0){
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	IMU1[6] = 4*sign(current_magnetic_mG.x) + 2*sign(current_magnetic_mG.y) + 1*sign(current_magnetic_mG.z);
 8001f1a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
	IMU1[0]= (mag_x & 0xff00)>>8;
 8001f1e:	8002      	strh	r2, [r0, #0]
	int ang_y = abs(current_angular_rate_mdps.y);
 8001f20:	ee15 2a10 	vmov	r2, s10
	int pressure = current_pressure_hPa;
 8001f24:	ed94 5a00 	vldr	s10, [r4]
	IMU1[6] = 4*sign(current_magnetic_mG.x) + 2*sign(current_magnetic_mG.y) + 1*sign(current_magnetic_mG.z);
 8001f28:	7181      	strb	r1, [r0, #6]
		return 0;
 8001f2a:	bfb4      	ite	lt
 8001f2c:	2401      	movlt	r4, #1
 8001f2e:	2400      	movge	r4, #0
	IMU2[6] = 4*sign(current_angular_rate_mdps.x) + 2*sign(current_angular_rate_mdps.y) + 1*sign(current_angular_rate_mdps.z);
 8001f30:	eb04 0646 	add.w	r6, r4, r6, lsl #1
	int ang_x = abs(current_angular_rate_mdps.x);
 8001f34:	ee14 1a90 	vmov	r1, s9
	int humidity = current_humidity_perc;
 8001f38:	4c4a      	ldr	r4, [pc, #296]	; (8002064 <task_send_values_IMU+0x1fc>)
	IMU2[6] = 4*sign(current_angular_rate_mdps.x) + 2*sign(current_angular_rate_mdps.y) + 1*sign(current_angular_rate_mdps.z);
 8001f3a:	4d4b      	ldr	r5, [pc, #300]	; (8002068 <task_send_values_IMU+0x200>)
	if (n>=0){
 8001f3c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
	int ang_z = abs(current_angular_rate_mdps.z);
 8001f40:	eefd 5ae5 	vcvt.s32.f32	s11, s11
	if (n>=0){
 8001f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	IMU1[2]= (mag_y & 0xff00)>>8;
 8001f48:	ba5b      	rev16	r3, r3
 8001f4a:	8043      	strh	r3, [r0, #2]
	int ang_z = abs(current_angular_rate_mdps.z);
 8001f4c:	ee15 3a90 	vmov	r3, s11
	int humidity = current_humidity_perc;
 8001f50:	edd4 5a00 	vldr	s11, [r4]
	if (n>=0){
 8001f54:	bfb4      	ite	lt
 8001f56:	2401      	movlt	r4, #1
 8001f58:	2400      	movge	r4, #0
	int ang_x = abs(current_angular_rate_mdps.x);
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	bfb8      	it	lt
 8001f5e:	4249      	neglt	r1, r1
	int ang_y = abs(current_angular_rate_mdps.y);
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	bfb8      	it	lt
 8001f64:	4252      	neglt	r2, r2
	int ang_z = abs(current_angular_rate_mdps.z);
 8001f66:	2b00      	cmp	r3, #0
	int temp = (int)current_temperature_degC*10;
 8001f68:	eebd 6ac6 	vcvt.s32.f32	s12, s12
	int ang_z = abs(current_angular_rate_mdps.z);
 8001f6c:	bfb8      	it	lt
 8001f6e:	425b      	neglt	r3, r3
	if (n>=0){
 8001f70:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	IMU2[4]= (ang_z & 0xff00)>>8;
 8001f74:	ba5b      	rev16	r3, r3
	int acc_x = abs(current_acceleration_mg.x);
 8001f76:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	if (n>=0){
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	IMU2[4]= (ang_z & 0xff00)>>8;
 8001f7e:	80ab      	strh	r3, [r5, #4]
	if (n>=0){
 8001f80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	int temp = (int)current_temperature_degC*10;
 8001f84:	ee16 3a10 	vmov	r3, s12
	int acc_y = abs(current_acceleration_mg.y);
 8001f88:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	IMU2[0]= (ang_x & 0xff00)>>8;
 8001f8c:	ba49      	rev16	r1, r1
 8001f8e:	8029      	strh	r1, [r5, #0]
	IMU2[2]= (ang_y & 0xff00)>>8;
 8001f90:	ba52      	rev16	r2, r2
	int acc_x = abs(current_acceleration_mg.x);
 8001f92:	ee16 1a90 	vmov	r1, s13
		return 0;
 8001f96:	bfb4      	ite	lt
 8001f98:	2701      	movlt	r7, #1
 8001f9a:	2700      	movge	r7, #0
	if (n>=0){
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	int acc_z = abs(current_acceleration_mg.z);
 8001fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	IMU2[6] = 4*sign(current_angular_rate_mdps.x) + 2*sign(current_angular_rate_mdps.y) + 1*sign(current_angular_rate_mdps.z);
 8001fa8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
	IMU2[2]= (ang_y & 0xff00)>>8;
 8001fac:	806a      	strh	r2, [r5, #2]
		return 0;
 8001fae:	bfb8      	it	lt
 8001fb0:	2601      	movlt	r6, #1
	int acc_y = abs(current_acceleration_mg.y);
 8001fb2:	ee17 2a10 	vmov	r2, s14
		return 0;
 8001fb6:	bfa8      	it	ge
 8001fb8:	2600      	movge	r6, #0
	int temp = (int)current_temperature_degC*10;
 8001fba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (n>=0){
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001fc2:	eb06 0747 	add.w	r7, r6, r7, lsl #1
	int temp = (int)current_temperature_degC*10;
 8001fc6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
	if (n>=0){
 8001fca:	bfb8      	it	lt
 8001fcc:	2601      	movlt	r6, #1
	int acc_z = abs(current_acceleration_mg.z);
 8001fce:	ee17 3a90 	vmov	r3, s15
	if (n>=0){
 8001fd2:	bfa8      	it	ge
 8001fd4:	2600      	movge	r6, #0
	int acc_x = abs(current_acceleration_mg.x);
 8001fd6:	2900      	cmp	r1, #0
	int pressure = current_pressure_hPa;
 8001fd8:	eefd 7ac5 	vcvt.s32.f32	s15, s10
	int acc_x = abs(current_acceleration_mg.x);
 8001fdc:	bfb8      	it	lt
 8001fde:	4249      	neglt	r1, r1
	int acc_y = abs(current_acceleration_mg.y);
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	bfb8      	it	lt
 8001fe4:	4252      	neglt	r2, r2
	int acc_z = abs(current_acceleration_mg.z);
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bfb8      	it	lt
 8001fea:	425b      	neglt	r3, r3
	IMU2[6] = 4*sign(current_angular_rate_mdps.x) + 2*sign(current_angular_rate_mdps.y) + 1*sign(current_angular_rate_mdps.z);
 8001fec:	71ac      	strb	r4, [r5, #6]
	int pressure = current_pressure_hPa;
 8001fee:	ee17 ea90 	vmov	lr, s15
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001ff2:	4c1e      	ldr	r4, [pc, #120]	; (800206c <task_send_values_IMU+0x204>)
	int humidity = current_humidity_perc;
 8001ff4:	eefd 7ae5 	vcvt.s32.f32	s15, s11
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001ff8:	eb06 0647 	add.w	r6, r6, r7, lsl #1
	IMU3[4]= (acc_z & 0xff00)>>8;
 8001ffc:	ba5b      	rev16	r3, r3
	IMU3[6] = 4*sign(current_acceleration_mg.x) + 2*sign(current_acceleration_mg.y) + 1*sign(current_acceleration_mg.z);
 8001ffe:	71a6      	strb	r6, [r4, #6]
	IMU3[4]= (acc_z & 0xff00)>>8;
 8002000:	80a3      	strh	r3, [r4, #4]
	IMU4[0] = (temp >> 8) & 0xff;
 8002002:	4e1b      	ldr	r6, [pc, #108]	; (8002070 <task_send_values_IMU+0x208>)
	int humidity = current_humidity_perc;
 8002004:	ee17 3a90 	vmov	r3, s15
	IMU4[2] = (pressure >> 8) & 0xff;
 8002008:	fa9e fe9e 	rev16.w	lr, lr
	IMU4[0] = (temp >> 8) & 0xff;
 800200c:	fa9c fc9c 	rev16.w	ip, ip
	IMU3[2]= (acc_y & 0xff00)>>8;
 8002010:	ba52      	rev16	r2, r2
	IMU3[0]= (acc_x & 0xff00)>>8;
 8002012:	ba49      	rev16	r1, r1
	IMU3[2]= (acc_y & 0xff00)>>8;
 8002014:	8062      	strh	r2, [r4, #2]
	IMU4[0] = (temp >> 8) & 0xff;
 8002016:	f8a6 c000 	strh.w	ip, [r6]
	IMU4[2] = (pressure >> 8) & 0xff;
 800201a:	f8a6 e002 	strh.w	lr, [r6, #2]
	IMU4[4] = humidity & 0xff;
 800201e:	7133      	strb	r3, [r6, #4]
	IMU3[0]= (acc_x & 0xff00)>>8;
 8002020:	8021      	strh	r1, [r4, #0]
	CAN_Send(IMU1, CAN_ID_IMU1);
 8002022:	f240 2132 	movw	r1, #562	; 0x232
 8002026:	f000 fb2f 	bl	8002688 <CAN_Send>
	CAN_Send(IMU2,CAN_ID_IMU2);
 800202a:	4628      	mov	r0, r5
 800202c:	f240 2142 	movw	r1, #578	; 0x242
 8002030:	f000 fb2a 	bl	8002688 <CAN_Send>
	CAN_Send(IMU3,CAN_ID_IMU3);
 8002034:	4620      	mov	r0, r4
 8002036:	f240 2152 	movw	r1, #594	; 0x252
 800203a:	f000 fb25 	bl	8002688 <CAN_Send>
	CAN_Send(IMU4,CAN_ID_IMU4);
 800203e:	4630      	mov	r0, r6
 8002040:	f240 2163 	movw	r1, #611	; 0x263
}
 8002044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	CAN_Send(IMU4,CAN_ID_IMU4);
 8002048:	f000 bb1e 	b.w	8002688 <CAN_Send>
 800204c:	20000228 	.word	0x20000228
 8002050:	20000218 	.word	0x20000218
 8002054:	2000020c 	.word	0x2000020c
 8002058:	20000238 	.word	0x20000238
 800205c:	20000608 	.word	0x20000608
 8002060:	20000234 	.word	0x20000234
 8002064:	20000224 	.word	0x20000224
 8002068:	20000610 	.word	0x20000610
 800206c:	20000618 	.word	0x20000618
 8002070:	20000620 	.word	0x20000620

08002074 <task_update_gps>:

void task_get_pressure (void) {
	IKS01A2_GetPressure(&current_pressure_hPa);
}

void task_update_gps(void) {
 8002074:	b510      	push	{r4, lr}
	if (nmeaFrameValid){
 8002076:	4c0f      	ldr	r4, [pc, #60]	; (80020b4 <task_update_gps+0x40>)
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	b97b      	cbnz	r3, 800209c <task_update_gps+0x28>
		ProcessNMEALine(nmeaFrame,&gpsCoords, &gpsQuality);
		gpsSend = 1;
		nmeaFrameValid = 0;
	}

	if (ubxFrameValid){
 800207c:	4c0e      	ldr	r4, [pc, #56]	; (80020b8 <task_update_gps+0x44>)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	b903      	cbnz	r3, 8002084 <task_update_gps+0x10>
		UBX_Parse_Raw_To_NAV_PVT(ubxFrame.payload,ubxFrame.length, &ubx_nav_pvt_msg);
		gpsSend = 1;
		ubxFrameValid = 0;
	}

}
 8002082:	bd10      	pop	{r4, pc}
		UBX_Parse_Raw_To_NAV_PVT(ubxFrame.payload,ubxFrame.length, &ubx_nav_pvt_msg);
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <task_update_gps+0x48>)
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <task_update_gps+0x4c>)
 8002088:	8881      	ldrh	r1, [r0, #4]
 800208a:	3006      	adds	r0, #6
 800208c:	f7ff f9c8 	bl	8001420 <UBX_Parse_Raw_To_NAV_PVT>
		gpsSend = 1;
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <task_update_gps+0x50>)
 8002092:	2101      	movs	r1, #1
		ubxFrameValid = 0;
 8002094:	2300      	movs	r3, #0
		gpsSend = 1;
 8002096:	6011      	str	r1, [r2, #0]
		ubxFrameValid = 0;
 8002098:	6023      	str	r3, [r4, #0]
}
 800209a:	bd10      	pop	{r4, pc}
		ProcessNMEALine(nmeaFrame,&gpsCoords, &gpsQuality);
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <task_update_gps+0x54>)
 800209e:	490b      	ldr	r1, [pc, #44]	; (80020cc <task_update_gps+0x58>)
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <task_update_gps+0x5c>)
 80020a2:	f7fe ffe7 	bl	8001074 <ProcessNMEALine>
		gpsSend = 1;
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <task_update_gps+0x50>)
 80020a8:	2101      	movs	r1, #1
		nmeaFrameValid = 0;
 80020aa:	2300      	movs	r3, #0
		gpsSend = 1;
 80020ac:	6011      	str	r1, [r2, #0]
		nmeaFrameValid = 0;
 80020ae:	6023      	str	r3, [r4, #0]
 80020b0:	e7e4      	b.n	800207c <task_update_gps+0x8>
 80020b2:	bf00      	nop
 80020b4:	2000045c 	.word	0x2000045c
 80020b8:	20000600 	.word	0x20000600
 80020bc:	2000059c 	.word	0x2000059c
 80020c0:	2000025c 	.word	0x2000025c
 80020c4:	20000650 	.word	0x20000650
 80020c8:	20000258 	.word	0x20000258
 80020cc:	20000240 	.word	0x20000240
 80020d0:	20000394 	.word	0x20000394

080020d4 <SCHEDULER_Run>:
void SCHEDULER_Run(void) {
 80020d4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 80020d8:	f8df a198 	ldr.w	sl, [pc, #408]	; 8002274 <SCHEDULER_Run+0x1a0>
 80020dc:	f8df b198 	ldr.w	fp, [pc, #408]	; 8002278 <SCHEDULER_Run+0x1a4>
 80020e0:	f8df 9198 	ldr.w	r9, [pc, #408]	; 800227c <SCHEDULER_Run+0x1a8>
 80020e4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8002280 <SCHEDULER_Run+0x1ac>
 80020e8:	4f54      	ldr	r7, [pc, #336]	; (800223c <SCHEDULER_Run+0x168>)
 80020ea:	4e55      	ldr	r6, [pc, #340]	; (8002240 <SCHEDULER_Run+0x16c>)
 80020ec:	4d55      	ldr	r5, [pc, #340]	; (8002244 <SCHEDULER_Run+0x170>)
 80020ee:	4c56      	ldr	r4, [pc, #344]	; (8002248 <SCHEDULER_Run+0x174>)
 80020f0:	e01f      	b.n	8002132 <SCHEDULER_Run+0x5e>
		if (counter_task_get_acceleration>= PERIOD_TASK_GET_ACCELERATION) {
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <SCHEDULER_Run+0x178>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b4f      	cmp	r3, #79	; 0x4f
 80020f8:	d831      	bhi.n	800215e <SCHEDULER_Run+0x8a>
		if (counter_task_get_rotation>= PERIOD_TASK_GET_ROTATION) {
 80020fa:	f8da 3000 	ldr.w	r3, [sl]
 80020fe:	2b4f      	cmp	r3, #79	; 0x4f
 8002100:	d837      	bhi.n	8002172 <SCHEDULER_Run+0x9e>
		if (counter_task_get_magnetic>= PERIOD_TASK_GET_MAGNETIC) {
 8002102:	f8d9 3000 	ldr.w	r3, [r9]
 8002106:	2b63      	cmp	r3, #99	; 0x63
 8002108:	d83d      	bhi.n	8002186 <SCHEDULER_Run+0xb2>
		if (counter_task_get_temperature>= PERIOD_TASK_GET_TEMPERATURE) {
 800210a:	f8d8 3000 	ldr.w	r3, [r8]
 800210e:	2b63      	cmp	r3, #99	; 0x63
 8002110:	d843      	bhi.n	800219a <SCHEDULER_Run+0xc6>
		if (counter_task_get_humidity>= PERIOD_TASK_GET_HUMIDITY) {
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b63      	cmp	r3, #99	; 0x63
 8002116:	d849      	bhi.n	80021ac <SCHEDULER_Run+0xd8>
		if (counter_task_get_pressure>= PERIOD_TASK_GET_PRESSURE) {
 8002118:	6833      	ldr	r3, [r6, #0]
 800211a:	2b63      	cmp	r3, #99	; 0x63
 800211c:	d84e      	bhi.n	80021bc <SCHEDULER_Run+0xe8>
		if (counter_task_update_gps>= PERIOD_TASK_UPDATE_GPS) {
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	2b13      	cmp	r3, #19
 8002122:	d853      	bhi.n	80021cc <SCHEDULER_Run+0xf8>
		if (counter_task_send_values_IMU>= PERIOD_TASK_SEND_VALUES_IMU) {
 8002124:	f8db 3000 	ldr.w	r3, [fp]
 8002128:	2bc7      	cmp	r3, #199	; 0xc7
 800212a:	d857      	bhi.n	80021dc <SCHEDULER_Run+0x108>
		if (counter_task_send_values_GPS>= PERIOD_TASK_SEND_VALUES_GPS) {
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	2bc7      	cmp	r3, #199	; 0xc7
 8002130:	d85c      	bhi.n	80021ec <SCHEDULER_Run+0x118>
		if (flag_1ms!=0)
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <SCHEDULER_Run+0x17c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0db      	beq.n	80020f2 <SCHEDULER_Run+0x1e>
			if (imuInit){
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <SCHEDULER_Run+0x180>)
			flag_1ms=0;
 800213c:	4944      	ldr	r1, [pc, #272]	; (8002250 <SCHEDULER_Run+0x17c>)
			if (imuInit){
 800213e:	681b      	ldr	r3, [r3, #0]
			flag_1ms=0;
 8002140:	2200      	movs	r2, #0
 8002142:	700a      	strb	r2, [r1, #0]
			if (imuInit){
 8002144:	2b00      	cmp	r3, #0
 8002146:	d15a      	bne.n	80021fe <SCHEDULER_Run+0x12a>
		if (counter_task_get_acceleration>= PERIOD_TASK_GET_ACCELERATION) {
 8002148:	4b40      	ldr	r3, [pc, #256]	; (800224c <SCHEDULER_Run+0x178>)
 800214a:	681b      	ldr	r3, [r3, #0]
			counter_task_send_values_GPS++;
 800214c:	682a      	ldr	r2, [r5, #0]
 800214e:	3201      	adds	r2, #1
 8002150:	602a      	str	r2, [r5, #0]
			counter_task_update_gps++;
 8002152:	6822      	ldr	r2, [r4, #0]
		if (counter_task_get_acceleration>= PERIOD_TASK_GET_ACCELERATION) {
 8002154:	2b4f      	cmp	r3, #79	; 0x4f
			counter_task_update_gps++;
 8002156:	f102 0201 	add.w	r2, r2, #1
 800215a:	6022      	str	r2, [r4, #0]
		if (counter_task_get_acceleration>= PERIOD_TASK_GET_ACCELERATION) {
 800215c:	d9cd      	bls.n	80020fa <SCHEDULER_Run+0x26>
			counter_task_get_acceleration=0;
 800215e:	4a3b      	ldr	r2, [pc, #236]	; (800224c <SCHEDULER_Run+0x178>)
	IKS01A2_GetAcceleration(&current_acceleration_mg);
 8002160:	483d      	ldr	r0, [pc, #244]	; (8002258 <SCHEDULER_Run+0x184>)
			counter_task_get_acceleration=0;
 8002162:	2300      	movs	r3, #0
 8002164:	6013      	str	r3, [r2, #0]
	IKS01A2_GetAcceleration(&current_acceleration_mg);
 8002166:	f000 fc81 	bl	8002a6c <IKS01A2_GetAcceleration>
		if (counter_task_get_rotation>= PERIOD_TASK_GET_ROTATION) {
 800216a:	f8da 3000 	ldr.w	r3, [sl]
 800216e:	2b4f      	cmp	r3, #79	; 0x4f
 8002170:	d9c7      	bls.n	8002102 <SCHEDULER_Run+0x2e>
			counter_task_get_rotation=0;
 8002172:	2300      	movs	r3, #0
	IKS01A2_GetRotation(&current_angular_rate_mdps);
 8002174:	4839      	ldr	r0, [pc, #228]	; (800225c <SCHEDULER_Run+0x188>)
			counter_task_get_rotation=0;
 8002176:	f8ca 3000 	str.w	r3, [sl]
	IKS01A2_GetRotation(&current_angular_rate_mdps);
 800217a:	f000 fca7 	bl	8002acc <IKS01A2_GetRotation>
		if (counter_task_get_magnetic>= PERIOD_TASK_GET_MAGNETIC) {
 800217e:	f8d9 3000 	ldr.w	r3, [r9]
 8002182:	2b63      	cmp	r3, #99	; 0x63
 8002184:	d9c1      	bls.n	800210a <SCHEDULER_Run+0x36>
			counter_task_get_magnetic=0;
 8002186:	2300      	movs	r3, #0
	IKS01A2_GetMagnetic(&current_magnetic_mG);
 8002188:	4835      	ldr	r0, [pc, #212]	; (8002260 <SCHEDULER_Run+0x18c>)
			counter_task_get_magnetic=0;
 800218a:	f8c9 3000 	str.w	r3, [r9]
	IKS01A2_GetMagnetic(&current_magnetic_mG);
 800218e:	f000 fccd 	bl	8002b2c <IKS01A2_GetMagnetic>
		if (counter_task_get_temperature>= PERIOD_TASK_GET_TEMPERATURE) {
 8002192:	f8d8 3000 	ldr.w	r3, [r8]
 8002196:	2b63      	cmp	r3, #99	; 0x63
 8002198:	d9bb      	bls.n	8002112 <SCHEDULER_Run+0x3e>
			counter_task_get_temperature=0;
 800219a:	2300      	movs	r3, #0
	IKS01A2_GetTemperature(&current_temperature_degC);
 800219c:	4831      	ldr	r0, [pc, #196]	; (8002264 <SCHEDULER_Run+0x190>)
			counter_task_get_temperature=0;
 800219e:	f8c8 3000 	str.w	r3, [r8]
	IKS01A2_GetTemperature(&current_temperature_degC);
 80021a2:	f000 fd45 	bl	8002c30 <IKS01A2_GetTemperature>
		if (counter_task_get_humidity>= PERIOD_TASK_GET_HUMIDITY) {
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b63      	cmp	r3, #99	; 0x63
 80021aa:	d9b5      	bls.n	8002118 <SCHEDULER_Run+0x44>
			counter_task_get_humidity=0;
 80021ac:	2300      	movs	r3, #0
	IKS01A2_GetHumidity(&current_humidity_perc);
 80021ae:	482e      	ldr	r0, [pc, #184]	; (8002268 <SCHEDULER_Run+0x194>)
			counter_task_get_humidity=0;
 80021b0:	603b      	str	r3, [r7, #0]
	IKS01A2_GetHumidity(&current_humidity_perc);
 80021b2:	f000 fceb 	bl	8002b8c <IKS01A2_GetHumidity>
		if (counter_task_get_pressure>= PERIOD_TASK_GET_PRESSURE) {
 80021b6:	6833      	ldr	r3, [r6, #0]
 80021b8:	2b63      	cmp	r3, #99	; 0x63
 80021ba:	d9b0      	bls.n	800211e <SCHEDULER_Run+0x4a>
			counter_task_get_pressure=0;
 80021bc:	2300      	movs	r3, #0
	IKS01A2_GetPressure(&current_pressure_hPa);
 80021be:	482b      	ldr	r0, [pc, #172]	; (800226c <SCHEDULER_Run+0x198>)
			counter_task_get_pressure=0;
 80021c0:	6033      	str	r3, [r6, #0]
	IKS01A2_GetPressure(&current_pressure_hPa);
 80021c2:	f000 fd73 	bl	8002cac <IKS01A2_GetPressure>
		if (counter_task_update_gps>= PERIOD_TASK_UPDATE_GPS) {
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	2b13      	cmp	r3, #19
 80021ca:	d9ab      	bls.n	8002124 <SCHEDULER_Run+0x50>
			counter_task_update_gps=0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	6023      	str	r3, [r4, #0]
			task_update_gps();
 80021d0:	f7ff ff50 	bl	8002074 <task_update_gps>
		if (counter_task_send_values_IMU>= PERIOD_TASK_SEND_VALUES_IMU) {
 80021d4:	f8db 3000 	ldr.w	r3, [fp]
 80021d8:	2bc7      	cmp	r3, #199	; 0xc7
 80021da:	d9a7      	bls.n	800212c <SCHEDULER_Run+0x58>
			counter_task_send_values_IMU=0;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8cb 3000 	str.w	r3, [fp]
			task_send_values_IMU();
 80021e2:	f7ff fe41 	bl	8001e68 <task_send_values_IMU>
		if (counter_task_send_values_GPS>= PERIOD_TASK_SEND_VALUES_GPS) {
 80021e6:	682b      	ldr	r3, [r5, #0]
 80021e8:	2bc7      	cmp	r3, #199	; 0xc7
 80021ea:	d9a2      	bls.n	8002132 <SCHEDULER_Run+0x5e>
	if (gpsSend){
 80021ec:	4b20      	ldr	r3, [pc, #128]	; (8002270 <SCHEDULER_Run+0x19c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
			counter_task_send_values_GPS=0;
 80021f0:	2200      	movs	r2, #0
 80021f2:	602a      	str	r2, [r5, #0]
	if (gpsSend){
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d09c      	beq.n	8002132 <SCHEDULER_Run+0x5e>
 80021f8:	f7ff fba0 	bl	800193c <task_send_values_GPS.part.0>
 80021fc:	e799      	b.n	8002132 <SCHEDULER_Run+0x5e>
				counter_task_send_values_IMU++;
 80021fe:	f8db 3000 	ldr.w	r3, [fp]
				counter_task_get_acceleration++;
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <SCHEDULER_Run+0x178>)
				counter_task_send_values_IMU++;
 8002204:	3301      	adds	r3, #1
 8002206:	f8cb 3000 	str.w	r3, [fp]
				counter_task_get_acceleration++;
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	6013      	str	r3, [r2, #0]
				counter_task_get_rotation++;
 8002210:	f8da 2000 	ldr.w	r2, [sl]
 8002214:	3201      	adds	r2, #1
 8002216:	f8ca 2000 	str.w	r2, [sl]
				counter_task_get_magnetic++;
 800221a:	f8d9 2000 	ldr.w	r2, [r9]
 800221e:	3201      	adds	r2, #1
 8002220:	f8c9 2000 	str.w	r2, [r9]
				counter_task_get_temperature++;
 8002224:	f8d8 2000 	ldr.w	r2, [r8]
 8002228:	3201      	adds	r2, #1
 800222a:	f8c8 2000 	str.w	r2, [r8]
				counter_task_get_humidity++;
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	3201      	adds	r2, #1
 8002232:	603a      	str	r2, [r7, #0]
				counter_task_get_pressure++;
 8002234:	6832      	ldr	r2, [r6, #0]
 8002236:	3201      	adds	r2, #1
 8002238:	6032      	str	r2, [r6, #0]
 800223a:	e787      	b.n	800214c <SCHEDULER_Run+0x78>
 800223c:	2000062c 	.word	0x2000062c
 8002240:	20000634 	.word	0x20000634
 8002244:	20000640 	.word	0x20000640
 8002248:	20000648 	.word	0x20000648
 800224c:	20000628 	.word	0x20000628
 8002250:	2000064c 	.word	0x2000064c
 8002254:	20000390 	.word	0x20000390
 8002258:	2000020c 	.word	0x2000020c
 800225c:	20000218 	.word	0x20000218
 8002260:	20000228 	.word	0x20000228
 8002264:	20000238 	.word	0x20000238
 8002268:	20000224 	.word	0x20000224
 800226c:	20000234 	.word	0x20000234
 8002270:	20000650 	.word	0x20000650
 8002274:	20000638 	.word	0x20000638
 8002278:	20000644 	.word	0x20000644
 800227c:	20000630 	.word	0x20000630
 8002280:	2000063c 	.word	0x2000063c

08002284 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_MspInit+0x2c>)
 8002286:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	661a      	str	r2, [r3, #96]	; 0x60
 800228e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002290:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	f002 0201 	and.w	r2, r2, #1
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800229c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a0:	659a      	str	r2, [r3, #88]	; 0x58
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ac:	b002      	add	sp, #8
 80022ae:	4770      	bx	lr
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b4:	b530      	push	{r4, r5, lr}
 80022b6:	4604      	mov	r4, r0
 80022b8:	b0ab      	sub	sp, #172	; 0xac
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ba:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022bc:	2288      	movs	r2, #136	; 0x88
 80022be:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80022c4:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80022c8:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ca:	f003 fff7 	bl	80062bc <memset>
  if(hi2c->Instance==I2C1)
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_I2C_MspInit+0x80>)
 80022d0:	6822      	ldr	r2, [r4, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022d6:	b02b      	add	sp, #172	; 0xac
 80022d8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022da:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022dc:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022de:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e0:	f003 f866 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 80022e4:	bb18      	cbnz	r0, 800232e <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	4c14      	ldr	r4, [pc, #80]	; (8002338 <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	4814      	ldr	r0, [pc, #80]	; (800233c <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80022f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022fa:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2200      	movs	r2, #0
 8002306:	2303      	movs	r3, #3
 8002308:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800230e:	2304      	movs	r3, #4
 8002310:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f001 fda0 	bl	8003e58 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800231a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800231e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	9b02      	ldr	r3, [sp, #8]
}
 800232a:	b02b      	add	sp, #172	; 0xac
 800232c:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800232e:	f7ff fb03 	bl	8001938 <Error_Handler>
 8002332:	e7d8      	b.n	80022e6 <HAL_I2C_MspInit+0x32>
 8002334:	40005400 	.word	0x40005400
 8002338:	40021000 	.word	0x40021000
 800233c:	48000400 	.word	0x48000400

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b530      	push	{r4, r5, lr}
 8002342:	4604      	mov	r4, r0
 8002344:	b0ab      	sub	sp, #172	; 0xac
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002348:	2288      	movs	r2, #136	; 0x88
 800234a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8002350:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8002354:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002356:	f003 ffb1 	bl	80062bc <memset>

  if(huart->Instance==USART2)
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_UART_MspInit+0x90>)
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_UART_MspInit+0x26>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
    }

}
 8002362:	b02b      	add	sp, #172	; 0xac
 8002364:	bd30      	pop	{r4, r5, pc}
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002366:	2302      	movs	r3, #2
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002368:	a808      	add	r0, sp, #32
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800236a:	9308      	str	r3, [sp, #32]
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236c:	f003 f820 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8002370:	bb58      	cbnz	r0, 80023ca <HAL_UART_MspInit+0x8a>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_UART_MspInit+0x94>)
 8002374:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002376:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800237a:	6599      	str	r1, [r3, #88]	; 0x58
 800237c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800237e:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
 8002382:	9401      	str	r4, [sp, #4]
 8002384:	9a01      	ldr	r2, [sp, #4]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8002388:	f044 0401 	orr.w	r4, r4, #1
 800238c:	64dc      	str	r4, [r3, #76]	; 0x4c
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002396:	220c      	movs	r2, #12
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	e9cd 2303 	strd	r2, r3, [sp, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2500      	movs	r5, #0
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a0:	2307      	movs	r3, #7
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	a903      	add	r1, sp, #12
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a4:	2203      	movs	r2, #3
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	9c02      	ldr	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	9505      	str	r5, [sp, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f001 fd51 	bl	8003e58 <HAL_GPIO_Init>
      HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023b6:	462a      	mov	r2, r5
 80023b8:	4629      	mov	r1, r5
 80023ba:	2026      	movs	r0, #38	; 0x26
 80023bc:	f001 fc96 	bl	8003cec <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c0:	2026      	movs	r0, #38	; 0x26
 80023c2:	f001 fcd1 	bl	8003d68 <HAL_NVIC_EnableIRQ>
}
 80023c6:	b02b      	add	sp, #172	; 0xac
 80023c8:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 80023ca:	f7ff fab5 	bl	8001938 <Error_Handler>
 80023ce:	e7d0      	b.n	8002372 <HAL_UART_MspInit+0x32>
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40021000 	.word	0x40021000

080023d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <NMI_Handler>
 80023da:	bf00      	nop

080023dc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <HardFault_Handler>
 80023de:	bf00      	nop

080023e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <MemManage_Handler>
 80023e2:	bf00      	nop

080023e4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <BusFault_Handler>
 80023e6:	bf00      	nop

080023e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <UsageFault_Handler>
 80023ea:	bf00      	nop

080023ec <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop

080023f0 <DebugMon_Handler>:
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop

080023f4 <PendSV_Handler>:
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  flag_1ms=1;
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <SysTick_Handler+0x14>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002400:	f001 f8e6 	bl	80035d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002408:	f001 bcd8 	b.w	8003dbc <HAL_SYSTICK_IRQHandler>
 800240c:	2000064c 	.word	0x2000064c

08002410 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002410:	2010      	movs	r0, #16
 8002412:	f001 be2f 	b.w	8004074 <HAL_GPIO_EXTI_IRQHandler>
 8002416:	bf00      	nop

08002418 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002418:	2020      	movs	r0, #32
 800241a:	f001 be2b 	b.w	8004074 <HAL_GPIO_EXTI_IRQHandler>
 800241e:	bf00      	nop

08002420 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002420:	4801      	ldr	r0, [pc, #4]	; (8002428 <USART2_IRQHandler+0x8>)
 8002422:	f003 b9f5 	b.w	8005810 <HAL_UART_IRQHandler>
 8002426:	bf00      	nop
 8002428:	2000030c 	.word	0x2000030c

0800242c <CAN1_RX0_IRQHandler>:
{
  /* USER CODE BEGIN CAN1_RX0_IRQHandler 0 */

  /* USER CODE END CAN1_RX0_IRQHandler 0 */
  //Si besoin de traitement des infos reçues
  HAL_CAN_IRQHandler(&hcan);
 800242c:	4801      	ldr	r0, [pc, #4]	; (8002434 <CAN1_RX0_IRQHandler+0x8>)
 800242e:	f001 bb35 	b.w	8003a9c <HAL_CAN_IRQHandler>
 8002432:	bf00      	nop
 8002434:	200006a8 	.word	0x200006a8

08002438 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002438:	2001      	movs	r0, #1
 800243a:	4770      	bx	lr

0800243c <_kill>:

int _kill(int pid, int sig)
{
 800243c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800243e:	f003 ff05 	bl	800624c <__errno>
 8002442:	2316      	movs	r3, #22
 8002444:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800244a:	bd08      	pop	{r3, pc}

0800244c <_exit>:

void _exit (int status)
{
 800244c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800244e:	f003 fefd 	bl	800624c <__errno>
 8002452:	2316      	movs	r3, #22
 8002454:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002456:	e7fe      	b.n	8002456 <_exit+0xa>

08002458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002458:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	1e16      	subs	r6, r2, #0
 800245c:	dd07      	ble.n	800246e <_read+0x16>
 800245e:	460c      	mov	r4, r1
 8002460:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002462:	f3af 8000 	nop.w
 8002466:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	42a5      	cmp	r5, r4
 800246c:	d1f9      	bne.n	8002462 <_read+0xa>
	}

return len;
}
 800246e:	4630      	mov	r0, r6
 8002470:	bd70      	pop	{r4, r5, r6, pc}
 8002472:	bf00      	nop

08002474 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	1e17      	subs	r7, r2, #0
 8002478:	dd0c      	ble.n	8002494 <_write+0x20>
	{
		//__io_putchar(*ptr++);
		HAL_UART_Transmit(&huart2, (uint8_t *)&ptr[DataIdx], 1, COM_POLL_TIMEOUT);
 800247a:	4e07      	ldr	r6, [pc, #28]	; (8002498 <_write+0x24>)
 800247c:	460c      	mov	r4, r1
 800247e:	19cd      	adds	r5, r1, r7
 8002480:	2201      	movs	r2, #1
 8002482:	4621      	mov	r1, r4
 8002484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	4414      	add	r4, r2
		HAL_UART_Transmit(&huart2, (uint8_t *)&ptr[DataIdx], 1, COM_POLL_TIMEOUT);
 800248a:	4630      	mov	r0, r6
 800248c:	f003 fd84 	bl	8005f98 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002490:	42ac      	cmp	r4, r5
 8002492:	d1f5      	bne.n	8002480 <_write+0xc>
	}
	return len;
}
 8002494:	4638      	mov	r0, r7
 8002496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002498:	2000030c 	.word	0x2000030c

0800249c <_close>:

int _close(int file)
{
	return -1;
}
 800249c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop

080024a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80024a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80024aa:	2000      	movs	r0, #0
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop

080024b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80024b0:	2001      	movs	r0, #1
 80024b2:	4770      	bx	lr

080024b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80024b4:	2000      	movs	r0, #0
 80024b6:	4770      	bx	lr

080024b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ba:	4c0c      	ldr	r4, [pc, #48]	; (80024ec <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <_sbrk+0x38>)
 80024be:	490d      	ldr	r1, [pc, #52]	; (80024f4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80024c0:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c2:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80024c4:	b12a      	cbz	r2, 80024d2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4410      	add	r0, r2
 80024c8:	4288      	cmp	r0, r1
 80024ca:	d807      	bhi.n	80024dc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024cc:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80024ce:	4610      	mov	r0, r2
 80024d0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <_sbrk+0x40>)
 80024d4:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80024d6:	4410      	add	r0, r2
 80024d8:	4288      	cmp	r0, r1
 80024da:	d9f7      	bls.n	80024cc <_sbrk+0x14>
    errno = ENOMEM;
 80024dc:	f003 feb6 	bl	800624c <__errno>
 80024e0:	230c      	movs	r3, #12
    return (void *)-1;
 80024e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 80024e6:	6003      	str	r3, [r0, #0]
}
 80024e8:	4610      	mov	r0, r2
 80024ea:	bd10      	pop	{r4, pc}
 80024ec:	2000065c 	.word	0x2000065c
 80024f0:	20018000 	.word	0x20018000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	20000760 	.word	0x20000760

080024fc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024fc:	480e      	ldr	r0, [pc, #56]	; (8002538 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002500:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002504:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002508:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800250c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800250e:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002516:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800251e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002522:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002526:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8002528:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002530:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002532:	6199      	str	r1, [r3, #24]
}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	40021000 	.word	0x40021000

08002540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002544:	f7ff ffda 	bl	80024fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002548:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800254a:	e003      	b.n	8002554 <LoopCopyDataInit>

0800254c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800254e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002550:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002552:	3104      	adds	r1, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002558:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800255a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800255c:	d3f6      	bcc.n	800254c <CopyDataInit>
	ldr	r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002560:	e002      	b.n	8002568 <LoopFillZerobss>

08002562 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002562:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002564:	f842 3b04 	str.w	r3, [r2], #4

08002568 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <LoopForever+0x16>)
	cmp	r2, r3
 800256a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800256c:	d3f9      	bcc.n	8002562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256e:	f003 fe73 	bl	8006258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002572:	f7ff f811 	bl	8001598 <main>

08002576 <LoopForever>:

LoopForever:
    b LoopForever
 8002576:	e7fe      	b.n	8002576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002578:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800257c:	0800ba6c 	.word	0x0800ba6c
	ldr	r0, =_sdata
 8002580:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002584:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8002588:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 800258c:	2000075c 	.word	0x2000075c

08002590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_2_IRQHandler>
	...

08002594 <CAN_Init>:
 * @brief  Configures the CAN.
 * @param  None
 * @retval None
 */
void CAN_Init(void)
{
 8002594:	b510      	push	{r4, lr}
	CAN_FilterTypeDef  sFilterConfig;

	hcan.Instance = CANx;
 8002596:	491c      	ldr	r1, [pc, #112]	; (8002608 <CAN_Init+0x74>)
 8002598:	4c1c      	ldr	r4, [pc, #112]	; (800260c <CAN_Init+0x78>)
	hcan.Init.Prescaler = 20;
 800259a:	2214      	movs	r2, #20
 800259c:	e9c4 1200 	strd	r1, r2, [r4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80025a0:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025a4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80025a8:	2300      	movs	r3, #0
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025aa:	e9c4 0104 	strd	r0, r1, [r4, #16]
{
 80025ae:	b08a      	sub	sp, #40	; 0x28
	hcan.Init.TimeTriggeredMode = DISABLE;
 80025b0:	f44f 7280 	mov.w	r2, #256	; 0x100
	hcan.Init.AutoWakeUp = DISABLE;
	hcan.Init.AutoRetransmission = DISABLE;
	hcan.Init.ReceiveFifoLocked = DISABLE;
	hcan.Init.TransmitFifoPriority = DISABLE;

	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80025b4:	4620      	mov	r0, r4
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025b6:	e9c4 3302 	strd	r3, r3, [r4, #8]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80025ba:	61a2      	str	r2, [r4, #24]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80025bc:	83a3      	strh	r3, [r4, #28]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80025be:	f001 f82b 	bl	8003618 <HAL_CAN_Init>
 80025c2:	b100      	cbz	r0, 80025c6 <CAN_Init+0x32>
	{
		while(1);
 80025c4:	e7fe      	b.n	80025c4 <CAN_Init+0x30>

	//##-2- Configure the CAN Filter ###########################################
	sFilterConfig.FilterBank = 0;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
	sFilterConfig.FilterIdHigh = CAN_ID_COMM_CHECKING<<5;
 80025c6:	f44f 4102 	mov.w	r1, #33280	; 0x8200
	sFilterConfig.FilterIdLow = FIFO_0_ID_LOW;
 80025ca:	e9cd 1000 	strd	r1, r0, [sp]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80025ce:	e9cd 0005 	strd	r0, r0, [sp, #20]
	sFilterConfig.FilterMaskIdHigh = FIFO_0_MASK_HIGH;
	sFilterConfig.FilterMaskIdLow = FIFO_0_MASK_LOW;
 80025d2:	e9cd 0002 	strd	r0, r0, [sp, #8]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
 80025d6:	2201      	movs	r2, #1
	sFilterConfig.SlaveStartFilterBank = 14;
 80025d8:	230e      	movs	r3, #14
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80025da:	9007      	str	r0, [sp, #28]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80025dc:	9004      	str	r0, [sp, #16]

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80025de:	4669      	mov	r1, sp
 80025e0:	4620      	mov	r0, r4
	sFilterConfig.SlaveStartFilterBank = 14;
 80025e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80025e6:	f001 f897 	bl	8003718 <HAL_CAN_ConfigFilter>
 80025ea:	b100      	cbz	r0, 80025ee <CAN_Init+0x5a>
	{
		while (1);
 80025ec:	e7fe      	b.n	80025ec <CAN_Init+0x58>
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 80025ee:	4620      	mov	r0, r4
 80025f0:	f001 f90a 	bl	8003808 <HAL_CAN_Start>
 80025f4:	b100      	cbz	r0, 80025f8 <CAN_Init+0x64>
	{
		while (1);
 80025f6:	e7fe      	b.n	80025f6 <CAN_Init+0x62>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80025f8:	2102      	movs	r1, #2
 80025fa:	4620      	mov	r0, r4
 80025fc:	f001 fa24 	bl	8003a48 <HAL_CAN_ActivateNotification>
 8002600:	b908      	cbnz	r0, 8002606 <CAN_Init+0x72>
	{
		while (1);
	}
}
 8002602:	b00a      	add	sp, #40	; 0x28
 8002604:	bd10      	pop	{r4, pc}
		while (1);
 8002606:	e7fe      	b.n	8002606 <CAN_Init+0x72>
 8002608:	40006400 	.word	0x40006400
 800260c:	200006a8 	.word	0x200006a8

08002610 <HAL_CAN_MspInit>:
{
	GPIO_InitTypeDef   GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* CAN1 Periph clock enable */
	CANx_CLK_ENABLE();
 8002610:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <HAL_CAN_MspInit+0x74>)
{
 8002612:	b5f0      	push	{r4, r5, r6, r7, lr}
	CANx_CLK_ENABLE();
 8002614:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002616:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800261a:	659a      	str	r2, [r3, #88]	; 0x58
 800261c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 800261e:	b089      	sub	sp, #36	; 0x24
	CANx_CLK_ENABLE();
 8002620:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	9a01      	ldr	r2, [sp, #4]
	/* Enable GPIO clock ****************************************/
	CANx_GPIO_CLK_ENABLE();
 8002628:	6cda      	ldr	r2, [r3, #76]	; 0x4c

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* CAN1 TX GPIO pin configuration */
	GPIO_InitStruct.Pin = CANx_TX_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2502      	movs	r5, #2
	CANx_GPIO_CLK_ENABLE();
 800262c:	432a      	orrs	r2, r5
 800262e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	9504      	str	r5, [sp, #16]
	CANx_GPIO_CLK_ENABLE();
 8002634:	402b      	ands	r3, r5
 8002636:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002638:	2403      	movs	r4, #3
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800263a:	2601      	movs	r6, #1
	GPIO_InitStruct.Alternate =  CANx_TX_AF;
 800263c:	2709      	movs	r7, #9

	HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 800263e:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = CANx_TX_PIN;
 8002640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = CANx_TX_PIN;
 8002648:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800264a:	e9cd 6405 	strd	r6, r4, [sp, #20]
	CANx_GPIO_CLK_ENABLE();
 800264e:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Alternate =  CANx_TX_AF;
 8002650:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002652:	f001 fc01 	bl	8003e58 <HAL_GPIO_Init>

	/* CAN1 RX GPIO pin configuration */
	GPIO_InitStruct.Pin = CANx_RX_PIN;
 8002656:	f44f 6300 	mov.w	r3, #2048	; 0x800
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Alternate =  CANx_RX_AF;

	HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct);
 800265a:	a903      	add	r1, sp, #12
 800265c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = CANx_RX_PIN;
 8002660:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002662:	e9cd 6405 	strd	r6, r4, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Alternate =  CANx_RX_AF;
 8002668:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct);
 800266a:	f001 fbf5 	bl	8003e58 <HAL_GPIO_Init>

	/*##-3- Configure the NVIC #################################################*/
	/* NVIC configuration for CAN1 Reception complete interrupt */
	HAL_NVIC_SetPriority(CANx_RX_IRQn, 15, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	210f      	movs	r1, #15
 8002672:	2014      	movs	r0, #20
 8002674:	f001 fb3a 	bl	8003cec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CANx_RX_IRQn);
 8002678:	2014      	movs	r0, #20
 800267a:	f001 fb75 	bl	8003d68 <HAL_NVIC_EnableIRQ>
}
 800267e:	b009      	add	sp, #36	; 0x24
 8002680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <CAN_Send>:
	HAL_Delay(10);
}*/

void CAN_Send(uint8_t* data, uint32_t id)
{
	TxHeader.StdId = id;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <CAN_Send+0x40>)
	TxHeader.ExtId = 0;
	TxHeader.RTR = CAN_RTR_DATA;
	TxHeader.IDE = CAN_ID_STD;
	TxHeader.DLC = 8;
 800268a:	2208      	movs	r2, #8
{
 800268c:	b510      	push	{r4, lr}
	TxHeader.ExtId = 0;
 800268e:	2400      	movs	r4, #0
	TxHeader.DLC = 8;
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <CAN_Send+0x44>)
	TxHeader.TransmitGlobalTime = DISABLE;
 8002694:	751c      	strb	r4, [r3, #20]
	TxHeader.ExtId = 0;
 8002696:	e9c3 1400 	strd	r1, r4, [r3]
	TxHeader.IDE = CAN_ID_STD;
 800269a:	e9c3 4402 	strd	r4, r4, [r3, #8]

	for(int i=0; i < 8; i++)
 800269e:	1e43      	subs	r3, r0, #1
 80026a0:	3007      	adds	r0, #7
		TxData[i] = data[i];
 80026a2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80026a6:	f802 1f01 	strb.w	r1, [r2, #1]!
	for(int i=0; i < 8; i++)
 80026aa:	4283      	cmp	r3, r0
 80026ac:	d1f9      	bne.n	80026a2 <CAN_Send+0x1a>

	/* Start the Transmission process */
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <CAN_Send+0x48>)
 80026b0:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <CAN_Send+0x4c>)
 80026b2:	4905      	ldr	r1, [pc, #20]	; (80026c8 <CAN_Send+0x40>)
 80026b4:	4808      	ldr	r0, [pc, #32]	; (80026d8 <CAN_Send+0x50>)
 80026b6:	f001 f8d9 	bl	800386c <HAL_CAN_AddTxMessage>
 80026ba:	b100      	cbz	r0, 80026be <CAN_Send+0x36>
		{
			/* Transmission request Error */
			while (1);
 80026bc:	e7fe      	b.n	80026bc <CAN_Send+0x34>
		}
		HAL_Delay(10);
}
 80026be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_Delay(10);
 80026c2:	200a      	movs	r0, #10
 80026c4:	f000 bf96 	b.w	80035f4 <HAL_Delay>
 80026c8:	2000068c 	.word	0x2000068c
 80026cc:	20000683 	.word	0x20000683
 80026d0:	200006a4 	.word	0x200006a4
 80026d4:	20000684 	.word	0x20000684
 80026d8:	200006a8 	.word	0x200006a8

080026dc <CAN_AddRXCallback>:


void CAN_AddRXCallback(CanRxCallback callback)
{
	rxCallback = callback;
 80026dc:	4b01      	ldr	r3, [pc, #4]	; (80026e4 <CAN_AddRXCallback+0x8>)
 80026de:	6018      	str	r0, [r3, #0]
}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200006d0 	.word	0x200006d0

080026e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b530      	push	{r4, r5, lr}
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80026ea:	4d14      	ldr	r5, [pc, #80]	; (800273c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80026ec:	4c14      	ldr	r4, [pc, #80]	; (8002740 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
{
 80026ee:	b083      	sub	sp, #12
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80026f0:	462b      	mov	r3, r5
 80026f2:	4622      	mov	r2, r4
 80026f4:	2100      	movs	r1, #0
 80026f6:	f001 f91d 	bl	8003934 <HAL_CAN_GetRxMessage>
 80026fa:	b960      	cbnz	r0, 8002716 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	{
		while (1);
	}


	if (RxHeader.StdId == CAN_ID_COMM_CHECKING && RxData[0]==COMM_CHECKING_REQUEST){	//Communication checking request
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8002702:	d009      	beq.n	8002718 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		data[1] = COMM_CHECKING_ACK;

		CAN_Send(data,CAN_ID_COMM_CHECKING); //Send ACK
	}

	if (rxCallback!=0) rxCallback(&RxHeader,RxData);
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b1b3      	cbz	r3, 8002738 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 800270a:	490c      	ldr	r1, [pc, #48]	; (800273c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
}
 800270e:	b003      	add	sp, #12
 8002710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if (rxCallback!=0) rxCallback(&RxHeader,RxData);
 8002714:	4718      	bx	r3
		while (1);
 8002716:	e7fe      	b.n	8002716 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	if (RxHeader.StdId == CAN_ID_COMM_CHECKING && RxData[0]==COMM_CHECKING_REQUEST){	//Communication checking request
 8002718:	782a      	ldrb	r2, [r5, #0]
 800271a:	2a01      	cmp	r2, #1
 800271c:	d1f2      	bne.n	8002704 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		uint8_t data[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 800271e:	490a      	ldr	r1, [pc, #40]	; (8002748 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002720:	c903      	ldmia	r1, {r0, r1}
 8002722:	466a      	mov	r2, sp
 8002724:	e882 0003 	stmia.w	r2, {r0, r1}
		data[1] = COMM_CHECKING_ACK;
 8002728:	2402      	movs	r4, #2
		CAN_Send(data,CAN_ID_COMM_CHECKING); //Send ACK
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
		data[1] = COMM_CHECKING_ACK;
 800272e:	f88d 4001 	strb.w	r4, [sp, #1]
		CAN_Send(data,CAN_ID_COMM_CHECKING); //Send ACK
 8002732:	f7ff ffa9 	bl	8002688 <CAN_Send>
 8002736:	e7e5      	b.n	8002704 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
}
 8002738:	b003      	add	sp, #12
 800273a:	bd30      	pop	{r4, r5, pc}
 800273c:	20000660 	.word	0x20000660
 8002740:	20000668 	.word	0x20000668
 8002744:	200006d0 	.word	0x200006d0
 8002748:	0800b584 	.word	0x0800b584

0800274c <platform_read_lps22hb>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_lps22hb(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800274c:	b510      	push	{r4, lr}
 800274e:	b084      	sub	sp, #16
	HAL_I2C_Mem_Read(handle, LPS22HB_I2C_ADD_H, reg,
 8002750:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002758:	9200      	str	r2, [sp, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	460a      	mov	r2, r1
 800275e:	21bb      	movs	r1, #187	; 0xbb
 8002760:	f001 ff2c 	bl	80045bc <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
}
 8002764:	2000      	movs	r0, #0
 8002766:	b004      	add	sp, #16
 8002768:	bd10      	pop	{r4, pc}
 800276a:	bf00      	nop

0800276c <platform_read_hts221>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800276c:	b510      	push	{r4, lr}
 800276e:	b084      	sub	sp, #16
	reg |= 0x80;
	HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 8002770:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002778:	9200      	str	r2, [sp, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8002780:	21bf      	movs	r1, #191	; 0xbf
 8002782:	f001 ff1b 	bl	80045bc <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
}
 8002786:	2000      	movs	r0, #0
 8002788:	b004      	add	sp, #16
 800278a:	bd10      	pop	{r4, pc}

0800278c <platform_read_lsm303agr>:
{
 800278c:	b510      	push	{r4, lr}
	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 800278e:	f890 c004 	ldrb.w	ip, [r0, #4]
{
 8002792:	b084      	sub	sp, #16
	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 8002794:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
		reg |= 0x80;
 8002798:	bf08      	it	eq
 800279a:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
	HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80027a4:	6800      	ldr	r0, [r0, #0]
 80027a6:	9200      	str	r2, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	460a      	mov	r2, r1
 80027ac:	9402      	str	r4, [sp, #8]
 80027ae:	4661      	mov	r1, ip
 80027b0:	f001 ff04 	bl	80045bc <HAL_I2C_Mem_Read>
}
 80027b4:	2000      	movs	r0, #0
 80027b6:	b004      	add	sp, #16
 80027b8:	bd10      	pop	{r4, pc}
 80027ba:	bf00      	nop

080027bc <platform_read_lsm6dsl>:
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	b084      	sub	sp, #16
	HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, reg,
 80027c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80027c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80027c8:	9200      	str	r2, [sp, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	460a      	mov	r2, r1
 80027ce:	21d7      	movs	r1, #215	; 0xd7
 80027d0:	f001 fef4 	bl	80045bc <HAL_I2C_Mem_Read>
}
 80027d4:	2000      	movs	r0, #0
 80027d6:	b004      	add	sp, #16
 80027d8:	bd10      	pop	{r4, pc}
 80027da:	bf00      	nop

080027dc <platform_write_lps22hb>:
{
 80027dc:	b510      	push	{r4, lr}
 80027de:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(handle, LPS22HB_I2C_ADD_H, reg,
 80027e0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80027e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80027e8:	9200      	str	r2, [sp, #0]
 80027ea:	2301      	movs	r3, #1
 80027ec:	460a      	mov	r2, r1
 80027ee:	21bb      	movs	r1, #187	; 0xbb
 80027f0:	f001 fdea 	bl	80043c8 <HAL_I2C_Mem_Write>
}
 80027f4:	2000      	movs	r0, #0
 80027f6:	b004      	add	sp, #16
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	bf00      	nop

080027fc <platform_write_hts221>:
{
 80027fc:	b510      	push	{r4, lr}
 80027fe:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 8002800:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8002810:	21bf      	movs	r1, #191	; 0xbf
 8002812:	f001 fdd9 	bl	80043c8 <HAL_I2C_Mem_Write>
}
 8002816:	2000      	movs	r0, #0
 8002818:	b004      	add	sp, #16
 800281a:	bd10      	pop	{r4, pc}

0800281c <platform_write_lsm303agr>:
{
 800281c:	b510      	push	{r4, lr}
	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 800281e:	f890 c004 	ldrb.w	ip, [r0, #4]
{
 8002822:	b084      	sub	sp, #16
	if (sensbus->i2c_address == LSM303AGR_I2C_ADD_XL) {
 8002824:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
		reg |= 0x80;
 8002828:	bf08      	it	eq
 800282a:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002834:	6800      	ldr	r0, [r0, #0]
 8002836:	9200      	str	r2, [sp, #0]
 8002838:	2301      	movs	r3, #1
 800283a:	460a      	mov	r2, r1
 800283c:	9402      	str	r4, [sp, #8]
 800283e:	4661      	mov	r1, ip
 8002840:	f001 fdc2 	bl	80043c8 <HAL_I2C_Mem_Write>
}
 8002844:	2000      	movs	r0, #0
 8002846:	b004      	add	sp, #16
 8002848:	bd10      	pop	{r4, pc}
 800284a:	bf00      	nop

0800284c <platform_write_lsm6dsl>:
{
 800284c:	b510      	push	{r4, lr}
 800284e:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, reg,
 8002850:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002858:	9200      	str	r2, [sp, #0]
 800285a:	2301      	movs	r3, #1
 800285c:	460a      	mov	r2, r1
 800285e:	21d7      	movs	r1, #215	; 0xd7
 8002860:	f001 fdb2 	bl	80043c8 <HAL_I2C_Mem_Write>
}
 8002864:	2000      	movs	r0, #0
 8002866:	b004      	add	sp, #16
 8002868:	bd10      	pop	{r4, pc}
 800286a:	bf00      	nop

0800286c <IKS01A2_Init>:
{
 800286c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(BOOT_TIME);
 8002870:	200f      	movs	r0, #15
	lsm6dl_handler.write_reg = platform_write_lsm6dsl;
 8002872:	4c66      	ldr	r4, [pc, #408]	; (8002a0c <IKS01A2_Init+0x1a0>)
	whoamI = 0;
 8002874:	4f66      	ldr	r7, [pc, #408]	; (8002a10 <IKS01A2_Init+0x1a4>)
	lsm6dl_handler.handle = &SENSOR_BUS;
 8002876:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8002a68 <IKS01A2_Init+0x1fc>
	HAL_Delay(BOOT_TIME);
 800287a:	f000 febb 	bl	80035f4 <HAL_Delay>
	lsm6dl_handler.read_reg = platform_read_lsm6dsl;
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <IKS01A2_Init+0x1a8>)
	lsm6dl_handler.write_reg = platform_write_lsm6dsl;
 8002880:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <IKS01A2_Init+0x1ac>)
	lsm6dl_handler.handle = &SENSOR_BUS;
 8002882:	f8c4 8008 	str.w	r8, [r4, #8]
	whoamI = 0;
 8002886:	2500      	movs	r5, #0
	lsm6dsl_device_id_get(&lsm6dl_handler, &whoamI);
 8002888:	4639      	mov	r1, r7
 800288a:	4620      	mov	r0, r4
	lsm6dl_handler.read_reg = platform_read_lsm6dsl;
 800288c:	e9c4 2300 	strd	r2, r3, [r4]
	whoamI = 0;
 8002890:	703d      	strb	r5, [r7, #0]
	lsm6dsl_device_id_get(&lsm6dl_handler, &whoamI);
 8002892:	f000 fde1 	bl	8003458 <lsm6dsl_device_id_get>
	if ( whoamI != LSM6DSL_ID )
 8002896:	783b      	ldrb	r3, [r7, #0]
 8002898:	2b6a      	cmp	r3, #106	; 0x6a
 800289a:	d002      	beq.n	80028a2 <IKS01A2_Init+0x36>
		return 0; /*manage here device not found */
 800289c:	4628      	mov	r0, r5
}
 800289e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	lsm6dsl_reset_set(&lsm6dl_handler, PROPERTY_ENABLE);
 80028a2:	2101      	movs	r1, #1
 80028a4:	4620      	mov	r0, r4
 80028a6:	f000 fde1 	bl	800346c <lsm6dsl_reset_set>
 80028aa:	4d5c      	ldr	r5, [pc, #368]	; (8002a1c <IKS01A2_Init+0x1b0>)
		lsm6dsl_reset_get(&lsm6dl_handler, &rst);
 80028ac:	4629      	mov	r1, r5
 80028ae:	4620      	mov	r0, r4
 80028b0:	f000 fdf6 	bl	80034a0 <lsm6dsl_reset_get>
	} while (rst);
 80028b4:	782e      	ldrb	r6, [r5, #0]
 80028b6:	2e00      	cmp	r6, #0
 80028b8:	d1f8      	bne.n	80028ac <IKS01A2_Init+0x40>
	lsm6dsl_block_data_update_set(&lsm6dl_handler, PROPERTY_ENABLE);
 80028ba:	2101      	movs	r1, #1
 80028bc:	4853      	ldr	r0, [pc, #332]	; (8002a0c <IKS01A2_Init+0x1a0>)
	lsm303agr_handler.write_reg = platform_write_lsm303agr;
 80028be:	4c58      	ldr	r4, [pc, #352]	; (8002a20 <IKS01A2_Init+0x1b4>)
	lsm6dsl_block_data_update_set(&lsm6dl_handler, PROPERTY_ENABLE);
 80028c0:	f000 fd66 	bl	8003390 <lsm6dsl_block_data_update_set>
	lsm6dsl_xl_data_rate_set(&lsm6dl_handler, LSM6DSL_XL_ODR_12Hz5);
 80028c4:	2101      	movs	r1, #1
 80028c6:	4851      	ldr	r0, [pc, #324]	; (8002a0c <IKS01A2_Init+0x1a0>)
 80028c8:	f000 fd14 	bl	80032f4 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&lsm6dl_handler, LSM6DSL_GY_ODR_12Hz5);
 80028cc:	2101      	movs	r1, #1
 80028ce:	484f      	ldr	r0, [pc, #316]	; (8002a0c <IKS01A2_Init+0x1a0>)
 80028d0:	f000 fd44 	bl	800335c <lsm6dsl_gy_data_rate_set>
	lsm6dsl_xl_full_scale_set(&lsm6dl_handler, LSM6DSL_2g);
 80028d4:	4631      	mov	r1, r6
 80028d6:	484d      	ldr	r0, [pc, #308]	; (8002a0c <IKS01A2_Init+0x1a0>)
 80028d8:	f000 fcf2 	bl	80032c0 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&lsm6dl_handler, LSM6DSL_500dps);
 80028dc:	2102      	movs	r1, #2
 80028de:	484b      	ldr	r0, [pc, #300]	; (8002a0c <IKS01A2_Init+0x1a0>)
 80028e0:	f000 fd22 	bl	8003328 <lsm6dsl_gy_full_scale_set>
	lsm6dsl_gy_band_pass_set(&lsm6dl_handler, LSM6DSL_HP_260mHz_LP1_STRONG);
 80028e4:	21a8      	movs	r1, #168	; 0xa8
 80028e6:	4849      	ldr	r0, [pc, #292]	; (8002a0c <IKS01A2_Init+0x1a0>)
 80028e8:	f000 fdea 	bl	80034c0 <lsm6dsl_gy_band_pass_set>
	lsm303agr_handler.write_reg = platform_write_lsm303agr;
 80028ec:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <IKS01A2_Init+0x1b8>)
 80028ee:	6023      	str	r3, [r4, #0]
	lsm303agr_handler.read_reg = platform_read_lsm303agr;
 80028f0:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <IKS01A2_Init+0x1bc>)
 80028f2:	6063      	str	r3, [r4, #4]
	lsm303agr_mag_device_id_get(&lsm303agr_handler, &whoamI);
 80028f4:	4946      	ldr	r1, [pc, #280]	; (8002a10 <IKS01A2_Init+0x1a4>)
	lsm303agr_handler.handle = (void *)&mag_bus;
 80028f6:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <IKS01A2_Init+0x1c0>)
 80028f8:	60a3      	str	r3, [r4, #8]
	lsm303agr_mag_device_id_get(&lsm303agr_handler, &whoamI);
 80028fa:	4620      	mov	r0, r4
	whoamI = 0;
 80028fc:	703e      	strb	r6, [r7, #0]
	lsm303agr_mag_device_id_get(&lsm303agr_handler, &whoamI);
 80028fe:	f000 fc89 	bl	8003214 <lsm303agr_mag_device_id_get>
	if ( whoamI != LSM303AGR_ID_MG )
 8002902:	783b      	ldrb	r3, [r7, #0]
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d000      	beq.n	800290a <IKS01A2_Init+0x9e>
		while (1); /*manage here device not found */
 8002908:	e7fe      	b.n	8002908 <IKS01A2_Init+0x9c>
	lsm303agr_mag_reset_set(&lsm303agr_handler, PROPERTY_ENABLE);
 800290a:	2101      	movs	r1, #1
 800290c:	4620      	mov	r0, r4
 800290e:	f000 fc8b 	bl	8003228 <lsm303agr_mag_reset_set>
		lsm303agr_mag_reset_get(&lsm303agr_handler, &rst);
 8002912:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8002a1c <IKS01A2_Init+0x1b0>
 8002916:	4649      	mov	r1, r9
 8002918:	4620      	mov	r0, r4
 800291a:	f000 fc9f 	bl	800325c <lsm303agr_mag_reset_get>
	} while (rst);
 800291e:	782e      	ldrb	r6, [r5, #0]
 8002920:	2e00      	cmp	r6, #0
 8002922:	d1f8      	bne.n	8002916 <IKS01A2_Init+0xaa>
	lsm303agr_mag_block_data_update_set(&lsm303agr_handler, PROPERTY_ENABLE);
 8002924:	2101      	movs	r1, #1
 8002926:	483e      	ldr	r0, [pc, #248]	; (8002a20 <IKS01A2_Init+0x1b4>)
	hts221_handler.write_reg = platform_write_hts221;
 8002928:	4c41      	ldr	r4, [pc, #260]	; (8002a30 <IKS01A2_Init+0x1c4>)
	lsm303agr_mag_block_data_update_set(&lsm303agr_handler, PROPERTY_ENABLE);
 800292a:	f000 fc39 	bl	80031a0 <lsm303agr_mag_block_data_update_set>
	lsm303agr_mag_data_rate_set(&lsm303agr_handler, LSM303AGR_MG_ODR_10Hz);
 800292e:	4631      	mov	r1, r6
 8002930:	483b      	ldr	r0, [pc, #236]	; (8002a20 <IKS01A2_Init+0x1b4>)
 8002932:	f000 fbe7 	bl	8003104 <lsm303agr_mag_data_rate_set>
	lsm303agr_mag_set_rst_mode_set(&lsm303agr_handler,LSM303AGR_SENS_OFF_CANC_EVERY_ODR);
 8002936:	2101      	movs	r1, #1
 8002938:	4839      	ldr	r0, [pc, #228]	; (8002a20 <IKS01A2_Init+0x1b4>)
 800293a:	f000 fc17 	bl	800316c <lsm303agr_mag_set_rst_mode_set>
	lsm303agr_mag_offset_temp_comp_set(&lsm303agr_handler, PROPERTY_ENABLE);
 800293e:	2101      	movs	r1, #1
 8002940:	4837      	ldr	r0, [pc, #220]	; (8002a20 <IKS01A2_Init+0x1b4>)
 8002942:	f000 fbf9 	bl	8003138 <lsm303agr_mag_offset_temp_comp_set>
	lsm303agr_mag_operating_mode_set(&lsm303agr_handler,LSM303AGR_CONTINUOUS_MODE);
 8002946:	4631      	mov	r1, r6
 8002948:	4835      	ldr	r0, [pc, #212]	; (8002a20 <IKS01A2_Init+0x1b4>)
 800294a:	f000 fbc1 	bl	80030d0 <lsm303agr_mag_operating_mode_set>
	hts221_handler.write_reg = platform_write_hts221;
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <IKS01A2_Init+0x1c8>)
 8002950:	6023      	str	r3, [r4, #0]
	hts221_device_id_get(&hts221_handler, &whoamI);
 8002952:	492f      	ldr	r1, [pc, #188]	; (8002a10 <IKS01A2_Init+0x1a4>)
	hts221_handler.read_reg = platform_read_hts221;
 8002954:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <IKS01A2_Init+0x1cc>)
 8002956:	6063      	str	r3, [r4, #4]
	hts221_device_id_get(&hts221_handler, &whoamI);
 8002958:	4620      	mov	r0, r4
	whoamI = 0;
 800295a:	703e      	strb	r6, [r7, #0]
	hts221_handler.handle = &SENSOR_BUS;
 800295c:	f8c4 8008 	str.w	r8, [r4, #8]
	hts221_device_id_get(&hts221_handler, &whoamI);
 8002960:	f000 fa1c 	bl	8002d9c <hts221_device_id_get>
	if ( whoamI != HTS221_ID )
 8002964:	783b      	ldrb	r3, [r7, #0]
 8002966:	2bbc      	cmp	r3, #188	; 0xbc
 8002968:	d000      	beq.n	800296c <IKS01A2_Init+0x100>
		while (1); /*manage here device not found */
 800296a:	e7fe      	b.n	800296a <IKS01A2_Init+0xfe>
	hts221_hum_adc_point_0_get(&hts221_handler, &lin_hum.x0);
 800296c:	4933      	ldr	r1, [pc, #204]	; (8002a3c <IKS01A2_Init+0x1d0>)
	lps22hb_handler.write_reg = platform_write_lps22hb;
 800296e:	4e34      	ldr	r6, [pc, #208]	; (8002a40 <IKS01A2_Init+0x1d4>)
	hts221_hum_adc_point_0_get(&hts221_handler, &lin_hum.x0);
 8002970:	4620      	mov	r0, r4
 8002972:	f000 faad 	bl	8002ed0 <hts221_hum_adc_point_0_get>
	hts221_hum_rh_point_0_get(&hts221_handler, &lin_hum.y0);
 8002976:	4933      	ldr	r1, [pc, #204]	; (8002a44 <IKS01A2_Init+0x1d8>)
 8002978:	4620      	mov	r0, r4
 800297a:	f000 fa3d 	bl	8002df8 <hts221_hum_rh_point_0_get>
	hts221_hum_adc_point_1_get(&hts221_handler, &lin_hum.x1);
 800297e:	4932      	ldr	r1, [pc, #200]	; (8002a48 <IKS01A2_Init+0x1dc>)
 8002980:	4620      	mov	r0, r4
 8002982:	f000 fabd 	bl	8002f00 <hts221_hum_adc_point_1_get>
	hts221_hum_rh_point_1_get(&hts221_handler, &lin_hum.y1);
 8002986:	4931      	ldr	r1, [pc, #196]	; (8002a4c <IKS01A2_Init+0x1e0>)
 8002988:	4620      	mov	r0, r4
 800298a:	f000 fa49 	bl	8002e20 <hts221_hum_rh_point_1_get>
	hts221_temp_adc_point_0_get(&hts221_handler, &lin_temp.x0);
 800298e:	4930      	ldr	r1, [pc, #192]	; (8002a50 <IKS01A2_Init+0x1e4>)
 8002990:	4620      	mov	r0, r4
 8002992:	f000 facd 	bl	8002f30 <hts221_temp_adc_point_0_get>
	hts221_temp_deg_point_0_get(&hts221_handler, &lin_temp.y0);
 8002996:	492f      	ldr	r1, [pc, #188]	; (8002a54 <IKS01A2_Init+0x1e8>)
 8002998:	4620      	mov	r0, r4
 800299a:	f000 fa55 	bl	8002e48 <hts221_temp_deg_point_0_get>
	hts221_temp_adc_point_1_get(&hts221_handler, &lin_temp.x1);
 800299e:	492e      	ldr	r1, [pc, #184]	; (8002a58 <IKS01A2_Init+0x1ec>)
 80029a0:	4620      	mov	r0, r4
 80029a2:	f000 fadd 	bl	8002f60 <hts221_temp_adc_point_1_get>
	hts221_temp_deg_point_1_get(&hts221_handler, &lin_temp.y1);
 80029a6:	492d      	ldr	r1, [pc, #180]	; (8002a5c <IKS01A2_Init+0x1f0>)
 80029a8:	4620      	mov	r0, r4
 80029aa:	f000 fa6f 	bl	8002e8c <hts221_temp_deg_point_1_get>
	hts221_block_data_update_set(&hts221_handler, PROPERTY_ENABLE);
 80029ae:	2101      	movs	r1, #1
 80029b0:	4620      	mov	r0, r4
 80029b2:	f000 f9b5 	bl	8002d20 <hts221_block_data_update_set>
	hts221_data_rate_set(&hts221_handler, HTS221_ODR_1Hz);
 80029b6:	2101      	movs	r1, #1
 80029b8:	4620      	mov	r0, r4
 80029ba:	f000 f997 	bl	8002cec <hts221_data_rate_set>
	hts221_power_on_set(&hts221_handler, PROPERTY_ENABLE);
 80029be:	2101      	movs	r1, #1
 80029c0:	4620      	mov	r0, r4
 80029c2:	f000 f9f5 	bl	8002db0 <hts221_power_on_set>
	lps22hb_handler.write_reg = platform_write_lps22hb;
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <IKS01A2_Init+0x1f4>)
 80029c8:	6033      	str	r3, [r6, #0]
	lps22hb_device_id_get(&lps22hb_handler, &whoamI);
 80029ca:	4911      	ldr	r1, [pc, #68]	; (8002a10 <IKS01A2_Init+0x1a4>)
	lps22hb_handler.read_reg = platform_read_lps22hb;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <IKS01A2_Init+0x1f8>)
 80029ce:	6073      	str	r3, [r6, #4]
	lps22hb_device_id_get(&lps22hb_handler, &whoamI);
 80029d0:	4630      	mov	r0, r6
	lps22hb_handler.handle = &SENSOR_BUS;
 80029d2:	f8c6 8008 	str.w	r8, [r6, #8]
	lps22hb_device_id_get(&lps22hb_handler, &whoamI);
 80029d6:	f000 fb3d 	bl	8003054 <lps22hb_device_id_get>
	if (whoamI != LPS22HB_ID) {
 80029da:	783b      	ldrb	r3, [r7, #0]
 80029dc:	2bb1      	cmp	r3, #177	; 0xb1
 80029de:	d000      	beq.n	80029e2 <IKS01A2_Init+0x176>
		while (1)/* manage here device not found */;
 80029e0:	e7fe      	b.n	80029e0 <IKS01A2_Init+0x174>
	lps22hb_reset_set(&lps22hb_handler, PROPERTY_ENABLE);
 80029e2:	2101      	movs	r1, #1
 80029e4:	4630      	mov	r0, r6
 80029e6:	f000 fb3f 	bl	8003068 <lps22hb_reset_set>
		lps22hb_reset_get(&lps22hb_handler, &rst);
 80029ea:	4c0c      	ldr	r4, [pc, #48]	; (8002a1c <IKS01A2_Init+0x1b0>)
 80029ec:	4621      	mov	r1, r4
 80029ee:	4630      	mov	r0, r6
 80029f0:	f000 fb54 	bl	800309c <lps22hb_reset_get>
	} while (rst);
 80029f4:	7829      	ldrb	r1, [r5, #0]
 80029f6:	2900      	cmp	r1, #0
 80029f8:	d1f8      	bne.n	80029ec <IKS01A2_Init+0x180>
	lps22hb_low_pass_filter_mode_set(&lps22hb_handler, LPS22HB_LPF_ODR_DIV_2);
 80029fa:	4811      	ldr	r0, [pc, #68]	; (8002a40 <IKS01A2_Init+0x1d4>)
 80029fc:	f000 face 	bl	8002f9c <lps22hb_low_pass_filter_mode_set>
	lps22hb_data_rate_set(&lps22hb_handler, LPS22HB_ODR_10_Hz);
 8002a00:	480f      	ldr	r0, [pc, #60]	; (8002a40 <IKS01A2_Init+0x1d4>)
 8002a02:	2102      	movs	r1, #2
 8002a04:	f000 fae4 	bl	8002fd0 <lps22hb_data_rate_set>
	return 1;
 8002a08:	2001      	movs	r0, #1
 8002a0a:	e748      	b.n	800289e <IKS01A2_Init+0x32>
 8002a0c:	20000738 	.word	0x20000738
 8002a10:	20000745 	.word	0x20000745
 8002a14:	080027bd 	.word	0x080027bd
 8002a18:	0800284d 	.word	0x0800284d
 8002a1c:	20000744 	.word	0x20000744
 8002a20:	2000072c 	.word	0x2000072c
 8002a24:	0800281d 	.word	0x0800281d
 8002a28:	0800278d 	.word	0x0800278d
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	200006f4 	.word	0x200006f4
 8002a34:	080027fd 	.word	0x080027fd
 8002a38:	0800276d 	.word	0x0800276d
 8002a3c:	20000700 	.word	0x20000700
 8002a40:	20000720 	.word	0x20000720
 8002a44:	20000704 	.word	0x20000704
 8002a48:	20000708 	.word	0x20000708
 8002a4c:	2000070c 	.word	0x2000070c
 8002a50:	20000710 	.word	0x20000710
 8002a54:	20000714 	.word	0x20000714
 8002a58:	20000718 	.word	0x20000718
 8002a5c:	2000071c 	.word	0x2000071c
 8002a60:	080027dd 	.word	0x080027dd
 8002a64:	0800274d 	.word	0x0800274d
 8002a68:	200002c0 	.word	0x200002c0

08002a6c <IKS01A2_GetAcceleration>:
uint32_t IKS01A2_GetAcceleration(values3d_t *acceleration_mg) {
 8002a6c:	b530      	push	{r4, r5, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	4604      	mov	r4, r0
	lsm6dsl_status_reg_get(&lsm6dl_handler, &reg.status_reg);
 8002a72:	a901      	add	r1, sp, #4
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <IKS01A2_GetAcceleration+0x58>)
 8002a76:	f000 fca5 	bl	80033c4 <lsm6dsl_status_reg_get>
	if (reg.status_reg.xlda) {
 8002a7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a7e:	f013 0301 	ands.w	r3, r3, #1
 8002a82:	d102      	bne.n	8002a8a <IKS01A2_GetAcceleration+0x1e>
	return 0;
 8002a84:	4618      	mov	r0, r3
}
 8002a86:	b003      	add	sp, #12
 8002a88:	bd30      	pop	{r4, r5, pc}
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002a8a:	4d0f      	ldr	r5, [pc, #60]	; (8002ac8 <IKS01A2_GetAcceleration+0x5c>)
		lsm6dsl_acceleration_raw_get(&lsm6dl_handler, data_raw_acceleration);
 8002a8c:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <IKS01A2_GetAcceleration+0x58>)
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002a8e:	2300      	movs	r3, #0
		lsm6dsl_acceleration_raw_get(&lsm6dl_handler, data_raw_acceleration);
 8002a90:	4629      	mov	r1, r5
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	80ab      	strh	r3, [r5, #4]
		lsm6dsl_acceleration_raw_get(&lsm6dl_handler, data_raw_acceleration);
 8002a96:	f000 fcbf 	bl	8003418 <lsm6dsl_acceleration_raw_get>
		acceleration_mg->x = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[0]);
 8002a9a:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002a9e:	f000 fbf7 	bl	8003290 <lsm6dsl_from_fs2g_to_mg>
		acceleration_mg->y = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[1]);
 8002aa2:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
		acceleration_mg->x = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[0]);
 8002aa6:	ed84 0a00 	vstr	s0, [r4]
		acceleration_mg->y = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[1]);
 8002aaa:	f000 fbf1 	bl	8003290 <lsm6dsl_from_fs2g_to_mg>
		acceleration_mg->z = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[2]);
 8002aae:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
		acceleration_mg->y = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[1]);
 8002ab2:	ed84 0a01 	vstr	s0, [r4, #4]
		acceleration_mg->z = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[2]);
 8002ab6:	f000 fbeb 	bl	8003290 <lsm6dsl_from_fs2g_to_mg>
		return 1;
 8002aba:	2001      	movs	r0, #1
		acceleration_mg->z = lsm6dsl_from_fs2g_to_mg(data_raw_acceleration[2]);
 8002abc:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002ac0:	b003      	add	sp, #12
 8002ac2:	bd30      	pop	{r4, r5, pc}
 8002ac4:	20000738 	.word	0x20000738
 8002ac8:	200006d4 	.word	0x200006d4

08002acc <IKS01A2_GetRotation>:
uint32_t IKS01A2_GetRotation(values3d_t *angular_rate_mdps) {
 8002acc:	b530      	push	{r4, r5, lr}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	4604      	mov	r4, r0
	lsm6dsl_status_reg_get(&lsm6dl_handler, &reg.status_reg);
 8002ad2:	a901      	add	r1, sp, #4
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <IKS01A2_GetRotation+0x58>)
 8002ad6:	f000 fc75 	bl	80033c4 <lsm6dsl_status_reg_get>
	if (reg.status_reg.gda) {
 8002ada:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ade:	f013 0302 	ands.w	r3, r3, #2
 8002ae2:	d102      	bne.n	8002aea <IKS01A2_GetRotation+0x1e>
	return 0;
 8002ae4:	4618      	mov	r0, r3
}
 8002ae6:	b003      	add	sp, #12
 8002ae8:	bd30      	pop	{r4, r5, pc}
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002aea:	4d0f      	ldr	r5, [pc, #60]	; (8002b28 <IKS01A2_GetRotation+0x5c>)
		lsm6dsl_angular_rate_raw_get(&lsm6dl_handler, data_raw_angular_rate);
 8002aec:	480d      	ldr	r0, [pc, #52]	; (8002b24 <IKS01A2_GetRotation+0x58>)
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002aee:	2300      	movs	r3, #0
		lsm6dsl_angular_rate_raw_get(&lsm6dl_handler, data_raw_angular_rate);
 8002af0:	4629      	mov	r1, r5
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002af2:	602b      	str	r3, [r5, #0]
 8002af4:	80ab      	strh	r3, [r5, #4]
		lsm6dsl_angular_rate_raw_get(&lsm6dl_handler, data_raw_angular_rate);
 8002af6:	f000 fc6f 	bl	80033d8 <lsm6dsl_angular_rate_raw_get>
		angular_rate_mdps->x = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[0]);
 8002afa:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002afe:	f000 fbd3 	bl	80032a8 <lsm6dsl_from_fs500dps_to_mdps>
		angular_rate_mdps->y = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[1]);
 8002b02:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
		angular_rate_mdps->x = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[0]);
 8002b06:	ed84 0a00 	vstr	s0, [r4]
		angular_rate_mdps->y = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[1]);
 8002b0a:	f000 fbcd 	bl	80032a8 <lsm6dsl_from_fs500dps_to_mdps>
		angular_rate_mdps->z = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[2]);
 8002b0e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
		angular_rate_mdps->y = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[1]);
 8002b12:	ed84 0a01 	vstr	s0, [r4, #4]
		angular_rate_mdps->z = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[2]);
 8002b16:	f000 fbc7 	bl	80032a8 <lsm6dsl_from_fs500dps_to_mdps>
		return 1;
 8002b1a:	2001      	movs	r0, #1
		angular_rate_mdps->z = lsm6dsl_from_fs500dps_to_mdps(data_raw_angular_rate[2]);
 8002b1c:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002b20:	b003      	add	sp, #12
 8002b22:	bd30      	pop	{r4, r5, pc}
 8002b24:	20000738 	.word	0x20000738
 8002b28:	200006dc 	.word	0x200006dc

08002b2c <IKS01A2_GetMagnetic>:
uint32_t IKS01A2_GetMagnetic(values3d_t *magnetic_mG) {
 8002b2c:	b530      	push	{r4, r5, lr}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	4604      	mov	r4, r0
	lsm303agr_mag_status_get(&lsm303agr_handler, &reg.status_reg_m);
 8002b32:	a901      	add	r1, sp, #4
 8002b34:	4813      	ldr	r0, [pc, #76]	; (8002b84 <IKS01A2_GetMagnetic+0x58>)
 8002b36:	f000 fba1 	bl	800327c <lsm303agr_mag_status_get>
	if (reg.status_reg_m.zyxda) {
 8002b3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b3e:	f013 0308 	ands.w	r3, r3, #8
 8002b42:	d102      	bne.n	8002b4a <IKS01A2_GetMagnetic+0x1e>
	return 0;
 8002b44:	4618      	mov	r0, r3
}
 8002b46:	b003      	add	sp, #12
 8002b48:	bd30      	pop	{r4, r5, pc}
		memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8002b4a:	4d0f      	ldr	r5, [pc, #60]	; (8002b88 <IKS01A2_GetMagnetic+0x5c>)
		lsm303agr_magnetic_raw_get(&lsm303agr_handler, data_raw_magnetic);
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <IKS01A2_GetMagnetic+0x58>)
		memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8002b4e:	2300      	movs	r3, #0
		lsm303agr_magnetic_raw_get(&lsm303agr_handler, data_raw_magnetic);
 8002b50:	4629      	mov	r1, r5
		memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8002b52:	602b      	str	r3, [r5, #0]
 8002b54:	80ab      	strh	r3, [r5, #4]
		lsm303agr_magnetic_raw_get(&lsm303agr_handler, data_raw_magnetic);
 8002b56:	f000 fb3d 	bl	80031d4 <lsm303agr_magnetic_raw_get>
		magnetic_mG->x = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[0]);
 8002b5a:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002b5e:	f000 faad 	bl	80030bc <lsm303agr_from_lsb_to_mgauss>
		magnetic_mG->y = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[1]);
 8002b62:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
		magnetic_mG->x = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[0]);
 8002b66:	ed84 0a00 	vstr	s0, [r4]
		magnetic_mG->y = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[1]);
 8002b6a:	f000 faa7 	bl	80030bc <lsm303agr_from_lsb_to_mgauss>
		magnetic_mG->z = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[2]);
 8002b6e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
		magnetic_mG->y = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[1]);
 8002b72:	ed84 0a01 	vstr	s0, [r4, #4]
		magnetic_mG->z = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[2]);
 8002b76:	f000 faa1 	bl	80030bc <lsm303agr_from_lsb_to_mgauss>
		return 1;
 8002b7a:	2001      	movs	r0, #1
		magnetic_mG->z = lsm303agr_from_lsb_to_mgauss(data_raw_magnetic[2]);
 8002b7c:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002b80:	b003      	add	sp, #12
 8002b82:	bd30      	pop	{r4, r5, pc}
 8002b84:	2000072c 	.word	0x2000072c
 8002b88:	200006e4 	.word	0x200006e4

08002b8c <IKS01A2_GetHumidity>:
uint32_t IKS01A2_GetHumidity(float *humidity_perc) {
 8002b8c:	b530      	push	{r4, r5, lr}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	4604      	mov	r4, r0
	hts221_status_get(&hts221_handler, &reg.status_reg);
 8002b92:	a901      	add	r1, sp, #4
 8002b94:	4822      	ldr	r0, [pc, #136]	; (8002c20 <IKS01A2_GetHumidity+0x94>)
 8002b96:	f000 f925 	bl	8002de4 <hts221_status_get>
	if (reg.status_reg.h_da) {
 8002b9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b9e:	f013 0302 	ands.w	r3, r3, #2
 8002ba2:	d102      	bne.n	8002baa <IKS01A2_GetHumidity+0x1e>
	return 0;
 8002ba4:	4618      	mov	r0, r3
}
 8002ba6:	b003      	add	sp, #12
 8002ba8:	bd30      	pop	{r4, r5, pc}
		memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 8002baa:	4d1e      	ldr	r5, [pc, #120]	; (8002c24 <IKS01A2_GetHumidity+0x98>)
		hts221_humidity_raw_get(&hts221_handler, &data_raw_humidity);
 8002bac:	481c      	ldr	r0, [pc, #112]	; (8002c20 <IKS01A2_GetHumidity+0x94>)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	802b      	strh	r3, [r5, #0]
 8002bb4:	f000 f8ce 	bl	8002d54 <hts221_humidity_raw_get>
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <IKS01A2_GetHumidity+0x9c>)
 8002bba:	f9b5 2000 	ldrsh.w	r2, [r5]
 8002bbe:	edd3 6a03 	vldr	s13, [r3, #12]
			(lin->x0 * lin->y1)))
 8002bc2:	edd3 5a00 	vldr	s11, [r3]
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002bc6:	ed93 5a01 	vldr	s10, [r3, #4]
 8002bca:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bce:	ee65 7ae6 	vnmul.f32	s15, s11, s13
 8002bd2:	ee06 2a10 	vmov	s12, r2
 8002bd6:	eee5 7a07 	vfma.f32	s15, s10, s14
		if (*humidity_perc < 0) {
 8002bda:	2300      	movs	r3, #0
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002bdc:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8002be0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
			/ (lin->x1 - lin->x0);
 8002be4:	ee37 7a65 	vsub.f32	s14, s14, s11
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002be8:	eee6 7a86 	vfma.f32	s15, s13, s12
			/ (lin->x1 - lin->x0);
 8002bec:	eec7 6a87 	vdiv.f32	s13, s15, s14
		if (*humidity_perc < 0) {
 8002bf0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d40e      	bmi.n	8002c18 <IKS01A2_GetHumidity+0x8c>
		if (*humidity_perc > 100) {
 8002bfa:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002c2c <IKS01A2_GetHumidity+0xa0>
 8002bfe:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return 1;
 8002c06:	f04f 0001 	mov.w	r0, #1
 8002c0a:	bfd4      	ite	le
 8002c0c:	edc4 6a00 	vstrle	s13, [r4]
			*humidity_perc = 100;
 8002c10:	edc4 7a00 	vstrgt	s15, [r4]
}
 8002c14:	b003      	add	sp, #12
 8002c16:	bd30      	pop	{r4, r5, pc}
 8002c18:	6023      	str	r3, [r4, #0]
		return 1;
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	e7c3      	b.n	8002ba6 <IKS01A2_GetHumidity+0x1a>
 8002c1e:	bf00      	nop
 8002c20:	200006f4 	.word	0x200006f4
 8002c24:	200006e2 	.word	0x200006e2
 8002c28:	20000700 	.word	0x20000700
 8002c2c:	42c80000 	.word	0x42c80000

08002c30 <IKS01A2_GetTemperature>:
uint32_t IKS01A2_GetTemperature(float *temperature_degC) {
 8002c30:	b570      	push	{r4, r5, r6, lr}
	hts221_status_get(&hts221_handler, &reg.status_reg);
 8002c32:	4c1b      	ldr	r4, [pc, #108]	; (8002ca0 <IKS01A2_GetTemperature+0x70>)
uint32_t IKS01A2_GetTemperature(float *temperature_degC) {
 8002c34:	b082      	sub	sp, #8
 8002c36:	4605      	mov	r5, r0
	hts221_status_get(&hts221_handler, &reg.status_reg);
 8002c38:	a901      	add	r1, sp, #4
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f000 f8d2 	bl	8002de4 <hts221_status_get>
	if (reg.status_reg.t_da) {
 8002c40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c44:	f013 0301 	ands.w	r3, r3, #1
 8002c48:	d102      	bne.n	8002c50 <IKS01A2_GetTemperature+0x20>
	return 0;
 8002c4a:	4618      	mov	r0, r3
}
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
		hts221_temperature_raw_get(&hts221_handler, &data_raw_temperature);
 8002c50:	4e14      	ldr	r6, [pc, #80]	; (8002ca4 <IKS01A2_GetTemperature+0x74>)
		memset(&hts221_handler, 0x00, sizeof(int16_t));
 8002c52:	2300      	movs	r3, #0
		hts221_temperature_raw_get(&hts221_handler, &data_raw_temperature);
 8002c54:	4631      	mov	r1, r6
 8002c56:	4620      	mov	r0, r4
		memset(&hts221_handler, 0x00, sizeof(int16_t));
 8002c58:	8023      	strh	r3, [r4, #0]
		hts221_temperature_raw_get(&hts221_handler, &data_raw_temperature);
 8002c5a:	f000 f88d 	bl	8002d78 <hts221_temperature_raw_get>
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <IKS01A2_GetTemperature+0x78>)
 8002c60:	f9b6 2000 	ldrsh.w	r2, [r6]
 8002c64:	edd3 6a03 	vldr	s13, [r3, #12]
			(lin->x0 * lin->y1)))
 8002c68:	edd3 5a00 	vldr	s11, [r3]
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002c6c:	ed93 5a01 	vldr	s10, [r3, #4]
 8002c70:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c74:	ee65 7ae6 	vnmul.f32	s15, s11, s13
 8002c78:	ee06 2a10 	vmov	s12, r2
 8002c7c:	eee5 7a07 	vfma.f32	s15, s10, s14
		return 1;
 8002c80:	2001      	movs	r0, #1
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002c82:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8002c86:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
			/ (lin->x1 - lin->x0);
 8002c8a:	ee37 7a65 	vsub.f32	s14, s14, s11
	return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002c8e:	eee6 7a86 	vfma.f32	s15, s13, s12
			/ (lin->x1 - lin->x0);
 8002c92:	eec7 6a87 	vdiv.f32	s13, s15, s14
		*temperature_degC = linear_interpolation(&lin_temp, data_raw_temperature);
 8002c96:	edc5 6a00 	vstr	s13, [r5]
}
 8002c9a:	b002      	add	sp, #8
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200006f4 	.word	0x200006f4
 8002ca4:	200006f0 	.word	0x200006f0
 8002ca8:	20000710 	.word	0x20000710

08002cac <IKS01A2_GetPressure>:
uint32_t IKS01A2_GetPressure(float *pressure_hPa) {
 8002cac:	b530      	push	{r4, r5, lr}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	4604      	mov	r4, r0
	lps22hb_press_data_ready_get(&lps22hb_handler, &reg);
 8002cb2:	f10d 0107 	add.w	r1, sp, #7
 8002cb6:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <IKS01A2_GetPressure+0x38>)
 8002cb8:	f000 f9a4 	bl	8003004 <lps22hb_press_data_ready_get>
	if (reg) {
 8002cbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002cc0:	b908      	cbnz	r0, 8002cc6 <IKS01A2_GetPressure+0x1a>
}
 8002cc2:	b003      	add	sp, #12
 8002cc4:	bd30      	pop	{r4, r5, pc}
		memset(&data_raw_pressure, 0x00, sizeof(int32_t));
 8002cc6:	4d08      	ldr	r5, [pc, #32]	; (8002ce8 <IKS01A2_GetPressure+0x3c>)
		lps22hb_pressure_raw_get(&lps22hb_handler, &data_raw_pressure);
 8002cc8:	4806      	ldr	r0, [pc, #24]	; (8002ce4 <IKS01A2_GetPressure+0x38>)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4629      	mov	r1, r5
 8002cce:	602b      	str	r3, [r5, #0]
 8002cd0:	f000 f9a8 	bl	8003024 <lps22hb_pressure_raw_get>
		*pressure_hPa = lps22hb_from_lsb_to_hpa(data_raw_pressure);
 8002cd4:	6828      	ldr	r0, [r5, #0]
 8002cd6:	f000 f95b 	bl	8002f90 <lps22hb_from_lsb_to_hpa>
		return 1;
 8002cda:	2001      	movs	r0, #1
		*pressure_hPa = lps22hb_from_lsb_to_hpa(data_raw_pressure);
 8002cdc:	ed84 0a00 	vstr	s0, [r4]
}
 8002ce0:	b003      	add	sp, #12
 8002ce2:	bd30      	pop	{r4, r5, pc}
 8002ce4:	20000720 	.word	0x20000720
 8002ce8:	200006ec 	.word	0x200006ec

08002cec <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	4604      	mov	r4, r0
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002cf4:	6880      	ldr	r0, [r0, #8]
 8002cf6:	6866      	ldr	r6, [r4, #4]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	aa01      	add	r2, sp, #4
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0)
 8002d00:	b958      	cbnz	r0, 8002d1a <hts221_data_rate_set+0x2e>
  {
    reg.odr = (uint8_t)val;
 8002d02:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d06:	6826      	ldr	r6, [r4, #0]
 8002d08:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 8002d0a:	f365 0301 	bfi	r3, r5, #0, #2
 8002d0e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d12:	aa01      	add	r2, sp, #4
 8002d14:	2301      	movs	r3, #1
 8002d16:	2120      	movs	r1, #32
 8002d18:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	bf00      	nop

08002d20 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	4604      	mov	r4, r0
 8002d24:	b082      	sub	sp, #8
 8002d26:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d28:	6880      	ldr	r0, [r0, #8]
 8002d2a:	6866      	ldr	r6, [r4, #4]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	aa01      	add	r2, sp, #4
 8002d30:	2120      	movs	r1, #32
 8002d32:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0)
 8002d34:	b958      	cbnz	r0, 8002d4e <hts221_block_data_update_set+0x2e>
  {
    reg.bdu = val;
 8002d36:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d3a:	6826      	ldr	r6, [r4, #0]
 8002d3c:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8002d3e:	f365 0382 	bfi	r3, r5, #2, #1
 8002d42:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d46:	aa01      	add	r2, sp, #4
 8002d48:	2301      	movs	r3, #1
 8002d4a:	2120      	movs	r1, #32
 8002d4c:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
 8002d52:	bf00      	nop

08002d54 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d54:	b530      	push	{r4, r5, lr}
 8002d56:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d58:	aa01      	add	r2, sp, #4
{
 8002d5a:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d5c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002d60:	2302      	movs	r3, #2
 8002d62:	2128      	movs	r1, #40	; 0x28
 8002d64:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) + (int16_t)buff[0];
 8002d66:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002d6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d6e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d72:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8002d74:	b003      	add	sp, #12
 8002d76:	bd30      	pop	{r4, r5, pc}

08002d78 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d78:	b530      	push	{r4, r5, lr}
 8002d7a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d7c:	aa01      	add	r2, sp, #4
{
 8002d7e:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d80:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002d84:	2302      	movs	r3, #2
 8002d86:	212a      	movs	r1, #42	; 0x2a
 8002d88:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) + (int16_t)buff[0];
 8002d8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002d8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d96:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bd30      	pop	{r4, r5, pc}

08002d9c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002d9c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d9e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8002da2:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002da4:	46a4      	mov	ip, r4
 8002da6:	2301      	movs	r3, #1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);

  return ret;
}
 8002da8:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002dac:	210f      	movs	r1, #15
 8002dae:	4760      	bx	ip

08002db0 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	4604      	mov	r4, r0
 8002db4:	b082      	sub	sp, #8
 8002db6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002db8:	6880      	ldr	r0, [r0, #8]
 8002dba:	6866      	ldr	r6, [r4, #4]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	aa01      	add	r2, sp, #4
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0)
 8002dc4:	b958      	cbnz	r0, 8002dde <hts221_power_on_set+0x2e>
  {
    reg.pd = val;
 8002dc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002dca:	6826      	ldr	r6, [r4, #0]
 8002dcc:	68a0      	ldr	r0, [r4, #8]
    reg.pd = val;
 8002dce:	f365 13c7 	bfi	r3, r5, #7, #1
 8002dd2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002dd6:	aa01      	add	r2, sp, #4
 8002dd8:	2301      	movs	r3, #1
 8002dda:	2120      	movs	r1, #32
 8002ddc:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002dde:	b002      	add	sp, #8
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	bf00      	nop

08002de4 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8002de4:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002de6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8002dea:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002dec:	46a4      	mov	ip, r4
 8002dee:	2301      	movs	r3, #1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);

  return ret;
}
 8002df0:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002df4:	2127      	movs	r1, #39	; 0x27
 8002df6:	4760      	bx	ip

08002df8 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002df8:	b530      	push	{r4, r5, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002dfe:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002e02:	2301      	movs	r3, #1
 8002e04:	f10d 0207 	add.w	r2, sp, #7
 8002e08:	2130      	movs	r1, #48	; 0x30
 8002e0a:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 8002e0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8002e18:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002e1c:	b003      	add	sp, #12
 8002e1e:	bd30      	pop	{r4, r5, pc}

08002e20 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002e20:	b530      	push	{r4, r5, lr}
 8002e22:	b083      	sub	sp, #12
 8002e24:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e26:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f10d 0207 	add.w	r2, sp, #7
 8002e30:	2131      	movs	r1, #49	; 0x31
 8002e32:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 8002e34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8002e40:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002e44:	b003      	add	sp, #12
 8002e46:	bd30      	pop	{r4, r5, pc}

08002e48 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e50:	6880      	ldr	r0, [r0, #8]
 8002e52:	6866      	ldr	r6, [r4, #4]
 8002e54:	2301      	movs	r3, #1
 8002e56:	f10d 0207 	add.w	r2, sp, #7
 8002e5a:	2132      	movs	r1, #50	; 0x32
 8002e5c:	47b0      	blx	r6
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);

  if (ret == 0)
 8002e5e:	b998      	cbnz	r0, 8002e88 <hts221_temp_deg_point_0_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e60:	2301      	movs	r3, #1
 8002e62:	aa01      	add	r2, sp, #4
 8002e64:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8002e68:	2135      	movs	r1, #53	; 0x35
 8002e6a:	47b0      	blx	r6
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t0_msb;
 8002e6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e74:	f002 0203 	and.w	r2, r2, #3
 8002e78:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8002e84:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}

08002e8c <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4604      	mov	r4, r0
 8002e90:	b082      	sub	sp, #8
 8002e92:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e94:	6880      	ldr	r0, [r0, #8]
 8002e96:	6866      	ldr	r6, [r4, #4]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f10d 0207 	add.w	r2, sp, #7
 8002e9e:	2133      	movs	r1, #51	; 0x33
 8002ea0:	47b0      	blx	r6
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);

  if (ret == 0)
 8002ea2:	b998      	cbnz	r0, 8002ecc <hts221_temp_deg_point_1_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	aa01      	add	r2, sp, #4
 8002ea8:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8002eac:	2135      	movs	r1, #53	; 0x35
 8002eae:	47b0      	blx	r6
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t1_msb;
 8002eb0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002eb8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002ebc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8002ec8:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd70      	pop	{r4, r5, r6, pc}

08002ed0 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ed0:	b530      	push	{r4, r5, lr}
 8002ed2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ed4:	aa01      	add	r2, sp, #4
{
 8002ed6:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ed8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002edc:	2302      	movs	r3, #2
 8002ede:	2136      	movs	r1, #54	; 0x36
 8002ee0:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002ee2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002ee6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002eea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef8:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002efc:	b003      	add	sp, #12
 8002efe:	bd30      	pop	{r4, r5, pc}

08002f00 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002f00:	b530      	push	{r4, r5, lr}
 8002f02:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f04:	aa01      	add	r2, sp, #4
{
 8002f06:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f08:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	213a      	movs	r1, #58	; 0x3a
 8002f10:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002f12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002f16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f28:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002f2c:	b003      	add	sp, #12
 8002f2e:	bd30      	pop	{r4, r5, pc}

08002f30 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002f30:	b530      	push	{r4, r5, lr}
 8002f32:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f34:	aa01      	add	r2, sp, #4
{
 8002f36:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f38:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	213c      	movs	r1, #60	; 0x3c
 8002f40:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002f42:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002f46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f58:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002f5c:	b003      	add	sp, #12
 8002f5e:	bd30      	pop	{r4, r5, pc}

08002f60 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002f60:	b530      	push	{r4, r5, lr}
 8002f62:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f64:	aa01      	add	r2, sp, #4
{
 8002f66:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f68:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	213e      	movs	r1, #62	; 0x3e
 8002f70:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002f72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002f76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f88:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002f8c:	b003      	add	sp, #12
 8002f8e:	bd30      	pop	{r4, r5, pc}

08002f90 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8002f90:	ee00 0a10 	vmov	s0, r0
  return ((float_t)lsb / 1048576.0f);
}
 8002f94:	eeba 0ac6 	vcvt.f32.s32	s0, s0, #20
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002fa4:	6880      	ldr	r0, [r0, #8]
 8002fa6:	6866      	ldr	r6, [r4, #4]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	aa01      	add	r2, sp, #4
 8002fac:	2110      	movs	r1, #16
 8002fae:	47b0      	blx	r6
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8002fb0:	b958      	cbnz	r0, 8002fca <lps22hb_low_pass_filter_mode_set+0x2e>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8002fb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002fb6:	6826      	ldr	r6, [r4, #0]
 8002fb8:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.lpfp = (uint8_t)val;
 8002fba:	f365 0383 	bfi	r3, r5, #2, #2
 8002fbe:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002fc2:	aa01      	add	r2, sp, #4
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	2110      	movs	r1, #16
 8002fc8:	47b0      	blx	r6
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
}
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	bf00      	nop

08002fd0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002fd8:	6880      	ldr	r0, [r0, #8]
 8002fda:	6866      	ldr	r6, [r4, #4]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	aa01      	add	r2, sp, #4
 8002fe0:	2110      	movs	r1, #16
 8002fe2:	47b0      	blx	r6
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8002fe4:	b958      	cbnz	r0, 8002ffe <lps22hb_data_rate_set+0x2e>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8002fe6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002fea:	6826      	ldr	r6, [r4, #0]
 8002fec:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
 8002fee:	f365 1306 	bfi	r3, r5, #4, #3
 8002ff2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ff6:	aa01      	add	r2, sp, #4
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	2110      	movs	r1, #16
 8002ffc:	47b0      	blx	r6
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
}
 8002ffe:	b002      	add	sp, #8
 8003000:	bd70      	pop	{r4, r5, r6, pc}
 8003002:	bf00      	nop

08003004 <lps22hb_press_data_ready_get>:
  * @param  val    Change the values of p_da in reg STATUS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_press_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003004:	b530      	push	{r4, r5, lr}
 8003006:	b083      	sub	sp, #12
 8003008:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800300a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800300e:	2301      	movs	r3, #1
 8003010:	aa01      	add	r2, sp, #4
 8003012:	2127      	movs	r1, #39	; 0x27
 8003014:	47a8      	blx	r5
  lps22hb_status_t status;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t *)&status, 1);
  *val = status.p_da;
 8003016:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800301a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800301e:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8003020:	b003      	add	sp, #12
 8003022:	bd30      	pop	{r4, r5, pc}

08003024 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003024:	b530      	push	{r4, r5, lr}
 8003026:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003028:	aa01      	add	r2, sp, #4
{
 800302a:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800302c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003030:	2303      	movs	r3, #3
 8003032:	2128      	movs	r1, #40	; 0x28
 8003034:	47a8      	blx	r5
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
  *buff = reg[2];
 8003036:	f89d 1006 	ldrb.w	r1, [sp, #6]
  *buff = (*buff * 256) + reg[1];
 800303a:	f89d 2005 	ldrb.w	r2, [sp, #5]
  *buff = (*buff * 256) + reg[0];
 800303e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  *buff = (*buff * 256) + reg[1];
 8003042:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  *buff = (*buff * 256) + reg[0];
 8003046:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *buff *= 256;
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	6023      	str	r3, [r4, #0]

  return ret;
}
 800304e:	b003      	add	sp, #12
 8003050:	bd30      	pop	{r4, r5, pc}
 8003052:	bf00      	nop

08003054 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003054:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003056:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800305a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800305c:	46a4      	mov	ip, r4
 800305e:	2301      	movs	r3, #1
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);

  return ret;
}
 8003060:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003064:	210f      	movs	r1, #15
 8003066:	4760      	bx	ip

08003068 <lps22hb_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	4604      	mov	r4, r0
 800306c:	b082      	sub	sp, #8
 800306e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003070:	6880      	ldr	r0, [r0, #8]
 8003072:	6866      	ldr	r6, [r4, #4]
 8003074:	2301      	movs	r3, #1
 8003076:	aa01      	add	r2, sp, #4
 8003078:	2111      	movs	r1, #17
 800307a:	47b0      	blx	r6
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 800307c:	b958      	cbnz	r0, 8003096 <lps22hb_reset_set+0x2e>
  {
    ctrl_reg2.swreset = val;
 800307e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003082:	6826      	ldr	r6, [r4, #0]
 8003084:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.swreset = val;
 8003086:	f365 0382 	bfi	r3, r5, #2, #1
 800308a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800308e:	aa01      	add	r2, sp, #4
 8003090:	2301      	movs	r3, #1
 8003092:	2111      	movs	r1, #17
 8003094:	47b0      	blx	r6
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
}
 8003096:	b002      	add	sp, #8
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	bf00      	nop

0800309c <lps22hb_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800309c:	b530      	push	{r4, r5, lr}
 800309e:	b083      	sub	sp, #12
 80030a0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030a2:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80030a6:	2301      	movs	r3, #1
 80030a8:	aa01      	add	r2, sp, #4
 80030aa:	2111      	movs	r1, #17
 80030ac:	47a8      	blx	r5
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
  *val = ctrl_reg2.swreset;
 80030ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80030b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80030b6:	7023      	strb	r3, [r4, #0]

  return ret;
}
 80030b8:	b003      	add	sp, #12
 80030ba:	bd30      	pop	{r4, r5, pc}

080030bc <lsm303agr_from_lsb_to_mgauss>:
  return (((float_t)lsb / 256.0f) * 1.0f) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
  return (float_t)lsb * 1.5f;
 80030bc:	ee07 0a90 	vmov	s15, r0
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
}
 80030c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop

080030d0 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4604      	mov	r4, r0
 80030d4:	b082      	sub	sp, #8
 80030d6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030d8:	6880      	ldr	r0, [r0, #8]
 80030da:	6866      	ldr	r6, [r4, #4]
 80030dc:	2301      	movs	r3, #1
 80030de:	aa01      	add	r2, sp, #4
 80030e0:	2160      	movs	r1, #96	; 0x60
 80030e2:	47b0      	blx	r6
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80030e4:	b958      	cbnz	r0, 80030fe <lsm303agr_mag_operating_mode_set+0x2e>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 80030e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80030ea:	6826      	ldr	r6, [r4, #0]
 80030ec:	68a0      	ldr	r0, [r4, #8]
    cfg_reg_a_m.md = (uint8_t)val;
 80030ee:	f365 0301 	bfi	r3, r5, #0, #2
 80030f2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80030f6:	aa01      	add	r2, sp, #4
 80030f8:	2301      	movs	r3, #1
 80030fa:	2160      	movs	r1, #96	; 0x60
 80030fc:	47b0      	blx	r6
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
}
 80030fe:	b002      	add	sp, #8
 8003100:	bd70      	pop	{r4, r5, r6, pc}
 8003102:	bf00      	nop

08003104 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	4604      	mov	r4, r0
 8003108:	b082      	sub	sp, #8
 800310a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800310c:	6880      	ldr	r0, [r0, #8]
 800310e:	6866      	ldr	r6, [r4, #4]
 8003110:	2301      	movs	r3, #1
 8003112:	aa01      	add	r2, sp, #4
 8003114:	2160      	movs	r1, #96	; 0x60
 8003116:	47b0      	blx	r6
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8003118:	b958      	cbnz	r0, 8003132 <lsm303agr_mag_data_rate_set+0x2e>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 800311a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800311e:	6826      	ldr	r6, [r4, #0]
 8003120:	68a0      	ldr	r0, [r4, #8]
    cfg_reg_a_m.odr = (uint8_t)val;
 8003122:	f365 0383 	bfi	r3, r5, #2, #2
 8003126:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800312a:	aa01      	add	r2, sp, #4
 800312c:	2301      	movs	r3, #1
 800312e:	2160      	movs	r1, #96	; 0x60
 8003130:	47b0      	blx	r6
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
}
 8003132:	b002      	add	sp, #8
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	bf00      	nop

08003138 <lsm303agr_mag_offset_temp_comp_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_offset_temp_comp_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	4604      	mov	r4, r0
 800313c:	b082      	sub	sp, #8
 800313e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003140:	6880      	ldr	r0, [r0, #8]
 8003142:	6866      	ldr	r6, [r4, #4]
 8003144:	2301      	movs	r3, #1
 8003146:	aa01      	add	r2, sp, #4
 8003148:	2160      	movs	r1, #96	; 0x60
 800314a:	47b0      	blx	r6
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800314c:	b958      	cbnz	r0, 8003166 <lsm303agr_mag_offset_temp_comp_set+0x2e>
  {
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 800314e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003152:	6826      	ldr	r6, [r4, #0]
 8003154:	68a0      	ldr	r0, [r4, #8]
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 8003156:	f365 13c7 	bfi	r3, r5, #7, #1
 800315a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800315e:	aa01      	add	r2, sp, #4
 8003160:	2301      	movs	r3, #1
 8003162:	2160      	movs	r1, #96	; 0x60
 8003164:	47b0      	blx	r6
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
}
 8003166:	b002      	add	sp, #8
 8003168:	bd70      	pop	{r4, r5, r6, pc}
 800316a:	bf00      	nop

0800316c <lsm303agr_mag_set_rst_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_set_rst_mode_set(stmdev_ctx_t *ctx,
                                       lsm303agr_set_rst_m_t val)
{
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	b082      	sub	sp, #8
 8003172:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003174:	6880      	ldr	r0, [r0, #8]
 8003176:	6866      	ldr	r6, [r4, #4]
 8003178:	2301      	movs	r3, #1
 800317a:	aa01      	add	r2, sp, #4
 800317c:	2161      	movs	r1, #97	; 0x61
 800317e:	47b0      	blx	r6
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
                           (uint8_t *)&cfg_reg_b_m, 1);

  if (ret == 0)
 8003180:	b958      	cbnz	r0, 800319a <lsm303agr_mag_set_rst_mode_set+0x2e>
  {
    cfg_reg_b_m.set_rst = (uint8_t)val;
 8003182:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003186:	6826      	ldr	r6, [r4, #0]
 8003188:	68a0      	ldr	r0, [r4, #8]
    cfg_reg_b_m.set_rst = (uint8_t)val;
 800318a:	f365 0342 	bfi	r3, r5, #1, #2
 800318e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003192:	aa01      	add	r2, sp, #4
 8003194:	2301      	movs	r3, #1
 8003196:	2161      	movs	r1, #97	; 0x61
 8003198:	47b0      	blx	r6
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
                              (uint8_t *)&cfg_reg_b_m, 1);
  }

  return ret;
}
 800319a:	b002      	add	sp, #8
 800319c:	bd70      	pop	{r4, r5, r6, pc}
 800319e:	bf00      	nop

080031a0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4604      	mov	r4, r0
 80031a4:	b082      	sub	sp, #8
 80031a6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031a8:	6880      	ldr	r0, [r0, #8]
 80031aa:	6866      	ldr	r6, [r4, #4]
 80031ac:	2301      	movs	r3, #1
 80031ae:	aa01      	add	r2, sp, #4
 80031b0:	2162      	movs	r1, #98	; 0x62
 80031b2:	47b0      	blx	r6
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80031b4:	b958      	cbnz	r0, 80031ce <lsm303agr_mag_block_data_update_set+0x2e>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80031b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80031ba:	6826      	ldr	r6, [r4, #0]
 80031bc:	68a0      	ldr	r0, [r4, #8]
    cfg_reg_c_m.bdu = (uint8_t)val;
 80031be:	f365 1304 	bfi	r3, r5, #4, #1
 80031c2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80031c6:	aa01      	add	r2, sp, #4
 80031c8:	2301      	movs	r3, #1
 80031ca:	2162      	movs	r1, #98	; 0x62
 80031cc:	47b0      	blx	r6
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
}
 80031ce:	b002      	add	sp, #8
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	bf00      	nop

080031d4 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80031d4:	b530      	push	{r4, r5, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031da:	466a      	mov	r2, sp
 80031dc:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80031e0:	2306      	movs	r3, #6
 80031e2:	2168      	movs	r1, #104	; 0x68
 80031e4:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80031e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80031ea:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80031ee:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80031f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80031f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031fa:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80031fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003200:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003204:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003208:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800320c:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800320e:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003210:	b003      	add	sp, #12
 8003212:	bd30      	pop	{r4, r5, pc}

08003214 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003214:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003216:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800321a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800321c:	46a4      	mov	ip, r4
 800321e:	2301      	movs	r3, #1
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);

  return ret;
}
 8003220:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003224:	214f      	movs	r1, #79	; 0x4f
 8003226:	4760      	bx	ip

08003228 <lsm303agr_mag_reset_set>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4604      	mov	r4, r0
 800322c:	b082      	sub	sp, #8
 800322e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003230:	6880      	ldr	r0, [r0, #8]
 8003232:	6866      	ldr	r6, [r4, #4]
 8003234:	2301      	movs	r3, #1
 8003236:	aa01      	add	r2, sp, #4
 8003238:	2160      	movs	r1, #96	; 0x60
 800323a:	47b0      	blx	r6
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800323c:	b958      	cbnz	r0, 8003256 <lsm303agr_mag_reset_set+0x2e>
  {
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 800323e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003242:	6826      	ldr	r6, [r4, #0]
 8003244:	68a0      	ldr	r0, [r4, #8]
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 8003246:	f365 1345 	bfi	r3, r5, #5, #1
 800324a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800324e:	aa01      	add	r2, sp, #4
 8003250:	2301      	movs	r3, #1
 8003252:	2160      	movs	r1, #96	; 0x60
 8003254:	47b0      	blx	r6
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
}
 8003256:	b002      	add	sp, #8
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	bf00      	nop

0800325c <lsm303agr_mag_reset_get>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800325c:	b530      	push	{r4, r5, lr}
 800325e:	b083      	sub	sp, #12
 8003260:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003262:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003266:	2301      	movs	r3, #1
 8003268:	aa01      	add	r2, sp, #4
 800326a:	2160      	movs	r1, #96	; 0x60
 800326c:	47a8      	blx	r5
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
                           (uint8_t *)&cfg_reg_a_m, 1);
  *val = cfg_reg_a_m.soft_rst;
 800326e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003272:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003276:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8003278:	b003      	add	sp, #12
 800327a:	bd30      	pop	{r4, r5, pc}

0800327c <lsm303agr_mag_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_status_get(stmdev_ctx_t *ctx,
                                 lsm303agr_status_reg_m_t *val)
{
 800327c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800327e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8003282:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003284:	46a4      	mov	ip, r4
 8003286:	2301      	movs	r3, #1
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M, (uint8_t *) val, 1);

  return ret;
}
 8003288:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800328c:	2167      	movs	r1, #103	; 0x67
 800328e:	4760      	bx	ip

08003290 <lsm6dsl_from_fs2g_to_mg>:
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
  return ((float_t)lsb * 0.061f);
 8003290:	ee07 0a90 	vmov	s15, r0
 8003294:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80032a4 <lsm6dsl_from_fs2g_to_mg+0x14>
 8003298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800329c:	ee27 0a80 	vmul.f32	s0, s15, s0
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	3d79db23 	.word	0x3d79db23

080032a8 <lsm6dsl_from_fs500dps_to_mdps>:
  return ((float_t)lsb * 8.750f);
}

float_t lsm6dsl_from_fs500dps_to_mdps(int16_t lsb)
{
  return ((float_t)lsb * 17.50f);
 80032a8:	ee07 0a90 	vmov	s15, r0
 80032ac:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80032bc <lsm6dsl_from_fs500dps_to_mdps+0x14>
 80032b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80032b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	418c0000 	.word	0x418c0000

080032c0 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4604      	mov	r4, r0
 80032c4:	b082      	sub	sp, #8
 80032c6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032c8:	6880      	ldr	r0, [r0, #8]
 80032ca:	6866      	ldr	r6, [r4, #4]
 80032cc:	2301      	movs	r3, #1
 80032ce:	aa01      	add	r2, sp, #4
 80032d0:	2110      	movs	r1, #16
 80032d2:	47b0      	blx	r6
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80032d4:	b958      	cbnz	r0, 80032ee <lsm6dsl_xl_full_scale_set+0x2e>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80032d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032da:	6826      	ldr	r6, [r4, #0]
 80032dc:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t) val;
 80032de:	f365 0383 	bfi	r3, r5, #2, #2
 80032e2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032e6:	aa01      	add	r2, sp, #4
 80032e8:	2301      	movs	r3, #1
 80032ea:	2110      	movs	r1, #16
 80032ec:	47b0      	blx	r6
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80032ee:	b002      	add	sp, #8
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
 80032f2:	bf00      	nop

080032f4 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	b082      	sub	sp, #8
 80032fa:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032fc:	6880      	ldr	r0, [r0, #8]
 80032fe:	6866      	ldr	r6, [r4, #4]
 8003300:	2301      	movs	r3, #1
 8003302:	aa01      	add	r2, sp, #4
 8003304:	2110      	movs	r1, #16
 8003306:	47b0      	blx	r6
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003308:	b958      	cbnz	r0, 8003322 <lsm6dsl_xl_data_rate_set+0x2e>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800330a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800330e:	6826      	ldr	r6, [r4, #0]
 8003310:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.odr_xl = (uint8_t) val;
 8003312:	f365 1307 	bfi	r3, r5, #4, #4
 8003316:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800331a:	aa01      	add	r2, sp, #4
 800331c:	2301      	movs	r3, #1
 800331e:	2110      	movs	r1, #16
 8003320:	47b0      	blx	r6
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 8003322:	b002      	add	sp, #8
 8003324:	bd70      	pop	{r4, r5, r6, pc}
 8003326:	bf00      	nop

08003328 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4604      	mov	r4, r0
 800332c:	b082      	sub	sp, #8
 800332e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003330:	6880      	ldr	r0, [r0, #8]
 8003332:	6866      	ldr	r6, [r4, #4]
 8003334:	2301      	movs	r3, #1
 8003336:	aa01      	add	r2, sp, #4
 8003338:	2111      	movs	r1, #17
 800333a:	47b0      	blx	r6
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 800333c:	b958      	cbnz	r0, 8003356 <lsm6dsl_gy_full_scale_set+0x2e>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800333e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003342:	6826      	ldr	r6, [r4, #0]
 8003344:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.fs_g = (uint8_t) val;
 8003346:	f365 0343 	bfi	r3, r5, #1, #3
 800334a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800334e:	aa01      	add	r2, sp, #4
 8003350:	2301      	movs	r3, #1
 8003352:	2111      	movs	r1, #17
 8003354:	47b0      	blx	r6
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8003356:	b002      	add	sp, #8
 8003358:	bd70      	pop	{r4, r5, r6, pc}
 800335a:	bf00      	nop

0800335c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4604      	mov	r4, r0
 8003360:	b082      	sub	sp, #8
 8003362:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003364:	6880      	ldr	r0, [r0, #8]
 8003366:	6866      	ldr	r6, [r4, #4]
 8003368:	2301      	movs	r3, #1
 800336a:	aa01      	add	r2, sp, #4
 800336c:	2111      	movs	r1, #17
 800336e:	47b0      	blx	r6
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003370:	b958      	cbnz	r0, 800338a <lsm6dsl_gy_data_rate_set+0x2e>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8003372:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003376:	6826      	ldr	r6, [r4, #0]
 8003378:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.odr_g = (uint8_t) val;
 800337a:	f365 1307 	bfi	r3, r5, #4, #4
 800337e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003382:	aa01      	add	r2, sp, #4
 8003384:	2301      	movs	r3, #1
 8003386:	2111      	movs	r1, #17
 8003388:	47b0      	blx	r6
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 800338a:	b002      	add	sp, #8
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	bf00      	nop

08003390 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	b082      	sub	sp, #8
 8003396:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003398:	6880      	ldr	r0, [r0, #8]
 800339a:	6866      	ldr	r6, [r4, #4]
 800339c:	2301      	movs	r3, #1
 800339e:	aa01      	add	r2, sp, #4
 80033a0:	2112      	movs	r1, #18
 80033a2:	47b0      	blx	r6
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80033a4:	b958      	cbnz	r0, 80033be <lsm6dsl_block_data_update_set+0x2e>
  {
    ctrl3_c.bdu = val;
 80033a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033aa:	6826      	ldr	r6, [r4, #0]
 80033ac:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.bdu = val;
 80033ae:	f365 1386 	bfi	r3, r5, #6, #1
 80033b2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033b6:	aa01      	add	r2, sp, #4
 80033b8:	2301      	movs	r3, #1
 80033ba:	2112      	movs	r1, #18
 80033bc:	47b0      	blx	r6
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80033be:	b002      	add	sp, #8
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
 80033c2:	bf00      	nop

080033c4 <lsm6dsl_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx,
                               lsm6dsl_status_reg_t *val)
{
 80033c4:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033c6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 80033ca:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033cc:	46a4      	mov	ip, r4
 80033ce:	2301      	movs	r3, #1
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t *) val, 1);

  return ret;
}
 80033d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033d4:	211e      	movs	r1, #30
 80033d6:	4760      	bx	ip

080033d8 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80033d8:	b530      	push	{r4, r5, lr}
 80033da:	b083      	sub	sp, #12
 80033dc:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033de:	466a      	mov	r2, sp
 80033e0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80033e4:	2306      	movs	r3, #6
 80033e6:	2122      	movs	r1, #34	; 0x22
 80033e8:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80033ea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80033ee:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80033f2:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80033f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80033fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80033fe:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003400:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003404:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003408:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800340c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003410:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003412:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003414:	b003      	add	sp, #12
 8003416:	bd30      	pop	{r4, r5, pc}

08003418 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003418:	b530      	push	{r4, r5, lr}
 800341a:	b083      	sub	sp, #12
 800341c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800341e:	466a      	mov	r2, sp
 8003420:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003424:	2306      	movs	r3, #6
 8003426:	2128      	movs	r1, #40	; 0x28
 8003428:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800342a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800342e:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003432:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003436:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800343a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800343e:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003440:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003444:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003448:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800344c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003450:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003452:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003454:	b003      	add	sp, #12
 8003456:	bd30      	pop	{r4, r5, pc}

08003458 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003458:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800345a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800345e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003460:	46a4      	mov	ip, r4
 8003462:	2301      	movs	r3, #1
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);

  return ret;
}
 8003464:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003468:	210f      	movs	r1, #15
 800346a:	4760      	bx	ip

0800346c <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4604      	mov	r4, r0
 8003470:	b082      	sub	sp, #8
 8003472:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003474:	6880      	ldr	r0, [r0, #8]
 8003476:	6866      	ldr	r6, [r4, #4]
 8003478:	2301      	movs	r3, #1
 800347a:	aa01      	add	r2, sp, #4
 800347c:	2112      	movs	r1, #18
 800347e:	47b0      	blx	r6
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003480:	b958      	cbnz	r0, 800349a <lsm6dsl_reset_set+0x2e>
  {
    ctrl3_c.sw_reset = val;
 8003482:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003486:	6826      	ldr	r6, [r4, #0]
 8003488:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset = val;
 800348a:	f365 0300 	bfi	r3, r5, #0, #1
 800348e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003492:	aa01      	add	r2, sp, #4
 8003494:	2301      	movs	r3, #1
 8003496:	2112      	movs	r1, #18
 8003498:	47b0      	blx	r6
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 800349a:	b002      	add	sp, #8
 800349c:	bd70      	pop	{r4, r5, r6, pc}
 800349e:	bf00      	nop

080034a0 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80034a0:	b530      	push	{r4, r5, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034a6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80034aa:	2301      	movs	r3, #1
 80034ac:	aa01      	add	r2, sp, #4
 80034ae:	2112      	movs	r1, #18
 80034b0:	47a8      	blx	r5
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 80034b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034ba:	7023      	strb	r3, [r4, #0]

  return ret;
}
 80034bc:	b003      	add	sp, #12
 80034be:	bd30      	pop	{r4, r5, pc}

080034c0 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4604      	mov	r4, r0
 80034c4:	b084      	sub	sp, #16
 80034c6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034c8:	6880      	ldr	r0, [r0, #8]
 80034ca:	6866      	ldr	r6, [r4, #4]
 80034cc:	2301      	movs	r3, #1
 80034ce:	aa03      	add	r2, sp, #12
 80034d0:	2116      	movs	r1, #22
 80034d2:	47b0      	blx	r6
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d13a      	bne.n	800354e <lsm6dsl_gy_band_pass_set+0x8e>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80034d8:	f89d 100c 	ldrb.w	r1, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034dc:	68a0      	ldr	r0, [r4, #8]
 80034de:	6826      	ldr	r6, [r4, #0]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80034e0:	09ea      	lsrs	r2, r5, #7
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80034e2:	f005 0330 	and.w	r3, r5, #48	; 0x30
 80034e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80034ea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80034ee:	430b      	orrs	r3, r1
 80034f0:	f88d 300c 	strb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034f4:	aa03      	add	r2, sp, #12
 80034f6:	2301      	movs	r3, #1
 80034f8:	2116      	movs	r1, #22
 80034fa:	47b0      	blx	r6
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);

    if (ret == 0)
 80034fc:	bb38      	cbnz	r0, 800354e <lsm6dsl_gy_band_pass_set+0x8e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034fe:	68a0      	ldr	r0, [r4, #8]
 8003500:	6866      	ldr	r6, [r4, #4]
 8003502:	2301      	movs	r3, #1
 8003504:	aa02      	add	r2, sp, #8
 8003506:	2115      	movs	r1, #21
 8003508:	47b0      	blx	r6
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);

      if (ret == 0)
 800350a:	bb00      	cbnz	r0, 800354e <lsm6dsl_gy_band_pass_set+0x8e>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800350c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003510:	68a0      	ldr	r0, [r4, #8]
 8003512:	6826      	ldr	r6, [r4, #0]
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8003514:	f365 0301 	bfi	r3, r5, #0, #2
 8003518:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800351c:	aa02      	add	r2, sp, #8
 800351e:	2301      	movs	r3, #1
 8003520:	2115      	movs	r1, #21
 8003522:	47b0      	blx	r6
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 8003524:	b998      	cbnz	r0, 800354e <lsm6dsl_gy_band_pass_set+0x8e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003526:	68a0      	ldr	r0, [r4, #8]
 8003528:	6866      	ldr	r6, [r4, #4]
 800352a:	2301      	movs	r3, #1
 800352c:	aa01      	add	r2, sp, #4
 800352e:	2113      	movs	r1, #19
 8003530:	47b0      	blx	r6
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8003532:	b960      	cbnz	r0, 800354e <lsm6dsl_gy_band_pass_set+0x8e>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8003534:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003538:	68a0      	ldr	r0, [r4, #8]
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 800353a:	08ed      	lsrs	r5, r5, #3
 800353c:	f365 0341 	bfi	r3, r5, #1, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003540:	aa01      	add	r2, sp, #4
 8003542:	6825      	ldr	r5, [r4, #0]
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8003544:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003548:	2113      	movs	r1, #19
 800354a:	2301      	movs	r3, #1
 800354c:	47a8      	blx	r5
      }
    }
  }

  return ret;
}
 800354e:	b004      	add	sp, #16
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	bf00      	nop

08003554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003554:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_InitTick+0x40>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b90b      	cbnz	r3, 8003560 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800355c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800355e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003560:	490d      	ldr	r1, [pc, #52]	; (8003598 <HAL_InitTick+0x44>)
 8003562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003566:	4605      	mov	r5, r0
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	6808      	ldr	r0, [r1, #0]
 800356e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003572:	f000 fc07 	bl	8003d84 <HAL_SYSTICK_Config>
 8003576:	4604      	mov	r4, r0
 8003578:	2800      	cmp	r0, #0
 800357a:	d1ef      	bne.n	800355c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800357c:	2d0f      	cmp	r5, #15
 800357e:	d8ed      	bhi.n	800355c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003580:	4602      	mov	r2, r0
 8003582:	4629      	mov	r1, r5
 8003584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003588:	f000 fbb0 	bl	8003cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_InitTick+0x48>)
 800358e:	4620      	mov	r0, r4
 8003590:	601d      	str	r5, [r3, #0]
}
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	20000014 	.word	0x20000014
 8003598:	20000000 	.word	0x20000000
 800359c:	20000018 	.word	0x20000018

080035a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <HAL_Init+0x2c>)
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80035a8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ae:	f000 fb8b 	bl	8003cc8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7ff ffce 	bl	8003554 <HAL_InitTick>
 80035b8:	b110      	cbz	r0, 80035c0 <HAL_Init+0x20>
    status = HAL_ERROR;
 80035ba:	2401      	movs	r4, #1
}
 80035bc:	4620      	mov	r0, r4
 80035be:	bd10      	pop	{r4, pc}
 80035c0:	4604      	mov	r4, r0
    HAL_MspInit();
 80035c2:	f7fe fe5f 	bl	8002284 <HAL_MspInit>
}
 80035c6:	4620      	mov	r0, r4
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	40022000 	.word	0x40022000

080035d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80035d0:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <HAL_IncTick+0x10>)
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <HAL_IncTick+0x14>)
 80035d4:	6811      	ldr	r1, [r2, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	440b      	add	r3, r1
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000748 	.word	0x20000748
 80035e4:	20000014 	.word	0x20000014

080035e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035e8:	4b01      	ldr	r3, [pc, #4]	; (80035f0 <HAL_GetTick+0x8>)
 80035ea:	6818      	ldr	r0, [r3, #0]
}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000748 	.word	0x20000748

080035f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7ff fff6 	bl	80035e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80035fe:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003600:	d002      	beq.n	8003608 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_Delay+0x20>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003608:	f7ff ffee 	bl	80035e8 <HAL_GetTick>
 800360c:	1b43      	subs	r3, r0, r5
 800360e:	42a3      	cmp	r3, r4
 8003610:	d3fa      	bcc.n	8003608 <HAL_Delay+0x14>
  {
  }
}
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	20000014 	.word	0x20000014

08003618 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003618:	2800      	cmp	r0, #0
 800361a:	d07b      	beq.n	8003714 <HAL_CAN_Init+0xfc>
{
 800361c:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800361e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003622:	4604      	mov	r4, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d072      	beq.n	800370e <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	f023 0302 	bic.w	r3, r3, #2
 8003630:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003632:	f7ff ffd9 	bl	80035e8 <HAL_GetTick>
 8003636:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003638:	e004      	b.n	8003644 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800363a:	f7ff ffd5 	bl	80035e8 <HAL_GetTick>
 800363e:	1b43      	subs	r3, r0, r5
 8003640:	2b0a      	cmp	r3, #10
 8003642:	d85b      	bhi.n	80036fc <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	0791      	lsls	r1, r2, #30
 800364a:	d4f6      	bmi.n	800363a <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003654:	f7ff ffc8 	bl	80035e8 <HAL_GetTick>
 8003658:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800365a:	e004      	b.n	8003666 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800365c:	f7ff ffc4 	bl	80035e8 <HAL_GetTick>
 8003660:	1b40      	subs	r0, r0, r5
 8003662:	280a      	cmp	r0, #10
 8003664:	d84a      	bhi.n	80036fc <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	07d2      	lsls	r2, r2, #31
 800366c:	d5f6      	bpl.n	800365c <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800366e:	7e22      	ldrb	r2, [r4, #24]
 8003670:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	bf0c      	ite	eq
 8003676:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800367a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003680:	7e62      	ldrb	r2, [r4, #25]
 8003682:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	bf0c      	ite	eq
 8003688:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800368c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003692:	7ea2      	ldrb	r2, [r4, #26]
 8003694:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	bf0c      	ite	eq
 800369a:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800369e:	f022 0220 	bicne.w	r2, r2, #32
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036a4:	7ee2      	ldrb	r2, [r4, #27]
 80036a6:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	bf0c      	ite	eq
 80036ac:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036b0:	f042 0210 	orrne.w	r2, r2, #16
 80036b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036b6:	7f22      	ldrb	r2, [r4, #28]
 80036b8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	bf0c      	ite	eq
 80036be:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036c2:	f022 0208 	bicne.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036c8:	7f62      	ldrb	r2, [r4, #29]
 80036ca:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	bf0c      	ite	eq
 80036d0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036d4:	f022 0204 	bicne.w	r2, r2, #4
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036da:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80036de:	6921      	ldr	r1, [r4, #16]
 80036e0:	4302      	orrs	r2, r0
 80036e2:	430a      	orrs	r2, r1
 80036e4:	6960      	ldr	r0, [r4, #20]
 80036e6:	6861      	ldr	r1, [r4, #4]
 80036e8:	4302      	orrs	r2, r0
 80036ea:	3901      	subs	r1, #1
 80036ec:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036ee:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036f0:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036f2:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036f4:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80036f6:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80036fe:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003706:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 800370a:	2001      	movs	r0, #1
}
 800370c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800370e:	f7fe ff7f 	bl	8002610 <HAL_CAN_MspInit>
 8003712:	e789      	b.n	8003628 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8003714:	2001      	movs	r0, #1
}
 8003716:	4770      	bx	lr

08003718 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003718:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800371c:	3a01      	subs	r2, #1
 800371e:	2a01      	cmp	r2, #1
{
 8003720:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003722:	d905      	bls.n	8003730 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003724:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003726:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800372a:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800372e:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 8003730:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003732:	6948      	ldr	r0, [r1, #20]
{
 8003734:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003736:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800373a:	f044 0401 	orr.w	r4, r4, #1
 800373e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003742:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003746:	2501      	movs	r5, #1
 8003748:	f000 021f 	and.w	r2, r0, #31
 800374c:	fa05 f202 	lsl.w	r2, r5, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003750:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003752:	ea24 0402 	bic.w	r4, r4, r2
 8003756:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
 800375a:	43d4      	mvns	r4, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800375c:	2d00      	cmp	r5, #0
 800375e:	d13d      	bne.n	80037dc <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003760:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003764:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003766:	4025      	ands	r5, r4
 8003768:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800376c:	888d      	ldrh	r5, [r1, #4]
 800376e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003772:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003776:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800377a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800377c:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800377e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003782:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003786:	6988      	ldr	r0, [r1, #24]
 8003788:	bb10      	cbnz	r0, 80037d0 <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800378a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800378e:	4020      	ands	r0, r4
 8003790:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003794:	6908      	ldr	r0, [r1, #16]
 8003796:	b9a8      	cbnz	r0, 80037c4 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003798:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800379c:	4004      	ands	r4, r0
 800379e:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80037a2:	6a09      	ldr	r1, [r1, #32]
 80037a4:	2901      	cmp	r1, #1
 80037a6:	d104      	bne.n	80037b2 <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80037a8:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80037ac:	430a      	orrs	r2, r1
 80037ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80037b6:	f022 0201 	bic.w	r2, r2, #1
    return HAL_OK;
 80037ba:	2000      	movs	r0, #0
}
 80037bc:	bc70      	pop	{r4, r5, r6}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80037c2:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80037c4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80037c8:	4310      	orrs	r0, r2
 80037ca:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 80037ce:	e7e8      	b.n	80037a2 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037d0:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80037d4:	4310      	orrs	r0, r2
 80037d6:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 80037da:	e7db      	b.n	8003794 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037dc:	2d01      	cmp	r5, #1
 80037de:	d1d2      	bne.n	8003786 <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037e0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037e4:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037e6:	4315      	orrs	r5, r2
 80037e8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037ec:	888d      	ldrh	r5, [r1, #4]
 80037ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037f2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037f6:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037fa:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037fc:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037fe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003802:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
 8003806:	e7be      	b.n	8003786 <HAL_CAN_ConfigFilter+0x6e>

08003808 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003808:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800380a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800380e:	2b01      	cmp	r3, #1
{
 8003810:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8003812:	d006      	beq.n	8003822 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003814:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003816:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800381c:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 800381e:	4630      	mov	r0, r6
 8003820:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003822:	6802      	ldr	r2, [r0, #0]
 8003824:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003826:	2302      	movs	r3, #2
 8003828:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003834:	f7ff fed8 	bl	80035e8 <HAL_GetTick>
 8003838:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800383a:	e004      	b.n	8003846 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800383c:	f7ff fed4 	bl	80035e8 <HAL_GetTick>
 8003840:	1b43      	subs	r3, r0, r5
 8003842:	2b0a      	cmp	r3, #10
 8003844:	d808      	bhi.n	8003858 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f013 0301 	ands.w	r3, r3, #1
 800384e:	d1f5      	bne.n	800383c <HAL_CAN_Start+0x34>
    return HAL_OK;
 8003850:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003852:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003854:	4630      	mov	r0, r6
 8003856:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003858:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800385a:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800385c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003860:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003862:	f884 2020 	strb.w	r2, [r4, #32]
}
 8003866:	4630      	mov	r0, r6
 8003868:	bd70      	pop	{r4, r5, r6, pc}
 800386a:	bf00      	nop

0800386c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800386c:	b430      	push	{r4, r5}
 800386e:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003870:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003874:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003878:	3801      	subs	r0, #1
 800387a:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800387c:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800387e:	d835      	bhi.n	80038ec <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003880:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8003884:	d03b      	beq.n	80038fe <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003886:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800388a:	2c03      	cmp	r4, #3
 800388c:	d049      	beq.n	8003922 <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800388e:	2001      	movs	r0, #1
 8003890:	40a0      	lsls	r0, r4
 8003892:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003894:	688b      	ldr	r3, [r1, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03a      	beq.n	8003910 <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 800389a:	68c8      	ldr	r0, [r1, #12]
 800389c:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800389e:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80038a0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038a4:	f104 0018 	add.w	r0, r4, #24
 80038a8:	0100      	lsls	r0, r0, #4
 80038aa:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038ac:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 80038b0:	690b      	ldr	r3, [r1, #16]
 80038b2:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038b6:	7d09      	ldrb	r1, [r1, #20]
 80038b8:	2901      	cmp	r1, #1
 80038ba:	ea4f 1304 	mov.w	r3, r4, lsl #4
 80038be:	d105      	bne.n	80038cc <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038c0:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 80038c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80038c8:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038cc:	442b      	add	r3, r5
 80038ce:	6851      	ldr	r1, [r2, #4]
 80038d0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80038da:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 80038de:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 80038e2:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80038e4:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80038e6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 80038ea:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038ec:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80038f4:	2001      	movs	r0, #1
}
 80038f6:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038f8:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80038fc:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038fe:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 8003906:	2001      	movs	r0, #1
}
 8003908:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800390a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800390e:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003910:	68cb      	ldr	r3, [r1, #12]
 8003912:	6808      	ldr	r0, [r1, #0]
 8003914:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8003918:	f104 0318 	add.w	r3, r4, #24
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	50e8      	str	r0, [r5, r3]
 8003920:	e7c4      	b.n	80038ac <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003922:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 800392a:	2001      	movs	r0, #1
}
 800392c:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800392e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003932:	4770      	bx	lr

08003934 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003934:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8003936:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800393a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800393e:	f1be 0f01 	cmp.w	lr, #1
{
 8003942:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003944:	d86d      	bhi.n	8003a22 <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003946:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003948:	b951      	cbnz	r1, 8003960 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800394a:	68c4      	ldr	r4, [r0, #12]
 800394c:	07a5      	lsls	r5, r4, #30
 800394e:	d10a      	bne.n	8003966 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003950:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 8003958:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800395a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800395e:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003960:	6904      	ldr	r4, [r0, #16]
 8003962:	07a4      	lsls	r4, r4, #30
 8003964:	d0f4      	beq.n	8003950 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003966:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 800396a:	010c      	lsls	r4, r1, #4
 800396c:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003970:	f005 0504 	and.w	r5, r5, #4
 8003974:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003976:	2d00      	cmp	r5, #0
 8003978:	d05a      	beq.n	8003a30 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800397a:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800397e:	08ed      	lsrs	r5, r5, #3
 8003980:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003982:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003986:	f005 0502 	and.w	r5, r5, #2
 800398a:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800398c:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003990:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003994:	f005 050f 	and.w	r5, r5, #15
 8003998:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800399a:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800399c:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80039a0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80039a4:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80039a6:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80039a8:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80039ac:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80039ae:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80039b0:	f8dc 2000 	ldr.w	r2, [ip]
 80039b4:	4422      	add	r2, r4
 80039b6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80039ba:	0a12      	lsrs	r2, r2, #8
 80039bc:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039be:	f8dc 2000 	ldr.w	r2, [ip]
 80039c2:	4422      	add	r2, r4
 80039c4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80039c8:	0c12      	lsrs	r2, r2, #16
 80039ca:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039cc:	f8dc 2000 	ldr.w	r2, [ip]
 80039d0:	4422      	add	r2, r4
 80039d2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80039d6:	0e12      	lsrs	r2, r2, #24
 80039d8:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039da:	f8dc 2000 	ldr.w	r2, [ip]
 80039de:	4422      	add	r2, r4
 80039e0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80039e4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80039e6:	f8dc 2000 	ldr.w	r2, [ip]
 80039ea:	4422      	add	r2, r4
 80039ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80039f0:	0a12      	lsrs	r2, r2, #8
 80039f2:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80039f4:	f8dc 2000 	ldr.w	r2, [ip]
 80039f8:	4422      	add	r2, r4
 80039fa:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80039fe:	0c12      	lsrs	r2, r2, #16
 8003a00:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a02:	f8dc 2000 	ldr.w	r2, [ip]
 8003a06:	4422      	add	r2, r4
 8003a08:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003a0c:	0e12      	lsrs	r2, r2, #24
 8003a0e:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a10:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a14:	b989      	cbnz	r1, 8003a3a <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a16:	68d3      	ldr	r3, [r2, #12]
 8003a18:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003a1c:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a1e:	60d3      	str	r3, [r2, #12]
}
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8003a28:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a2a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a30:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003a34:	0d6d      	lsrs	r5, r5, #21
 8003a36:	6015      	str	r5, [r2, #0]
 8003a38:	e7a3      	b.n	8003982 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a3a:	6913      	ldr	r3, [r2, #16]
 8003a3c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003a40:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a42:	6113      	str	r3, [r2, #16]
}
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
 8003a46:	bf00      	nop

08003a48 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a48:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	2a01      	cmp	r2, #1
{
 8003a50:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003a52:	d905      	bls.n	8003a60 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a54:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003a56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8003a5a:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003a5e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003a60:	6802      	ldr	r2, [r0, #0]
 8003a62:	6953      	ldr	r3, [r2, #20]
 8003a64:	4319      	orrs	r1, r3
    return HAL_OK;
 8003a66:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003a68:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8003a6a:	4770      	bx	lr

08003a6c <HAL_CAN_TxMailbox0CompleteCallback>:
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop

08003a70 <HAL_CAN_TxMailbox1CompleteCallback>:
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop

08003a74 <HAL_CAN_TxMailbox2CompleteCallback>:
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop

08003a78 <HAL_CAN_TxMailbox0AbortCallback>:
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <HAL_CAN_TxMailbox1AbortCallback>:
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop

08003a80 <HAL_CAN_TxMailbox2AbortCallback>:
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop

08003a84 <HAL_CAN_RxFifo0FullCallback>:
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop

08003a88 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop

08003a8c <HAL_CAN_RxFifo1FullCallback>:
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop

08003a90 <HAL_CAN_SleepCallback>:
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop

08003a94 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_CAN_ErrorCallback>:
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop

08003a9c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003aa0:	6803      	ldr	r3, [r0, #0]
 8003aa2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003aa4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003aa8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003aaa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003aae:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003ab2:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ab6:	f014 0601 	ands.w	r6, r4, #1
{
 8003aba:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003abc:	d020      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x64>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003abe:	f017 0601 	ands.w	r6, r7, #1
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x44>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ac8:	07bb      	lsls	r3, r7, #30
 8003aca:	f100 80c4 	bmi.w	8003c56 <HAL_CAN_IRQHandler+0x1ba>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ace:	077e      	lsls	r6, r7, #29
 8003ad0:	f100 80e3 	bmi.w	8003c9a <HAL_CAN_IRQHandler+0x1fe>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003ad4:	f017 0608 	ands.w	r6, r7, #8
 8003ad8:	f000 80e8 	beq.w	8003cac <HAL_CAN_IRQHandler+0x210>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003adc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ae0:	05f8      	lsls	r0, r7, #23
 8003ae2:	d50b      	bpl.n	8003afc <HAL_CAN_IRQHandler+0x60>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003aea:	05b9      	lsls	r1, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003aec:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003aee:	f100 80ae 	bmi.w	8003c4e <HAL_CAN_IRQHandler+0x1b2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003af2:	057a      	lsls	r2, r7, #21
 8003af4:	f140 80cc 	bpl.w	8003c90 <HAL_CAN_IRQHandler+0x1f4>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003af8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003afc:	03f8      	lsls	r0, r7, #15
 8003afe:	d465      	bmi.n	8003bcc <HAL_CAN_IRQHandler+0x130>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b00:	0727      	lsls	r7, r4, #28
 8003b02:	d502      	bpl.n	8003b0a <HAL_CAN_IRQHandler+0x6e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b04:	f01b 0f10 	tst.w	fp, #16
 8003b08:	d16b      	bne.n	8003be2 <HAL_CAN_IRQHandler+0x146>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b0a:	0760      	lsls	r0, r4, #29
 8003b0c:	d503      	bpl.n	8003b16 <HAL_CAN_IRQHandler+0x7a>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b0e:	f01b 0f08 	tst.w	fp, #8
 8003b12:	f040 808d 	bne.w	8003c30 <HAL_CAN_IRQHandler+0x194>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b16:	07a1      	lsls	r1, r4, #30
 8003b18:	d504      	bpl.n	8003b24 <HAL_CAN_IRQHandler+0x88>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b1a:	682b      	ldr	r3, [r5, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	079a      	lsls	r2, r3, #30
 8003b20:	f040 8082 	bne.w	8003c28 <HAL_CAN_IRQHandler+0x18c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b24:	0663      	lsls	r3, r4, #25
 8003b26:	d502      	bpl.n	8003b2e <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b28:	f01a 0f10 	tst.w	sl, #16
 8003b2c:	d148      	bne.n	8003bc0 <HAL_CAN_IRQHandler+0x124>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b2e:	06a7      	lsls	r7, r4, #26
 8003b30:	d502      	bpl.n	8003b38 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b32:	f01a 0f08 	tst.w	sl, #8
 8003b36:	d162      	bne.n	8003bfe <HAL_CAN_IRQHandler+0x162>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b38:	06e0      	lsls	r0, r4, #27
 8003b3a:	d503      	bpl.n	8003b44 <HAL_CAN_IRQHandler+0xa8>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	0799      	lsls	r1, r3, #30
 8003b42:	d17c      	bne.n	8003c3e <HAL_CAN_IRQHandler+0x1a2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b44:	03a2      	lsls	r2, r4, #14
 8003b46:	d502      	bpl.n	8003b4e <HAL_CAN_IRQHandler+0xb2>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b48:	f018 0f10 	tst.w	r8, #16
 8003b4c:	d15e      	bne.n	8003c0c <HAL_CAN_IRQHandler+0x170>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b4e:	03e3      	lsls	r3, r4, #15
 8003b50:	d502      	bpl.n	8003b58 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b52:	f018 0f08 	tst.w	r8, #8
 8003b56:	d160      	bne.n	8003c1a <HAL_CAN_IRQHandler+0x17e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b58:	0427      	lsls	r7, r4, #16
 8003b5a:	d505      	bpl.n	8003b68 <HAL_CAN_IRQHandler+0xcc>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b5c:	f018 0f04 	tst.w	r8, #4
 8003b60:	d106      	bne.n	8003b70 <HAL_CAN_IRQHandler+0xd4>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b62:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b64:	2204      	movs	r2, #4
 8003b66:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b68:	2e00      	cmp	r6, #0
 8003b6a:	d140      	bne.n	8003bee <HAL_CAN_IRQHandler+0x152>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b70:	05e0      	lsls	r0, r4, #23
 8003b72:	d504      	bpl.n	8003b7e <HAL_CAN_IRQHandler+0xe2>
 8003b74:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b78:	bf18      	it	ne
 8003b7a:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b7e:	05a1      	lsls	r1, r4, #22
 8003b80:	d504      	bpl.n	8003b8c <HAL_CAN_IRQHandler+0xf0>
 8003b82:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b86:	bf18      	it	ne
 8003b88:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b8c:	0562      	lsls	r2, r4, #21
 8003b8e:	d504      	bpl.n	8003b9a <HAL_CAN_IRQHandler+0xfe>
 8003b90:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b94:	bf18      	it	ne
 8003b96:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b9a:	0523      	lsls	r3, r4, #20
 8003b9c:	d5e1      	bpl.n	8003b62 <HAL_CAN_IRQHandler+0xc6>
 8003b9e:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8003ba2:	d0de      	beq.n	8003b62 <HAL_CAN_IRQHandler+0xc6>
        switch (esrflags & CAN_ESR_LEC)
 8003ba4:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003ba8:	f000 808b 	beq.w	8003cc2 <HAL_CAN_IRQHandler+0x226>
 8003bac:	d857      	bhi.n	8003c5e <HAL_CAN_IRQHandler+0x1c2>
 8003bae:	f1b9 0f20 	cmp.w	r9, #32
 8003bb2:	d078      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x20a>
 8003bb4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8003bb8:	d15f      	bne.n	8003c7a <HAL_CAN_IRQHandler+0x1de>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bba:	f046 0620 	orr.w	r6, r6, #32
            break;
 8003bbe:	e056      	b.n	8003c6e <HAL_CAN_IRQHandler+0x1d2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003bc4:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	e7b0      	b.n	8003b2e <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003bd2:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bd4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003bd6:	d436      	bmi.n	8003c46 <HAL_CAN_IRQHandler+0x1aa>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bd8:	037a      	lsls	r2, r7, #13
 8003bda:	d554      	bpl.n	8003c86 <HAL_CAN_IRQHandler+0x1ea>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bdc:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8003be0:	e78e      	b.n	8003b00 <HAL_CAN_IRQHandler+0x64>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003be6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	e78d      	b.n	8003b0a <HAL_CAN_IRQHandler+0x6e>
    hcan->ErrorCode |= errorcode;
 8003bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bf0:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 8003bf2:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8003bf4:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003bf6:	f7ff ff4f 	bl	8003a98 <HAL_CAN_ErrorCallback>
}
 8003bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bfe:	682b      	ldr	r3, [r5, #0]
 8003c00:	2208      	movs	r2, #8
 8003c02:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c04:	4628      	mov	r0, r5
 8003c06:	f7ff ff41 	bl	8003a8c <HAL_CAN_RxFifo1FullCallback>
 8003c0a:	e795      	b.n	8003b38 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	2210      	movs	r2, #16
 8003c10:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8003c12:	4628      	mov	r0, r5
 8003c14:	f7ff ff3c 	bl	8003a90 <HAL_CAN_SleepCallback>
 8003c18:	e799      	b.n	8003b4e <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c20:	4628      	mov	r0, r5
 8003c22:	f7ff ff37 	bl	8003a94 <HAL_CAN_WakeUpFromRxMsgCallback>
 8003c26:	e797      	b.n	8003b58 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f7fe fd5d 	bl	80026e8 <HAL_CAN_RxFifo0MsgPendingCallback>
 8003c2e:	e779      	b.n	8003b24 <HAL_CAN_IRQHandler+0x88>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	2208      	movs	r2, #8
 8003c34:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c36:	4628      	mov	r0, r5
 8003c38:	f7ff ff24 	bl	8003a84 <HAL_CAN_RxFifo0FullCallback>
 8003c3c:	e76b      	b.n	8003b16 <HAL_CAN_IRQHandler+0x7a>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7ff ff22 	bl	8003a88 <HAL_CAN_RxFifo1MsgPendingCallback>
 8003c44:	e77e      	b.n	8003b44 <HAL_CAN_IRQHandler+0xa8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c46:	4628      	mov	r0, r5
 8003c48:	f7ff ff14 	bl	8003a74 <HAL_CAN_TxMailbox2CompleteCallback>
 8003c4c:	e758      	b.n	8003b00 <HAL_CAN_IRQHandler+0x64>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f7ff ff0e 	bl	8003a70 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c54:	e752      	b.n	8003afc <HAL_CAN_IRQHandler+0x60>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c56:	f7ff ff09 	bl	8003a6c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	e740      	b.n	8003ae0 <HAL_CAN_IRQHandler+0x44>
        switch (esrflags & CAN_ESR_LEC)
 8003c5e:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8003c62:	d01d      	beq.n	8003ca0 <HAL_CAN_IRQHandler+0x204>
 8003c64:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c68:	bf08      	it	eq
 8003c6a:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c76:	619a      	str	r2, [r3, #24]
 8003c78:	e774      	b.n	8003b64 <HAL_CAN_IRQHandler+0xc8>
        switch (esrflags & CAN_ESR_LEC)
 8003c7a:	f1b9 0f10 	cmp.w	r9, #16
 8003c7e:	d1f6      	bne.n	8003c6e <HAL_CAN_IRQHandler+0x1d2>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c80:	f046 0608 	orr.w	r6, r6, #8
            break;
 8003c84:	e7f3      	b.n	8003c6e <HAL_CAN_IRQHandler+0x1d2>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c86:	033b      	lsls	r3, r7, #12
 8003c88:	d517      	bpl.n	8003cba <HAL_CAN_IRQHandler+0x21e>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c8a:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8003c8e:	e737      	b.n	8003b00 <HAL_CAN_IRQHandler+0x64>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c90:	053b      	lsls	r3, r7, #20
 8003c92:	d50e      	bpl.n	8003cb2 <HAL_CAN_IRQHandler+0x216>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c94:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003c98:	e730      	b.n	8003afc <HAL_CAN_IRQHandler+0x60>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c9a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003c9e:	e71f      	b.n	8003ae0 <HAL_CAN_IRQHandler+0x44>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ca0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8003ca4:	e7e3      	b.n	8003c6e <HAL_CAN_IRQHandler+0x1d2>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ca6:	f046 0610 	orr.w	r6, r6, #16
            break;
 8003caa:	e7e0      	b.n	8003c6e <HAL_CAN_IRQHandler+0x1d2>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003cac:	f7ff fee4 	bl	8003a78 <HAL_CAN_TxMailbox0AbortCallback>
 8003cb0:	e716      	b.n	8003ae0 <HAL_CAN_IRQHandler+0x44>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f7ff fee2 	bl	8003a7c <HAL_CAN_TxMailbox1AbortCallback>
 8003cb8:	e720      	b.n	8003afc <HAL_CAN_IRQHandler+0x60>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f7ff fee0 	bl	8003a80 <HAL_CAN_TxMailbox2AbortCallback>
 8003cc0:	e71e      	b.n	8003b00 <HAL_CAN_IRQHandler+0x64>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cc2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8003cc6:	e7d2      	b.n	8003c6e <HAL_CAN_IRQHandler+0x1d2>

08003cc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc8:	4907      	ldr	r1, [pc, #28]	; (8003ce8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003cca:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ccc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cce:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cda:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003ce2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <HAL_NVIC_SetPriority+0x74>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf6:	f1c3 0e07 	rsb	lr, r3, #7
 8003cfa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d02:	bf28      	it	cs
 8003d04:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d08:	f1bc 0f06 	cmp.w	ip, #6
 8003d0c:	d91b      	bls.n	8003d46 <HAL_NVIC_SetPriority+0x5a>
 8003d0e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003d14:	fa0c fc03 	lsl.w	ip, ip, r3
 8003d18:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003d20:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003d24:	ea21 010c 	bic.w	r1, r1, ip
 8003d28:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003d2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003d30:	db0c      	blt.n	8003d4c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d36:	0109      	lsls	r1, r1, #4
 8003d38:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d3c:	b2c9      	uxtb	r1, r1
 8003d3e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d46:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d48:	4613      	mov	r3, r2
 8003d4a:	e7e7      	b.n	8003d1c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_NVIC_SetPriority+0x78>)
 8003d4e:	f000 000f 	and.w	r0, r0, #15
 8003d52:	0109      	lsls	r1, r1, #4
 8003d54:	4403      	add	r3, r0
 8003d56:	b2c9      	uxtb	r1, r1
 8003d58:	7619      	strb	r1, [r3, #24]
 8003d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d5e:	bf00      	nop
 8003d60:	e000ed00 	.word	0xe000ed00
 8003d64:	e000ecfc 	.word	0xe000ecfc

08003d68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	db08      	blt.n	8003d7e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_NVIC_EnableIRQ+0x18>)
 8003d6e:	0941      	lsrs	r1, r0, #5
 8003d70:	2301      	movs	r3, #1
 8003d72:	f000 001f 	and.w	r0, r0, #31
 8003d76:	fa03 f000 	lsl.w	r0, r3, r0
 8003d7a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d84:	3801      	subs	r0, #1
 8003d86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003d8a:	d210      	bcs.n	8003dae <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	4c08      	ldr	r4, [pc, #32]	; (8003db4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d94:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d96:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003d9a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003da6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003daa:	6119      	str	r1, [r3, #16]
 8003dac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003dae:	2001      	movs	r0, #1
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop

08003dbc <HAL_SYSTICK_IRQHandler>:
{
 8003dbc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003dbe:	f7ff fffb 	bl	8003db8 <HAL_SYSTICK_Callback>
}
 8003dc2:	bd08      	pop	{r3, pc}

08003dc4 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d006      	beq.n	8003dda <HAL_DMA_Abort+0x16>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dcc:	2204      	movs	r2, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dce:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd0:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003dd2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dda:	6802      	ldr	r2, [r0, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ddc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dde:	6811      	ldr	r1, [r2, #0]
 8003de0:	f021 010e 	bic.w	r1, r1, #14
 8003de4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003de6:	6811      	ldr	r1, [r2, #0]
 8003de8:	f021 0101 	bic.w	r1, r1, #1
 8003dec:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dee:	f04f 0c01 	mov.w	ip, #1
 8003df2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003df4:	f003 031c 	and.w	r3, r3, #28
 8003df8:	fa0c f303 	lsl.w	r3, ip, r3
 8003dfc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfe:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003e00:	f880 c025 	strb.w	ip, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e04:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return status;
 8003e08:	4618      	mov	r0, r3
  }
}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e0c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003e10:	2a02      	cmp	r2, #2
 8003e12:	d003      	beq.n	8003e1c <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e14:	2204      	movs	r2, #4
 8003e16:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8003e18:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8003e1a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8003e20:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e22:	680c      	ldr	r4, [r1, #0]
 8003e24:	f024 040e 	bic.w	r4, r4, #14
 8003e28:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e2a:	680c      	ldr	r4, [r1, #0]
 8003e2c:	f024 0401 	bic.w	r4, r4, #1
 8003e30:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e32:	f002 021c 	and.w	r2, r2, #28
 8003e36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 8003e40:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003e42:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e46:	2400      	movs	r4, #0
 8003e48:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003e4c:	b112      	cbz	r2, 8003e54 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8003e4e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	4620      	mov	r0, r4
}
 8003e52:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	4610      	mov	r0, r2
}
 8003e56:	bd10      	pop	{r4, pc}

08003e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e5c:	680d      	ldr	r5, [r1, #0]
{
 8003e5e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e60:	2d00      	cmp	r5, #0
 8003e62:	f000 80a8 	beq.w	8003fb6 <HAL_GPIO_Init+0x15e>
 8003e66:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e6a:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8004060 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8003e6e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e70:	f04f 0a01 	mov.w	sl, #1
 8003e74:	46a8      	mov	r8, r5
 8003e76:	fa0a f603 	lsl.w	r6, sl, r3
    if (iocurrent != 0x00u)
 8003e7a:	ea16 0908 	ands.w	r9, r6, r8
 8003e7e:	f000 8093 	beq.w	8003fa8 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e82:	684c      	ldr	r4, [r1, #4]
 8003e84:	f024 0210 	bic.w	r2, r4, #16
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	2a01      	cmp	r2, #1
 8003e8c:	f240 8096 	bls.w	8003fbc <HAL_GPIO_Init+0x164>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e90:	2203      	movs	r2, #3
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e92:	f004 0503 	and.w	r5, r4, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e96:	fa02 f20c 	lsl.w	r2, r2, ip
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e9a:	2d03      	cmp	r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e9c:	ea6f 0202 	mvn.w	r2, r2
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ea0:	f000 80a5 	beq.w	8003fee <HAL_GPIO_Init+0x196>
      temp = GPIOx->PUPDR;
 8003ea4:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ea6:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ea8:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eaa:	fa06 f60c 	lsl.w	r6, r6, ip
 8003eae:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb0:	2c02      	cmp	r4, #2
      GPIOx->PUPDR = temp;
 8003eb2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb4:	f040 80aa 	bne.w	800400c <HAL_GPIO_Init+0x1b4>
        temp = GPIOx->AFR[position >> 3u];
 8003eb8:	08df      	lsrs	r7, r3, #3
 8003eba:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ebe:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003ec2:	6a3e      	ldr	r6, [r7, #32]
 8003ec4:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ec6:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ec8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ecc:	fa06 f60e 	lsl.w	r6, r6, lr
 8003ed0:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ed2:	260f      	movs	r6, #15
 8003ed4:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003ed8:	9e00      	ldr	r6, [sp, #0]
 8003eda:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ede:	9e01      	ldr	r6, [sp, #4]
 8003ee0:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003ee4:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 8003ee6:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee8:	fa05 f50c 	lsl.w	r5, r5, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eec:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eee:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ef0:	00e6      	lsls	r6, r4, #3
      GPIOx->MODER = temp;
 8003ef2:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ef4:	d558      	bpl.n	8003fa8 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef6:	4d53      	ldr	r5, [pc, #332]	; (8004044 <HAL_GPIO_Init+0x1ec>)
 8003ef8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	662a      	str	r2, [r5, #96]	; 0x60
 8003f00:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003f02:	f002 0201 	and.w	r2, r2, #1
 8003f06:	9203      	str	r2, [sp, #12]
 8003f08:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f0a:	f023 0203 	bic.w	r2, r3, #3
 8003f0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003f12:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f16:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f1a:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f1c:	00b6      	lsls	r6, r6, #2
 8003f1e:	250f      	movs	r5, #15
 8003f20:	40b5      	lsls	r5, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f22:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f26:	ea27 0505 	bic.w	r5, r7, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f2a:	d016      	beq.n	8003f5a <HAL_GPIO_Init+0x102>
 8003f2c:	4f46      	ldr	r7, [pc, #280]	; (8004048 <HAL_GPIO_Init+0x1f0>)
 8003f2e:	42b8      	cmp	r0, r7
 8003f30:	d075      	beq.n	800401e <HAL_GPIO_Init+0x1c6>
 8003f32:	4f46      	ldr	r7, [pc, #280]	; (800404c <HAL_GPIO_Init+0x1f4>)
 8003f34:	42b8      	cmp	r0, r7
 8003f36:	d076      	beq.n	8004026 <HAL_GPIO_Init+0x1ce>
 8003f38:	4f45      	ldr	r7, [pc, #276]	; (8004050 <HAL_GPIO_Init+0x1f8>)
 8003f3a:	42b8      	cmp	r0, r7
 8003f3c:	d06a      	beq.n	8004014 <HAL_GPIO_Init+0x1bc>
 8003f3e:	4f45      	ldr	r7, [pc, #276]	; (8004054 <HAL_GPIO_Init+0x1fc>)
 8003f40:	42b8      	cmp	r0, r7
 8003f42:	d075      	beq.n	8004030 <HAL_GPIO_Init+0x1d8>
 8003f44:	4f44      	ldr	r7, [pc, #272]	; (8004058 <HAL_GPIO_Init+0x200>)
 8003f46:	42b8      	cmp	r0, r7
 8003f48:	d077      	beq.n	800403a <HAL_GPIO_Init+0x1e2>
 8003f4a:	4f44      	ldr	r7, [pc, #272]	; (800405c <HAL_GPIO_Init+0x204>)
 8003f4c:	42b8      	cmp	r0, r7
 8003f4e:	bf0c      	ite	eq
 8003f50:	2706      	moveq	r7, #6
 8003f52:	2707      	movne	r7, #7
 8003f54:	fa07 f606 	lsl.w	r6, r7, r6
 8003f58:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f5a:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR1;
 8003f5c:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f60:	03e5      	lsls	r5, r4, #15
        temp &= ~(iocurrent);
 8003f62:	ea6f 0609 	mvn.w	r6, r9
 8003f66:	bf54      	ite	pl
 8003f68:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003f6a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8003f6e:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR1;
 8003f72:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f76:	03a2      	lsls	r2, r4, #14
        temp &= ~(iocurrent);
 8003f78:	bf54      	ite	pl
 8003f7a:	4035      	andpl	r5, r6
        {
          temp |= iocurrent;
 8003f7c:	ea49 0505 	orrmi.w	r5, r9, r5
        }
        EXTI->EMR1 = temp;
 8003f80:	f8cb 5004 	str.w	r5, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f84:	f8db 5008 	ldr.w	r5, [fp, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f88:	02e7      	lsls	r7, r4, #11
        temp &= ~(iocurrent);
 8003f8a:	bf54      	ite	pl
 8003f8c:	4035      	andpl	r5, r6
        {
          temp |= iocurrent;
 8003f8e:	ea49 0505 	orrmi.w	r5, r9, r5
        }
        EXTI->RTSR1 = temp;
 8003f92:	f8cb 5008 	str.w	r5, [fp, #8]

        temp = EXTI->FTSR1;
 8003f96:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f9a:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8003f9c:	bf54      	ite	pl
 8003f9e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003fa0:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = temp;
 8003fa4:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 8003fa8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003faa:	fa38 f203 	lsrs.w	r2, r8, r3
 8003fae:	f10c 0c02 	add.w	ip, ip, #2
 8003fb2:	f47f af60 	bne.w	8003e76 <HAL_GPIO_Init+0x1e>
  }
}
 8003fb6:	b005      	add	sp, #20
 8003fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003fbc:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fbe:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fc0:	2503      	movs	r5, #3
 8003fc2:	fa05 f50c 	lsl.w	r5, r5, ip
 8003fc6:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fca:	fa02 f20c 	lsl.w	r2, r2, ip
 8003fce:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8003fd0:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8003fd2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fd4:	43ea      	mvns	r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003fd6:	f3c4 1500 	ubfx	r5, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fda:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003fde:	409d      	lsls	r5, r3
 8003fe0:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8003fe2:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003fe4:	f004 0503 	and.w	r5, r4, #3
 8003fe8:	2d03      	cmp	r5, #3
 8003fea:	f47f af5b 	bne.w	8003ea4 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->ASCR;
 8003fee:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ff0:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003ff4:	f3c4 06c0 	ubfx	r6, r4, #3, #1
 8003ff8:	409e      	lsls	r6, r3
 8003ffa:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8003ffc:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8003ffe:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004000:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004002:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004004:	fa06 f60c 	lsl.w	r6, r6, ip
 8004008:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800400a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400c:	2c12      	cmp	r4, #18
 800400e:	f47f af6a 	bne.w	8003ee6 <HAL_GPIO_Init+0x8e>
 8004012:	e751      	b.n	8003eb8 <HAL_GPIO_Init+0x60>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004014:	2703      	movs	r7, #3
 8004016:	fa07 f606 	lsl.w	r6, r7, r6
 800401a:	4335      	orrs	r5, r6
 800401c:	e79d      	b.n	8003f5a <HAL_GPIO_Init+0x102>
 800401e:	fa0a f606 	lsl.w	r6, sl, r6
 8004022:	4335      	orrs	r5, r6
 8004024:	e799      	b.n	8003f5a <HAL_GPIO_Init+0x102>
 8004026:	2702      	movs	r7, #2
 8004028:	fa07 f606 	lsl.w	r6, r7, r6
 800402c:	4335      	orrs	r5, r6
 800402e:	e794      	b.n	8003f5a <HAL_GPIO_Init+0x102>
 8004030:	2704      	movs	r7, #4
 8004032:	fa07 f606 	lsl.w	r6, r7, r6
 8004036:	4335      	orrs	r5, r6
 8004038:	e78f      	b.n	8003f5a <HAL_GPIO_Init+0x102>
 800403a:	2705      	movs	r7, #5
 800403c:	fa07 f606 	lsl.w	r6, r7, r6
 8004040:	4335      	orrs	r5, r6
 8004042:	e78a      	b.n	8003f5a <HAL_GPIO_Init+0x102>
 8004044:	40021000 	.word	0x40021000
 8004048:	48000400 	.word	0x48000400
 800404c:	48000800 	.word	0x48000800
 8004050:	48000c00 	.word	0x48000c00
 8004054:	48001000 	.word	0x48001000
 8004058:	48001400 	.word	0x48001400
 800405c:	48001800 	.word	0x48001800
 8004060:	40010400 	.word	0x40010400

08004064 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004064:	b10a      	cbz	r2, 800406a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004066:	6181      	str	r1, [r0, #24]
 8004068:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800406a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop

08004074 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004076:	6951      	ldr	r1, [r2, #20]
 8004078:	4201      	tst	r1, r0
 800407a:	d100      	bne.n	800407e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800407c:	4770      	bx	lr
{
 800407e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004080:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004082:	f7ff fff5 	bl	8004070 <HAL_GPIO_EXTI_Callback>
}
 8004086:	bd08      	pop	{r3, pc}
 8004088:	40010400 	.word	0x40010400

0800408c <I2C_IsAcknowledgeFailed.part.0>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	4606      	mov	r6, r0
 8004090:	460d      	mov	r5, r1
 8004092:	4617      	mov	r7, r2
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004094:	6834      	ldr	r4, [r6, #0]
 8004096:	e001      	b.n	800409c <I2C_IsAcknowledgeFailed.part.0+0x10>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004098:	1c68      	adds	r0, r5, #1
 800409a:	d120      	bne.n	80040de <I2C_IsAcknowledgeFailed.part.0+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800409c:	69a3      	ldr	r3, [r4, #24]
 800409e:	0699      	lsls	r1, r3, #26
 80040a0:	d5fa      	bpl.n	8004098 <I2C_IsAcknowledgeFailed.part.0+0xc>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a2:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a4:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a6:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a8:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040aa:	69a3      	ldr	r3, [r4, #24]
 80040ac:	079a      	lsls	r2, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 80040ae:	bf44      	itt	mi
 80040b0:	2300      	movmi	r3, #0
 80040b2:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b4:	69a3      	ldr	r3, [r4, #24]
 80040b6:	07db      	lsls	r3, r3, #31
 80040b8:	d525      	bpl.n	8004106 <I2C_IsAcknowledgeFailed.part.0+0x7a>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ba:	6863      	ldr	r3, [r4, #4]
 80040bc:	4914      	ldr	r1, [pc, #80]	; (8004110 <I2C_IsAcknowledgeFailed.part.0+0x84>)
 80040be:	400b      	ands	r3, r1
 80040c0:	6063      	str	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6473      	str	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ce:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d6:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42

    return HAL_ERROR;
  }
  return HAL_OK;
}
 80040da:	2001      	movs	r0, #1
 80040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7ff fa83 	bl	80035e8 <HAL_GetTick>
 80040e2:	1bc0      	subs	r0, r0, r7
 80040e4:	4285      	cmp	r5, r0
 80040e6:	d301      	bcc.n	80040ec <I2C_IsAcknowledgeFailed.part.0+0x60>
 80040e8:	2d00      	cmp	r5, #0
 80040ea:	d1d3      	bne.n	8004094 <I2C_IsAcknowledgeFailed.part.0+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ec:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ee:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040f0:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040f6:	6473      	str	r3, [r6, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80040f8:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004100:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
          return HAL_ERROR;
 8004104:	e7e9      	b.n	80040da <I2C_IsAcknowledgeFailed.part.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004106:	69a3      	ldr	r3, [r4, #24]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	61a3      	str	r3, [r4, #24]
 800410e:	e7d4      	b.n	80040ba <I2C_IsAcknowledgeFailed.part.0+0x2e>
 8004110:	fe00e800 	.word	0xfe00e800

08004114 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	4604      	mov	r4, r0
 8004118:	460d      	mov	r5, r1
 800411a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800411c:	e001      	b.n	8004122 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800411e:	1c6b      	adds	r3, r5, #1
 8004120:	d111      	bne.n	8004146 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	699e      	ldr	r6, [r3, #24]
 8004126:	07b6      	lsls	r6, r6, #30
 8004128:	463a      	mov	r2, r7
 800412a:	4629      	mov	r1, r5
 800412c:	4620      	mov	r0, r4
 800412e:	d408      	bmi.n	8004142 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	06de      	lsls	r6, r3, #27
 8004134:	d5f3      	bpl.n	800411e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8004136:	f7ff ffa9 	bl	800408c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800413a:	2800      	cmp	r0, #0
 800413c:	d0ef      	beq.n	800411e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 800413e:	2001      	movs	r0, #1
}
 8004140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004142:	2000      	movs	r0, #0
}
 8004144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7ff fa4f 	bl	80035e8 <HAL_GetTick>
 800414a:	1bc0      	subs	r0, r0, r7
 800414c:	42a8      	cmp	r0, r5
 800414e:	d801      	bhi.n	8004154 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004150:	2d00      	cmp	r5, #0
 8004152:	d1e6      	bne.n	8004122 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800415c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800415e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004160:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8004164:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        return HAL_ERROR;
 800416c:	2001      	movs	r0, #1
}
 800416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004170 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	4605      	mov	r5, r0
 8004174:	460c      	mov	r4, r1
 8004176:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004178:	e005      	b.n	8004186 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7ff fa35 	bl	80035e8 <HAL_GetTick>
 800417e:	1b80      	subs	r0, r0, r6
 8004180:	42a0      	cmp	r0, r4
 8004182:	d810      	bhi.n	80041a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
 8004184:	b17c      	cbz	r4, 80041a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	699f      	ldr	r7, [r3, #24]
 800418a:	06bf      	lsls	r7, r7, #26
 800418c:	4632      	mov	r2, r6
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	d416      	bmi.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	06db      	lsls	r3, r3, #27
 8004198:	d5ef      	bpl.n	800417a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800419a:	f7ff ff77 	bl	800408c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	2800      	cmp	r0, #0
 80041a0:	d0eb      	beq.n	800417a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      return HAL_ERROR;
 80041a2:	2001      	movs	r0, #1
}
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041aa:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80041b2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80041be:	2001      	movs	r0, #1
}
 80041c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80041c2:	2000      	movs	r0, #0
}
 80041c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c6:	bf00      	nop

080041c8 <I2C_RequestMemoryRead>:
{
 80041c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041cc:	4616      	mov	r6, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80041ce:	6802      	ldr	r2, [r0, #0]
 80041d0:	4c27      	ldr	r4, [pc, #156]	; (8004270 <I2C_RequestMemoryRead+0xa8>)
{
 80041d2:	461f      	mov	r7, r3
  MODIFY_REG(hi2c->Instance->CR2,
 80041d4:	6853      	ldr	r3, [r2, #4]
 80041d6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80041da:	4023      	ands	r3, r4
 80041dc:	b2fc      	uxtb	r4, r7
 80041de:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80041e2:	4319      	orrs	r1, r3
{
 80041e4:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2,
 80041e8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80041ec:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80041f0:	6051      	str	r1, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f2:	464a      	mov	r2, r9
 80041f4:	4621      	mov	r1, r4
{
 80041f6:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f8:	f7ff ff8c 	bl	8004114 <I2C_WaitOnTXISFlagUntilTimeout>
 80041fc:	b9c0      	cbnz	r0, 8004230 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041fe:	2f01      	cmp	r7, #1
 8004200:	4680      	mov	r8, r0
 8004202:	d10b      	bne.n	800421c <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004204:	682a      	ldr	r2, [r5, #0]
 8004206:	b2f6      	uxtb	r6, r6
 8004208:	6296      	str	r6, [r2, #40]	; 0x28
 800420a:	e001      	b.n	8004210 <I2C_RequestMemoryRead+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800420c:	1c61      	adds	r1, r4, #1
 800420e:	d114      	bne.n	800423a <I2C_RequestMemoryRead+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004210:	6993      	ldr	r3, [r2, #24]
 8004212:	065b      	lsls	r3, r3, #25
 8004214:	d5fa      	bpl.n	800420c <I2C_RequestMemoryRead+0x44>
}
 8004216:	4640      	mov	r0, r8
 8004218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	0a32      	lsrs	r2, r6, #8
 8004220:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	4621      	mov	r1, r4
 8004224:	464a      	mov	r2, r9
 8004226:	4628      	mov	r0, r5
 8004228:	f7ff ff74 	bl	8004114 <I2C_WaitOnTXISFlagUntilTimeout>
 800422c:	2800      	cmp	r0, #0
 800422e:	d0e9      	beq.n	8004204 <I2C_RequestMemoryRead+0x3c>
    return HAL_ERROR;
 8004230:	f04f 0801 	mov.w	r8, #1
}
 8004234:	4640      	mov	r0, r8
 8004236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7ff f9d5 	bl	80035e8 <HAL_GetTick>
 800423e:	eba0 0009 	sub.w	r0, r0, r9
 8004242:	4284      	cmp	r4, r0
 8004244:	d302      	bcc.n	800424c <I2C_RequestMemoryRead+0x84>
 8004246:	b10c      	cbz	r4, 800424c <I2C_RequestMemoryRead+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004248:	682a      	ldr	r2, [r5, #0]
 800424a:	e7e1      	b.n	8004210 <I2C_RequestMemoryRead+0x48>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8004254:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	646b      	str	r3, [r5, #68]	; 0x44
    return HAL_ERROR;
 8004258:	f04f 0801 	mov.w	r8, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800425c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8004260:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8004268:	4640      	mov	r0, r8
 800426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800426e:	bf00      	nop
 8004270:	fc009800 	.word	0xfc009800

08004274 <I2C_RequestMemoryWrite>:
{
 8004274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004278:	4616      	mov	r6, r2
  MODIFY_REG(hi2c->Instance->CR2,
 800427a:	6802      	ldr	r2, [r0, #0]
 800427c:	4c27      	ldr	r4, [pc, #156]	; (800431c <I2C_RequestMemoryWrite+0xa8>)
{
 800427e:	461f      	mov	r7, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8004280:	6853      	ldr	r3, [r2, #4]
 8004282:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004286:	4023      	ands	r3, r4
 8004288:	b2fc      	uxtb	r4, r7
 800428a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800428e:	4319      	orrs	r1, r3
{
 8004290:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2,
 8004294:	f041 4101 	orr.w	r1, r1, #2164260864	; 0x81000000
 8004298:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800429c:	6051      	str	r1, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429e:	464a      	mov	r2, r9
 80042a0:	4621      	mov	r1, r4
{
 80042a2:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a4:	f7ff ff36 	bl	8004114 <I2C_WaitOnTXISFlagUntilTimeout>
 80042a8:	b9c0      	cbnz	r0, 80042dc <I2C_RequestMemoryWrite+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042aa:	2f01      	cmp	r7, #1
 80042ac:	4680      	mov	r8, r0
 80042ae:	d10b      	bne.n	80042c8 <I2C_RequestMemoryWrite+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042b0:	682a      	ldr	r2, [r5, #0]
 80042b2:	b2f6      	uxtb	r6, r6
 80042b4:	6296      	str	r6, [r2, #40]	; 0x28
 80042b6:	e001      	b.n	80042bc <I2C_RequestMemoryWrite+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80042b8:	1c61      	adds	r1, r4, #1
 80042ba:	d114      	bne.n	80042e6 <I2C_RequestMemoryWrite+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042bc:	6993      	ldr	r3, [r2, #24]
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	d5fa      	bpl.n	80042b8 <I2C_RequestMemoryWrite+0x44>
}
 80042c2:	4640      	mov	r0, r8
 80042c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	0a32      	lsrs	r2, r6, #8
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ce:	4621      	mov	r1, r4
 80042d0:	464a      	mov	r2, r9
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7ff ff1e 	bl	8004114 <I2C_WaitOnTXISFlagUntilTimeout>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d0e9      	beq.n	80042b0 <I2C_RequestMemoryWrite+0x3c>
    return HAL_ERROR;
 80042dc:	f04f 0801 	mov.w	r8, #1
}
 80042e0:	4640      	mov	r0, r8
 80042e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7ff f97f 	bl	80035e8 <HAL_GetTick>
 80042ea:	eba0 0009 	sub.w	r0, r0, r9
 80042ee:	4284      	cmp	r4, r0
 80042f0:	d302      	bcc.n	80042f8 <I2C_RequestMemoryWrite+0x84>
 80042f2:	b10c      	cbz	r4, 80042f8 <I2C_RequestMemoryWrite+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f4:	682a      	ldr	r2, [r5, #0]
 80042f6:	e7e1      	b.n	80042bc <I2C_RequestMemoryWrite+0x48>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042fc:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8004300:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004302:	646b      	str	r3, [r5, #68]	; 0x44
    return HAL_ERROR;
 8004304:	f04f 0801 	mov.w	r8, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8004308:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800430c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004310:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8004314:	4640      	mov	r0, r8
 8004316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431a:	bf00      	nop
 800431c:	fc009800 	.word	0xfc009800

08004320 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004320:	2800      	cmp	r0, #0
 8004322:	d04f      	beq.n	80043c4 <HAL_I2C_Init+0xa4>
{
 8004324:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004326:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800432a:	4604      	mov	r4, r0
 800432c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004330:	2b00      	cmp	r3, #0
 8004332:	d042      	beq.n	80043ba <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8004334:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800433c:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800433e:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8004340:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8004348:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800434a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800434c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800434e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004350:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004354:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004356:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004358:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800435a:	d02a      	beq.n	80043b2 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004360:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004362:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004364:	bf04      	itt	eq
 8004366:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800436a:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800436c:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800436e:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004370:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8004374:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004378:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800437a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800437c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800437e:	430a      	orrs	r2, r1
 8004380:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004382:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004386:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800438a:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800438c:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800438e:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004390:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004392:	4301      	orrs	r1, r0
 8004394:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	f041 0101 	orr.w	r1, r1, #1
 800439c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439e:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043aa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 80043ae:	4610      	mov	r0, r2
}
 80043b0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043b6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043b8:	e7d8      	b.n	800436c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80043ba:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80043be:	f7fd ff79 	bl	80022b4 <HAL_I2C_MspInit>
 80043c2:	e7b7      	b.n	8004334 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80043c4:	2001      	movs	r0, #1
}
 80043c6:	4770      	bx	lr

080043c8 <HAL_I2C_Mem_Write>:
{
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80043d2:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d4:	2b20      	cmp	r3, #32
{
 80043d6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80043da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043dc:	f040 8092 	bne.w	8004504 <HAL_I2C_Mem_Write+0x13c>
    if ((pData == NULL) || (Size == 0U))
 80043e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043e2:	4604      	mov	r4, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8086 	beq.w	80044f6 <HAL_I2C_Mem_Write+0x12e>
 80043ea:	f1ba 0f00 	cmp.w	sl, #0
 80043ee:	f000 8082 	beq.w	80044f6 <HAL_I2C_Mem_Write+0x12e>
    __HAL_LOCK(hi2c);
 80043f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	f000 8084 	beq.w	8004504 <HAL_I2C_Mem_Write+0x13c>
 80043fc:	2301      	movs	r3, #1
 80043fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004402:	460f      	mov	r7, r1
 8004404:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 8004406:	f7ff f8ef 	bl	80035e8 <HAL_GetTick>
 800440a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800440c:	e004      	b.n	8004418 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7ff f8eb 	bl	80035e8 <HAL_GetTick>
 8004412:	1b80      	subs	r0, r0, r6
 8004414:	2819      	cmp	r0, #25
 8004416:	d879      	bhi.n	800450c <HAL_I2C_Mem_Write+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 8004420:	d1f5      	bne.n	800440e <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 8004422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004424:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004426:	2121      	movs	r1, #33	; 0x21
    hi2c->XferISR   = NULL;
 8004428:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800442c:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004430:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800443a:	464b      	mov	r3, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443c:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004440:	4642      	mov	r2, r8
    hi2c->XferCount = Size;
 8004442:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004446:	4639      	mov	r1, r7
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff ff13 	bl	8004274 <I2C_RequestMemoryWrite>
 800444e:	2800      	cmp	r0, #0
 8004450:	f040 8095 	bne.w	800457e <HAL_I2C_Mem_Write+0x1b6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	2bff      	cmp	r3, #255	; 0xff
 800445a:	d867      	bhi.n	800452c <HAL_I2C_Mem_Write+0x164>
      hi2c->XferSize = hi2c->XferCount;
 800445c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800445e:	6820      	ldr	r0, [r4, #0]
 8004460:	4953      	ldr	r1, [pc, #332]	; (80045b0 <HAL_I2C_Mem_Write+0x1e8>)
      hi2c->XferSize = hi2c->XferCount;
 8004462:	b29b      	uxth	r3, r3
 8004464:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004466:	b2da      	uxtb	r2, r3
 8004468:	6843      	ldr	r3, [r0, #4]
 800446a:	4019      	ands	r1, r3
 800446c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8004470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004474:	430b      	orrs	r3, r1
 8004476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800447a:	6043      	str	r3, [r0, #4]
 800447c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004480:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80045b0 <HAL_I2C_Mem_Write+0x1e8>
 8004484:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80045b8 <HAL_I2C_Mem_Write+0x1f0>
 8004488:	b2bf      	uxth	r7, r7
 800448a:	e003      	b.n	8004494 <HAL_I2C_Mem_Write+0xcc>
    } while (hi2c->XferCount > 0U);
 800448c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d078      	beq.n	8004586 <HAL_I2C_Mem_Write+0x1be>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004494:	4632      	mov	r2, r6
 8004496:	4629      	mov	r1, r5
 8004498:	4620      	mov	r0, r4
 800449a:	f7ff fe3b 	bl	8004114 <I2C_WaitOnTXISFlagUntilTimeout>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d16b      	bne.n	800457a <HAL_I2C_Mem_Write+0x1b2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80044aa:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80044ac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80044ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80044b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044b8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044be:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80044c0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044c2:	2900      	cmp	r1, #0
 80044c4:	d0e2      	beq.n	800448c <HAL_I2C_Mem_Write+0xc4>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e0      	bne.n	800448c <HAL_I2C_Mem_Write+0xc4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ca:	6993      	ldr	r3, [r2, #24]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	d404      	bmi.n	80044da <HAL_I2C_Mem_Write+0x112>
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	1c69      	adds	r1, r5, #1
 80044d2:	d13b      	bne.n	800454c <HAL_I2C_Mem_Write+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d4:	6993      	ldr	r3, [r2, #24]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	d5fa      	bpl.n	80044d0 <HAL_I2C_Mem_Write+0x108>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2bff      	cmp	r3, #255	; 0xff
 80044e0:	d93d      	bls.n	800455e <HAL_I2C_Mem_Write+0x196>
  MODIFY_REG(hi2c->Instance->CR2,
 80044e2:	6853      	ldr	r3, [r2, #4]
 80044e4:	ea03 0308 	and.w	r3, r3, r8
 80044e8:	433b      	orrs	r3, r7
 80044ea:	ea43 0309 	orr.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ee:	21ff      	movs	r1, #255	; 0xff
 80044f0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80044f2:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80044f4:	e7ca      	b.n	800448c <HAL_I2C_Mem_Write+0xc4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044fa:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80044fc:	2001      	movs	r0, #1
}
 80044fe:	b003      	add	sp, #12
 8004500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8004504:	2002      	movs	r0, #2
}
 8004506:	b003      	add	sp, #12
 8004508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8004514:	2120      	movs	r1, #32
          return HAL_ERROR;
 8004516:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800451a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800451e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8004526:	b003      	add	sp, #12
 8004528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(hi2c->Instance->CR2,
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	4920      	ldr	r1, [pc, #128]	; (80045b0 <HAL_I2C_Mem_Write+0x1e8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004530:	23ff      	movs	r3, #255	; 0xff
 8004532:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004534:	6853      	ldr	r3, [r2, #4]
 8004536:	400b      	ands	r3, r1
 8004538:	f3c7 0109 	ubfx	r1, r7, #0, #10
 800453c:	430b      	orrs	r3, r1
 800453e:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8004542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004546:	6053      	str	r3, [r2, #4]
 8004548:	460f      	mov	r7, r1
}
 800454a:	e799      	b.n	8004480 <HAL_I2C_Mem_Write+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7ff f84c 	bl	80035e8 <HAL_GetTick>
 8004550:	1b80      	subs	r0, r0, r6
 8004552:	4285      	cmp	r5, r0
 8004554:	d3da      	bcc.n	800450c <HAL_I2C_Mem_Write+0x144>
 8004556:	2d00      	cmp	r5, #0
 8004558:	d0d8      	beq.n	800450c <HAL_I2C_Mem_Write+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	e7ba      	b.n	80044d4 <HAL_I2C_Mem_Write+0x10c>
          hi2c->XferSize = hi2c->XferCount;
 800455e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004564:	b2d9      	uxtb	r1, r3
 8004566:	6853      	ldr	r3, [r2, #4]
 8004568:	ea03 0308 	and.w	r3, r3, r8
 800456c:	433b      	orrs	r3, r7
 800456e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004576:	6053      	str	r3, [r2, #4]
}
 8004578:	e788      	b.n	800448c <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 800457a:	2001      	movs	r0, #1
 800457c:	e7bf      	b.n	80044fe <HAL_I2C_Mem_Write+0x136>
      __HAL_UNLOCK(hi2c);
 800457e:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004582:	2001      	movs	r0, #1
 8004584:	e7bb      	b.n	80044fe <HAL_I2C_Mem_Write+0x136>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004586:	4632      	mov	r2, r6
 8004588:	4629      	mov	r1, r5
 800458a:	4620      	mov	r0, r4
 800458c:	f7ff fdf0 	bl	8004170 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004590:	2800      	cmp	r0, #0
 8004592:	d1f2      	bne.n	800457a <HAL_I2C_Mem_Write+0x1b2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004594:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004596:	4d07      	ldr	r5, [pc, #28]	; (80045b4 <HAL_I2C_Mem_Write+0x1ec>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004598:	2120      	movs	r1, #32
 800459a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	402a      	ands	r2, r5
 80045a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80045a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80045ae:	e7a6      	b.n	80044fe <HAL_I2C_Mem_Write+0x136>
 80045b0:	fc009c00 	.word	0xfc009c00
 80045b4:	fe00e800 	.word	0xfe00e800
 80045b8:	01ff0000 	.word	0x01ff0000

080045bc <HAL_I2C_Mem_Read>:
{
 80045bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80045c6:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c8:	2b20      	cmp	r3, #32
{
 80045ca:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80045ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	d178      	bne.n	80046c4 <HAL_I2C_Mem_Read+0x108>
    if ((pData == NULL) || (Size == 0U))
 80045d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045d4:	4605      	mov	r5, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d06d      	beq.n	80046b6 <HAL_I2C_Mem_Read+0xfa>
 80045da:	f1ba 0f00 	cmp.w	sl, #0
 80045de:	d06a      	beq.n	80046b6 <HAL_I2C_Mem_Read+0xfa>
    __HAL_LOCK(hi2c);
 80045e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d06d      	beq.n	80046c4 <HAL_I2C_Mem_Read+0x108>
 80045e8:	2301      	movs	r3, #1
 80045ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80045ee:	460f      	mov	r7, r1
 80045f0:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 80045f2:	f7fe fff9 	bl	80035e8 <HAL_GetTick>
 80045f6:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045f8:	e004      	b.n	8004604 <HAL_I2C_Mem_Read+0x48>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe fff5 	bl	80035e8 <HAL_GetTick>
 80045fe:	1b80      	subs	r0, r0, r6
 8004600:	2819      	cmp	r0, #25
 8004602:	d86a      	bhi.n	80046da <HAL_I2C_Mem_Read+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800460c:	d1f5      	bne.n	80045fa <HAL_I2C_Mem_Read+0x3e>
    hi2c->pBuffPtr  = pData;
 800460e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004610:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004612:	2122      	movs	r1, #34	; 0x22
    hi2c->XferISR   = NULL;
 8004614:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004618:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800461c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004620:	2140      	movs	r1, #64	; 0x40
 8004622:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004626:	464b      	mov	r3, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004628:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800462c:	4642      	mov	r2, r8
    hi2c->XferCount = Size;
 800462e:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004632:	4639      	mov	r1, r7
 8004634:	4628      	mov	r0, r5
 8004636:	f7ff fdc7 	bl	80041c8 <I2C_RequestMemoryRead>
 800463a:	2800      	cmp	r0, #0
 800463c:	f040 8095 	bne.w	800476a <HAL_I2C_Mem_Read+0x1ae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004640:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	2bff      	cmp	r3, #255	; 0xff
 8004646:	d874      	bhi.n	8004732 <HAL_I2C_Mem_Read+0x176>
      hi2c->XferSize = hi2c->XferCount;
 8004648:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800464a:	682a      	ldr	r2, [r5, #0]
 800464c:	4854      	ldr	r0, [pc, #336]	; (80047a0 <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = hi2c->XferCount;
 800464e:	b29b      	uxth	r3, r3
 8004650:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004652:	b2d9      	uxtb	r1, r3
 8004654:	6853      	ldr	r3, [r2, #4]
 8004656:	4018      	ands	r0, r3
 8004658:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800465c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004660:	4303      	orrs	r3, r0
 8004662:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 8004666:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800466a:	6053      	str	r3, [r2, #4]
 800466c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004670:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80047ac <HAL_I2C_Mem_Read+0x1f0>
 8004674:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80047b0 <HAL_I2C_Mem_Read+0x1f4>
 8004678:	b2bf      	uxth	r7, r7
 800467a:	e001      	b.n	8004680 <HAL_I2C_Mem_Read+0xc4>
    if (Timeout != HAL_MAX_DELAY)
 800467c:	1c63      	adds	r3, r4, #1
 800467e:	d125      	bne.n	80046cc <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004680:	6993      	ldr	r3, [r2, #24]
 8004682:	0758      	lsls	r0, r3, #29
 8004684:	d5fa      	bpl.n	800467c <HAL_I2C_Mem_Read+0xc0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800468a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800468c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800468e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8004690:	3b01      	subs	r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	856b      	strh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004696:	3201      	adds	r2, #1
      hi2c->XferSize--;
 8004698:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->pBuffPtr++;
 800469a:	626a      	str	r2, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800469c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046a2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 80046a4:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046a6:	b102      	cbz	r2, 80046aa <HAL_I2C_Mem_Read+0xee>
 80046a8:	b373      	cbz	r3, 8004708 <HAL_I2C_Mem_Read+0x14c>
    } while (hi2c->XferCount > 0U);
 80046aa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d05f      	beq.n	8004772 <HAL_I2C_Mem_Read+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b2:	682a      	ldr	r2, [r5, #0]
 80046b4:	e7e4      	b.n	8004680 <HAL_I2C_Mem_Read+0xc4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ba:	646b      	str	r3, [r5, #68]	; 0x44
      return  HAL_ERROR;
 80046bc:	2001      	movs	r0, #1
}
 80046be:	b003      	add	sp, #12
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 80046c4:	2002      	movs	r0, #2
}
 80046c6:	b003      	add	sp, #12
 80046c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046cc:	f7fe ff8c 	bl	80035e8 <HAL_GetTick>
 80046d0:	1b80      	subs	r0, r0, r6
 80046d2:	4284      	cmp	r4, r0
 80046d4:	d301      	bcc.n	80046da <HAL_I2C_Mem_Read+0x11e>
 80046d6:	2c00      	cmp	r4, #0
 80046d8:	d1eb      	bne.n	80046b2 <HAL_I2C_Mem_Read+0xf6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046dc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	2120      	movs	r1, #32
          return HAL_ERROR;
 80046e4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046e6:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80046e8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80046f4:	b003      	add	sp, #12
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fe ff75 	bl	80035e8 <HAL_GetTick>
 80046fe:	1b80      	subs	r0, r0, r6
 8004700:	4284      	cmp	r4, r0
 8004702:	d3ea      	bcc.n	80046da <HAL_I2C_Mem_Read+0x11e>
 8004704:	2c00      	cmp	r4, #0
 8004706:	d0e8      	beq.n	80046da <HAL_I2C_Mem_Read+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004708:	682a      	ldr	r2, [r5, #0]
 800470a:	e001      	b.n	8004710 <HAL_I2C_Mem_Read+0x154>
    if (Timeout != HAL_MAX_DELAY)
 800470c:	1c61      	adds	r1, r4, #1
 800470e:	d1f4      	bne.n	80046fa <HAL_I2C_Mem_Read+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004710:	6993      	ldr	r3, [r2, #24]
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	d5fa      	bpl.n	800470c <HAL_I2C_Mem_Read+0x150>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004716:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2bff      	cmp	r3, #255	; 0xff
 800471c:	d917      	bls.n	800474e <HAL_I2C_Mem_Read+0x192>
  MODIFY_REG(hi2c->Instance->CR2,
 800471e:	6853      	ldr	r3, [r2, #4]
 8004720:	ea03 0308 	and.w	r3, r3, r8
 8004724:	433b      	orrs	r3, r7
 8004726:	ea43 0309 	orr.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800472a:	21ff      	movs	r1, #255	; 0xff
 800472c:	8529      	strh	r1, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800472e:	6053      	str	r3, [r2, #4]
}
 8004730:	e7bb      	b.n	80046aa <HAL_I2C_Mem_Read+0xee>
  MODIFY_REG(hi2c->Instance->CR2,
 8004732:	682a      	ldr	r2, [r5, #0]
 8004734:	491a      	ldr	r1, [pc, #104]	; (80047a0 <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004736:	23ff      	movs	r3, #255	; 0xff
 8004738:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800473a:	6853      	ldr	r3, [r2, #4]
 800473c:	f3c7 0009 	ubfx	r0, r7, #0, #10
 8004740:	400b      	ands	r3, r1
 8004742:	4918      	ldr	r1, [pc, #96]	; (80047a4 <HAL_I2C_Mem_Read+0x1e8>)
 8004744:	4303      	orrs	r3, r0
 8004746:	4319      	orrs	r1, r3
 8004748:	6051      	str	r1, [r2, #4]
 800474a:	4607      	mov	r7, r0
}
 800474c:	e790      	b.n	8004670 <HAL_I2C_Mem_Read+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800474e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004754:	b2d9      	uxtb	r1, r3
 8004756:	6853      	ldr	r3, [r2, #4]
 8004758:	ea03 0308 	and.w	r3, r3, r8
 800475c:	433b      	orrs	r3, r7
 800475e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004766:	6053      	str	r3, [r2, #4]
}
 8004768:	e79f      	b.n	80046aa <HAL_I2C_Mem_Read+0xee>
      __HAL_UNLOCK(hi2c);
 800476a:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800476e:	2001      	movs	r0, #1
 8004770:	e7a5      	b.n	80046be <HAL_I2C_Mem_Read+0x102>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004772:	4632      	mov	r2, r6
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f7ff fcfa 	bl	8004170 <I2C_WaitOnSTOPFlagUntilTimeout>
 800477c:	b968      	cbnz	r0, 800479a <HAL_I2C_Mem_Read+0x1de>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800477e:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8004780:	4c09      	ldr	r4, [pc, #36]	; (80047a8 <HAL_I2C_Mem_Read+0x1ec>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004782:	2120      	movs	r1, #32
 8004784:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4022      	ands	r2, r4
 800478a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004790:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004794:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 8004798:	e791      	b.n	80046be <HAL_I2C_Mem_Read+0x102>
      return HAL_ERROR;
 800479a:	2001      	movs	r0, #1
 800479c:	e78f      	b.n	80046be <HAL_I2C_Mem_Read+0x102>
 800479e:	bf00      	nop
 80047a0:	fc009800 	.word	0xfc009800
 80047a4:	81ff2400 	.word	0x81ff2400
 80047a8:	fe00e800 	.word	0xfe00e800
 80047ac:	fc009c00 	.word	0xfc009c00
 80047b0:	01ff0000 	.word	0x01ff0000

080047b4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80047b8:	2a20      	cmp	r2, #32
 80047ba:	d123      	bne.n	8004804 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80047bc:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80047c4:	2a01      	cmp	r2, #1
 80047c6:	4603      	mov	r3, r0
 80047c8:	d01c      	beq.n	8004804 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ca:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047cc:	2024      	movs	r0, #36	; 0x24
{
 80047ce:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047d0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80047d4:	6810      	ldr	r0, [r2, #0]
 80047d6:	f020 0001 	bic.w	r0, r0, #1
 80047da:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047dc:	6810      	ldr	r0, [r2, #0]
 80047de:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80047e2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047e4:	6810      	ldr	r0, [r2, #0]
 80047e6:	4301      	orrs	r1, r0
 80047e8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ea:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ec:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80047f0:	f041 0101 	orr.w	r1, r1, #1
 80047f4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80047fa:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 80047fe:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004800:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8004804:	2002      	movs	r0, #2
}
 8004806:	4770      	bx	lr

08004808 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004808:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800480c:	2a20      	cmp	r2, #32
 800480e:	d122      	bne.n	8004856 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8004810:	b500      	push	{lr}
 8004812:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004816:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800481a:	2a01      	cmp	r2, #1
 800481c:	4603      	mov	r3, r0
 800481e:	d01c      	beq.n	800485a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004820:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004822:	2024      	movs	r0, #36	; 0x24
 8004824:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004828:	6810      	ldr	r0, [r2, #0]
 800482a:	f020 0001 	bic.w	r0, r0, #1
 800482e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004830:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004832:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004836:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800483a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800483c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483e:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8004842:	f041 0101 	orr.w	r1, r1, #1
 8004846:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004848:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800484c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8004850:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004852:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8004856:	2002      	movs	r0, #2
}
 8004858:	4770      	bx	lr
    return HAL_BUSY;
 800485a:	2002      	movs	r0, #2
}
 800485c:	f85d fb04 	ldr.w	pc, [sp], #4

08004860 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004860:	4b02      	ldr	r3, [pc, #8]	; (800486c <HAL_PWREx_GetVoltageRange+0xc>)
 8004862:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004864:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40007000 	.word	0x40007000

08004870 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004870:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004874:	d00e      	beq.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004876:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004882:	d02d      	beq.n	80048e0 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800488a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800488e:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004894:	4914      	ldr	r1, [pc, #80]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004896:	680b      	ldr	r3, [r1, #0]
 8004898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a0:	d01e      	beq.n	80048e0 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a2:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80048a6:	4812      	ldr	r0, [pc, #72]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0x80>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b0:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	2232      	movs	r2, #50	; 0x32
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ba:	694a      	ldr	r2, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048bc:	fba0 0303 	umull	r0, r3, r0, r3
 80048c0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c2:	0550      	lsls	r0, r2, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048c4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c8:	d506      	bpl.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x68>
 80048ca:	e000      	b.n	80048ce <HAL_PWREx_ControlVoltageScaling+0x5e>
 80048cc:	b123      	cbz	r3, 80048d8 <HAL_PWREx_ControlVoltageScaling+0x68>
 80048ce:	694a      	ldr	r2, [r1, #20]
 80048d0:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 80048d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d6:	d4f9      	bmi.n	80048cc <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	055b      	lsls	r3, r3, #21
 80048de:	d401      	bmi.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 80048e0:	2000      	movs	r0, #0
 80048e2:	4770      	bx	lr
        return HAL_TIMEOUT;
 80048e4:	2003      	movs	r0, #3
}
 80048e6:	4770      	bx	lr
 80048e8:	40007000 	.word	0x40007000
 80048ec:	20000000 	.word	0x20000000
 80048f0:	431bde83 	.word	0x431bde83

080048f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048f4:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f6:	4d20      	ldr	r5, [pc, #128]	; (8004978 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80048f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80048fa:	00db      	lsls	r3, r3, #3
{
 80048fc:	b083      	sub	sp, #12
 80048fe:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004900:	d51c      	bpl.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004902:	f7ff ffad 	bl	8004860 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004906:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800490a:	d029      	beq.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800490c:	2c80      	cmp	r4, #128	; 0x80
 800490e:	d813      	bhi.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004910:	d02f      	beq.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004912:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8004916:	fab4 f484 	clz	r4, r4
 800491a:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800491c:	4917      	ldr	r1, [pc, #92]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800491e:	680b      	ldr	r3, [r1, #0]
 8004920:	f023 0307 	bic.w	r3, r3, #7
 8004924:	4323      	orrs	r3, r4
 8004926:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004928:	6808      	ldr	r0, [r1, #0]
 800492a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800492e:	1b00      	subs	r0, r0, r4
 8004930:	bf18      	it	ne
 8004932:	2001      	movne	r0, #1
 8004934:	b003      	add	sp, #12
 8004936:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 8004938:	2403      	movs	r4, #3
 800493a:	e7ef      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800493e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004942:	65ab      	str	r3, [r5, #88]	; 0x58
 8004944:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800494e:	f7ff ff87 	bl	8004860 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004954:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800495e:	d1d5      	bne.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8004960:	2c80      	cmp	r4, #128	; 0x80
 8004962:	d904      	bls.n	800496e <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004964:	2ca0      	cmp	r4, #160	; 0xa0
 8004966:	bf8c      	ite	hi
 8004968:	2402      	movhi	r4, #2
 800496a:	2401      	movls	r4, #1
 800496c:	e7d6      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800496e:	2400      	movs	r4, #0
 8004970:	e7d4      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004972:	2402      	movs	r4, #2
 8004974:	e7d2      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x28>
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	40022000 	.word	0x40022000

08004980 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004982:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004984:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004986:	f013 030c 	ands.w	r3, r3, #12
 800498a:	d008      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x1e>
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d038      	beq.n	8004a02 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004990:	2b04      	cmp	r3, #4
 8004992:	d034      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004994:	2b08      	cmp	r3, #8
 8004996:	4824      	ldr	r0, [pc, #144]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004998:	bf18      	it	ne
 800499a:	2000      	movne	r0, #0
 800499c:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800499e:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049a0:	6811      	ldr	r1, [r2, #0]
 80049a2:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049a4:	bf54      	ite	pl
 80049a6:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049aa:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80049ac:	491f      	ldr	r1, [pc, #124]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049ae:	bf54      	ite	pl
 80049b0:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049b4:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80049b8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049bc:	b303      	cbz	r3, 8004a00 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d12d      	bne.n	8004a1e <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d025      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0x9a>
 80049ce:	4a16      	ldr	r2, [pc, #88]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xa8>)
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	bf08      	it	eq
 80049d4:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049d8:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049da:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049e2:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049e6:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ea:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049ec:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049f0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f2:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049f4:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 80049f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80049fc:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80049fe:	480c      	ldr	r0, [pc, #48]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8004a00:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a02:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a06:	2a01      	cmp	r2, #1
 8004a08:	d0c9      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004a12:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a14:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8004a18:	d1d9      	bne.n	80049ce <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8004a1a:	4805      	ldr	r0, [pc, #20]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a1c:	e7db      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x56>
 8004a1e:	2000      	movs	r0, #0
  return sysclockfreq;
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	007a1200 	.word	0x007a1200
 8004a2c:	0800b554 	.word	0x0800b554
 8004a30:	00f42400 	.word	0x00f42400

08004a34 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004a34:	2800      	cmp	r0, #0
 8004a36:	f000 8208 	beq.w	8004e4a <HAL_RCC_OscConfig+0x416>
{
 8004a3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3e:	4a8a      	ldr	r2, [pc, #552]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a40:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a42:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	68d6      	ldr	r6, [r2, #12]
 8004a46:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a48:	06d8      	lsls	r0, r3, #27
{
 8004a4a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a50:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a54:	d52e      	bpl.n	8004ab4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	f000 810d 	beq.w	8004c76 <HAL_RCC_OscConfig+0x242>
 8004a5c:	2d0c      	cmp	r5, #12
 8004a5e:	f000 8107 	beq.w	8004c70 <HAL_RCC_OscConfig+0x23c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a62:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8004a64:	4f80      	ldr	r7, [pc, #512]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 817e 	beq.w	8004d68 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_MSI_ENABLE();
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004a74:	f7fe fdb8 	bl	80035e8 <HAL_GetTick>
 8004a78:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a7a:	e006      	b.n	8004a8a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a7c:	f7fe fdb4 	bl	80035e8 <HAL_GetTick>
 8004a80:	eba0 0008 	sub.w	r0, r0, r8
 8004a84:	2802      	cmp	r0, #2
 8004a86:	f200 817f 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	079b      	lsls	r3, r3, #30
 8004a8e:	d5f5      	bpl.n	8004a7c <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f043 0308 	orr.w	r3, r3, #8
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6a22      	ldr	r2, [r4, #32]
 8004a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69e2      	ldr	r2, [r4, #28]
 8004aa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ab0:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	07d9      	lsls	r1, r3, #31
 8004ab6:	f100 80ad 	bmi.w	8004c14 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aba:	0799      	lsls	r1, r3, #30
 8004abc:	d523      	bpl.n	8004b06 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004abe:	2d04      	cmp	r5, #4
 8004ac0:	f000 8142 	beq.w	8004d48 <HAL_RCC_OscConfig+0x314>
 8004ac4:	2d0c      	cmp	r5, #12
 8004ac6:	f000 813c 	beq.w	8004d42 <HAL_RCC_OscConfig+0x30e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aca:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004acc:	4e66      	ldr	r6, [pc, #408]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8175 	beq.w	8004dbe <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ada:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004adc:	f7fe fd84 	bl	80035e8 <HAL_GetTick>
 8004ae0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae2:	e005      	b.n	8004af0 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fe fd80 	bl	80035e8 <HAL_GetTick>
 8004ae8:	1bc0      	subs	r0, r0, r7
 8004aea:	2802      	cmp	r0, #2
 8004aec:	f200 814c 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af0:	6833      	ldr	r3, [r6, #0]
 8004af2:	055b      	lsls	r3, r3, #21
 8004af4:	d5f6      	bpl.n	8004ae4 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	6873      	ldr	r3, [r6, #4]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004afe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b02:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	0719      	lsls	r1, r3, #28
 8004b08:	d519      	bpl.n	8004b3e <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b0a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004b0c:	4e56      	ldr	r6, [pc, #344]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8103 	beq.w	8004d1a <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 8004b14:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004b20:	f7fe fd62 	bl	80035e8 <HAL_GetTick>
 8004b24:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b26:	e005      	b.n	8004b34 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fe fd5e 	bl	80035e8 <HAL_GetTick>
 8004b2c:	1bc0      	subs	r0, r0, r7
 8004b2e:	2802      	cmp	r0, #2
 8004b30:	f200 812a 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b34:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004b38:	079a      	lsls	r2, r3, #30
 8004b3a:	d5f5      	bpl.n	8004b28 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	0758      	lsls	r0, r3, #29
 8004b40:	d53e      	bpl.n	8004bc0 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b42:	4b49      	ldr	r3, [pc, #292]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
 8004b44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b46:	00d1      	lsls	r1, r2, #3
 8004b48:	f100 8137 	bmi.w	8004dba <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b52:	659a      	str	r2, [r3, #88]	; 0x58
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b5e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b60:	4f42      	ldr	r7, [pc, #264]	; (8004c6c <HAL_RCC_OscConfig+0x238>)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	05da      	lsls	r2, r3, #23
 8004b66:	f140 8172 	bpl.w	8004e4e <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f000 8138 	beq.w	8004de2 <HAL_RCC_OscConfig+0x3ae>
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	f000 81f9 	beq.w	8004f6a <HAL_RCC_OscConfig+0x536>
 8004b78:	4f3b      	ldr	r7, [pc, #236]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
 8004b7a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004b86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004b8a:	f022 0204 	bic.w	r2, r2, #4
 8004b8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 812c 	bne.w	8004df0 <HAL_RCC_OscConfig+0x3bc>
      tickstart = HAL_GetTick();
 8004b98:	f7fe fd26 	bl	80035e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004ba0:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba2:	e006      	b.n	8004bb2 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fe fd20 	bl	80035e8 <HAL_GetTick>
 8004ba8:	eba0 0008 	sub.w	r0, r0, r8
 8004bac:	4548      	cmp	r0, r9
 8004bae:	f200 80eb 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bb6:	0799      	lsls	r1, r3, #30
 8004bb8:	d4f4      	bmi.n	8004ba4 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8004bba:	2e00      	cmp	r6, #0
 8004bbc:	f040 815e 	bne.w	8004e7c <HAL_RCC_OscConfig+0x448>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bc2:	b31b      	cbz	r3, 8004c0c <HAL_RCC_OscConfig+0x1d8>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	f000 8172 	beq.w	8004eae <HAL_RCC_OscConfig+0x47a>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bca:	2d0c      	cmp	r5, #12
 8004bcc:	f000 8095 	beq.w	8004cfa <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8004bd0:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004bd8:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8004be0:	f000 8147 	beq.w	8004e72 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004be4:	4c20      	ldr	r4, [pc, #128]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004bf2:	f7fe fcf9 	bl	80035e8 <HAL_GetTick>
 8004bf6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf8:	e005      	b.n	8004c06 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfa:	f7fe fcf5 	bl	80035e8 <HAL_GetTick>
 8004bfe:	1b40      	subs	r0, r0, r5
 8004c00:	2802      	cmp	r0, #2
 8004c02:	f200 80c1 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	d4f6      	bmi.n	8004bfa <HAL_RCC_OscConfig+0x1c6>
  return HAL_OK;
 8004c0c:	2000      	movs	r0, #0
}
 8004c0e:	b003      	add	sp, #12
 8004c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c14:	2d08      	cmp	r5, #8
 8004c16:	d076      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2d2>
 8004c18:	2d0c      	cmp	r5, #12
 8004c1a:	d072      	beq.n	8004d02 <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c22:	f000 80b5 	beq.w	8004d90 <HAL_RCC_OscConfig+0x35c>
 8004c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c2a:	f000 8133 	beq.w	8004e94 <HAL_RCC_OscConfig+0x460>
 8004c2e:	4f0e      	ldr	r7, [pc, #56]	; (8004c68 <HAL_RCC_OscConfig+0x234>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c36:	603a      	str	r2, [r7, #0]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c3e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 80aa 	bne.w	8004d9a <HAL_RCC_OscConfig+0x366>
        tickstart = HAL_GetTick();
 8004c46:	f7fe fccf 	bl	80035e8 <HAL_GetTick>
 8004c4a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c4c:	e006      	b.n	8004c5c <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c4e:	f7fe fccb 	bl	80035e8 <HAL_GetTick>
 8004c52:	eba0 0008 	sub.w	r0, r0, r8
 8004c56:	2864      	cmp	r0, #100	; 0x64
 8004c58:	f200 8096 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	0398      	lsls	r0, r3, #14
 8004c60:	d4f5      	bmi.n	8004c4e <HAL_RCC_OscConfig+0x21a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	e729      	b.n	8004aba <HAL_RCC_OscConfig+0x86>
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c70:	2e01      	cmp	r6, #1
 8004c72:	f47f aef6 	bne.w	8004a62 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c76:	4b9b      	ldr	r3, [pc, #620]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	0799      	lsls	r1, r3, #30
 8004c7c:	d43a      	bmi.n	8004cf4 <HAL_RCC_OscConfig+0x2c0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c7e:	4b99      	ldr	r3, [pc, #612]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004c80:	6a20      	ldr	r0, [r4, #32]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	0712      	lsls	r2, r2, #28
 8004c86:	bf56      	itet	pl
 8004c88:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8004c8c:	681b      	ldrmi	r3, [r3, #0]
 8004c8e:	091b      	lsrpl	r3, r3, #4
 8004c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c94:	4298      	cmp	r0, r3
 8004c96:	f200 80c0 	bhi.w	8004e1a <HAL_RCC_OscConfig+0x3e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c9a:	4b92      	ldr	r3, [pc, #584]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f042 0208 	orr.w	r2, r2, #8
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004caa:	4302      	orrs	r2, r0
 8004cac:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	69e1      	ldr	r1, [r4, #28]
 8004cb2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004cb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004cba:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	f000 80e3 	beq.w	8004e88 <HAL_RCC_OscConfig+0x454>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cc2:	f7ff fe5d 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4b87      	ldr	r3, [pc, #540]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004cc8:	4a87      	ldr	r2, [pc, #540]	; (8004ee8 <HAL_RCC_OscConfig+0x4b4>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004cd0:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8004cd2:	4a86      	ldr	r2, [pc, #536]	; (8004eec <HAL_RCC_OscConfig+0x4b8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8004cdc:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cde:	4a84      	ldr	r2, [pc, #528]	; (8004ef0 <HAL_RCC_OscConfig+0x4bc>)
 8004ce0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8004ce2:	f7fe fc37 	bl	8003554 <HAL_InitTick>
        if(status != HAL_OK)
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d191      	bne.n	8004c0e <HAL_RCC_OscConfig+0x1da>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	07d9      	lsls	r1, r3, #31
 8004cee:	f57f aee4 	bpl.w	8004aba <HAL_RCC_OscConfig+0x86>
 8004cf2:	e78f      	b.n	8004c14 <HAL_RCC_OscConfig+0x1e0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cf4:	69a3      	ldr	r3, [r4, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1c1      	bne.n	8004c7e <HAL_RCC_OscConfig+0x24a>
    return HAL_ERROR;
 8004cfa:	2001      	movs	r0, #1
}
 8004cfc:	b003      	add	sp, #12
 8004cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d02:	2e03      	cmp	r6, #3
 8004d04:	d18a      	bne.n	8004c1c <HAL_RCC_OscConfig+0x1e8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d06:	4a77      	ldr	r2, [pc, #476]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	0392      	lsls	r2, r2, #14
 8004d0c:	f57f aed5 	bpl.w	8004aba <HAL_RCC_OscConfig+0x86>
 8004d10:	6862      	ldr	r2, [r4, #4]
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	f47f aed1 	bne.w	8004aba <HAL_RCC_OscConfig+0x86>
 8004d18:	e7ef      	b.n	8004cfa <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_LSI_DISABLE();
 8004d1a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d26:	f7fe fc5f 	bl	80035e8 <HAL_GetTick>
 8004d2a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d2c:	e004      	b.n	8004d38 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fe fc5b 	bl	80035e8 <HAL_GetTick>
 8004d32:	1bc0      	subs	r0, r0, r7
 8004d34:	2802      	cmp	r0, #2
 8004d36:	d827      	bhi.n	8004d88 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d38:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004d3c:	079b      	lsls	r3, r3, #30
 8004d3e:	d4f6      	bmi.n	8004d2e <HAL_RCC_OscConfig+0x2fa>
 8004d40:	e6fc      	b.n	8004b3c <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d42:	2e02      	cmp	r6, #2
 8004d44:	f47f aec1 	bne.w	8004aca <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d48:	4a66      	ldr	r2, [pc, #408]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	0552      	lsls	r2, r2, #21
 8004d4e:	d502      	bpl.n	8004d56 <HAL_RCC_OscConfig+0x322>
 8004d50:	68e2      	ldr	r2, [r4, #12]
 8004d52:	2a00      	cmp	r2, #0
 8004d54:	d0d1      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4963      	ldr	r1, [pc, #396]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d58:	6920      	ldr	r0, [r4, #16]
 8004d5a:	684a      	ldr	r2, [r1, #4]
 8004d5c:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8004d60:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004d64:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d66:	e6ce      	b.n	8004b06 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004d70:	f7fe fc3a 	bl	80035e8 <HAL_GetTick>
 8004d74:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	0798      	lsls	r0, r3, #30
 8004d7a:	d5b6      	bpl.n	8004cea <HAL_RCC_OscConfig+0x2b6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d7c:	f7fe fc34 	bl	80035e8 <HAL_GetTick>
 8004d80:	eba0 0008 	sub.w	r0, r0, r8
 8004d84:	2802      	cmp	r0, #2
 8004d86:	d9f6      	bls.n	8004d76 <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8004d88:	2003      	movs	r0, #3
}
 8004d8a:	b003      	add	sp, #12
 8004d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d90:	4a54      	ldr	r2, [pc, #336]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d9a:	f7fe fc25 	bl	80035e8 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004ee4 <HAL_RCC_OscConfig+0x4b0>
        tickstart = HAL_GetTick();
 8004da2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da4:	e004      	b.n	8004db0 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da6:	f7fe fc1f 	bl	80035e8 <HAL_GetTick>
 8004daa:	1bc0      	subs	r0, r0, r7
 8004dac:	2864      	cmp	r0, #100	; 0x64
 8004dae:	d8eb      	bhi.n	8004d88 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db0:	f8d8 3000 	ldr.w	r3, [r8]
 8004db4:	039b      	lsls	r3, r3, #14
 8004db6:	d5f6      	bpl.n	8004da6 <HAL_RCC_OscConfig+0x372>
 8004db8:	e753      	b.n	8004c62 <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 8004dba:	2600      	movs	r6, #0
 8004dbc:	e6d0      	b.n	8004b60 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8004dbe:	6833      	ldr	r3, [r6, #0]
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004dc6:	f7fe fc0f 	bl	80035e8 <HAL_GetTick>
 8004dca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dcc:	e004      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dce:	f7fe fc0b 	bl	80035e8 <HAL_GetTick>
 8004dd2:	1bc0      	subs	r0, r0, r7
 8004dd4:	2802      	cmp	r0, #2
 8004dd6:	d8d7      	bhi.n	8004d88 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dd8:	6833      	ldr	r3, [r6, #0]
 8004dda:	0558      	lsls	r0, r3, #21
 8004ddc:	d4f7      	bmi.n	8004dce <HAL_RCC_OscConfig+0x39a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	e691      	b.n	8004b06 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de2:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004de4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004df0:	f7fe fbfa 	bl	80035e8 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8004ee4 <HAL_RCC_OscConfig+0x4b0>
      tickstart = HAL_GetTick();
 8004df8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	e004      	b.n	8004e0a <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fe fbf2 	bl	80035e8 <HAL_GetTick>
 8004e04:	1bc0      	subs	r0, r0, r7
 8004e06:	4548      	cmp	r0, r9
 8004e08:	d8be      	bhi.n	8004d88 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0a:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8004e0e:	0798      	lsls	r0, r3, #30
 8004e10:	d5f6      	bpl.n	8004e00 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	f43f aed4 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x18c>
 8004e18:	e030      	b.n	8004e7c <HAL_RCC_OscConfig+0x448>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e1a:	f7ff fd6b 	bl	80048f4 <RCC_SetFlashLatencyFromMSIRange>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	f47f af6b 	bne.w	8004cfa <HAL_RCC_OscConfig+0x2c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e24:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	f042 0208 	orr.w	r2, r2, #8
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	6a21      	ldr	r1, [r4, #32]
 8004e32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004e36:	430a      	orrs	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	69e1      	ldr	r1, [r4, #28]
 8004e3e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004e42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	e73b      	b.n	8004cc2 <HAL_RCC_OscConfig+0x28e>
    return HAL_ERROR;
 8004e4a:	2001      	movs	r0, #1
}
 8004e4c:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004e56:	f7fe fbc7 	bl	80035e8 <HAL_GetTick>
 8004e5a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	05db      	lsls	r3, r3, #23
 8004e60:	f53f ae83 	bmi.w	8004b6a <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e64:	f7fe fbc0 	bl	80035e8 <HAL_GetTick>
 8004e68:	eba0 0008 	sub.w	r0, r0, r8
 8004e6c:	2802      	cmp	r0, #2
 8004e6e:	d9f5      	bls.n	8004e5c <HAL_RCC_OscConfig+0x428>
 8004e70:	e78a      	b.n	8004d88 <HAL_RCC_OscConfig+0x354>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	f022 0203 	bic.w	r2, r2, #3
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	e6b3      	b.n	8004be4 <HAL_RCC_OscConfig+0x1b0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004e7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6593      	str	r3, [r2, #88]	; 0x58
 8004e86:	e69b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e88:	f7ff fd34 	bl	80048f4 <RCC_SetFlashLatencyFromMSIRange>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	f43f af18 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x28e>
 8004e92:	e732      	b.n	8004cfa <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e98:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004eaa:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eac:	e775      	b.n	8004d9a <HAL_RCC_OscConfig+0x366>
      pll_config = RCC->PLLCFGR;
 8004eae:	4e0d      	ldr	r6, [pc, #52]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8004eb2:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb4:	f003 0103 	and.w	r1, r3, #3
 8004eb8:	4291      	cmp	r1, r2
 8004eba:	d064      	beq.n	8004f86 <HAL_RCC_OscConfig+0x552>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ebc:	2d0c      	cmp	r5, #12
 8004ebe:	f43f af1c 	beq.w	8004cfa <HAL_RCC_OscConfig+0x2c6>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ec2:	4d08      	ldr	r5, [pc, #32]	; (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	f53f af17 	bmi.w	8004cfa <HAL_RCC_OscConfig+0x2c6>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	f53f af13 	bmi.w	8004cfa <HAL_RCC_OscConfig+0x2c6>
            __HAL_RCC_PLL_DISABLE();
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eda:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004edc:	f7fe fb84 	bl	80035e8 <HAL_GetTick>
 8004ee0:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee2:	e00d      	b.n	8004f00 <HAL_RCC_OscConfig+0x4cc>
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	0800b53c 	.word	0x0800b53c
 8004eec:	20000018 	.word	0x20000018
 8004ef0:	20000000 	.word	0x20000000
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fe fb78 	bl	80035e8 <HAL_GetTick>
 8004ef8:	1b80      	subs	r0, r0, r6
 8004efa:	2802      	cmp	r0, #2
 8004efc:	f63f af44 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	019f      	lsls	r7, r3, #6
 8004f04:	d4f6      	bmi.n	8004ef4 <HAL_RCC_OscConfig+0x4c0>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f06:	68e9      	ldr	r1, [r5, #12]
 8004f08:	4b3f      	ldr	r3, [pc, #252]	; (8005008 <HAL_RCC_OscConfig+0x5d4>)
 8004f0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0c:	4e3f      	ldr	r6, [pc, #252]	; (800500c <HAL_RCC_OscConfig+0x5d8>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f0e:	400b      	ands	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
 8004f16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f1a:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8004f1e:	3a01      	subs	r2, #1
 8004f20:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004f24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f26:	0900      	lsrs	r0, r0, #4
 8004f28:	0849      	lsrs	r1, r1, #1
 8004f2a:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8004f2e:	3901      	subs	r1, #1
 8004f30:	0852      	lsrs	r2, r2, #1
 8004f32:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004f36:	3a01      	subs	r2, #1
 8004f38:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004f3c:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8004f3e:	682b      	ldr	r3, [r5, #0]
 8004f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f44:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f46:	68eb      	ldr	r3, [r5, #12]
 8004f48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4c:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8004f4e:	f7fe fb4b 	bl	80035e8 <HAL_GetTick>
 8004f52:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f54:	e005      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fe fb47 	bl	80035e8 <HAL_GetTick>
 8004f5a:	1b00      	subs	r0, r0, r4
 8004f5c:	2802      	cmp	r0, #2
 8004f5e:	f63f af13 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f62:	6833      	ldr	r3, [r6, #0]
 8004f64:	0198      	lsls	r0, r3, #6
 8004f66:	d5f6      	bpl.n	8004f56 <HAL_RCC_OscConfig+0x522>
 8004f68:	e650      	b.n	8004c0c <HAL_RCC_OscConfig+0x1d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6a:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_RCC_OscConfig+0x5d8>)
 8004f6c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004f70:	f042 0204 	orr.w	r2, r2, #4
 8004f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004f78:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f84:	e734      	b.n	8004df0 <HAL_RCC_OscConfig+0x3bc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f8c:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004f92:	d193      	bne.n	8004ebc <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004f9e:	d18d      	bne.n	8004ebc <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004fa2:	3a07      	subs	r2, #7
 8004fa4:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8004fa8:	bf18      	it	ne
 8004faa:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fac:	4291      	cmp	r1, r2
 8004fae:	d185      	bne.n	8004ebc <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004fb2:	0852      	lsrs	r2, r2, #1
 8004fb4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004fb8:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fba:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004fbe:	f47f af7d 	bne.w	8004ebc <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004fc4:	0852      	lsrs	r2, r2, #1
 8004fc6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004fca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fcc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004fd0:	f47f af74 	bne.w	8004ebc <HAL_RCC_OscConfig+0x488>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd4:	6833      	ldr	r3, [r6, #0]
 8004fd6:	0199      	lsls	r1, r3, #6
 8004fd8:	f53f ae18 	bmi.w	8004c0c <HAL_RCC_OscConfig+0x1d8>
          __HAL_RCC_PLL_ENABLE();
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe2:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fe4:	68f3      	ldr	r3, [r6, #12]
 8004fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fea:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8004fec:	f7fe fafc 	bl	80035e8 <HAL_GetTick>
 8004ff0:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	e005      	b.n	8005000 <HAL_RCC_OscConfig+0x5cc>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fe faf8 	bl	80035e8 <HAL_GetTick>
 8004ff8:	1b00      	subs	r0, r0, r4
 8004ffa:	2802      	cmp	r0, #2
 8004ffc:	f63f aec4 	bhi.w	8004d88 <HAL_RCC_OscConfig+0x354>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005000:	6833      	ldr	r3, [r6, #0]
 8005002:	019a      	lsls	r2, r3, #6
 8005004:	d5f6      	bpl.n	8004ff4 <HAL_RCC_OscConfig+0x5c0>
 8005006:	e601      	b.n	8004c0c <HAL_RCC_OscConfig+0x1d8>
 8005008:	f99d808c 	.word	0xf99d808c
 800500c:	40021000 	.word	0x40021000

08005010 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005010:	2800      	cmp	r0, #0
 8005012:	f000 8081 	beq.w	8005118 <HAL_RCC_ClockConfig+0x108>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005016:	4a45      	ldr	r2, [pc, #276]	; (800512c <HAL_RCC_ClockConfig+0x11c>)
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	428b      	cmp	r3, r1
{
 8005020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005024:	460d      	mov	r5, r1
 8005026:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	d20c      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	6813      	ldr	r3, [r2, #0]
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	430b      	orrs	r3, r1
 8005032:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	428b      	cmp	r3, r1
 800503c:	d002      	beq.n	8005044 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800503e:	2001      	movs	r0, #1
}
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	07da      	lsls	r2, r3, #31
 8005048:	d43f      	bmi.n	80050ca <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504a:	0799      	lsls	r1, r3, #30
 800504c:	d506      	bpl.n	800505c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504e:	4938      	ldr	r1, [pc, #224]	; (8005130 <HAL_RCC_ClockConfig+0x120>)
 8005050:	68a0      	ldr	r0, [r4, #8]
 8005052:	688a      	ldr	r2, [r1, #8]
 8005054:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005058:	4302      	orrs	r2, r0
 800505a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800505c:	4933      	ldr	r1, [pc, #204]	; (800512c <HAL_RCC_ClockConfig+0x11c>)
 800505e:	680a      	ldr	r2, [r1, #0]
 8005060:	f002 0207 	and.w	r2, r2, #7
 8005064:	42aa      	cmp	r2, r5
 8005066:	d909      	bls.n	800507c <HAL_RCC_ClockConfig+0x6c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005068:	680a      	ldr	r2, [r1, #0]
 800506a:	f022 0207 	bic.w	r2, r2, #7
 800506e:	432a      	orrs	r2, r5
 8005070:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	680a      	ldr	r2, [r1, #0]
 8005074:	f002 0207 	and.w	r2, r2, #7
 8005078:	42aa      	cmp	r2, r5
 800507a:	d1e0      	bne.n	800503e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	075a      	lsls	r2, r3, #29
 800507e:	d506      	bpl.n	800508e <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005080:	492b      	ldr	r1, [pc, #172]	; (8005130 <HAL_RCC_ClockConfig+0x120>)
 8005082:	68e0      	ldr	r0, [r4, #12]
 8005084:	688a      	ldr	r2, [r1, #8]
 8005086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800508a:	4302      	orrs	r2, r0
 800508c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508e:	071b      	lsls	r3, r3, #28
 8005090:	d507      	bpl.n	80050a2 <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005092:	4a27      	ldr	r2, [pc, #156]	; (8005130 <HAL_RCC_ClockConfig+0x120>)
 8005094:	6921      	ldr	r1, [r4, #16]
 8005096:	6893      	ldr	r3, [r2, #8]
 8005098:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800509c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80050a0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050a2:	f7ff fc6d 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 80050a6:	4a22      	ldr	r2, [pc, #136]	; (8005130 <HAL_RCC_ClockConfig+0x120>)
 80050a8:	4c22      	ldr	r4, [pc, #136]	; (8005134 <HAL_RCC_ClockConfig+0x124>)
 80050aa:	6892      	ldr	r2, [r2, #8]
 80050ac:	4922      	ldr	r1, [pc, #136]	; (8005138 <HAL_RCC_ClockConfig+0x128>)
 80050ae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80050b2:	4603      	mov	r3, r0
 80050b4:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80050b6:	4821      	ldr	r0, [pc, #132]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050b8:	f002 021f 	and.w	r2, r2, #31
 80050bc:	40d3      	lsrs	r3, r2
}
 80050be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80050c2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050c4:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80050c6:	f7fe ba45 	b.w	8003554 <HAL_InitTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ca:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050cc:	4b18      	ldr	r3, [pc, #96]	; (8005130 <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ce:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d0:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d2:	d023      	beq.n	800511c <HAL_RCC_ClockConfig+0x10c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d4:	2a02      	cmp	r2, #2
 80050d6:	d01c      	beq.n	8005112 <HAL_RCC_ClockConfig+0x102>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050d8:	bb2a      	cbnz	r2, 8005126 <HAL_RCC_ClockConfig+0x116>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050da:	079e      	lsls	r6, r3, #30
 80050dc:	d5af      	bpl.n	800503e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050de:	4e14      	ldr	r6, [pc, #80]	; (8005130 <HAL_RCC_ClockConfig+0x120>)
 80050e0:	68b3      	ldr	r3, [r6, #8]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80050ea:	f7fe fa7d 	bl	80035e8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80050f2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f4:	e004      	b.n	8005100 <HAL_RCC_ClockConfig+0xf0>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f6:	f7fe fa77 	bl	80035e8 <HAL_GetTick>
 80050fa:	1bc0      	subs	r0, r0, r7
 80050fc:	4540      	cmp	r0, r8
 80050fe:	d810      	bhi.n	8005122 <HAL_RCC_ClockConfig+0x112>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005100:	68b3      	ldr	r3, [r6, #8]
 8005102:	6862      	ldr	r2, [r4, #4]
 8005104:	f003 030c 	and.w	r3, r3, #12
 8005108:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800510c:	d1f3      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xe6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	e79b      	b.n	800504a <HAL_RCC_ClockConfig+0x3a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005112:	039f      	lsls	r7, r3, #14
 8005114:	d4e3      	bmi.n	80050de <HAL_RCC_ClockConfig+0xce>
 8005116:	e792      	b.n	800503e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005118:	2001      	movs	r0, #1
}
 800511a:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	d4de      	bmi.n	80050de <HAL_RCC_ClockConfig+0xce>
 8005120:	e78d      	b.n	800503e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005122:	2003      	movs	r0, #3
 8005124:	e78c      	b.n	8005040 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005126:	0558      	lsls	r0, r3, #21
 8005128:	d589      	bpl.n	800503e <HAL_RCC_ClockConfig+0x2e>
 800512a:	e7d8      	b.n	80050de <HAL_RCC_ClockConfig+0xce>
 800512c:	40022000 	.word	0x40022000
 8005130:	40021000 	.word	0x40021000
 8005134:	0800b53c 	.word	0x0800b53c
 8005138:	20000000 	.word	0x20000000
 800513c:	20000018 	.word	0x20000018

08005140 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005142:	4a06      	ldr	r2, [pc, #24]	; (800515c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005144:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005146:	4906      	ldr	r1, [pc, #24]	; (8005160 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005148:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800514c:	6808      	ldr	r0, [r1, #0]
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	f003 031f 	and.w	r3, r3, #31
}
 8005154:	40d8      	lsrs	r0, r3
 8005156:	4770      	bx	lr
 8005158:	40021000 	.word	0x40021000
 800515c:	0800b54c 	.word	0x0800b54c
 8005160:	20000000 	.word	0x20000000

08005164 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005166:	4a06      	ldr	r2, [pc, #24]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005168:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800516a:	4906      	ldr	r1, [pc, #24]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800516c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005170:	6808      	ldr	r0, [r1, #0]
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
}
 8005178:	40d8      	lsrs	r0, r3
 800517a:	4770      	bx	lr
 800517c:	40021000 	.word	0x40021000
 8005180:	0800b54c 	.word	0x0800b54c
 8005184:	20000000 	.word	0x20000000

08005188 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800518a:	4b47      	ldr	r3, [pc, #284]	; (80052a8 <RCCEx_PLLSAI1_Config+0x120>)
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	0792      	lsls	r2, r2, #30
{
 8005190:	4604      	mov	r4, r0
 8005192:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005194:	d007      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	6801      	ldr	r1, [r0, #0]
 800519a:	f002 0203 	and.w	r2, r2, #3
 800519e:	428a      	cmp	r2, r1
 80051a0:	d04c      	beq.n	800523c <RCCEx_PLLSAI1_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80051a2:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80051a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80051a6:	6800      	ldr	r0, [r0, #0]
 80051a8:	2802      	cmp	r0, #2
 80051aa:	d058      	beq.n	800525e <RCCEx_PLLSAI1_Config+0xd6>
 80051ac:	2803      	cmp	r0, #3
 80051ae:	d04f      	beq.n	8005250 <RCCEx_PLLSAI1_Config+0xc8>
 80051b0:	2801      	cmp	r0, #1
 80051b2:	d1f6      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	079b      	lsls	r3, r3, #30
 80051b8:	d5f4      	bpl.n	80051a4 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ba:	4a3b      	ldr	r2, [pc, #236]	; (80052a8 <RCCEx_PLLSAI1_Config+0x120>)
 80051bc:	68d3      	ldr	r3, [r2, #12]
 80051be:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80051c2:	4318      	orrs	r0, r3
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80051cc:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80051ce:	4d36      	ldr	r5, [pc, #216]	; (80052a8 <RCCEx_PLLSAI1_Config+0x120>)
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051d6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80051d8:	f7fe fa06 	bl	80035e8 <HAL_GetTick>
 80051dc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051de:	e004      	b.n	80051ea <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e0:	f7fe fa02 	bl	80035e8 <HAL_GetTick>
 80051e4:	1b83      	subs	r3, r0, r6
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d83d      	bhi.n	8005266 <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	011a      	lsls	r2, r3, #4
 80051ee:	d4f7      	bmi.n	80051e0 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 80051f0:	2f00      	cmp	r7, #0
 80051f2:	d13a      	bne.n	800526a <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051f4:	692b      	ldr	r3, [r5, #16]
 80051f6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80051fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005206:	0912      	lsrs	r2, r2, #4
 8005208:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800520c:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800520e:	4d26      	ldr	r5, [pc, #152]	; (80052a8 <RCCEx_PLLSAI1_Config+0x120>)
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005216:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005218:	f7fe f9e6 	bl	80035e8 <HAL_GetTick>
 800521c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800521e:	e004      	b.n	800522a <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005220:	f7fe f9e2 	bl	80035e8 <HAL_GetTick>
 8005224:	1b83      	subs	r3, r0, r6
 8005226:	2b02      	cmp	r3, #2
 8005228:	d81d      	bhi.n	8005266 <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	d5f7      	bpl.n	8005220 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005230:	692b      	ldr	r3, [r5, #16]
 8005232:	69a2      	ldr	r2, [r4, #24]
 8005234:	4313      	orrs	r3, r2
 8005236:	2000      	movs	r0, #0
 8005238:	612b      	str	r3, [r5, #16]
}
 800523a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800523c:	2a00      	cmp	r2, #0
 800523e:	d0b0      	beq.n	80051a2 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005240:	68db      	ldr	r3, [r3, #12]
       ||
 8005242:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005244:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005248:	3301      	adds	r3, #1
       ||
 800524a:	4293      	cmp	r3, r2
 800524c:	d1a9      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0x1a>
 800524e:	e7be      	b.n	80051ce <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	0395      	lsls	r5, r2, #14
 8005254:	d4b1      	bmi.n	80051ba <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	0359      	lsls	r1, r3, #13
 800525a:	d5a2      	bpl.n	80051a2 <RCCEx_PLLSAI1_Config+0x1a>
 800525c:	e7ad      	b.n	80051ba <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	055e      	lsls	r6, r3, #21
 8005262:	d59e      	bpl.n	80051a2 <RCCEx_PLLSAI1_Config+0x1a>
 8005264:	e7a9      	b.n	80051ba <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8005266:	2003      	movs	r0, #3
}
 8005268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800526a:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800526c:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800526e:	d00d      	beq.n	800528c <RCCEx_PLLSAI1_Config+0x104>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005270:	6962      	ldr	r2, [r4, #20]
 8005272:	68a1      	ldr	r1, [r4, #8]
 8005274:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005278:	0852      	lsrs	r2, r2, #1
 800527a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800527e:	3a01      	subs	r2, #1
 8005280:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005284:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005288:	612b      	str	r3, [r5, #16]
 800528a:	e7c0      	b.n	800520e <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800528c:	6922      	ldr	r2, [r4, #16]
 800528e:	68a1      	ldr	r1, [r4, #8]
 8005290:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005294:	0852      	lsrs	r2, r2, #1
 8005296:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800529a:	3a01      	subs	r2, #1
 800529c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052a0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80052a4:	612b      	str	r3, [r5, #16]
 80052a6:	e7b2      	b.n	800520e <RCCEx_PLLSAI1_Config+0x86>
 80052a8:	40021000 	.word	0x40021000

080052ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ae:	4b3f      	ldr	r3, [pc, #252]	; (80053ac <RCCEx_PLLSAI2_Config+0x100>)
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	0792      	lsls	r2, r2, #30
{
 80052b4:	4604      	mov	r4, r0
 80052b6:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052b8:	d007      	beq.n	80052ca <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	6801      	ldr	r1, [r0, #0]
 80052be:	f002 0203 	and.w	r2, r2, #3
 80052c2:	428a      	cmp	r2, r1
 80052c4:	d04c      	beq.n	8005360 <RCCEx_PLLSAI2_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80052c6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80052c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	2802      	cmp	r0, #2
 80052ce:	d058      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0xd6>
 80052d0:	2803      	cmp	r0, #3
 80052d2:	d04f      	beq.n	8005374 <RCCEx_PLLSAI2_Config+0xc8>
 80052d4:	2801      	cmp	r0, #1
 80052d6:	d1f6      	bne.n	80052c6 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	079b      	lsls	r3, r3, #30
 80052dc:	d5f4      	bpl.n	80052c8 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052de:	4a33      	ldr	r2, [pc, #204]	; (80053ac <RCCEx_PLLSAI2_Config+0x100>)
 80052e0:	68d3      	ldr	r3, [r2, #12]
 80052e2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80052e6:	4318      	orrs	r0, r3
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80052f0:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80052f2:	4d2e      	ldr	r5, [pc, #184]	; (80053ac <RCCEx_PLLSAI2_Config+0x100>)
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fa:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80052fc:	f7fe f974 	bl	80035e8 <HAL_GetTick>
 8005300:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005302:	e004      	b.n	800530e <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005304:	f7fe f970 	bl	80035e8 <HAL_GetTick>
 8005308:	1b83      	subs	r3, r0, r6
 800530a:	2b02      	cmp	r3, #2
 800530c:	d83d      	bhi.n	800538a <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800530e:	682b      	ldr	r3, [r5, #0]
 8005310:	009a      	lsls	r2, r3, #2
 8005312:	d4f7      	bmi.n	8005304 <RCCEx_PLLSAI2_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8005314:	2f00      	cmp	r7, #0
 8005316:	d13a      	bne.n	800538e <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005318:	696b      	ldr	r3, [r5, #20]
 800531a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800531e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800532a:	0912      	lsrs	r2, r2, #4
 800532c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005330:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8005332:	4d1e      	ldr	r5, [pc, #120]	; (80053ac <RCCEx_PLLSAI2_Config+0x100>)
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800533c:	f7fe f954 	bl	80035e8 <HAL_GetTick>
 8005340:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005342:	e004      	b.n	800534e <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005344:	f7fe f950 	bl	80035e8 <HAL_GetTick>
 8005348:	1b83      	subs	r3, r0, r6
 800534a:	2b02      	cmp	r3, #2
 800534c:	d81d      	bhi.n	800538a <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	d5f7      	bpl.n	8005344 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005354:	696b      	ldr	r3, [r5, #20]
 8005356:	6962      	ldr	r2, [r4, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	2000      	movs	r0, #0
 800535c:	616b      	str	r3, [r5, #20]
}
 800535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005360:	2a00      	cmp	r2, #0
 8005362:	d0b0      	beq.n	80052c6 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005364:	68db      	ldr	r3, [r3, #12]
       ||
 8005366:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005368:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800536c:	3301      	adds	r3, #1
       ||
 800536e:	4293      	cmp	r3, r2
 8005370:	d1a9      	bne.n	80052c6 <RCCEx_PLLSAI2_Config+0x1a>
 8005372:	e7be      	b.n	80052f2 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	0395      	lsls	r5, r2, #14
 8005378:	d4b1      	bmi.n	80052de <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	0359      	lsls	r1, r3, #13
 800537e:	d5a2      	bpl.n	80052c6 <RCCEx_PLLSAI2_Config+0x1a>
 8005380:	e7ad      	b.n	80052de <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	055e      	lsls	r6, r3, #21
 8005386:	d59e      	bpl.n	80052c6 <RCCEx_PLLSAI2_Config+0x1a>
 8005388:	e7a9      	b.n	80052de <RCCEx_PLLSAI2_Config+0x32>
        status = HAL_TIMEOUT;
 800538a:	2003      	movs	r0, #3
}
 800538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800538e:	696b      	ldr	r3, [r5, #20]
 8005390:	6922      	ldr	r2, [r4, #16]
 8005392:	68a1      	ldr	r1, [r4, #8]
 8005394:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005398:	0852      	lsrs	r2, r2, #1
 800539a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800539e:	3a01      	subs	r2, #1
 80053a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053a4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80053a8:	616b      	str	r3, [r5, #20]
 80053aa:	e7c2      	b.n	8005332 <RCCEx_PLLSAI2_Config+0x86>
 80053ac:	40021000 	.word	0x40021000

080053b0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80053b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053b4:	6803      	ldr	r3, [r0, #0]
 80053b6:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 80053ba:	b083      	sub	sp, #12
 80053bc:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053be:	d020      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 80053c0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80053c2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80053c6:	f000 81d4 	beq.w	8005772 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80053ca:	f200 8122 	bhi.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80053ce:	2900      	cmp	r1, #0
 80053d0:	f000 81ab 	beq.w	800572a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80053d4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80053d8:	f040 811f 	bne.w	800561a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053dc:	2100      	movs	r1, #0
 80053de:	3020      	adds	r0, #32
 80053e0:	f7ff ff64 	bl	80052ac <RCCEx_PLLSAI2_Config>
 80053e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	f040 81d0 	bne.w	800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053ec:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053ee:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053f0:	48ae      	ldr	r0, [pc, #696]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80053f2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80053f6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80053fa:	4311      	orrs	r1, r2
 80053fc:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 8005400:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005402:	04d8      	lsls	r0, r3, #19
 8005404:	f140 810e 	bpl.w	8005624 <HAL_RCCEx_PeriphCLKConfig+0x274>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005408:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800540a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800540e:	f000 81b6 	beq.w	800577e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005412:	f200 816c 	bhi.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005416:	2900      	cmp	r1, #0
 8005418:	f000 8181 	beq.w	800571e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800541c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005420:	f040 819a 	bne.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005424:	2100      	movs	r1, #0
 8005426:	f104 0020 	add.w	r0, r4, #32
 800542a:	f7ff ff3f 	bl	80052ac <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800542e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005430:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8005432:	f1b8 0f00 	cmp.w	r8, #0
 8005436:	f040 8162 	bne.w	80056fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800543a:	499c      	ldr	r1, [pc, #624]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800543c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800543e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005442:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005446:	4302      	orrs	r2, r0
 8005448:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800544c:	0399      	lsls	r1, r3, #14
 800544e:	f100 80ed 	bmi.w	800562c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005452:	07da      	lsls	r2, r3, #31
 8005454:	d508      	bpl.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005456:	4995      	ldr	r1, [pc, #596]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005458:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800545a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800545e:	f022 0203 	bic.w	r2, r2, #3
 8005462:	4302      	orrs	r2, r0
 8005464:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005468:	079f      	lsls	r7, r3, #30
 800546a:	d508      	bpl.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800546c:	498f      	ldr	r1, [pc, #572]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800546e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005470:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005474:	f022 020c 	bic.w	r2, r2, #12
 8005478:	4302      	orrs	r2, r0
 800547a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800547e:	075e      	lsls	r6, r3, #29
 8005480:	d508      	bpl.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005482:	498a      	ldr	r1, [pc, #552]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005484:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005486:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800548a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800548e:	4302      	orrs	r2, r0
 8005490:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005494:	0718      	lsls	r0, r3, #28
 8005496:	d508      	bpl.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005498:	4984      	ldr	r1, [pc, #528]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800549a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800549c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80054a4:	4302      	orrs	r2, r0
 80054a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054aa:	06d9      	lsls	r1, r3, #27
 80054ac:	d508      	bpl.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054ae:	497f      	ldr	r1, [pc, #508]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80054b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054ba:	4302      	orrs	r2, r0
 80054bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054c0:	069a      	lsls	r2, r3, #26
 80054c2:	d508      	bpl.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054c4:	4979      	ldr	r1, [pc, #484]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80054c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054d0:	4302      	orrs	r2, r0
 80054d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054d6:	059f      	lsls	r7, r3, #22
 80054d8:	d508      	bpl.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054da:	4974      	ldr	r1, [pc, #464]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054dc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80054de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054e2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80054e6:	4302      	orrs	r2, r0
 80054e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054ec:	055e      	lsls	r6, r3, #21
 80054ee:	d508      	bpl.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054f0:	496e      	ldr	r1, [pc, #440]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054f2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80054f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054f8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80054fc:	4302      	orrs	r2, r0
 80054fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005502:	0658      	lsls	r0, r3, #25
 8005504:	d508      	bpl.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005506:	4969      	ldr	r1, [pc, #420]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005508:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800550a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800550e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005512:	4302      	orrs	r2, r0
 8005514:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005518:	0619      	lsls	r1, r3, #24
 800551a:	d508      	bpl.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800551c:	4963      	ldr	r1, [pc, #396]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800551e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005520:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005524:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005528:	4302      	orrs	r2, r0
 800552a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800552e:	05da      	lsls	r2, r3, #23
 8005530:	d508      	bpl.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005532:	495e      	ldr	r1, [pc, #376]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005536:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800553a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800553e:	4302      	orrs	r2, r0
 8005540:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005544:	049f      	lsls	r7, r3, #18
 8005546:	d510      	bpl.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005548:	4958      	ldr	r1, [pc, #352]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800554a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800554c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005550:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005554:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005556:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800555a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800555e:	f000 80f1 	beq.w	8005744 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005562:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005566:	f000 8128 	beq.w	80057ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800556a:	031e      	lsls	r6, r3, #12
 800556c:	d510      	bpl.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800556e:	494f      	ldr	r1, [pc, #316]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005570:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005572:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005576:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800557a:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800557c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005580:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005584:	f000 80e3 	beq.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005588:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800558c:	f000 811f 	beq.w	80057ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005590:	0358      	lsls	r0, r3, #13
 8005592:	d510      	bpl.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005594:	4945      	ldr	r1, [pc, #276]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005596:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005598:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800559c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80055a0:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055a2:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055aa:	f000 80c6 	beq.w	800573a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055ae:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80055b2:	f000 80f8 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b6:	0459      	lsls	r1, r3, #17
 80055b8:	d510      	bpl.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ba:	483c      	ldr	r0, [pc, #240]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80055bc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80055be:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80055c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055c6:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055c8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055cc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055d0:	f000 80c5 	beq.w	800575e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055d4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80055d8:	f000 80da 	beq.w	8005790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055dc:	041a      	lsls	r2, r3, #16
 80055de:	d508      	bpl.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e0:	4932      	ldr	r1, [pc, #200]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80055e2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80055e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055e8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80055ec:	4302      	orrs	r2, r0
 80055ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f2:	03db      	lsls	r3, r3, #15
 80055f4:	d509      	bpl.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055f6:	4a2d      	ldr	r2, [pc, #180]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80055f8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80055fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005604:	430b      	orrs	r3, r1
 8005606:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800560a:	4628      	mov	r0, r5
 800560c:	b003      	add	sp, #12
 800560e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8005612:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8005616:	f43f aeeb 	beq.w	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800561a:	04d8      	lsls	r0, r3, #19
    switch(PeriphClkInit->Sai1ClockSelection)
 800561c:	f04f 0501 	mov.w	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005620:	f53f aef2 	bmi.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005624:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005626:	0399      	lsls	r1, r3, #14
 8005628:	f57f af13 	bpl.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800562c:	4b1f      	ldr	r3, [pc, #124]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800562e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005630:	00d2      	lsls	r2, r2, #3
 8005632:	d566      	bpl.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x352>
    FlagStatus       pwrclkchanged = RESET;
 8005634:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005638:	4e1d      	ldr	r6, [pc, #116]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800563a:	6833      	ldr	r3, [r6, #0]
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005642:	f7fd ffd1 	bl	80035e8 <HAL_GetTick>
 8005646:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564a:	f7fd ffcd 	bl	80035e8 <HAL_GetTick>
 800564e:	1bc3      	subs	r3, r0, r7
 8005650:	2b02      	cmp	r3, #2
 8005652:	d862      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	d5f7      	bpl.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    if(ret == HAL_OK)
 800565a:	f1b8 0f00 	cmp.w	r8, #0
 800565e:	f040 80c0 	bne.w	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005662:	4e12      	ldr	r6, [pc, #72]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005664:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005668:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800566c:	d02b      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800566e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005672:	429a      	cmp	r2, r3
 8005674:	d029      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x31a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005676:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800567a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800567e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005682:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005686:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800568a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568e:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005692:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005694:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 8005698:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800569c:	f140 80a3 	bpl.w	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 80056a0:	f7fd ffa2 	bl	80035e8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80056a8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fd ff98 	bl	80035e8 <HAL_GetTick>
 80056b8:	1bc0      	subs	r0, r0, r7
 80056ba:	4540      	cmp	r0, r8
 80056bc:	d82d      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056be:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80056c2:	0799      	lsls	r1, r3, #30
 80056c4:	d5f6      	bpl.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80056ca:	4948      	ldr	r1, [pc, #288]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80056cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80056d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 80056da:	f1b9 0f00 	cmp.w	r9, #0
 80056de:	d004      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e0:	4a42      	ldr	r2, [pc, #264]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80056e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	e6b1      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    switch(PeriphClkInit->Sai2ClockSelection)
 80056ee:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80056f2:	d131      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80056f4:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 80056f6:	f1b8 0f00 	cmp.w	r8, #0
 80056fa:	f43f ae9e 	beq.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80056fe:	4645      	mov	r5, r8
 8005700:	e791      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x276>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005704:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005708:	659a      	str	r2, [r3, #88]	; 0x58
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005714:	f04f 0901 	mov.w	r9, #1
 8005718:	e78e      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = HAL_TIMEOUT;
 800571a:	2503      	movs	r5, #3
 800571c:	e7dd      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800571e:	1d20      	adds	r0, r4, #4
 8005720:	f7ff fd32 	bl	8005188 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005724:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005726:	4680      	mov	r8, r0
      break;
 8005728:	e683      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x82>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800572a:	3004      	adds	r0, #4
 800572c:	f7ff fd2c 	bl	8005188 <RCCEx_PLLSAI1_Config>
 8005730:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005732:	2d00      	cmp	r5, #0
 8005734:	f43f ae5a 	beq.w	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005738:	e028      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573a:	68ca      	ldr	r2, [r1, #12]
 800573c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005740:	60ca      	str	r2, [r1, #12]
 8005742:	e738      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	68ca      	ldr	r2, [r1, #12]
 8005746:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800574a:	60ca      	str	r2, [r1, #12]
 800574c:	e70d      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800574e:	68ca      	ldr	r2, [r1, #12]
 8005750:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005754:	60ca      	str	r2, [r1, #12]
 8005756:	e71b      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005758:	2501      	movs	r5, #1
 800575a:	46a8      	mov	r8, r5
 800575c:	e763      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800575e:	2102      	movs	r1, #2
 8005760:	1d20      	adds	r0, r4, #4
 8005762:	f7ff fd11 	bl	8005188 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005766:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005768:	2800      	cmp	r0, #0
 800576a:	f43f af37 	beq.w	80055dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800576e:	4605      	mov	r5, r0
 8005770:	e734      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005772:	481e      	ldr	r0, [pc, #120]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005774:	68c2      	ldr	r2, [r0, #12]
 8005776:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800577a:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 800577c:	e638      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800577e:	491b      	ldr	r1, [pc, #108]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005780:	68ca      	ldr	r2, [r1, #12]
 8005782:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005786:	60ca      	str	r2, [r1, #12]
      break;
 8005788:	46a8      	mov	r8, r5
 800578a:	e652      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x82>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	e638      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x52>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005790:	2102      	movs	r1, #2
 8005792:	f104 0020 	add.w	r0, r4, #32
 8005796:	f7ff fd89 	bl	80052ac <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800579a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800579c:	2800      	cmp	r0, #0
 800579e:	f43f af1d 	beq.w	80055dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057a2:	4605      	mov	r5, r0
 80057a4:	e71a      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057a6:	2101      	movs	r1, #1
 80057a8:	1d20      	adds	r0, r4, #4
 80057aa:	f7ff fced 	bl	8005188 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057ae:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f43f af00 	beq.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057b6:	4605      	mov	r5, r0
 80057b8:	e6fd      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ba:	2101      	movs	r1, #1
 80057bc:	1d20      	adds	r0, r4, #4
 80057be:	f7ff fce3 	bl	8005188 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057c2:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f43f aed0 	beq.w	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057ca:	4605      	mov	r5, r0
 80057cc:	e6cd      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ce:	2101      	movs	r1, #1
 80057d0:	1d20      	adds	r0, r4, #4
 80057d2:	f7ff fcd9 	bl	8005188 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057d6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80057d8:	2800      	cmp	r0, #0
 80057da:	f43f aed9 	beq.w	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057de:	4605      	mov	r5, r0
 80057e0:	e6d6      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80057e2:	4645      	mov	r5, r8
 80057e4:	e779      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80057e6:	4613      	mov	r3, r2
 80057e8:	e76f      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x31a>
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000

080057f0 <HAL_UART_TxCpltCallback>:
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <HAL_UART_ErrorCallback>:
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005802:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005806:	f7ff fff5 	bl	80057f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800580a:	bd08      	pop	{r3, pc}

0800580c <HAL_UARTEx_RxEventCallback>:
}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005810:	6802      	ldr	r2, [r0, #0]
 8005812:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005814:	6811      	ldr	r1, [r2, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005816:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800581a:	ea13 0f0c 	tst.w	r3, ip
{
 800581e:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005820:	6895      	ldr	r5, [r2, #8]
{
 8005822:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8005824:	d141      	bne.n	80058aa <HAL_UART_IRQHandler+0x9a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005826:	069e      	lsls	r6, r3, #26
 8005828:	d502      	bpl.n	8005830 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800582a:	068e      	lsls	r6, r1, #26
 800582c:	f100 80be 	bmi.w	80059ac <HAL_UART_IRQHandler+0x19c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005832:	2801      	cmp	r0, #1
 8005834:	d015      	beq.n	8005862 <HAL_UART_IRQHandler+0x52>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005836:	02de      	lsls	r6, r3, #11
 8005838:	d502      	bpl.n	8005840 <HAL_UART_IRQHandler+0x30>
 800583a:	0268      	lsls	r0, r5, #9
 800583c:	f100 80bb 	bmi.w	80059b6 <HAL_UART_IRQHandler+0x1a6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005840:	061e      	lsls	r6, r3, #24
 8005842:	d405      	bmi.n	8005850 <HAL_UART_IRQHandler+0x40>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005844:	0658      	lsls	r0, r3, #25
 8005846:	d502      	bpl.n	800584e <HAL_UART_IRQHandler+0x3e>
 8005848:	064b      	lsls	r3, r1, #25
 800584a:	f100 80c0 	bmi.w	80059ce <HAL_UART_IRQHandler+0x1be>
}
 800584e:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005850:	060d      	lsls	r5, r1, #24
 8005852:	d5f7      	bpl.n	8005844 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8005854:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f9      	beq.n	800584e <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 800585a:	4620      	mov	r0, r4
}
 800585c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005860:	4718      	bx	r3
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005862:	06de      	lsls	r6, r3, #27
 8005864:	d5e7      	bpl.n	8005836 <HAL_UART_IRQHandler+0x26>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005866:	06c8      	lsls	r0, r1, #27
 8005868:	d5e5      	bpl.n	8005836 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800586a:	2310      	movs	r3, #16
 800586c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586e:	6893      	ldr	r3, [r2, #8]
 8005870:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005874:	f000 80be 	beq.w	80059f4 <HAL_UART_IRQHandler+0x1e4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005878:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800587a:	6801      	ldr	r1, [r0, #0]
 800587c:	684b      	ldr	r3, [r1, #4]
 800587e:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0e4      	beq.n	800584e <HAL_UART_IRQHandler+0x3e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005884:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 8005888:	429d      	cmp	r5, r3
 800588a:	d9e0      	bls.n	800584e <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 800588c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005890:	680b      	ldr	r3, [r1, #0]
 8005892:	f013 0320 	ands.w	r3, r3, #32
 8005896:	f000 80d7 	beq.w	8005a48 <HAL_UART_IRQHandler+0x238>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800589a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800589e:	1a69      	subs	r1, r5, r1
 80058a0:	4620      	mov	r0, r4
 80058a2:	b289      	uxth	r1, r1
 80058a4:	f7ff ffb2 	bl	800580c <HAL_UARTEx_RxEventCallback>
}
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058aa:	4873      	ldr	r0, [pc, #460]	; (8005a78 <HAL_UART_IRQHandler+0x268>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058ac:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058b0:	4008      	ands	r0, r1
 80058b2:	4330      	orrs	r0, r6
 80058b4:	d0bc      	beq.n	8005830 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058b6:	07dd      	lsls	r5, r3, #31
 80058b8:	d509      	bpl.n	80058ce <HAL_UART_IRQHandler+0xbe>
 80058ba:	05c8      	lsls	r0, r1, #23
 80058bc:	d507      	bpl.n	80058ce <HAL_UART_IRQHandler+0xbe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058be:	2001      	movs	r0, #1
 80058c0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80058c6:	f040 0001 	orr.w	r0, r0, #1
 80058ca:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ce:	079d      	lsls	r5, r3, #30
 80058d0:	d567      	bpl.n	80059a2 <HAL_UART_IRQHandler+0x192>
 80058d2:	b18e      	cbz	r6, 80058f8 <HAL_UART_IRQHandler+0xe8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058d4:	2002      	movs	r0, #2
 80058d6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80058dc:	f040 0004 	orr.w	r0, r0, #4
 80058e0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058e4:	0758      	lsls	r0, r3, #29
 80058e6:	d507      	bpl.n	80058f8 <HAL_UART_IRQHandler+0xe8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058e8:	2004      	movs	r0, #4
 80058ea:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80058f0:	f040 0002 	orr.w	r0, r0, #2
 80058f4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058f8:	0718      	lsls	r0, r3, #28
 80058fa:	d50b      	bpl.n	8005914 <HAL_UART_IRQHandler+0x104>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058fc:	f001 0020 	and.w	r0, r1, #32
 8005900:	4330      	orrs	r0, r6
 8005902:	d007      	beq.n	8005914 <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005904:	2008      	movs	r0, #8
 8005906:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005908:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800590c:	f040 0008 	orr.w	r0, r0, #8
 8005910:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005914:	051e      	lsls	r6, r3, #20
 8005916:	d50a      	bpl.n	800592e <HAL_UART_IRQHandler+0x11e>
 8005918:	014d      	lsls	r5, r1, #5
 800591a:	d508      	bpl.n	800592e <HAL_UART_IRQHandler+0x11e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800591c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005920:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005922:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005926:	f040 0020 	orr.w	r0, r0, #32
 800592a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800592e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005932:	2800      	cmp	r0, #0
 8005934:	d08b      	beq.n	800584e <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005936:	0698      	lsls	r0, r3, #26
 8005938:	d501      	bpl.n	800593e <HAL_UART_IRQHandler+0x12e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593a:	0689      	lsls	r1, r1, #26
 800593c:	d453      	bmi.n	80059e6 <HAL_UART_IRQHandler+0x1d6>
      errorcode = huart->ErrorCode;
 800593e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005942:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005944:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	431d      	orrs	r5, r3
 800594e:	d075      	beq.n	8005a3c <HAL_UART_IRQHandler+0x22c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005950:	6813      	ldr	r3, [r2, #0]
 8005952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005956:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005958:	6893      	ldr	r3, [r2, #8]
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005960:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005962:	2b01      	cmp	r3, #1
 8005964:	d103      	bne.n	800596e <HAL_UART_IRQHandler+0x15e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	f023 0310 	bic.w	r3, r3, #16
 800596c:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005970:	2120      	movs	r1, #32
 8005972:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005974:	6623      	str	r3, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005976:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 8005978:	6663      	str	r3, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597a:	064b      	lsls	r3, r1, #25
 800597c:	d523      	bpl.n	80059c6 <HAL_UART_IRQHandler+0x1b6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597e:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8005980:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005986:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8005988:	b1e8      	cbz	r0, 80059c6 <HAL_UART_IRQHandler+0x1b6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800598a:	4b3c      	ldr	r3, [pc, #240]	; (8005a7c <HAL_UART_IRQHandler+0x26c>)
 800598c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800598e:	f7fe fa3d 	bl	8003e0c <HAL_DMA_Abort_IT>
 8005992:	2800      	cmp	r0, #0
 8005994:	f43f af5b 	beq.w	800584e <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005998:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 800599a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800599e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80059a0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a2:	075d      	lsls	r5, r3, #29
 80059a4:	d5a8      	bpl.n	80058f8 <HAL_UART_IRQHandler+0xe8>
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	d19e      	bne.n	80058e8 <HAL_UART_IRQHandler+0xd8>
 80059aa:	e7a5      	b.n	80058f8 <HAL_UART_IRQHandler+0xe8>
      if (huart->RxISR != NULL)
 80059ac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f47f af54 	bne.w	800585c <HAL_UART_IRQHandler+0x4c>
 80059b4:	e74b      	b.n	800584e <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80059ba:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059bc:	6213      	str	r3, [r2, #32]
}
 80059be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80059c2:	f000 bc41 	b.w	8006248 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7ff ff14 	bl	80057f4 <HAL_UART_ErrorCallback>
}
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ce:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059d0:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059d6:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059d8:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059da:	67a0      	str	r0, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80059dc:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059de:	4620      	mov	r0, r4
 80059e0:	f7ff ff06 	bl	80057f0 <HAL_UART_TxCpltCallback>
}
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 80059e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0a8      	beq.n	800593e <HAL_UART_IRQHandler+0x12e>
          huart->RxISR(huart);
 80059ec:	4620      	mov	r0, r4
 80059ee:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059f0:	6822      	ldr	r2, [r4, #0]
 80059f2:	e7a4      	b.n	800593e <HAL_UART_IRQHandler+0x12e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059f4:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      if (  (huart->RxXferCount > 0U)
 80059f8:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 80059fc:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059fe:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005a00:	2900      	cmp	r1, #0
 8005a02:	f43f af24 	beq.w	800584e <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a06:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005a0a:	1a08      	subs	r0, r1, r0
 8005a0c:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	f43f af1d 	beq.w	800584e <HAL_UART_IRQHandler+0x3e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a14:	6810      	ldr	r0, [r2, #0]
 8005a16:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8005a1a:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	6890      	ldr	r0, [r2, #8]
 8005a1e:	f020 0001 	bic.w	r0, r0, #1
 8005a22:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005a24:	2020      	movs	r0, #32
 8005a26:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a28:	6623      	str	r3, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2a:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 8005a2c:	6663      	str	r3, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2e:	f020 0010 	bic.w	r0, r0, #16
 8005a32:	6010      	str	r0, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a34:	4620      	mov	r0, r4
 8005a36:	f7ff fee9 	bl	800580c <HAL_UARTEx_RxEventCallback>
}
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff fed9 	bl	80057f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a48:	6811      	ldr	r1, [r2, #0]
 8005a4a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005a4e:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a50:	6891      	ldr	r1, [r2, #8]
 8005a52:	f021 0101 	bic.w	r1, r1, #1
 8005a56:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a58:	6891      	ldr	r1, [r2, #8]
 8005a5a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005a5e:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8005a60:	2120      	movs	r1, #32
 8005a62:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a64:	6623      	str	r3, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a66:	6813      	ldr	r3, [r2, #0]
 8005a68:	f023 0310 	bic.w	r3, r3, #16
 8005a6c:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a6e:	f7fe f9a9 	bl	8003dc4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a72:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 8005a76:	e710      	b.n	800589a <HAL_UART_IRQHandler+0x8a>
 8005a78:	04000120 	.word	0x04000120
 8005a7c:	080057f9 	.word	0x080057f9

08005a80 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a80:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005a82:	2b22      	cmp	r3, #34	; 0x22
{
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a88:	d006      	beq.n	8005a98 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a8a:	6802      	ldr	r2, [r0, #0]
 8005a8c:	8b13      	ldrh	r3, [r2, #24]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f043 0308 	orr.w	r3, r3, #8
 8005a94:	8313      	strh	r3, [r2, #24]
  }
}
 8005a96:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a98:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a9a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005aa0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005aa2:	400b      	ands	r3, r1
 8005aa4:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8005aa6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005aaa:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005ab4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005ab8:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 8005aba:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8005abc:	6542      	str	r2, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e9      	bne.n	8005a96 <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac2:	6802      	ldr	r2, [r0, #0]
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8005aca:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	6891      	ldr	r1, [r2, #8]
 8005ace:	f021 0101 	bic.w	r1, r1, #1
 8005ad2:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	2120      	movs	r1, #32
 8005ad6:	67c1      	str	r1, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	6e01      	ldr	r1, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005ada:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	2901      	cmp	r1, #1
 8005ade:	d004      	beq.n	8005aea <UART_RxISR_8BIT+0x6a>
        HAL_UART_RxCpltCallback(huart);
 8005ae0:	f7fb fe28 	bl	8001734 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005ae8:	bd10      	pop	{r4, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aea:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aec:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005af6:	f7ff fe89 	bl	800580c <HAL_UARTEx_RxEventCallback>
 8005afa:	e7f3      	b.n	8005ae4 <UART_RxISR_8BIT+0x64>

08005afc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005afc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005afe:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b00:	2b22      	cmp	r3, #34	; 0x22
{
 8005b02:	b510      	push	{r4, lr}
 8005b04:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b06:	d005      	beq.n	8005b14 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b08:	8b13      	ldrh	r3, [r2, #24]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f043 0308 	orr.w	r3, r3, #8
 8005b10:	8313      	strh	r3, [r2, #24]
  }
}
 8005b12:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b14:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b16:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005b1a:	400b      	ands	r3, r1
 8005b1c:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005b1e:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 8005b22:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005b26:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005b30:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1eb      	bne.n	8005b12 <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	6811      	ldr	r1, [r2, #0]
 8005b3c:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8005b40:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	6891      	ldr	r1, [r2, #8]
 8005b44:	f021 0101 	bic.w	r1, r1, #1
 8005b48:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	2120      	movs	r1, #32
 8005b4c:	67c1      	str	r1, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4e:	6e01      	ldr	r1, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005b50:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b52:	2901      	cmp	r1, #1
 8005b54:	d004      	beq.n	8005b60 <UART_RxISR_16BIT+0x64>
        HAL_UART_RxCpltCallback(huart);
 8005b56:	f7fb fded 	bl	8001734 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005b5e:	bd10      	pop	{r4, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b60:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b62:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b66:	f023 0310 	bic.w	r3, r3, #16
 8005b6a:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b6c:	f7ff fe4e 	bl	800580c <HAL_UARTEx_RxEventCallback>
 8005b70:	e7f3      	b.n	8005b5a <UART_RxISR_16BIT+0x5e>
 8005b72:	bf00      	nop

08005b74 <UART_SetConfig>:
{
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b78:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b7a:	6882      	ldr	r2, [r0, #8]
 8005b7c:	6900      	ldr	r0, [r0, #16]
 8005b7e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b80:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b82:	4302      	orrs	r2, r0
 8005b84:	430a      	orrs	r2, r1
 8005b86:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b88:	499f      	ldr	r1, [pc, #636]	; (8005e08 <UART_SetConfig+0x294>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b8a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b8c:	4029      	ands	r1, r5
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68e1      	ldr	r1, [r4, #12]
 8005b96:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005b9a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b9c:	499b      	ldr	r1, [pc, #620]	; (8005e0c <UART_SetConfig+0x298>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b9e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba0:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ba2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ba4:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba6:	d071      	beq.n	8005c8c <UART_SetConfig+0x118>
    tmpreg |= huart->Init.OneBitSampling;
 8005ba8:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005baa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8005bae:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb0:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bb2:	4997      	ldr	r1, [pc, #604]	; (8005e10 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bb6:	428b      	cmp	r3, r1
 8005bb8:	d024      	beq.n	8005c04 <UART_SetConfig+0x90>
 8005bba:	4a96      	ldr	r2, [pc, #600]	; (8005e14 <UART_SetConfig+0x2a0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d044      	beq.n	8005c4a <UART_SetConfig+0xd6>
 8005bc0:	4a95      	ldr	r2, [pc, #596]	; (8005e18 <UART_SetConfig+0x2a4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	f000 80d7 	beq.w	8005d76 <UART_SetConfig+0x202>
 8005bc8:	4a94      	ldr	r2, [pc, #592]	; (8005e1c <UART_SetConfig+0x2a8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	f000 80a1 	beq.w	8005d12 <UART_SetConfig+0x19e>
 8005bd0:	4a93      	ldr	r2, [pc, #588]	; (8005e20 <UART_SetConfig+0x2ac>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d111      	bne.n	8005bfa <UART_SetConfig+0x86>
 8005bd6:	4b93      	ldr	r3, [pc, #588]	; (8005e24 <UART_SetConfig+0x2b0>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be4:	f000 8100 	beq.w	8005de8 <UART_SetConfig+0x274>
 8005be8:	f200 80be 	bhi.w	8005d68 <UART_SetConfig+0x1f4>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80dc 	beq.w	8005daa <UART_SetConfig+0x236>
 8005bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf6:	f000 8099 	beq.w	8005d2c <UART_SetConfig+0x1b8>
        ret = HAL_ERROR;
 8005bfa:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005bfc:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8005bfe:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
}
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c04:	4b87      	ldr	r3, [pc, #540]	; (8005e24 <UART_SetConfig+0x2b0>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d978      	bls.n	8005d06 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c18:	f000 80f1 	beq.w	8005dfe <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7ff faa2 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d048      	beq.n	8005cb6 <UART_SetConfig+0x142>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c24:	6862      	ldr	r2, [r4, #4]
 8005c26:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8005c2a:	fbb0 f2f2 	udiv	r2, r0, r2
 8005c2e:	b292      	uxth	r2, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c30:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005c34:	f1a2 0110 	sub.w	r1, r2, #16
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	d8de      	bhi.n	8005bfa <UART_SetConfig+0x86>
        huart->Instance->BRR = usartdiv;
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8005c40:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8005c42:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 8005c46:	2000      	movs	r0, #0
}
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c4a:	4b76      	ldr	r3, [pc, #472]	; (8005e24 <UART_SetConfig+0x2b0>)
 8005c4c:	4a76      	ldr	r2, [pc, #472]	; (8005e28 <UART_SetConfig+0x2b4>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c5c:	d06c      	beq.n	8005d38 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d8cb      	bhi.n	8005bfa <UART_SetConfig+0x86>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0xf4>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005d71 	.word	0x08005d71
 8005c6c:	08005c1d 	.word	0x08005c1d
 8005c70:	08005def 	.word	0x08005def
 8005c74:	08005bfb 	.word	0x08005bfb
 8005c78:	08005d33 	.word	0x08005d33
 8005c7c:	08005bfb 	.word	0x08005bfb
 8005c80:	08005bfb 	.word	0x08005bfb
 8005c84:	08005bfb 	.word	0x08005bfb
 8005c88:	08005d9b 	.word	0x08005d9b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c8c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c90:	4864      	ldr	r0, [pc, #400]	; (8005e24 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c96:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005c9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca2:	f000 8080 	beq.w	8005da6 <UART_SetConfig+0x232>
 8005ca6:	d80b      	bhi.n	8005cc0 <UART_SetConfig+0x14c>
 8005ca8:	b383      	cbz	r3, 8005d0c <UART_SetConfig+0x198>
 8005caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cae:	d1a4      	bne.n	8005bfa <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb0:	f7fe fe66 	bl	8004980 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005cb4:	b948      	cbnz	r0, 8005cca <UART_SetConfig+0x156>
  huart->RxISR = NULL;
 8005cb6:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8005cb8:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 8005cbc:	2000      	movs	r0, #0
}
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc4:	d199      	bne.n	8005bfa <UART_SetConfig+0x86>
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cca:	6862      	ldr	r2, [r4, #4]
 8005ccc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005cd0:	4283      	cmp	r3, r0
 8005cd2:	d892      	bhi.n	8005bfa <UART_SetConfig+0x86>
 8005cd4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005cd8:	d88f      	bhi.n	8005bfa <UART_SetConfig+0x86>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cda:	2500      	movs	r5, #0
 8005cdc:	0853      	lsrs	r3, r2, #1
 8005cde:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	fbe0 310c 	umlal	r3, r1, r0, ip
 8005ce8:	4618      	mov	r0, r3
 8005cea:	462b      	mov	r3, r5
 8005cec:	f7fa ffdc 	bl	8000ca8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cf0:	4a4e      	ldr	r2, [pc, #312]	; (8005e2c <UART_SetConfig+0x2b8>)
 8005cf2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005cf6:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cf8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cfa:	f63f af7e 	bhi.w	8005bfa <UART_SetConfig+0x86>
          huart->Instance->BRR = usartdiv;
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	4628      	mov	r0, r5
 8005d02:	60d3      	str	r3, [r2, #12]
 8005d04:	e77a      	b.n	8005bfc <UART_SetConfig+0x88>
 8005d06:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <UART_SetConfig+0x2bc>)
 8005d08:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d0a:	e7a5      	b.n	8005c58 <UART_SetConfig+0xe4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d0c:	f7ff fa18 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
        break;
 8005d10:	e7d0      	b.n	8005cb4 <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d12:	4b44      	ldr	r3, [pc, #272]	; (8005e24 <UART_SetConfig+0x2b0>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d063      	beq.n	8005de8 <UART_SetConfig+0x274>
 8005d20:	d83e      	bhi.n	8005da0 <UART_SetConfig+0x22c>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d041      	beq.n	8005daa <UART_SetConfig+0x236>
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	f47f af67 	bne.w	8005bfa <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005d30:	d05f      	beq.n	8005df2 <UART_SetConfig+0x27e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d32:	f7fe fe25 	bl	8004980 <HAL_RCC_GetSysClockFreq>
        break;
 8005d36:	e773      	b.n	8005c20 <UART_SetConfig+0xac>
    switch (clocksource)
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	f63f af5e 	bhi.w	8005bfa <UART_SetConfig+0x86>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0x1d0>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005db1 	.word	0x08005db1
 8005d48:	08005dff 	.word	0x08005dff
 8005d4c:	08005e05 	.word	0x08005e05
 8005d50:	08005bfb 	.word	0x08005bfb
 8005d54:	08005df3 	.word	0x08005df3
 8005d58:	08005bfb 	.word	0x08005bfb
 8005d5c:	08005bfb 	.word	0x08005bfb
 8005d60:	08005bfb 	.word	0x08005bfb
 8005d64:	08005df9 	.word	0x08005df9
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d6c:	d012      	beq.n	8005d94 <UART_SetConfig+0x220>
 8005d6e:	e744      	b.n	8005bfa <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7ff f9e6 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
        break;
 8005d74:	e754      	b.n	8005c20 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d76:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <UART_SetConfig+0x2b0>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d031      	beq.n	8005de8 <UART_SetConfig+0x274>
 8005d84:	d803      	bhi.n	8005d8e <UART_SetConfig+0x21a>
 8005d86:	b183      	cbz	r3, 8005daa <UART_SetConfig+0x236>
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d0cf      	beq.n	8005d2c <UART_SetConfig+0x1b8>
 8005d8c:	e735      	b.n	8005bfa <UART_SetConfig+0x86>
 8005d8e:	2b30      	cmp	r3, #48	; 0x30
 8005d90:	f47f af33 	bne.w	8005bfa <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005d98:	d02e      	beq.n	8005df8 <UART_SetConfig+0x284>
    switch (clocksource)
 8005d9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005d9e:	e741      	b.n	8005c24 <UART_SetConfig+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da0:	2bc0      	cmp	r3, #192	; 0xc0
 8005da2:	d0f7      	beq.n	8005d94 <UART_SetConfig+0x220>
 8005da4:	e729      	b.n	8005bfa <UART_SetConfig+0x86>
 8005da6:	4823      	ldr	r0, [pc, #140]	; (8005e34 <UART_SetConfig+0x2c0>)
 8005da8:	e78f      	b.n	8005cca <UART_SetConfig+0x156>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005daa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005dae:	d1df      	bne.n	8005d70 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db0:	f7ff f9c6 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f43f af7e 	beq.w	8005cb6 <UART_SetConfig+0x142>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dba:	0043      	lsls	r3, r0, #1
 8005dbc:	6862      	ldr	r2, [r4, #4]
 8005dbe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dc6:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc8:	f1a2 0010 	sub.w	r0, r2, #16
 8005dcc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005dd0:	4288      	cmp	r0, r1
 8005dd2:	f63f af12 	bhi.w	8005bfa <UART_SetConfig+0x86>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd6:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 8005dda:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ddc:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dde:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60cb      	str	r3, [r1, #12]
 8005de6:	e766      	b.n	8005cb6 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005dec:	d00a      	beq.n	8005e04 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 8005dee:	4811      	ldr	r0, [pc, #68]	; (8005e34 <UART_SetConfig+0x2c0>)
 8005df0:	e718      	b.n	8005c24 <UART_SetConfig+0xb0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fe fdc5 	bl	8004980 <HAL_RCC_GetSysClockFreq>
        break;
 8005df6:	e7dd      	b.n	8005db4 <UART_SetConfig+0x240>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dfc:	e7de      	b.n	8005dbc <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dfe:	f7ff f9b1 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
        break;
 8005e02:	e7d7      	b.n	8005db4 <UART_SetConfig+0x240>
    switch (clocksource)
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <UART_SetConfig+0x2c4>)
 8005e06:	e7d9      	b.n	8005dbc <UART_SetConfig+0x248>
 8005e08:	efff69f3 	.word	0xefff69f3
 8005e0c:	40008000 	.word	0x40008000
 8005e10:	40013800 	.word	0x40013800
 8005e14:	40004400 	.word	0x40004400
 8005e18:	40004800 	.word	0x40004800
 8005e1c:	40004c00 	.word	0x40004c00
 8005e20:	40005000 	.word	0x40005000
 8005e24:	40021000 	.word	0x40021000
 8005e28:	0800b594 	.word	0x0800b594
 8005e2c:	000ffcff 	.word	0x000ffcff
 8005e30:	0800b590 	.word	0x0800b590
 8005e34:	00f42400 	.word	0x00f42400
 8005e38:	01e84800 	.word	0x01e84800

08005e3c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e3e:	07da      	lsls	r2, r3, #31
{
 8005e40:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e42:	d506      	bpl.n	8005e52 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e44:	6801      	ldr	r1, [r0, #0]
 8005e46:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005e48:	684a      	ldr	r2, [r1, #4]
 8005e4a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e4e:	4322      	orrs	r2, r4
 8005e50:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e52:	079c      	lsls	r4, r3, #30
 8005e54:	d506      	bpl.n	8005e64 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e56:	6801      	ldr	r1, [r0, #0]
 8005e58:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005e5a:	684a      	ldr	r2, [r1, #4]
 8005e5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e60:	4322      	orrs	r2, r4
 8005e62:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e64:	0759      	lsls	r1, r3, #29
 8005e66:	d506      	bpl.n	8005e76 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e68:	6801      	ldr	r1, [r0, #0]
 8005e6a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005e6c:	684a      	ldr	r2, [r1, #4]
 8005e6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e72:	4322      	orrs	r2, r4
 8005e74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e76:	071a      	lsls	r2, r3, #28
 8005e78:	d506      	bpl.n	8005e88 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e7a:	6801      	ldr	r1, [r0, #0]
 8005e7c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005e7e:	684a      	ldr	r2, [r1, #4]
 8005e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e84:	4322      	orrs	r2, r4
 8005e86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e88:	06dc      	lsls	r4, r3, #27
 8005e8a:	d506      	bpl.n	8005e9a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e8c:	6801      	ldr	r1, [r0, #0]
 8005e8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005e90:	688a      	ldr	r2, [r1, #8]
 8005e92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e96:	4322      	orrs	r2, r4
 8005e98:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e9a:	0699      	lsls	r1, r3, #26
 8005e9c:	d506      	bpl.n	8005eac <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e9e:	6801      	ldr	r1, [r0, #0]
 8005ea0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005ea2:	688a      	ldr	r2, [r1, #8]
 8005ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea8:	4322      	orrs	r2, r4
 8005eaa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eac:	065a      	lsls	r2, r3, #25
 8005eae:	d509      	bpl.n	8005ec4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb0:	6801      	ldr	r1, [r0, #0]
 8005eb2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005eb4:	684a      	ldr	r2, [r1, #4]
 8005eb6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005eba:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ebc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec2:	d00b      	beq.n	8005edc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec4:	061b      	lsls	r3, r3, #24
 8005ec6:	d506      	bpl.n	8005ed6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ec8:	6802      	ldr	r2, [r0, #0]
 8005eca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005ecc:	6853      	ldr	r3, [r2, #4]
 8005ece:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6053      	str	r3, [r2, #4]
}
 8005ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eda:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005edc:	684a      	ldr	r2, [r1, #4]
 8005ede:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005ee0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005ee4:	4322      	orrs	r2, r4
 8005ee6:	604a      	str	r2, [r1, #4]
 8005ee8:	e7ec      	b.n	8005ec4 <UART_AdvFeatureConfig+0x88>
 8005eea:	bf00      	nop

08005eec <UART_WaitOnFlagUntilTimeout>:
{
 8005eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef4:	6805      	ldr	r5, [r0, #0]
{
 8005ef6:	4681      	mov	r9, r0
 8005ef8:	460f      	mov	r7, r1
 8005efa:	4616      	mov	r6, r2
 8005efc:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efe:	e002      	b.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8005f00:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005f04:	d10c      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f06:	69ec      	ldr	r4, [r5, #28]
 8005f08:	ea37 0304 	bics.w	r3, r7, r4
 8005f0c:	bf0c      	ite	eq
 8005f0e:	f04f 0c01 	moveq.w	ip, #1
 8005f12:	f04f 0c00 	movne.w	ip, #0
 8005f16:	45b4      	cmp	ip, r6
 8005f18:	d0f2      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8005f1a:	2000      	movs	r0, #0
}
 8005f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f20:	f7fd fb62 	bl	80035e8 <HAL_GetTick>
 8005f24:	eba0 000a 	sub.w	r0, r0, sl
 8005f28:	4540      	cmp	r0, r8
 8005f2a:	d821      	bhi.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x84>
 8005f2c:	f1b8 0f00 	cmp.w	r8, #0
 8005f30:	d01e      	beq.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f32:	f8d9 5000 	ldr.w	r5, [r9]
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	075a      	lsls	r2, r3, #29
 8005f3a:	d5e4      	bpl.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3c:	69eb      	ldr	r3, [r5, #28]
 8005f3e:	051b      	lsls	r3, r3, #20
 8005f40:	d5e1      	bpl.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f46:	622b      	str	r3, [r5, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f48:	682a      	ldr	r2, [r5, #0]
 8005f4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f4e:	602a      	str	r2, [r5, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	68aa      	ldr	r2, [r5, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005f52:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8005f54:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	60aa      	str	r2, [r5, #8]
          return HAL_TIMEOUT;
 8005f5c:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8005f5e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005f62:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005f66:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f6a:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8005f6e:	e7d5      	b.n	8005f1c <UART_WaitOnFlagUntilTimeout+0x30>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f70:	f8d9 3000 	ldr.w	r3, [r9]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f7a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005f7e:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8005f80:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	609a      	str	r2, [r3, #8]
        return HAL_TIMEOUT;
 8005f88:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005f8a:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005f8e:	f889 4074 	strb.w	r4, [r9, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005f92:	f8c9 107c 	str.w	r1, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005f96:	e7c1      	b.n	8005f1c <UART_WaitOnFlagUntilTimeout+0x30>

08005f98 <HAL_UART_Transmit>:
{
 8005f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005fa0:	2820      	cmp	r0, #32
{
 8005fa2:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa4:	d149      	bne.n	800603a <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	d042      	beq.n	8006032 <HAL_UART_Transmit+0x9a>
 8005fac:	4617      	mov	r7, r2
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	d03f      	beq.n	8006032 <HAL_UART_Transmit+0x9a>
 8005fb2:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8005fb4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d03e      	beq.n	800603a <HAL_UART_Transmit+0xa2>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fc6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fcc:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005fce:	f7fd fb0b 	bl	80035e8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005fd4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8005fdc:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 8005fe0:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe2:	d02e      	beq.n	8006042 <HAL_UART_Transmit+0xaa>
    while (huart->TxXferCount > 0U)
 8005fe4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8005fe8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8005fea:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8005fec:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005ff0:	b973      	cbnz	r3, 8006010 <HAL_UART_Transmit+0x78>
 8005ff2:	e030      	b.n	8006056 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8005ffc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8006000:	3a01      	subs	r2, #1
 8006002:	b292      	uxth	r2, r2
 8006004:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006008:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800600c:	b292      	uxth	r2, r2
 800600e:	b312      	cbz	r2, 8006056 <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006010:	9600      	str	r6, [sp, #0]
 8006012:	4643      	mov	r3, r8
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff ff67 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 800601e:	b9b0      	cbnz	r0, 800604e <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 8006020:	2d00      	cmp	r5, #0
 8006022:	d1e7      	bne.n	8005ff4 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006024:	f839 3b02 	ldrh.w	r3, [r9], #2
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8006030:	e7e4      	b.n	8005ffc <HAL_UART_Transmit+0x64>
      return  HAL_ERROR;
 8006032:	2001      	movs	r0, #1
}
 8006034:	b003      	add	sp, #12
 8006036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800603a:	2002      	movs	r0, #2
}
 800603c:	b003      	add	sp, #12
 800603e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1cd      	bne.n	8005fe4 <HAL_UART_Transmit+0x4c>
 8006048:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800604a:	461d      	mov	r5, r3
 800604c:	e7ca      	b.n	8005fe4 <HAL_UART_Transmit+0x4c>
        return HAL_TIMEOUT;
 800604e:	2003      	movs	r0, #3
}
 8006050:	b003      	add	sp, #12
 8006052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006056:	9600      	str	r6, [sp, #0]
 8006058:	4643      	mov	r3, r8
 800605a:	2200      	movs	r2, #0
 800605c:	2140      	movs	r1, #64	; 0x40
 800605e:	4620      	mov	r0, r4
 8006060:	f7ff ff44 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 8006064:	2800      	cmp	r0, #0
 8006066:	d1f2      	bne.n	800604e <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8006068:	2320      	movs	r3, #32
 800606a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800606c:	e7e2      	b.n	8006034 <HAL_UART_Transmit+0x9c>
 800606e:	bf00      	nop

08006070 <UART_CheckIdleState>:
{
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	2600      	movs	r6, #0
{
 8006076:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800607c:	f7fd fab4 	bl	80035e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8006086:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006088:	d40c      	bmi.n	80060a4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	075b      	lsls	r3, r3, #29
 800608e:	d418      	bmi.n	80060c2 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006090:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006092:	2220      	movs	r2, #32
  return HAL_OK;
 8006094:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006096:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8006098:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800609c:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	6623      	str	r3, [r4, #96]	; 0x60
}
 80060a0:	b002      	add	sp, #8
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4632      	mov	r2, r6
 80060ac:	4603      	mov	r3, r0
 80060ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7ff ff1a 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 80060b8:	b978      	cbnz	r0, 80060da <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	075b      	lsls	r3, r3, #29
 80060c0:	d5e6      	bpl.n	8006090 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2200      	movs	r2, #0
 80060ca:	462b      	mov	r3, r5
 80060cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060d0:	4620      	mov	r0, r4
 80060d2:	f7ff ff0b 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d0da      	beq.n	8006090 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80060da:	2003      	movs	r0, #3
}
 80060dc:	b002      	add	sp, #8
 80060de:	bd70      	pop	{r4, r5, r6, pc}

080060e0 <HAL_UART_Init>:
  if (huart == NULL)
 80060e0:	b370      	cbz	r0, 8006140 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80060e2:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80060e8:	b32b      	cbz	r3, 8006136 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 80060ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	2324      	movs	r3, #36	; 0x24
 80060ee:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80060f0:	6813      	ldr	r3, [r2, #0]
 80060f2:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80060f8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060fa:	f7ff fd3b 	bl	8005b74 <UART_SetConfig>
 80060fe:	2801      	cmp	r0, #1
 8006100:	d017      	beq.n	8006132 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006104:	b98b      	cbnz	r3, 800612a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800610e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006116:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800611e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006126:	f7ff bfa3 	b.w	8006070 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800612a:	4620      	mov	r0, r4
 800612c:	f7ff fe86 	bl	8005e3c <UART_AdvFeatureConfig>
 8006130:	e7e9      	b.n	8006106 <HAL_UART_Init+0x26>
}
 8006132:	2001      	movs	r0, #1
 8006134:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006136:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800613a:	f7fc f901 	bl	8002340 <HAL_UART_MspInit>
 800613e:	e7d4      	b.n	80060ea <HAL_UART_Init+0xa>
}
 8006140:	2001      	movs	r0, #1
 8006142:	4770      	bx	lr

08006144 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8006144:	6883      	ldr	r3, [r0, #8]
{
 8006146:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 800614c:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8006150:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006152:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8006156:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 800615a:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 800615c:	d026      	beq.n	80061ac <UART_Start_Receive_IT+0x68>
 800615e:	b1db      	cbz	r3, 8006198 <UART_Start_Receive_IT+0x54>
 8006160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006164:	d041      	beq.n	80061ea <UART_Start_Receive_IT+0xa6>
 8006166:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616a:	6803      	ldr	r3, [r0, #0]
    huart->RxISR = UART_RxISR_8BIT;
 800616c:	4c22      	ldr	r4, [pc, #136]	; (80061f8 <UART_Start_Receive_IT+0xb4>)
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800616e:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006170:	2100      	movs	r1, #0
 8006172:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006176:	67c2      	str	r2, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 8006180:	2100      	movs	r1, #0
 8006182:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	6644      	str	r4, [r0, #100]	; 0x64
 800618a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
}
 800618e:	4608      	mov	r0, r1
 8006190:	f85d 4b04 	ldr.w	r4, [sp], #4
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006198:	6903      	ldr	r3, [r0, #16]
 800619a:	b91b      	cbnz	r3, 80061a4 <UART_Start_Receive_IT+0x60>
 800619c:	23ff      	movs	r3, #255	; 0xff
 800619e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80061a2:	e7e2      	b.n	800616a <UART_Start_Receive_IT+0x26>
 80061a4:	237f      	movs	r3, #127	; 0x7f
 80061a6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80061aa:	e7de      	b.n	800616a <UART_Start_Receive_IT+0x26>
 80061ac:	6902      	ldr	r2, [r0, #16]
 80061ae:	b972      	cbnz	r2, 80061ce <UART_Start_Receive_IT+0x8a>
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b0:	6803      	ldr	r3, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b6:	2122      	movs	r1, #34	; 0x22
 80061b8:	67c1      	str	r1, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ba:	689a      	ldr	r2, [r3, #8]
    huart->RxISR = UART_RxISR_16BIT;
 80061bc:	4c0f      	ldr	r4, [pc, #60]	; (80061fc <UART_Start_Receive_IT+0xb8>)
 80061be:	f240 11ff 	movw	r1, #511	; 0x1ff
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 80061ca:	609a      	str	r2, [r3, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061cc:	e7d8      	b.n	8006180 <UART_Start_Receive_IT+0x3c>
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	6803      	ldr	r3, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061d4:	2222      	movs	r2, #34	; 0x22
 80061d6:	67c2      	str	r2, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d8:	689a      	ldr	r2, [r3, #8]
    huart->RxISR = UART_RxISR_8BIT;
 80061da:	4c07      	ldr	r4, [pc, #28]	; (80061f8 <UART_Start_Receive_IT+0xb4>)
 80061dc:	21ff      	movs	r1, #255	; 0xff
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 80061e6:	609a      	str	r2, [r3, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e8:	e7ca      	b.n	8006180 <UART_Start_Receive_IT+0x3c>
  UART_MASK_COMPUTATION(huart);
 80061ea:	6903      	ldr	r3, [r0, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0d9      	beq.n	80061a4 <UART_Start_Receive_IT+0x60>
 80061f0:	233f      	movs	r3, #63	; 0x3f
 80061f2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80061f6:	e7b8      	b.n	800616a <UART_Start_Receive_IT+0x26>
 80061f8:	08005a81 	.word	0x08005a81
 80061fc:	08005afd 	.word	0x08005afd

08006200 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006200:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006202:	2b20      	cmp	r3, #32
 8006204:	d11c      	bne.n	8006240 <HAL_UART_Receive_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8006206:	b1c9      	cbz	r1, 800623c <HAL_UART_Receive_IT+0x3c>
 8006208:	b1c2      	cbz	r2, 800623c <HAL_UART_Receive_IT+0x3c>
    __HAL_LOCK(huart);
 800620a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800620e:	2b01      	cmp	r3, #1
 8006210:	d016      	beq.n	8006240 <HAL_UART_Receive_IT+0x40>
{
 8006212:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006214:	6803      	ldr	r3, [r0, #0]
 8006216:	4c0b      	ldr	r4, [pc, #44]	; (8006244 <HAL_UART_Receive_IT+0x44>)
    __HAL_LOCK(huart);
 8006218:	2501      	movs	r5, #1
 800621a:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800621e:	42a3      	cmp	r3, r4
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	f04f 0500 	mov.w	r5, #0
 8006224:	6605      	str	r5, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006226:	d006      	beq.n	8006236 <HAL_UART_Receive_IT+0x36>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006228:	685c      	ldr	r4, [r3, #4]
 800622a:	0224      	lsls	r4, r4, #8
 800622c:	d503      	bpl.n	8006236 <HAL_UART_Receive_IT+0x36>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800622e:	681c      	ldr	r4, [r3, #0]
 8006230:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8006234:	601c      	str	r4, [r3, #0]
}
 8006236:	bc30      	pop	{r4, r5}
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006238:	f7ff bf84 	b.w	8006144 <UART_Start_Receive_IT>
      return HAL_ERROR;
 800623c:	2001      	movs	r0, #1
 800623e:	4770      	bx	lr
    return HAL_BUSY;
 8006240:	2002      	movs	r0, #2
}
 8006242:	4770      	bx	lr
 8006244:	40008000 	.word	0x40008000

08006248 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop

0800624c <__errno>:
 800624c:	4b01      	ldr	r3, [pc, #4]	; (8006254 <__errno+0x8>)
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000001c 	.word	0x2000001c

08006258 <__libc_init_array>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4d0d      	ldr	r5, [pc, #52]	; (8006290 <__libc_init_array+0x38>)
 800625c:	4c0d      	ldr	r4, [pc, #52]	; (8006294 <__libc_init_array+0x3c>)
 800625e:	1b64      	subs	r4, r4, r5
 8006260:	10a4      	asrs	r4, r4, #2
 8006262:	2600      	movs	r6, #0
 8006264:	42a6      	cmp	r6, r4
 8006266:	d109      	bne.n	800627c <__libc_init_array+0x24>
 8006268:	4d0b      	ldr	r5, [pc, #44]	; (8006298 <__libc_init_array+0x40>)
 800626a:	4c0c      	ldr	r4, [pc, #48]	; (800629c <__libc_init_array+0x44>)
 800626c:	f005 f948 	bl	800b500 <_init>
 8006270:	1b64      	subs	r4, r4, r5
 8006272:	10a4      	asrs	r4, r4, #2
 8006274:	2600      	movs	r6, #0
 8006276:	42a6      	cmp	r6, r4
 8006278:	d105      	bne.n	8006286 <__libc_init_array+0x2e>
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006280:	4798      	blx	r3
 8006282:	3601      	adds	r6, #1
 8006284:	e7ee      	b.n	8006264 <__libc_init_array+0xc>
 8006286:	f855 3b04 	ldr.w	r3, [r5], #4
 800628a:	4798      	blx	r3
 800628c:	3601      	adds	r6, #1
 800628e:	e7f2      	b.n	8006276 <__libc_init_array+0x1e>
 8006290:	0800ba64 	.word	0x0800ba64
 8006294:	0800ba64 	.word	0x0800ba64
 8006298:	0800ba64 	.word	0x0800ba64
 800629c:	0800ba68 	.word	0x0800ba68

080062a0 <memcpy>:
 80062a0:	440a      	add	r2, r1
 80062a2:	4291      	cmp	r1, r2
 80062a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80062a8:	d100      	bne.n	80062ac <memcpy+0xc>
 80062aa:	4770      	bx	lr
 80062ac:	b510      	push	{r4, lr}
 80062ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062b6:	4291      	cmp	r1, r2
 80062b8:	d1f9      	bne.n	80062ae <memcpy+0xe>
 80062ba:	bd10      	pop	{r4, pc}

080062bc <memset>:
 80062bc:	4402      	add	r2, r0
 80062be:	4603      	mov	r3, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <__cvt>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	ec55 4b10 	vmov	r4, r5, d0
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	460e      	mov	r6, r1
 80062d8:	4619      	mov	r1, r3
 80062da:	462b      	mov	r3, r5
 80062dc:	bfbb      	ittet	lt
 80062de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062e2:	461d      	movlt	r5, r3
 80062e4:	2300      	movge	r3, #0
 80062e6:	232d      	movlt	r3, #45	; 0x2d
 80062e8:	700b      	strb	r3, [r1, #0]
 80062ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062f0:	4691      	mov	r9, r2
 80062f2:	f023 0820 	bic.w	r8, r3, #32
 80062f6:	bfbc      	itt	lt
 80062f8:	4622      	movlt	r2, r4
 80062fa:	4614      	movlt	r4, r2
 80062fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006300:	d005      	beq.n	800630e <__cvt+0x42>
 8006302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006306:	d100      	bne.n	800630a <__cvt+0x3e>
 8006308:	3601      	adds	r6, #1
 800630a:	2102      	movs	r1, #2
 800630c:	e000      	b.n	8006310 <__cvt+0x44>
 800630e:	2103      	movs	r1, #3
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	ab02      	add	r3, sp, #8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	ec45 4b10 	vmov	d0, r4, r5
 800631c:	4653      	mov	r3, sl
 800631e:	4632      	mov	r2, r6
 8006320:	f001 fe42 	bl	8007fa8 <_dtoa_r>
 8006324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006328:	4607      	mov	r7, r0
 800632a:	d102      	bne.n	8006332 <__cvt+0x66>
 800632c:	f019 0f01 	tst.w	r9, #1
 8006330:	d022      	beq.n	8006378 <__cvt+0xac>
 8006332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006336:	eb07 0906 	add.w	r9, r7, r6
 800633a:	d110      	bne.n	800635e <__cvt+0x92>
 800633c:	783b      	ldrb	r3, [r7, #0]
 800633e:	2b30      	cmp	r3, #48	; 0x30
 8006340:	d10a      	bne.n	8006358 <__cvt+0x8c>
 8006342:	2200      	movs	r2, #0
 8006344:	2300      	movs	r3, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fbcd 	bl	8000ae8 <__aeabi_dcmpeq>
 800634e:	b918      	cbnz	r0, 8006358 <__cvt+0x8c>
 8006350:	f1c6 0601 	rsb	r6, r6, #1
 8006354:	f8ca 6000 	str.w	r6, [sl]
 8006358:	f8da 3000 	ldr.w	r3, [sl]
 800635c:	4499      	add	r9, r3
 800635e:	2200      	movs	r2, #0
 8006360:	2300      	movs	r3, #0
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7fa fbbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800636a:	b108      	cbz	r0, 8006370 <__cvt+0xa4>
 800636c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006370:	2230      	movs	r2, #48	; 0x30
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	454b      	cmp	r3, r9
 8006376:	d307      	bcc.n	8006388 <__cvt+0xbc>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800637c:	1bdb      	subs	r3, r3, r7
 800637e:	4638      	mov	r0, r7
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	b004      	add	sp, #16
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	9103      	str	r1, [sp, #12]
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	e7f0      	b.n	8006372 <__cvt+0xa6>

08006390 <__exponent>:
 8006390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006392:	4603      	mov	r3, r0
 8006394:	2900      	cmp	r1, #0
 8006396:	bfb8      	it	lt
 8006398:	4249      	neglt	r1, r1
 800639a:	f803 2b02 	strb.w	r2, [r3], #2
 800639e:	bfb4      	ite	lt
 80063a0:	222d      	movlt	r2, #45	; 0x2d
 80063a2:	222b      	movge	r2, #43	; 0x2b
 80063a4:	2909      	cmp	r1, #9
 80063a6:	7042      	strb	r2, [r0, #1]
 80063a8:	dd2a      	ble.n	8006400 <__exponent+0x70>
 80063aa:	f10d 0407 	add.w	r4, sp, #7
 80063ae:	46a4      	mov	ip, r4
 80063b0:	270a      	movs	r7, #10
 80063b2:	46a6      	mov	lr, r4
 80063b4:	460a      	mov	r2, r1
 80063b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063ba:	fb07 1516 	mls	r5, r7, r6, r1
 80063be:	3530      	adds	r5, #48	; 0x30
 80063c0:	2a63      	cmp	r2, #99	; 0x63
 80063c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80063c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063ca:	4631      	mov	r1, r6
 80063cc:	dcf1      	bgt.n	80063b2 <__exponent+0x22>
 80063ce:	3130      	adds	r1, #48	; 0x30
 80063d0:	f1ae 0502 	sub.w	r5, lr, #2
 80063d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063d8:	1c44      	adds	r4, r0, #1
 80063da:	4629      	mov	r1, r5
 80063dc:	4561      	cmp	r1, ip
 80063de:	d30a      	bcc.n	80063f6 <__exponent+0x66>
 80063e0:	f10d 0209 	add.w	r2, sp, #9
 80063e4:	eba2 020e 	sub.w	r2, r2, lr
 80063e8:	4565      	cmp	r5, ip
 80063ea:	bf88      	it	hi
 80063ec:	2200      	movhi	r2, #0
 80063ee:	4413      	add	r3, r2
 80063f0:	1a18      	subs	r0, r3, r0
 80063f2:	b003      	add	sp, #12
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063fe:	e7ed      	b.n	80063dc <__exponent+0x4c>
 8006400:	2330      	movs	r3, #48	; 0x30
 8006402:	3130      	adds	r1, #48	; 0x30
 8006404:	7083      	strb	r3, [r0, #2]
 8006406:	70c1      	strb	r1, [r0, #3]
 8006408:	1d03      	adds	r3, r0, #4
 800640a:	e7f1      	b.n	80063f0 <__exponent+0x60>

0800640c <_printf_float>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	ed2d 8b02 	vpush	{d8}
 8006414:	b08d      	sub	sp, #52	; 0x34
 8006416:	460c      	mov	r4, r1
 8006418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800641c:	4616      	mov	r6, r2
 800641e:	461f      	mov	r7, r3
 8006420:	4605      	mov	r5, r0
 8006422:	f002 ff1f 	bl	8009264 <_localeconv_r>
 8006426:	f8d0 a000 	ldr.w	sl, [r0]
 800642a:	4650      	mov	r0, sl
 800642c:	f7f9 feda 	bl	80001e4 <strlen>
 8006430:	2300      	movs	r3, #0
 8006432:	930a      	str	r3, [sp, #40]	; 0x28
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	9305      	str	r3, [sp, #20]
 8006438:	f8d8 3000 	ldr.w	r3, [r8]
 800643c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006440:	3307      	adds	r3, #7
 8006442:	f023 0307 	bic.w	r3, r3, #7
 8006446:	f103 0208 	add.w	r2, r3, #8
 800644a:	f8c8 2000 	str.w	r2, [r8]
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800645a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800645e:	9307      	str	r3, [sp, #28]
 8006460:	f8cd 8018 	str.w	r8, [sp, #24]
 8006464:	ee08 0a10 	vmov	s16, r0
 8006468:	4b9f      	ldr	r3, [pc, #636]	; (80066e8 <_printf_float+0x2dc>)
 800646a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800646e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006472:	f7fa fb6b 	bl	8000b4c <__aeabi_dcmpun>
 8006476:	bb88      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647c:	4b9a      	ldr	r3, [pc, #616]	; (80066e8 <_printf_float+0x2dc>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006482:	f7fa fb45 	bl	8000b10 <__aeabi_dcmple>
 8006486:	bb48      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa fb34 	bl	8000afc <__aeabi_dcmplt>
 8006494:	b110      	cbz	r0, 800649c <_printf_float+0x90>
 8006496:	232d      	movs	r3, #45	; 0x2d
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800649c:	4b93      	ldr	r3, [pc, #588]	; (80066ec <_printf_float+0x2e0>)
 800649e:	4894      	ldr	r0, [pc, #592]	; (80066f0 <_printf_float+0x2e4>)
 80064a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064a4:	bf94      	ite	ls
 80064a6:	4698      	movls	r8, r3
 80064a8:	4680      	movhi	r8, r0
 80064aa:	2303      	movs	r3, #3
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	9b05      	ldr	r3, [sp, #20]
 80064b0:	f023 0204 	bic.w	r2, r3, #4
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	9700      	str	r7, [sp, #0]
 80064bc:	4633      	mov	r3, r6
 80064be:	aa0b      	add	r2, sp, #44	; 0x2c
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f9d8 	bl	8006878 <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f040 8090 	bne.w	80065ee <_printf_float+0x1e2>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064d2:	b00d      	add	sp, #52	; 0x34
 80064d4:	ecbd 8b02 	vpop	{d8}
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa fb32 	bl	8000b4c <__aeabi_dcmpun>
 80064e8:	b140      	cbz	r0, 80064fc <_printf_float+0xf0>
 80064ea:	464b      	mov	r3, r9
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bfbc      	itt	lt
 80064f0:	232d      	movlt	r3, #45	; 0x2d
 80064f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064f6:	487f      	ldr	r0, [pc, #508]	; (80066f4 <_printf_float+0x2e8>)
 80064f8:	4b7f      	ldr	r3, [pc, #508]	; (80066f8 <_printf_float+0x2ec>)
 80064fa:	e7d1      	b.n	80064a0 <_printf_float+0x94>
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006502:	9206      	str	r2, [sp, #24]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	d13f      	bne.n	8006588 <_printf_float+0x17c>
 8006508:	2306      	movs	r3, #6
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	9b05      	ldr	r3, [sp, #20]
 800650e:	6861      	ldr	r1, [r4, #4]
 8006510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	ab0a      	add	r3, sp, #40	; 0x28
 800651a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800651e:	ab09      	add	r3, sp, #36	; 0x24
 8006520:	ec49 8b10 	vmov	d0, r8, r9
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6022      	str	r2, [r4, #0]
 8006528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fecd 	bl	80062cc <__cvt>
 8006532:	9b06      	ldr	r3, [sp, #24]
 8006534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006536:	2b47      	cmp	r3, #71	; 0x47
 8006538:	4680      	mov	r8, r0
 800653a:	d108      	bne.n	800654e <_printf_float+0x142>
 800653c:	1cc8      	adds	r0, r1, #3
 800653e:	db02      	blt.n	8006546 <_printf_float+0x13a>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	4299      	cmp	r1, r3
 8006544:	dd41      	ble.n	80065ca <_printf_float+0x1be>
 8006546:	f1ab 0b02 	sub.w	fp, fp, #2
 800654a:	fa5f fb8b 	uxtb.w	fp, fp
 800654e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006552:	d820      	bhi.n	8006596 <_printf_float+0x18a>
 8006554:	3901      	subs	r1, #1
 8006556:	465a      	mov	r2, fp
 8006558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800655c:	9109      	str	r1, [sp, #36]	; 0x24
 800655e:	f7ff ff17 	bl	8006390 <__exponent>
 8006562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006564:	1813      	adds	r3, r2, r0
 8006566:	2a01      	cmp	r2, #1
 8006568:	4681      	mov	r9, r0
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	dc02      	bgt.n	8006574 <_printf_float+0x168>
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	07d2      	lsls	r2, r2, #31
 8006572:	d501      	bpl.n	8006578 <_printf_float+0x16c>
 8006574:	3301      	adds	r3, #1
 8006576:	6123      	str	r3, [r4, #16]
 8006578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800657c:	2b00      	cmp	r3, #0
 800657e:	d09c      	beq.n	80064ba <_printf_float+0xae>
 8006580:	232d      	movs	r3, #45	; 0x2d
 8006582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006586:	e798      	b.n	80064ba <_printf_float+0xae>
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2a47      	cmp	r2, #71	; 0x47
 800658c:	d1be      	bne.n	800650c <_printf_float+0x100>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1bc      	bne.n	800650c <_printf_float+0x100>
 8006592:	2301      	movs	r3, #1
 8006594:	e7b9      	b.n	800650a <_printf_float+0xfe>
 8006596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800659a:	d118      	bne.n	80065ce <_printf_float+0x1c2>
 800659c:	2900      	cmp	r1, #0
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	dd0b      	ble.n	80065ba <_printf_float+0x1ae>
 80065a2:	6121      	str	r1, [r4, #16]
 80065a4:	b913      	cbnz	r3, 80065ac <_printf_float+0x1a0>
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	07d0      	lsls	r0, r2, #31
 80065aa:	d502      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065ac:	3301      	adds	r3, #1
 80065ae:	440b      	add	r3, r1
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065b4:	f04f 0900 	mov.w	r9, #0
 80065b8:	e7de      	b.n	8006578 <_printf_float+0x16c>
 80065ba:	b913      	cbnz	r3, 80065c2 <_printf_float+0x1b6>
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	07d2      	lsls	r2, r2, #31
 80065c0:	d501      	bpl.n	80065c6 <_printf_float+0x1ba>
 80065c2:	3302      	adds	r3, #2
 80065c4:	e7f4      	b.n	80065b0 <_printf_float+0x1a4>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e7f2      	b.n	80065b0 <_printf_float+0x1a4>
 80065ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	4299      	cmp	r1, r3
 80065d2:	db05      	blt.n	80065e0 <_printf_float+0x1d4>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	6121      	str	r1, [r4, #16]
 80065d8:	07d8      	lsls	r0, r3, #31
 80065da:	d5ea      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065dc:	1c4b      	adds	r3, r1, #1
 80065de:	e7e7      	b.n	80065b0 <_printf_float+0x1a4>
 80065e0:	2900      	cmp	r1, #0
 80065e2:	bfd4      	ite	le
 80065e4:	f1c1 0202 	rsble	r2, r1, #2
 80065e8:	2201      	movgt	r2, #1
 80065ea:	4413      	add	r3, r2
 80065ec:	e7e0      	b.n	80065b0 <_printf_float+0x1a4>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	055a      	lsls	r2, r3, #21
 80065f2:	d407      	bmi.n	8006604 <_printf_float+0x1f8>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	4642      	mov	r2, r8
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d12c      	bne.n	800665c <_printf_float+0x250>
 8006602:	e764      	b.n	80064ce <_printf_float+0xc2>
 8006604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006608:	f240 80e0 	bls.w	80067cc <_printf_float+0x3c0>
 800660c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	f7fa fa68 	bl	8000ae8 <__aeabi_dcmpeq>
 8006618:	2800      	cmp	r0, #0
 800661a:	d034      	beq.n	8006686 <_printf_float+0x27a>
 800661c:	4a37      	ldr	r2, [pc, #220]	; (80066fc <_printf_float+0x2f0>)
 800661e:	2301      	movs	r3, #1
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af51 	beq.w	80064ce <_printf_float+0xc2>
 800662c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006630:	429a      	cmp	r2, r3
 8006632:	db02      	blt.n	800663a <_printf_float+0x22e>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	07d8      	lsls	r0, r3, #31
 8006638:	d510      	bpl.n	800665c <_printf_float+0x250>
 800663a:	ee18 3a10 	vmov	r3, s16
 800663e:	4652      	mov	r2, sl
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af41 	beq.w	80064ce <_printf_float+0xc2>
 800664c:	f04f 0800 	mov.w	r8, #0
 8006650:	f104 091a 	add.w	r9, r4, #26
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	3b01      	subs	r3, #1
 8006658:	4543      	cmp	r3, r8
 800665a:	dc09      	bgt.n	8006670 <_printf_float+0x264>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	f100 8105 	bmi.w	800686e <_printf_float+0x462>
 8006664:	68e0      	ldr	r0, [r4, #12]
 8006666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006668:	4298      	cmp	r0, r3
 800666a:	bfb8      	it	lt
 800666c:	4618      	movlt	r0, r3
 800666e:	e730      	b.n	80064d2 <_printf_float+0xc6>
 8006670:	2301      	movs	r3, #1
 8006672:	464a      	mov	r2, r9
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af27 	beq.w	80064ce <_printf_float+0xc2>
 8006680:	f108 0801 	add.w	r8, r8, #1
 8006684:	e7e6      	b.n	8006654 <_printf_float+0x248>
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc39      	bgt.n	8006700 <_printf_float+0x2f4>
 800668c:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <_printf_float+0x2f0>)
 800668e:	2301      	movs	r3, #1
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af19 	beq.w	80064ce <_printf_float+0xc2>
 800669c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d102      	bne.n	80066aa <_printf_float+0x29e>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d5d8      	bpl.n	800665c <_printf_float+0x250>
 80066aa:	ee18 3a10 	vmov	r3, s16
 80066ae:	4652      	mov	r2, sl
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af09 	beq.w	80064ce <_printf_float+0xc2>
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	f104 0a1a 	add.w	sl, r4, #26
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	425b      	negs	r3, r3
 80066c8:	454b      	cmp	r3, r9
 80066ca:	dc01      	bgt.n	80066d0 <_printf_float+0x2c4>
 80066cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ce:	e792      	b.n	80065f6 <_printf_float+0x1ea>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4652      	mov	r2, sl
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f aef7 	beq.w	80064ce <_printf_float+0xc2>
 80066e0:	f109 0901 	add.w	r9, r9, #1
 80066e4:	e7ee      	b.n	80066c4 <_printf_float+0x2b8>
 80066e6:	bf00      	nop
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	0800b5a8 	.word	0x0800b5a8
 80066f0:	0800b5ac 	.word	0x0800b5ac
 80066f4:	0800b5b4 	.word	0x0800b5b4
 80066f8:	0800b5b0 	.word	0x0800b5b0
 80066fc:	0800b9a9 	.word	0x0800b9a9
 8006700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006704:	429a      	cmp	r2, r3
 8006706:	bfa8      	it	ge
 8006708:	461a      	movge	r2, r3
 800670a:	2a00      	cmp	r2, #0
 800670c:	4691      	mov	r9, r2
 800670e:	dc37      	bgt.n	8006780 <_printf_float+0x374>
 8006710:	f04f 0b00 	mov.w	fp, #0
 8006714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006718:	f104 021a 	add.w	r2, r4, #26
 800671c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	eba3 0309 	sub.w	r3, r3, r9
 8006724:	455b      	cmp	r3, fp
 8006726:	dc33      	bgt.n	8006790 <_printf_float+0x384>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	db3b      	blt.n	80067a8 <_printf_float+0x39c>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07da      	lsls	r2, r3, #31
 8006734:	d438      	bmi.n	80067a8 <_printf_float+0x39c>
 8006736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006738:	9a05      	ldr	r2, [sp, #20]
 800673a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673c:	1a9a      	subs	r2, r3, r2
 800673e:	eba3 0901 	sub.w	r9, r3, r1
 8006742:	4591      	cmp	r9, r2
 8006744:	bfa8      	it	ge
 8006746:	4691      	movge	r9, r2
 8006748:	f1b9 0f00 	cmp.w	r9, #0
 800674c:	dc35      	bgt.n	80067ba <_printf_float+0x3ae>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006756:	f104 0a1a 	add.w	sl, r4, #26
 800675a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	eba3 0309 	sub.w	r3, r3, r9
 8006764:	4543      	cmp	r3, r8
 8006766:	f77f af79 	ble.w	800665c <_printf_float+0x250>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f aeaa 	beq.w	80064ce <_printf_float+0xc2>
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	e7ec      	b.n	800675a <_printf_float+0x34e>
 8006780:	4613      	mov	r3, r2
 8006782:	4631      	mov	r1, r6
 8006784:	4642      	mov	r2, r8
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	d1c0      	bne.n	8006710 <_printf_float+0x304>
 800678e:	e69e      	b.n	80064ce <_printf_float+0xc2>
 8006790:	2301      	movs	r3, #1
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	9205      	str	r2, [sp, #20]
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f ae97 	beq.w	80064ce <_printf_float+0xc2>
 80067a0:	9a05      	ldr	r2, [sp, #20]
 80067a2:	f10b 0b01 	add.w	fp, fp, #1
 80067a6:	e7b9      	b.n	800671c <_printf_float+0x310>
 80067a8:	ee18 3a10 	vmov	r3, s16
 80067ac:	4652      	mov	r2, sl
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1be      	bne.n	8006736 <_printf_float+0x32a>
 80067b8:	e689      	b.n	80064ce <_printf_float+0xc2>
 80067ba:	9a05      	ldr	r2, [sp, #20]
 80067bc:	464b      	mov	r3, r9
 80067be:	4442      	add	r2, r8
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d1c1      	bne.n	800674e <_printf_float+0x342>
 80067ca:	e680      	b.n	80064ce <_printf_float+0xc2>
 80067cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ce:	2a01      	cmp	r2, #1
 80067d0:	dc01      	bgt.n	80067d6 <_printf_float+0x3ca>
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d538      	bpl.n	8006848 <_printf_float+0x43c>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4642      	mov	r2, r8
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae74 	beq.w	80064ce <_printf_float+0xc2>
 80067e6:	ee18 3a10 	vmov	r3, s16
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f ae6b 	beq.w	80064ce <_printf_float+0xc2>
 80067f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	f7fa f972 	bl	8000ae8 <__aeabi_dcmpeq>
 8006804:	b9d8      	cbnz	r0, 800683e <_printf_float+0x432>
 8006806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006808:	f108 0201 	add.w	r2, r8, #1
 800680c:	3b01      	subs	r3, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d10e      	bne.n	8006836 <_printf_float+0x42a>
 8006818:	e659      	b.n	80064ce <_printf_float+0xc2>
 800681a:	2301      	movs	r3, #1
 800681c:	4652      	mov	r2, sl
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae52 	beq.w	80064ce <_printf_float+0xc2>
 800682a:	f108 0801 	add.w	r8, r8, #1
 800682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	4543      	cmp	r3, r8
 8006834:	dcf1      	bgt.n	800681a <_printf_float+0x40e>
 8006836:	464b      	mov	r3, r9
 8006838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800683c:	e6dc      	b.n	80065f8 <_printf_float+0x1ec>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0a1a 	add.w	sl, r4, #26
 8006846:	e7f2      	b.n	800682e <_printf_float+0x422>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	e7df      	b.n	800680e <_printf_float+0x402>
 800684e:	2301      	movs	r3, #1
 8006850:	464a      	mov	r2, r9
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae38 	beq.w	80064ce <_printf_float+0xc2>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006866:	1a5b      	subs	r3, r3, r1
 8006868:	4543      	cmp	r3, r8
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x442>
 800686c:	e6fa      	b.n	8006664 <_printf_float+0x258>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x456>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4699      	mov	r9, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006894:	4607      	mov	r7, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc26      	bgt.n	800690e <_printf_common+0x96>
 80068c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c4:	1e13      	subs	r3, r2, #0
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d42b      	bmi.n	8006928 <_printf_common+0xb0>
 80068d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d4:	4649      	mov	r1, r9
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c0      	blx	r8
 80068da:	3001      	adds	r0, #1
 80068dc:	d01e      	beq.n	800691c <_printf_common+0xa4>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	68e5      	ldr	r5, [r4, #12]
 80068e2:	6832      	ldr	r2, [r6, #0]
 80068e4:	f003 0306 	and.w	r3, r3, #6
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	bf08      	it	eq
 80068ec:	1aad      	subeq	r5, r5, r2
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	bf0c      	ite	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	2500      	movne	r5, #0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bfc4      	itt	gt
 80068fe:	1a9b      	subgt	r3, r3, r2
 8006900:	18ed      	addgt	r5, r5, r3
 8006902:	2600      	movs	r6, #0
 8006904:	341a      	adds	r4, #26
 8006906:	42b5      	cmp	r5, r6
 8006908:	d11a      	bne.n	8006940 <_printf_common+0xc8>
 800690a:	2000      	movs	r0, #0
 800690c:	e008      	b.n	8006920 <_printf_common+0xa8>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4649      	mov	r1, r9
 8006914:	4638      	mov	r0, r7
 8006916:	47c0      	blx	r8
 8006918:	3001      	adds	r0, #1
 800691a:	d103      	bne.n	8006924 <_printf_common+0xac>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	3501      	adds	r5, #1
 8006926:	e7c6      	b.n	80068b6 <_printf_common+0x3e>
 8006928:	18e1      	adds	r1, r4, r3
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	2030      	movs	r0, #48	; 0x30
 800692e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006932:	4422      	add	r2, r4
 8006934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800693c:	3302      	adds	r3, #2
 800693e:	e7c7      	b.n	80068d0 <_printf_common+0x58>
 8006940:	2301      	movs	r3, #1
 8006942:	4622      	mov	r2, r4
 8006944:	4649      	mov	r1, r9
 8006946:	4638      	mov	r0, r7
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d0e6      	beq.n	800691c <_printf_common+0xa4>
 800694e:	3601      	adds	r6, #1
 8006950:	e7d9      	b.n	8006906 <_printf_common+0x8e>
	...

08006954 <_printf_i>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	7e0f      	ldrb	r7, [r1, #24]
 800695a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800695c:	2f78      	cmp	r7, #120	; 0x78
 800695e:	4691      	mov	r9, r2
 8006960:	4680      	mov	r8, r0
 8006962:	460c      	mov	r4, r1
 8006964:	469a      	mov	sl, r3
 8006966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800696a:	d807      	bhi.n	800697c <_printf_i+0x28>
 800696c:	2f62      	cmp	r7, #98	; 0x62
 800696e:	d80a      	bhi.n	8006986 <_printf_i+0x32>
 8006970:	2f00      	cmp	r7, #0
 8006972:	f000 80d8 	beq.w	8006b26 <_printf_i+0x1d2>
 8006976:	2f58      	cmp	r7, #88	; 0x58
 8006978:	f000 80a3 	beq.w	8006ac2 <_printf_i+0x16e>
 800697c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006984:	e03a      	b.n	80069fc <_printf_i+0xa8>
 8006986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800698a:	2b15      	cmp	r3, #21
 800698c:	d8f6      	bhi.n	800697c <_printf_i+0x28>
 800698e:	a101      	add	r1, pc, #4	; (adr r1, 8006994 <_printf_i+0x40>)
 8006990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006994:	080069ed 	.word	0x080069ed
 8006998:	08006a01 	.word	0x08006a01
 800699c:	0800697d 	.word	0x0800697d
 80069a0:	0800697d 	.word	0x0800697d
 80069a4:	0800697d 	.word	0x0800697d
 80069a8:	0800697d 	.word	0x0800697d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	0800697d 	.word	0x0800697d
 80069b4:	0800697d 	.word	0x0800697d
 80069b8:	0800697d 	.word	0x0800697d
 80069bc:	0800697d 	.word	0x0800697d
 80069c0:	08006b0d 	.word	0x08006b0d
 80069c4:	08006a31 	.word	0x08006a31
 80069c8:	08006aef 	.word	0x08006aef
 80069cc:	0800697d 	.word	0x0800697d
 80069d0:	0800697d 	.word	0x0800697d
 80069d4:	08006b2f 	.word	0x08006b2f
 80069d8:	0800697d 	.word	0x0800697d
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	0800697d 	.word	0x0800697d
 80069e4:	0800697d 	.word	0x0800697d
 80069e8:	08006af7 	.word	0x08006af7
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	602a      	str	r2, [r5, #0]
 80069f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0a3      	b.n	8006b48 <_printf_i+0x1f4>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	6829      	ldr	r1, [r5, #0]
 8006a04:	0606      	lsls	r6, r0, #24
 8006a06:	f101 0304 	add.w	r3, r1, #4
 8006a0a:	d50a      	bpl.n	8006a22 <_printf_i+0xce>
 8006a0c:	680e      	ldr	r6, [r1, #0]
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	da03      	bge.n	8006a1c <_printf_i+0xc8>
 8006a14:	232d      	movs	r3, #45	; 0x2d
 8006a16:	4276      	negs	r6, r6
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	485e      	ldr	r0, [pc, #376]	; (8006b98 <_printf_i+0x244>)
 8006a1e:	230a      	movs	r3, #10
 8006a20:	e019      	b.n	8006a56 <_printf_i+0x102>
 8006a22:	680e      	ldr	r6, [r1, #0]
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a2a:	bf18      	it	ne
 8006a2c:	b236      	sxthne	r6, r6
 8006a2e:	e7ef      	b.n	8006a10 <_printf_i+0xbc>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	1d19      	adds	r1, r3, #4
 8006a36:	6029      	str	r1, [r5, #0]
 8006a38:	0601      	lsls	r1, r0, #24
 8006a3a:	d501      	bpl.n	8006a40 <_printf_i+0xec>
 8006a3c:	681e      	ldr	r6, [r3, #0]
 8006a3e:	e002      	b.n	8006a46 <_printf_i+0xf2>
 8006a40:	0646      	lsls	r6, r0, #25
 8006a42:	d5fb      	bpl.n	8006a3c <_printf_i+0xe8>
 8006a44:	881e      	ldrh	r6, [r3, #0]
 8006a46:	4854      	ldr	r0, [pc, #336]	; (8006b98 <_printf_i+0x244>)
 8006a48:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2308      	moveq	r3, #8
 8006a4e:	230a      	movne	r3, #10
 8006a50:	2100      	movs	r1, #0
 8006a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a56:	6865      	ldr	r5, [r4, #4]
 8006a58:	60a5      	str	r5, [r4, #8]
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	bfa2      	ittt	ge
 8006a5e:	6821      	ldrge	r1, [r4, #0]
 8006a60:	f021 0104 	bicge.w	r1, r1, #4
 8006a64:	6021      	strge	r1, [r4, #0]
 8006a66:	b90e      	cbnz	r6, 8006a6c <_printf_i+0x118>
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d04d      	beq.n	8006b08 <_printf_i+0x1b4>
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a72:	fb03 6711 	mls	r7, r3, r1, r6
 8006a76:	5dc7      	ldrb	r7, [r0, r7]
 8006a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a7c:	4637      	mov	r7, r6
 8006a7e:	42bb      	cmp	r3, r7
 8006a80:	460e      	mov	r6, r1
 8006a82:	d9f4      	bls.n	8006a6e <_printf_i+0x11a>
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d10b      	bne.n	8006aa0 <_printf_i+0x14c>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	07de      	lsls	r6, r3, #31
 8006a8c:	d508      	bpl.n	8006aa0 <_printf_i+0x14c>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	4299      	cmp	r1, r3
 8006a94:	bfde      	ittt	le
 8006a96:	2330      	movle	r3, #48	; 0x30
 8006a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006aa0:	1b52      	subs	r2, r2, r5
 8006aa2:	6122      	str	r2, [r4, #16]
 8006aa4:	f8cd a000 	str.w	sl, [sp]
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	aa03      	add	r2, sp, #12
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff fee2 	bl	8006878 <_printf_common>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d14c      	bne.n	8006b52 <_printf_i+0x1fe>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006abc:	b004      	add	sp, #16
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	4835      	ldr	r0, [pc, #212]	; (8006b98 <_printf_i+0x244>)
 8006ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ac8:	6829      	ldr	r1, [r5, #0]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	061d      	lsls	r5, r3, #24
 8006ad4:	d514      	bpl.n	8006b00 <_printf_i+0x1ac>
 8006ad6:	07df      	lsls	r7, r3, #31
 8006ad8:	bf44      	itt	mi
 8006ada:	f043 0320 	orrmi.w	r3, r3, #32
 8006ade:	6023      	strmi	r3, [r4, #0]
 8006ae0:	b91e      	cbnz	r6, 8006aea <_printf_i+0x196>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f023 0320 	bic.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	2310      	movs	r3, #16
 8006aec:	e7b0      	b.n	8006a50 <_printf_i+0xfc>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f043 0320 	orr.w	r3, r3, #32
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	2378      	movs	r3, #120	; 0x78
 8006af8:	4828      	ldr	r0, [pc, #160]	; (8006b9c <_printf_i+0x248>)
 8006afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006afe:	e7e3      	b.n	8006ac8 <_printf_i+0x174>
 8006b00:	0659      	lsls	r1, r3, #25
 8006b02:	bf48      	it	mi
 8006b04:	b2b6      	uxthmi	r6, r6
 8006b06:	e7e6      	b.n	8006ad6 <_printf_i+0x182>
 8006b08:	4615      	mov	r5, r2
 8006b0a:	e7bb      	b.n	8006a84 <_printf_i+0x130>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	6826      	ldr	r6, [r4, #0]
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6028      	str	r0, [r5, #0]
 8006b16:	0635      	lsls	r5, r6, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1cc>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1d2>
 8006b20:	0670      	lsls	r0, r6, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1c8>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	e7ba      	b.n	8006aa4 <_printf_i+0x150>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	602a      	str	r2, [r5, #0]
 8006b34:	681d      	ldr	r5, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7f9 fb60 	bl	8000200 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1f2>
 8006b42:	1b40      	subs	r0, r0, r5
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b50:	e7a8      	b.n	8006aa4 <_printf_i+0x150>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	462a      	mov	r2, r5
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ab      	beq.n	8006ab8 <_printf_i+0x164>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x23a>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a4      	b.n	8006abc <_printf_i+0x168>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09b      	beq.n	8006ab8 <_printf_i+0x164>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x21e>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x212>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x22e>
 8006b96:	bf00      	nop
 8006b98:	0800b5b8 	.word	0x0800b5b8
 8006b9c:	0800b5c9 	.word	0x0800b5c9

08006ba0 <_scanf_float>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	4617      	mov	r7, r2
 8006ba8:	9303      	str	r3, [sp, #12]
 8006baa:	688b      	ldr	r3, [r1, #8]
 8006bac:	1e5a      	subs	r2, r3, #1
 8006bae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006bb2:	bf83      	ittte	hi
 8006bb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006bb8:	195b      	addhi	r3, r3, r5
 8006bba:	9302      	strhi	r3, [sp, #8]
 8006bbc:	2300      	movls	r3, #0
 8006bbe:	bf86      	itte	hi
 8006bc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006bc4:	608b      	strhi	r3, [r1, #8]
 8006bc6:	9302      	strls	r3, [sp, #8]
 8006bc8:	680b      	ldr	r3, [r1, #0]
 8006bca:	468b      	mov	fp, r1
 8006bcc:	2500      	movs	r5, #0
 8006bce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006bd2:	f84b 3b1c 	str.w	r3, [fp], #28
 8006bd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006bda:	4680      	mov	r8, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	465e      	mov	r6, fp
 8006be0:	46aa      	mov	sl, r5
 8006be2:	46a9      	mov	r9, r5
 8006be4:	9501      	str	r5, [sp, #4]
 8006be6:	68a2      	ldr	r2, [r4, #8]
 8006be8:	b152      	cbz	r2, 8006c00 <_scanf_float+0x60>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b4e      	cmp	r3, #78	; 0x4e
 8006bf0:	d864      	bhi.n	8006cbc <_scanf_float+0x11c>
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d83c      	bhi.n	8006c70 <_scanf_float+0xd0>
 8006bf6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006bfa:	b2c8      	uxtb	r0, r1
 8006bfc:	280e      	cmp	r0, #14
 8006bfe:	d93a      	bls.n	8006c76 <_scanf_float+0xd6>
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	d003      	beq.n	8006c0e <_scanf_float+0x6e>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006c12:	f1ba 0f01 	cmp.w	sl, #1
 8006c16:	f200 8113 	bhi.w	8006e40 <_scanf_float+0x2a0>
 8006c1a:	455e      	cmp	r6, fp
 8006c1c:	f200 8105 	bhi.w	8006e2a <_scanf_float+0x28a>
 8006c20:	2501      	movs	r5, #1
 8006c22:	4628      	mov	r0, r5
 8006c24:	b007      	add	sp, #28
 8006c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006c2e:	2a0d      	cmp	r2, #13
 8006c30:	d8e6      	bhi.n	8006c00 <_scanf_float+0x60>
 8006c32:	a101      	add	r1, pc, #4	; (adr r1, 8006c38 <_scanf_float+0x98>)
 8006c34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c38:	08006d77 	.word	0x08006d77
 8006c3c:	08006c01 	.word	0x08006c01
 8006c40:	08006c01 	.word	0x08006c01
 8006c44:	08006c01 	.word	0x08006c01
 8006c48:	08006dd7 	.word	0x08006dd7
 8006c4c:	08006daf 	.word	0x08006daf
 8006c50:	08006c01 	.word	0x08006c01
 8006c54:	08006c01 	.word	0x08006c01
 8006c58:	08006d85 	.word	0x08006d85
 8006c5c:	08006c01 	.word	0x08006c01
 8006c60:	08006c01 	.word	0x08006c01
 8006c64:	08006c01 	.word	0x08006c01
 8006c68:	08006c01 	.word	0x08006c01
 8006c6c:	08006d3d 	.word	0x08006d3d
 8006c70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c74:	e7db      	b.n	8006c2e <_scanf_float+0x8e>
 8006c76:	290e      	cmp	r1, #14
 8006c78:	d8c2      	bhi.n	8006c00 <_scanf_float+0x60>
 8006c7a:	a001      	add	r0, pc, #4	; (adr r0, 8006c80 <_scanf_float+0xe0>)
 8006c7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c80:	08006d2f 	.word	0x08006d2f
 8006c84:	08006c01 	.word	0x08006c01
 8006c88:	08006d2f 	.word	0x08006d2f
 8006c8c:	08006dc3 	.word	0x08006dc3
 8006c90:	08006c01 	.word	0x08006c01
 8006c94:	08006cdd 	.word	0x08006cdd
 8006c98:	08006d19 	.word	0x08006d19
 8006c9c:	08006d19 	.word	0x08006d19
 8006ca0:	08006d19 	.word	0x08006d19
 8006ca4:	08006d19 	.word	0x08006d19
 8006ca8:	08006d19 	.word	0x08006d19
 8006cac:	08006d19 	.word	0x08006d19
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006d19 	.word	0x08006d19
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	2b6e      	cmp	r3, #110	; 0x6e
 8006cbe:	d809      	bhi.n	8006cd4 <_scanf_float+0x134>
 8006cc0:	2b60      	cmp	r3, #96	; 0x60
 8006cc2:	d8b2      	bhi.n	8006c2a <_scanf_float+0x8a>
 8006cc4:	2b54      	cmp	r3, #84	; 0x54
 8006cc6:	d077      	beq.n	8006db8 <_scanf_float+0x218>
 8006cc8:	2b59      	cmp	r3, #89	; 0x59
 8006cca:	d199      	bne.n	8006c00 <_scanf_float+0x60>
 8006ccc:	2d07      	cmp	r5, #7
 8006cce:	d197      	bne.n	8006c00 <_scanf_float+0x60>
 8006cd0:	2508      	movs	r5, #8
 8006cd2:	e029      	b.n	8006d28 <_scanf_float+0x188>
 8006cd4:	2b74      	cmp	r3, #116	; 0x74
 8006cd6:	d06f      	beq.n	8006db8 <_scanf_float+0x218>
 8006cd8:	2b79      	cmp	r3, #121	; 0x79
 8006cda:	e7f6      	b.n	8006cca <_scanf_float+0x12a>
 8006cdc:	6821      	ldr	r1, [r4, #0]
 8006cde:	05c8      	lsls	r0, r1, #23
 8006ce0:	d51a      	bpl.n	8006d18 <_scanf_float+0x178>
 8006ce2:	9b02      	ldr	r3, [sp, #8]
 8006ce4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ce8:	6021      	str	r1, [r4, #0]
 8006cea:	f109 0901 	add.w	r9, r9, #1
 8006cee:	b11b      	cbz	r3, 8006cf8 <_scanf_float+0x158>
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	3201      	adds	r2, #1
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	60a2      	str	r2, [r4, #8]
 8006cf8:	68a3      	ldr	r3, [r4, #8]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	f340 8084 	ble.w	8006e18 <_scanf_float+0x278>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	e766      	b.n	8006be6 <_scanf_float+0x46>
 8006d18:	eb1a 0f05 	cmn.w	sl, r5
 8006d1c:	f47f af70 	bne.w	8006c00 <_scanf_float+0x60>
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006d26:	6022      	str	r2, [r4, #0]
 8006d28:	f806 3b01 	strb.w	r3, [r6], #1
 8006d2c:	e7e4      	b.n	8006cf8 <_scanf_float+0x158>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	0610      	lsls	r0, r2, #24
 8006d32:	f57f af65 	bpl.w	8006c00 <_scanf_float+0x60>
 8006d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d3a:	e7f4      	b.n	8006d26 <_scanf_float+0x186>
 8006d3c:	f1ba 0f00 	cmp.w	sl, #0
 8006d40:	d10e      	bne.n	8006d60 <_scanf_float+0x1c0>
 8006d42:	f1b9 0f00 	cmp.w	r9, #0
 8006d46:	d10e      	bne.n	8006d66 <_scanf_float+0x1c6>
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d52:	d108      	bne.n	8006d66 <_scanf_float+0x1c6>
 8006d54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d58:	6022      	str	r2, [r4, #0]
 8006d5a:	f04f 0a01 	mov.w	sl, #1
 8006d5e:	e7e3      	b.n	8006d28 <_scanf_float+0x188>
 8006d60:	f1ba 0f02 	cmp.w	sl, #2
 8006d64:	d055      	beq.n	8006e12 <_scanf_float+0x272>
 8006d66:	2d01      	cmp	r5, #1
 8006d68:	d002      	beq.n	8006d70 <_scanf_float+0x1d0>
 8006d6a:	2d04      	cmp	r5, #4
 8006d6c:	f47f af48 	bne.w	8006c00 <_scanf_float+0x60>
 8006d70:	3501      	adds	r5, #1
 8006d72:	b2ed      	uxtb	r5, r5
 8006d74:	e7d8      	b.n	8006d28 <_scanf_float+0x188>
 8006d76:	f1ba 0f01 	cmp.w	sl, #1
 8006d7a:	f47f af41 	bne.w	8006c00 <_scanf_float+0x60>
 8006d7e:	f04f 0a02 	mov.w	sl, #2
 8006d82:	e7d1      	b.n	8006d28 <_scanf_float+0x188>
 8006d84:	b97d      	cbnz	r5, 8006da6 <_scanf_float+0x206>
 8006d86:	f1b9 0f00 	cmp.w	r9, #0
 8006d8a:	f47f af3c 	bne.w	8006c06 <_scanf_float+0x66>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d98:	f47f af39 	bne.w	8006c0e <_scanf_float+0x6e>
 8006d9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006da0:	6022      	str	r2, [r4, #0]
 8006da2:	2501      	movs	r5, #1
 8006da4:	e7c0      	b.n	8006d28 <_scanf_float+0x188>
 8006da6:	2d03      	cmp	r5, #3
 8006da8:	d0e2      	beq.n	8006d70 <_scanf_float+0x1d0>
 8006daa:	2d05      	cmp	r5, #5
 8006dac:	e7de      	b.n	8006d6c <_scanf_float+0x1cc>
 8006dae:	2d02      	cmp	r5, #2
 8006db0:	f47f af26 	bne.w	8006c00 <_scanf_float+0x60>
 8006db4:	2503      	movs	r5, #3
 8006db6:	e7b7      	b.n	8006d28 <_scanf_float+0x188>
 8006db8:	2d06      	cmp	r5, #6
 8006dba:	f47f af21 	bne.w	8006c00 <_scanf_float+0x60>
 8006dbe:	2507      	movs	r5, #7
 8006dc0:	e7b2      	b.n	8006d28 <_scanf_float+0x188>
 8006dc2:	6822      	ldr	r2, [r4, #0]
 8006dc4:	0591      	lsls	r1, r2, #22
 8006dc6:	f57f af1b 	bpl.w	8006c00 <_scanf_float+0x60>
 8006dca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006dce:	6022      	str	r2, [r4, #0]
 8006dd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006dd4:	e7a8      	b.n	8006d28 <_scanf_float+0x188>
 8006dd6:	6822      	ldr	r2, [r4, #0]
 8006dd8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ddc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006de0:	d006      	beq.n	8006df0 <_scanf_float+0x250>
 8006de2:	0550      	lsls	r0, r2, #21
 8006de4:	f57f af0c 	bpl.w	8006c00 <_scanf_float+0x60>
 8006de8:	f1b9 0f00 	cmp.w	r9, #0
 8006dec:	f43f af0f 	beq.w	8006c0e <_scanf_float+0x6e>
 8006df0:	0591      	lsls	r1, r2, #22
 8006df2:	bf58      	it	pl
 8006df4:	9901      	ldrpl	r1, [sp, #4]
 8006df6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dfa:	bf58      	it	pl
 8006dfc:	eba9 0101 	subpl.w	r1, r9, r1
 8006e00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e04:	bf58      	it	pl
 8006e06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	f04f 0900 	mov.w	r9, #0
 8006e10:	e78a      	b.n	8006d28 <_scanf_float+0x188>
 8006e12:	f04f 0a03 	mov.w	sl, #3
 8006e16:	e787      	b.n	8006d28 <_scanf_float+0x188>
 8006e18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e1c:	4639      	mov	r1, r7
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4798      	blx	r3
 8006e22:	2800      	cmp	r0, #0
 8006e24:	f43f aedf 	beq.w	8006be6 <_scanf_float+0x46>
 8006e28:	e6ea      	b.n	8006c00 <_scanf_float+0x60>
 8006e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e32:	463a      	mov	r2, r7
 8006e34:	4640      	mov	r0, r8
 8006e36:	4798      	blx	r3
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	e6ec      	b.n	8006c1a <_scanf_float+0x7a>
 8006e40:	1e6b      	subs	r3, r5, #1
 8006e42:	2b06      	cmp	r3, #6
 8006e44:	d825      	bhi.n	8006e92 <_scanf_float+0x2f2>
 8006e46:	2d02      	cmp	r5, #2
 8006e48:	d836      	bhi.n	8006eb8 <_scanf_float+0x318>
 8006e4a:	455e      	cmp	r6, fp
 8006e4c:	f67f aee8 	bls.w	8006c20 <_scanf_float+0x80>
 8006e50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e58:	463a      	mov	r2, r7
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4798      	blx	r3
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	e7f1      	b.n	8006e4a <_scanf_float+0x2aa>
 8006e66:	9802      	ldr	r0, [sp, #8]
 8006e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e70:	9002      	str	r0, [sp, #8]
 8006e72:	463a      	mov	r2, r7
 8006e74:	4640      	mov	r0, r8
 8006e76:	4798      	blx	r3
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e82:	fa5f fa8a 	uxtb.w	sl, sl
 8006e86:	f1ba 0f02 	cmp.w	sl, #2
 8006e8a:	d1ec      	bne.n	8006e66 <_scanf_float+0x2c6>
 8006e8c:	3d03      	subs	r5, #3
 8006e8e:	b2ed      	uxtb	r5, r5
 8006e90:	1b76      	subs	r6, r6, r5
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	05da      	lsls	r2, r3, #23
 8006e96:	d52f      	bpl.n	8006ef8 <_scanf_float+0x358>
 8006e98:	055b      	lsls	r3, r3, #21
 8006e9a:	d510      	bpl.n	8006ebe <_scanf_float+0x31e>
 8006e9c:	455e      	cmp	r6, fp
 8006e9e:	f67f aebf 	bls.w	8006c20 <_scanf_float+0x80>
 8006ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eaa:	463a      	mov	r2, r7
 8006eac:	4640      	mov	r0, r8
 8006eae:	4798      	blx	r3
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	e7f1      	b.n	8006e9c <_scanf_float+0x2fc>
 8006eb8:	46aa      	mov	sl, r5
 8006eba:	9602      	str	r6, [sp, #8]
 8006ebc:	e7df      	b.n	8006e7e <_scanf_float+0x2de>
 8006ebe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	2965      	cmp	r1, #101	; 0x65
 8006ec6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006eca:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	d00c      	beq.n	8006eec <_scanf_float+0x34c>
 8006ed2:	2945      	cmp	r1, #69	; 0x45
 8006ed4:	d00a      	beq.n	8006eec <_scanf_float+0x34c>
 8006ed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eda:	463a      	mov	r2, r7
 8006edc:	4640      	mov	r0, r8
 8006ede:	4798      	blx	r3
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	1eb5      	subs	r5, r6, #2
 8006eea:	6123      	str	r3, [r4, #16]
 8006eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ef0:	463a      	mov	r2, r7
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4798      	blx	r3
 8006ef6:	462e      	mov	r6, r5
 8006ef8:	6825      	ldr	r5, [r4, #0]
 8006efa:	f015 0510 	ands.w	r5, r5, #16
 8006efe:	d159      	bne.n	8006fb4 <_scanf_float+0x414>
 8006f00:	7035      	strb	r5, [r6, #0]
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0c:	d11b      	bne.n	8006f46 <_scanf_float+0x3a6>
 8006f0e:	9b01      	ldr	r3, [sp, #4]
 8006f10:	454b      	cmp	r3, r9
 8006f12:	eba3 0209 	sub.w	r2, r3, r9
 8006f16:	d123      	bne.n	8006f60 <_scanf_float+0x3c0>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	4659      	mov	r1, fp
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	f000 ff09 	bl	8007d34 <_strtod_r>
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	f012 0f02 	tst.w	r2, #2
 8006f2a:	ec57 6b10 	vmov	r6, r7, d0
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	d021      	beq.n	8006f76 <_scanf_float+0x3d6>
 8006f32:	9903      	ldr	r1, [sp, #12]
 8006f34:	1d1a      	adds	r2, r3, #4
 8006f36:	600a      	str	r2, [r1, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	e9c3 6700 	strd	r6, r7, [r3]
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	60e3      	str	r3, [r4, #12]
 8006f44:	e66d      	b.n	8006c22 <_scanf_float+0x82>
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0e5      	beq.n	8006f18 <_scanf_float+0x378>
 8006f4c:	9905      	ldr	r1, [sp, #20]
 8006f4e:	230a      	movs	r3, #10
 8006f50:	462a      	mov	r2, r5
 8006f52:	3101      	adds	r1, #1
 8006f54:	4640      	mov	r0, r8
 8006f56:	f000 ff75 	bl	8007e44 <_strtol_r>
 8006f5a:	9b04      	ldr	r3, [sp, #16]
 8006f5c:	9e05      	ldr	r6, [sp, #20]
 8006f5e:	1ac2      	subs	r2, r0, r3
 8006f60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f64:	429e      	cmp	r6, r3
 8006f66:	bf28      	it	cs
 8006f68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f6c:	4912      	ldr	r1, [pc, #72]	; (8006fb8 <_scanf_float+0x418>)
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f000 f82c 	bl	8006fcc <siprintf>
 8006f74:	e7d0      	b.n	8006f18 <_scanf_float+0x378>
 8006f76:	9903      	ldr	r1, [sp, #12]
 8006f78:	f012 0f04 	tst.w	r2, #4
 8006f7c:	f103 0204 	add.w	r2, r3, #4
 8006f80:	600a      	str	r2, [r1, #0]
 8006f82:	d1d9      	bne.n	8006f38 <_scanf_float+0x398>
 8006f84:	f8d3 8000 	ldr.w	r8, [r3]
 8006f88:	ee10 2a10 	vmov	r2, s0
 8006f8c:	ee10 0a10 	vmov	r0, s0
 8006f90:	463b      	mov	r3, r7
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 fdda 	bl	8000b4c <__aeabi_dcmpun>
 8006f98:	b128      	cbz	r0, 8006fa6 <_scanf_float+0x406>
 8006f9a:	4808      	ldr	r0, [pc, #32]	; (8006fbc <_scanf_float+0x41c>)
 8006f9c:	f000 f810 	bl	8006fc0 <nanf>
 8006fa0:	ed88 0a00 	vstr	s0, [r8]
 8006fa4:	e7cb      	b.n	8006f3e <_scanf_float+0x39e>
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 fe2d 	bl	8000c08 <__aeabi_d2f>
 8006fae:	f8c8 0000 	str.w	r0, [r8]
 8006fb2:	e7c4      	b.n	8006f3e <_scanf_float+0x39e>
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	e634      	b.n	8006c22 <_scanf_float+0x82>
 8006fb8:	0800b5da 	.word	0x0800b5da
 8006fbc:	0800b9fb 	.word	0x0800b9fb

08006fc0 <nanf>:
 8006fc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fc8 <nanf+0x8>
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	7fc00000 	.word	0x7fc00000

08006fcc <siprintf>:
 8006fcc:	b40e      	push	{r1, r2, r3}
 8006fce:	b500      	push	{lr}
 8006fd0:	b09c      	sub	sp, #112	; 0x70
 8006fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fd4:	9002      	str	r0, [sp, #8]
 8006fd6:	9006      	str	r0, [sp, #24]
 8006fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fdc:	4809      	ldr	r0, [pc, #36]	; (8007004 <siprintf+0x38>)
 8006fde:	9107      	str	r1, [sp, #28]
 8006fe0:	9104      	str	r1, [sp, #16]
 8006fe2:	4909      	ldr	r1, [pc, #36]	; (8007008 <siprintf+0x3c>)
 8006fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe8:	9105      	str	r1, [sp, #20]
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	a902      	add	r1, sp, #8
 8006ff0:	f002 ff7c 	bl	8009eec <_svfiprintf_r>
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	b01c      	add	sp, #112	; 0x70
 8006ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007000:	b003      	add	sp, #12
 8007002:	4770      	bx	lr
 8007004:	2000001c 	.word	0x2000001c
 8007008:	ffff0208 	.word	0xffff0208

0800700c <siscanf>:
 800700c:	b40e      	push	{r1, r2, r3}
 800700e:	b510      	push	{r4, lr}
 8007010:	b09f      	sub	sp, #124	; 0x7c
 8007012:	ac21      	add	r4, sp, #132	; 0x84
 8007014:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007018:	f854 2b04 	ldr.w	r2, [r4], #4
 800701c:	9201      	str	r2, [sp, #4]
 800701e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007022:	9004      	str	r0, [sp, #16]
 8007024:	9008      	str	r0, [sp, #32]
 8007026:	f7f9 f8dd 	bl	80001e4 <strlen>
 800702a:	4b0c      	ldr	r3, [pc, #48]	; (800705c <siscanf+0x50>)
 800702c:	9005      	str	r0, [sp, #20]
 800702e:	9009      	str	r0, [sp, #36]	; 0x24
 8007030:	930d      	str	r3, [sp, #52]	; 0x34
 8007032:	480b      	ldr	r0, [pc, #44]	; (8007060 <siscanf+0x54>)
 8007034:	9a01      	ldr	r2, [sp, #4]
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	9403      	str	r4, [sp, #12]
 800703a:	2300      	movs	r3, #0
 800703c:	9311      	str	r3, [sp, #68]	; 0x44
 800703e:	9316      	str	r3, [sp, #88]	; 0x58
 8007040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007044:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007048:	a904      	add	r1, sp, #16
 800704a:	4623      	mov	r3, r4
 800704c:	f003 f8a8 	bl	800a1a0 <__ssvfiscanf_r>
 8007050:	b01f      	add	sp, #124	; 0x7c
 8007052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007056:	b003      	add	sp, #12
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	08007087 	.word	0x08007087
 8007060:	2000001c 	.word	0x2000001c

08007064 <__sread>:
 8007064:	b510      	push	{r4, lr}
 8007066:	460c      	mov	r4, r1
 8007068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706c:	f003 fb62 	bl	800a734 <_read_r>
 8007070:	2800      	cmp	r0, #0
 8007072:	bfab      	itete	ge
 8007074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007076:	89a3      	ldrhlt	r3, [r4, #12]
 8007078:	181b      	addge	r3, r3, r0
 800707a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800707e:	bfac      	ite	ge
 8007080:	6563      	strge	r3, [r4, #84]	; 0x54
 8007082:	81a3      	strhlt	r3, [r4, #12]
 8007084:	bd10      	pop	{r4, pc}

08007086 <__seofread>:
 8007086:	2000      	movs	r0, #0
 8007088:	4770      	bx	lr

0800708a <__swrite>:
 800708a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708e:	461f      	mov	r7, r3
 8007090:	898b      	ldrh	r3, [r1, #12]
 8007092:	05db      	lsls	r3, r3, #23
 8007094:	4605      	mov	r5, r0
 8007096:	460c      	mov	r4, r1
 8007098:	4616      	mov	r6, r2
 800709a:	d505      	bpl.n	80070a8 <__swrite+0x1e>
 800709c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a0:	2302      	movs	r3, #2
 80070a2:	2200      	movs	r2, #0
 80070a4:	f002 f8e2 	bl	800926c <_lseek_r>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	4632      	mov	r2, r6
 80070b6:	463b      	mov	r3, r7
 80070b8:	4628      	mov	r0, r5
 80070ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070be:	f000 bec3 	b.w	8007e48 <_write_r>

080070c2 <__sseek>:
 80070c2:	b510      	push	{r4, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ca:	f002 f8cf 	bl	800926c <_lseek_r>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	bf15      	itete	ne
 80070d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80070d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070de:	81a3      	strheq	r3, [r4, #12]
 80070e0:	bf18      	it	ne
 80070e2:	81a3      	strhne	r3, [r4, #12]
 80070e4:	bd10      	pop	{r4, pc}

080070e6 <__sclose>:
 80070e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ea:	f000 bebf 	b.w	8007e6c <_close_r>

080070ee <sulp>:
 80070ee:	b570      	push	{r4, r5, r6, lr}
 80070f0:	4604      	mov	r4, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	ec45 4b10 	vmov	d0, r4, r5
 80070f8:	4616      	mov	r6, r2
 80070fa:	f002 fc55 	bl	80099a8 <__ulp>
 80070fe:	ec51 0b10 	vmov	r0, r1, d0
 8007102:	b17e      	cbz	r6, 8007124 <sulp+0x36>
 8007104:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007108:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800710c:	2b00      	cmp	r3, #0
 800710e:	dd09      	ble.n	8007124 <sulp+0x36>
 8007110:	051b      	lsls	r3, r3, #20
 8007112:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007116:	2400      	movs	r4, #0
 8007118:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800711c:	4622      	mov	r2, r4
 800711e:	462b      	mov	r3, r5
 8007120:	f7f9 fa7a 	bl	8000618 <__aeabi_dmul>
 8007124:	bd70      	pop	{r4, r5, r6, pc}
	...

08007128 <_strtod_l>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	ed2d 8b02 	vpush	{d8}
 8007130:	b09d      	sub	sp, #116	; 0x74
 8007132:	461f      	mov	r7, r3
 8007134:	2300      	movs	r3, #0
 8007136:	9318      	str	r3, [sp, #96]	; 0x60
 8007138:	4ba2      	ldr	r3, [pc, #648]	; (80073c4 <_strtod_l+0x29c>)
 800713a:	9213      	str	r2, [sp, #76]	; 0x4c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	9305      	str	r3, [sp, #20]
 8007140:	4604      	mov	r4, r0
 8007142:	4618      	mov	r0, r3
 8007144:	4688      	mov	r8, r1
 8007146:	f7f9 f84d 	bl	80001e4 <strlen>
 800714a:	f04f 0a00 	mov.w	sl, #0
 800714e:	4605      	mov	r5, r0
 8007150:	f04f 0b00 	mov.w	fp, #0
 8007154:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	2a2b      	cmp	r2, #43	; 0x2b
 800715e:	d04e      	beq.n	80071fe <_strtod_l+0xd6>
 8007160:	d83b      	bhi.n	80071da <_strtod_l+0xb2>
 8007162:	2a0d      	cmp	r2, #13
 8007164:	d834      	bhi.n	80071d0 <_strtod_l+0xa8>
 8007166:	2a08      	cmp	r2, #8
 8007168:	d834      	bhi.n	80071d4 <_strtod_l+0xac>
 800716a:	2a00      	cmp	r2, #0
 800716c:	d03e      	beq.n	80071ec <_strtod_l+0xc4>
 800716e:	2300      	movs	r3, #0
 8007170:	930a      	str	r3, [sp, #40]	; 0x28
 8007172:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007174:	7833      	ldrb	r3, [r6, #0]
 8007176:	2b30      	cmp	r3, #48	; 0x30
 8007178:	f040 80b0 	bne.w	80072dc <_strtod_l+0x1b4>
 800717c:	7873      	ldrb	r3, [r6, #1]
 800717e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007182:	2b58      	cmp	r3, #88	; 0x58
 8007184:	d168      	bne.n	8007258 <_strtod_l+0x130>
 8007186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	ab18      	add	r3, sp, #96	; 0x60
 800718c:	9702      	str	r7, [sp, #8]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	4a8d      	ldr	r2, [pc, #564]	; (80073c8 <_strtod_l+0x2a0>)
 8007192:	ab19      	add	r3, sp, #100	; 0x64
 8007194:	a917      	add	r1, sp, #92	; 0x5c
 8007196:	4620      	mov	r0, r4
 8007198:	f001 fd5c 	bl	8008c54 <__gethex>
 800719c:	f010 0707 	ands.w	r7, r0, #7
 80071a0:	4605      	mov	r5, r0
 80071a2:	d005      	beq.n	80071b0 <_strtod_l+0x88>
 80071a4:	2f06      	cmp	r7, #6
 80071a6:	d12c      	bne.n	8007202 <_strtod_l+0xda>
 80071a8:	3601      	adds	r6, #1
 80071aa:	2300      	movs	r3, #0
 80071ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80071ae:	930a      	str	r3, [sp, #40]	; 0x28
 80071b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 8590 	bne.w	8007cd8 <_strtod_l+0xbb0>
 80071b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ba:	b1eb      	cbz	r3, 80071f8 <_strtod_l+0xd0>
 80071bc:	4652      	mov	r2, sl
 80071be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071c2:	ec43 2b10 	vmov	d0, r2, r3
 80071c6:	b01d      	add	sp, #116	; 0x74
 80071c8:	ecbd 8b02 	vpop	{d8}
 80071cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d0:	2a20      	cmp	r2, #32
 80071d2:	d1cc      	bne.n	800716e <_strtod_l+0x46>
 80071d4:	3301      	adds	r3, #1
 80071d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80071d8:	e7be      	b.n	8007158 <_strtod_l+0x30>
 80071da:	2a2d      	cmp	r2, #45	; 0x2d
 80071dc:	d1c7      	bne.n	800716e <_strtod_l+0x46>
 80071de:	2201      	movs	r2, #1
 80071e0:	920a      	str	r2, [sp, #40]	; 0x28
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1c2      	bne.n	8007172 <_strtod_l+0x4a>
 80071ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 856e 	bne.w	8007cd4 <_strtod_l+0xbac>
 80071f8:	4652      	mov	r2, sl
 80071fa:	465b      	mov	r3, fp
 80071fc:	e7e1      	b.n	80071c2 <_strtod_l+0x9a>
 80071fe:	2200      	movs	r2, #0
 8007200:	e7ee      	b.n	80071e0 <_strtod_l+0xb8>
 8007202:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007204:	b13a      	cbz	r2, 8007216 <_strtod_l+0xee>
 8007206:	2135      	movs	r1, #53	; 0x35
 8007208:	a81a      	add	r0, sp, #104	; 0x68
 800720a:	f002 fcd8 	bl	8009bbe <__copybits>
 800720e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007210:	4620      	mov	r0, r4
 8007212:	f002 f897 	bl	8009344 <_Bfree>
 8007216:	3f01      	subs	r7, #1
 8007218:	2f04      	cmp	r7, #4
 800721a:	d806      	bhi.n	800722a <_strtod_l+0x102>
 800721c:	e8df f007 	tbb	[pc, r7]
 8007220:	1714030a 	.word	0x1714030a
 8007224:	0a          	.byte	0x0a
 8007225:	00          	.byte	0x00
 8007226:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800722a:	0728      	lsls	r0, r5, #28
 800722c:	d5c0      	bpl.n	80071b0 <_strtod_l+0x88>
 800722e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007232:	e7bd      	b.n	80071b0 <_strtod_l+0x88>
 8007234:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007238:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800723a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800723e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007242:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007246:	e7f0      	b.n	800722a <_strtod_l+0x102>
 8007248:	f8df b180 	ldr.w	fp, [pc, #384]	; 80073cc <_strtod_l+0x2a4>
 800724c:	e7ed      	b.n	800722a <_strtod_l+0x102>
 800724e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007252:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007256:	e7e8      	b.n	800722a <_strtod_l+0x102>
 8007258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	9217      	str	r2, [sp, #92]	; 0x5c
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	d0f9      	beq.n	8007258 <_strtod_l+0x130>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0a3      	beq.n	80071b0 <_strtod_l+0x88>
 8007268:	2301      	movs	r3, #1
 800726a:	f04f 0900 	mov.w	r9, #0
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007272:	9308      	str	r3, [sp, #32]
 8007274:	f8cd 901c 	str.w	r9, [sp, #28]
 8007278:	464f      	mov	r7, r9
 800727a:	220a      	movs	r2, #10
 800727c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800727e:	7806      	ldrb	r6, [r0, #0]
 8007280:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007284:	b2d9      	uxtb	r1, r3
 8007286:	2909      	cmp	r1, #9
 8007288:	d92a      	bls.n	80072e0 <_strtod_l+0x1b8>
 800728a:	9905      	ldr	r1, [sp, #20]
 800728c:	462a      	mov	r2, r5
 800728e:	f003 fab3 	bl	800a7f8 <strncmp>
 8007292:	b398      	cbz	r0, 80072fc <_strtod_l+0x1d4>
 8007294:	2000      	movs	r0, #0
 8007296:	4632      	mov	r2, r6
 8007298:	463d      	mov	r5, r7
 800729a:	9005      	str	r0, [sp, #20]
 800729c:	4603      	mov	r3, r0
 800729e:	2a65      	cmp	r2, #101	; 0x65
 80072a0:	d001      	beq.n	80072a6 <_strtod_l+0x17e>
 80072a2:	2a45      	cmp	r2, #69	; 0x45
 80072a4:	d118      	bne.n	80072d8 <_strtod_l+0x1b0>
 80072a6:	b91d      	cbnz	r5, 80072b0 <_strtod_l+0x188>
 80072a8:	9a04      	ldr	r2, [sp, #16]
 80072aa:	4302      	orrs	r2, r0
 80072ac:	d09e      	beq.n	80071ec <_strtod_l+0xc4>
 80072ae:	2500      	movs	r5, #0
 80072b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80072b4:	f108 0201 	add.w	r2, r8, #1
 80072b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80072be:	2a2b      	cmp	r2, #43	; 0x2b
 80072c0:	d075      	beq.n	80073ae <_strtod_l+0x286>
 80072c2:	2a2d      	cmp	r2, #45	; 0x2d
 80072c4:	d07b      	beq.n	80073be <_strtod_l+0x296>
 80072c6:	f04f 0c00 	mov.w	ip, #0
 80072ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072ce:	2909      	cmp	r1, #9
 80072d0:	f240 8082 	bls.w	80073d8 <_strtod_l+0x2b0>
 80072d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072d8:	2600      	movs	r6, #0
 80072da:	e09d      	b.n	8007418 <_strtod_l+0x2f0>
 80072dc:	2300      	movs	r3, #0
 80072de:	e7c4      	b.n	800726a <_strtod_l+0x142>
 80072e0:	2f08      	cmp	r7, #8
 80072e2:	bfd8      	it	le
 80072e4:	9907      	ldrle	r1, [sp, #28]
 80072e6:	f100 0001 	add.w	r0, r0, #1
 80072ea:	bfda      	itte	le
 80072ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80072f0:	9307      	strle	r3, [sp, #28]
 80072f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072f6:	3701      	adds	r7, #1
 80072f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80072fa:	e7bf      	b.n	800727c <_strtod_l+0x154>
 80072fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072fe:	195a      	adds	r2, r3, r5
 8007300:	9217      	str	r2, [sp, #92]	; 0x5c
 8007302:	5d5a      	ldrb	r2, [r3, r5]
 8007304:	2f00      	cmp	r7, #0
 8007306:	d037      	beq.n	8007378 <_strtod_l+0x250>
 8007308:	9005      	str	r0, [sp, #20]
 800730a:	463d      	mov	r5, r7
 800730c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007310:	2b09      	cmp	r3, #9
 8007312:	d912      	bls.n	800733a <_strtod_l+0x212>
 8007314:	2301      	movs	r3, #1
 8007316:	e7c2      	b.n	800729e <_strtod_l+0x176>
 8007318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	9217      	str	r2, [sp, #92]	; 0x5c
 800731e:	785a      	ldrb	r2, [r3, #1]
 8007320:	3001      	adds	r0, #1
 8007322:	2a30      	cmp	r2, #48	; 0x30
 8007324:	d0f8      	beq.n	8007318 <_strtod_l+0x1f0>
 8007326:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800732a:	2b08      	cmp	r3, #8
 800732c:	f200 84d9 	bhi.w	8007ce2 <_strtod_l+0xbba>
 8007330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007332:	9005      	str	r0, [sp, #20]
 8007334:	2000      	movs	r0, #0
 8007336:	9308      	str	r3, [sp, #32]
 8007338:	4605      	mov	r5, r0
 800733a:	3a30      	subs	r2, #48	; 0x30
 800733c:	f100 0301 	add.w	r3, r0, #1
 8007340:	d014      	beq.n	800736c <_strtod_l+0x244>
 8007342:	9905      	ldr	r1, [sp, #20]
 8007344:	4419      	add	r1, r3
 8007346:	9105      	str	r1, [sp, #20]
 8007348:	462b      	mov	r3, r5
 800734a:	eb00 0e05 	add.w	lr, r0, r5
 800734e:	210a      	movs	r1, #10
 8007350:	4573      	cmp	r3, lr
 8007352:	d113      	bne.n	800737c <_strtod_l+0x254>
 8007354:	182b      	adds	r3, r5, r0
 8007356:	2b08      	cmp	r3, #8
 8007358:	f105 0501 	add.w	r5, r5, #1
 800735c:	4405      	add	r5, r0
 800735e:	dc1c      	bgt.n	800739a <_strtod_l+0x272>
 8007360:	9907      	ldr	r1, [sp, #28]
 8007362:	230a      	movs	r3, #10
 8007364:	fb03 2301 	mla	r3, r3, r1, r2
 8007368:	9307      	str	r3, [sp, #28]
 800736a:	2300      	movs	r3, #0
 800736c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800736e:	1c51      	adds	r1, r2, #1
 8007370:	9117      	str	r1, [sp, #92]	; 0x5c
 8007372:	7852      	ldrb	r2, [r2, #1]
 8007374:	4618      	mov	r0, r3
 8007376:	e7c9      	b.n	800730c <_strtod_l+0x1e4>
 8007378:	4638      	mov	r0, r7
 800737a:	e7d2      	b.n	8007322 <_strtod_l+0x1fa>
 800737c:	2b08      	cmp	r3, #8
 800737e:	dc04      	bgt.n	800738a <_strtod_l+0x262>
 8007380:	9e07      	ldr	r6, [sp, #28]
 8007382:	434e      	muls	r6, r1
 8007384:	9607      	str	r6, [sp, #28]
 8007386:	3301      	adds	r3, #1
 8007388:	e7e2      	b.n	8007350 <_strtod_l+0x228>
 800738a:	f103 0c01 	add.w	ip, r3, #1
 800738e:	f1bc 0f10 	cmp.w	ip, #16
 8007392:	bfd8      	it	le
 8007394:	fb01 f909 	mulle.w	r9, r1, r9
 8007398:	e7f5      	b.n	8007386 <_strtod_l+0x25e>
 800739a:	2d10      	cmp	r5, #16
 800739c:	bfdc      	itt	le
 800739e:	230a      	movle	r3, #10
 80073a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80073a4:	e7e1      	b.n	800736a <_strtod_l+0x242>
 80073a6:	2300      	movs	r3, #0
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	2301      	movs	r3, #1
 80073ac:	e77c      	b.n	80072a8 <_strtod_l+0x180>
 80073ae:	f04f 0c00 	mov.w	ip, #0
 80073b2:	f108 0202 	add.w	r2, r8, #2
 80073b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80073b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80073bc:	e785      	b.n	80072ca <_strtod_l+0x1a2>
 80073be:	f04f 0c01 	mov.w	ip, #1
 80073c2:	e7f6      	b.n	80073b2 <_strtod_l+0x28a>
 80073c4:	0800b828 	.word	0x0800b828
 80073c8:	0800b5e0 	.word	0x0800b5e0
 80073cc:	7ff00000 	.word	0x7ff00000
 80073d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073d2:	1c51      	adds	r1, r2, #1
 80073d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80073d6:	7852      	ldrb	r2, [r2, #1]
 80073d8:	2a30      	cmp	r2, #48	; 0x30
 80073da:	d0f9      	beq.n	80073d0 <_strtod_l+0x2a8>
 80073dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073e0:	2908      	cmp	r1, #8
 80073e2:	f63f af79 	bhi.w	80072d8 <_strtod_l+0x1b0>
 80073e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073ec:	9206      	str	r2, [sp, #24]
 80073ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073f0:	1c51      	adds	r1, r2, #1
 80073f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80073f4:	7852      	ldrb	r2, [r2, #1]
 80073f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073fa:	2e09      	cmp	r6, #9
 80073fc:	d937      	bls.n	800746e <_strtod_l+0x346>
 80073fe:	9e06      	ldr	r6, [sp, #24]
 8007400:	1b89      	subs	r1, r1, r6
 8007402:	2908      	cmp	r1, #8
 8007404:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007408:	dc02      	bgt.n	8007410 <_strtod_l+0x2e8>
 800740a:	4576      	cmp	r6, lr
 800740c:	bfa8      	it	ge
 800740e:	4676      	movge	r6, lr
 8007410:	f1bc 0f00 	cmp.w	ip, #0
 8007414:	d000      	beq.n	8007418 <_strtod_l+0x2f0>
 8007416:	4276      	negs	r6, r6
 8007418:	2d00      	cmp	r5, #0
 800741a:	d14d      	bne.n	80074b8 <_strtod_l+0x390>
 800741c:	9904      	ldr	r1, [sp, #16]
 800741e:	4301      	orrs	r1, r0
 8007420:	f47f aec6 	bne.w	80071b0 <_strtod_l+0x88>
 8007424:	2b00      	cmp	r3, #0
 8007426:	f47f aee1 	bne.w	80071ec <_strtod_l+0xc4>
 800742a:	2a69      	cmp	r2, #105	; 0x69
 800742c:	d027      	beq.n	800747e <_strtod_l+0x356>
 800742e:	dc24      	bgt.n	800747a <_strtod_l+0x352>
 8007430:	2a49      	cmp	r2, #73	; 0x49
 8007432:	d024      	beq.n	800747e <_strtod_l+0x356>
 8007434:	2a4e      	cmp	r2, #78	; 0x4e
 8007436:	f47f aed9 	bne.w	80071ec <_strtod_l+0xc4>
 800743a:	499f      	ldr	r1, [pc, #636]	; (80076b8 <_strtod_l+0x590>)
 800743c:	a817      	add	r0, sp, #92	; 0x5c
 800743e:	f001 fe61 	bl	8009104 <__match>
 8007442:	2800      	cmp	r0, #0
 8007444:	f43f aed2 	beq.w	80071ec <_strtod_l+0xc4>
 8007448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b28      	cmp	r3, #40	; 0x28
 800744e:	d12d      	bne.n	80074ac <_strtod_l+0x384>
 8007450:	499a      	ldr	r1, [pc, #616]	; (80076bc <_strtod_l+0x594>)
 8007452:	aa1a      	add	r2, sp, #104	; 0x68
 8007454:	a817      	add	r0, sp, #92	; 0x5c
 8007456:	f001 fe69 	bl	800912c <__hexnan>
 800745a:	2805      	cmp	r0, #5
 800745c:	d126      	bne.n	80074ac <_strtod_l+0x384>
 800745e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007460:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007464:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007468:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800746c:	e6a0      	b.n	80071b0 <_strtod_l+0x88>
 800746e:	210a      	movs	r1, #10
 8007470:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007474:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007478:	e7b9      	b.n	80073ee <_strtod_l+0x2c6>
 800747a:	2a6e      	cmp	r2, #110	; 0x6e
 800747c:	e7db      	b.n	8007436 <_strtod_l+0x30e>
 800747e:	4990      	ldr	r1, [pc, #576]	; (80076c0 <_strtod_l+0x598>)
 8007480:	a817      	add	r0, sp, #92	; 0x5c
 8007482:	f001 fe3f 	bl	8009104 <__match>
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f aeb0 	beq.w	80071ec <_strtod_l+0xc4>
 800748c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800748e:	498d      	ldr	r1, [pc, #564]	; (80076c4 <_strtod_l+0x59c>)
 8007490:	3b01      	subs	r3, #1
 8007492:	a817      	add	r0, sp, #92	; 0x5c
 8007494:	9317      	str	r3, [sp, #92]	; 0x5c
 8007496:	f001 fe35 	bl	8009104 <__match>
 800749a:	b910      	cbnz	r0, 80074a2 <_strtod_l+0x37a>
 800749c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800749e:	3301      	adds	r3, #1
 80074a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80074a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076d4 <_strtod_l+0x5ac>
 80074a6:	f04f 0a00 	mov.w	sl, #0
 80074aa:	e681      	b.n	80071b0 <_strtod_l+0x88>
 80074ac:	4886      	ldr	r0, [pc, #536]	; (80076c8 <_strtod_l+0x5a0>)
 80074ae:	f003 f953 	bl	800a758 <nan>
 80074b2:	ec5b ab10 	vmov	sl, fp, d0
 80074b6:	e67b      	b.n	80071b0 <_strtod_l+0x88>
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	9807      	ldr	r0, [sp, #28]
 80074bc:	1af3      	subs	r3, r6, r3
 80074be:	2f00      	cmp	r7, #0
 80074c0:	bf08      	it	eq
 80074c2:	462f      	moveq	r7, r5
 80074c4:	2d10      	cmp	r5, #16
 80074c6:	9306      	str	r3, [sp, #24]
 80074c8:	46a8      	mov	r8, r5
 80074ca:	bfa8      	it	ge
 80074cc:	f04f 0810 	movge.w	r8, #16
 80074d0:	f7f9 f828 	bl	8000524 <__aeabi_ui2d>
 80074d4:	2d09      	cmp	r5, #9
 80074d6:	4682      	mov	sl, r0
 80074d8:	468b      	mov	fp, r1
 80074da:	dd13      	ble.n	8007504 <_strtod_l+0x3dc>
 80074dc:	4b7b      	ldr	r3, [pc, #492]	; (80076cc <_strtod_l+0x5a4>)
 80074de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074e6:	f7f9 f897 	bl	8000618 <__aeabi_dmul>
 80074ea:	4682      	mov	sl, r0
 80074ec:	4648      	mov	r0, r9
 80074ee:	468b      	mov	fp, r1
 80074f0:	f7f9 f818 	bl	8000524 <__aeabi_ui2d>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4650      	mov	r0, sl
 80074fa:	4659      	mov	r1, fp
 80074fc:	f7f8 fed6 	bl	80002ac <__adddf3>
 8007500:	4682      	mov	sl, r0
 8007502:	468b      	mov	fp, r1
 8007504:	2d0f      	cmp	r5, #15
 8007506:	dc38      	bgt.n	800757a <_strtod_l+0x452>
 8007508:	9b06      	ldr	r3, [sp, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f43f ae50 	beq.w	80071b0 <_strtod_l+0x88>
 8007510:	dd24      	ble.n	800755c <_strtod_l+0x434>
 8007512:	2b16      	cmp	r3, #22
 8007514:	dc0b      	bgt.n	800752e <_strtod_l+0x406>
 8007516:	496d      	ldr	r1, [pc, #436]	; (80076cc <_strtod_l+0x5a4>)
 8007518:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800751c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007520:	4652      	mov	r2, sl
 8007522:	465b      	mov	r3, fp
 8007524:	f7f9 f878 	bl	8000618 <__aeabi_dmul>
 8007528:	4682      	mov	sl, r0
 800752a:	468b      	mov	fp, r1
 800752c:	e640      	b.n	80071b0 <_strtod_l+0x88>
 800752e:	9a06      	ldr	r2, [sp, #24]
 8007530:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007534:	4293      	cmp	r3, r2
 8007536:	db20      	blt.n	800757a <_strtod_l+0x452>
 8007538:	4c64      	ldr	r4, [pc, #400]	; (80076cc <_strtod_l+0x5a4>)
 800753a:	f1c5 050f 	rsb	r5, r5, #15
 800753e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007542:	4652      	mov	r2, sl
 8007544:	465b      	mov	r3, fp
 8007546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800754a:	f7f9 f865 	bl	8000618 <__aeabi_dmul>
 800754e:	9b06      	ldr	r3, [sp, #24]
 8007550:	1b5d      	subs	r5, r3, r5
 8007552:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007556:	e9d4 2300 	ldrd	r2, r3, [r4]
 800755a:	e7e3      	b.n	8007524 <_strtod_l+0x3fc>
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	3316      	adds	r3, #22
 8007560:	db0b      	blt.n	800757a <_strtod_l+0x452>
 8007562:	9b05      	ldr	r3, [sp, #20]
 8007564:	1b9e      	subs	r6, r3, r6
 8007566:	4b59      	ldr	r3, [pc, #356]	; (80076cc <_strtod_l+0x5a4>)
 8007568:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800756c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007570:	4650      	mov	r0, sl
 8007572:	4659      	mov	r1, fp
 8007574:	f7f9 f97a 	bl	800086c <__aeabi_ddiv>
 8007578:	e7d6      	b.n	8007528 <_strtod_l+0x400>
 800757a:	9b06      	ldr	r3, [sp, #24]
 800757c:	eba5 0808 	sub.w	r8, r5, r8
 8007580:	4498      	add	r8, r3
 8007582:	f1b8 0f00 	cmp.w	r8, #0
 8007586:	dd74      	ble.n	8007672 <_strtod_l+0x54a>
 8007588:	f018 030f 	ands.w	r3, r8, #15
 800758c:	d00a      	beq.n	80075a4 <_strtod_l+0x47c>
 800758e:	494f      	ldr	r1, [pc, #316]	; (80076cc <_strtod_l+0x5a4>)
 8007590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007594:	4652      	mov	r2, sl
 8007596:	465b      	mov	r3, fp
 8007598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800759c:	f7f9 f83c 	bl	8000618 <__aeabi_dmul>
 80075a0:	4682      	mov	sl, r0
 80075a2:	468b      	mov	fp, r1
 80075a4:	f038 080f 	bics.w	r8, r8, #15
 80075a8:	d04f      	beq.n	800764a <_strtod_l+0x522>
 80075aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80075ae:	dd22      	ble.n	80075f6 <_strtod_l+0x4ce>
 80075b0:	2500      	movs	r5, #0
 80075b2:	462e      	mov	r6, r5
 80075b4:	9507      	str	r5, [sp, #28]
 80075b6:	9505      	str	r5, [sp, #20]
 80075b8:	2322      	movs	r3, #34	; 0x22
 80075ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076d4 <_strtod_l+0x5ac>
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	f04f 0a00 	mov.w	sl, #0
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f43f adf2 	beq.w	80071b0 <_strtod_l+0x88>
 80075cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075ce:	4620      	mov	r0, r4
 80075d0:	f001 feb8 	bl	8009344 <_Bfree>
 80075d4:	9905      	ldr	r1, [sp, #20]
 80075d6:	4620      	mov	r0, r4
 80075d8:	f001 feb4 	bl	8009344 <_Bfree>
 80075dc:	4631      	mov	r1, r6
 80075de:	4620      	mov	r0, r4
 80075e0:	f001 feb0 	bl	8009344 <_Bfree>
 80075e4:	9907      	ldr	r1, [sp, #28]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f001 feac 	bl	8009344 <_Bfree>
 80075ec:	4629      	mov	r1, r5
 80075ee:	4620      	mov	r0, r4
 80075f0:	f001 fea8 	bl	8009344 <_Bfree>
 80075f4:	e5dc      	b.n	80071b0 <_strtod_l+0x88>
 80075f6:	4b36      	ldr	r3, [pc, #216]	; (80076d0 <_strtod_l+0x5a8>)
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	2300      	movs	r3, #0
 80075fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007600:	4650      	mov	r0, sl
 8007602:	4659      	mov	r1, fp
 8007604:	4699      	mov	r9, r3
 8007606:	f1b8 0f01 	cmp.w	r8, #1
 800760a:	dc21      	bgt.n	8007650 <_strtod_l+0x528>
 800760c:	b10b      	cbz	r3, 8007612 <_strtod_l+0x4ea>
 800760e:	4682      	mov	sl, r0
 8007610:	468b      	mov	fp, r1
 8007612:	4b2f      	ldr	r3, [pc, #188]	; (80076d0 <_strtod_l+0x5a8>)
 8007614:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007618:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800761c:	4652      	mov	r2, sl
 800761e:	465b      	mov	r3, fp
 8007620:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007624:	f7f8 fff8 	bl	8000618 <__aeabi_dmul>
 8007628:	4b2a      	ldr	r3, [pc, #168]	; (80076d4 <_strtod_l+0x5ac>)
 800762a:	460a      	mov	r2, r1
 800762c:	400b      	ands	r3, r1
 800762e:	492a      	ldr	r1, [pc, #168]	; (80076d8 <_strtod_l+0x5b0>)
 8007630:	428b      	cmp	r3, r1
 8007632:	4682      	mov	sl, r0
 8007634:	d8bc      	bhi.n	80075b0 <_strtod_l+0x488>
 8007636:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800763a:	428b      	cmp	r3, r1
 800763c:	bf86      	itte	hi
 800763e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80076dc <_strtod_l+0x5b4>
 8007642:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007646:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800764a:	2300      	movs	r3, #0
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	e084      	b.n	800775a <_strtod_l+0x632>
 8007650:	f018 0f01 	tst.w	r8, #1
 8007654:	d005      	beq.n	8007662 <_strtod_l+0x53a>
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f8 ffdc 	bl	8000618 <__aeabi_dmul>
 8007660:	2301      	movs	r3, #1
 8007662:	9a04      	ldr	r2, [sp, #16]
 8007664:	3208      	adds	r2, #8
 8007666:	f109 0901 	add.w	r9, r9, #1
 800766a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800766e:	9204      	str	r2, [sp, #16]
 8007670:	e7c9      	b.n	8007606 <_strtod_l+0x4de>
 8007672:	d0ea      	beq.n	800764a <_strtod_l+0x522>
 8007674:	f1c8 0800 	rsb	r8, r8, #0
 8007678:	f018 020f 	ands.w	r2, r8, #15
 800767c:	d00a      	beq.n	8007694 <_strtod_l+0x56c>
 800767e:	4b13      	ldr	r3, [pc, #76]	; (80076cc <_strtod_l+0x5a4>)
 8007680:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007684:	4650      	mov	r0, sl
 8007686:	4659      	mov	r1, fp
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f9 f8ee 	bl	800086c <__aeabi_ddiv>
 8007690:	4682      	mov	sl, r0
 8007692:	468b      	mov	fp, r1
 8007694:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007698:	d0d7      	beq.n	800764a <_strtod_l+0x522>
 800769a:	f1b8 0f1f 	cmp.w	r8, #31
 800769e:	dd1f      	ble.n	80076e0 <_strtod_l+0x5b8>
 80076a0:	2500      	movs	r5, #0
 80076a2:	462e      	mov	r6, r5
 80076a4:	9507      	str	r5, [sp, #28]
 80076a6:	9505      	str	r5, [sp, #20]
 80076a8:	2322      	movs	r3, #34	; 0x22
 80076aa:	f04f 0a00 	mov.w	sl, #0
 80076ae:	f04f 0b00 	mov.w	fp, #0
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	e786      	b.n	80075c4 <_strtod_l+0x49c>
 80076b6:	bf00      	nop
 80076b8:	0800b5b5 	.word	0x0800b5b5
 80076bc:	0800b5f4 	.word	0x0800b5f4
 80076c0:	0800b5ad 	.word	0x0800b5ad
 80076c4:	0800b734 	.word	0x0800b734
 80076c8:	0800b9fb 	.word	0x0800b9fb
 80076cc:	0800b8c0 	.word	0x0800b8c0
 80076d0:	0800b898 	.word	0x0800b898
 80076d4:	7ff00000 	.word	0x7ff00000
 80076d8:	7ca00000 	.word	0x7ca00000
 80076dc:	7fefffff 	.word	0x7fefffff
 80076e0:	f018 0310 	ands.w	r3, r8, #16
 80076e4:	bf18      	it	ne
 80076e6:	236a      	movne	r3, #106	; 0x6a
 80076e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a98 <_strtod_l+0x970>
 80076ec:	9304      	str	r3, [sp, #16]
 80076ee:	4650      	mov	r0, sl
 80076f0:	4659      	mov	r1, fp
 80076f2:	2300      	movs	r3, #0
 80076f4:	f018 0f01 	tst.w	r8, #1
 80076f8:	d004      	beq.n	8007704 <_strtod_l+0x5dc>
 80076fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076fe:	f7f8 ff8b 	bl	8000618 <__aeabi_dmul>
 8007702:	2301      	movs	r3, #1
 8007704:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007708:	f109 0908 	add.w	r9, r9, #8
 800770c:	d1f2      	bne.n	80076f4 <_strtod_l+0x5cc>
 800770e:	b10b      	cbz	r3, 8007714 <_strtod_l+0x5ec>
 8007710:	4682      	mov	sl, r0
 8007712:	468b      	mov	fp, r1
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	b1c3      	cbz	r3, 800774a <_strtod_l+0x622>
 8007718:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800771c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007720:	2b00      	cmp	r3, #0
 8007722:	4659      	mov	r1, fp
 8007724:	dd11      	ble.n	800774a <_strtod_l+0x622>
 8007726:	2b1f      	cmp	r3, #31
 8007728:	f340 8124 	ble.w	8007974 <_strtod_l+0x84c>
 800772c:	2b34      	cmp	r3, #52	; 0x34
 800772e:	bfde      	ittt	le
 8007730:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007734:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007738:	fa03 f202 	lslle.w	r2, r3, r2
 800773c:	f04f 0a00 	mov.w	sl, #0
 8007740:	bfcc      	ite	gt
 8007742:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007746:	ea02 0b01 	andle.w	fp, r2, r1
 800774a:	2200      	movs	r2, #0
 800774c:	2300      	movs	r3, #0
 800774e:	4650      	mov	r0, sl
 8007750:	4659      	mov	r1, fp
 8007752:	f7f9 f9c9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007756:	2800      	cmp	r0, #0
 8007758:	d1a2      	bne.n	80076a0 <_strtod_l+0x578>
 800775a:	9b07      	ldr	r3, [sp, #28]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	9908      	ldr	r1, [sp, #32]
 8007760:	462b      	mov	r3, r5
 8007762:	463a      	mov	r2, r7
 8007764:	4620      	mov	r0, r4
 8007766:	f001 fe55 	bl	8009414 <__s2b>
 800776a:	9007      	str	r0, [sp, #28]
 800776c:	2800      	cmp	r0, #0
 800776e:	f43f af1f 	beq.w	80075b0 <_strtod_l+0x488>
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	1b9e      	subs	r6, r3, r6
 8007776:	9b06      	ldr	r3, [sp, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfb4      	ite	lt
 800777c:	4633      	movlt	r3, r6
 800777e:	2300      	movge	r3, #0
 8007780:	930c      	str	r3, [sp, #48]	; 0x30
 8007782:	9b06      	ldr	r3, [sp, #24]
 8007784:	2500      	movs	r5, #0
 8007786:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800778a:	9312      	str	r3, [sp, #72]	; 0x48
 800778c:	462e      	mov	r6, r5
 800778e:	9b07      	ldr	r3, [sp, #28]
 8007790:	4620      	mov	r0, r4
 8007792:	6859      	ldr	r1, [r3, #4]
 8007794:	f001 fd96 	bl	80092c4 <_Balloc>
 8007798:	9005      	str	r0, [sp, #20]
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f af0c 	beq.w	80075b8 <_strtod_l+0x490>
 80077a0:	9b07      	ldr	r3, [sp, #28]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	3202      	adds	r2, #2
 80077a6:	f103 010c 	add.w	r1, r3, #12
 80077aa:	0092      	lsls	r2, r2, #2
 80077ac:	300c      	adds	r0, #12
 80077ae:	f7fe fd77 	bl	80062a0 <memcpy>
 80077b2:	ec4b ab10 	vmov	d0, sl, fp
 80077b6:	aa1a      	add	r2, sp, #104	; 0x68
 80077b8:	a919      	add	r1, sp, #100	; 0x64
 80077ba:	4620      	mov	r0, r4
 80077bc:	f002 f970 	bl	8009aa0 <__d2b>
 80077c0:	ec4b ab18 	vmov	d8, sl, fp
 80077c4:	9018      	str	r0, [sp, #96]	; 0x60
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f aef6 	beq.w	80075b8 <_strtod_l+0x490>
 80077cc:	2101      	movs	r1, #1
 80077ce:	4620      	mov	r0, r4
 80077d0:	f001 feba 	bl	8009548 <__i2b>
 80077d4:	4606      	mov	r6, r0
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f43f aeee 	beq.w	80075b8 <_strtod_l+0x490>
 80077dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077de:	9904      	ldr	r1, [sp, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bfab      	itete	ge
 80077e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80077e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077ee:	bfac      	ite	ge
 80077f0:	eb03 0902 	addge.w	r9, r3, r2
 80077f4:	1ad7      	sublt	r7, r2, r3
 80077f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077f8:	eba3 0801 	sub.w	r8, r3, r1
 80077fc:	4490      	add	r8, r2
 80077fe:	4ba1      	ldr	r3, [pc, #644]	; (8007a84 <_strtod_l+0x95c>)
 8007800:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007804:	4598      	cmp	r8, r3
 8007806:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800780a:	f280 80c7 	bge.w	800799c <_strtod_l+0x874>
 800780e:	eba3 0308 	sub.w	r3, r3, r8
 8007812:	2b1f      	cmp	r3, #31
 8007814:	eba2 0203 	sub.w	r2, r2, r3
 8007818:	f04f 0101 	mov.w	r1, #1
 800781c:	f300 80b1 	bgt.w	8007982 <_strtod_l+0x85a>
 8007820:	fa01 f303 	lsl.w	r3, r1, r3
 8007824:	930d      	str	r3, [sp, #52]	; 0x34
 8007826:	2300      	movs	r3, #0
 8007828:	9308      	str	r3, [sp, #32]
 800782a:	eb09 0802 	add.w	r8, r9, r2
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	45c1      	cmp	r9, r8
 8007832:	4417      	add	r7, r2
 8007834:	441f      	add	r7, r3
 8007836:	464b      	mov	r3, r9
 8007838:	bfa8      	it	ge
 800783a:	4643      	movge	r3, r8
 800783c:	42bb      	cmp	r3, r7
 800783e:	bfa8      	it	ge
 8007840:	463b      	movge	r3, r7
 8007842:	2b00      	cmp	r3, #0
 8007844:	bfc2      	ittt	gt
 8007846:	eba8 0803 	subgt.w	r8, r8, r3
 800784a:	1aff      	subgt	r7, r7, r3
 800784c:	eba9 0903 	subgt.w	r9, r9, r3
 8007850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	dd17      	ble.n	8007886 <_strtod_l+0x75e>
 8007856:	4631      	mov	r1, r6
 8007858:	461a      	mov	r2, r3
 800785a:	4620      	mov	r0, r4
 800785c:	f001 ff34 	bl	80096c8 <__pow5mult>
 8007860:	4606      	mov	r6, r0
 8007862:	2800      	cmp	r0, #0
 8007864:	f43f aea8 	beq.w	80075b8 <_strtod_l+0x490>
 8007868:	4601      	mov	r1, r0
 800786a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800786c:	4620      	mov	r0, r4
 800786e:	f001 fe81 	bl	8009574 <__multiply>
 8007872:	900b      	str	r0, [sp, #44]	; 0x2c
 8007874:	2800      	cmp	r0, #0
 8007876:	f43f ae9f 	beq.w	80075b8 <_strtod_l+0x490>
 800787a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800787c:	4620      	mov	r0, r4
 800787e:	f001 fd61 	bl	8009344 <_Bfree>
 8007882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007884:	9318      	str	r3, [sp, #96]	; 0x60
 8007886:	f1b8 0f00 	cmp.w	r8, #0
 800788a:	f300 808c 	bgt.w	80079a6 <_strtod_l+0x87e>
 800788e:	9b06      	ldr	r3, [sp, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dd08      	ble.n	80078a6 <_strtod_l+0x77e>
 8007894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007896:	9905      	ldr	r1, [sp, #20]
 8007898:	4620      	mov	r0, r4
 800789a:	f001 ff15 	bl	80096c8 <__pow5mult>
 800789e:	9005      	str	r0, [sp, #20]
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f43f ae89 	beq.w	80075b8 <_strtod_l+0x490>
 80078a6:	2f00      	cmp	r7, #0
 80078a8:	dd08      	ble.n	80078bc <_strtod_l+0x794>
 80078aa:	9905      	ldr	r1, [sp, #20]
 80078ac:	463a      	mov	r2, r7
 80078ae:	4620      	mov	r0, r4
 80078b0:	f001 ff64 	bl	800977c <__lshift>
 80078b4:	9005      	str	r0, [sp, #20]
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f43f ae7e 	beq.w	80075b8 <_strtod_l+0x490>
 80078bc:	f1b9 0f00 	cmp.w	r9, #0
 80078c0:	dd08      	ble.n	80078d4 <_strtod_l+0x7ac>
 80078c2:	4631      	mov	r1, r6
 80078c4:	464a      	mov	r2, r9
 80078c6:	4620      	mov	r0, r4
 80078c8:	f001 ff58 	bl	800977c <__lshift>
 80078cc:	4606      	mov	r6, r0
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f ae72 	beq.w	80075b8 <_strtod_l+0x490>
 80078d4:	9a05      	ldr	r2, [sp, #20]
 80078d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 ffdb 	bl	8009894 <__mdiff>
 80078de:	4605      	mov	r5, r0
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f43f ae69 	beq.w	80075b8 <_strtod_l+0x490>
 80078e6:	68c3      	ldr	r3, [r0, #12]
 80078e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ea:	2300      	movs	r3, #0
 80078ec:	60c3      	str	r3, [r0, #12]
 80078ee:	4631      	mov	r1, r6
 80078f0:	f001 ffb4 	bl	800985c <__mcmp>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	da60      	bge.n	80079ba <_strtod_l+0x892>
 80078f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fa:	ea53 030a 	orrs.w	r3, r3, sl
 80078fe:	f040 8082 	bne.w	8007a06 <_strtod_l+0x8de>
 8007902:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007906:	2b00      	cmp	r3, #0
 8007908:	d17d      	bne.n	8007a06 <_strtod_l+0x8de>
 800790a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800790e:	0d1b      	lsrs	r3, r3, #20
 8007910:	051b      	lsls	r3, r3, #20
 8007912:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007916:	d976      	bls.n	8007a06 <_strtod_l+0x8de>
 8007918:	696b      	ldr	r3, [r5, #20]
 800791a:	b913      	cbnz	r3, 8007922 <_strtod_l+0x7fa>
 800791c:	692b      	ldr	r3, [r5, #16]
 800791e:	2b01      	cmp	r3, #1
 8007920:	dd71      	ble.n	8007a06 <_strtod_l+0x8de>
 8007922:	4629      	mov	r1, r5
 8007924:	2201      	movs	r2, #1
 8007926:	4620      	mov	r0, r4
 8007928:	f001 ff28 	bl	800977c <__lshift>
 800792c:	4631      	mov	r1, r6
 800792e:	4605      	mov	r5, r0
 8007930:	f001 ff94 	bl	800985c <__mcmp>
 8007934:	2800      	cmp	r0, #0
 8007936:	dd66      	ble.n	8007a06 <_strtod_l+0x8de>
 8007938:	9904      	ldr	r1, [sp, #16]
 800793a:	4a53      	ldr	r2, [pc, #332]	; (8007a88 <_strtod_l+0x960>)
 800793c:	465b      	mov	r3, fp
 800793e:	2900      	cmp	r1, #0
 8007940:	f000 8081 	beq.w	8007a46 <_strtod_l+0x91e>
 8007944:	ea02 010b 	and.w	r1, r2, fp
 8007948:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800794c:	dc7b      	bgt.n	8007a46 <_strtod_l+0x91e>
 800794e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007952:	f77f aea9 	ble.w	80076a8 <_strtod_l+0x580>
 8007956:	4b4d      	ldr	r3, [pc, #308]	; (8007a8c <_strtod_l+0x964>)
 8007958:	4650      	mov	r0, sl
 800795a:	4659      	mov	r1, fp
 800795c:	2200      	movs	r2, #0
 800795e:	f7f8 fe5b 	bl	8000618 <__aeabi_dmul>
 8007962:	460b      	mov	r3, r1
 8007964:	4303      	orrs	r3, r0
 8007966:	bf08      	it	eq
 8007968:	2322      	moveq	r3, #34	; 0x22
 800796a:	4682      	mov	sl, r0
 800796c:	468b      	mov	fp, r1
 800796e:	bf08      	it	eq
 8007970:	6023      	streq	r3, [r4, #0]
 8007972:	e62b      	b.n	80075cc <_strtod_l+0x4a4>
 8007974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	ea03 0a0a 	and.w	sl, r3, sl
 8007980:	e6e3      	b.n	800774a <_strtod_l+0x622>
 8007982:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007986:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800798a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800798e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007992:	fa01 f308 	lsl.w	r3, r1, r8
 8007996:	9308      	str	r3, [sp, #32]
 8007998:	910d      	str	r1, [sp, #52]	; 0x34
 800799a:	e746      	b.n	800782a <_strtod_l+0x702>
 800799c:	2300      	movs	r3, #0
 800799e:	9308      	str	r3, [sp, #32]
 80079a0:	2301      	movs	r3, #1
 80079a2:	930d      	str	r3, [sp, #52]	; 0x34
 80079a4:	e741      	b.n	800782a <_strtod_l+0x702>
 80079a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079a8:	4642      	mov	r2, r8
 80079aa:	4620      	mov	r0, r4
 80079ac:	f001 fee6 	bl	800977c <__lshift>
 80079b0:	9018      	str	r0, [sp, #96]	; 0x60
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f47f af6b 	bne.w	800788e <_strtod_l+0x766>
 80079b8:	e5fe      	b.n	80075b8 <_strtod_l+0x490>
 80079ba:	465f      	mov	r7, fp
 80079bc:	d16e      	bne.n	8007a9c <_strtod_l+0x974>
 80079be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079c4:	b342      	cbz	r2, 8007a18 <_strtod_l+0x8f0>
 80079c6:	4a32      	ldr	r2, [pc, #200]	; (8007a90 <_strtod_l+0x968>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d128      	bne.n	8007a1e <_strtod_l+0x8f6>
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	4651      	mov	r1, sl
 80079d0:	b1eb      	cbz	r3, 8007a0e <_strtod_l+0x8e6>
 80079d2:	4b2d      	ldr	r3, [pc, #180]	; (8007a88 <_strtod_l+0x960>)
 80079d4:	403b      	ands	r3, r7
 80079d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079de:	d819      	bhi.n	8007a14 <_strtod_l+0x8ec>
 80079e0:	0d1b      	lsrs	r3, r3, #20
 80079e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	4299      	cmp	r1, r3
 80079ec:	d117      	bne.n	8007a1e <_strtod_l+0x8f6>
 80079ee:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <_strtod_l+0x96c>)
 80079f0:	429f      	cmp	r7, r3
 80079f2:	d102      	bne.n	80079fa <_strtod_l+0x8d2>
 80079f4:	3101      	adds	r1, #1
 80079f6:	f43f addf 	beq.w	80075b8 <_strtod_l+0x490>
 80079fa:	4b23      	ldr	r3, [pc, #140]	; (8007a88 <_strtod_l+0x960>)
 80079fc:	403b      	ands	r3, r7
 80079fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007a02:	f04f 0a00 	mov.w	sl, #0
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1a4      	bne.n	8007956 <_strtod_l+0x82e>
 8007a0c:	e5de      	b.n	80075cc <_strtod_l+0x4a4>
 8007a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a12:	e7ea      	b.n	80079ea <_strtod_l+0x8c2>
 8007a14:	4613      	mov	r3, r2
 8007a16:	e7e8      	b.n	80079ea <_strtod_l+0x8c2>
 8007a18:	ea53 030a 	orrs.w	r3, r3, sl
 8007a1c:	d08c      	beq.n	8007938 <_strtod_l+0x810>
 8007a1e:	9b08      	ldr	r3, [sp, #32]
 8007a20:	b1db      	cbz	r3, 8007a5a <_strtod_l+0x932>
 8007a22:	423b      	tst	r3, r7
 8007a24:	d0ef      	beq.n	8007a06 <_strtod_l+0x8de>
 8007a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a28:	9a04      	ldr	r2, [sp, #16]
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	b1c3      	cbz	r3, 8007a62 <_strtod_l+0x93a>
 8007a30:	f7ff fb5d 	bl	80070ee <sulp>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	ec51 0b18 	vmov	r0, r1, d8
 8007a3c:	f7f8 fc36 	bl	80002ac <__adddf3>
 8007a40:	4682      	mov	sl, r0
 8007a42:	468b      	mov	fp, r1
 8007a44:	e7df      	b.n	8007a06 <_strtod_l+0x8de>
 8007a46:	4013      	ands	r3, r2
 8007a48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007a58:	e7d5      	b.n	8007a06 <_strtod_l+0x8de>
 8007a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a5c:	ea13 0f0a 	tst.w	r3, sl
 8007a60:	e7e0      	b.n	8007a24 <_strtod_l+0x8fc>
 8007a62:	f7ff fb44 	bl	80070ee <sulp>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	ec51 0b18 	vmov	r0, r1, d8
 8007a6e:	f7f8 fc1b 	bl	80002a8 <__aeabi_dsub>
 8007a72:	2200      	movs	r2, #0
 8007a74:	2300      	movs	r3, #0
 8007a76:	4682      	mov	sl, r0
 8007a78:	468b      	mov	fp, r1
 8007a7a:	f7f9 f835 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d0c1      	beq.n	8007a06 <_strtod_l+0x8de>
 8007a82:	e611      	b.n	80076a8 <_strtod_l+0x580>
 8007a84:	fffffc02 	.word	0xfffffc02
 8007a88:	7ff00000 	.word	0x7ff00000
 8007a8c:	39500000 	.word	0x39500000
 8007a90:	000fffff 	.word	0x000fffff
 8007a94:	7fefffff 	.word	0x7fefffff
 8007a98:	0800b608 	.word	0x0800b608
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f002 f85a 	bl	8009b58 <__ratio>
 8007aa4:	ec59 8b10 	vmov	r8, r9, d0
 8007aa8:	ee10 0a10 	vmov	r0, s0
 8007aac:	2200      	movs	r2, #0
 8007aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	f7f9 f82c 	bl	8000b10 <__aeabi_dcmple>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d07a      	beq.n	8007bb2 <_strtod_l+0xa8a>
 8007abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d04a      	beq.n	8007b58 <_strtod_l+0xa30>
 8007ac2:	4b95      	ldr	r3, [pc, #596]	; (8007d18 <_strtod_l+0xbf0>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007aca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007d18 <_strtod_l+0xbf0>
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	4b92      	ldr	r3, [pc, #584]	; (8007d1c <_strtod_l+0xbf4>)
 8007ad4:	403b      	ands	r3, r7
 8007ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ada:	4b91      	ldr	r3, [pc, #580]	; (8007d20 <_strtod_l+0xbf8>)
 8007adc:	429a      	cmp	r2, r3
 8007ade:	f040 80b0 	bne.w	8007c42 <_strtod_l+0xb1a>
 8007ae2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ae6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007aea:	ec4b ab10 	vmov	d0, sl, fp
 8007aee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007af2:	f001 ff59 	bl	80099a8 <__ulp>
 8007af6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007afa:	ec53 2b10 	vmov	r2, r3, d0
 8007afe:	f7f8 fd8b 	bl	8000618 <__aeabi_dmul>
 8007b02:	4652      	mov	r2, sl
 8007b04:	465b      	mov	r3, fp
 8007b06:	f7f8 fbd1 	bl	80002ac <__adddf3>
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4983      	ldr	r1, [pc, #524]	; (8007d1c <_strtod_l+0xbf4>)
 8007b0e:	4a85      	ldr	r2, [pc, #532]	; (8007d24 <_strtod_l+0xbfc>)
 8007b10:	4019      	ands	r1, r3
 8007b12:	4291      	cmp	r1, r2
 8007b14:	4682      	mov	sl, r0
 8007b16:	d960      	bls.n	8007bda <_strtod_l+0xab2>
 8007b18:	ee18 3a90 	vmov	r3, s17
 8007b1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d104      	bne.n	8007b2e <_strtod_l+0xa06>
 8007b24:	ee18 3a10 	vmov	r3, s16
 8007b28:	3301      	adds	r3, #1
 8007b2a:	f43f ad45 	beq.w	80075b8 <_strtod_l+0x490>
 8007b2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d30 <_strtod_l+0xc08>
 8007b32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007b36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f001 fc03 	bl	8009344 <_Bfree>
 8007b3e:	9905      	ldr	r1, [sp, #20]
 8007b40:	4620      	mov	r0, r4
 8007b42:	f001 fbff 	bl	8009344 <_Bfree>
 8007b46:	4631      	mov	r1, r6
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f001 fbfb 	bl	8009344 <_Bfree>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 fbf7 	bl	8009344 <_Bfree>
 8007b56:	e61a      	b.n	800778e <_strtod_l+0x666>
 8007b58:	f1ba 0f00 	cmp.w	sl, #0
 8007b5c:	d11b      	bne.n	8007b96 <_strtod_l+0xa6e>
 8007b5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b62:	b9f3      	cbnz	r3, 8007ba2 <_strtod_l+0xa7a>
 8007b64:	4b6c      	ldr	r3, [pc, #432]	; (8007d18 <_strtod_l+0xbf0>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	4640      	mov	r0, r8
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	f7f8 ffc6 	bl	8000afc <__aeabi_dcmplt>
 8007b70:	b9d0      	cbnz	r0, 8007ba8 <_strtod_l+0xa80>
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	4b6c      	ldr	r3, [pc, #432]	; (8007d28 <_strtod_l+0xc00>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f7f8 fd4d 	bl	8000618 <__aeabi_dmul>
 8007b7e:	4680      	mov	r8, r0
 8007b80:	4689      	mov	r9, r1
 8007b82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b8a:	9315      	str	r3, [sp, #84]	; 0x54
 8007b8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b94:	e79d      	b.n	8007ad2 <_strtod_l+0x9aa>
 8007b96:	f1ba 0f01 	cmp.w	sl, #1
 8007b9a:	d102      	bne.n	8007ba2 <_strtod_l+0xa7a>
 8007b9c:	2f00      	cmp	r7, #0
 8007b9e:	f43f ad83 	beq.w	80076a8 <_strtod_l+0x580>
 8007ba2:	4b62      	ldr	r3, [pc, #392]	; (8007d2c <_strtod_l+0xc04>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	e78e      	b.n	8007ac6 <_strtod_l+0x99e>
 8007ba8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007d28 <_strtod_l+0xc00>
 8007bac:	f04f 0800 	mov.w	r8, #0
 8007bb0:	e7e7      	b.n	8007b82 <_strtod_l+0xa5a>
 8007bb2:	4b5d      	ldr	r3, [pc, #372]	; (8007d28 <_strtod_l+0xc00>)
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7f8 fd2d 	bl	8000618 <__aeabi_dmul>
 8007bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	4689      	mov	r9, r1
 8007bc4:	b933      	cbnz	r3, 8007bd4 <_strtod_l+0xaac>
 8007bc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bca:	900e      	str	r0, [sp, #56]	; 0x38
 8007bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007bd2:	e7dd      	b.n	8007b90 <_strtod_l+0xa68>
 8007bd4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007bd8:	e7f9      	b.n	8007bce <_strtod_l+0xaa6>
 8007bda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bde:	9b04      	ldr	r3, [sp, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1a8      	bne.n	8007b36 <_strtod_l+0xa0e>
 8007be4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007be8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bea:	0d1b      	lsrs	r3, r3, #20
 8007bec:	051b      	lsls	r3, r3, #20
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d1a1      	bne.n	8007b36 <_strtod_l+0xa0e>
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f9 f86f 	bl	8000cd8 <__aeabi_d2lz>
 8007bfa:	f7f8 fcdf 	bl	80005bc <__aeabi_l2d>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4640      	mov	r0, r8
 8007c04:	4649      	mov	r1, r9
 8007c06:	f7f8 fb4f 	bl	80002a8 <__aeabi_dsub>
 8007c0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c10:	ea43 030a 	orr.w	r3, r3, sl
 8007c14:	4313      	orrs	r3, r2
 8007c16:	4680      	mov	r8, r0
 8007c18:	4689      	mov	r9, r1
 8007c1a:	d055      	beq.n	8007cc8 <_strtod_l+0xba0>
 8007c1c:	a336      	add	r3, pc, #216	; (adr r3, 8007cf8 <_strtod_l+0xbd0>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 ff6b 	bl	8000afc <__aeabi_dcmplt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f47f acd0 	bne.w	80075cc <_strtod_l+0x4a4>
 8007c2c:	a334      	add	r3, pc, #208	; (adr r3, 8007d00 <_strtod_l+0xbd8>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 ff7f 	bl	8000b38 <__aeabi_dcmpgt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f43f af7b 	beq.w	8007b36 <_strtod_l+0xa0e>
 8007c40:	e4c4      	b.n	80075cc <_strtod_l+0x4a4>
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	b333      	cbz	r3, 8007c94 <_strtod_l+0xb6c>
 8007c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c4c:	d822      	bhi.n	8007c94 <_strtod_l+0xb6c>
 8007c4e:	a32e      	add	r3, pc, #184	; (adr r3, 8007d08 <_strtod_l+0xbe0>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	f7f8 ff5a 	bl	8000b10 <__aeabi_dcmple>
 8007c5c:	b1a0      	cbz	r0, 8007c88 <_strtod_l+0xb60>
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	f7f8 ffb1 	bl	8000bc8 <__aeabi_d2uiz>
 8007c66:	2801      	cmp	r0, #1
 8007c68:	bf38      	it	cc
 8007c6a:	2001      	movcc	r0, #1
 8007c6c:	f7f8 fc5a 	bl	8000524 <__aeabi_ui2d>
 8007c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c72:	4680      	mov	r8, r0
 8007c74:	4689      	mov	r9, r1
 8007c76:	bb23      	cbnz	r3, 8007cc2 <_strtod_l+0xb9a>
 8007c78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c7c:	9010      	str	r0, [sp, #64]	; 0x40
 8007c7e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	9309      	str	r3, [sp, #36]	; 0x24
 8007c94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c98:	eeb0 0a48 	vmov.f32	s0, s16
 8007c9c:	eef0 0a68 	vmov.f32	s1, s17
 8007ca0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ca4:	f001 fe80 	bl	80099a8 <__ulp>
 8007ca8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cac:	ec53 2b10 	vmov	r2, r3, d0
 8007cb0:	f7f8 fcb2 	bl	8000618 <__aeabi_dmul>
 8007cb4:	ec53 2b18 	vmov	r2, r3, d8
 8007cb8:	f7f8 faf8 	bl	80002ac <__adddf3>
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	468b      	mov	fp, r1
 8007cc0:	e78d      	b.n	8007bde <_strtod_l+0xab6>
 8007cc2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007cc6:	e7db      	b.n	8007c80 <_strtod_l+0xb58>
 8007cc8:	a311      	add	r3, pc, #68	; (adr r3, 8007d10 <_strtod_l+0xbe8>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f7f8 ff15 	bl	8000afc <__aeabi_dcmplt>
 8007cd2:	e7b2      	b.n	8007c3a <_strtod_l+0xb12>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	f7ff ba6b 	b.w	80071b8 <_strtod_l+0x90>
 8007ce2:	2a65      	cmp	r2, #101	; 0x65
 8007ce4:	f43f ab5f 	beq.w	80073a6 <_strtod_l+0x27e>
 8007ce8:	2a45      	cmp	r2, #69	; 0x45
 8007cea:	f43f ab5c 	beq.w	80073a6 <_strtod_l+0x27e>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f7ff bb94 	b.w	800741c <_strtod_l+0x2f4>
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	94a03595 	.word	0x94a03595
 8007cfc:	3fdfffff 	.word	0x3fdfffff
 8007d00:	35afe535 	.word	0x35afe535
 8007d04:	3fe00000 	.word	0x3fe00000
 8007d08:	ffc00000 	.word	0xffc00000
 8007d0c:	41dfffff 	.word	0x41dfffff
 8007d10:	94a03595 	.word	0x94a03595
 8007d14:	3fcfffff 	.word	0x3fcfffff
 8007d18:	3ff00000 	.word	0x3ff00000
 8007d1c:	7ff00000 	.word	0x7ff00000
 8007d20:	7fe00000 	.word	0x7fe00000
 8007d24:	7c9fffff 	.word	0x7c9fffff
 8007d28:	3fe00000 	.word	0x3fe00000
 8007d2c:	bff00000 	.word	0xbff00000
 8007d30:	7fefffff 	.word	0x7fefffff

08007d34 <_strtod_r>:
 8007d34:	4b01      	ldr	r3, [pc, #4]	; (8007d3c <_strtod_r+0x8>)
 8007d36:	f7ff b9f7 	b.w	8007128 <_strtod_l>
 8007d3a:	bf00      	nop
 8007d3c:	20000084 	.word	0x20000084

08007d40 <_strtol_l.constprop.0>:
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d46:	d001      	beq.n	8007d4c <_strtol_l.constprop.0+0xc>
 8007d48:	2b24      	cmp	r3, #36	; 0x24
 8007d4a:	d906      	bls.n	8007d5a <_strtol_l.constprop.0+0x1a>
 8007d4c:	f7fe fa7e 	bl	800624c <__errno>
 8007d50:	2316      	movs	r3, #22
 8007d52:	6003      	str	r3, [r0, #0]
 8007d54:	2000      	movs	r0, #0
 8007d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e40 <_strtol_l.constprop.0+0x100>
 8007d5e:	460d      	mov	r5, r1
 8007d60:	462e      	mov	r6, r5
 8007d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d66:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d6a:	f017 0708 	ands.w	r7, r7, #8
 8007d6e:	d1f7      	bne.n	8007d60 <_strtol_l.constprop.0+0x20>
 8007d70:	2c2d      	cmp	r4, #45	; 0x2d
 8007d72:	d132      	bne.n	8007dda <_strtol_l.constprop.0+0x9a>
 8007d74:	782c      	ldrb	r4, [r5, #0]
 8007d76:	2701      	movs	r7, #1
 8007d78:	1cb5      	adds	r5, r6, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d05b      	beq.n	8007e36 <_strtol_l.constprop.0+0xf6>
 8007d7e:	2b10      	cmp	r3, #16
 8007d80:	d109      	bne.n	8007d96 <_strtol_l.constprop.0+0x56>
 8007d82:	2c30      	cmp	r4, #48	; 0x30
 8007d84:	d107      	bne.n	8007d96 <_strtol_l.constprop.0+0x56>
 8007d86:	782c      	ldrb	r4, [r5, #0]
 8007d88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d8c:	2c58      	cmp	r4, #88	; 0x58
 8007d8e:	d14d      	bne.n	8007e2c <_strtol_l.constprop.0+0xec>
 8007d90:	786c      	ldrb	r4, [r5, #1]
 8007d92:	2310      	movs	r3, #16
 8007d94:	3502      	adds	r5, #2
 8007d96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007d9e:	f04f 0c00 	mov.w	ip, #0
 8007da2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007da6:	4666      	mov	r6, ip
 8007da8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007dac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007db0:	f1be 0f09 	cmp.w	lr, #9
 8007db4:	d816      	bhi.n	8007de4 <_strtol_l.constprop.0+0xa4>
 8007db6:	4674      	mov	r4, lr
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	dd24      	ble.n	8007e06 <_strtol_l.constprop.0+0xc6>
 8007dbc:	f1bc 0f00 	cmp.w	ip, #0
 8007dc0:	db1e      	blt.n	8007e00 <_strtol_l.constprop.0+0xc0>
 8007dc2:	45b1      	cmp	r9, r6
 8007dc4:	d31c      	bcc.n	8007e00 <_strtol_l.constprop.0+0xc0>
 8007dc6:	d101      	bne.n	8007dcc <_strtol_l.constprop.0+0x8c>
 8007dc8:	45a2      	cmp	sl, r4
 8007dca:	db19      	blt.n	8007e00 <_strtol_l.constprop.0+0xc0>
 8007dcc:	fb06 4603 	mla	r6, r6, r3, r4
 8007dd0:	f04f 0c01 	mov.w	ip, #1
 8007dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dd8:	e7e8      	b.n	8007dac <_strtol_l.constprop.0+0x6c>
 8007dda:	2c2b      	cmp	r4, #43	; 0x2b
 8007ddc:	bf04      	itt	eq
 8007dde:	782c      	ldrbeq	r4, [r5, #0]
 8007de0:	1cb5      	addeq	r5, r6, #2
 8007de2:	e7ca      	b.n	8007d7a <_strtol_l.constprop.0+0x3a>
 8007de4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007de8:	f1be 0f19 	cmp.w	lr, #25
 8007dec:	d801      	bhi.n	8007df2 <_strtol_l.constprop.0+0xb2>
 8007dee:	3c37      	subs	r4, #55	; 0x37
 8007df0:	e7e2      	b.n	8007db8 <_strtol_l.constprop.0+0x78>
 8007df2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007df6:	f1be 0f19 	cmp.w	lr, #25
 8007dfa:	d804      	bhi.n	8007e06 <_strtol_l.constprop.0+0xc6>
 8007dfc:	3c57      	subs	r4, #87	; 0x57
 8007dfe:	e7db      	b.n	8007db8 <_strtol_l.constprop.0+0x78>
 8007e00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007e04:	e7e6      	b.n	8007dd4 <_strtol_l.constprop.0+0x94>
 8007e06:	f1bc 0f00 	cmp.w	ip, #0
 8007e0a:	da05      	bge.n	8007e18 <_strtol_l.constprop.0+0xd8>
 8007e0c:	2322      	movs	r3, #34	; 0x22
 8007e0e:	6003      	str	r3, [r0, #0]
 8007e10:	4646      	mov	r6, r8
 8007e12:	b942      	cbnz	r2, 8007e26 <_strtol_l.constprop.0+0xe6>
 8007e14:	4630      	mov	r0, r6
 8007e16:	e79e      	b.n	8007d56 <_strtol_l.constprop.0+0x16>
 8007e18:	b107      	cbz	r7, 8007e1c <_strtol_l.constprop.0+0xdc>
 8007e1a:	4276      	negs	r6, r6
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	d0f9      	beq.n	8007e14 <_strtol_l.constprop.0+0xd4>
 8007e20:	f1bc 0f00 	cmp.w	ip, #0
 8007e24:	d000      	beq.n	8007e28 <_strtol_l.constprop.0+0xe8>
 8007e26:	1e69      	subs	r1, r5, #1
 8007e28:	6011      	str	r1, [r2, #0]
 8007e2a:	e7f3      	b.n	8007e14 <_strtol_l.constprop.0+0xd4>
 8007e2c:	2430      	movs	r4, #48	; 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1b1      	bne.n	8007d96 <_strtol_l.constprop.0+0x56>
 8007e32:	2308      	movs	r3, #8
 8007e34:	e7af      	b.n	8007d96 <_strtol_l.constprop.0+0x56>
 8007e36:	2c30      	cmp	r4, #48	; 0x30
 8007e38:	d0a5      	beq.n	8007d86 <_strtol_l.constprop.0+0x46>
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	e7ab      	b.n	8007d96 <_strtol_l.constprop.0+0x56>
 8007e3e:	bf00      	nop
 8007e40:	0800b631 	.word	0x0800b631

08007e44 <_strtol_r>:
 8007e44:	f7ff bf7c 	b.w	8007d40 <_strtol_l.constprop.0>

08007e48 <_write_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d07      	ldr	r5, [pc, #28]	; (8007e68 <_write_r+0x20>)
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	4608      	mov	r0, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f7fa fb0c 	bl	8002474 <_write>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_write_r+0x1e>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_write_r+0x1e>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000754 	.word	0x20000754

08007e6c <_close_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d06      	ldr	r5, [pc, #24]	; (8007e88 <_close_r+0x1c>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	f7fa fb10 	bl	800249c <_close>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_close_r+0x1a>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_close_r+0x1a>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	20000754 	.word	0x20000754

08007e8c <quorem>:
 8007e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	6903      	ldr	r3, [r0, #16]
 8007e92:	690c      	ldr	r4, [r1, #16]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	4607      	mov	r7, r0
 8007e98:	f2c0 8081 	blt.w	8007f9e <quorem+0x112>
 8007e9c:	3c01      	subs	r4, #1
 8007e9e:	f101 0814 	add.w	r8, r1, #20
 8007ea2:	f100 0514 	add.w	r5, r0, #20
 8007ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ec4:	d331      	bcc.n	8007f2a <quorem+0x9e>
 8007ec6:	f04f 0e00 	mov.w	lr, #0
 8007eca:	4640      	mov	r0, r8
 8007ecc:	46ac      	mov	ip, r5
 8007ece:	46f2      	mov	sl, lr
 8007ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ed4:	b293      	uxth	r3, r2
 8007ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ee4:	f8dc a000 	ldr.w	sl, [ip]
 8007ee8:	0c12      	lsrs	r2, r2, #16
 8007eea:	fa13 f38a 	uxtah	r3, r3, sl
 8007eee:	fb06 e202 	mla	r2, r6, r2, lr
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	9b00      	ldr	r3, [sp, #0]
 8007ef6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007efa:	b292      	uxth	r2, r2
 8007efc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f04:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f08:	4581      	cmp	r9, r0
 8007f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8007f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f16:	d2db      	bcs.n	8007ed0 <quorem+0x44>
 8007f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f1c:	b92b      	cbnz	r3, 8007f2a <quorem+0x9e>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	3b04      	subs	r3, #4
 8007f22:	429d      	cmp	r5, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	d32e      	bcc.n	8007f86 <quorem+0xfa>
 8007f28:	613c      	str	r4, [r7, #16]
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f001 fc96 	bl	800985c <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	db24      	blt.n	8007f7e <quorem+0xf2>
 8007f34:	3601      	adds	r6, #1
 8007f36:	4628      	mov	r0, r5
 8007f38:	f04f 0c00 	mov.w	ip, #0
 8007f3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f40:	f8d0 e000 	ldr.w	lr, [r0]
 8007f44:	b293      	uxth	r3, r2
 8007f46:	ebac 0303 	sub.w	r3, ip, r3
 8007f4a:	0c12      	lsrs	r2, r2, #16
 8007f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f5e:	45c1      	cmp	r9, r8
 8007f60:	f840 3b04 	str.w	r3, [r0], #4
 8007f64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f68:	d2e8      	bcs.n	8007f3c <quorem+0xb0>
 8007f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f72:	b922      	cbnz	r2, 8007f7e <quorem+0xf2>
 8007f74:	3b04      	subs	r3, #4
 8007f76:	429d      	cmp	r5, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	d30a      	bcc.n	8007f92 <quorem+0x106>
 8007f7c:	613c      	str	r4, [r7, #16]
 8007f7e:	4630      	mov	r0, r6
 8007f80:	b003      	add	sp, #12
 8007f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	d1cc      	bne.n	8007f28 <quorem+0x9c>
 8007f8e:	3c01      	subs	r4, #1
 8007f90:	e7c7      	b.n	8007f22 <quorem+0x96>
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	3b04      	subs	r3, #4
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	d1f0      	bne.n	8007f7c <quorem+0xf0>
 8007f9a:	3c01      	subs	r4, #1
 8007f9c:	e7eb      	b.n	8007f76 <quorem+0xea>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e7ee      	b.n	8007f80 <quorem+0xf4>
 8007fa2:	0000      	movs	r0, r0
 8007fa4:	0000      	movs	r0, r0
	...

08007fa8 <_dtoa_r>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ed2d 8b04 	vpush	{d8-d9}
 8007fb0:	ec57 6b10 	vmov	r6, r7, d0
 8007fb4:	b093      	sub	sp, #76	; 0x4c
 8007fb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fbc:	9106      	str	r1, [sp, #24]
 8007fbe:	ee10 aa10 	vmov	sl, s0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fc8:	46bb      	mov	fp, r7
 8007fca:	b975      	cbnz	r5, 8007fea <_dtoa_r+0x42>
 8007fcc:	2010      	movs	r0, #16
 8007fce:	f001 f95f 	bl	8009290 <malloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fd6:	b920      	cbnz	r0, 8007fe2 <_dtoa_r+0x3a>
 8007fd8:	4ba7      	ldr	r3, [pc, #668]	; (8008278 <_dtoa_r+0x2d0>)
 8007fda:	21ea      	movs	r1, #234	; 0xea
 8007fdc:	48a7      	ldr	r0, [pc, #668]	; (800827c <_dtoa_r+0x2d4>)
 8007fde:	f002 fcdb 	bl	800a998 <__assert_func>
 8007fe2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fe6:	6005      	str	r5, [r0, #0]
 8007fe8:	60c5      	str	r5, [r0, #12]
 8007fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fec:	6819      	ldr	r1, [r3, #0]
 8007fee:	b151      	cbz	r1, 8008006 <_dtoa_r+0x5e>
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	604a      	str	r2, [r1, #4]
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4093      	lsls	r3, r2
 8007ff8:	608b      	str	r3, [r1, #8]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f001 f9a2 	bl	8009344 <_Bfree>
 8008000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	1e3b      	subs	r3, r7, #0
 8008008:	bfaa      	itet	ge
 800800a:	2300      	movge	r3, #0
 800800c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008010:	f8c8 3000 	strge.w	r3, [r8]
 8008014:	4b9a      	ldr	r3, [pc, #616]	; (8008280 <_dtoa_r+0x2d8>)
 8008016:	bfbc      	itt	lt
 8008018:	2201      	movlt	r2, #1
 800801a:	f8c8 2000 	strlt.w	r2, [r8]
 800801e:	ea33 030b 	bics.w	r3, r3, fp
 8008022:	d11b      	bne.n	800805c <_dtoa_r+0xb4>
 8008024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008026:	f242 730f 	movw	r3, #9999	; 0x270f
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008030:	4333      	orrs	r3, r6
 8008032:	f000 8592 	beq.w	8008b5a <_dtoa_r+0xbb2>
 8008036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008038:	b963      	cbnz	r3, 8008054 <_dtoa_r+0xac>
 800803a:	4b92      	ldr	r3, [pc, #584]	; (8008284 <_dtoa_r+0x2dc>)
 800803c:	e022      	b.n	8008084 <_dtoa_r+0xdc>
 800803e:	4b92      	ldr	r3, [pc, #584]	; (8008288 <_dtoa_r+0x2e0>)
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	3308      	adds	r3, #8
 8008044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	9801      	ldr	r0, [sp, #4]
 800804a:	b013      	add	sp, #76	; 0x4c
 800804c:	ecbd 8b04 	vpop	{d8-d9}
 8008050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	4b8b      	ldr	r3, [pc, #556]	; (8008284 <_dtoa_r+0x2dc>)
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	3303      	adds	r3, #3
 800805a:	e7f3      	b.n	8008044 <_dtoa_r+0x9c>
 800805c:	2200      	movs	r2, #0
 800805e:	2300      	movs	r3, #0
 8008060:	4650      	mov	r0, sl
 8008062:	4659      	mov	r1, fp
 8008064:	f7f8 fd40 	bl	8000ae8 <__aeabi_dcmpeq>
 8008068:	ec4b ab19 	vmov	d9, sl, fp
 800806c:	4680      	mov	r8, r0
 800806e:	b158      	cbz	r0, 8008088 <_dtoa_r+0xe0>
 8008070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008072:	2301      	movs	r3, #1
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 856b 	beq.w	8008b54 <_dtoa_r+0xbac>
 800807e:	4883      	ldr	r0, [pc, #524]	; (800828c <_dtoa_r+0x2e4>)
 8008080:	6018      	str	r0, [r3, #0]
 8008082:	1e43      	subs	r3, r0, #1
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	e7df      	b.n	8008048 <_dtoa_r+0xa0>
 8008088:	ec4b ab10 	vmov	d0, sl, fp
 800808c:	aa10      	add	r2, sp, #64	; 0x40
 800808e:	a911      	add	r1, sp, #68	; 0x44
 8008090:	4620      	mov	r0, r4
 8008092:	f001 fd05 	bl	8009aa0 <__d2b>
 8008096:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800809a:	ee08 0a10 	vmov	s16, r0
 800809e:	2d00      	cmp	r5, #0
 80080a0:	f000 8084 	beq.w	80081ac <_dtoa_r+0x204>
 80080a4:	ee19 3a90 	vmov	r3, s19
 80080a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080b0:	4656      	mov	r6, sl
 80080b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80080be:	4b74      	ldr	r3, [pc, #464]	; (8008290 <_dtoa_r+0x2e8>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	4630      	mov	r0, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 f8ef 	bl	80002a8 <__aeabi_dsub>
 80080ca:	a365      	add	r3, pc, #404	; (adr r3, 8008260 <_dtoa_r+0x2b8>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 faa2 	bl	8000618 <__aeabi_dmul>
 80080d4:	a364      	add	r3, pc, #400	; (adr r3, 8008268 <_dtoa_r+0x2c0>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f7f8 f8e7 	bl	80002ac <__adddf3>
 80080de:	4606      	mov	r6, r0
 80080e0:	4628      	mov	r0, r5
 80080e2:	460f      	mov	r7, r1
 80080e4:	f7f8 fa2e 	bl	8000544 <__aeabi_i2d>
 80080e8:	a361      	add	r3, pc, #388	; (adr r3, 8008270 <_dtoa_r+0x2c8>)
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	f7f8 fa93 	bl	8000618 <__aeabi_dmul>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 f8d7 	bl	80002ac <__adddf3>
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	f7f8 fd39 	bl	8000b78 <__aeabi_d2iz>
 8008106:	2200      	movs	r2, #0
 8008108:	9000      	str	r0, [sp, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	f7f8 fcf4 	bl	8000afc <__aeabi_dcmplt>
 8008114:	b150      	cbz	r0, 800812c <_dtoa_r+0x184>
 8008116:	9800      	ldr	r0, [sp, #0]
 8008118:	f7f8 fa14 	bl	8000544 <__aeabi_i2d>
 800811c:	4632      	mov	r2, r6
 800811e:	463b      	mov	r3, r7
 8008120:	f7f8 fce2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008124:	b910      	cbnz	r0, 800812c <_dtoa_r+0x184>
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	3b01      	subs	r3, #1
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	9b00      	ldr	r3, [sp, #0]
 800812e:	2b16      	cmp	r3, #22
 8008130:	d85a      	bhi.n	80081e8 <_dtoa_r+0x240>
 8008132:	9a00      	ldr	r2, [sp, #0]
 8008134:	4b57      	ldr	r3, [pc, #348]	; (8008294 <_dtoa_r+0x2ec>)
 8008136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	ec51 0b19 	vmov	r0, r1, d9
 8008142:	f7f8 fcdb 	bl	8000afc <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	d050      	beq.n	80081ec <_dtoa_r+0x244>
 800814a:	9b00      	ldr	r3, [sp, #0]
 800814c:	3b01      	subs	r3, #1
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	930b      	str	r3, [sp, #44]	; 0x2c
 8008154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008156:	1b5d      	subs	r5, r3, r5
 8008158:	1e6b      	subs	r3, r5, #1
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	bf45      	ittet	mi
 800815e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008162:	9304      	strmi	r3, [sp, #16]
 8008164:	2300      	movpl	r3, #0
 8008166:	2300      	movmi	r3, #0
 8008168:	bf4c      	ite	mi
 800816a:	9305      	strmi	r3, [sp, #20]
 800816c:	9304      	strpl	r3, [sp, #16]
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	db3d      	blt.n	80081f0 <_dtoa_r+0x248>
 8008174:	9b05      	ldr	r3, [sp, #20]
 8008176:	9a00      	ldr	r2, [sp, #0]
 8008178:	920a      	str	r2, [sp, #40]	; 0x28
 800817a:	4413      	add	r3, r2
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	2300      	movs	r3, #0
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	2b09      	cmp	r3, #9
 8008186:	f200 8089 	bhi.w	800829c <_dtoa_r+0x2f4>
 800818a:	2b05      	cmp	r3, #5
 800818c:	bfc4      	itt	gt
 800818e:	3b04      	subgt	r3, #4
 8008190:	9306      	strgt	r3, [sp, #24]
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	f1a3 0302 	sub.w	r3, r3, #2
 8008198:	bfcc      	ite	gt
 800819a:	2500      	movgt	r5, #0
 800819c:	2501      	movle	r5, #1
 800819e:	2b03      	cmp	r3, #3
 80081a0:	f200 8087 	bhi.w	80082b2 <_dtoa_r+0x30a>
 80081a4:	e8df f003 	tbb	[pc, r3]
 80081a8:	59383a2d 	.word	0x59383a2d
 80081ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081b0:	441d      	add	r5, r3
 80081b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	bfc1      	itttt	gt
 80081ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80081c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081ca:	bfda      	itte	le
 80081cc:	f1c3 0320 	rsble	r3, r3, #32
 80081d0:	fa06 f003 	lslle.w	r0, r6, r3
 80081d4:	4318      	orrgt	r0, r3
 80081d6:	f7f8 f9a5 	bl	8000524 <__aeabi_ui2d>
 80081da:	2301      	movs	r3, #1
 80081dc:	4606      	mov	r6, r0
 80081de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081e2:	3d01      	subs	r5, #1
 80081e4:	930e      	str	r3, [sp, #56]	; 0x38
 80081e6:	e76a      	b.n	80080be <_dtoa_r+0x116>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e7b2      	b.n	8008152 <_dtoa_r+0x1aa>
 80081ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80081ee:	e7b1      	b.n	8008154 <_dtoa_r+0x1ac>
 80081f0:	9b04      	ldr	r3, [sp, #16]
 80081f2:	9a00      	ldr	r2, [sp, #0]
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	4253      	negs	r3, r2
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	2300      	movs	r3, #0
 80081fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008200:	e7bf      	b.n	8008182 <_dtoa_r+0x1da>
 8008202:	2300      	movs	r3, #0
 8008204:	9308      	str	r3, [sp, #32]
 8008206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008208:	2b00      	cmp	r3, #0
 800820a:	dc55      	bgt.n	80082b8 <_dtoa_r+0x310>
 800820c:	2301      	movs	r3, #1
 800820e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008212:	461a      	mov	r2, r3
 8008214:	9209      	str	r2, [sp, #36]	; 0x24
 8008216:	e00c      	b.n	8008232 <_dtoa_r+0x28a>
 8008218:	2301      	movs	r3, #1
 800821a:	e7f3      	b.n	8008204 <_dtoa_r+0x25c>
 800821c:	2300      	movs	r3, #0
 800821e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	9b00      	ldr	r3, [sp, #0]
 8008224:	4413      	add	r3, r2
 8008226:	9302      	str	r3, [sp, #8]
 8008228:	3301      	adds	r3, #1
 800822a:	2b01      	cmp	r3, #1
 800822c:	9303      	str	r3, [sp, #12]
 800822e:	bfb8      	it	lt
 8008230:	2301      	movlt	r3, #1
 8008232:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008234:	2200      	movs	r2, #0
 8008236:	6042      	str	r2, [r0, #4]
 8008238:	2204      	movs	r2, #4
 800823a:	f102 0614 	add.w	r6, r2, #20
 800823e:	429e      	cmp	r6, r3
 8008240:	6841      	ldr	r1, [r0, #4]
 8008242:	d93d      	bls.n	80082c0 <_dtoa_r+0x318>
 8008244:	4620      	mov	r0, r4
 8008246:	f001 f83d 	bl	80092c4 <_Balloc>
 800824a:	9001      	str	r0, [sp, #4]
 800824c:	2800      	cmp	r0, #0
 800824e:	d13b      	bne.n	80082c8 <_dtoa_r+0x320>
 8008250:	4b11      	ldr	r3, [pc, #68]	; (8008298 <_dtoa_r+0x2f0>)
 8008252:	4602      	mov	r2, r0
 8008254:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008258:	e6c0      	b.n	8007fdc <_dtoa_r+0x34>
 800825a:	2301      	movs	r3, #1
 800825c:	e7df      	b.n	800821e <_dtoa_r+0x276>
 800825e:	bf00      	nop
 8008260:	636f4361 	.word	0x636f4361
 8008264:	3fd287a7 	.word	0x3fd287a7
 8008268:	8b60c8b3 	.word	0x8b60c8b3
 800826c:	3fc68a28 	.word	0x3fc68a28
 8008270:	509f79fb 	.word	0x509f79fb
 8008274:	3fd34413 	.word	0x3fd34413
 8008278:	0800b73e 	.word	0x0800b73e
 800827c:	0800b755 	.word	0x0800b755
 8008280:	7ff00000 	.word	0x7ff00000
 8008284:	0800b73a 	.word	0x0800b73a
 8008288:	0800b731 	.word	0x0800b731
 800828c:	0800b9aa 	.word	0x0800b9aa
 8008290:	3ff80000 	.word	0x3ff80000
 8008294:	0800b8c0 	.word	0x0800b8c0
 8008298:	0800b7b0 	.word	0x0800b7b0
 800829c:	2501      	movs	r5, #1
 800829e:	2300      	movs	r3, #0
 80082a0:	9306      	str	r3, [sp, #24]
 80082a2:	9508      	str	r5, [sp, #32]
 80082a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	2312      	movs	r3, #18
 80082b0:	e7b0      	b.n	8008214 <_dtoa_r+0x26c>
 80082b2:	2301      	movs	r3, #1
 80082b4:	9308      	str	r3, [sp, #32]
 80082b6:	e7f5      	b.n	80082a4 <_dtoa_r+0x2fc>
 80082b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082be:	e7b8      	b.n	8008232 <_dtoa_r+0x28a>
 80082c0:	3101      	adds	r1, #1
 80082c2:	6041      	str	r1, [r0, #4]
 80082c4:	0052      	lsls	r2, r2, #1
 80082c6:	e7b8      	b.n	800823a <_dtoa_r+0x292>
 80082c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ca:	9a01      	ldr	r2, [sp, #4]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	2b0e      	cmp	r3, #14
 80082d2:	f200 809d 	bhi.w	8008410 <_dtoa_r+0x468>
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	f000 809a 	beq.w	8008410 <_dtoa_r+0x468>
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	dd32      	ble.n	8008348 <_dtoa_r+0x3a0>
 80082e2:	4ab7      	ldr	r2, [pc, #732]	; (80085c0 <_dtoa_r+0x618>)
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082f0:	9b00      	ldr	r3, [sp, #0]
 80082f2:	05d8      	lsls	r0, r3, #23
 80082f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082f8:	d516      	bpl.n	8008328 <_dtoa_r+0x380>
 80082fa:	4bb2      	ldr	r3, [pc, #712]	; (80085c4 <_dtoa_r+0x61c>)
 80082fc:	ec51 0b19 	vmov	r0, r1, d9
 8008300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008304:	f7f8 fab2 	bl	800086c <__aeabi_ddiv>
 8008308:	f007 070f 	and.w	r7, r7, #15
 800830c:	4682      	mov	sl, r0
 800830e:	468b      	mov	fp, r1
 8008310:	2503      	movs	r5, #3
 8008312:	4eac      	ldr	r6, [pc, #688]	; (80085c4 <_dtoa_r+0x61c>)
 8008314:	b957      	cbnz	r7, 800832c <_dtoa_r+0x384>
 8008316:	4642      	mov	r2, r8
 8008318:	464b      	mov	r3, r9
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f8 faa5 	bl	800086c <__aeabi_ddiv>
 8008322:	4682      	mov	sl, r0
 8008324:	468b      	mov	fp, r1
 8008326:	e028      	b.n	800837a <_dtoa_r+0x3d2>
 8008328:	2502      	movs	r5, #2
 800832a:	e7f2      	b.n	8008312 <_dtoa_r+0x36a>
 800832c:	07f9      	lsls	r1, r7, #31
 800832e:	d508      	bpl.n	8008342 <_dtoa_r+0x39a>
 8008330:	4640      	mov	r0, r8
 8008332:	4649      	mov	r1, r9
 8008334:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008338:	f7f8 f96e 	bl	8000618 <__aeabi_dmul>
 800833c:	3501      	adds	r5, #1
 800833e:	4680      	mov	r8, r0
 8008340:	4689      	mov	r9, r1
 8008342:	107f      	asrs	r7, r7, #1
 8008344:	3608      	adds	r6, #8
 8008346:	e7e5      	b.n	8008314 <_dtoa_r+0x36c>
 8008348:	f000 809b 	beq.w	8008482 <_dtoa_r+0x4da>
 800834c:	9b00      	ldr	r3, [sp, #0]
 800834e:	4f9d      	ldr	r7, [pc, #628]	; (80085c4 <_dtoa_r+0x61c>)
 8008350:	425e      	negs	r6, r3
 8008352:	4b9b      	ldr	r3, [pc, #620]	; (80085c0 <_dtoa_r+0x618>)
 8008354:	f006 020f 	and.w	r2, r6, #15
 8008358:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	ec51 0b19 	vmov	r0, r1, d9
 8008364:	f7f8 f958 	bl	8000618 <__aeabi_dmul>
 8008368:	1136      	asrs	r6, r6, #4
 800836a:	4682      	mov	sl, r0
 800836c:	468b      	mov	fp, r1
 800836e:	2300      	movs	r3, #0
 8008370:	2502      	movs	r5, #2
 8008372:	2e00      	cmp	r6, #0
 8008374:	d17a      	bne.n	800846c <_dtoa_r+0x4c4>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1d3      	bne.n	8008322 <_dtoa_r+0x37a>
 800837a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8082 	beq.w	8008486 <_dtoa_r+0x4de>
 8008382:	4b91      	ldr	r3, [pc, #580]	; (80085c8 <_dtoa_r+0x620>)
 8008384:	2200      	movs	r2, #0
 8008386:	4650      	mov	r0, sl
 8008388:	4659      	mov	r1, fp
 800838a:	f7f8 fbb7 	bl	8000afc <__aeabi_dcmplt>
 800838e:	2800      	cmp	r0, #0
 8008390:	d079      	beq.n	8008486 <_dtoa_r+0x4de>
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d076      	beq.n	8008486 <_dtoa_r+0x4de>
 8008398:	9b02      	ldr	r3, [sp, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	dd36      	ble.n	800840c <_dtoa_r+0x464>
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	4650      	mov	r0, sl
 80083a2:	4659      	mov	r1, fp
 80083a4:	1e5f      	subs	r7, r3, #1
 80083a6:	2200      	movs	r2, #0
 80083a8:	4b88      	ldr	r3, [pc, #544]	; (80085cc <_dtoa_r+0x624>)
 80083aa:	f7f8 f935 	bl	8000618 <__aeabi_dmul>
 80083ae:	9e02      	ldr	r6, [sp, #8]
 80083b0:	4682      	mov	sl, r0
 80083b2:	468b      	mov	fp, r1
 80083b4:	3501      	adds	r5, #1
 80083b6:	4628      	mov	r0, r5
 80083b8:	f7f8 f8c4 	bl	8000544 <__aeabi_i2d>
 80083bc:	4652      	mov	r2, sl
 80083be:	465b      	mov	r3, fp
 80083c0:	f7f8 f92a 	bl	8000618 <__aeabi_dmul>
 80083c4:	4b82      	ldr	r3, [pc, #520]	; (80085d0 <_dtoa_r+0x628>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	f7f7 ff70 	bl	80002ac <__adddf3>
 80083cc:	46d0      	mov	r8, sl
 80083ce:	46d9      	mov	r9, fp
 80083d0:	4682      	mov	sl, r0
 80083d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	d158      	bne.n	800848c <_dtoa_r+0x4e4>
 80083da:	4b7e      	ldr	r3, [pc, #504]	; (80085d4 <_dtoa_r+0x62c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f7 ff61 	bl	80002a8 <__aeabi_dsub>
 80083e6:	4652      	mov	r2, sl
 80083e8:	465b      	mov	r3, fp
 80083ea:	4680      	mov	r8, r0
 80083ec:	4689      	mov	r9, r1
 80083ee:	f7f8 fba3 	bl	8000b38 <__aeabi_dcmpgt>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f040 8295 	bne.w	8008922 <_dtoa_r+0x97a>
 80083f8:	4652      	mov	r2, sl
 80083fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 fb7b 	bl	8000afc <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f040 8289 	bne.w	800891e <_dtoa_r+0x976>
 800840c:	ec5b ab19 	vmov	sl, fp, d9
 8008410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008412:	2b00      	cmp	r3, #0
 8008414:	f2c0 8148 	blt.w	80086a8 <_dtoa_r+0x700>
 8008418:	9a00      	ldr	r2, [sp, #0]
 800841a:	2a0e      	cmp	r2, #14
 800841c:	f300 8144 	bgt.w	80086a8 <_dtoa_r+0x700>
 8008420:	4b67      	ldr	r3, [pc, #412]	; (80085c0 <_dtoa_r+0x618>)
 8008422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008426:	e9d3 8900 	ldrd	r8, r9, [r3]
 800842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	f280 80d5 	bge.w	80085dc <_dtoa_r+0x634>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f300 80d1 	bgt.w	80085dc <_dtoa_r+0x634>
 800843a:	f040 826f 	bne.w	800891c <_dtoa_r+0x974>
 800843e:	4b65      	ldr	r3, [pc, #404]	; (80085d4 <_dtoa_r+0x62c>)
 8008440:	2200      	movs	r2, #0
 8008442:	4640      	mov	r0, r8
 8008444:	4649      	mov	r1, r9
 8008446:	f7f8 f8e7 	bl	8000618 <__aeabi_dmul>
 800844a:	4652      	mov	r2, sl
 800844c:	465b      	mov	r3, fp
 800844e:	f7f8 fb69 	bl	8000b24 <__aeabi_dcmpge>
 8008452:	9e03      	ldr	r6, [sp, #12]
 8008454:	4637      	mov	r7, r6
 8008456:	2800      	cmp	r0, #0
 8008458:	f040 8245 	bne.w	80088e6 <_dtoa_r+0x93e>
 800845c:	9d01      	ldr	r5, [sp, #4]
 800845e:	2331      	movs	r3, #49	; 0x31
 8008460:	f805 3b01 	strb.w	r3, [r5], #1
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	e240      	b.n	80088ee <_dtoa_r+0x946>
 800846c:	07f2      	lsls	r2, r6, #31
 800846e:	d505      	bpl.n	800847c <_dtoa_r+0x4d4>
 8008470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008474:	f7f8 f8d0 	bl	8000618 <__aeabi_dmul>
 8008478:	3501      	adds	r5, #1
 800847a:	2301      	movs	r3, #1
 800847c:	1076      	asrs	r6, r6, #1
 800847e:	3708      	adds	r7, #8
 8008480:	e777      	b.n	8008372 <_dtoa_r+0x3ca>
 8008482:	2502      	movs	r5, #2
 8008484:	e779      	b.n	800837a <_dtoa_r+0x3d2>
 8008486:	9f00      	ldr	r7, [sp, #0]
 8008488:	9e03      	ldr	r6, [sp, #12]
 800848a:	e794      	b.n	80083b6 <_dtoa_r+0x40e>
 800848c:	9901      	ldr	r1, [sp, #4]
 800848e:	4b4c      	ldr	r3, [pc, #304]	; (80085c0 <_dtoa_r+0x618>)
 8008490:	4431      	add	r1, r6
 8008492:	910d      	str	r1, [sp, #52]	; 0x34
 8008494:	9908      	ldr	r1, [sp, #32]
 8008496:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800849a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800849e:	2900      	cmp	r1, #0
 80084a0:	d043      	beq.n	800852a <_dtoa_r+0x582>
 80084a2:	494d      	ldr	r1, [pc, #308]	; (80085d8 <_dtoa_r+0x630>)
 80084a4:	2000      	movs	r0, #0
 80084a6:	f7f8 f9e1 	bl	800086c <__aeabi_ddiv>
 80084aa:	4652      	mov	r2, sl
 80084ac:	465b      	mov	r3, fp
 80084ae:	f7f7 fefb 	bl	80002a8 <__aeabi_dsub>
 80084b2:	9d01      	ldr	r5, [sp, #4]
 80084b4:	4682      	mov	sl, r0
 80084b6:	468b      	mov	fp, r1
 80084b8:	4649      	mov	r1, r9
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7f8 fb5c 	bl	8000b78 <__aeabi_d2iz>
 80084c0:	4606      	mov	r6, r0
 80084c2:	f7f8 f83f 	bl	8000544 <__aeabi_i2d>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f7 feeb 	bl	80002a8 <__aeabi_dsub>
 80084d2:	3630      	adds	r6, #48	; 0x30
 80084d4:	f805 6b01 	strb.w	r6, [r5], #1
 80084d8:	4652      	mov	r2, sl
 80084da:	465b      	mov	r3, fp
 80084dc:	4680      	mov	r8, r0
 80084de:	4689      	mov	r9, r1
 80084e0:	f7f8 fb0c 	bl	8000afc <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d163      	bne.n	80085b0 <_dtoa_r+0x608>
 80084e8:	4642      	mov	r2, r8
 80084ea:	464b      	mov	r3, r9
 80084ec:	4936      	ldr	r1, [pc, #216]	; (80085c8 <_dtoa_r+0x620>)
 80084ee:	2000      	movs	r0, #0
 80084f0:	f7f7 feda 	bl	80002a8 <__aeabi_dsub>
 80084f4:	4652      	mov	r2, sl
 80084f6:	465b      	mov	r3, fp
 80084f8:	f7f8 fb00 	bl	8000afc <__aeabi_dcmplt>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f040 80b5 	bne.w	800866c <_dtoa_r+0x6c4>
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	429d      	cmp	r5, r3
 8008506:	d081      	beq.n	800840c <_dtoa_r+0x464>
 8008508:	4b30      	ldr	r3, [pc, #192]	; (80085cc <_dtoa_r+0x624>)
 800850a:	2200      	movs	r2, #0
 800850c:	4650      	mov	r0, sl
 800850e:	4659      	mov	r1, fp
 8008510:	f7f8 f882 	bl	8000618 <__aeabi_dmul>
 8008514:	4b2d      	ldr	r3, [pc, #180]	; (80085cc <_dtoa_r+0x624>)
 8008516:	4682      	mov	sl, r0
 8008518:	468b      	mov	fp, r1
 800851a:	4640      	mov	r0, r8
 800851c:	4649      	mov	r1, r9
 800851e:	2200      	movs	r2, #0
 8008520:	f7f8 f87a 	bl	8000618 <__aeabi_dmul>
 8008524:	4680      	mov	r8, r0
 8008526:	4689      	mov	r9, r1
 8008528:	e7c6      	b.n	80084b8 <_dtoa_r+0x510>
 800852a:	4650      	mov	r0, sl
 800852c:	4659      	mov	r1, fp
 800852e:	f7f8 f873 	bl	8000618 <__aeabi_dmul>
 8008532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008534:	9d01      	ldr	r5, [sp, #4]
 8008536:	930f      	str	r3, [sp, #60]	; 0x3c
 8008538:	4682      	mov	sl, r0
 800853a:	468b      	mov	fp, r1
 800853c:	4649      	mov	r1, r9
 800853e:	4640      	mov	r0, r8
 8008540:	f7f8 fb1a 	bl	8000b78 <__aeabi_d2iz>
 8008544:	4606      	mov	r6, r0
 8008546:	f7f7 fffd 	bl	8000544 <__aeabi_i2d>
 800854a:	3630      	adds	r6, #48	; 0x30
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4640      	mov	r0, r8
 8008552:	4649      	mov	r1, r9
 8008554:	f7f7 fea8 	bl	80002a8 <__aeabi_dsub>
 8008558:	f805 6b01 	strb.w	r6, [r5], #1
 800855c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800855e:	429d      	cmp	r5, r3
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	d124      	bne.n	80085b4 <_dtoa_r+0x60c>
 800856a:	4b1b      	ldr	r3, [pc, #108]	; (80085d8 <_dtoa_r+0x630>)
 800856c:	4650      	mov	r0, sl
 800856e:	4659      	mov	r1, fp
 8008570:	f7f7 fe9c 	bl	80002ac <__adddf3>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4640      	mov	r0, r8
 800857a:	4649      	mov	r1, r9
 800857c:	f7f8 fadc 	bl	8000b38 <__aeabi_dcmpgt>
 8008580:	2800      	cmp	r0, #0
 8008582:	d173      	bne.n	800866c <_dtoa_r+0x6c4>
 8008584:	4652      	mov	r2, sl
 8008586:	465b      	mov	r3, fp
 8008588:	4913      	ldr	r1, [pc, #76]	; (80085d8 <_dtoa_r+0x630>)
 800858a:	2000      	movs	r0, #0
 800858c:	f7f7 fe8c 	bl	80002a8 <__aeabi_dsub>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4640      	mov	r0, r8
 8008596:	4649      	mov	r1, r9
 8008598:	f7f8 fab0 	bl	8000afc <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f af35 	beq.w	800840c <_dtoa_r+0x464>
 80085a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085a4:	1e6b      	subs	r3, r5, #1
 80085a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085ac:	2b30      	cmp	r3, #48	; 0x30
 80085ae:	d0f8      	beq.n	80085a2 <_dtoa_r+0x5fa>
 80085b0:	9700      	str	r7, [sp, #0]
 80085b2:	e049      	b.n	8008648 <_dtoa_r+0x6a0>
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <_dtoa_r+0x624>)
 80085b6:	f7f8 f82f 	bl	8000618 <__aeabi_dmul>
 80085ba:	4680      	mov	r8, r0
 80085bc:	4689      	mov	r9, r1
 80085be:	e7bd      	b.n	800853c <_dtoa_r+0x594>
 80085c0:	0800b8c0 	.word	0x0800b8c0
 80085c4:	0800b898 	.word	0x0800b898
 80085c8:	3ff00000 	.word	0x3ff00000
 80085cc:	40240000 	.word	0x40240000
 80085d0:	401c0000 	.word	0x401c0000
 80085d4:	40140000 	.word	0x40140000
 80085d8:	3fe00000 	.word	0x3fe00000
 80085dc:	9d01      	ldr	r5, [sp, #4]
 80085de:	4656      	mov	r6, sl
 80085e0:	465f      	mov	r7, fp
 80085e2:	4642      	mov	r2, r8
 80085e4:	464b      	mov	r3, r9
 80085e6:	4630      	mov	r0, r6
 80085e8:	4639      	mov	r1, r7
 80085ea:	f7f8 f93f 	bl	800086c <__aeabi_ddiv>
 80085ee:	f7f8 fac3 	bl	8000b78 <__aeabi_d2iz>
 80085f2:	4682      	mov	sl, r0
 80085f4:	f7f7 ffa6 	bl	8000544 <__aeabi_i2d>
 80085f8:	4642      	mov	r2, r8
 80085fa:	464b      	mov	r3, r9
 80085fc:	f7f8 f80c 	bl	8000618 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800860c:	f7f7 fe4c 	bl	80002a8 <__aeabi_dsub>
 8008610:	f805 6b01 	strb.w	r6, [r5], #1
 8008614:	9e01      	ldr	r6, [sp, #4]
 8008616:	9f03      	ldr	r7, [sp, #12]
 8008618:	1bae      	subs	r6, r5, r6
 800861a:	42b7      	cmp	r7, r6
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	d135      	bne.n	800868e <_dtoa_r+0x6e6>
 8008622:	f7f7 fe43 	bl	80002ac <__adddf3>
 8008626:	4642      	mov	r2, r8
 8008628:	464b      	mov	r3, r9
 800862a:	4606      	mov	r6, r0
 800862c:	460f      	mov	r7, r1
 800862e:	f7f8 fa83 	bl	8000b38 <__aeabi_dcmpgt>
 8008632:	b9d0      	cbnz	r0, 800866a <_dtoa_r+0x6c2>
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f8 fa54 	bl	8000ae8 <__aeabi_dcmpeq>
 8008640:	b110      	cbz	r0, 8008648 <_dtoa_r+0x6a0>
 8008642:	f01a 0f01 	tst.w	sl, #1
 8008646:	d110      	bne.n	800866a <_dtoa_r+0x6c2>
 8008648:	4620      	mov	r0, r4
 800864a:	ee18 1a10 	vmov	r1, s16
 800864e:	f000 fe79 	bl	8009344 <_Bfree>
 8008652:	2300      	movs	r3, #0
 8008654:	9800      	ldr	r0, [sp, #0]
 8008656:	702b      	strb	r3, [r5, #0]
 8008658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800865a:	3001      	adds	r0, #1
 800865c:	6018      	str	r0, [r3, #0]
 800865e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008660:	2b00      	cmp	r3, #0
 8008662:	f43f acf1 	beq.w	8008048 <_dtoa_r+0xa0>
 8008666:	601d      	str	r5, [r3, #0]
 8008668:	e4ee      	b.n	8008048 <_dtoa_r+0xa0>
 800866a:	9f00      	ldr	r7, [sp, #0]
 800866c:	462b      	mov	r3, r5
 800866e:	461d      	mov	r5, r3
 8008670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008674:	2a39      	cmp	r2, #57	; 0x39
 8008676:	d106      	bne.n	8008686 <_dtoa_r+0x6de>
 8008678:	9a01      	ldr	r2, [sp, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d1f7      	bne.n	800866e <_dtoa_r+0x6c6>
 800867e:	9901      	ldr	r1, [sp, #4]
 8008680:	2230      	movs	r2, #48	; 0x30
 8008682:	3701      	adds	r7, #1
 8008684:	700a      	strb	r2, [r1, #0]
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	3201      	adds	r2, #1
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e790      	b.n	80085b0 <_dtoa_r+0x608>
 800868e:	4ba6      	ldr	r3, [pc, #664]	; (8008928 <_dtoa_r+0x980>)
 8008690:	2200      	movs	r2, #0
 8008692:	f7f7 ffc1 	bl	8000618 <__aeabi_dmul>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	f7f8 fa23 	bl	8000ae8 <__aeabi_dcmpeq>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d09d      	beq.n	80085e2 <_dtoa_r+0x63a>
 80086a6:	e7cf      	b.n	8008648 <_dtoa_r+0x6a0>
 80086a8:	9a08      	ldr	r2, [sp, #32]
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	f000 80d7 	beq.w	800885e <_dtoa_r+0x8b6>
 80086b0:	9a06      	ldr	r2, [sp, #24]
 80086b2:	2a01      	cmp	r2, #1
 80086b4:	f300 80ba 	bgt.w	800882c <_dtoa_r+0x884>
 80086b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ba:	2a00      	cmp	r2, #0
 80086bc:	f000 80b2 	beq.w	8008824 <_dtoa_r+0x87c>
 80086c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086c4:	9e07      	ldr	r6, [sp, #28]
 80086c6:	9d04      	ldr	r5, [sp, #16]
 80086c8:	9a04      	ldr	r2, [sp, #16]
 80086ca:	441a      	add	r2, r3
 80086cc:	9204      	str	r2, [sp, #16]
 80086ce:	9a05      	ldr	r2, [sp, #20]
 80086d0:	2101      	movs	r1, #1
 80086d2:	441a      	add	r2, r3
 80086d4:	4620      	mov	r0, r4
 80086d6:	9205      	str	r2, [sp, #20]
 80086d8:	f000 ff36 	bl	8009548 <__i2b>
 80086dc:	4607      	mov	r7, r0
 80086de:	2d00      	cmp	r5, #0
 80086e0:	dd0c      	ble.n	80086fc <_dtoa_r+0x754>
 80086e2:	9b05      	ldr	r3, [sp, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dd09      	ble.n	80086fc <_dtoa_r+0x754>
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	9a04      	ldr	r2, [sp, #16]
 80086ec:	bfa8      	it	ge
 80086ee:	462b      	movge	r3, r5
 80086f0:	1ad2      	subs	r2, r2, r3
 80086f2:	9204      	str	r2, [sp, #16]
 80086f4:	9a05      	ldr	r2, [sp, #20]
 80086f6:	1aed      	subs	r5, r5, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	9b07      	ldr	r3, [sp, #28]
 80086fe:	b31b      	cbz	r3, 8008748 <_dtoa_r+0x7a0>
 8008700:	9b08      	ldr	r3, [sp, #32]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80af 	beq.w	8008866 <_dtoa_r+0x8be>
 8008708:	2e00      	cmp	r6, #0
 800870a:	dd13      	ble.n	8008734 <_dtoa_r+0x78c>
 800870c:	4639      	mov	r1, r7
 800870e:	4632      	mov	r2, r6
 8008710:	4620      	mov	r0, r4
 8008712:	f000 ffd9 	bl	80096c8 <__pow5mult>
 8008716:	ee18 2a10 	vmov	r2, s16
 800871a:	4601      	mov	r1, r0
 800871c:	4607      	mov	r7, r0
 800871e:	4620      	mov	r0, r4
 8008720:	f000 ff28 	bl	8009574 <__multiply>
 8008724:	ee18 1a10 	vmov	r1, s16
 8008728:	4680      	mov	r8, r0
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fe0a 	bl	8009344 <_Bfree>
 8008730:	ee08 8a10 	vmov	s16, r8
 8008734:	9b07      	ldr	r3, [sp, #28]
 8008736:	1b9a      	subs	r2, r3, r6
 8008738:	d006      	beq.n	8008748 <_dtoa_r+0x7a0>
 800873a:	ee18 1a10 	vmov	r1, s16
 800873e:	4620      	mov	r0, r4
 8008740:	f000 ffc2 	bl	80096c8 <__pow5mult>
 8008744:	ee08 0a10 	vmov	s16, r0
 8008748:	2101      	movs	r1, #1
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fefc 	bl	8009548 <__i2b>
 8008750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	4606      	mov	r6, r0
 8008756:	f340 8088 	ble.w	800886a <_dtoa_r+0x8c2>
 800875a:	461a      	mov	r2, r3
 800875c:	4601      	mov	r1, r0
 800875e:	4620      	mov	r0, r4
 8008760:	f000 ffb2 	bl	80096c8 <__pow5mult>
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	2b01      	cmp	r3, #1
 8008768:	4606      	mov	r6, r0
 800876a:	f340 8081 	ble.w	8008870 <_dtoa_r+0x8c8>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	6933      	ldr	r3, [r6, #16]
 8008774:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008778:	6918      	ldr	r0, [r3, #16]
 800877a:	f000 fe95 	bl	80094a8 <__hi0bits>
 800877e:	f1c0 0020 	rsb	r0, r0, #32
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	4418      	add	r0, r3
 8008786:	f010 001f 	ands.w	r0, r0, #31
 800878a:	f000 8092 	beq.w	80088b2 <_dtoa_r+0x90a>
 800878e:	f1c0 0320 	rsb	r3, r0, #32
 8008792:	2b04      	cmp	r3, #4
 8008794:	f340 808a 	ble.w	80088ac <_dtoa_r+0x904>
 8008798:	f1c0 001c 	rsb	r0, r0, #28
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	4403      	add	r3, r0
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9b05      	ldr	r3, [sp, #20]
 80087a4:	4403      	add	r3, r0
 80087a6:	4405      	add	r5, r0
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd07      	ble.n	80087c0 <_dtoa_r+0x818>
 80087b0:	ee18 1a10 	vmov	r1, s16
 80087b4:	461a      	mov	r2, r3
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 ffe0 	bl	800977c <__lshift>
 80087bc:	ee08 0a10 	vmov	s16, r0
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dd05      	ble.n	80087d2 <_dtoa_r+0x82a>
 80087c6:	4631      	mov	r1, r6
 80087c8:	461a      	mov	r2, r3
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 ffd6 	bl	800977c <__lshift>
 80087d0:	4606      	mov	r6, r0
 80087d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d06e      	beq.n	80088b6 <_dtoa_r+0x90e>
 80087d8:	ee18 0a10 	vmov	r0, s16
 80087dc:	4631      	mov	r1, r6
 80087de:	f001 f83d 	bl	800985c <__mcmp>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	da67      	bge.n	80088b6 <_dtoa_r+0x90e>
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	ee18 1a10 	vmov	r1, s16
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	220a      	movs	r2, #10
 80087f2:	2300      	movs	r3, #0
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fdc7 	bl	8009388 <__multadd>
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	ee08 0a10 	vmov	s16, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 81b1 	beq.w	8008b68 <_dtoa_r+0xbc0>
 8008806:	2300      	movs	r3, #0
 8008808:	4639      	mov	r1, r7
 800880a:	220a      	movs	r2, #10
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fdbb 	bl	8009388 <__multadd>
 8008812:	9b02      	ldr	r3, [sp, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	4607      	mov	r7, r0
 8008818:	f300 808e 	bgt.w	8008938 <_dtoa_r+0x990>
 800881c:	9b06      	ldr	r3, [sp, #24]
 800881e:	2b02      	cmp	r3, #2
 8008820:	dc51      	bgt.n	80088c6 <_dtoa_r+0x91e>
 8008822:	e089      	b.n	8008938 <_dtoa_r+0x990>
 8008824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800882a:	e74b      	b.n	80086c4 <_dtoa_r+0x71c>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	1e5e      	subs	r6, r3, #1
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	42b3      	cmp	r3, r6
 8008834:	bfbf      	itttt	lt
 8008836:	9b07      	ldrlt	r3, [sp, #28]
 8008838:	9607      	strlt	r6, [sp, #28]
 800883a:	1af2      	sublt	r2, r6, r3
 800883c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800883e:	bfb6      	itet	lt
 8008840:	189b      	addlt	r3, r3, r2
 8008842:	1b9e      	subge	r6, r3, r6
 8008844:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	bfb8      	it	lt
 800884a:	2600      	movlt	r6, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfb7      	itett	lt
 8008850:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008854:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008858:	1a9d      	sublt	r5, r3, r2
 800885a:	2300      	movlt	r3, #0
 800885c:	e734      	b.n	80086c8 <_dtoa_r+0x720>
 800885e:	9e07      	ldr	r6, [sp, #28]
 8008860:	9d04      	ldr	r5, [sp, #16]
 8008862:	9f08      	ldr	r7, [sp, #32]
 8008864:	e73b      	b.n	80086de <_dtoa_r+0x736>
 8008866:	9a07      	ldr	r2, [sp, #28]
 8008868:	e767      	b.n	800873a <_dtoa_r+0x792>
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	2b01      	cmp	r3, #1
 800886e:	dc18      	bgt.n	80088a2 <_dtoa_r+0x8fa>
 8008870:	f1ba 0f00 	cmp.w	sl, #0
 8008874:	d115      	bne.n	80088a2 <_dtoa_r+0x8fa>
 8008876:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800887a:	b993      	cbnz	r3, 80088a2 <_dtoa_r+0x8fa>
 800887c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008880:	0d1b      	lsrs	r3, r3, #20
 8008882:	051b      	lsls	r3, r3, #20
 8008884:	b183      	cbz	r3, 80088a8 <_dtoa_r+0x900>
 8008886:	9b04      	ldr	r3, [sp, #16]
 8008888:	3301      	adds	r3, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	9b05      	ldr	r3, [sp, #20]
 800888e:	3301      	adds	r3, #1
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	f04f 0801 	mov.w	r8, #1
 8008896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	f47f af6a 	bne.w	8008772 <_dtoa_r+0x7ca>
 800889e:	2001      	movs	r0, #1
 80088a0:	e76f      	b.n	8008782 <_dtoa_r+0x7da>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	e7f6      	b.n	8008896 <_dtoa_r+0x8ee>
 80088a8:	4698      	mov	r8, r3
 80088aa:	e7f4      	b.n	8008896 <_dtoa_r+0x8ee>
 80088ac:	f43f af7d 	beq.w	80087aa <_dtoa_r+0x802>
 80088b0:	4618      	mov	r0, r3
 80088b2:	301c      	adds	r0, #28
 80088b4:	e772      	b.n	800879c <_dtoa_r+0x7f4>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc37      	bgt.n	800892c <_dtoa_r+0x984>
 80088bc:	9b06      	ldr	r3, [sp, #24]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	dd34      	ble.n	800892c <_dtoa_r+0x984>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	9302      	str	r3, [sp, #8]
 80088c6:	9b02      	ldr	r3, [sp, #8]
 80088c8:	b96b      	cbnz	r3, 80088e6 <_dtoa_r+0x93e>
 80088ca:	4631      	mov	r1, r6
 80088cc:	2205      	movs	r2, #5
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 fd5a 	bl	8009388 <__multadd>
 80088d4:	4601      	mov	r1, r0
 80088d6:	4606      	mov	r6, r0
 80088d8:	ee18 0a10 	vmov	r0, s16
 80088dc:	f000 ffbe 	bl	800985c <__mcmp>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f73f adbb 	bgt.w	800845c <_dtoa_r+0x4b4>
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	9d01      	ldr	r5, [sp, #4]
 80088ea:	43db      	mvns	r3, r3
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	f04f 0800 	mov.w	r8, #0
 80088f2:	4631      	mov	r1, r6
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fd25 	bl	8009344 <_Bfree>
 80088fa:	2f00      	cmp	r7, #0
 80088fc:	f43f aea4 	beq.w	8008648 <_dtoa_r+0x6a0>
 8008900:	f1b8 0f00 	cmp.w	r8, #0
 8008904:	d005      	beq.n	8008912 <_dtoa_r+0x96a>
 8008906:	45b8      	cmp	r8, r7
 8008908:	d003      	beq.n	8008912 <_dtoa_r+0x96a>
 800890a:	4641      	mov	r1, r8
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fd19 	bl	8009344 <_Bfree>
 8008912:	4639      	mov	r1, r7
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fd15 	bl	8009344 <_Bfree>
 800891a:	e695      	b.n	8008648 <_dtoa_r+0x6a0>
 800891c:	2600      	movs	r6, #0
 800891e:	4637      	mov	r7, r6
 8008920:	e7e1      	b.n	80088e6 <_dtoa_r+0x93e>
 8008922:	9700      	str	r7, [sp, #0]
 8008924:	4637      	mov	r7, r6
 8008926:	e599      	b.n	800845c <_dtoa_r+0x4b4>
 8008928:	40240000 	.word	0x40240000
 800892c:	9b08      	ldr	r3, [sp, #32]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80ca 	beq.w	8008ac8 <_dtoa_r+0xb20>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	2d00      	cmp	r5, #0
 800893a:	dd05      	ble.n	8008948 <_dtoa_r+0x9a0>
 800893c:	4639      	mov	r1, r7
 800893e:	462a      	mov	r2, r5
 8008940:	4620      	mov	r0, r4
 8008942:	f000 ff1b 	bl	800977c <__lshift>
 8008946:	4607      	mov	r7, r0
 8008948:	f1b8 0f00 	cmp.w	r8, #0
 800894c:	d05b      	beq.n	8008a06 <_dtoa_r+0xa5e>
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fcb7 	bl	80092c4 <_Balloc>
 8008956:	4605      	mov	r5, r0
 8008958:	b928      	cbnz	r0, 8008966 <_dtoa_r+0x9be>
 800895a:	4b87      	ldr	r3, [pc, #540]	; (8008b78 <_dtoa_r+0xbd0>)
 800895c:	4602      	mov	r2, r0
 800895e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008962:	f7ff bb3b 	b.w	8007fdc <_dtoa_r+0x34>
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	3202      	adds	r2, #2
 800896a:	0092      	lsls	r2, r2, #2
 800896c:	f107 010c 	add.w	r1, r7, #12
 8008970:	300c      	adds	r0, #12
 8008972:	f7fd fc95 	bl	80062a0 <memcpy>
 8008976:	2201      	movs	r2, #1
 8008978:	4629      	mov	r1, r5
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fefe 	bl	800977c <__lshift>
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	f103 0901 	add.w	r9, r3, #1
 8008986:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800898a:	4413      	add	r3, r2
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	f00a 0301 	and.w	r3, sl, #1
 8008992:	46b8      	mov	r8, r7
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4607      	mov	r7, r0
 8008998:	4631      	mov	r1, r6
 800899a:	ee18 0a10 	vmov	r0, s16
 800899e:	f7ff fa75 	bl	8007e8c <quorem>
 80089a2:	4641      	mov	r1, r8
 80089a4:	9002      	str	r0, [sp, #8]
 80089a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089aa:	ee18 0a10 	vmov	r0, s16
 80089ae:	f000 ff55 	bl	800985c <__mcmp>
 80089b2:	463a      	mov	r2, r7
 80089b4:	9003      	str	r0, [sp, #12]
 80089b6:	4631      	mov	r1, r6
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 ff6b 	bl	8009894 <__mdiff>
 80089be:	68c2      	ldr	r2, [r0, #12]
 80089c0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80089c4:	4605      	mov	r5, r0
 80089c6:	bb02      	cbnz	r2, 8008a0a <_dtoa_r+0xa62>
 80089c8:	4601      	mov	r1, r0
 80089ca:	ee18 0a10 	vmov	r0, s16
 80089ce:	f000 ff45 	bl	800985c <__mcmp>
 80089d2:	4602      	mov	r2, r0
 80089d4:	4629      	mov	r1, r5
 80089d6:	4620      	mov	r0, r4
 80089d8:	9207      	str	r2, [sp, #28]
 80089da:	f000 fcb3 	bl	8009344 <_Bfree>
 80089de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089e2:	ea43 0102 	orr.w	r1, r3, r2
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	430b      	orrs	r3, r1
 80089ea:	464d      	mov	r5, r9
 80089ec:	d10f      	bne.n	8008a0e <_dtoa_r+0xa66>
 80089ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089f2:	d02a      	beq.n	8008a4a <_dtoa_r+0xaa2>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dd02      	ble.n	8008a00 <_dtoa_r+0xa58>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008a00:	f88b a000 	strb.w	sl, [fp]
 8008a04:	e775      	b.n	80088f2 <_dtoa_r+0x94a>
 8008a06:	4638      	mov	r0, r7
 8008a08:	e7ba      	b.n	8008980 <_dtoa_r+0x9d8>
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	e7e2      	b.n	80089d4 <_dtoa_r+0xa2c>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	db04      	blt.n	8008a1e <_dtoa_r+0xa76>
 8008a14:	9906      	ldr	r1, [sp, #24]
 8008a16:	430b      	orrs	r3, r1
 8008a18:	9904      	ldr	r1, [sp, #16]
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	d122      	bne.n	8008a64 <_dtoa_r+0xabc>
 8008a1e:	2a00      	cmp	r2, #0
 8008a20:	ddee      	ble.n	8008a00 <_dtoa_r+0xa58>
 8008a22:	ee18 1a10 	vmov	r1, s16
 8008a26:	2201      	movs	r2, #1
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fea7 	bl	800977c <__lshift>
 8008a2e:	4631      	mov	r1, r6
 8008a30:	ee08 0a10 	vmov	s16, r0
 8008a34:	f000 ff12 	bl	800985c <__mcmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	dc03      	bgt.n	8008a44 <_dtoa_r+0xa9c>
 8008a3c:	d1e0      	bne.n	8008a00 <_dtoa_r+0xa58>
 8008a3e:	f01a 0f01 	tst.w	sl, #1
 8008a42:	d0dd      	beq.n	8008a00 <_dtoa_r+0xa58>
 8008a44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a48:	d1d7      	bne.n	80089fa <_dtoa_r+0xa52>
 8008a4a:	2339      	movs	r3, #57	; 0x39
 8008a4c:	f88b 3000 	strb.w	r3, [fp]
 8008a50:	462b      	mov	r3, r5
 8008a52:	461d      	mov	r5, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a5a:	2a39      	cmp	r2, #57	; 0x39
 8008a5c:	d071      	beq.n	8008b42 <_dtoa_r+0xb9a>
 8008a5e:	3201      	adds	r2, #1
 8008a60:	701a      	strb	r2, [r3, #0]
 8008a62:	e746      	b.n	80088f2 <_dtoa_r+0x94a>
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	dd07      	ble.n	8008a78 <_dtoa_r+0xad0>
 8008a68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a6c:	d0ed      	beq.n	8008a4a <_dtoa_r+0xaa2>
 8008a6e:	f10a 0301 	add.w	r3, sl, #1
 8008a72:	f88b 3000 	strb.w	r3, [fp]
 8008a76:	e73c      	b.n	80088f2 <_dtoa_r+0x94a>
 8008a78:	9b05      	ldr	r3, [sp, #20]
 8008a7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a7e:	4599      	cmp	r9, r3
 8008a80:	d047      	beq.n	8008b12 <_dtoa_r+0xb6a>
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	2300      	movs	r3, #0
 8008a88:	220a      	movs	r2, #10
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fc7c 	bl	8009388 <__multadd>
 8008a90:	45b8      	cmp	r8, r7
 8008a92:	ee08 0a10 	vmov	s16, r0
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	f04f 020a 	mov.w	r2, #10
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	d106      	bne.n	8008ab2 <_dtoa_r+0xb0a>
 8008aa4:	f000 fc70 	bl	8009388 <__multadd>
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4607      	mov	r7, r0
 8008aac:	f109 0901 	add.w	r9, r9, #1
 8008ab0:	e772      	b.n	8008998 <_dtoa_r+0x9f0>
 8008ab2:	f000 fc69 	bl	8009388 <__multadd>
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	4680      	mov	r8, r0
 8008aba:	2300      	movs	r3, #0
 8008abc:	220a      	movs	r2, #10
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fc62 	bl	8009388 <__multadd>
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	e7f1      	b.n	8008aac <_dtoa_r+0xb04>
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	9302      	str	r3, [sp, #8]
 8008acc:	9d01      	ldr	r5, [sp, #4]
 8008ace:	ee18 0a10 	vmov	r0, s16
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	f7ff f9da 	bl	8007e8c <quorem>
 8008ad8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	f805 ab01 	strb.w	sl, [r5], #1
 8008ae2:	1aea      	subs	r2, r5, r3
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	dd09      	ble.n	8008afe <_dtoa_r+0xb56>
 8008aea:	ee18 1a10 	vmov	r1, s16
 8008aee:	2300      	movs	r3, #0
 8008af0:	220a      	movs	r2, #10
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fc48 	bl	8009388 <__multadd>
 8008af8:	ee08 0a10 	vmov	s16, r0
 8008afc:	e7e7      	b.n	8008ace <_dtoa_r+0xb26>
 8008afe:	9b02      	ldr	r3, [sp, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bfc8      	it	gt
 8008b04:	461d      	movgt	r5, r3
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	bfd8      	it	le
 8008b0a:	2501      	movle	r5, #1
 8008b0c:	441d      	add	r5, r3
 8008b0e:	f04f 0800 	mov.w	r8, #0
 8008b12:	ee18 1a10 	vmov	r1, s16
 8008b16:	2201      	movs	r2, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fe2f 	bl	800977c <__lshift>
 8008b1e:	4631      	mov	r1, r6
 8008b20:	ee08 0a10 	vmov	s16, r0
 8008b24:	f000 fe9a 	bl	800985c <__mcmp>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dc91      	bgt.n	8008a50 <_dtoa_r+0xaa8>
 8008b2c:	d102      	bne.n	8008b34 <_dtoa_r+0xb8c>
 8008b2e:	f01a 0f01 	tst.w	sl, #1
 8008b32:	d18d      	bne.n	8008a50 <_dtoa_r+0xaa8>
 8008b34:	462b      	mov	r3, r5
 8008b36:	461d      	mov	r5, r3
 8008b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b3c:	2a30      	cmp	r2, #48	; 0x30
 8008b3e:	d0fa      	beq.n	8008b36 <_dtoa_r+0xb8e>
 8008b40:	e6d7      	b.n	80088f2 <_dtoa_r+0x94a>
 8008b42:	9a01      	ldr	r2, [sp, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d184      	bne.n	8008a52 <_dtoa_r+0xaaa>
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2331      	movs	r3, #49	; 0x31
 8008b50:	7013      	strb	r3, [r2, #0]
 8008b52:	e6ce      	b.n	80088f2 <_dtoa_r+0x94a>
 8008b54:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <_dtoa_r+0xbd4>)
 8008b56:	f7ff ba95 	b.w	8008084 <_dtoa_r+0xdc>
 8008b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f47f aa6e 	bne.w	800803e <_dtoa_r+0x96>
 8008b62:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <_dtoa_r+0xbd8>)
 8008b64:	f7ff ba8e 	b.w	8008084 <_dtoa_r+0xdc>
 8008b68:	9b02      	ldr	r3, [sp, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dcae      	bgt.n	8008acc <_dtoa_r+0xb24>
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	f73f aea8 	bgt.w	80088c6 <_dtoa_r+0x91e>
 8008b76:	e7a9      	b.n	8008acc <_dtoa_r+0xb24>
 8008b78:	0800b7b0 	.word	0x0800b7b0
 8008b7c:	0800b9a9 	.word	0x0800b9a9
 8008b80:	0800b731 	.word	0x0800b731

08008b84 <rshift>:
 8008b84:	6903      	ldr	r3, [r0, #16]
 8008b86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b92:	f100 0414 	add.w	r4, r0, #20
 8008b96:	dd45      	ble.n	8008c24 <rshift+0xa0>
 8008b98:	f011 011f 	ands.w	r1, r1, #31
 8008b9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ba0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ba4:	d10c      	bne.n	8008bc0 <rshift+0x3c>
 8008ba6:	f100 0710 	add.w	r7, r0, #16
 8008baa:	4629      	mov	r1, r5
 8008bac:	42b1      	cmp	r1, r6
 8008bae:	d334      	bcc.n	8008c1a <rshift+0x96>
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	1eea      	subs	r2, r5, #3
 8008bb6:	4296      	cmp	r6, r2
 8008bb8:	bf38      	it	cc
 8008bba:	2300      	movcc	r3, #0
 8008bbc:	4423      	add	r3, r4
 8008bbe:	e015      	b.n	8008bec <rshift+0x68>
 8008bc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008bc4:	f1c1 0820 	rsb	r8, r1, #32
 8008bc8:	40cf      	lsrs	r7, r1
 8008bca:	f105 0e04 	add.w	lr, r5, #4
 8008bce:	46a1      	mov	r9, r4
 8008bd0:	4576      	cmp	r6, lr
 8008bd2:	46f4      	mov	ip, lr
 8008bd4:	d815      	bhi.n	8008c02 <rshift+0x7e>
 8008bd6:	1a9a      	subs	r2, r3, r2
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	3a04      	subs	r2, #4
 8008bdc:	3501      	adds	r5, #1
 8008bde:	42ae      	cmp	r6, r5
 8008be0:	bf38      	it	cc
 8008be2:	2200      	movcc	r2, #0
 8008be4:	18a3      	adds	r3, r4, r2
 8008be6:	50a7      	str	r7, [r4, r2]
 8008be8:	b107      	cbz	r7, 8008bec <rshift+0x68>
 8008bea:	3304      	adds	r3, #4
 8008bec:	1b1a      	subs	r2, r3, r4
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bf4:	bf08      	it	eq
 8008bf6:	2300      	moveq	r3, #0
 8008bf8:	6102      	str	r2, [r0, #16]
 8008bfa:	bf08      	it	eq
 8008bfc:	6143      	streq	r3, [r0, #20]
 8008bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c02:	f8dc c000 	ldr.w	ip, [ip]
 8008c06:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c0a:	ea4c 0707 	orr.w	r7, ip, r7
 8008c0e:	f849 7b04 	str.w	r7, [r9], #4
 8008c12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c16:	40cf      	lsrs	r7, r1
 8008c18:	e7da      	b.n	8008bd0 <rshift+0x4c>
 8008c1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c22:	e7c3      	b.n	8008bac <rshift+0x28>
 8008c24:	4623      	mov	r3, r4
 8008c26:	e7e1      	b.n	8008bec <rshift+0x68>

08008c28 <__hexdig_fun>:
 8008c28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c2c:	2b09      	cmp	r3, #9
 8008c2e:	d802      	bhi.n	8008c36 <__hexdig_fun+0xe>
 8008c30:	3820      	subs	r0, #32
 8008c32:	b2c0      	uxtb	r0, r0
 8008c34:	4770      	bx	lr
 8008c36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c3a:	2b05      	cmp	r3, #5
 8008c3c:	d801      	bhi.n	8008c42 <__hexdig_fun+0x1a>
 8008c3e:	3847      	subs	r0, #71	; 0x47
 8008c40:	e7f7      	b.n	8008c32 <__hexdig_fun+0xa>
 8008c42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	d801      	bhi.n	8008c4e <__hexdig_fun+0x26>
 8008c4a:	3827      	subs	r0, #39	; 0x27
 8008c4c:	e7f1      	b.n	8008c32 <__hexdig_fun+0xa>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	4770      	bx	lr
	...

08008c54 <__gethex>:
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	ed2d 8b02 	vpush	{d8}
 8008c5c:	b089      	sub	sp, #36	; 0x24
 8008c5e:	ee08 0a10 	vmov	s16, r0
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	4bb4      	ldr	r3, [pc, #720]	; (8008f38 <__gethex+0x2e4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	468b      	mov	fp, r1
 8008c6e:	4690      	mov	r8, r2
 8008c70:	f7f7 fab8 	bl	80001e4 <strlen>
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	f8db 2000 	ldr.w	r2, [fp]
 8008c7a:	4403      	add	r3, r0
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c82:	9305      	str	r3, [sp, #20]
 8008c84:	1c93      	adds	r3, r2, #2
 8008c86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c8e:	32fe      	adds	r2, #254	; 0xfe
 8008c90:	18d1      	adds	r1, r2, r3
 8008c92:	461f      	mov	r7, r3
 8008c94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c98:	9100      	str	r1, [sp, #0]
 8008c9a:	2830      	cmp	r0, #48	; 0x30
 8008c9c:	d0f8      	beq.n	8008c90 <__gethex+0x3c>
 8008c9e:	f7ff ffc3 	bl	8008c28 <__hexdig_fun>
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d13a      	bne.n	8008d1e <__gethex+0xca>
 8008ca8:	9901      	ldr	r1, [sp, #4]
 8008caa:	4652      	mov	r2, sl
 8008cac:	4638      	mov	r0, r7
 8008cae:	f001 fda3 	bl	800a7f8 <strncmp>
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d168      	bne.n	8008d8a <__gethex+0x136>
 8008cb8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008cbc:	eb07 060a 	add.w	r6, r7, sl
 8008cc0:	f7ff ffb2 	bl	8008c28 <__hexdig_fun>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d062      	beq.n	8008d8e <__gethex+0x13a>
 8008cc8:	4633      	mov	r3, r6
 8008cca:	7818      	ldrb	r0, [r3, #0]
 8008ccc:	2830      	cmp	r0, #48	; 0x30
 8008cce:	461f      	mov	r7, r3
 8008cd0:	f103 0301 	add.w	r3, r3, #1
 8008cd4:	d0f9      	beq.n	8008cca <__gethex+0x76>
 8008cd6:	f7ff ffa7 	bl	8008c28 <__hexdig_fun>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	fab0 f480 	clz	r4, r0
 8008ce0:	0964      	lsrs	r4, r4, #5
 8008ce2:	4635      	mov	r5, r6
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	463a      	mov	r2, r7
 8008ce8:	4616      	mov	r6, r2
 8008cea:	3201      	adds	r2, #1
 8008cec:	7830      	ldrb	r0, [r6, #0]
 8008cee:	f7ff ff9b 	bl	8008c28 <__hexdig_fun>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d1f8      	bne.n	8008ce8 <__gethex+0x94>
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f001 fd7c 	bl	800a7f8 <strncmp>
 8008d00:	b980      	cbnz	r0, 8008d24 <__gethex+0xd0>
 8008d02:	b94d      	cbnz	r5, 8008d18 <__gethex+0xc4>
 8008d04:	eb06 050a 	add.w	r5, r6, sl
 8008d08:	462a      	mov	r2, r5
 8008d0a:	4616      	mov	r6, r2
 8008d0c:	3201      	adds	r2, #1
 8008d0e:	7830      	ldrb	r0, [r6, #0]
 8008d10:	f7ff ff8a 	bl	8008c28 <__hexdig_fun>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d1f8      	bne.n	8008d0a <__gethex+0xb6>
 8008d18:	1bad      	subs	r5, r5, r6
 8008d1a:	00ad      	lsls	r5, r5, #2
 8008d1c:	e004      	b.n	8008d28 <__gethex+0xd4>
 8008d1e:	2400      	movs	r4, #0
 8008d20:	4625      	mov	r5, r4
 8008d22:	e7e0      	b.n	8008ce6 <__gethex+0x92>
 8008d24:	2d00      	cmp	r5, #0
 8008d26:	d1f7      	bne.n	8008d18 <__gethex+0xc4>
 8008d28:	7833      	ldrb	r3, [r6, #0]
 8008d2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d2e:	2b50      	cmp	r3, #80	; 0x50
 8008d30:	d13b      	bne.n	8008daa <__gethex+0x156>
 8008d32:	7873      	ldrb	r3, [r6, #1]
 8008d34:	2b2b      	cmp	r3, #43	; 0x2b
 8008d36:	d02c      	beq.n	8008d92 <__gethex+0x13e>
 8008d38:	2b2d      	cmp	r3, #45	; 0x2d
 8008d3a:	d02e      	beq.n	8008d9a <__gethex+0x146>
 8008d3c:	1c71      	adds	r1, r6, #1
 8008d3e:	f04f 0900 	mov.w	r9, #0
 8008d42:	7808      	ldrb	r0, [r1, #0]
 8008d44:	f7ff ff70 	bl	8008c28 <__hexdig_fun>
 8008d48:	1e43      	subs	r3, r0, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b18      	cmp	r3, #24
 8008d4e:	d82c      	bhi.n	8008daa <__gethex+0x156>
 8008d50:	f1a0 0210 	sub.w	r2, r0, #16
 8008d54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d58:	f7ff ff66 	bl	8008c28 <__hexdig_fun>
 8008d5c:	1e43      	subs	r3, r0, #1
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b18      	cmp	r3, #24
 8008d62:	d91d      	bls.n	8008da0 <__gethex+0x14c>
 8008d64:	f1b9 0f00 	cmp.w	r9, #0
 8008d68:	d000      	beq.n	8008d6c <__gethex+0x118>
 8008d6a:	4252      	negs	r2, r2
 8008d6c:	4415      	add	r5, r2
 8008d6e:	f8cb 1000 	str.w	r1, [fp]
 8008d72:	b1e4      	cbz	r4, 8008dae <__gethex+0x15a>
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bf14      	ite	ne
 8008d7a:	2700      	movne	r7, #0
 8008d7c:	2706      	moveq	r7, #6
 8008d7e:	4638      	mov	r0, r7
 8008d80:	b009      	add	sp, #36	; 0x24
 8008d82:	ecbd 8b02 	vpop	{d8}
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	463e      	mov	r6, r7
 8008d8c:	4625      	mov	r5, r4
 8008d8e:	2401      	movs	r4, #1
 8008d90:	e7ca      	b.n	8008d28 <__gethex+0xd4>
 8008d92:	f04f 0900 	mov.w	r9, #0
 8008d96:	1cb1      	adds	r1, r6, #2
 8008d98:	e7d3      	b.n	8008d42 <__gethex+0xee>
 8008d9a:	f04f 0901 	mov.w	r9, #1
 8008d9e:	e7fa      	b.n	8008d96 <__gethex+0x142>
 8008da0:	230a      	movs	r3, #10
 8008da2:	fb03 0202 	mla	r2, r3, r2, r0
 8008da6:	3a10      	subs	r2, #16
 8008da8:	e7d4      	b.n	8008d54 <__gethex+0x100>
 8008daa:	4631      	mov	r1, r6
 8008dac:	e7df      	b.n	8008d6e <__gethex+0x11a>
 8008dae:	1bf3      	subs	r3, r6, r7
 8008db0:	3b01      	subs	r3, #1
 8008db2:	4621      	mov	r1, r4
 8008db4:	2b07      	cmp	r3, #7
 8008db6:	dc0b      	bgt.n	8008dd0 <__gethex+0x17c>
 8008db8:	ee18 0a10 	vmov	r0, s16
 8008dbc:	f000 fa82 	bl	80092c4 <_Balloc>
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	b940      	cbnz	r0, 8008dd6 <__gethex+0x182>
 8008dc4:	4b5d      	ldr	r3, [pc, #372]	; (8008f3c <__gethex+0x2e8>)
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	21de      	movs	r1, #222	; 0xde
 8008dca:	485d      	ldr	r0, [pc, #372]	; (8008f40 <__gethex+0x2ec>)
 8008dcc:	f001 fde4 	bl	800a998 <__assert_func>
 8008dd0:	3101      	adds	r1, #1
 8008dd2:	105b      	asrs	r3, r3, #1
 8008dd4:	e7ee      	b.n	8008db4 <__gethex+0x160>
 8008dd6:	f100 0914 	add.w	r9, r0, #20
 8008dda:	f04f 0b00 	mov.w	fp, #0
 8008dde:	f1ca 0301 	rsb	r3, sl, #1
 8008de2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008de6:	f8cd b000 	str.w	fp, [sp]
 8008dea:	9306      	str	r3, [sp, #24]
 8008dec:	42b7      	cmp	r7, r6
 8008dee:	d340      	bcc.n	8008e72 <__gethex+0x21e>
 8008df0:	9802      	ldr	r0, [sp, #8]
 8008df2:	9b00      	ldr	r3, [sp, #0]
 8008df4:	f840 3b04 	str.w	r3, [r0], #4
 8008df8:	eba0 0009 	sub.w	r0, r0, r9
 8008dfc:	1080      	asrs	r0, r0, #2
 8008dfe:	0146      	lsls	r6, r0, #5
 8008e00:	6120      	str	r0, [r4, #16]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fb50 	bl	80094a8 <__hi0bits>
 8008e08:	1a30      	subs	r0, r6, r0
 8008e0a:	f8d8 6000 	ldr.w	r6, [r8]
 8008e0e:	42b0      	cmp	r0, r6
 8008e10:	dd63      	ble.n	8008eda <__gethex+0x286>
 8008e12:	1b87      	subs	r7, r0, r6
 8008e14:	4639      	mov	r1, r7
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fef4 	bl	8009c04 <__any_on>
 8008e1c:	4682      	mov	sl, r0
 8008e1e:	b1a8      	cbz	r0, 8008e4c <__gethex+0x1f8>
 8008e20:	1e7b      	subs	r3, r7, #1
 8008e22:	1159      	asrs	r1, r3, #5
 8008e24:	f003 021f 	and.w	r2, r3, #31
 8008e28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e2c:	f04f 0a01 	mov.w	sl, #1
 8008e30:	fa0a f202 	lsl.w	r2, sl, r2
 8008e34:	420a      	tst	r2, r1
 8008e36:	d009      	beq.n	8008e4c <__gethex+0x1f8>
 8008e38:	4553      	cmp	r3, sl
 8008e3a:	dd05      	ble.n	8008e48 <__gethex+0x1f4>
 8008e3c:	1eb9      	subs	r1, r7, #2
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 fee0 	bl	8009c04 <__any_on>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d145      	bne.n	8008ed4 <__gethex+0x280>
 8008e48:	f04f 0a02 	mov.w	sl, #2
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f7ff fe98 	bl	8008b84 <rshift>
 8008e54:	443d      	add	r5, r7
 8008e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e5a:	42ab      	cmp	r3, r5
 8008e5c:	da4c      	bge.n	8008ef8 <__gethex+0x2a4>
 8008e5e:	ee18 0a10 	vmov	r0, s16
 8008e62:	4621      	mov	r1, r4
 8008e64:	f000 fa6e 	bl	8009344 <_Bfree>
 8008e68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	27a3      	movs	r7, #163	; 0xa3
 8008e70:	e785      	b.n	8008d7e <__gethex+0x12a>
 8008e72:	1e73      	subs	r3, r6, #1
 8008e74:	9a05      	ldr	r2, [sp, #20]
 8008e76:	9303      	str	r3, [sp, #12]
 8008e78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d019      	beq.n	8008eb4 <__gethex+0x260>
 8008e80:	f1bb 0f20 	cmp.w	fp, #32
 8008e84:	d107      	bne.n	8008e96 <__gethex+0x242>
 8008e86:	9b02      	ldr	r3, [sp, #8]
 8008e88:	9a00      	ldr	r2, [sp, #0]
 8008e8a:	f843 2b04 	str.w	r2, [r3], #4
 8008e8e:	9302      	str	r3, [sp, #8]
 8008e90:	2300      	movs	r3, #0
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	469b      	mov	fp, r3
 8008e96:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e9a:	f7ff fec5 	bl	8008c28 <__hexdig_fun>
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	f000 000f 	and.w	r0, r0, #15
 8008ea4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ea8:	4303      	orrs	r3, r0
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	f10b 0b04 	add.w	fp, fp, #4
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	e00d      	b.n	8008ed0 <__gethex+0x27c>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	9a06      	ldr	r2, [sp, #24]
 8008eb8:	4413      	add	r3, r2
 8008eba:	42bb      	cmp	r3, r7
 8008ebc:	d3e0      	bcc.n	8008e80 <__gethex+0x22c>
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	9901      	ldr	r1, [sp, #4]
 8008ec2:	9307      	str	r3, [sp, #28]
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	f001 fc97 	bl	800a7f8 <strncmp>
 8008eca:	9b07      	ldr	r3, [sp, #28]
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d1d7      	bne.n	8008e80 <__gethex+0x22c>
 8008ed0:	461e      	mov	r6, r3
 8008ed2:	e78b      	b.n	8008dec <__gethex+0x198>
 8008ed4:	f04f 0a03 	mov.w	sl, #3
 8008ed8:	e7b8      	b.n	8008e4c <__gethex+0x1f8>
 8008eda:	da0a      	bge.n	8008ef2 <__gethex+0x29e>
 8008edc:	1a37      	subs	r7, r6, r0
 8008ede:	4621      	mov	r1, r4
 8008ee0:	ee18 0a10 	vmov	r0, s16
 8008ee4:	463a      	mov	r2, r7
 8008ee6:	f000 fc49 	bl	800977c <__lshift>
 8008eea:	1bed      	subs	r5, r5, r7
 8008eec:	4604      	mov	r4, r0
 8008eee:	f100 0914 	add.w	r9, r0, #20
 8008ef2:	f04f 0a00 	mov.w	sl, #0
 8008ef6:	e7ae      	b.n	8008e56 <__gethex+0x202>
 8008ef8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008efc:	42a8      	cmp	r0, r5
 8008efe:	dd72      	ble.n	8008fe6 <__gethex+0x392>
 8008f00:	1b45      	subs	r5, r0, r5
 8008f02:	42ae      	cmp	r6, r5
 8008f04:	dc36      	bgt.n	8008f74 <__gethex+0x320>
 8008f06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d02a      	beq.n	8008f64 <__gethex+0x310>
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d02c      	beq.n	8008f6c <__gethex+0x318>
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d11c      	bne.n	8008f50 <__gethex+0x2fc>
 8008f16:	42ae      	cmp	r6, r5
 8008f18:	d11a      	bne.n	8008f50 <__gethex+0x2fc>
 8008f1a:	2e01      	cmp	r6, #1
 8008f1c:	d112      	bne.n	8008f44 <__gethex+0x2f0>
 8008f1e:	9a04      	ldr	r2, [sp, #16]
 8008f20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	2301      	movs	r3, #1
 8008f28:	6123      	str	r3, [r4, #16]
 8008f2a:	f8c9 3000 	str.w	r3, [r9]
 8008f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f30:	2762      	movs	r7, #98	; 0x62
 8008f32:	601c      	str	r4, [r3, #0]
 8008f34:	e723      	b.n	8008d7e <__gethex+0x12a>
 8008f36:	bf00      	nop
 8008f38:	0800b828 	.word	0x0800b828
 8008f3c:	0800b7b0 	.word	0x0800b7b0
 8008f40:	0800b7c1 	.word	0x0800b7c1
 8008f44:	1e71      	subs	r1, r6, #1
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fe5c 	bl	8009c04 <__any_on>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d1e6      	bne.n	8008f1e <__gethex+0x2ca>
 8008f50:	ee18 0a10 	vmov	r0, s16
 8008f54:	4621      	mov	r1, r4
 8008f56:	f000 f9f5 	bl	8009344 <_Bfree>
 8008f5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	2750      	movs	r7, #80	; 0x50
 8008f62:	e70c      	b.n	8008d7e <__gethex+0x12a>
 8008f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f2      	bne.n	8008f50 <__gethex+0x2fc>
 8008f6a:	e7d8      	b.n	8008f1e <__gethex+0x2ca>
 8008f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1d5      	bne.n	8008f1e <__gethex+0x2ca>
 8008f72:	e7ed      	b.n	8008f50 <__gethex+0x2fc>
 8008f74:	1e6f      	subs	r7, r5, #1
 8008f76:	f1ba 0f00 	cmp.w	sl, #0
 8008f7a:	d131      	bne.n	8008fe0 <__gethex+0x38c>
 8008f7c:	b127      	cbz	r7, 8008f88 <__gethex+0x334>
 8008f7e:	4639      	mov	r1, r7
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fe3f 	bl	8009c04 <__any_on>
 8008f86:	4682      	mov	sl, r0
 8008f88:	117b      	asrs	r3, r7, #5
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f90:	f007 071f 	and.w	r7, r7, #31
 8008f94:	fa01 f707 	lsl.w	r7, r1, r7
 8008f98:	421f      	tst	r7, r3
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	bf18      	it	ne
 8008fa0:	f04a 0a02 	orrne.w	sl, sl, #2
 8008fa4:	1b76      	subs	r6, r6, r5
 8008fa6:	f7ff fded 	bl	8008b84 <rshift>
 8008faa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008fae:	2702      	movs	r7, #2
 8008fb0:	f1ba 0f00 	cmp.w	sl, #0
 8008fb4:	d048      	beq.n	8009048 <__gethex+0x3f4>
 8008fb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d015      	beq.n	8008fea <__gethex+0x396>
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d017      	beq.n	8008ff2 <__gethex+0x39e>
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d109      	bne.n	8008fda <__gethex+0x386>
 8008fc6:	f01a 0f02 	tst.w	sl, #2
 8008fca:	d006      	beq.n	8008fda <__gethex+0x386>
 8008fcc:	f8d9 0000 	ldr.w	r0, [r9]
 8008fd0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fd4:	f01a 0f01 	tst.w	sl, #1
 8008fd8:	d10e      	bne.n	8008ff8 <__gethex+0x3a4>
 8008fda:	f047 0710 	orr.w	r7, r7, #16
 8008fde:	e033      	b.n	8009048 <__gethex+0x3f4>
 8008fe0:	f04f 0a01 	mov.w	sl, #1
 8008fe4:	e7d0      	b.n	8008f88 <__gethex+0x334>
 8008fe6:	2701      	movs	r7, #1
 8008fe8:	e7e2      	b.n	8008fb0 <__gethex+0x35c>
 8008fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fec:	f1c3 0301 	rsb	r3, r3, #1
 8008ff0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0f0      	beq.n	8008fda <__gethex+0x386>
 8008ff8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ffc:	f104 0314 	add.w	r3, r4, #20
 8009000:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009004:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009008:	f04f 0c00 	mov.w	ip, #0
 800900c:	4618      	mov	r0, r3
 800900e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009012:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009016:	d01c      	beq.n	8009052 <__gethex+0x3fe>
 8009018:	3201      	adds	r2, #1
 800901a:	6002      	str	r2, [r0, #0]
 800901c:	2f02      	cmp	r7, #2
 800901e:	f104 0314 	add.w	r3, r4, #20
 8009022:	d13f      	bne.n	80090a4 <__gethex+0x450>
 8009024:	f8d8 2000 	ldr.w	r2, [r8]
 8009028:	3a01      	subs	r2, #1
 800902a:	42b2      	cmp	r2, r6
 800902c:	d10a      	bne.n	8009044 <__gethex+0x3f0>
 800902e:	1171      	asrs	r1, r6, #5
 8009030:	2201      	movs	r2, #1
 8009032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009036:	f006 061f 	and.w	r6, r6, #31
 800903a:	fa02 f606 	lsl.w	r6, r2, r6
 800903e:	421e      	tst	r6, r3
 8009040:	bf18      	it	ne
 8009042:	4617      	movne	r7, r2
 8009044:	f047 0720 	orr.w	r7, r7, #32
 8009048:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800904a:	601c      	str	r4, [r3, #0]
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	601d      	str	r5, [r3, #0]
 8009050:	e695      	b.n	8008d7e <__gethex+0x12a>
 8009052:	4299      	cmp	r1, r3
 8009054:	f843 cc04 	str.w	ip, [r3, #-4]
 8009058:	d8d8      	bhi.n	800900c <__gethex+0x3b8>
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	459b      	cmp	fp, r3
 800905e:	db19      	blt.n	8009094 <__gethex+0x440>
 8009060:	6861      	ldr	r1, [r4, #4]
 8009062:	ee18 0a10 	vmov	r0, s16
 8009066:	3101      	adds	r1, #1
 8009068:	f000 f92c 	bl	80092c4 <_Balloc>
 800906c:	4681      	mov	r9, r0
 800906e:	b918      	cbnz	r0, 8009078 <__gethex+0x424>
 8009070:	4b1a      	ldr	r3, [pc, #104]	; (80090dc <__gethex+0x488>)
 8009072:	4602      	mov	r2, r0
 8009074:	2184      	movs	r1, #132	; 0x84
 8009076:	e6a8      	b.n	8008dca <__gethex+0x176>
 8009078:	6922      	ldr	r2, [r4, #16]
 800907a:	3202      	adds	r2, #2
 800907c:	f104 010c 	add.w	r1, r4, #12
 8009080:	0092      	lsls	r2, r2, #2
 8009082:	300c      	adds	r0, #12
 8009084:	f7fd f90c 	bl	80062a0 <memcpy>
 8009088:	4621      	mov	r1, r4
 800908a:	ee18 0a10 	vmov	r0, s16
 800908e:	f000 f959 	bl	8009344 <_Bfree>
 8009092:	464c      	mov	r4, r9
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800909c:	6122      	str	r2, [r4, #16]
 800909e:	2201      	movs	r2, #1
 80090a0:	615a      	str	r2, [r3, #20]
 80090a2:	e7bb      	b.n	800901c <__gethex+0x3c8>
 80090a4:	6922      	ldr	r2, [r4, #16]
 80090a6:	455a      	cmp	r2, fp
 80090a8:	dd0b      	ble.n	80090c2 <__gethex+0x46e>
 80090aa:	2101      	movs	r1, #1
 80090ac:	4620      	mov	r0, r4
 80090ae:	f7ff fd69 	bl	8008b84 <rshift>
 80090b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090b6:	3501      	adds	r5, #1
 80090b8:	42ab      	cmp	r3, r5
 80090ba:	f6ff aed0 	blt.w	8008e5e <__gethex+0x20a>
 80090be:	2701      	movs	r7, #1
 80090c0:	e7c0      	b.n	8009044 <__gethex+0x3f0>
 80090c2:	f016 061f 	ands.w	r6, r6, #31
 80090c6:	d0fa      	beq.n	80090be <__gethex+0x46a>
 80090c8:	4453      	add	r3, sl
 80090ca:	f1c6 0620 	rsb	r6, r6, #32
 80090ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090d2:	f000 f9e9 	bl	80094a8 <__hi0bits>
 80090d6:	42b0      	cmp	r0, r6
 80090d8:	dbe7      	blt.n	80090aa <__gethex+0x456>
 80090da:	e7f0      	b.n	80090be <__gethex+0x46a>
 80090dc:	0800b7b0 	.word	0x0800b7b0

080090e0 <L_shift>:
 80090e0:	f1c2 0208 	rsb	r2, r2, #8
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	b570      	push	{r4, r5, r6, lr}
 80090e8:	f1c2 0620 	rsb	r6, r2, #32
 80090ec:	6843      	ldr	r3, [r0, #4]
 80090ee:	6804      	ldr	r4, [r0, #0]
 80090f0:	fa03 f506 	lsl.w	r5, r3, r6
 80090f4:	432c      	orrs	r4, r5
 80090f6:	40d3      	lsrs	r3, r2
 80090f8:	6004      	str	r4, [r0, #0]
 80090fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80090fe:	4288      	cmp	r0, r1
 8009100:	d3f4      	bcc.n	80090ec <L_shift+0xc>
 8009102:	bd70      	pop	{r4, r5, r6, pc}

08009104 <__match>:
 8009104:	b530      	push	{r4, r5, lr}
 8009106:	6803      	ldr	r3, [r0, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800910e:	b914      	cbnz	r4, 8009116 <__match+0x12>
 8009110:	6003      	str	r3, [r0, #0]
 8009112:	2001      	movs	r0, #1
 8009114:	bd30      	pop	{r4, r5, pc}
 8009116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800911a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800911e:	2d19      	cmp	r5, #25
 8009120:	bf98      	it	ls
 8009122:	3220      	addls	r2, #32
 8009124:	42a2      	cmp	r2, r4
 8009126:	d0f0      	beq.n	800910a <__match+0x6>
 8009128:	2000      	movs	r0, #0
 800912a:	e7f3      	b.n	8009114 <__match+0x10>

0800912c <__hexnan>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	680b      	ldr	r3, [r1, #0]
 8009132:	115e      	asrs	r6, r3, #5
 8009134:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009138:	f013 031f 	ands.w	r3, r3, #31
 800913c:	b087      	sub	sp, #28
 800913e:	bf18      	it	ne
 8009140:	3604      	addne	r6, #4
 8009142:	2500      	movs	r5, #0
 8009144:	1f37      	subs	r7, r6, #4
 8009146:	4690      	mov	r8, r2
 8009148:	6802      	ldr	r2, [r0, #0]
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	4682      	mov	sl, r0
 800914e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009152:	46b9      	mov	r9, r7
 8009154:	463c      	mov	r4, r7
 8009156:	9502      	str	r5, [sp, #8]
 8009158:	46ab      	mov	fp, r5
 800915a:	7851      	ldrb	r1, [r2, #1]
 800915c:	1c53      	adds	r3, r2, #1
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	b341      	cbz	r1, 80091b4 <__hexnan+0x88>
 8009162:	4608      	mov	r0, r1
 8009164:	9205      	str	r2, [sp, #20]
 8009166:	9104      	str	r1, [sp, #16]
 8009168:	f7ff fd5e 	bl	8008c28 <__hexdig_fun>
 800916c:	2800      	cmp	r0, #0
 800916e:	d14f      	bne.n	8009210 <__hexnan+0xe4>
 8009170:	9904      	ldr	r1, [sp, #16]
 8009172:	9a05      	ldr	r2, [sp, #20]
 8009174:	2920      	cmp	r1, #32
 8009176:	d818      	bhi.n	80091aa <__hexnan+0x7e>
 8009178:	9b02      	ldr	r3, [sp, #8]
 800917a:	459b      	cmp	fp, r3
 800917c:	dd13      	ble.n	80091a6 <__hexnan+0x7a>
 800917e:	454c      	cmp	r4, r9
 8009180:	d206      	bcs.n	8009190 <__hexnan+0x64>
 8009182:	2d07      	cmp	r5, #7
 8009184:	dc04      	bgt.n	8009190 <__hexnan+0x64>
 8009186:	462a      	mov	r2, r5
 8009188:	4649      	mov	r1, r9
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff ffa8 	bl	80090e0 <L_shift>
 8009190:	4544      	cmp	r4, r8
 8009192:	d950      	bls.n	8009236 <__hexnan+0x10a>
 8009194:	2300      	movs	r3, #0
 8009196:	f1a4 0904 	sub.w	r9, r4, #4
 800919a:	f844 3c04 	str.w	r3, [r4, #-4]
 800919e:	f8cd b008 	str.w	fp, [sp, #8]
 80091a2:	464c      	mov	r4, r9
 80091a4:	461d      	mov	r5, r3
 80091a6:	9a03      	ldr	r2, [sp, #12]
 80091a8:	e7d7      	b.n	800915a <__hexnan+0x2e>
 80091aa:	2929      	cmp	r1, #41	; 0x29
 80091ac:	d156      	bne.n	800925c <__hexnan+0x130>
 80091ae:	3202      	adds	r2, #2
 80091b0:	f8ca 2000 	str.w	r2, [sl]
 80091b4:	f1bb 0f00 	cmp.w	fp, #0
 80091b8:	d050      	beq.n	800925c <__hexnan+0x130>
 80091ba:	454c      	cmp	r4, r9
 80091bc:	d206      	bcs.n	80091cc <__hexnan+0xa0>
 80091be:	2d07      	cmp	r5, #7
 80091c0:	dc04      	bgt.n	80091cc <__hexnan+0xa0>
 80091c2:	462a      	mov	r2, r5
 80091c4:	4649      	mov	r1, r9
 80091c6:	4620      	mov	r0, r4
 80091c8:	f7ff ff8a 	bl	80090e0 <L_shift>
 80091cc:	4544      	cmp	r4, r8
 80091ce:	d934      	bls.n	800923a <__hexnan+0x10e>
 80091d0:	f1a8 0204 	sub.w	r2, r8, #4
 80091d4:	4623      	mov	r3, r4
 80091d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80091da:	f842 1f04 	str.w	r1, [r2, #4]!
 80091de:	429f      	cmp	r7, r3
 80091e0:	d2f9      	bcs.n	80091d6 <__hexnan+0xaa>
 80091e2:	1b3b      	subs	r3, r7, r4
 80091e4:	f023 0303 	bic.w	r3, r3, #3
 80091e8:	3304      	adds	r3, #4
 80091ea:	3401      	adds	r4, #1
 80091ec:	3e03      	subs	r6, #3
 80091ee:	42b4      	cmp	r4, r6
 80091f0:	bf88      	it	hi
 80091f2:	2304      	movhi	r3, #4
 80091f4:	4443      	add	r3, r8
 80091f6:	2200      	movs	r2, #0
 80091f8:	f843 2b04 	str.w	r2, [r3], #4
 80091fc:	429f      	cmp	r7, r3
 80091fe:	d2fb      	bcs.n	80091f8 <__hexnan+0xcc>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	b91b      	cbnz	r3, 800920c <__hexnan+0xe0>
 8009204:	4547      	cmp	r7, r8
 8009206:	d127      	bne.n	8009258 <__hexnan+0x12c>
 8009208:	2301      	movs	r3, #1
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	2005      	movs	r0, #5
 800920e:	e026      	b.n	800925e <__hexnan+0x132>
 8009210:	3501      	adds	r5, #1
 8009212:	2d08      	cmp	r5, #8
 8009214:	f10b 0b01 	add.w	fp, fp, #1
 8009218:	dd06      	ble.n	8009228 <__hexnan+0xfc>
 800921a:	4544      	cmp	r4, r8
 800921c:	d9c3      	bls.n	80091a6 <__hexnan+0x7a>
 800921e:	2300      	movs	r3, #0
 8009220:	f844 3c04 	str.w	r3, [r4, #-4]
 8009224:	2501      	movs	r5, #1
 8009226:	3c04      	subs	r4, #4
 8009228:	6822      	ldr	r2, [r4, #0]
 800922a:	f000 000f 	and.w	r0, r0, #15
 800922e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009232:	6022      	str	r2, [r4, #0]
 8009234:	e7b7      	b.n	80091a6 <__hexnan+0x7a>
 8009236:	2508      	movs	r5, #8
 8009238:	e7b5      	b.n	80091a6 <__hexnan+0x7a>
 800923a:	9b01      	ldr	r3, [sp, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0df      	beq.n	8009200 <__hexnan+0xd4>
 8009240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009244:	f1c3 0320 	rsb	r3, r3, #32
 8009248:	fa22 f303 	lsr.w	r3, r2, r3
 800924c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009250:	401a      	ands	r2, r3
 8009252:	f846 2c04 	str.w	r2, [r6, #-4]
 8009256:	e7d3      	b.n	8009200 <__hexnan+0xd4>
 8009258:	3f04      	subs	r7, #4
 800925a:	e7d1      	b.n	8009200 <__hexnan+0xd4>
 800925c:	2004      	movs	r0, #4
 800925e:	b007      	add	sp, #28
 8009260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009264 <_localeconv_r>:
 8009264:	4800      	ldr	r0, [pc, #0]	; (8009268 <_localeconv_r+0x4>)
 8009266:	4770      	bx	lr
 8009268:	20000174 	.word	0x20000174

0800926c <_lseek_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d07      	ldr	r5, [pc, #28]	; (800928c <_lseek_r+0x20>)
 8009270:	4604      	mov	r4, r0
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	2200      	movs	r2, #0
 8009278:	602a      	str	r2, [r5, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	f7f9 f91a 	bl	80024b4 <_lseek>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_lseek_r+0x1e>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_lseek_r+0x1e>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20000754 	.word	0x20000754

08009290 <malloc>:
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <malloc+0xc>)
 8009292:	4601      	mov	r1, r0
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	f000 bd59 	b.w	8009d4c <_malloc_r>
 800929a:	bf00      	nop
 800929c:	2000001c 	.word	0x2000001c

080092a0 <__ascii_mbtowc>:
 80092a0:	b082      	sub	sp, #8
 80092a2:	b901      	cbnz	r1, 80092a6 <__ascii_mbtowc+0x6>
 80092a4:	a901      	add	r1, sp, #4
 80092a6:	b142      	cbz	r2, 80092ba <__ascii_mbtowc+0x1a>
 80092a8:	b14b      	cbz	r3, 80092be <__ascii_mbtowc+0x1e>
 80092aa:	7813      	ldrb	r3, [r2, #0]
 80092ac:	600b      	str	r3, [r1, #0]
 80092ae:	7812      	ldrb	r2, [r2, #0]
 80092b0:	1e10      	subs	r0, r2, #0
 80092b2:	bf18      	it	ne
 80092b4:	2001      	movne	r0, #1
 80092b6:	b002      	add	sp, #8
 80092b8:	4770      	bx	lr
 80092ba:	4610      	mov	r0, r2
 80092bc:	e7fb      	b.n	80092b6 <__ascii_mbtowc+0x16>
 80092be:	f06f 0001 	mvn.w	r0, #1
 80092c2:	e7f8      	b.n	80092b6 <__ascii_mbtowc+0x16>

080092c4 <_Balloc>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092c8:	4604      	mov	r4, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	b976      	cbnz	r6, 80092ec <_Balloc+0x28>
 80092ce:	2010      	movs	r0, #16
 80092d0:	f7ff ffde 	bl	8009290 <malloc>
 80092d4:	4602      	mov	r2, r0
 80092d6:	6260      	str	r0, [r4, #36]	; 0x24
 80092d8:	b920      	cbnz	r0, 80092e4 <_Balloc+0x20>
 80092da:	4b18      	ldr	r3, [pc, #96]	; (800933c <_Balloc+0x78>)
 80092dc:	4818      	ldr	r0, [pc, #96]	; (8009340 <_Balloc+0x7c>)
 80092de:	2166      	movs	r1, #102	; 0x66
 80092e0:	f001 fb5a 	bl	800a998 <__assert_func>
 80092e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092e8:	6006      	str	r6, [r0, #0]
 80092ea:	60c6      	str	r6, [r0, #12]
 80092ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092ee:	68f3      	ldr	r3, [r6, #12]
 80092f0:	b183      	cbz	r3, 8009314 <_Balloc+0x50>
 80092f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092fa:	b9b8      	cbnz	r0, 800932c <_Balloc+0x68>
 80092fc:	2101      	movs	r1, #1
 80092fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009302:	1d72      	adds	r2, r6, #5
 8009304:	0092      	lsls	r2, r2, #2
 8009306:	4620      	mov	r0, r4
 8009308:	f000 fc9d 	bl	8009c46 <_calloc_r>
 800930c:	b160      	cbz	r0, 8009328 <_Balloc+0x64>
 800930e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009312:	e00e      	b.n	8009332 <_Balloc+0x6e>
 8009314:	2221      	movs	r2, #33	; 0x21
 8009316:	2104      	movs	r1, #4
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fc94 	bl	8009c46 <_calloc_r>
 800931e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009320:	60f0      	str	r0, [r6, #12]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e4      	bne.n	80092f2 <_Balloc+0x2e>
 8009328:	2000      	movs	r0, #0
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	6802      	ldr	r2, [r0, #0]
 800932e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009332:	2300      	movs	r3, #0
 8009334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009338:	e7f7      	b.n	800932a <_Balloc+0x66>
 800933a:	bf00      	nop
 800933c:	0800b73e 	.word	0x0800b73e
 8009340:	0800b83c 	.word	0x0800b83c

08009344 <_Bfree>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009348:	4605      	mov	r5, r0
 800934a:	460c      	mov	r4, r1
 800934c:	b976      	cbnz	r6, 800936c <_Bfree+0x28>
 800934e:	2010      	movs	r0, #16
 8009350:	f7ff ff9e 	bl	8009290 <malloc>
 8009354:	4602      	mov	r2, r0
 8009356:	6268      	str	r0, [r5, #36]	; 0x24
 8009358:	b920      	cbnz	r0, 8009364 <_Bfree+0x20>
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <_Bfree+0x3c>)
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <_Bfree+0x40>)
 800935e:	218a      	movs	r1, #138	; 0x8a
 8009360:	f001 fb1a 	bl	800a998 <__assert_func>
 8009364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009368:	6006      	str	r6, [r0, #0]
 800936a:	60c6      	str	r6, [r0, #12]
 800936c:	b13c      	cbz	r4, 800937e <_Bfree+0x3a>
 800936e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009370:	6862      	ldr	r2, [r4, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009378:	6021      	str	r1, [r4, #0]
 800937a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800937e:	bd70      	pop	{r4, r5, r6, pc}
 8009380:	0800b73e 	.word	0x0800b73e
 8009384:	0800b83c 	.word	0x0800b83c

08009388 <__multadd>:
 8009388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	690d      	ldr	r5, [r1, #16]
 800938e:	4607      	mov	r7, r0
 8009390:	460c      	mov	r4, r1
 8009392:	461e      	mov	r6, r3
 8009394:	f101 0c14 	add.w	ip, r1, #20
 8009398:	2000      	movs	r0, #0
 800939a:	f8dc 3000 	ldr.w	r3, [ip]
 800939e:	b299      	uxth	r1, r3
 80093a0:	fb02 6101 	mla	r1, r2, r1, r6
 80093a4:	0c1e      	lsrs	r6, r3, #16
 80093a6:	0c0b      	lsrs	r3, r1, #16
 80093a8:	fb02 3306 	mla	r3, r2, r6, r3
 80093ac:	b289      	uxth	r1, r1
 80093ae:	3001      	adds	r0, #1
 80093b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093b4:	4285      	cmp	r5, r0
 80093b6:	f84c 1b04 	str.w	r1, [ip], #4
 80093ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093be:	dcec      	bgt.n	800939a <__multadd+0x12>
 80093c0:	b30e      	cbz	r6, 8009406 <__multadd+0x7e>
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	42ab      	cmp	r3, r5
 80093c6:	dc19      	bgt.n	80093fc <__multadd+0x74>
 80093c8:	6861      	ldr	r1, [r4, #4]
 80093ca:	4638      	mov	r0, r7
 80093cc:	3101      	adds	r1, #1
 80093ce:	f7ff ff79 	bl	80092c4 <_Balloc>
 80093d2:	4680      	mov	r8, r0
 80093d4:	b928      	cbnz	r0, 80093e2 <__multadd+0x5a>
 80093d6:	4602      	mov	r2, r0
 80093d8:	4b0c      	ldr	r3, [pc, #48]	; (800940c <__multadd+0x84>)
 80093da:	480d      	ldr	r0, [pc, #52]	; (8009410 <__multadd+0x88>)
 80093dc:	21b5      	movs	r1, #181	; 0xb5
 80093de:	f001 fadb 	bl	800a998 <__assert_func>
 80093e2:	6922      	ldr	r2, [r4, #16]
 80093e4:	3202      	adds	r2, #2
 80093e6:	f104 010c 	add.w	r1, r4, #12
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	300c      	adds	r0, #12
 80093ee:	f7fc ff57 	bl	80062a0 <memcpy>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff ffa5 	bl	8009344 <_Bfree>
 80093fa:	4644      	mov	r4, r8
 80093fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009400:	3501      	adds	r5, #1
 8009402:	615e      	str	r6, [r3, #20]
 8009404:	6125      	str	r5, [r4, #16]
 8009406:	4620      	mov	r0, r4
 8009408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940c:	0800b7b0 	.word	0x0800b7b0
 8009410:	0800b83c 	.word	0x0800b83c

08009414 <__s2b>:
 8009414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009418:	460c      	mov	r4, r1
 800941a:	4615      	mov	r5, r2
 800941c:	461f      	mov	r7, r3
 800941e:	2209      	movs	r2, #9
 8009420:	3308      	adds	r3, #8
 8009422:	4606      	mov	r6, r0
 8009424:	fb93 f3f2 	sdiv	r3, r3, r2
 8009428:	2100      	movs	r1, #0
 800942a:	2201      	movs	r2, #1
 800942c:	429a      	cmp	r2, r3
 800942e:	db09      	blt.n	8009444 <__s2b+0x30>
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff ff47 	bl	80092c4 <_Balloc>
 8009436:	b940      	cbnz	r0, 800944a <__s2b+0x36>
 8009438:	4602      	mov	r2, r0
 800943a:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <__s2b+0x8c>)
 800943c:	4819      	ldr	r0, [pc, #100]	; (80094a4 <__s2b+0x90>)
 800943e:	21ce      	movs	r1, #206	; 0xce
 8009440:	f001 faaa 	bl	800a998 <__assert_func>
 8009444:	0052      	lsls	r2, r2, #1
 8009446:	3101      	adds	r1, #1
 8009448:	e7f0      	b.n	800942c <__s2b+0x18>
 800944a:	9b08      	ldr	r3, [sp, #32]
 800944c:	6143      	str	r3, [r0, #20]
 800944e:	2d09      	cmp	r5, #9
 8009450:	f04f 0301 	mov.w	r3, #1
 8009454:	6103      	str	r3, [r0, #16]
 8009456:	dd16      	ble.n	8009486 <__s2b+0x72>
 8009458:	f104 0909 	add.w	r9, r4, #9
 800945c:	46c8      	mov	r8, r9
 800945e:	442c      	add	r4, r5
 8009460:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009464:	4601      	mov	r1, r0
 8009466:	3b30      	subs	r3, #48	; 0x30
 8009468:	220a      	movs	r2, #10
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff ff8c 	bl	8009388 <__multadd>
 8009470:	45a0      	cmp	r8, r4
 8009472:	d1f5      	bne.n	8009460 <__s2b+0x4c>
 8009474:	f1a5 0408 	sub.w	r4, r5, #8
 8009478:	444c      	add	r4, r9
 800947a:	1b2d      	subs	r5, r5, r4
 800947c:	1963      	adds	r3, r4, r5
 800947e:	42bb      	cmp	r3, r7
 8009480:	db04      	blt.n	800948c <__s2b+0x78>
 8009482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009486:	340a      	adds	r4, #10
 8009488:	2509      	movs	r5, #9
 800948a:	e7f6      	b.n	800947a <__s2b+0x66>
 800948c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009490:	4601      	mov	r1, r0
 8009492:	3b30      	subs	r3, #48	; 0x30
 8009494:	220a      	movs	r2, #10
 8009496:	4630      	mov	r0, r6
 8009498:	f7ff ff76 	bl	8009388 <__multadd>
 800949c:	e7ee      	b.n	800947c <__s2b+0x68>
 800949e:	bf00      	nop
 80094a0:	0800b7b0 	.word	0x0800b7b0
 80094a4:	0800b83c 	.word	0x0800b83c

080094a8 <__hi0bits>:
 80094a8:	0c03      	lsrs	r3, r0, #16
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	b9d3      	cbnz	r3, 80094e4 <__hi0bits+0x3c>
 80094ae:	0400      	lsls	r0, r0, #16
 80094b0:	2310      	movs	r3, #16
 80094b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094b6:	bf04      	itt	eq
 80094b8:	0200      	lsleq	r0, r0, #8
 80094ba:	3308      	addeq	r3, #8
 80094bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094c0:	bf04      	itt	eq
 80094c2:	0100      	lsleq	r0, r0, #4
 80094c4:	3304      	addeq	r3, #4
 80094c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ca:	bf04      	itt	eq
 80094cc:	0080      	lsleq	r0, r0, #2
 80094ce:	3302      	addeq	r3, #2
 80094d0:	2800      	cmp	r0, #0
 80094d2:	db05      	blt.n	80094e0 <__hi0bits+0x38>
 80094d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094d8:	f103 0301 	add.w	r3, r3, #1
 80094dc:	bf08      	it	eq
 80094de:	2320      	moveq	r3, #32
 80094e0:	4618      	mov	r0, r3
 80094e2:	4770      	bx	lr
 80094e4:	2300      	movs	r3, #0
 80094e6:	e7e4      	b.n	80094b2 <__hi0bits+0xa>

080094e8 <__lo0bits>:
 80094e8:	6803      	ldr	r3, [r0, #0]
 80094ea:	f013 0207 	ands.w	r2, r3, #7
 80094ee:	4601      	mov	r1, r0
 80094f0:	d00b      	beq.n	800950a <__lo0bits+0x22>
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d423      	bmi.n	800953e <__lo0bits+0x56>
 80094f6:	0798      	lsls	r0, r3, #30
 80094f8:	bf49      	itett	mi
 80094fa:	085b      	lsrmi	r3, r3, #1
 80094fc:	089b      	lsrpl	r3, r3, #2
 80094fe:	2001      	movmi	r0, #1
 8009500:	600b      	strmi	r3, [r1, #0]
 8009502:	bf5c      	itt	pl
 8009504:	600b      	strpl	r3, [r1, #0]
 8009506:	2002      	movpl	r0, #2
 8009508:	4770      	bx	lr
 800950a:	b298      	uxth	r0, r3
 800950c:	b9a8      	cbnz	r0, 800953a <__lo0bits+0x52>
 800950e:	0c1b      	lsrs	r3, r3, #16
 8009510:	2010      	movs	r0, #16
 8009512:	b2da      	uxtb	r2, r3
 8009514:	b90a      	cbnz	r2, 800951a <__lo0bits+0x32>
 8009516:	3008      	adds	r0, #8
 8009518:	0a1b      	lsrs	r3, r3, #8
 800951a:	071a      	lsls	r2, r3, #28
 800951c:	bf04      	itt	eq
 800951e:	091b      	lsreq	r3, r3, #4
 8009520:	3004      	addeq	r0, #4
 8009522:	079a      	lsls	r2, r3, #30
 8009524:	bf04      	itt	eq
 8009526:	089b      	lsreq	r3, r3, #2
 8009528:	3002      	addeq	r0, #2
 800952a:	07da      	lsls	r2, r3, #31
 800952c:	d403      	bmi.n	8009536 <__lo0bits+0x4e>
 800952e:	085b      	lsrs	r3, r3, #1
 8009530:	f100 0001 	add.w	r0, r0, #1
 8009534:	d005      	beq.n	8009542 <__lo0bits+0x5a>
 8009536:	600b      	str	r3, [r1, #0]
 8009538:	4770      	bx	lr
 800953a:	4610      	mov	r0, r2
 800953c:	e7e9      	b.n	8009512 <__lo0bits+0x2a>
 800953e:	2000      	movs	r0, #0
 8009540:	4770      	bx	lr
 8009542:	2020      	movs	r0, #32
 8009544:	4770      	bx	lr
	...

08009548 <__i2b>:
 8009548:	b510      	push	{r4, lr}
 800954a:	460c      	mov	r4, r1
 800954c:	2101      	movs	r1, #1
 800954e:	f7ff feb9 	bl	80092c4 <_Balloc>
 8009552:	4602      	mov	r2, r0
 8009554:	b928      	cbnz	r0, 8009562 <__i2b+0x1a>
 8009556:	4b05      	ldr	r3, [pc, #20]	; (800956c <__i2b+0x24>)
 8009558:	4805      	ldr	r0, [pc, #20]	; (8009570 <__i2b+0x28>)
 800955a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800955e:	f001 fa1b 	bl	800a998 <__assert_func>
 8009562:	2301      	movs	r3, #1
 8009564:	6144      	str	r4, [r0, #20]
 8009566:	6103      	str	r3, [r0, #16]
 8009568:	bd10      	pop	{r4, pc}
 800956a:	bf00      	nop
 800956c:	0800b7b0 	.word	0x0800b7b0
 8009570:	0800b83c 	.word	0x0800b83c

08009574 <__multiply>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	4691      	mov	r9, r2
 800957a:	690a      	ldr	r2, [r1, #16]
 800957c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009580:	429a      	cmp	r2, r3
 8009582:	bfb8      	it	lt
 8009584:	460b      	movlt	r3, r1
 8009586:	460c      	mov	r4, r1
 8009588:	bfbc      	itt	lt
 800958a:	464c      	movlt	r4, r9
 800958c:	4699      	movlt	r9, r3
 800958e:	6927      	ldr	r7, [r4, #16]
 8009590:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009594:	68a3      	ldr	r3, [r4, #8]
 8009596:	6861      	ldr	r1, [r4, #4]
 8009598:	eb07 060a 	add.w	r6, r7, sl
 800959c:	42b3      	cmp	r3, r6
 800959e:	b085      	sub	sp, #20
 80095a0:	bfb8      	it	lt
 80095a2:	3101      	addlt	r1, #1
 80095a4:	f7ff fe8e 	bl	80092c4 <_Balloc>
 80095a8:	b930      	cbnz	r0, 80095b8 <__multiply+0x44>
 80095aa:	4602      	mov	r2, r0
 80095ac:	4b44      	ldr	r3, [pc, #272]	; (80096c0 <__multiply+0x14c>)
 80095ae:	4845      	ldr	r0, [pc, #276]	; (80096c4 <__multiply+0x150>)
 80095b0:	f240 115d 	movw	r1, #349	; 0x15d
 80095b4:	f001 f9f0 	bl	800a998 <__assert_func>
 80095b8:	f100 0514 	add.w	r5, r0, #20
 80095bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095c0:	462b      	mov	r3, r5
 80095c2:	2200      	movs	r2, #0
 80095c4:	4543      	cmp	r3, r8
 80095c6:	d321      	bcc.n	800960c <__multiply+0x98>
 80095c8:	f104 0314 	add.w	r3, r4, #20
 80095cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095d0:	f109 0314 	add.w	r3, r9, #20
 80095d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095d8:	9202      	str	r2, [sp, #8]
 80095da:	1b3a      	subs	r2, r7, r4
 80095dc:	3a15      	subs	r2, #21
 80095de:	f022 0203 	bic.w	r2, r2, #3
 80095e2:	3204      	adds	r2, #4
 80095e4:	f104 0115 	add.w	r1, r4, #21
 80095e8:	428f      	cmp	r7, r1
 80095ea:	bf38      	it	cc
 80095ec:	2204      	movcc	r2, #4
 80095ee:	9201      	str	r2, [sp, #4]
 80095f0:	9a02      	ldr	r2, [sp, #8]
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d80c      	bhi.n	8009612 <__multiply+0x9e>
 80095f8:	2e00      	cmp	r6, #0
 80095fa:	dd03      	ble.n	8009604 <__multiply+0x90>
 80095fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009600:	2b00      	cmp	r3, #0
 8009602:	d05a      	beq.n	80096ba <__multiply+0x146>
 8009604:	6106      	str	r6, [r0, #16]
 8009606:	b005      	add	sp, #20
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	f843 2b04 	str.w	r2, [r3], #4
 8009610:	e7d8      	b.n	80095c4 <__multiply+0x50>
 8009612:	f8b3 a000 	ldrh.w	sl, [r3]
 8009616:	f1ba 0f00 	cmp.w	sl, #0
 800961a:	d024      	beq.n	8009666 <__multiply+0xf2>
 800961c:	f104 0e14 	add.w	lr, r4, #20
 8009620:	46a9      	mov	r9, r5
 8009622:	f04f 0c00 	mov.w	ip, #0
 8009626:	f85e 2b04 	ldr.w	r2, [lr], #4
 800962a:	f8d9 1000 	ldr.w	r1, [r9]
 800962e:	fa1f fb82 	uxth.w	fp, r2
 8009632:	b289      	uxth	r1, r1
 8009634:	fb0a 110b 	mla	r1, sl, fp, r1
 8009638:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800963c:	f8d9 2000 	ldr.w	r2, [r9]
 8009640:	4461      	add	r1, ip
 8009642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009646:	fb0a c20b 	mla	r2, sl, fp, ip
 800964a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800964e:	b289      	uxth	r1, r1
 8009650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009654:	4577      	cmp	r7, lr
 8009656:	f849 1b04 	str.w	r1, [r9], #4
 800965a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800965e:	d8e2      	bhi.n	8009626 <__multiply+0xb2>
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	f845 c002 	str.w	ip, [r5, r2]
 8009666:	9a03      	ldr	r2, [sp, #12]
 8009668:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800966c:	3304      	adds	r3, #4
 800966e:	f1b9 0f00 	cmp.w	r9, #0
 8009672:	d020      	beq.n	80096b6 <__multiply+0x142>
 8009674:	6829      	ldr	r1, [r5, #0]
 8009676:	f104 0c14 	add.w	ip, r4, #20
 800967a:	46ae      	mov	lr, r5
 800967c:	f04f 0a00 	mov.w	sl, #0
 8009680:	f8bc b000 	ldrh.w	fp, [ip]
 8009684:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009688:	fb09 220b 	mla	r2, r9, fp, r2
 800968c:	4492      	add	sl, r2
 800968e:	b289      	uxth	r1, r1
 8009690:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009694:	f84e 1b04 	str.w	r1, [lr], #4
 8009698:	f85c 2b04 	ldr.w	r2, [ip], #4
 800969c:	f8be 1000 	ldrh.w	r1, [lr]
 80096a0:	0c12      	lsrs	r2, r2, #16
 80096a2:	fb09 1102 	mla	r1, r9, r2, r1
 80096a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096aa:	4567      	cmp	r7, ip
 80096ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096b0:	d8e6      	bhi.n	8009680 <__multiply+0x10c>
 80096b2:	9a01      	ldr	r2, [sp, #4]
 80096b4:	50a9      	str	r1, [r5, r2]
 80096b6:	3504      	adds	r5, #4
 80096b8:	e79a      	b.n	80095f0 <__multiply+0x7c>
 80096ba:	3e01      	subs	r6, #1
 80096bc:	e79c      	b.n	80095f8 <__multiply+0x84>
 80096be:	bf00      	nop
 80096c0:	0800b7b0 	.word	0x0800b7b0
 80096c4:	0800b83c 	.word	0x0800b83c

080096c8 <__pow5mult>:
 80096c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	4615      	mov	r5, r2
 80096ce:	f012 0203 	ands.w	r2, r2, #3
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	d007      	beq.n	80096e8 <__pow5mult+0x20>
 80096d8:	4c25      	ldr	r4, [pc, #148]	; (8009770 <__pow5mult+0xa8>)
 80096da:	3a01      	subs	r2, #1
 80096dc:	2300      	movs	r3, #0
 80096de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096e2:	f7ff fe51 	bl	8009388 <__multadd>
 80096e6:	4607      	mov	r7, r0
 80096e8:	10ad      	asrs	r5, r5, #2
 80096ea:	d03d      	beq.n	8009768 <__pow5mult+0xa0>
 80096ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096ee:	b97c      	cbnz	r4, 8009710 <__pow5mult+0x48>
 80096f0:	2010      	movs	r0, #16
 80096f2:	f7ff fdcd 	bl	8009290 <malloc>
 80096f6:	4602      	mov	r2, r0
 80096f8:	6270      	str	r0, [r6, #36]	; 0x24
 80096fa:	b928      	cbnz	r0, 8009708 <__pow5mult+0x40>
 80096fc:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <__pow5mult+0xac>)
 80096fe:	481e      	ldr	r0, [pc, #120]	; (8009778 <__pow5mult+0xb0>)
 8009700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009704:	f001 f948 	bl	800a998 <__assert_func>
 8009708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800970c:	6004      	str	r4, [r0, #0]
 800970e:	60c4      	str	r4, [r0, #12]
 8009710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009718:	b94c      	cbnz	r4, 800972e <__pow5mult+0x66>
 800971a:	f240 2171 	movw	r1, #625	; 0x271
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff ff12 	bl	8009548 <__i2b>
 8009724:	2300      	movs	r3, #0
 8009726:	f8c8 0008 	str.w	r0, [r8, #8]
 800972a:	4604      	mov	r4, r0
 800972c:	6003      	str	r3, [r0, #0]
 800972e:	f04f 0900 	mov.w	r9, #0
 8009732:	07eb      	lsls	r3, r5, #31
 8009734:	d50a      	bpl.n	800974c <__pow5mult+0x84>
 8009736:	4639      	mov	r1, r7
 8009738:	4622      	mov	r2, r4
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ff1a 	bl	8009574 <__multiply>
 8009740:	4639      	mov	r1, r7
 8009742:	4680      	mov	r8, r0
 8009744:	4630      	mov	r0, r6
 8009746:	f7ff fdfd 	bl	8009344 <_Bfree>
 800974a:	4647      	mov	r7, r8
 800974c:	106d      	asrs	r5, r5, #1
 800974e:	d00b      	beq.n	8009768 <__pow5mult+0xa0>
 8009750:	6820      	ldr	r0, [r4, #0]
 8009752:	b938      	cbnz	r0, 8009764 <__pow5mult+0x9c>
 8009754:	4622      	mov	r2, r4
 8009756:	4621      	mov	r1, r4
 8009758:	4630      	mov	r0, r6
 800975a:	f7ff ff0b 	bl	8009574 <__multiply>
 800975e:	6020      	str	r0, [r4, #0]
 8009760:	f8c0 9000 	str.w	r9, [r0]
 8009764:	4604      	mov	r4, r0
 8009766:	e7e4      	b.n	8009732 <__pow5mult+0x6a>
 8009768:	4638      	mov	r0, r7
 800976a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800976e:	bf00      	nop
 8009770:	0800b988 	.word	0x0800b988
 8009774:	0800b73e 	.word	0x0800b73e
 8009778:	0800b83c 	.word	0x0800b83c

0800977c <__lshift>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	460c      	mov	r4, r1
 8009782:	6849      	ldr	r1, [r1, #4]
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	4607      	mov	r7, r0
 800978e:	4691      	mov	r9, r2
 8009790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009794:	f108 0601 	add.w	r6, r8, #1
 8009798:	42b3      	cmp	r3, r6
 800979a:	db0b      	blt.n	80097b4 <__lshift+0x38>
 800979c:	4638      	mov	r0, r7
 800979e:	f7ff fd91 	bl	80092c4 <_Balloc>
 80097a2:	4605      	mov	r5, r0
 80097a4:	b948      	cbnz	r0, 80097ba <__lshift+0x3e>
 80097a6:	4602      	mov	r2, r0
 80097a8:	4b2a      	ldr	r3, [pc, #168]	; (8009854 <__lshift+0xd8>)
 80097aa:	482b      	ldr	r0, [pc, #172]	; (8009858 <__lshift+0xdc>)
 80097ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097b0:	f001 f8f2 	bl	800a998 <__assert_func>
 80097b4:	3101      	adds	r1, #1
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	e7ee      	b.n	8009798 <__lshift+0x1c>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f100 0114 	add.w	r1, r0, #20
 80097c0:	f100 0210 	add.w	r2, r0, #16
 80097c4:	4618      	mov	r0, r3
 80097c6:	4553      	cmp	r3, sl
 80097c8:	db37      	blt.n	800983a <__lshift+0xbe>
 80097ca:	6920      	ldr	r0, [r4, #16]
 80097cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097d0:	f104 0314 	add.w	r3, r4, #20
 80097d4:	f019 091f 	ands.w	r9, r9, #31
 80097d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097e0:	d02f      	beq.n	8009842 <__lshift+0xc6>
 80097e2:	f1c9 0e20 	rsb	lr, r9, #32
 80097e6:	468a      	mov	sl, r1
 80097e8:	f04f 0c00 	mov.w	ip, #0
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	fa02 f209 	lsl.w	r2, r2, r9
 80097f2:	ea42 020c 	orr.w	r2, r2, ip
 80097f6:	f84a 2b04 	str.w	r2, [sl], #4
 80097fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fe:	4298      	cmp	r0, r3
 8009800:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009804:	d8f2      	bhi.n	80097ec <__lshift+0x70>
 8009806:	1b03      	subs	r3, r0, r4
 8009808:	3b15      	subs	r3, #21
 800980a:	f023 0303 	bic.w	r3, r3, #3
 800980e:	3304      	adds	r3, #4
 8009810:	f104 0215 	add.w	r2, r4, #21
 8009814:	4290      	cmp	r0, r2
 8009816:	bf38      	it	cc
 8009818:	2304      	movcc	r3, #4
 800981a:	f841 c003 	str.w	ip, [r1, r3]
 800981e:	f1bc 0f00 	cmp.w	ip, #0
 8009822:	d001      	beq.n	8009828 <__lshift+0xac>
 8009824:	f108 0602 	add.w	r6, r8, #2
 8009828:	3e01      	subs	r6, #1
 800982a:	4638      	mov	r0, r7
 800982c:	612e      	str	r6, [r5, #16]
 800982e:	4621      	mov	r1, r4
 8009830:	f7ff fd88 	bl	8009344 <_Bfree>
 8009834:	4628      	mov	r0, r5
 8009836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983a:	f842 0f04 	str.w	r0, [r2, #4]!
 800983e:	3301      	adds	r3, #1
 8009840:	e7c1      	b.n	80097c6 <__lshift+0x4a>
 8009842:	3904      	subs	r1, #4
 8009844:	f853 2b04 	ldr.w	r2, [r3], #4
 8009848:	f841 2f04 	str.w	r2, [r1, #4]!
 800984c:	4298      	cmp	r0, r3
 800984e:	d8f9      	bhi.n	8009844 <__lshift+0xc8>
 8009850:	e7ea      	b.n	8009828 <__lshift+0xac>
 8009852:	bf00      	nop
 8009854:	0800b7b0 	.word	0x0800b7b0
 8009858:	0800b83c 	.word	0x0800b83c

0800985c <__mcmp>:
 800985c:	b530      	push	{r4, r5, lr}
 800985e:	6902      	ldr	r2, [r0, #16]
 8009860:	690c      	ldr	r4, [r1, #16]
 8009862:	1b12      	subs	r2, r2, r4
 8009864:	d10e      	bne.n	8009884 <__mcmp+0x28>
 8009866:	f100 0314 	add.w	r3, r0, #20
 800986a:	3114      	adds	r1, #20
 800986c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800987c:	42a5      	cmp	r5, r4
 800987e:	d003      	beq.n	8009888 <__mcmp+0x2c>
 8009880:	d305      	bcc.n	800988e <__mcmp+0x32>
 8009882:	2201      	movs	r2, #1
 8009884:	4610      	mov	r0, r2
 8009886:	bd30      	pop	{r4, r5, pc}
 8009888:	4283      	cmp	r3, r0
 800988a:	d3f3      	bcc.n	8009874 <__mcmp+0x18>
 800988c:	e7fa      	b.n	8009884 <__mcmp+0x28>
 800988e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009892:	e7f7      	b.n	8009884 <__mcmp+0x28>

08009894 <__mdiff>:
 8009894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	460c      	mov	r4, r1
 800989a:	4606      	mov	r6, r0
 800989c:	4611      	mov	r1, r2
 800989e:	4620      	mov	r0, r4
 80098a0:	4690      	mov	r8, r2
 80098a2:	f7ff ffdb 	bl	800985c <__mcmp>
 80098a6:	1e05      	subs	r5, r0, #0
 80098a8:	d110      	bne.n	80098cc <__mdiff+0x38>
 80098aa:	4629      	mov	r1, r5
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7ff fd09 	bl	80092c4 <_Balloc>
 80098b2:	b930      	cbnz	r0, 80098c2 <__mdiff+0x2e>
 80098b4:	4b3a      	ldr	r3, [pc, #232]	; (80099a0 <__mdiff+0x10c>)
 80098b6:	4602      	mov	r2, r0
 80098b8:	f240 2132 	movw	r1, #562	; 0x232
 80098bc:	4839      	ldr	r0, [pc, #228]	; (80099a4 <__mdiff+0x110>)
 80098be:	f001 f86b 	bl	800a998 <__assert_func>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	bfa4      	itt	ge
 80098ce:	4643      	movge	r3, r8
 80098d0:	46a0      	movge	r8, r4
 80098d2:	4630      	mov	r0, r6
 80098d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098d8:	bfa6      	itte	ge
 80098da:	461c      	movge	r4, r3
 80098dc:	2500      	movge	r5, #0
 80098de:	2501      	movlt	r5, #1
 80098e0:	f7ff fcf0 	bl	80092c4 <_Balloc>
 80098e4:	b920      	cbnz	r0, 80098f0 <__mdiff+0x5c>
 80098e6:	4b2e      	ldr	r3, [pc, #184]	; (80099a0 <__mdiff+0x10c>)
 80098e8:	4602      	mov	r2, r0
 80098ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098ee:	e7e5      	b.n	80098bc <__mdiff+0x28>
 80098f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098f4:	6926      	ldr	r6, [r4, #16]
 80098f6:	60c5      	str	r5, [r0, #12]
 80098f8:	f104 0914 	add.w	r9, r4, #20
 80098fc:	f108 0514 	add.w	r5, r8, #20
 8009900:	f100 0e14 	add.w	lr, r0, #20
 8009904:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009908:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800990c:	f108 0210 	add.w	r2, r8, #16
 8009910:	46f2      	mov	sl, lr
 8009912:	2100      	movs	r1, #0
 8009914:	f859 3b04 	ldr.w	r3, [r9], #4
 8009918:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800991c:	fa1f f883 	uxth.w	r8, r3
 8009920:	fa11 f18b 	uxtah	r1, r1, fp
 8009924:	0c1b      	lsrs	r3, r3, #16
 8009926:	eba1 0808 	sub.w	r8, r1, r8
 800992a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800992e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009932:	fa1f f888 	uxth.w	r8, r8
 8009936:	1419      	asrs	r1, r3, #16
 8009938:	454e      	cmp	r6, r9
 800993a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800993e:	f84a 3b04 	str.w	r3, [sl], #4
 8009942:	d8e7      	bhi.n	8009914 <__mdiff+0x80>
 8009944:	1b33      	subs	r3, r6, r4
 8009946:	3b15      	subs	r3, #21
 8009948:	f023 0303 	bic.w	r3, r3, #3
 800994c:	3304      	adds	r3, #4
 800994e:	3415      	adds	r4, #21
 8009950:	42a6      	cmp	r6, r4
 8009952:	bf38      	it	cc
 8009954:	2304      	movcc	r3, #4
 8009956:	441d      	add	r5, r3
 8009958:	4473      	add	r3, lr
 800995a:	469e      	mov	lr, r3
 800995c:	462e      	mov	r6, r5
 800995e:	4566      	cmp	r6, ip
 8009960:	d30e      	bcc.n	8009980 <__mdiff+0xec>
 8009962:	f10c 0203 	add.w	r2, ip, #3
 8009966:	1b52      	subs	r2, r2, r5
 8009968:	f022 0203 	bic.w	r2, r2, #3
 800996c:	3d03      	subs	r5, #3
 800996e:	45ac      	cmp	ip, r5
 8009970:	bf38      	it	cc
 8009972:	2200      	movcc	r2, #0
 8009974:	441a      	add	r2, r3
 8009976:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800997a:	b17b      	cbz	r3, 800999c <__mdiff+0x108>
 800997c:	6107      	str	r7, [r0, #16]
 800997e:	e7a3      	b.n	80098c8 <__mdiff+0x34>
 8009980:	f856 8b04 	ldr.w	r8, [r6], #4
 8009984:	fa11 f288 	uxtah	r2, r1, r8
 8009988:	1414      	asrs	r4, r2, #16
 800998a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800998e:	b292      	uxth	r2, r2
 8009990:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009994:	f84e 2b04 	str.w	r2, [lr], #4
 8009998:	1421      	asrs	r1, r4, #16
 800999a:	e7e0      	b.n	800995e <__mdiff+0xca>
 800999c:	3f01      	subs	r7, #1
 800999e:	e7ea      	b.n	8009976 <__mdiff+0xe2>
 80099a0:	0800b7b0 	.word	0x0800b7b0
 80099a4:	0800b83c 	.word	0x0800b83c

080099a8 <__ulp>:
 80099a8:	b082      	sub	sp, #8
 80099aa:	ed8d 0b00 	vstr	d0, [sp]
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	4912      	ldr	r1, [pc, #72]	; (80099fc <__ulp+0x54>)
 80099b2:	4019      	ands	r1, r3
 80099b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80099b8:	2900      	cmp	r1, #0
 80099ba:	dd05      	ble.n	80099c8 <__ulp+0x20>
 80099bc:	2200      	movs	r2, #0
 80099be:	460b      	mov	r3, r1
 80099c0:	ec43 2b10 	vmov	d0, r2, r3
 80099c4:	b002      	add	sp, #8
 80099c6:	4770      	bx	lr
 80099c8:	4249      	negs	r1, r1
 80099ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80099ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	da04      	bge.n	80099e6 <__ulp+0x3e>
 80099dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099e0:	fa41 f300 	asr.w	r3, r1, r0
 80099e4:	e7ec      	b.n	80099c0 <__ulp+0x18>
 80099e6:	f1a0 0114 	sub.w	r1, r0, #20
 80099ea:	291e      	cmp	r1, #30
 80099ec:	bfda      	itte	le
 80099ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099f2:	fa20 f101 	lsrle.w	r1, r0, r1
 80099f6:	2101      	movgt	r1, #1
 80099f8:	460a      	mov	r2, r1
 80099fa:	e7e1      	b.n	80099c0 <__ulp+0x18>
 80099fc:	7ff00000 	.word	0x7ff00000

08009a00 <__b2d>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	6905      	ldr	r5, [r0, #16]
 8009a04:	f100 0714 	add.w	r7, r0, #20
 8009a08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009a0c:	1f2e      	subs	r6, r5, #4
 8009a0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009a12:	4620      	mov	r0, r4
 8009a14:	f7ff fd48 	bl	80094a8 <__hi0bits>
 8009a18:	f1c0 0320 	rsb	r3, r0, #32
 8009a1c:	280a      	cmp	r0, #10
 8009a1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a9c <__b2d+0x9c>
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	dc14      	bgt.n	8009a50 <__b2d+0x50>
 8009a26:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a2e:	42b7      	cmp	r7, r6
 8009a30:	ea41 030c 	orr.w	r3, r1, ip
 8009a34:	bf34      	ite	cc
 8009a36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a3a:	2100      	movcs	r1, #0
 8009a3c:	3015      	adds	r0, #21
 8009a3e:	fa04 f000 	lsl.w	r0, r4, r0
 8009a42:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a46:	ea40 0201 	orr.w	r2, r0, r1
 8009a4a:	ec43 2b10 	vmov	d0, r2, r3
 8009a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a50:	42b7      	cmp	r7, r6
 8009a52:	bf3a      	itte	cc
 8009a54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a58:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a5c:	2100      	movcs	r1, #0
 8009a5e:	380b      	subs	r0, #11
 8009a60:	d017      	beq.n	8009a92 <__b2d+0x92>
 8009a62:	f1c0 0c20 	rsb	ip, r0, #32
 8009a66:	fa04 f500 	lsl.w	r5, r4, r0
 8009a6a:	42be      	cmp	r6, r7
 8009a6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a70:	ea45 0504 	orr.w	r5, r5, r4
 8009a74:	bf8c      	ite	hi
 8009a76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a7a:	2400      	movls	r4, #0
 8009a7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a80:	fa01 f000 	lsl.w	r0, r1, r0
 8009a84:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a8c:	ea40 0204 	orr.w	r2, r0, r4
 8009a90:	e7db      	b.n	8009a4a <__b2d+0x4a>
 8009a92:	ea44 030c 	orr.w	r3, r4, ip
 8009a96:	460a      	mov	r2, r1
 8009a98:	e7d7      	b.n	8009a4a <__b2d+0x4a>
 8009a9a:	bf00      	nop
 8009a9c:	3ff00000 	.word	0x3ff00000

08009aa0 <__d2b>:
 8009aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009aa4:	4689      	mov	r9, r1
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	ec57 6b10 	vmov	r6, r7, d0
 8009aac:	4690      	mov	r8, r2
 8009aae:	f7ff fc09 	bl	80092c4 <_Balloc>
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	b930      	cbnz	r0, 8009ac4 <__d2b+0x24>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <__d2b+0xb0>)
 8009aba:	4826      	ldr	r0, [pc, #152]	; (8009b54 <__d2b+0xb4>)
 8009abc:	f240 310a 	movw	r1, #778	; 0x30a
 8009ac0:	f000 ff6a 	bl	800a998 <__assert_func>
 8009ac4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009acc:	bb35      	cbnz	r5, 8009b1c <__d2b+0x7c>
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	d028      	beq.n	8009b26 <__d2b+0x86>
 8009ad4:	4668      	mov	r0, sp
 8009ad6:	9600      	str	r6, [sp, #0]
 8009ad8:	f7ff fd06 	bl	80094e8 <__lo0bits>
 8009adc:	9900      	ldr	r1, [sp, #0]
 8009ade:	b300      	cbz	r0, 8009b22 <__d2b+0x82>
 8009ae0:	9a01      	ldr	r2, [sp, #4]
 8009ae2:	f1c0 0320 	rsb	r3, r0, #32
 8009ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aea:	430b      	orrs	r3, r1
 8009aec:	40c2      	lsrs	r2, r0
 8009aee:	6163      	str	r3, [r4, #20]
 8009af0:	9201      	str	r2, [sp, #4]
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	61a3      	str	r3, [r4, #24]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bf14      	ite	ne
 8009afa:	2202      	movne	r2, #2
 8009afc:	2201      	moveq	r2, #1
 8009afe:	6122      	str	r2, [r4, #16]
 8009b00:	b1d5      	cbz	r5, 8009b38 <__d2b+0x98>
 8009b02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b06:	4405      	add	r5, r0
 8009b08:	f8c9 5000 	str.w	r5, [r9]
 8009b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b10:	f8c8 0000 	str.w	r0, [r8]
 8009b14:	4620      	mov	r0, r4
 8009b16:	b003      	add	sp, #12
 8009b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b20:	e7d5      	b.n	8009ace <__d2b+0x2e>
 8009b22:	6161      	str	r1, [r4, #20]
 8009b24:	e7e5      	b.n	8009af2 <__d2b+0x52>
 8009b26:	a801      	add	r0, sp, #4
 8009b28:	f7ff fcde 	bl	80094e8 <__lo0bits>
 8009b2c:	9b01      	ldr	r3, [sp, #4]
 8009b2e:	6163      	str	r3, [r4, #20]
 8009b30:	2201      	movs	r2, #1
 8009b32:	6122      	str	r2, [r4, #16]
 8009b34:	3020      	adds	r0, #32
 8009b36:	e7e3      	b.n	8009b00 <__d2b+0x60>
 8009b38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b40:	f8c9 0000 	str.w	r0, [r9]
 8009b44:	6918      	ldr	r0, [r3, #16]
 8009b46:	f7ff fcaf 	bl	80094a8 <__hi0bits>
 8009b4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b4e:	e7df      	b.n	8009b10 <__d2b+0x70>
 8009b50:	0800b7b0 	.word	0x0800b7b0
 8009b54:	0800b83c 	.word	0x0800b83c

08009b58 <__ratio>:
 8009b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	4688      	mov	r8, r1
 8009b5e:	4669      	mov	r1, sp
 8009b60:	4681      	mov	r9, r0
 8009b62:	f7ff ff4d 	bl	8009a00 <__b2d>
 8009b66:	a901      	add	r1, sp, #4
 8009b68:	4640      	mov	r0, r8
 8009b6a:	ec55 4b10 	vmov	r4, r5, d0
 8009b6e:	f7ff ff47 	bl	8009a00 <__b2d>
 8009b72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b7a:	eba3 0c02 	sub.w	ip, r3, r2
 8009b7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b88:	ec51 0b10 	vmov	r0, r1, d0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfd6      	itet	le
 8009b90:	460a      	movle	r2, r1
 8009b92:	462a      	movgt	r2, r5
 8009b94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b98:	468b      	mov	fp, r1
 8009b9a:	462f      	mov	r7, r5
 8009b9c:	bfd4      	ite	le
 8009b9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ba2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	ee10 2a10 	vmov	r2, s0
 8009bac:	465b      	mov	r3, fp
 8009bae:	4639      	mov	r1, r7
 8009bb0:	f7f6 fe5c 	bl	800086c <__aeabi_ddiv>
 8009bb4:	ec41 0b10 	vmov	d0, r0, r1
 8009bb8:	b003      	add	sp, #12
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bbe <__copybits>:
 8009bbe:	3901      	subs	r1, #1
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	1149      	asrs	r1, r1, #5
 8009bc4:	6914      	ldr	r4, [r2, #16]
 8009bc6:	3101      	adds	r1, #1
 8009bc8:	f102 0314 	add.w	r3, r2, #20
 8009bcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bd4:	1f05      	subs	r5, r0, #4
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	d30c      	bcc.n	8009bf4 <__copybits+0x36>
 8009bda:	1aa3      	subs	r3, r4, r2
 8009bdc:	3b11      	subs	r3, #17
 8009bde:	f023 0303 	bic.w	r3, r3, #3
 8009be2:	3211      	adds	r2, #17
 8009be4:	42a2      	cmp	r2, r4
 8009be6:	bf88      	it	hi
 8009be8:	2300      	movhi	r3, #0
 8009bea:	4418      	add	r0, r3
 8009bec:	2300      	movs	r3, #0
 8009bee:	4288      	cmp	r0, r1
 8009bf0:	d305      	bcc.n	8009bfe <__copybits+0x40>
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
 8009bf4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bf8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bfc:	e7eb      	b.n	8009bd6 <__copybits+0x18>
 8009bfe:	f840 3b04 	str.w	r3, [r0], #4
 8009c02:	e7f4      	b.n	8009bee <__copybits+0x30>

08009c04 <__any_on>:
 8009c04:	f100 0214 	add.w	r2, r0, #20
 8009c08:	6900      	ldr	r0, [r0, #16]
 8009c0a:	114b      	asrs	r3, r1, #5
 8009c0c:	4298      	cmp	r0, r3
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	db11      	blt.n	8009c36 <__any_on+0x32>
 8009c12:	dd0a      	ble.n	8009c2a <__any_on+0x26>
 8009c14:	f011 011f 	ands.w	r1, r1, #31
 8009c18:	d007      	beq.n	8009c2a <__any_on+0x26>
 8009c1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c1e:	fa24 f001 	lsr.w	r0, r4, r1
 8009c22:	fa00 f101 	lsl.w	r1, r0, r1
 8009c26:	428c      	cmp	r4, r1
 8009c28:	d10b      	bne.n	8009c42 <__any_on+0x3e>
 8009c2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d803      	bhi.n	8009c3a <__any_on+0x36>
 8009c32:	2000      	movs	r0, #0
 8009c34:	bd10      	pop	{r4, pc}
 8009c36:	4603      	mov	r3, r0
 8009c38:	e7f7      	b.n	8009c2a <__any_on+0x26>
 8009c3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	d0f5      	beq.n	8009c2e <__any_on+0x2a>
 8009c42:	2001      	movs	r0, #1
 8009c44:	e7f6      	b.n	8009c34 <__any_on+0x30>

08009c46 <_calloc_r>:
 8009c46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c48:	fba1 2402 	umull	r2, r4, r1, r2
 8009c4c:	b94c      	cbnz	r4, 8009c62 <_calloc_r+0x1c>
 8009c4e:	4611      	mov	r1, r2
 8009c50:	9201      	str	r2, [sp, #4]
 8009c52:	f000 f87b 	bl	8009d4c <_malloc_r>
 8009c56:	9a01      	ldr	r2, [sp, #4]
 8009c58:	4605      	mov	r5, r0
 8009c5a:	b930      	cbnz	r0, 8009c6a <_calloc_r+0x24>
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	b003      	add	sp, #12
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	220c      	movs	r2, #12
 8009c64:	6002      	str	r2, [r0, #0]
 8009c66:	2500      	movs	r5, #0
 8009c68:	e7f8      	b.n	8009c5c <_calloc_r+0x16>
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	f7fc fb26 	bl	80062bc <memset>
 8009c70:	e7f4      	b.n	8009c5c <_calloc_r+0x16>
	...

08009c74 <_free_r>:
 8009c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c76:	2900      	cmp	r1, #0
 8009c78:	d044      	beq.n	8009d04 <_free_r+0x90>
 8009c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c7e:	9001      	str	r0, [sp, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f1a1 0404 	sub.w	r4, r1, #4
 8009c86:	bfb8      	it	lt
 8009c88:	18e4      	addlt	r4, r4, r3
 8009c8a:	f001 f889 	bl	800ada0 <__malloc_lock>
 8009c8e:	4a1e      	ldr	r2, [pc, #120]	; (8009d08 <_free_r+0x94>)
 8009c90:	9801      	ldr	r0, [sp, #4]
 8009c92:	6813      	ldr	r3, [r2, #0]
 8009c94:	b933      	cbnz	r3, 8009ca4 <_free_r+0x30>
 8009c96:	6063      	str	r3, [r4, #4]
 8009c98:	6014      	str	r4, [r2, #0]
 8009c9a:	b003      	add	sp, #12
 8009c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ca0:	f001 b884 	b.w	800adac <__malloc_unlock>
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	d908      	bls.n	8009cba <_free_r+0x46>
 8009ca8:	6825      	ldr	r5, [r4, #0]
 8009caa:	1961      	adds	r1, r4, r5
 8009cac:	428b      	cmp	r3, r1
 8009cae:	bf01      	itttt	eq
 8009cb0:	6819      	ldreq	r1, [r3, #0]
 8009cb2:	685b      	ldreq	r3, [r3, #4]
 8009cb4:	1949      	addeq	r1, r1, r5
 8009cb6:	6021      	streq	r1, [r4, #0]
 8009cb8:	e7ed      	b.n	8009c96 <_free_r+0x22>
 8009cba:	461a      	mov	r2, r3
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	b10b      	cbz	r3, 8009cc4 <_free_r+0x50>
 8009cc0:	42a3      	cmp	r3, r4
 8009cc2:	d9fa      	bls.n	8009cba <_free_r+0x46>
 8009cc4:	6811      	ldr	r1, [r2, #0]
 8009cc6:	1855      	adds	r5, r2, r1
 8009cc8:	42a5      	cmp	r5, r4
 8009cca:	d10b      	bne.n	8009ce4 <_free_r+0x70>
 8009ccc:	6824      	ldr	r4, [r4, #0]
 8009cce:	4421      	add	r1, r4
 8009cd0:	1854      	adds	r4, r2, r1
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	6011      	str	r1, [r2, #0]
 8009cd6:	d1e0      	bne.n	8009c9a <_free_r+0x26>
 8009cd8:	681c      	ldr	r4, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	6053      	str	r3, [r2, #4]
 8009cde:	4421      	add	r1, r4
 8009ce0:	6011      	str	r1, [r2, #0]
 8009ce2:	e7da      	b.n	8009c9a <_free_r+0x26>
 8009ce4:	d902      	bls.n	8009cec <_free_r+0x78>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	e7d6      	b.n	8009c9a <_free_r+0x26>
 8009cec:	6825      	ldr	r5, [r4, #0]
 8009cee:	1961      	adds	r1, r4, r5
 8009cf0:	428b      	cmp	r3, r1
 8009cf2:	bf04      	itt	eq
 8009cf4:	6819      	ldreq	r1, [r3, #0]
 8009cf6:	685b      	ldreq	r3, [r3, #4]
 8009cf8:	6063      	str	r3, [r4, #4]
 8009cfa:	bf04      	itt	eq
 8009cfc:	1949      	addeq	r1, r1, r5
 8009cfe:	6021      	streq	r1, [r4, #0]
 8009d00:	6054      	str	r4, [r2, #4]
 8009d02:	e7ca      	b.n	8009c9a <_free_r+0x26>
 8009d04:	b003      	add	sp, #12
 8009d06:	bd30      	pop	{r4, r5, pc}
 8009d08:	2000074c 	.word	0x2000074c

08009d0c <sbrk_aligned>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	4e0e      	ldr	r6, [pc, #56]	; (8009d48 <sbrk_aligned+0x3c>)
 8009d10:	460c      	mov	r4, r1
 8009d12:	6831      	ldr	r1, [r6, #0]
 8009d14:	4605      	mov	r5, r0
 8009d16:	b911      	cbnz	r1, 8009d1e <sbrk_aligned+0x12>
 8009d18:	f000 fd26 	bl	800a768 <_sbrk_r>
 8009d1c:	6030      	str	r0, [r6, #0]
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4628      	mov	r0, r5
 8009d22:	f000 fd21 	bl	800a768 <_sbrk_r>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	d00a      	beq.n	8009d40 <sbrk_aligned+0x34>
 8009d2a:	1cc4      	adds	r4, r0, #3
 8009d2c:	f024 0403 	bic.w	r4, r4, #3
 8009d30:	42a0      	cmp	r0, r4
 8009d32:	d007      	beq.n	8009d44 <sbrk_aligned+0x38>
 8009d34:	1a21      	subs	r1, r4, r0
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 fd16 	bl	800a768 <_sbrk_r>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d101      	bne.n	8009d44 <sbrk_aligned+0x38>
 8009d40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d44:	4620      	mov	r0, r4
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	20000750 	.word	0x20000750

08009d4c <_malloc_r>:
 8009d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d50:	1ccd      	adds	r5, r1, #3
 8009d52:	f025 0503 	bic.w	r5, r5, #3
 8009d56:	3508      	adds	r5, #8
 8009d58:	2d0c      	cmp	r5, #12
 8009d5a:	bf38      	it	cc
 8009d5c:	250c      	movcc	r5, #12
 8009d5e:	2d00      	cmp	r5, #0
 8009d60:	4607      	mov	r7, r0
 8009d62:	db01      	blt.n	8009d68 <_malloc_r+0x1c>
 8009d64:	42a9      	cmp	r1, r5
 8009d66:	d905      	bls.n	8009d74 <_malloc_r+0x28>
 8009d68:	230c      	movs	r3, #12
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	2600      	movs	r6, #0
 8009d6e:	4630      	mov	r0, r6
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	4e2e      	ldr	r6, [pc, #184]	; (8009e30 <_malloc_r+0xe4>)
 8009d76:	f001 f813 	bl	800ada0 <__malloc_lock>
 8009d7a:	6833      	ldr	r3, [r6, #0]
 8009d7c:	461c      	mov	r4, r3
 8009d7e:	bb34      	cbnz	r4, 8009dce <_malloc_r+0x82>
 8009d80:	4629      	mov	r1, r5
 8009d82:	4638      	mov	r0, r7
 8009d84:	f7ff ffc2 	bl	8009d0c <sbrk_aligned>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	d14d      	bne.n	8009e2a <_malloc_r+0xde>
 8009d8e:	6834      	ldr	r4, [r6, #0]
 8009d90:	4626      	mov	r6, r4
 8009d92:	2e00      	cmp	r6, #0
 8009d94:	d140      	bne.n	8009e18 <_malloc_r+0xcc>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	eb04 0803 	add.w	r8, r4, r3
 8009da0:	f000 fce2 	bl	800a768 <_sbrk_r>
 8009da4:	4580      	cmp	r8, r0
 8009da6:	d13a      	bne.n	8009e1e <_malloc_r+0xd2>
 8009da8:	6821      	ldr	r1, [r4, #0]
 8009daa:	3503      	adds	r5, #3
 8009dac:	1a6d      	subs	r5, r5, r1
 8009dae:	f025 0503 	bic.w	r5, r5, #3
 8009db2:	3508      	adds	r5, #8
 8009db4:	2d0c      	cmp	r5, #12
 8009db6:	bf38      	it	cc
 8009db8:	250c      	movcc	r5, #12
 8009dba:	4629      	mov	r1, r5
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f7ff ffa5 	bl	8009d0c <sbrk_aligned>
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	d02b      	beq.n	8009e1e <_malloc_r+0xd2>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	442b      	add	r3, r5
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	e00e      	b.n	8009dec <_malloc_r+0xa0>
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	1b52      	subs	r2, r2, r5
 8009dd2:	d41e      	bmi.n	8009e12 <_malloc_r+0xc6>
 8009dd4:	2a0b      	cmp	r2, #11
 8009dd6:	d916      	bls.n	8009e06 <_malloc_r+0xba>
 8009dd8:	1961      	adds	r1, r4, r5
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	6025      	str	r5, [r4, #0]
 8009dde:	bf18      	it	ne
 8009de0:	6059      	strne	r1, [r3, #4]
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	bf08      	it	eq
 8009de6:	6031      	streq	r1, [r6, #0]
 8009de8:	5162      	str	r2, [r4, r5]
 8009dea:	604b      	str	r3, [r1, #4]
 8009dec:	4638      	mov	r0, r7
 8009dee:	f104 060b 	add.w	r6, r4, #11
 8009df2:	f000 ffdb 	bl	800adac <__malloc_unlock>
 8009df6:	f026 0607 	bic.w	r6, r6, #7
 8009dfa:	1d23      	adds	r3, r4, #4
 8009dfc:	1af2      	subs	r2, r6, r3
 8009dfe:	d0b6      	beq.n	8009d6e <_malloc_r+0x22>
 8009e00:	1b9b      	subs	r3, r3, r6
 8009e02:	50a3      	str	r3, [r4, r2]
 8009e04:	e7b3      	b.n	8009d6e <_malloc_r+0x22>
 8009e06:	6862      	ldr	r2, [r4, #4]
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	bf0c      	ite	eq
 8009e0c:	6032      	streq	r2, [r6, #0]
 8009e0e:	605a      	strne	r2, [r3, #4]
 8009e10:	e7ec      	b.n	8009dec <_malloc_r+0xa0>
 8009e12:	4623      	mov	r3, r4
 8009e14:	6864      	ldr	r4, [r4, #4]
 8009e16:	e7b2      	b.n	8009d7e <_malloc_r+0x32>
 8009e18:	4634      	mov	r4, r6
 8009e1a:	6876      	ldr	r6, [r6, #4]
 8009e1c:	e7b9      	b.n	8009d92 <_malloc_r+0x46>
 8009e1e:	230c      	movs	r3, #12
 8009e20:	603b      	str	r3, [r7, #0]
 8009e22:	4638      	mov	r0, r7
 8009e24:	f000 ffc2 	bl	800adac <__malloc_unlock>
 8009e28:	e7a1      	b.n	8009d6e <_malloc_r+0x22>
 8009e2a:	6025      	str	r5, [r4, #0]
 8009e2c:	e7de      	b.n	8009dec <_malloc_r+0xa0>
 8009e2e:	bf00      	nop
 8009e30:	2000074c 	.word	0x2000074c

08009e34 <__ssputs_r>:
 8009e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	688e      	ldr	r6, [r1, #8]
 8009e3a:	429e      	cmp	r6, r3
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	4690      	mov	r8, r2
 8009e42:	461f      	mov	r7, r3
 8009e44:	d838      	bhi.n	8009eb8 <__ssputs_r+0x84>
 8009e46:	898a      	ldrh	r2, [r1, #12]
 8009e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e4c:	d032      	beq.n	8009eb4 <__ssputs_r+0x80>
 8009e4e:	6825      	ldr	r5, [r4, #0]
 8009e50:	6909      	ldr	r1, [r1, #16]
 8009e52:	eba5 0901 	sub.w	r9, r5, r1
 8009e56:	6965      	ldr	r5, [r4, #20]
 8009e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e60:	3301      	adds	r3, #1
 8009e62:	444b      	add	r3, r9
 8009e64:	106d      	asrs	r5, r5, #1
 8009e66:	429d      	cmp	r5, r3
 8009e68:	bf38      	it	cc
 8009e6a:	461d      	movcc	r5, r3
 8009e6c:	0553      	lsls	r3, r2, #21
 8009e6e:	d531      	bpl.n	8009ed4 <__ssputs_r+0xa0>
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7ff ff6b 	bl	8009d4c <_malloc_r>
 8009e76:	4606      	mov	r6, r0
 8009e78:	b950      	cbnz	r0, 8009e90 <__ssputs_r+0x5c>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	f8ca 3000 	str.w	r3, [sl]
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e90:	6921      	ldr	r1, [r4, #16]
 8009e92:	464a      	mov	r2, r9
 8009e94:	f7fc fa04 	bl	80062a0 <memcpy>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	6126      	str	r6, [r4, #16]
 8009ea6:	6165      	str	r5, [r4, #20]
 8009ea8:	444e      	add	r6, r9
 8009eaa:	eba5 0509 	sub.w	r5, r5, r9
 8009eae:	6026      	str	r6, [r4, #0]
 8009eb0:	60a5      	str	r5, [r4, #8]
 8009eb2:	463e      	mov	r6, r7
 8009eb4:	42be      	cmp	r6, r7
 8009eb6:	d900      	bls.n	8009eba <__ssputs_r+0x86>
 8009eb8:	463e      	mov	r6, r7
 8009eba:	6820      	ldr	r0, [r4, #0]
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	4641      	mov	r1, r8
 8009ec0:	f000 ff54 	bl	800ad6c <memmove>
 8009ec4:	68a3      	ldr	r3, [r4, #8]
 8009ec6:	1b9b      	subs	r3, r3, r6
 8009ec8:	60a3      	str	r3, [r4, #8]
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	4433      	add	r3, r6
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e7db      	b.n	8009e8c <__ssputs_r+0x58>
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	f000 ff6f 	bl	800adb8 <_realloc_r>
 8009eda:	4606      	mov	r6, r0
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d1e1      	bne.n	8009ea4 <__ssputs_r+0x70>
 8009ee0:	6921      	ldr	r1, [r4, #16]
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	f7ff fec6 	bl	8009c74 <_free_r>
 8009ee8:	e7c7      	b.n	8009e7a <__ssputs_r+0x46>
	...

08009eec <_svfiprintf_r>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	4698      	mov	r8, r3
 8009ef2:	898b      	ldrh	r3, [r1, #12]
 8009ef4:	061b      	lsls	r3, r3, #24
 8009ef6:	b09d      	sub	sp, #116	; 0x74
 8009ef8:	4607      	mov	r7, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	4614      	mov	r4, r2
 8009efe:	d50e      	bpl.n	8009f1e <_svfiprintf_r+0x32>
 8009f00:	690b      	ldr	r3, [r1, #16]
 8009f02:	b963      	cbnz	r3, 8009f1e <_svfiprintf_r+0x32>
 8009f04:	2140      	movs	r1, #64	; 0x40
 8009f06:	f7ff ff21 	bl	8009d4c <_malloc_r>
 8009f0a:	6028      	str	r0, [r5, #0]
 8009f0c:	6128      	str	r0, [r5, #16]
 8009f0e:	b920      	cbnz	r0, 8009f1a <_svfiprintf_r+0x2e>
 8009f10:	230c      	movs	r3, #12
 8009f12:	603b      	str	r3, [r7, #0]
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f18:	e0d1      	b.n	800a0be <_svfiprintf_r+0x1d2>
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	616b      	str	r3, [r5, #20]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9309      	str	r3, [sp, #36]	; 0x24
 8009f22:	2320      	movs	r3, #32
 8009f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f2c:	2330      	movs	r3, #48	; 0x30
 8009f2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0d8 <_svfiprintf_r+0x1ec>
 8009f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f36:	f04f 0901 	mov.w	r9, #1
 8009f3a:	4623      	mov	r3, r4
 8009f3c:	469a      	mov	sl, r3
 8009f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f42:	b10a      	cbz	r2, 8009f48 <_svfiprintf_r+0x5c>
 8009f44:	2a25      	cmp	r2, #37	; 0x25
 8009f46:	d1f9      	bne.n	8009f3c <_svfiprintf_r+0x50>
 8009f48:	ebba 0b04 	subs.w	fp, sl, r4
 8009f4c:	d00b      	beq.n	8009f66 <_svfiprintf_r+0x7a>
 8009f4e:	465b      	mov	r3, fp
 8009f50:	4622      	mov	r2, r4
 8009f52:	4629      	mov	r1, r5
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff ff6d 	bl	8009e34 <__ssputs_r>
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f000 80aa 	beq.w	800a0b4 <_svfiprintf_r+0x1c8>
 8009f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f62:	445a      	add	r2, fp
 8009f64:	9209      	str	r2, [sp, #36]	; 0x24
 8009f66:	f89a 3000 	ldrb.w	r3, [sl]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 80a2 	beq.w	800a0b4 <_svfiprintf_r+0x1c8>
 8009f70:	2300      	movs	r3, #0
 8009f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f7a:	f10a 0a01 	add.w	sl, sl, #1
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	9307      	str	r3, [sp, #28]
 8009f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f86:	931a      	str	r3, [sp, #104]	; 0x68
 8009f88:	4654      	mov	r4, sl
 8009f8a:	2205      	movs	r2, #5
 8009f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f90:	4851      	ldr	r0, [pc, #324]	; (800a0d8 <_svfiprintf_r+0x1ec>)
 8009f92:	f7f6 f935 	bl	8000200 <memchr>
 8009f96:	9a04      	ldr	r2, [sp, #16]
 8009f98:	b9d8      	cbnz	r0, 8009fd2 <_svfiprintf_r+0xe6>
 8009f9a:	06d0      	lsls	r0, r2, #27
 8009f9c:	bf44      	itt	mi
 8009f9e:	2320      	movmi	r3, #32
 8009fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa4:	0711      	lsls	r1, r2, #28
 8009fa6:	bf44      	itt	mi
 8009fa8:	232b      	movmi	r3, #43	; 0x2b
 8009faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fae:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb4:	d015      	beq.n	8009fe2 <_svfiprintf_r+0xf6>
 8009fb6:	9a07      	ldr	r2, [sp, #28]
 8009fb8:	4654      	mov	r4, sl
 8009fba:	2000      	movs	r0, #0
 8009fbc:	f04f 0c0a 	mov.w	ip, #10
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fc6:	3b30      	subs	r3, #48	; 0x30
 8009fc8:	2b09      	cmp	r3, #9
 8009fca:	d94e      	bls.n	800a06a <_svfiprintf_r+0x17e>
 8009fcc:	b1b0      	cbz	r0, 8009ffc <_svfiprintf_r+0x110>
 8009fce:	9207      	str	r2, [sp, #28]
 8009fd0:	e014      	b.n	8009ffc <_svfiprintf_r+0x110>
 8009fd2:	eba0 0308 	sub.w	r3, r0, r8
 8009fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	9304      	str	r3, [sp, #16]
 8009fde:	46a2      	mov	sl, r4
 8009fe0:	e7d2      	b.n	8009f88 <_svfiprintf_r+0x9c>
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	1d19      	adds	r1, r3, #4
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	9103      	str	r1, [sp, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	bfbb      	ittet	lt
 8009fee:	425b      	neglt	r3, r3
 8009ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ff4:	9307      	strge	r3, [sp, #28]
 8009ff6:	9307      	strlt	r3, [sp, #28]
 8009ff8:	bfb8      	it	lt
 8009ffa:	9204      	strlt	r2, [sp, #16]
 8009ffc:	7823      	ldrb	r3, [r4, #0]
 8009ffe:	2b2e      	cmp	r3, #46	; 0x2e
 800a000:	d10c      	bne.n	800a01c <_svfiprintf_r+0x130>
 800a002:	7863      	ldrb	r3, [r4, #1]
 800a004:	2b2a      	cmp	r3, #42	; 0x2a
 800a006:	d135      	bne.n	800a074 <_svfiprintf_r+0x188>
 800a008:	9b03      	ldr	r3, [sp, #12]
 800a00a:	1d1a      	adds	r2, r3, #4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	9203      	str	r2, [sp, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	bfb8      	it	lt
 800a014:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a018:	3402      	adds	r4, #2
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0e8 <_svfiprintf_r+0x1fc>
 800a020:	7821      	ldrb	r1, [r4, #0]
 800a022:	2203      	movs	r2, #3
 800a024:	4650      	mov	r0, sl
 800a026:	f7f6 f8eb 	bl	8000200 <memchr>
 800a02a:	b140      	cbz	r0, 800a03e <_svfiprintf_r+0x152>
 800a02c:	2340      	movs	r3, #64	; 0x40
 800a02e:	eba0 000a 	sub.w	r0, r0, sl
 800a032:	fa03 f000 	lsl.w	r0, r3, r0
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	4303      	orrs	r3, r0
 800a03a:	3401      	adds	r4, #1
 800a03c:	9304      	str	r3, [sp, #16]
 800a03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a042:	4826      	ldr	r0, [pc, #152]	; (800a0dc <_svfiprintf_r+0x1f0>)
 800a044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a048:	2206      	movs	r2, #6
 800a04a:	f7f6 f8d9 	bl	8000200 <memchr>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d038      	beq.n	800a0c4 <_svfiprintf_r+0x1d8>
 800a052:	4b23      	ldr	r3, [pc, #140]	; (800a0e0 <_svfiprintf_r+0x1f4>)
 800a054:	bb1b      	cbnz	r3, 800a09e <_svfiprintf_r+0x1b2>
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	3307      	adds	r3, #7
 800a05a:	f023 0307 	bic.w	r3, r3, #7
 800a05e:	3308      	adds	r3, #8
 800a060:	9303      	str	r3, [sp, #12]
 800a062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a064:	4433      	add	r3, r6
 800a066:	9309      	str	r3, [sp, #36]	; 0x24
 800a068:	e767      	b.n	8009f3a <_svfiprintf_r+0x4e>
 800a06a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a06e:	460c      	mov	r4, r1
 800a070:	2001      	movs	r0, #1
 800a072:	e7a5      	b.n	8009fc0 <_svfiprintf_r+0xd4>
 800a074:	2300      	movs	r3, #0
 800a076:	3401      	adds	r4, #1
 800a078:	9305      	str	r3, [sp, #20]
 800a07a:	4619      	mov	r1, r3
 800a07c:	f04f 0c0a 	mov.w	ip, #10
 800a080:	4620      	mov	r0, r4
 800a082:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a086:	3a30      	subs	r2, #48	; 0x30
 800a088:	2a09      	cmp	r2, #9
 800a08a:	d903      	bls.n	800a094 <_svfiprintf_r+0x1a8>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0c5      	beq.n	800a01c <_svfiprintf_r+0x130>
 800a090:	9105      	str	r1, [sp, #20]
 800a092:	e7c3      	b.n	800a01c <_svfiprintf_r+0x130>
 800a094:	fb0c 2101 	mla	r1, ip, r1, r2
 800a098:	4604      	mov	r4, r0
 800a09a:	2301      	movs	r3, #1
 800a09c:	e7f0      	b.n	800a080 <_svfiprintf_r+0x194>
 800a09e:	ab03      	add	r3, sp, #12
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <_svfiprintf_r+0x1f8>)
 800a0a6:	a904      	add	r1, sp, #16
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	f7fc f9af 	bl	800640c <_printf_float>
 800a0ae:	1c42      	adds	r2, r0, #1
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	d1d6      	bne.n	800a062 <_svfiprintf_r+0x176>
 800a0b4:	89ab      	ldrh	r3, [r5, #12]
 800a0b6:	065b      	lsls	r3, r3, #25
 800a0b8:	f53f af2c 	bmi.w	8009f14 <_svfiprintf_r+0x28>
 800a0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0be:	b01d      	add	sp, #116	; 0x74
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c4:	ab03      	add	r3, sp, #12
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	462a      	mov	r2, r5
 800a0ca:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <_svfiprintf_r+0x1f8>)
 800a0cc:	a904      	add	r1, sp, #16
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f7fc fc40 	bl	8006954 <_printf_i>
 800a0d4:	e7eb      	b.n	800a0ae <_svfiprintf_r+0x1c2>
 800a0d6:	bf00      	nop
 800a0d8:	0800b994 	.word	0x0800b994
 800a0dc:	0800b99e 	.word	0x0800b99e
 800a0e0:	0800640d 	.word	0x0800640d
 800a0e4:	08009e35 	.word	0x08009e35
 800a0e8:	0800b99a 	.word	0x0800b99a

0800a0ec <_sungetc_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	1c4b      	adds	r3, r1, #1
 800a0f0:	4614      	mov	r4, r2
 800a0f2:	d103      	bne.n	800a0fc <_sungetc_r+0x10>
 800a0f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	8993      	ldrh	r3, [r2, #12]
 800a0fe:	f023 0320 	bic.w	r3, r3, #32
 800a102:	8193      	strh	r3, [r2, #12]
 800a104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a106:	6852      	ldr	r2, [r2, #4]
 800a108:	b2cd      	uxtb	r5, r1
 800a10a:	b18b      	cbz	r3, 800a130 <_sungetc_r+0x44>
 800a10c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a10e:	4293      	cmp	r3, r2
 800a110:	dd08      	ble.n	800a124 <_sungetc_r+0x38>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	1e5a      	subs	r2, r3, #1
 800a116:	6022      	str	r2, [r4, #0]
 800a118:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a11c:	6863      	ldr	r3, [r4, #4]
 800a11e:	3301      	adds	r3, #1
 800a120:	6063      	str	r3, [r4, #4]
 800a122:	e7e9      	b.n	800a0f8 <_sungetc_r+0xc>
 800a124:	4621      	mov	r1, r4
 800a126:	f000 fbef 	bl	800a908 <__submore>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d0f1      	beq.n	800a112 <_sungetc_r+0x26>
 800a12e:	e7e1      	b.n	800a0f4 <_sungetc_r+0x8>
 800a130:	6921      	ldr	r1, [r4, #16]
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	b151      	cbz	r1, 800a14c <_sungetc_r+0x60>
 800a136:	4299      	cmp	r1, r3
 800a138:	d208      	bcs.n	800a14c <_sungetc_r+0x60>
 800a13a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a13e:	42a9      	cmp	r1, r5
 800a140:	d104      	bne.n	800a14c <_sungetc_r+0x60>
 800a142:	3b01      	subs	r3, #1
 800a144:	3201      	adds	r2, #1
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	6062      	str	r2, [r4, #4]
 800a14a:	e7d5      	b.n	800a0f8 <_sungetc_r+0xc>
 800a14c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a154:	6363      	str	r3, [r4, #52]	; 0x34
 800a156:	2303      	movs	r3, #3
 800a158:	63a3      	str	r3, [r4, #56]	; 0x38
 800a15a:	4623      	mov	r3, r4
 800a15c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	2301      	movs	r3, #1
 800a164:	e7dc      	b.n	800a120 <_sungetc_r+0x34>

0800a166 <__ssrefill_r>:
 800a166:	b510      	push	{r4, lr}
 800a168:	460c      	mov	r4, r1
 800a16a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a16c:	b169      	cbz	r1, 800a18a <__ssrefill_r+0x24>
 800a16e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a172:	4299      	cmp	r1, r3
 800a174:	d001      	beq.n	800a17a <__ssrefill_r+0x14>
 800a176:	f7ff fd7d 	bl	8009c74 <_free_r>
 800a17a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a17c:	6063      	str	r3, [r4, #4]
 800a17e:	2000      	movs	r0, #0
 800a180:	6360      	str	r0, [r4, #52]	; 0x34
 800a182:	b113      	cbz	r3, 800a18a <__ssrefill_r+0x24>
 800a184:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	2300      	movs	r3, #0
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f043 0320 	orr.w	r3, r3, #32
 800a198:	81a3      	strh	r3, [r4, #12]
 800a19a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a19e:	e7f3      	b.n	800a188 <__ssrefill_r+0x22>

0800a1a0 <__ssvfiscanf_r>:
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a1b0:	49a6      	ldr	r1, [pc, #664]	; (800a44c <__ssvfiscanf_r+0x2ac>)
 800a1b2:	91a0      	str	r1, [sp, #640]	; 0x280
 800a1b4:	f10d 0804 	add.w	r8, sp, #4
 800a1b8:	49a5      	ldr	r1, [pc, #660]	; (800a450 <__ssvfiscanf_r+0x2b0>)
 800a1ba:	4fa6      	ldr	r7, [pc, #664]	; (800a454 <__ssvfiscanf_r+0x2b4>)
 800a1bc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a458 <__ssvfiscanf_r+0x2b8>
 800a1c0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	91a1      	str	r1, [sp, #644]	; 0x284
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	7813      	ldrb	r3, [r2, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 815a 	beq.w	800a486 <__ssvfiscanf_r+0x2e6>
 800a1d2:	5dd9      	ldrb	r1, [r3, r7]
 800a1d4:	f011 0108 	ands.w	r1, r1, #8
 800a1d8:	f102 0501 	add.w	r5, r2, #1
 800a1dc:	d019      	beq.n	800a212 <__ssvfiscanf_r+0x72>
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dd0f      	ble.n	800a204 <__ssvfiscanf_r+0x64>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	781a      	ldrb	r2, [r3, #0]
 800a1e8:	5cba      	ldrb	r2, [r7, r2]
 800a1ea:	0712      	lsls	r2, r2, #28
 800a1ec:	d401      	bmi.n	800a1f2 <__ssvfiscanf_r+0x52>
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	e7eb      	b.n	800a1ca <__ssvfiscanf_r+0x2a>
 800a1f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a1f4:	3201      	adds	r2, #1
 800a1f6:	9245      	str	r2, [sp, #276]	; 0x114
 800a1f8:	6862      	ldr	r2, [r4, #4]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	3a01      	subs	r2, #1
 800a1fe:	6062      	str	r2, [r4, #4]
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	e7ec      	b.n	800a1de <__ssvfiscanf_r+0x3e>
 800a204:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a206:	4621      	mov	r1, r4
 800a208:	4630      	mov	r0, r6
 800a20a:	4798      	blx	r3
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d0e9      	beq.n	800a1e4 <__ssvfiscanf_r+0x44>
 800a210:	e7ed      	b.n	800a1ee <__ssvfiscanf_r+0x4e>
 800a212:	2b25      	cmp	r3, #37	; 0x25
 800a214:	d012      	beq.n	800a23c <__ssvfiscanf_r+0x9c>
 800a216:	469a      	mov	sl, r3
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f340 8091 	ble.w	800a342 <__ssvfiscanf_r+0x1a2>
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	7813      	ldrb	r3, [r2, #0]
 800a224:	4553      	cmp	r3, sl
 800a226:	f040 812e 	bne.w	800a486 <__ssvfiscanf_r+0x2e6>
 800a22a:	6863      	ldr	r3, [r4, #4]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	6063      	str	r3, [r4, #4]
 800a230:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a232:	3201      	adds	r2, #1
 800a234:	3301      	adds	r3, #1
 800a236:	6022      	str	r2, [r4, #0]
 800a238:	9345      	str	r3, [sp, #276]	; 0x114
 800a23a:	e7d8      	b.n	800a1ee <__ssvfiscanf_r+0x4e>
 800a23c:	9141      	str	r1, [sp, #260]	; 0x104
 800a23e:	9143      	str	r1, [sp, #268]	; 0x10c
 800a240:	7853      	ldrb	r3, [r2, #1]
 800a242:	2b2a      	cmp	r3, #42	; 0x2a
 800a244:	bf02      	ittt	eq
 800a246:	2310      	moveq	r3, #16
 800a248:	1c95      	addeq	r5, r2, #2
 800a24a:	9341      	streq	r3, [sp, #260]	; 0x104
 800a24c:	220a      	movs	r2, #10
 800a24e:	46aa      	mov	sl, r5
 800a250:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a254:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a258:	2b09      	cmp	r3, #9
 800a25a:	d91d      	bls.n	800a298 <__ssvfiscanf_r+0xf8>
 800a25c:	487e      	ldr	r0, [pc, #504]	; (800a458 <__ssvfiscanf_r+0x2b8>)
 800a25e:	2203      	movs	r2, #3
 800a260:	f7f5 ffce 	bl	8000200 <memchr>
 800a264:	b140      	cbz	r0, 800a278 <__ssvfiscanf_r+0xd8>
 800a266:	2301      	movs	r3, #1
 800a268:	eba0 0009 	sub.w	r0, r0, r9
 800a26c:	fa03 f000 	lsl.w	r0, r3, r0
 800a270:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a272:	4318      	orrs	r0, r3
 800a274:	9041      	str	r0, [sp, #260]	; 0x104
 800a276:	4655      	mov	r5, sl
 800a278:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a27c:	2b78      	cmp	r3, #120	; 0x78
 800a27e:	d806      	bhi.n	800a28e <__ssvfiscanf_r+0xee>
 800a280:	2b57      	cmp	r3, #87	; 0x57
 800a282:	d810      	bhi.n	800a2a6 <__ssvfiscanf_r+0x106>
 800a284:	2b25      	cmp	r3, #37	; 0x25
 800a286:	d0c6      	beq.n	800a216 <__ssvfiscanf_r+0x76>
 800a288:	d856      	bhi.n	800a338 <__ssvfiscanf_r+0x198>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d064      	beq.n	800a358 <__ssvfiscanf_r+0x1b8>
 800a28e:	2303      	movs	r3, #3
 800a290:	9347      	str	r3, [sp, #284]	; 0x11c
 800a292:	230a      	movs	r3, #10
 800a294:	9342      	str	r3, [sp, #264]	; 0x108
 800a296:	e071      	b.n	800a37c <__ssvfiscanf_r+0x1dc>
 800a298:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a29a:	fb02 1103 	mla	r1, r2, r3, r1
 800a29e:	3930      	subs	r1, #48	; 0x30
 800a2a0:	9143      	str	r1, [sp, #268]	; 0x10c
 800a2a2:	4655      	mov	r5, sl
 800a2a4:	e7d3      	b.n	800a24e <__ssvfiscanf_r+0xae>
 800a2a6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a2aa:	2a20      	cmp	r2, #32
 800a2ac:	d8ef      	bhi.n	800a28e <__ssvfiscanf_r+0xee>
 800a2ae:	a101      	add	r1, pc, #4	; (adr r1, 800a2b4 <__ssvfiscanf_r+0x114>)
 800a2b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2b4:	0800a367 	.word	0x0800a367
 800a2b8:	0800a28f 	.word	0x0800a28f
 800a2bc:	0800a28f 	.word	0x0800a28f
 800a2c0:	0800a3c5 	.word	0x0800a3c5
 800a2c4:	0800a28f 	.word	0x0800a28f
 800a2c8:	0800a28f 	.word	0x0800a28f
 800a2cc:	0800a28f 	.word	0x0800a28f
 800a2d0:	0800a28f 	.word	0x0800a28f
 800a2d4:	0800a28f 	.word	0x0800a28f
 800a2d8:	0800a28f 	.word	0x0800a28f
 800a2dc:	0800a28f 	.word	0x0800a28f
 800a2e0:	0800a3db 	.word	0x0800a3db
 800a2e4:	0800a3b1 	.word	0x0800a3b1
 800a2e8:	0800a33f 	.word	0x0800a33f
 800a2ec:	0800a33f 	.word	0x0800a33f
 800a2f0:	0800a33f 	.word	0x0800a33f
 800a2f4:	0800a28f 	.word	0x0800a28f
 800a2f8:	0800a3b5 	.word	0x0800a3b5
 800a2fc:	0800a28f 	.word	0x0800a28f
 800a300:	0800a28f 	.word	0x0800a28f
 800a304:	0800a28f 	.word	0x0800a28f
 800a308:	0800a28f 	.word	0x0800a28f
 800a30c:	0800a3eb 	.word	0x0800a3eb
 800a310:	0800a3bd 	.word	0x0800a3bd
 800a314:	0800a35f 	.word	0x0800a35f
 800a318:	0800a28f 	.word	0x0800a28f
 800a31c:	0800a28f 	.word	0x0800a28f
 800a320:	0800a3e7 	.word	0x0800a3e7
 800a324:	0800a28f 	.word	0x0800a28f
 800a328:	0800a3b1 	.word	0x0800a3b1
 800a32c:	0800a28f 	.word	0x0800a28f
 800a330:	0800a28f 	.word	0x0800a28f
 800a334:	0800a367 	.word	0x0800a367
 800a338:	3b45      	subs	r3, #69	; 0x45
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d8a7      	bhi.n	800a28e <__ssvfiscanf_r+0xee>
 800a33e:	2305      	movs	r3, #5
 800a340:	e01b      	b.n	800a37a <__ssvfiscanf_r+0x1da>
 800a342:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a344:	4621      	mov	r1, r4
 800a346:	4630      	mov	r0, r6
 800a348:	4798      	blx	r3
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f43f af68 	beq.w	800a220 <__ssvfiscanf_r+0x80>
 800a350:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a352:	2800      	cmp	r0, #0
 800a354:	f040 808d 	bne.w	800a472 <__ssvfiscanf_r+0x2d2>
 800a358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a35c:	e08f      	b.n	800a47e <__ssvfiscanf_r+0x2de>
 800a35e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a360:	f042 0220 	orr.w	r2, r2, #32
 800a364:	9241      	str	r2, [sp, #260]	; 0x104
 800a366:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a36c:	9241      	str	r2, [sp, #260]	; 0x104
 800a36e:	2210      	movs	r2, #16
 800a370:	2b6f      	cmp	r3, #111	; 0x6f
 800a372:	9242      	str	r2, [sp, #264]	; 0x108
 800a374:	bf34      	ite	cc
 800a376:	2303      	movcc	r3, #3
 800a378:	2304      	movcs	r3, #4
 800a37a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a37c:	6863      	ldr	r3, [r4, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	dd42      	ble.n	800a408 <__ssvfiscanf_r+0x268>
 800a382:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a384:	0659      	lsls	r1, r3, #25
 800a386:	d404      	bmi.n	800a392 <__ssvfiscanf_r+0x1f2>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	5cba      	ldrb	r2, [r7, r2]
 800a38e:	0712      	lsls	r2, r2, #28
 800a390:	d441      	bmi.n	800a416 <__ssvfiscanf_r+0x276>
 800a392:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a394:	2b02      	cmp	r3, #2
 800a396:	dc50      	bgt.n	800a43a <__ssvfiscanf_r+0x29a>
 800a398:	466b      	mov	r3, sp
 800a39a:	4622      	mov	r2, r4
 800a39c:	a941      	add	r1, sp, #260	; 0x104
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f000 f876 	bl	800a490 <_scanf_chars>
 800a3a4:	2801      	cmp	r0, #1
 800a3a6:	d06e      	beq.n	800a486 <__ssvfiscanf_r+0x2e6>
 800a3a8:	2802      	cmp	r0, #2
 800a3aa:	f47f af20 	bne.w	800a1ee <__ssvfiscanf_r+0x4e>
 800a3ae:	e7cf      	b.n	800a350 <__ssvfiscanf_r+0x1b0>
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	e7dd      	b.n	800a370 <__ssvfiscanf_r+0x1d0>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9342      	str	r3, [sp, #264]	; 0x108
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e7de      	b.n	800a37a <__ssvfiscanf_r+0x1da>
 800a3bc:	2308      	movs	r3, #8
 800a3be:	9342      	str	r3, [sp, #264]	; 0x108
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	e7da      	b.n	800a37a <__ssvfiscanf_r+0x1da>
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	f000 f9de 	bl	800a788 <__sccl>
 800a3cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d2:	9341      	str	r3, [sp, #260]	; 0x104
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e7cf      	b.n	800a37a <__ssvfiscanf_r+0x1da>
 800a3da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e0:	9341      	str	r3, [sp, #260]	; 0x104
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	e7c9      	b.n	800a37a <__ssvfiscanf_r+0x1da>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e7c7      	b.n	800a37a <__ssvfiscanf_r+0x1da>
 800a3ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a3ec:	06c3      	lsls	r3, r0, #27
 800a3ee:	f53f aefe 	bmi.w	800a1ee <__ssvfiscanf_r+0x4e>
 800a3f2:	9b00      	ldr	r3, [sp, #0]
 800a3f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a3f6:	1d19      	adds	r1, r3, #4
 800a3f8:	9100      	str	r1, [sp, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f010 0f01 	tst.w	r0, #1
 800a400:	bf14      	ite	ne
 800a402:	801a      	strhne	r2, [r3, #0]
 800a404:	601a      	streq	r2, [r3, #0]
 800a406:	e6f2      	b.n	800a1ee <__ssvfiscanf_r+0x4e>
 800a408:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a40a:	4621      	mov	r1, r4
 800a40c:	4630      	mov	r0, r6
 800a40e:	4798      	blx	r3
 800a410:	2800      	cmp	r0, #0
 800a412:	d0b6      	beq.n	800a382 <__ssvfiscanf_r+0x1e2>
 800a414:	e79c      	b.n	800a350 <__ssvfiscanf_r+0x1b0>
 800a416:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a418:	3201      	adds	r2, #1
 800a41a:	9245      	str	r2, [sp, #276]	; 0x114
 800a41c:	6862      	ldr	r2, [r4, #4]
 800a41e:	3a01      	subs	r2, #1
 800a420:	2a00      	cmp	r2, #0
 800a422:	6062      	str	r2, [r4, #4]
 800a424:	dd02      	ble.n	800a42c <__ssvfiscanf_r+0x28c>
 800a426:	3301      	adds	r3, #1
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	e7ad      	b.n	800a388 <__ssvfiscanf_r+0x1e8>
 800a42c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a42e:	4621      	mov	r1, r4
 800a430:	4630      	mov	r0, r6
 800a432:	4798      	blx	r3
 800a434:	2800      	cmp	r0, #0
 800a436:	d0a7      	beq.n	800a388 <__ssvfiscanf_r+0x1e8>
 800a438:	e78a      	b.n	800a350 <__ssvfiscanf_r+0x1b0>
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	dc0e      	bgt.n	800a45c <__ssvfiscanf_r+0x2bc>
 800a43e:	466b      	mov	r3, sp
 800a440:	4622      	mov	r2, r4
 800a442:	a941      	add	r1, sp, #260	; 0x104
 800a444:	4630      	mov	r0, r6
 800a446:	f000 f87d 	bl	800a544 <_scanf_i>
 800a44a:	e7ab      	b.n	800a3a4 <__ssvfiscanf_r+0x204>
 800a44c:	0800a0ed 	.word	0x0800a0ed
 800a450:	0800a167 	.word	0x0800a167
 800a454:	0800b631 	.word	0x0800b631
 800a458:	0800b99a 	.word	0x0800b99a
 800a45c:	4b0b      	ldr	r3, [pc, #44]	; (800a48c <__ssvfiscanf_r+0x2ec>)
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f43f aec5 	beq.w	800a1ee <__ssvfiscanf_r+0x4e>
 800a464:	466b      	mov	r3, sp
 800a466:	4622      	mov	r2, r4
 800a468:	a941      	add	r1, sp, #260	; 0x104
 800a46a:	4630      	mov	r0, r6
 800a46c:	f7fc fb98 	bl	8006ba0 <_scanf_float>
 800a470:	e798      	b.n	800a3a4 <__ssvfiscanf_r+0x204>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a478:	bf18      	it	ne
 800a47a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800a47e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a486:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a488:	e7f9      	b.n	800a47e <__ssvfiscanf_r+0x2de>
 800a48a:	bf00      	nop
 800a48c:	08006ba1 	.word	0x08006ba1

0800a490 <_scanf_chars>:
 800a490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a494:	4615      	mov	r5, r2
 800a496:	688a      	ldr	r2, [r1, #8]
 800a498:	4680      	mov	r8, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	b932      	cbnz	r2, 800a4ac <_scanf_chars+0x1c>
 800a49e:	698a      	ldr	r2, [r1, #24]
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	bf0c      	ite	eq
 800a4a4:	2201      	moveq	r2, #1
 800a4a6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800a4aa:	608a      	str	r2, [r1, #8]
 800a4ac:	6822      	ldr	r2, [r4, #0]
 800a4ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a540 <_scanf_chars+0xb0>
 800a4b2:	06d1      	lsls	r1, r2, #27
 800a4b4:	bf5f      	itttt	pl
 800a4b6:	681a      	ldrpl	r2, [r3, #0]
 800a4b8:	1d11      	addpl	r1, r2, #4
 800a4ba:	6019      	strpl	r1, [r3, #0]
 800a4bc:	6816      	ldrpl	r6, [r2, #0]
 800a4be:	2700      	movs	r7, #0
 800a4c0:	69a0      	ldr	r0, [r4, #24]
 800a4c2:	b188      	cbz	r0, 800a4e8 <_scanf_chars+0x58>
 800a4c4:	2801      	cmp	r0, #1
 800a4c6:	d107      	bne.n	800a4d8 <_scanf_chars+0x48>
 800a4c8:	682a      	ldr	r2, [r5, #0]
 800a4ca:	7811      	ldrb	r1, [r2, #0]
 800a4cc:	6962      	ldr	r2, [r4, #20]
 800a4ce:	5c52      	ldrb	r2, [r2, r1]
 800a4d0:	b952      	cbnz	r2, 800a4e8 <_scanf_chars+0x58>
 800a4d2:	2f00      	cmp	r7, #0
 800a4d4:	d031      	beq.n	800a53a <_scanf_chars+0xaa>
 800a4d6:	e022      	b.n	800a51e <_scanf_chars+0x8e>
 800a4d8:	2802      	cmp	r0, #2
 800a4da:	d120      	bne.n	800a51e <_scanf_chars+0x8e>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a4e4:	071b      	lsls	r3, r3, #28
 800a4e6:	d41a      	bmi.n	800a51e <_scanf_chars+0x8e>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	06da      	lsls	r2, r3, #27
 800a4ec:	bf5e      	ittt	pl
 800a4ee:	682b      	ldrpl	r3, [r5, #0]
 800a4f0:	781b      	ldrbpl	r3, [r3, #0]
 800a4f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a4f6:	682a      	ldr	r2, [r5, #0]
 800a4f8:	686b      	ldr	r3, [r5, #4]
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	602a      	str	r2, [r5, #0]
 800a4fe:	68a2      	ldr	r2, [r4, #8]
 800a500:	3b01      	subs	r3, #1
 800a502:	3a01      	subs	r2, #1
 800a504:	606b      	str	r3, [r5, #4]
 800a506:	3701      	adds	r7, #1
 800a508:	60a2      	str	r2, [r4, #8]
 800a50a:	b142      	cbz	r2, 800a51e <_scanf_chars+0x8e>
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	dcd7      	bgt.n	800a4c0 <_scanf_chars+0x30>
 800a510:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a514:	4629      	mov	r1, r5
 800a516:	4640      	mov	r0, r8
 800a518:	4798      	blx	r3
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d0d0      	beq.n	800a4c0 <_scanf_chars+0x30>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	f013 0310 	ands.w	r3, r3, #16
 800a524:	d105      	bne.n	800a532 <_scanf_chars+0xa2>
 800a526:	68e2      	ldr	r2, [r4, #12]
 800a528:	3201      	adds	r2, #1
 800a52a:	60e2      	str	r2, [r4, #12]
 800a52c:	69a2      	ldr	r2, [r4, #24]
 800a52e:	b102      	cbz	r2, 800a532 <_scanf_chars+0xa2>
 800a530:	7033      	strb	r3, [r6, #0]
 800a532:	6923      	ldr	r3, [r4, #16]
 800a534:	443b      	add	r3, r7
 800a536:	6123      	str	r3, [r4, #16]
 800a538:	2000      	movs	r0, #0
 800a53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53e:	bf00      	nop
 800a540:	0800b631 	.word	0x0800b631

0800a544 <_scanf_i>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	4698      	mov	r8, r3
 800a54a:	4b76      	ldr	r3, [pc, #472]	; (800a724 <_scanf_i+0x1e0>)
 800a54c:	460c      	mov	r4, r1
 800a54e:	4682      	mov	sl, r0
 800a550:	4616      	mov	r6, r2
 800a552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a556:	b087      	sub	sp, #28
 800a558:	ab03      	add	r3, sp, #12
 800a55a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a55e:	4b72      	ldr	r3, [pc, #456]	; (800a728 <_scanf_i+0x1e4>)
 800a560:	69a1      	ldr	r1, [r4, #24]
 800a562:	4a72      	ldr	r2, [pc, #456]	; (800a72c <_scanf_i+0x1e8>)
 800a564:	2903      	cmp	r1, #3
 800a566:	bf18      	it	ne
 800a568:	461a      	movne	r2, r3
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	9201      	str	r2, [sp, #4]
 800a56e:	1e5a      	subs	r2, r3, #1
 800a570:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a574:	bf88      	it	hi
 800a576:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a57a:	4627      	mov	r7, r4
 800a57c:	bf82      	ittt	hi
 800a57e:	eb03 0905 	addhi.w	r9, r3, r5
 800a582:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a586:	60a3      	strhi	r3, [r4, #8]
 800a588:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a58c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a590:	bf98      	it	ls
 800a592:	f04f 0900 	movls.w	r9, #0
 800a596:	6023      	str	r3, [r4, #0]
 800a598:	463d      	mov	r5, r7
 800a59a:	f04f 0b00 	mov.w	fp, #0
 800a59e:	6831      	ldr	r1, [r6, #0]
 800a5a0:	ab03      	add	r3, sp, #12
 800a5a2:	7809      	ldrb	r1, [r1, #0]
 800a5a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	f7f5 fe29 	bl	8000200 <memchr>
 800a5ae:	b328      	cbz	r0, 800a5fc <_scanf_i+0xb8>
 800a5b0:	f1bb 0f01 	cmp.w	fp, #1
 800a5b4:	d159      	bne.n	800a66a <_scanf_i+0x126>
 800a5b6:	6862      	ldr	r2, [r4, #4]
 800a5b8:	b92a      	cbnz	r2, 800a5c6 <_scanf_i+0x82>
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	2308      	movs	r3, #8
 800a5be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c2:	6063      	str	r3, [r4, #4]
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	6822      	ldr	r2, [r4, #0]
 800a5c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a5cc:	6022      	str	r2, [r4, #0]
 800a5ce:	68a2      	ldr	r2, [r4, #8]
 800a5d0:	1e51      	subs	r1, r2, #1
 800a5d2:	60a1      	str	r1, [r4, #8]
 800a5d4:	b192      	cbz	r2, 800a5fc <_scanf_i+0xb8>
 800a5d6:	6832      	ldr	r2, [r6, #0]
 800a5d8:	1c51      	adds	r1, r2, #1
 800a5da:	6031      	str	r1, [r6, #0]
 800a5dc:	7812      	ldrb	r2, [r2, #0]
 800a5de:	f805 2b01 	strb.w	r2, [r5], #1
 800a5e2:	6872      	ldr	r2, [r6, #4]
 800a5e4:	3a01      	subs	r2, #1
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	6072      	str	r2, [r6, #4]
 800a5ea:	dc07      	bgt.n	800a5fc <_scanf_i+0xb8>
 800a5ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4790      	blx	r2
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f040 8085 	bne.w	800a706 <_scanf_i+0x1c2>
 800a5fc:	f10b 0b01 	add.w	fp, fp, #1
 800a600:	f1bb 0f03 	cmp.w	fp, #3
 800a604:	d1cb      	bne.n	800a59e <_scanf_i+0x5a>
 800a606:	6863      	ldr	r3, [r4, #4]
 800a608:	b90b      	cbnz	r3, 800a60e <_scanf_i+0xca>
 800a60a:	230a      	movs	r3, #10
 800a60c:	6063      	str	r3, [r4, #4]
 800a60e:	6863      	ldr	r3, [r4, #4]
 800a610:	4947      	ldr	r1, [pc, #284]	; (800a730 <_scanf_i+0x1ec>)
 800a612:	6960      	ldr	r0, [r4, #20]
 800a614:	1ac9      	subs	r1, r1, r3
 800a616:	f000 f8b7 	bl	800a788 <__sccl>
 800a61a:	f04f 0b00 	mov.w	fp, #0
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d03d      	beq.n	800a6a2 <_scanf_i+0x15e>
 800a626:	6831      	ldr	r1, [r6, #0]
 800a628:	6960      	ldr	r0, [r4, #20]
 800a62a:	f891 c000 	ldrb.w	ip, [r1]
 800a62e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a632:	2800      	cmp	r0, #0
 800a634:	d035      	beq.n	800a6a2 <_scanf_i+0x15e>
 800a636:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a63a:	d124      	bne.n	800a686 <_scanf_i+0x142>
 800a63c:	0510      	lsls	r0, r2, #20
 800a63e:	d522      	bpl.n	800a686 <_scanf_i+0x142>
 800a640:	f10b 0b01 	add.w	fp, fp, #1
 800a644:	f1b9 0f00 	cmp.w	r9, #0
 800a648:	d003      	beq.n	800a652 <_scanf_i+0x10e>
 800a64a:	3301      	adds	r3, #1
 800a64c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a650:	60a3      	str	r3, [r4, #8]
 800a652:	6873      	ldr	r3, [r6, #4]
 800a654:	3b01      	subs	r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	6073      	str	r3, [r6, #4]
 800a65a:	dd1b      	ble.n	800a694 <_scanf_i+0x150>
 800a65c:	6833      	ldr	r3, [r6, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	6033      	str	r3, [r6, #0]
 800a662:	68a3      	ldr	r3, [r4, #8]
 800a664:	3b01      	subs	r3, #1
 800a666:	60a3      	str	r3, [r4, #8]
 800a668:	e7d9      	b.n	800a61e <_scanf_i+0xda>
 800a66a:	f1bb 0f02 	cmp.w	fp, #2
 800a66e:	d1ae      	bne.n	800a5ce <_scanf_i+0x8a>
 800a670:	6822      	ldr	r2, [r4, #0]
 800a672:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a676:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a67a:	d1bf      	bne.n	800a5fc <_scanf_i+0xb8>
 800a67c:	2310      	movs	r3, #16
 800a67e:	6063      	str	r3, [r4, #4]
 800a680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a684:	e7a2      	b.n	800a5cc <_scanf_i+0x88>
 800a686:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a68a:	6022      	str	r2, [r4, #0]
 800a68c:	780b      	ldrb	r3, [r1, #0]
 800a68e:	f805 3b01 	strb.w	r3, [r5], #1
 800a692:	e7de      	b.n	800a652 <_scanf_i+0x10e>
 800a694:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a698:	4631      	mov	r1, r6
 800a69a:	4650      	mov	r0, sl
 800a69c:	4798      	blx	r3
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d0df      	beq.n	800a662 <_scanf_i+0x11e>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	05db      	lsls	r3, r3, #23
 800a6a6:	d50d      	bpl.n	800a6c4 <_scanf_i+0x180>
 800a6a8:	42bd      	cmp	r5, r7
 800a6aa:	d909      	bls.n	800a6c0 <_scanf_i+0x17c>
 800a6ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a6b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	4650      	mov	r0, sl
 800a6b8:	4798      	blx	r3
 800a6ba:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a6be:	464d      	mov	r5, r9
 800a6c0:	42bd      	cmp	r5, r7
 800a6c2:	d02d      	beq.n	800a720 <_scanf_i+0x1dc>
 800a6c4:	6822      	ldr	r2, [r4, #0]
 800a6c6:	f012 0210 	ands.w	r2, r2, #16
 800a6ca:	d113      	bne.n	800a6f4 <_scanf_i+0x1b0>
 800a6cc:	702a      	strb	r2, [r5, #0]
 800a6ce:	6863      	ldr	r3, [r4, #4]
 800a6d0:	9e01      	ldr	r6, [sp, #4]
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	47b0      	blx	r6
 800a6d8:	6821      	ldr	r1, [r4, #0]
 800a6da:	f8d8 3000 	ldr.w	r3, [r8]
 800a6de:	f011 0f20 	tst.w	r1, #32
 800a6e2:	d013      	beq.n	800a70c <_scanf_i+0x1c8>
 800a6e4:	1d1a      	adds	r2, r3, #4
 800a6e6:	f8c8 2000 	str.w	r2, [r8]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6018      	str	r0, [r3, #0]
 800a6ee:	68e3      	ldr	r3, [r4, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	60e3      	str	r3, [r4, #12]
 800a6f4:	1bed      	subs	r5, r5, r7
 800a6f6:	44ab      	add	fp, r5
 800a6f8:	6925      	ldr	r5, [r4, #16]
 800a6fa:	445d      	add	r5, fp
 800a6fc:	6125      	str	r5, [r4, #16]
 800a6fe:	2000      	movs	r0, #0
 800a700:	b007      	add	sp, #28
 800a702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a706:	f04f 0b00 	mov.w	fp, #0
 800a70a:	e7ca      	b.n	800a6a2 <_scanf_i+0x15e>
 800a70c:	1d1a      	adds	r2, r3, #4
 800a70e:	f8c8 2000 	str.w	r2, [r8]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f011 0f01 	tst.w	r1, #1
 800a718:	bf14      	ite	ne
 800a71a:	8018      	strhne	r0, [r3, #0]
 800a71c:	6018      	streq	r0, [r3, #0]
 800a71e:	e7e6      	b.n	800a6ee <_scanf_i+0x1aa>
 800a720:	2001      	movs	r0, #1
 800a722:	e7ed      	b.n	800a700 <_scanf_i+0x1bc>
 800a724:	0800b518 	.word	0x0800b518
 800a728:	0800a905 	.word	0x0800a905
 800a72c:	08007e45 	.word	0x08007e45
 800a730:	0800b9be 	.word	0x0800b9be

0800a734 <_read_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4d07      	ldr	r5, [pc, #28]	; (800a754 <_read_r+0x20>)
 800a738:	4604      	mov	r4, r0
 800a73a:	4608      	mov	r0, r1
 800a73c:	4611      	mov	r1, r2
 800a73e:	2200      	movs	r2, #0
 800a740:	602a      	str	r2, [r5, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	f7f7 fe88 	bl	8002458 <_read>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_read_r+0x1e>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_read_r+0x1e>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	20000754 	.word	0x20000754

0800a758 <nan>:
 800a758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a760 <nan+0x8>
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	00000000 	.word	0x00000000
 800a764:	7ff80000 	.word	0x7ff80000

0800a768 <_sbrk_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d06      	ldr	r5, [pc, #24]	; (800a784 <_sbrk_r+0x1c>)
 800a76c:	2300      	movs	r3, #0
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	602b      	str	r3, [r5, #0]
 800a774:	f7f7 fea0 	bl	80024b8 <_sbrk>
 800a778:	1c43      	adds	r3, r0, #1
 800a77a:	d102      	bne.n	800a782 <_sbrk_r+0x1a>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	b103      	cbz	r3, 800a782 <_sbrk_r+0x1a>
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	bd38      	pop	{r3, r4, r5, pc}
 800a784:	20000754 	.word	0x20000754

0800a788 <__sccl>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	780b      	ldrb	r3, [r1, #0]
 800a78c:	4604      	mov	r4, r0
 800a78e:	2b5e      	cmp	r3, #94	; 0x5e
 800a790:	bf0b      	itete	eq
 800a792:	784b      	ldrbeq	r3, [r1, #1]
 800a794:	1c48      	addne	r0, r1, #1
 800a796:	1c88      	addeq	r0, r1, #2
 800a798:	2200      	movne	r2, #0
 800a79a:	bf08      	it	eq
 800a79c:	2201      	moveq	r2, #1
 800a79e:	1e61      	subs	r1, r4, #1
 800a7a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a7a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a7a8:	42a9      	cmp	r1, r5
 800a7aa:	d1fb      	bne.n	800a7a4 <__sccl+0x1c>
 800a7ac:	b90b      	cbnz	r3, 800a7b2 <__sccl+0x2a>
 800a7ae:	3801      	subs	r0, #1
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	f082 0201 	eor.w	r2, r2, #1
 800a7b6:	54e2      	strb	r2, [r4, r3]
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a7c0:	292d      	cmp	r1, #45	; 0x2d
 800a7c2:	d006      	beq.n	800a7d2 <__sccl+0x4a>
 800a7c4:	295d      	cmp	r1, #93	; 0x5d
 800a7c6:	d0f3      	beq.n	800a7b0 <__sccl+0x28>
 800a7c8:	b909      	cbnz	r1, 800a7ce <__sccl+0x46>
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	e7f0      	b.n	800a7b0 <__sccl+0x28>
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	e7f1      	b.n	800a7b6 <__sccl+0x2e>
 800a7d2:	786e      	ldrb	r6, [r5, #1]
 800a7d4:	2e5d      	cmp	r6, #93	; 0x5d
 800a7d6:	d0fa      	beq.n	800a7ce <__sccl+0x46>
 800a7d8:	42b3      	cmp	r3, r6
 800a7da:	dcf8      	bgt.n	800a7ce <__sccl+0x46>
 800a7dc:	3502      	adds	r5, #2
 800a7de:	4619      	mov	r1, r3
 800a7e0:	3101      	adds	r1, #1
 800a7e2:	428e      	cmp	r6, r1
 800a7e4:	5462      	strb	r2, [r4, r1]
 800a7e6:	dcfb      	bgt.n	800a7e0 <__sccl+0x58>
 800a7e8:	1af1      	subs	r1, r6, r3
 800a7ea:	3901      	subs	r1, #1
 800a7ec:	1c58      	adds	r0, r3, #1
 800a7ee:	42b3      	cmp	r3, r6
 800a7f0:	bfa8      	it	ge
 800a7f2:	2100      	movge	r1, #0
 800a7f4:	1843      	adds	r3, r0, r1
 800a7f6:	e7e0      	b.n	800a7ba <__sccl+0x32>

0800a7f8 <strncmp>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	b17a      	cbz	r2, 800a81c <strncmp+0x24>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	3901      	subs	r1, #1
 800a800:	1884      	adds	r4, r0, r2
 800a802:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a806:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a80a:	4290      	cmp	r0, r2
 800a80c:	d101      	bne.n	800a812 <strncmp+0x1a>
 800a80e:	42a3      	cmp	r3, r4
 800a810:	d101      	bne.n	800a816 <strncmp+0x1e>
 800a812:	1a80      	subs	r0, r0, r2
 800a814:	bd10      	pop	{r4, pc}
 800a816:	2800      	cmp	r0, #0
 800a818:	d1f3      	bne.n	800a802 <strncmp+0xa>
 800a81a:	e7fa      	b.n	800a812 <strncmp+0x1a>
 800a81c:	4610      	mov	r0, r2
 800a81e:	e7f9      	b.n	800a814 <strncmp+0x1c>

0800a820 <_strtoul_l.constprop.0>:
 800a820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a824:	4f36      	ldr	r7, [pc, #216]	; (800a900 <_strtoul_l.constprop.0+0xe0>)
 800a826:	4686      	mov	lr, r0
 800a828:	460d      	mov	r5, r1
 800a82a:	4628      	mov	r0, r5
 800a82c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a830:	5de6      	ldrb	r6, [r4, r7]
 800a832:	f016 0608 	ands.w	r6, r6, #8
 800a836:	d1f8      	bne.n	800a82a <_strtoul_l.constprop.0+0xa>
 800a838:	2c2d      	cmp	r4, #45	; 0x2d
 800a83a:	d12f      	bne.n	800a89c <_strtoul_l.constprop.0+0x7c>
 800a83c:	782c      	ldrb	r4, [r5, #0]
 800a83e:	2601      	movs	r6, #1
 800a840:	1c85      	adds	r5, r0, #2
 800a842:	2b00      	cmp	r3, #0
 800a844:	d057      	beq.n	800a8f6 <_strtoul_l.constprop.0+0xd6>
 800a846:	2b10      	cmp	r3, #16
 800a848:	d109      	bne.n	800a85e <_strtoul_l.constprop.0+0x3e>
 800a84a:	2c30      	cmp	r4, #48	; 0x30
 800a84c:	d107      	bne.n	800a85e <_strtoul_l.constprop.0+0x3e>
 800a84e:	7828      	ldrb	r0, [r5, #0]
 800a850:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a854:	2858      	cmp	r0, #88	; 0x58
 800a856:	d149      	bne.n	800a8ec <_strtoul_l.constprop.0+0xcc>
 800a858:	786c      	ldrb	r4, [r5, #1]
 800a85a:	2310      	movs	r3, #16
 800a85c:	3502      	adds	r5, #2
 800a85e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a862:	2700      	movs	r7, #0
 800a864:	fbb8 f8f3 	udiv	r8, r8, r3
 800a868:	fb03 f908 	mul.w	r9, r3, r8
 800a86c:	ea6f 0909 	mvn.w	r9, r9
 800a870:	4638      	mov	r0, r7
 800a872:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a876:	f1bc 0f09 	cmp.w	ip, #9
 800a87a:	d814      	bhi.n	800a8a6 <_strtoul_l.constprop.0+0x86>
 800a87c:	4664      	mov	r4, ip
 800a87e:	42a3      	cmp	r3, r4
 800a880:	dd22      	ble.n	800a8c8 <_strtoul_l.constprop.0+0xa8>
 800a882:	2f00      	cmp	r7, #0
 800a884:	db1d      	blt.n	800a8c2 <_strtoul_l.constprop.0+0xa2>
 800a886:	4580      	cmp	r8, r0
 800a888:	d31b      	bcc.n	800a8c2 <_strtoul_l.constprop.0+0xa2>
 800a88a:	d101      	bne.n	800a890 <_strtoul_l.constprop.0+0x70>
 800a88c:	45a1      	cmp	r9, r4
 800a88e:	db18      	blt.n	800a8c2 <_strtoul_l.constprop.0+0xa2>
 800a890:	fb00 4003 	mla	r0, r0, r3, r4
 800a894:	2701      	movs	r7, #1
 800a896:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a89a:	e7ea      	b.n	800a872 <_strtoul_l.constprop.0+0x52>
 800a89c:	2c2b      	cmp	r4, #43	; 0x2b
 800a89e:	bf04      	itt	eq
 800a8a0:	782c      	ldrbeq	r4, [r5, #0]
 800a8a2:	1c85      	addeq	r5, r0, #2
 800a8a4:	e7cd      	b.n	800a842 <_strtoul_l.constprop.0+0x22>
 800a8a6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a8aa:	f1bc 0f19 	cmp.w	ip, #25
 800a8ae:	d801      	bhi.n	800a8b4 <_strtoul_l.constprop.0+0x94>
 800a8b0:	3c37      	subs	r4, #55	; 0x37
 800a8b2:	e7e4      	b.n	800a87e <_strtoul_l.constprop.0+0x5e>
 800a8b4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a8b8:	f1bc 0f19 	cmp.w	ip, #25
 800a8bc:	d804      	bhi.n	800a8c8 <_strtoul_l.constprop.0+0xa8>
 800a8be:	3c57      	subs	r4, #87	; 0x57
 800a8c0:	e7dd      	b.n	800a87e <_strtoul_l.constprop.0+0x5e>
 800a8c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a8c6:	e7e6      	b.n	800a896 <_strtoul_l.constprop.0+0x76>
 800a8c8:	2f00      	cmp	r7, #0
 800a8ca:	da07      	bge.n	800a8dc <_strtoul_l.constprop.0+0xbc>
 800a8cc:	2322      	movs	r3, #34	; 0x22
 800a8ce:	f8ce 3000 	str.w	r3, [lr]
 800a8d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8d6:	b932      	cbnz	r2, 800a8e6 <_strtoul_l.constprop.0+0xc6>
 800a8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8dc:	b106      	cbz	r6, 800a8e0 <_strtoul_l.constprop.0+0xc0>
 800a8de:	4240      	negs	r0, r0
 800a8e0:	2a00      	cmp	r2, #0
 800a8e2:	d0f9      	beq.n	800a8d8 <_strtoul_l.constprop.0+0xb8>
 800a8e4:	b107      	cbz	r7, 800a8e8 <_strtoul_l.constprop.0+0xc8>
 800a8e6:	1e69      	subs	r1, r5, #1
 800a8e8:	6011      	str	r1, [r2, #0]
 800a8ea:	e7f5      	b.n	800a8d8 <_strtoul_l.constprop.0+0xb8>
 800a8ec:	2430      	movs	r4, #48	; 0x30
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1b5      	bne.n	800a85e <_strtoul_l.constprop.0+0x3e>
 800a8f2:	2308      	movs	r3, #8
 800a8f4:	e7b3      	b.n	800a85e <_strtoul_l.constprop.0+0x3e>
 800a8f6:	2c30      	cmp	r4, #48	; 0x30
 800a8f8:	d0a9      	beq.n	800a84e <_strtoul_l.constprop.0+0x2e>
 800a8fa:	230a      	movs	r3, #10
 800a8fc:	e7af      	b.n	800a85e <_strtoul_l.constprop.0+0x3e>
 800a8fe:	bf00      	nop
 800a900:	0800b631 	.word	0x0800b631

0800a904 <_strtoul_r>:
 800a904:	f7ff bf8c 	b.w	800a820 <_strtoul_l.constprop.0>

0800a908 <__submore>:
 800a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90c:	460c      	mov	r4, r1
 800a90e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a914:	4299      	cmp	r1, r3
 800a916:	d11d      	bne.n	800a954 <__submore+0x4c>
 800a918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a91c:	f7ff fa16 	bl	8009d4c <_malloc_r>
 800a920:	b918      	cbnz	r0, 800a92a <__submore+0x22>
 800a922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a92e:	63a3      	str	r3, [r4, #56]	; 0x38
 800a930:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a934:	6360      	str	r0, [r4, #52]	; 0x34
 800a936:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a93a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a93e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a942:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a946:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a94a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a94e:	6020      	str	r0, [r4, #0]
 800a950:	2000      	movs	r0, #0
 800a952:	e7e8      	b.n	800a926 <__submore+0x1e>
 800a954:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a956:	0077      	lsls	r7, r6, #1
 800a958:	463a      	mov	r2, r7
 800a95a:	f000 fa2d 	bl	800adb8 <_realloc_r>
 800a95e:	4605      	mov	r5, r0
 800a960:	2800      	cmp	r0, #0
 800a962:	d0de      	beq.n	800a922 <__submore+0x1a>
 800a964:	eb00 0806 	add.w	r8, r0, r6
 800a968:	4601      	mov	r1, r0
 800a96a:	4632      	mov	r2, r6
 800a96c:	4640      	mov	r0, r8
 800a96e:	f7fb fc97 	bl	80062a0 <memcpy>
 800a972:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a976:	f8c4 8000 	str.w	r8, [r4]
 800a97a:	e7e9      	b.n	800a950 <__submore+0x48>

0800a97c <__ascii_wctomb>:
 800a97c:	b149      	cbz	r1, 800a992 <__ascii_wctomb+0x16>
 800a97e:	2aff      	cmp	r2, #255	; 0xff
 800a980:	bf85      	ittet	hi
 800a982:	238a      	movhi	r3, #138	; 0x8a
 800a984:	6003      	strhi	r3, [r0, #0]
 800a986:	700a      	strbls	r2, [r1, #0]
 800a988:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a98c:	bf98      	it	ls
 800a98e:	2001      	movls	r0, #1
 800a990:	4770      	bx	lr
 800a992:	4608      	mov	r0, r1
 800a994:	4770      	bx	lr
	...

0800a998 <__assert_func>:
 800a998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a99a:	4614      	mov	r4, r2
 800a99c:	461a      	mov	r2, r3
 800a99e:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <__assert_func+0x2c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	68d8      	ldr	r0, [r3, #12]
 800a9a6:	b14c      	cbz	r4, 800a9bc <__assert_func+0x24>
 800a9a8:	4b07      	ldr	r3, [pc, #28]	; (800a9c8 <__assert_func+0x30>)
 800a9aa:	9100      	str	r1, [sp, #0]
 800a9ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9b0:	4906      	ldr	r1, [pc, #24]	; (800a9cc <__assert_func+0x34>)
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	f000 f9a6 	bl	800ad04 <fiprintf>
 800a9b8:	f000 fc46 	bl	800b248 <abort>
 800a9bc:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <__assert_func+0x38>)
 800a9be:	461c      	mov	r4, r3
 800a9c0:	e7f3      	b.n	800a9aa <__assert_func+0x12>
 800a9c2:	bf00      	nop
 800a9c4:	2000001c 	.word	0x2000001c
 800a9c8:	0800b9c0 	.word	0x0800b9c0
 800a9cc:	0800b9cd 	.word	0x0800b9cd
 800a9d0:	0800b9fb 	.word	0x0800b9fb

0800a9d4 <__sflush_r>:
 800a9d4:	898a      	ldrh	r2, [r1, #12]
 800a9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9da:	4605      	mov	r5, r0
 800a9dc:	0710      	lsls	r0, r2, #28
 800a9de:	460c      	mov	r4, r1
 800a9e0:	d458      	bmi.n	800aa94 <__sflush_r+0xc0>
 800a9e2:	684b      	ldr	r3, [r1, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dc05      	bgt.n	800a9f4 <__sflush_r+0x20>
 800a9e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dc02      	bgt.n	800a9f4 <__sflush_r+0x20>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	d0f9      	beq.n	800a9ee <__sflush_r+0x1a>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa00:	682f      	ldr	r7, [r5, #0]
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	d032      	beq.n	800aa6c <__sflush_r+0x98>
 800aa06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	075a      	lsls	r2, r3, #29
 800aa0c:	d505      	bpl.n	800aa1a <__sflush_r+0x46>
 800aa0e:	6863      	ldr	r3, [r4, #4]
 800aa10:	1ac0      	subs	r0, r0, r3
 800aa12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa14:	b10b      	cbz	r3, 800aa1a <__sflush_r+0x46>
 800aa16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa18:	1ac0      	subs	r0, r0, r3
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa20:	6a21      	ldr	r1, [r4, #32]
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b0      	blx	r6
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	d106      	bne.n	800aa3a <__sflush_r+0x66>
 800aa2c:	6829      	ldr	r1, [r5, #0]
 800aa2e:	291d      	cmp	r1, #29
 800aa30:	d82c      	bhi.n	800aa8c <__sflush_r+0xb8>
 800aa32:	4a2a      	ldr	r2, [pc, #168]	; (800aadc <__sflush_r+0x108>)
 800aa34:	40ca      	lsrs	r2, r1
 800aa36:	07d6      	lsls	r6, r2, #31
 800aa38:	d528      	bpl.n	800aa8c <__sflush_r+0xb8>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	6062      	str	r2, [r4, #4]
 800aa3e:	04d9      	lsls	r1, r3, #19
 800aa40:	6922      	ldr	r2, [r4, #16]
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	d504      	bpl.n	800aa50 <__sflush_r+0x7c>
 800aa46:	1c42      	adds	r2, r0, #1
 800aa48:	d101      	bne.n	800aa4e <__sflush_r+0x7a>
 800aa4a:	682b      	ldr	r3, [r5, #0]
 800aa4c:	b903      	cbnz	r3, 800aa50 <__sflush_r+0x7c>
 800aa4e:	6560      	str	r0, [r4, #84]	; 0x54
 800aa50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa52:	602f      	str	r7, [r5, #0]
 800aa54:	2900      	cmp	r1, #0
 800aa56:	d0ca      	beq.n	800a9ee <__sflush_r+0x1a>
 800aa58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa5c:	4299      	cmp	r1, r3
 800aa5e:	d002      	beq.n	800aa66 <__sflush_r+0x92>
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7ff f907 	bl	8009c74 <_free_r>
 800aa66:	2000      	movs	r0, #0
 800aa68:	6360      	str	r0, [r4, #52]	; 0x34
 800aa6a:	e7c1      	b.n	800a9f0 <__sflush_r+0x1c>
 800aa6c:	6a21      	ldr	r1, [r4, #32]
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4628      	mov	r0, r5
 800aa72:	47b0      	blx	r6
 800aa74:	1c41      	adds	r1, r0, #1
 800aa76:	d1c7      	bne.n	800aa08 <__sflush_r+0x34>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0c4      	beq.n	800aa08 <__sflush_r+0x34>
 800aa7e:	2b1d      	cmp	r3, #29
 800aa80:	d001      	beq.n	800aa86 <__sflush_r+0xb2>
 800aa82:	2b16      	cmp	r3, #22
 800aa84:	d101      	bne.n	800aa8a <__sflush_r+0xb6>
 800aa86:	602f      	str	r7, [r5, #0]
 800aa88:	e7b1      	b.n	800a9ee <__sflush_r+0x1a>
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa90:	81a3      	strh	r3, [r4, #12]
 800aa92:	e7ad      	b.n	800a9f0 <__sflush_r+0x1c>
 800aa94:	690f      	ldr	r7, [r1, #16]
 800aa96:	2f00      	cmp	r7, #0
 800aa98:	d0a9      	beq.n	800a9ee <__sflush_r+0x1a>
 800aa9a:	0793      	lsls	r3, r2, #30
 800aa9c:	680e      	ldr	r6, [r1, #0]
 800aa9e:	bf08      	it	eq
 800aaa0:	694b      	ldreq	r3, [r1, #20]
 800aaa2:	600f      	str	r7, [r1, #0]
 800aaa4:	bf18      	it	ne
 800aaa6:	2300      	movne	r3, #0
 800aaa8:	eba6 0807 	sub.w	r8, r6, r7
 800aaac:	608b      	str	r3, [r1, #8]
 800aaae:	f1b8 0f00 	cmp.w	r8, #0
 800aab2:	dd9c      	ble.n	800a9ee <__sflush_r+0x1a>
 800aab4:	6a21      	ldr	r1, [r4, #32]
 800aab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aab8:	4643      	mov	r3, r8
 800aaba:	463a      	mov	r2, r7
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b0      	blx	r6
 800aac0:	2800      	cmp	r0, #0
 800aac2:	dc06      	bgt.n	800aad2 <__sflush_r+0xfe>
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aad0:	e78e      	b.n	800a9f0 <__sflush_r+0x1c>
 800aad2:	4407      	add	r7, r0
 800aad4:	eba8 0800 	sub.w	r8, r8, r0
 800aad8:	e7e9      	b.n	800aaae <__sflush_r+0xda>
 800aada:	bf00      	nop
 800aadc:	20400001 	.word	0x20400001

0800aae0 <_fflush_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	690b      	ldr	r3, [r1, #16]
 800aae4:	4605      	mov	r5, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	b913      	cbnz	r3, 800aaf0 <_fflush_r+0x10>
 800aaea:	2500      	movs	r5, #0
 800aaec:	4628      	mov	r0, r5
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	b118      	cbz	r0, 800aafa <_fflush_r+0x1a>
 800aaf2:	6983      	ldr	r3, [r0, #24]
 800aaf4:	b90b      	cbnz	r3, 800aafa <_fflush_r+0x1a>
 800aaf6:	f000 f887 	bl	800ac08 <__sinit>
 800aafa:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <_fflush_r+0x6c>)
 800aafc:	429c      	cmp	r4, r3
 800aafe:	d11b      	bne.n	800ab38 <_fflush_r+0x58>
 800ab00:	686c      	ldr	r4, [r5, #4]
 800ab02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0ef      	beq.n	800aaea <_fflush_r+0xa>
 800ab0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab0c:	07d0      	lsls	r0, r2, #31
 800ab0e:	d404      	bmi.n	800ab1a <_fflush_r+0x3a>
 800ab10:	0599      	lsls	r1, r3, #22
 800ab12:	d402      	bmi.n	800ab1a <_fflush_r+0x3a>
 800ab14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab16:	f000 f927 	bl	800ad68 <__retarget_lock_acquire_recursive>
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	f7ff ff59 	bl	800a9d4 <__sflush_r>
 800ab22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab24:	07da      	lsls	r2, r3, #31
 800ab26:	4605      	mov	r5, r0
 800ab28:	d4e0      	bmi.n	800aaec <_fflush_r+0xc>
 800ab2a:	89a3      	ldrh	r3, [r4, #12]
 800ab2c:	059b      	lsls	r3, r3, #22
 800ab2e:	d4dd      	bmi.n	800aaec <_fflush_r+0xc>
 800ab30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab32:	f000 f91a 	bl	800ad6a <__retarget_lock_release_recursive>
 800ab36:	e7d9      	b.n	800aaec <_fflush_r+0xc>
 800ab38:	4b05      	ldr	r3, [pc, #20]	; (800ab50 <_fflush_r+0x70>)
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d101      	bne.n	800ab42 <_fflush_r+0x62>
 800ab3e:	68ac      	ldr	r4, [r5, #8]
 800ab40:	e7df      	b.n	800ab02 <_fflush_r+0x22>
 800ab42:	4b04      	ldr	r3, [pc, #16]	; (800ab54 <_fflush_r+0x74>)
 800ab44:	429c      	cmp	r4, r3
 800ab46:	bf08      	it	eq
 800ab48:	68ec      	ldreq	r4, [r5, #12]
 800ab4a:	e7da      	b.n	800ab02 <_fflush_r+0x22>
 800ab4c:	0800ba1c 	.word	0x0800ba1c
 800ab50:	0800ba3c 	.word	0x0800ba3c
 800ab54:	0800b9fc 	.word	0x0800b9fc

0800ab58 <std>:
 800ab58:	2300      	movs	r3, #0
 800ab5a:	b510      	push	{r4, lr}
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab66:	6083      	str	r3, [r0, #8]
 800ab68:	8181      	strh	r1, [r0, #12]
 800ab6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ab6c:	81c2      	strh	r2, [r0, #14]
 800ab6e:	6183      	str	r3, [r0, #24]
 800ab70:	4619      	mov	r1, r3
 800ab72:	2208      	movs	r2, #8
 800ab74:	305c      	adds	r0, #92	; 0x5c
 800ab76:	f7fb fba1 	bl	80062bc <memset>
 800ab7a:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <std+0x38>)
 800ab7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <std+0x3c>)
 800ab80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab82:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <std+0x40>)
 800ab84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab86:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <std+0x44>)
 800ab88:	6224      	str	r4, [r4, #32]
 800ab8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab8c:	bd10      	pop	{r4, pc}
 800ab8e:	bf00      	nop
 800ab90:	08007065 	.word	0x08007065
 800ab94:	0800708b 	.word	0x0800708b
 800ab98:	080070c3 	.word	0x080070c3
 800ab9c:	080070e7 	.word	0x080070e7

0800aba0 <_cleanup_r>:
 800aba0:	4901      	ldr	r1, [pc, #4]	; (800aba8 <_cleanup_r+0x8>)
 800aba2:	f000 b8c1 	b.w	800ad28 <_fwalk_reent>
 800aba6:	bf00      	nop
 800aba8:	0800aae1 	.word	0x0800aae1

0800abac <__sfmoreglue>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	2268      	movs	r2, #104	; 0x68
 800abb0:	1e4d      	subs	r5, r1, #1
 800abb2:	4355      	muls	r5, r2
 800abb4:	460e      	mov	r6, r1
 800abb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abba:	f7ff f8c7 	bl	8009d4c <_malloc_r>
 800abbe:	4604      	mov	r4, r0
 800abc0:	b140      	cbz	r0, 800abd4 <__sfmoreglue+0x28>
 800abc2:	2100      	movs	r1, #0
 800abc4:	e9c0 1600 	strd	r1, r6, [r0]
 800abc8:	300c      	adds	r0, #12
 800abca:	60a0      	str	r0, [r4, #8]
 800abcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abd0:	f7fb fb74 	bl	80062bc <memset>
 800abd4:	4620      	mov	r0, r4
 800abd6:	bd70      	pop	{r4, r5, r6, pc}

0800abd8 <__sfp_lock_acquire>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__sfp_lock_acquire+0x8>)
 800abda:	f000 b8c5 	b.w	800ad68 <__retarget_lock_acquire_recursive>
 800abde:	bf00      	nop
 800abe0:	20000759 	.word	0x20000759

0800abe4 <__sfp_lock_release>:
 800abe4:	4801      	ldr	r0, [pc, #4]	; (800abec <__sfp_lock_release+0x8>)
 800abe6:	f000 b8c0 	b.w	800ad6a <__retarget_lock_release_recursive>
 800abea:	bf00      	nop
 800abec:	20000759 	.word	0x20000759

0800abf0 <__sinit_lock_acquire>:
 800abf0:	4801      	ldr	r0, [pc, #4]	; (800abf8 <__sinit_lock_acquire+0x8>)
 800abf2:	f000 b8b9 	b.w	800ad68 <__retarget_lock_acquire_recursive>
 800abf6:	bf00      	nop
 800abf8:	2000075a 	.word	0x2000075a

0800abfc <__sinit_lock_release>:
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <__sinit_lock_release+0x8>)
 800abfe:	f000 b8b4 	b.w	800ad6a <__retarget_lock_release_recursive>
 800ac02:	bf00      	nop
 800ac04:	2000075a 	.word	0x2000075a

0800ac08 <__sinit>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	f7ff fff0 	bl	800abf0 <__sinit_lock_acquire>
 800ac10:	69a3      	ldr	r3, [r4, #24]
 800ac12:	b11b      	cbz	r3, 800ac1c <__sinit+0x14>
 800ac14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac18:	f7ff bff0 	b.w	800abfc <__sinit_lock_release>
 800ac1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac20:	6523      	str	r3, [r4, #80]	; 0x50
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <__sinit+0x68>)
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <__sinit+0x6c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	bf04      	itt	eq
 800ac2e:	2301      	moveq	r3, #1
 800ac30:	61a3      	streq	r3, [r4, #24]
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 f820 	bl	800ac78 <__sfp>
 800ac38:	6060      	str	r0, [r4, #4]
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 f81c 	bl	800ac78 <__sfp>
 800ac40:	60a0      	str	r0, [r4, #8]
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f818 	bl	800ac78 <__sfp>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	60e0      	str	r0, [r4, #12]
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	6860      	ldr	r0, [r4, #4]
 800ac50:	f7ff ff82 	bl	800ab58 <std>
 800ac54:	68a0      	ldr	r0, [r4, #8]
 800ac56:	2201      	movs	r2, #1
 800ac58:	2109      	movs	r1, #9
 800ac5a:	f7ff ff7d 	bl	800ab58 <std>
 800ac5e:	68e0      	ldr	r0, [r4, #12]
 800ac60:	2202      	movs	r2, #2
 800ac62:	2112      	movs	r1, #18
 800ac64:	f7ff ff78 	bl	800ab58 <std>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	61a3      	str	r3, [r4, #24]
 800ac6c:	e7d2      	b.n	800ac14 <__sinit+0xc>
 800ac6e:	bf00      	nop
 800ac70:	0800b5a4 	.word	0x0800b5a4
 800ac74:	0800aba1 	.word	0x0800aba1

0800ac78 <__sfp>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	f7ff ffac 	bl	800abd8 <__sfp_lock_acquire>
 800ac80:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <__sfp+0x84>)
 800ac82:	681e      	ldr	r6, [r3, #0]
 800ac84:	69b3      	ldr	r3, [r6, #24]
 800ac86:	b913      	cbnz	r3, 800ac8e <__sfp+0x16>
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f7ff ffbd 	bl	800ac08 <__sinit>
 800ac8e:	3648      	adds	r6, #72	; 0x48
 800ac90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	d503      	bpl.n	800aca0 <__sfp+0x28>
 800ac98:	6833      	ldr	r3, [r6, #0]
 800ac9a:	b30b      	cbz	r3, 800ace0 <__sfp+0x68>
 800ac9c:	6836      	ldr	r6, [r6, #0]
 800ac9e:	e7f7      	b.n	800ac90 <__sfp+0x18>
 800aca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aca4:	b9d5      	cbnz	r5, 800acdc <__sfp+0x64>
 800aca6:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <__sfp+0x88>)
 800aca8:	60e3      	str	r3, [r4, #12]
 800acaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acae:	6665      	str	r5, [r4, #100]	; 0x64
 800acb0:	f000 f859 	bl	800ad66 <__retarget_lock_init_recursive>
 800acb4:	f7ff ff96 	bl	800abe4 <__sfp_lock_release>
 800acb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acc0:	6025      	str	r5, [r4, #0]
 800acc2:	61a5      	str	r5, [r4, #24]
 800acc4:	2208      	movs	r2, #8
 800acc6:	4629      	mov	r1, r5
 800acc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800accc:	f7fb faf6 	bl	80062bc <memset>
 800acd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acd8:	4620      	mov	r0, r4
 800acda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acdc:	3468      	adds	r4, #104	; 0x68
 800acde:	e7d9      	b.n	800ac94 <__sfp+0x1c>
 800ace0:	2104      	movs	r1, #4
 800ace2:	4638      	mov	r0, r7
 800ace4:	f7ff ff62 	bl	800abac <__sfmoreglue>
 800ace8:	4604      	mov	r4, r0
 800acea:	6030      	str	r0, [r6, #0]
 800acec:	2800      	cmp	r0, #0
 800acee:	d1d5      	bne.n	800ac9c <__sfp+0x24>
 800acf0:	f7ff ff78 	bl	800abe4 <__sfp_lock_release>
 800acf4:	230c      	movs	r3, #12
 800acf6:	603b      	str	r3, [r7, #0]
 800acf8:	e7ee      	b.n	800acd8 <__sfp+0x60>
 800acfa:	bf00      	nop
 800acfc:	0800b5a4 	.word	0x0800b5a4
 800ad00:	ffff0001 	.word	0xffff0001

0800ad04 <fiprintf>:
 800ad04:	b40e      	push	{r1, r2, r3}
 800ad06:	b503      	push	{r0, r1, lr}
 800ad08:	4601      	mov	r1, r0
 800ad0a:	ab03      	add	r3, sp, #12
 800ad0c:	4805      	ldr	r0, [pc, #20]	; (800ad24 <fiprintf+0x20>)
 800ad0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad12:	6800      	ldr	r0, [r0, #0]
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	f000 f8a7 	bl	800ae68 <_vfiprintf_r>
 800ad1a:	b002      	add	sp, #8
 800ad1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad20:	b003      	add	sp, #12
 800ad22:	4770      	bx	lr
 800ad24:	2000001c 	.word	0x2000001c

0800ad28 <_fwalk_reent>:
 800ad28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	4688      	mov	r8, r1
 800ad30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad34:	2700      	movs	r7, #0
 800ad36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad3a:	f1b9 0901 	subs.w	r9, r9, #1
 800ad3e:	d505      	bpl.n	800ad4c <_fwalk_reent+0x24>
 800ad40:	6824      	ldr	r4, [r4, #0]
 800ad42:	2c00      	cmp	r4, #0
 800ad44:	d1f7      	bne.n	800ad36 <_fwalk_reent+0xe>
 800ad46:	4638      	mov	r0, r7
 800ad48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad4c:	89ab      	ldrh	r3, [r5, #12]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d907      	bls.n	800ad62 <_fwalk_reent+0x3a>
 800ad52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad56:	3301      	adds	r3, #1
 800ad58:	d003      	beq.n	800ad62 <_fwalk_reent+0x3a>
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	47c0      	blx	r8
 800ad60:	4307      	orrs	r7, r0
 800ad62:	3568      	adds	r5, #104	; 0x68
 800ad64:	e7e9      	b.n	800ad3a <_fwalk_reent+0x12>

0800ad66 <__retarget_lock_init_recursive>:
 800ad66:	4770      	bx	lr

0800ad68 <__retarget_lock_acquire_recursive>:
 800ad68:	4770      	bx	lr

0800ad6a <__retarget_lock_release_recursive>:
 800ad6a:	4770      	bx	lr

0800ad6c <memmove>:
 800ad6c:	4288      	cmp	r0, r1
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	eb01 0402 	add.w	r4, r1, r2
 800ad74:	d902      	bls.n	800ad7c <memmove+0x10>
 800ad76:	4284      	cmp	r4, r0
 800ad78:	4623      	mov	r3, r4
 800ad7a:	d807      	bhi.n	800ad8c <memmove+0x20>
 800ad7c:	1e43      	subs	r3, r0, #1
 800ad7e:	42a1      	cmp	r1, r4
 800ad80:	d008      	beq.n	800ad94 <memmove+0x28>
 800ad82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad8a:	e7f8      	b.n	800ad7e <memmove+0x12>
 800ad8c:	4402      	add	r2, r0
 800ad8e:	4601      	mov	r1, r0
 800ad90:	428a      	cmp	r2, r1
 800ad92:	d100      	bne.n	800ad96 <memmove+0x2a>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad9e:	e7f7      	b.n	800ad90 <memmove+0x24>

0800ada0 <__malloc_lock>:
 800ada0:	4801      	ldr	r0, [pc, #4]	; (800ada8 <__malloc_lock+0x8>)
 800ada2:	f7ff bfe1 	b.w	800ad68 <__retarget_lock_acquire_recursive>
 800ada6:	bf00      	nop
 800ada8:	20000758 	.word	0x20000758

0800adac <__malloc_unlock>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__malloc_unlock+0x8>)
 800adae:	f7ff bfdc 	b.w	800ad6a <__retarget_lock_release_recursive>
 800adb2:	bf00      	nop
 800adb4:	20000758 	.word	0x20000758

0800adb8 <_realloc_r>:
 800adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adbc:	4680      	mov	r8, r0
 800adbe:	4614      	mov	r4, r2
 800adc0:	460e      	mov	r6, r1
 800adc2:	b921      	cbnz	r1, 800adce <_realloc_r+0x16>
 800adc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc8:	4611      	mov	r1, r2
 800adca:	f7fe bfbf 	b.w	8009d4c <_malloc_r>
 800adce:	b92a      	cbnz	r2, 800addc <_realloc_r+0x24>
 800add0:	f7fe ff50 	bl	8009c74 <_free_r>
 800add4:	4625      	mov	r5, r4
 800add6:	4628      	mov	r0, r5
 800add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800addc:	f000 faa0 	bl	800b320 <_malloc_usable_size_r>
 800ade0:	4284      	cmp	r4, r0
 800ade2:	4607      	mov	r7, r0
 800ade4:	d802      	bhi.n	800adec <_realloc_r+0x34>
 800ade6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adea:	d812      	bhi.n	800ae12 <_realloc_r+0x5a>
 800adec:	4621      	mov	r1, r4
 800adee:	4640      	mov	r0, r8
 800adf0:	f7fe ffac 	bl	8009d4c <_malloc_r>
 800adf4:	4605      	mov	r5, r0
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d0ed      	beq.n	800add6 <_realloc_r+0x1e>
 800adfa:	42bc      	cmp	r4, r7
 800adfc:	4622      	mov	r2, r4
 800adfe:	4631      	mov	r1, r6
 800ae00:	bf28      	it	cs
 800ae02:	463a      	movcs	r2, r7
 800ae04:	f7fb fa4c 	bl	80062a0 <memcpy>
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	f7fe ff32 	bl	8009c74 <_free_r>
 800ae10:	e7e1      	b.n	800add6 <_realloc_r+0x1e>
 800ae12:	4635      	mov	r5, r6
 800ae14:	e7df      	b.n	800add6 <_realloc_r+0x1e>

0800ae16 <__sfputc_r>:
 800ae16:	6893      	ldr	r3, [r2, #8]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	b410      	push	{r4}
 800ae1e:	6093      	str	r3, [r2, #8]
 800ae20:	da08      	bge.n	800ae34 <__sfputc_r+0x1e>
 800ae22:	6994      	ldr	r4, [r2, #24]
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	db01      	blt.n	800ae2c <__sfputc_r+0x16>
 800ae28:	290a      	cmp	r1, #10
 800ae2a:	d103      	bne.n	800ae34 <__sfputc_r+0x1e>
 800ae2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae30:	f000 b94a 	b.w	800b0c8 <__swbuf_r>
 800ae34:	6813      	ldr	r3, [r2, #0]
 800ae36:	1c58      	adds	r0, r3, #1
 800ae38:	6010      	str	r0, [r2, #0]
 800ae3a:	7019      	strb	r1, [r3, #0]
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <__sfputs_r>:
 800ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae46:	4606      	mov	r6, r0
 800ae48:	460f      	mov	r7, r1
 800ae4a:	4614      	mov	r4, r2
 800ae4c:	18d5      	adds	r5, r2, r3
 800ae4e:	42ac      	cmp	r4, r5
 800ae50:	d101      	bne.n	800ae56 <__sfputs_r+0x12>
 800ae52:	2000      	movs	r0, #0
 800ae54:	e007      	b.n	800ae66 <__sfputs_r+0x22>
 800ae56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae5a:	463a      	mov	r2, r7
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff ffda 	bl	800ae16 <__sfputc_r>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	d1f3      	bne.n	800ae4e <__sfputs_r+0xa>
 800ae66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae68 <_vfiprintf_r>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	b09d      	sub	sp, #116	; 0x74
 800ae70:	4614      	mov	r4, r2
 800ae72:	4698      	mov	r8, r3
 800ae74:	4606      	mov	r6, r0
 800ae76:	b118      	cbz	r0, 800ae80 <_vfiprintf_r+0x18>
 800ae78:	6983      	ldr	r3, [r0, #24]
 800ae7a:	b90b      	cbnz	r3, 800ae80 <_vfiprintf_r+0x18>
 800ae7c:	f7ff fec4 	bl	800ac08 <__sinit>
 800ae80:	4b89      	ldr	r3, [pc, #548]	; (800b0a8 <_vfiprintf_r+0x240>)
 800ae82:	429d      	cmp	r5, r3
 800ae84:	d11b      	bne.n	800aebe <_vfiprintf_r+0x56>
 800ae86:	6875      	ldr	r5, [r6, #4]
 800ae88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae8a:	07d9      	lsls	r1, r3, #31
 800ae8c:	d405      	bmi.n	800ae9a <_vfiprintf_r+0x32>
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	059a      	lsls	r2, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_vfiprintf_r+0x32>
 800ae94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae96:	f7ff ff67 	bl	800ad68 <__retarget_lock_acquire_recursive>
 800ae9a:	89ab      	ldrh	r3, [r5, #12]
 800ae9c:	071b      	lsls	r3, r3, #28
 800ae9e:	d501      	bpl.n	800aea4 <_vfiprintf_r+0x3c>
 800aea0:	692b      	ldr	r3, [r5, #16]
 800aea2:	b9eb      	cbnz	r3, 800aee0 <_vfiprintf_r+0x78>
 800aea4:	4629      	mov	r1, r5
 800aea6:	4630      	mov	r0, r6
 800aea8:	f000 f960 	bl	800b16c <__swsetup_r>
 800aeac:	b1c0      	cbz	r0, 800aee0 <_vfiprintf_r+0x78>
 800aeae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeb0:	07dc      	lsls	r4, r3, #31
 800aeb2:	d50e      	bpl.n	800aed2 <_vfiprintf_r+0x6a>
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb8:	b01d      	add	sp, #116	; 0x74
 800aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebe:	4b7b      	ldr	r3, [pc, #492]	; (800b0ac <_vfiprintf_r+0x244>)
 800aec0:	429d      	cmp	r5, r3
 800aec2:	d101      	bne.n	800aec8 <_vfiprintf_r+0x60>
 800aec4:	68b5      	ldr	r5, [r6, #8]
 800aec6:	e7df      	b.n	800ae88 <_vfiprintf_r+0x20>
 800aec8:	4b79      	ldr	r3, [pc, #484]	; (800b0b0 <_vfiprintf_r+0x248>)
 800aeca:	429d      	cmp	r5, r3
 800aecc:	bf08      	it	eq
 800aece:	68f5      	ldreq	r5, [r6, #12]
 800aed0:	e7da      	b.n	800ae88 <_vfiprintf_r+0x20>
 800aed2:	89ab      	ldrh	r3, [r5, #12]
 800aed4:	0598      	lsls	r0, r3, #22
 800aed6:	d4ed      	bmi.n	800aeb4 <_vfiprintf_r+0x4c>
 800aed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeda:	f7ff ff46 	bl	800ad6a <__retarget_lock_release_recursive>
 800aede:	e7e9      	b.n	800aeb4 <_vfiprintf_r+0x4c>
 800aee0:	2300      	movs	r3, #0
 800aee2:	9309      	str	r3, [sp, #36]	; 0x24
 800aee4:	2320      	movs	r3, #32
 800aee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeea:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeee:	2330      	movs	r3, #48	; 0x30
 800aef0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0b4 <_vfiprintf_r+0x24c>
 800aef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aef8:	f04f 0901 	mov.w	r9, #1
 800aefc:	4623      	mov	r3, r4
 800aefe:	469a      	mov	sl, r3
 800af00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af04:	b10a      	cbz	r2, 800af0a <_vfiprintf_r+0xa2>
 800af06:	2a25      	cmp	r2, #37	; 0x25
 800af08:	d1f9      	bne.n	800aefe <_vfiprintf_r+0x96>
 800af0a:	ebba 0b04 	subs.w	fp, sl, r4
 800af0e:	d00b      	beq.n	800af28 <_vfiprintf_r+0xc0>
 800af10:	465b      	mov	r3, fp
 800af12:	4622      	mov	r2, r4
 800af14:	4629      	mov	r1, r5
 800af16:	4630      	mov	r0, r6
 800af18:	f7ff ff94 	bl	800ae44 <__sfputs_r>
 800af1c:	3001      	adds	r0, #1
 800af1e:	f000 80aa 	beq.w	800b076 <_vfiprintf_r+0x20e>
 800af22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af24:	445a      	add	r2, fp
 800af26:	9209      	str	r2, [sp, #36]	; 0x24
 800af28:	f89a 3000 	ldrb.w	r3, [sl]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80a2 	beq.w	800b076 <_vfiprintf_r+0x20e>
 800af32:	2300      	movs	r3, #0
 800af34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af3c:	f10a 0a01 	add.w	sl, sl, #1
 800af40:	9304      	str	r3, [sp, #16]
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af48:	931a      	str	r3, [sp, #104]	; 0x68
 800af4a:	4654      	mov	r4, sl
 800af4c:	2205      	movs	r2, #5
 800af4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af52:	4858      	ldr	r0, [pc, #352]	; (800b0b4 <_vfiprintf_r+0x24c>)
 800af54:	f7f5 f954 	bl	8000200 <memchr>
 800af58:	9a04      	ldr	r2, [sp, #16]
 800af5a:	b9d8      	cbnz	r0, 800af94 <_vfiprintf_r+0x12c>
 800af5c:	06d1      	lsls	r1, r2, #27
 800af5e:	bf44      	itt	mi
 800af60:	2320      	movmi	r3, #32
 800af62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af66:	0713      	lsls	r3, r2, #28
 800af68:	bf44      	itt	mi
 800af6a:	232b      	movmi	r3, #43	; 0x2b
 800af6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af70:	f89a 3000 	ldrb.w	r3, [sl]
 800af74:	2b2a      	cmp	r3, #42	; 0x2a
 800af76:	d015      	beq.n	800afa4 <_vfiprintf_r+0x13c>
 800af78:	9a07      	ldr	r2, [sp, #28]
 800af7a:	4654      	mov	r4, sl
 800af7c:	2000      	movs	r0, #0
 800af7e:	f04f 0c0a 	mov.w	ip, #10
 800af82:	4621      	mov	r1, r4
 800af84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af88:	3b30      	subs	r3, #48	; 0x30
 800af8a:	2b09      	cmp	r3, #9
 800af8c:	d94e      	bls.n	800b02c <_vfiprintf_r+0x1c4>
 800af8e:	b1b0      	cbz	r0, 800afbe <_vfiprintf_r+0x156>
 800af90:	9207      	str	r2, [sp, #28]
 800af92:	e014      	b.n	800afbe <_vfiprintf_r+0x156>
 800af94:	eba0 0308 	sub.w	r3, r0, r8
 800af98:	fa09 f303 	lsl.w	r3, r9, r3
 800af9c:	4313      	orrs	r3, r2
 800af9e:	9304      	str	r3, [sp, #16]
 800afa0:	46a2      	mov	sl, r4
 800afa2:	e7d2      	b.n	800af4a <_vfiprintf_r+0xe2>
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	1d19      	adds	r1, r3, #4
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	9103      	str	r1, [sp, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	bfbb      	ittet	lt
 800afb0:	425b      	neglt	r3, r3
 800afb2:	f042 0202 	orrlt.w	r2, r2, #2
 800afb6:	9307      	strge	r3, [sp, #28]
 800afb8:	9307      	strlt	r3, [sp, #28]
 800afba:	bfb8      	it	lt
 800afbc:	9204      	strlt	r2, [sp, #16]
 800afbe:	7823      	ldrb	r3, [r4, #0]
 800afc0:	2b2e      	cmp	r3, #46	; 0x2e
 800afc2:	d10c      	bne.n	800afde <_vfiprintf_r+0x176>
 800afc4:	7863      	ldrb	r3, [r4, #1]
 800afc6:	2b2a      	cmp	r3, #42	; 0x2a
 800afc8:	d135      	bne.n	800b036 <_vfiprintf_r+0x1ce>
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	1d1a      	adds	r2, r3, #4
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	9203      	str	r2, [sp, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bfb8      	it	lt
 800afd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afda:	3402      	adds	r4, #2
 800afdc:	9305      	str	r3, [sp, #20]
 800afde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0c4 <_vfiprintf_r+0x25c>
 800afe2:	7821      	ldrb	r1, [r4, #0]
 800afe4:	2203      	movs	r2, #3
 800afe6:	4650      	mov	r0, sl
 800afe8:	f7f5 f90a 	bl	8000200 <memchr>
 800afec:	b140      	cbz	r0, 800b000 <_vfiprintf_r+0x198>
 800afee:	2340      	movs	r3, #64	; 0x40
 800aff0:	eba0 000a 	sub.w	r0, r0, sl
 800aff4:	fa03 f000 	lsl.w	r0, r3, r0
 800aff8:	9b04      	ldr	r3, [sp, #16]
 800affa:	4303      	orrs	r3, r0
 800affc:	3401      	adds	r4, #1
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b004:	482c      	ldr	r0, [pc, #176]	; (800b0b8 <_vfiprintf_r+0x250>)
 800b006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b00a:	2206      	movs	r2, #6
 800b00c:	f7f5 f8f8 	bl	8000200 <memchr>
 800b010:	2800      	cmp	r0, #0
 800b012:	d03f      	beq.n	800b094 <_vfiprintf_r+0x22c>
 800b014:	4b29      	ldr	r3, [pc, #164]	; (800b0bc <_vfiprintf_r+0x254>)
 800b016:	bb1b      	cbnz	r3, 800b060 <_vfiprintf_r+0x1f8>
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	3307      	adds	r3, #7
 800b01c:	f023 0307 	bic.w	r3, r3, #7
 800b020:	3308      	adds	r3, #8
 800b022:	9303      	str	r3, [sp, #12]
 800b024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b026:	443b      	add	r3, r7
 800b028:	9309      	str	r3, [sp, #36]	; 0x24
 800b02a:	e767      	b.n	800aefc <_vfiprintf_r+0x94>
 800b02c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b030:	460c      	mov	r4, r1
 800b032:	2001      	movs	r0, #1
 800b034:	e7a5      	b.n	800af82 <_vfiprintf_r+0x11a>
 800b036:	2300      	movs	r3, #0
 800b038:	3401      	adds	r4, #1
 800b03a:	9305      	str	r3, [sp, #20]
 800b03c:	4619      	mov	r1, r3
 800b03e:	f04f 0c0a 	mov.w	ip, #10
 800b042:	4620      	mov	r0, r4
 800b044:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b048:	3a30      	subs	r2, #48	; 0x30
 800b04a:	2a09      	cmp	r2, #9
 800b04c:	d903      	bls.n	800b056 <_vfiprintf_r+0x1ee>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0c5      	beq.n	800afde <_vfiprintf_r+0x176>
 800b052:	9105      	str	r1, [sp, #20]
 800b054:	e7c3      	b.n	800afde <_vfiprintf_r+0x176>
 800b056:	fb0c 2101 	mla	r1, ip, r1, r2
 800b05a:	4604      	mov	r4, r0
 800b05c:	2301      	movs	r3, #1
 800b05e:	e7f0      	b.n	800b042 <_vfiprintf_r+0x1da>
 800b060:	ab03      	add	r3, sp, #12
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	462a      	mov	r2, r5
 800b066:	4b16      	ldr	r3, [pc, #88]	; (800b0c0 <_vfiprintf_r+0x258>)
 800b068:	a904      	add	r1, sp, #16
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7fb f9ce 	bl	800640c <_printf_float>
 800b070:	4607      	mov	r7, r0
 800b072:	1c78      	adds	r0, r7, #1
 800b074:	d1d6      	bne.n	800b024 <_vfiprintf_r+0x1bc>
 800b076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b078:	07d9      	lsls	r1, r3, #31
 800b07a:	d405      	bmi.n	800b088 <_vfiprintf_r+0x220>
 800b07c:	89ab      	ldrh	r3, [r5, #12]
 800b07e:	059a      	lsls	r2, r3, #22
 800b080:	d402      	bmi.n	800b088 <_vfiprintf_r+0x220>
 800b082:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b084:	f7ff fe71 	bl	800ad6a <__retarget_lock_release_recursive>
 800b088:	89ab      	ldrh	r3, [r5, #12]
 800b08a:	065b      	lsls	r3, r3, #25
 800b08c:	f53f af12 	bmi.w	800aeb4 <_vfiprintf_r+0x4c>
 800b090:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b092:	e711      	b.n	800aeb8 <_vfiprintf_r+0x50>
 800b094:	ab03      	add	r3, sp, #12
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	462a      	mov	r2, r5
 800b09a:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <_vfiprintf_r+0x258>)
 800b09c:	a904      	add	r1, sp, #16
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7fb fc58 	bl	8006954 <_printf_i>
 800b0a4:	e7e4      	b.n	800b070 <_vfiprintf_r+0x208>
 800b0a6:	bf00      	nop
 800b0a8:	0800ba1c 	.word	0x0800ba1c
 800b0ac:	0800ba3c 	.word	0x0800ba3c
 800b0b0:	0800b9fc 	.word	0x0800b9fc
 800b0b4:	0800b994 	.word	0x0800b994
 800b0b8:	0800b99e 	.word	0x0800b99e
 800b0bc:	0800640d 	.word	0x0800640d
 800b0c0:	0800ae45 	.word	0x0800ae45
 800b0c4:	0800b99a 	.word	0x0800b99a

0800b0c8 <__swbuf_r>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	460e      	mov	r6, r1
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	b118      	cbz	r0, 800b0da <__swbuf_r+0x12>
 800b0d2:	6983      	ldr	r3, [r0, #24]
 800b0d4:	b90b      	cbnz	r3, 800b0da <__swbuf_r+0x12>
 800b0d6:	f7ff fd97 	bl	800ac08 <__sinit>
 800b0da:	4b21      	ldr	r3, [pc, #132]	; (800b160 <__swbuf_r+0x98>)
 800b0dc:	429c      	cmp	r4, r3
 800b0de:	d12b      	bne.n	800b138 <__swbuf_r+0x70>
 800b0e0:	686c      	ldr	r4, [r5, #4]
 800b0e2:	69a3      	ldr	r3, [r4, #24]
 800b0e4:	60a3      	str	r3, [r4, #8]
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	071a      	lsls	r2, r3, #28
 800b0ea:	d52f      	bpl.n	800b14c <__swbuf_r+0x84>
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	b36b      	cbz	r3, 800b14c <__swbuf_r+0x84>
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	6820      	ldr	r0, [r4, #0]
 800b0f4:	1ac0      	subs	r0, r0, r3
 800b0f6:	6963      	ldr	r3, [r4, #20]
 800b0f8:	b2f6      	uxtb	r6, r6
 800b0fa:	4283      	cmp	r3, r0
 800b0fc:	4637      	mov	r7, r6
 800b0fe:	dc04      	bgt.n	800b10a <__swbuf_r+0x42>
 800b100:	4621      	mov	r1, r4
 800b102:	4628      	mov	r0, r5
 800b104:	f7ff fcec 	bl	800aae0 <_fflush_r>
 800b108:	bb30      	cbnz	r0, 800b158 <__swbuf_r+0x90>
 800b10a:	68a3      	ldr	r3, [r4, #8]
 800b10c:	3b01      	subs	r3, #1
 800b10e:	60a3      	str	r3, [r4, #8]
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	6022      	str	r2, [r4, #0]
 800b116:	701e      	strb	r6, [r3, #0]
 800b118:	6963      	ldr	r3, [r4, #20]
 800b11a:	3001      	adds	r0, #1
 800b11c:	4283      	cmp	r3, r0
 800b11e:	d004      	beq.n	800b12a <__swbuf_r+0x62>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	07db      	lsls	r3, r3, #31
 800b124:	d506      	bpl.n	800b134 <__swbuf_r+0x6c>
 800b126:	2e0a      	cmp	r6, #10
 800b128:	d104      	bne.n	800b134 <__swbuf_r+0x6c>
 800b12a:	4621      	mov	r1, r4
 800b12c:	4628      	mov	r0, r5
 800b12e:	f7ff fcd7 	bl	800aae0 <_fflush_r>
 800b132:	b988      	cbnz	r0, 800b158 <__swbuf_r+0x90>
 800b134:	4638      	mov	r0, r7
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b138:	4b0a      	ldr	r3, [pc, #40]	; (800b164 <__swbuf_r+0x9c>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <__swbuf_r+0x7a>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7cf      	b.n	800b0e2 <__swbuf_r+0x1a>
 800b142:	4b09      	ldr	r3, [pc, #36]	; (800b168 <__swbuf_r+0xa0>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7ca      	b.n	800b0e2 <__swbuf_r+0x1a>
 800b14c:	4621      	mov	r1, r4
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 f80c 	bl	800b16c <__swsetup_r>
 800b154:	2800      	cmp	r0, #0
 800b156:	d0cb      	beq.n	800b0f0 <__swbuf_r+0x28>
 800b158:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b15c:	e7ea      	b.n	800b134 <__swbuf_r+0x6c>
 800b15e:	bf00      	nop
 800b160:	0800ba1c 	.word	0x0800ba1c
 800b164:	0800ba3c 	.word	0x0800ba3c
 800b168:	0800b9fc 	.word	0x0800b9fc

0800b16c <__swsetup_r>:
 800b16c:	4b32      	ldr	r3, [pc, #200]	; (800b238 <__swsetup_r+0xcc>)
 800b16e:	b570      	push	{r4, r5, r6, lr}
 800b170:	681d      	ldr	r5, [r3, #0]
 800b172:	4606      	mov	r6, r0
 800b174:	460c      	mov	r4, r1
 800b176:	b125      	cbz	r5, 800b182 <__swsetup_r+0x16>
 800b178:	69ab      	ldr	r3, [r5, #24]
 800b17a:	b913      	cbnz	r3, 800b182 <__swsetup_r+0x16>
 800b17c:	4628      	mov	r0, r5
 800b17e:	f7ff fd43 	bl	800ac08 <__sinit>
 800b182:	4b2e      	ldr	r3, [pc, #184]	; (800b23c <__swsetup_r+0xd0>)
 800b184:	429c      	cmp	r4, r3
 800b186:	d10f      	bne.n	800b1a8 <__swsetup_r+0x3c>
 800b188:	686c      	ldr	r4, [r5, #4]
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b190:	0719      	lsls	r1, r3, #28
 800b192:	d42c      	bmi.n	800b1ee <__swsetup_r+0x82>
 800b194:	06dd      	lsls	r5, r3, #27
 800b196:	d411      	bmi.n	800b1bc <__swsetup_r+0x50>
 800b198:	2309      	movs	r3, #9
 800b19a:	6033      	str	r3, [r6, #0]
 800b19c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1a0:	81a3      	strh	r3, [r4, #12]
 800b1a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1a6:	e03e      	b.n	800b226 <__swsetup_r+0xba>
 800b1a8:	4b25      	ldr	r3, [pc, #148]	; (800b240 <__swsetup_r+0xd4>)
 800b1aa:	429c      	cmp	r4, r3
 800b1ac:	d101      	bne.n	800b1b2 <__swsetup_r+0x46>
 800b1ae:	68ac      	ldr	r4, [r5, #8]
 800b1b0:	e7eb      	b.n	800b18a <__swsetup_r+0x1e>
 800b1b2:	4b24      	ldr	r3, [pc, #144]	; (800b244 <__swsetup_r+0xd8>)
 800b1b4:	429c      	cmp	r4, r3
 800b1b6:	bf08      	it	eq
 800b1b8:	68ec      	ldreq	r4, [r5, #12]
 800b1ba:	e7e6      	b.n	800b18a <__swsetup_r+0x1e>
 800b1bc:	0758      	lsls	r0, r3, #29
 800b1be:	d512      	bpl.n	800b1e6 <__swsetup_r+0x7a>
 800b1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1c2:	b141      	cbz	r1, 800b1d6 <__swsetup_r+0x6a>
 800b1c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1c8:	4299      	cmp	r1, r3
 800b1ca:	d002      	beq.n	800b1d2 <__swsetup_r+0x66>
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f7fe fd51 	bl	8009c74 <_free_r>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	6063      	str	r3, [r4, #4]
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f043 0308 	orr.w	r3, r3, #8
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	6923      	ldr	r3, [r4, #16]
 800b1f0:	b94b      	cbnz	r3, 800b206 <__swsetup_r+0x9a>
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1fc:	d003      	beq.n	800b206 <__swsetup_r+0x9a>
 800b1fe:	4621      	mov	r1, r4
 800b200:	4630      	mov	r0, r6
 800b202:	f000 f84d 	bl	800b2a0 <__smakebuf_r>
 800b206:	89a0      	ldrh	r0, [r4, #12]
 800b208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b20c:	f010 0301 	ands.w	r3, r0, #1
 800b210:	d00a      	beq.n	800b228 <__swsetup_r+0xbc>
 800b212:	2300      	movs	r3, #0
 800b214:	60a3      	str	r3, [r4, #8]
 800b216:	6963      	ldr	r3, [r4, #20]
 800b218:	425b      	negs	r3, r3
 800b21a:	61a3      	str	r3, [r4, #24]
 800b21c:	6923      	ldr	r3, [r4, #16]
 800b21e:	b943      	cbnz	r3, 800b232 <__swsetup_r+0xc6>
 800b220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b224:	d1ba      	bne.n	800b19c <__swsetup_r+0x30>
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	0781      	lsls	r1, r0, #30
 800b22a:	bf58      	it	pl
 800b22c:	6963      	ldrpl	r3, [r4, #20]
 800b22e:	60a3      	str	r3, [r4, #8]
 800b230:	e7f4      	b.n	800b21c <__swsetup_r+0xb0>
 800b232:	2000      	movs	r0, #0
 800b234:	e7f7      	b.n	800b226 <__swsetup_r+0xba>
 800b236:	bf00      	nop
 800b238:	2000001c 	.word	0x2000001c
 800b23c:	0800ba1c 	.word	0x0800ba1c
 800b240:	0800ba3c 	.word	0x0800ba3c
 800b244:	0800b9fc 	.word	0x0800b9fc

0800b248 <abort>:
 800b248:	b508      	push	{r3, lr}
 800b24a:	2006      	movs	r0, #6
 800b24c:	f000 f898 	bl	800b380 <raise>
 800b250:	2001      	movs	r0, #1
 800b252:	f7f7 f8fb 	bl	800244c <_exit>

0800b256 <__swhatbuf_r>:
 800b256:	b570      	push	{r4, r5, r6, lr}
 800b258:	460e      	mov	r6, r1
 800b25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25e:	2900      	cmp	r1, #0
 800b260:	b096      	sub	sp, #88	; 0x58
 800b262:	4614      	mov	r4, r2
 800b264:	461d      	mov	r5, r3
 800b266:	da08      	bge.n	800b27a <__swhatbuf_r+0x24>
 800b268:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	602a      	str	r2, [r5, #0]
 800b270:	061a      	lsls	r2, r3, #24
 800b272:	d410      	bmi.n	800b296 <__swhatbuf_r+0x40>
 800b274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b278:	e00e      	b.n	800b298 <__swhatbuf_r+0x42>
 800b27a:	466a      	mov	r2, sp
 800b27c:	f000 f89c 	bl	800b3b8 <_fstat_r>
 800b280:	2800      	cmp	r0, #0
 800b282:	dbf1      	blt.n	800b268 <__swhatbuf_r+0x12>
 800b284:	9a01      	ldr	r2, [sp, #4]
 800b286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b28a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b28e:	425a      	negs	r2, r3
 800b290:	415a      	adcs	r2, r3
 800b292:	602a      	str	r2, [r5, #0]
 800b294:	e7ee      	b.n	800b274 <__swhatbuf_r+0x1e>
 800b296:	2340      	movs	r3, #64	; 0x40
 800b298:	2000      	movs	r0, #0
 800b29a:	6023      	str	r3, [r4, #0]
 800b29c:	b016      	add	sp, #88	; 0x58
 800b29e:	bd70      	pop	{r4, r5, r6, pc}

0800b2a0 <__smakebuf_r>:
 800b2a0:	898b      	ldrh	r3, [r1, #12]
 800b2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2a4:	079d      	lsls	r5, r3, #30
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	d507      	bpl.n	800b2bc <__smakebuf_r+0x1c>
 800b2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	6163      	str	r3, [r4, #20]
 800b2b8:	b002      	add	sp, #8
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	ab01      	add	r3, sp, #4
 800b2be:	466a      	mov	r2, sp
 800b2c0:	f7ff ffc9 	bl	800b256 <__swhatbuf_r>
 800b2c4:	9900      	ldr	r1, [sp, #0]
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f7fe fd3f 	bl	8009d4c <_malloc_r>
 800b2ce:	b948      	cbnz	r0, 800b2e4 <__smakebuf_r+0x44>
 800b2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2d4:	059a      	lsls	r2, r3, #22
 800b2d6:	d4ef      	bmi.n	800b2b8 <__smakebuf_r+0x18>
 800b2d8:	f023 0303 	bic.w	r3, r3, #3
 800b2dc:	f043 0302 	orr.w	r3, r3, #2
 800b2e0:	81a3      	strh	r3, [r4, #12]
 800b2e2:	e7e3      	b.n	800b2ac <__smakebuf_r+0xc>
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <__smakebuf_r+0x7c>)
 800b2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	6020      	str	r0, [r4, #0]
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	81a3      	strh	r3, [r4, #12]
 800b2f2:	9b00      	ldr	r3, [sp, #0]
 800b2f4:	6163      	str	r3, [r4, #20]
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	6120      	str	r0, [r4, #16]
 800b2fa:	b15b      	cbz	r3, 800b314 <__smakebuf_r+0x74>
 800b2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b300:	4630      	mov	r0, r6
 800b302:	f000 f86b 	bl	800b3dc <_isatty_r>
 800b306:	b128      	cbz	r0, 800b314 <__smakebuf_r+0x74>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	f043 0301 	orr.w	r3, r3, #1
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	89a0      	ldrh	r0, [r4, #12]
 800b316:	4305      	orrs	r5, r0
 800b318:	81a5      	strh	r5, [r4, #12]
 800b31a:	e7cd      	b.n	800b2b8 <__smakebuf_r+0x18>
 800b31c:	0800aba1 	.word	0x0800aba1

0800b320 <_malloc_usable_size_r>:
 800b320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b324:	1f18      	subs	r0, r3, #4
 800b326:	2b00      	cmp	r3, #0
 800b328:	bfbc      	itt	lt
 800b32a:	580b      	ldrlt	r3, [r1, r0]
 800b32c:	18c0      	addlt	r0, r0, r3
 800b32e:	4770      	bx	lr

0800b330 <_raise_r>:
 800b330:	291f      	cmp	r1, #31
 800b332:	b538      	push	{r3, r4, r5, lr}
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	d904      	bls.n	800b344 <_raise_r+0x14>
 800b33a:	2316      	movs	r3, #22
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b346:	b112      	cbz	r2, 800b34e <_raise_r+0x1e>
 800b348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b34c:	b94b      	cbnz	r3, 800b362 <_raise_r+0x32>
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f830 	bl	800b3b4 <_getpid_r>
 800b354:	462a      	mov	r2, r5
 800b356:	4601      	mov	r1, r0
 800b358:	4620      	mov	r0, r4
 800b35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35e:	f000 b817 	b.w	800b390 <_kill_r>
 800b362:	2b01      	cmp	r3, #1
 800b364:	d00a      	beq.n	800b37c <_raise_r+0x4c>
 800b366:	1c59      	adds	r1, r3, #1
 800b368:	d103      	bne.n	800b372 <_raise_r+0x42>
 800b36a:	2316      	movs	r3, #22
 800b36c:	6003      	str	r3, [r0, #0]
 800b36e:	2001      	movs	r0, #1
 800b370:	e7e7      	b.n	800b342 <_raise_r+0x12>
 800b372:	2400      	movs	r4, #0
 800b374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b378:	4628      	mov	r0, r5
 800b37a:	4798      	blx	r3
 800b37c:	2000      	movs	r0, #0
 800b37e:	e7e0      	b.n	800b342 <_raise_r+0x12>

0800b380 <raise>:
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <raise+0xc>)
 800b382:	4601      	mov	r1, r0
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	f7ff bfd3 	b.w	800b330 <_raise_r>
 800b38a:	bf00      	nop
 800b38c:	2000001c 	.word	0x2000001c

0800b390 <_kill_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_kill_r+0x20>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f7f7 f84d 	bl	800243c <_kill>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_kill_r+0x1c>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_kill_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000754 	.word	0x20000754

0800b3b4 <_getpid_r>:
 800b3b4:	f7f7 b840 	b.w	8002438 <_getpid>

0800b3b8 <_fstat_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d07      	ldr	r5, [pc, #28]	; (800b3d8 <_fstat_r+0x20>)
 800b3bc:	2300      	movs	r3, #0
 800b3be:	4604      	mov	r4, r0
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	602b      	str	r3, [r5, #0]
 800b3c6:	f7f7 f86d 	bl	80024a4 <_fstat>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	d102      	bne.n	800b3d4 <_fstat_r+0x1c>
 800b3ce:	682b      	ldr	r3, [r5, #0]
 800b3d0:	b103      	cbz	r3, 800b3d4 <_fstat_r+0x1c>
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	bd38      	pop	{r3, r4, r5, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000754 	.word	0x20000754

0800b3dc <_isatty_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4d06      	ldr	r5, [pc, #24]	; (800b3f8 <_isatty_r+0x1c>)
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	602b      	str	r3, [r5, #0]
 800b3e8:	f7f7 f862 	bl	80024b0 <_isatty>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_isatty_r+0x1a>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_isatty_r+0x1a>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20000754 	.word	0x20000754
 800b3fc:	00000000 	.word	0x00000000

0800b400 <floor>:
 800b400:	ec51 0b10 	vmov	r0, r1, d0
 800b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b408:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b40c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b410:	2e13      	cmp	r6, #19
 800b412:	ee10 5a10 	vmov	r5, s0
 800b416:	ee10 8a10 	vmov	r8, s0
 800b41a:	460c      	mov	r4, r1
 800b41c:	dc32      	bgt.n	800b484 <floor+0x84>
 800b41e:	2e00      	cmp	r6, #0
 800b420:	da14      	bge.n	800b44c <floor+0x4c>
 800b422:	a333      	add	r3, pc, #204	; (adr r3, 800b4f0 <floor+0xf0>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	f7f4 ff40 	bl	80002ac <__adddf3>
 800b42c:	2200      	movs	r2, #0
 800b42e:	2300      	movs	r3, #0
 800b430:	f7f5 fb82 	bl	8000b38 <__aeabi_dcmpgt>
 800b434:	b138      	cbz	r0, 800b446 <floor+0x46>
 800b436:	2c00      	cmp	r4, #0
 800b438:	da57      	bge.n	800b4ea <floor+0xea>
 800b43a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b43e:	431d      	orrs	r5, r3
 800b440:	d001      	beq.n	800b446 <floor+0x46>
 800b442:	4c2d      	ldr	r4, [pc, #180]	; (800b4f8 <floor+0xf8>)
 800b444:	2500      	movs	r5, #0
 800b446:	4621      	mov	r1, r4
 800b448:	4628      	mov	r0, r5
 800b44a:	e025      	b.n	800b498 <floor+0x98>
 800b44c:	4f2b      	ldr	r7, [pc, #172]	; (800b4fc <floor+0xfc>)
 800b44e:	4137      	asrs	r7, r6
 800b450:	ea01 0307 	and.w	r3, r1, r7
 800b454:	4303      	orrs	r3, r0
 800b456:	d01f      	beq.n	800b498 <floor+0x98>
 800b458:	a325      	add	r3, pc, #148	; (adr r3, 800b4f0 <floor+0xf0>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f4 ff25 	bl	80002ac <__adddf3>
 800b462:	2200      	movs	r2, #0
 800b464:	2300      	movs	r3, #0
 800b466:	f7f5 fb67 	bl	8000b38 <__aeabi_dcmpgt>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d0eb      	beq.n	800b446 <floor+0x46>
 800b46e:	2c00      	cmp	r4, #0
 800b470:	bfbe      	ittt	lt
 800b472:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b476:	fa43 f606 	asrlt.w	r6, r3, r6
 800b47a:	19a4      	addlt	r4, r4, r6
 800b47c:	ea24 0407 	bic.w	r4, r4, r7
 800b480:	2500      	movs	r5, #0
 800b482:	e7e0      	b.n	800b446 <floor+0x46>
 800b484:	2e33      	cmp	r6, #51	; 0x33
 800b486:	dd0b      	ble.n	800b4a0 <floor+0xa0>
 800b488:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b48c:	d104      	bne.n	800b498 <floor+0x98>
 800b48e:	ee10 2a10 	vmov	r2, s0
 800b492:	460b      	mov	r3, r1
 800b494:	f7f4 ff0a 	bl	80002ac <__adddf3>
 800b498:	ec41 0b10 	vmov	d0, r0, r1
 800b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4a8:	fa23 f707 	lsr.w	r7, r3, r7
 800b4ac:	4207      	tst	r7, r0
 800b4ae:	d0f3      	beq.n	800b498 <floor+0x98>
 800b4b0:	a30f      	add	r3, pc, #60	; (adr r3, 800b4f0 <floor+0xf0>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f4 fef9 	bl	80002ac <__adddf3>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f7f5 fb3b 	bl	8000b38 <__aeabi_dcmpgt>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d0bf      	beq.n	800b446 <floor+0x46>
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	da02      	bge.n	800b4d0 <floor+0xd0>
 800b4ca:	2e14      	cmp	r6, #20
 800b4cc:	d103      	bne.n	800b4d6 <floor+0xd6>
 800b4ce:	3401      	adds	r4, #1
 800b4d0:	ea25 0507 	bic.w	r5, r5, r7
 800b4d4:	e7b7      	b.n	800b446 <floor+0x46>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b4dc:	fa03 f606 	lsl.w	r6, r3, r6
 800b4e0:	4435      	add	r5, r6
 800b4e2:	4545      	cmp	r5, r8
 800b4e4:	bf38      	it	cc
 800b4e6:	18e4      	addcc	r4, r4, r3
 800b4e8:	e7f2      	b.n	800b4d0 <floor+0xd0>
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	462c      	mov	r4, r5
 800b4ee:	e7aa      	b.n	800b446 <floor+0x46>
 800b4f0:	8800759c 	.word	0x8800759c
 800b4f4:	7e37e43c 	.word	0x7e37e43c
 800b4f8:	bff00000 	.word	0xbff00000
 800b4fc:	000fffff 	.word	0x000fffff

0800b500 <_init>:
 800b500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b502:	bf00      	nop
 800b504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b506:	bc08      	pop	{r3}
 800b508:	469e      	mov	lr, r3
 800b50a:	4770      	bx	lr

0800b50c <_fini>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr
